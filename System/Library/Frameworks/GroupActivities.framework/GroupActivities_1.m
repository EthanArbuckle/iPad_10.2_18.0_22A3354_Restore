uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t *v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64)
                bzero(v34, 8 * v33);
              else
                *v34 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v29 = *(_QWORD *)v28;
      v35 = *(_OWORD *)(v28 + 8);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_QWORD *)v17 = v29;
      *(_OWORD *)(v17 + 8) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  _BYTE v34[56];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v31 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_34;
      v19 = *(_QWORD *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v32)
              goto LABEL_34;
            v19 = *(_QWORD *)(v33 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v22 = *(_QWORD *)(v5 + 56) + 48 * v16;
    if ((a2 & 1) != 0)
      outlined init with take of TopicManager.ConversationClient.Service(v22, (uint64_t)v34);
    else
      outlined init with copy of TopicManager.ConversationClient.Service(v22, (uint64_t)v34);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v21;
    result = outlined init with take of TopicManager.ConversationClient.Service((uint64_t)v34, *(_QWORD *)(v7 + 56) + 48 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ReliableBroadcastLink.SenderContext>);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (uint64_t *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v20 >= v37)
          goto LABEL_33;
        v21 = v38[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v37)
            goto LABEL_33;
          v21 = v38[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64)
                bzero(v38, 8 * v37);
              else
                *v38 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v21 = v38[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 48 * v19;
      v29 = *(_QWORD *)v28;
      v30 = *(_DWORD *)(v28 + 8);
      v31 = *(_BYTE *)(v28 + 12);
      v32 = *(_DWORD *)(v28 + 16);
      v41 = *(_BYTE *)(v28 + 20);
      v42 = *(_OWORD *)(v28 + 24);
      v33 = *(_QWORD *)(v28 + 40);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 48 * v16;
      *(_QWORD *)v17 = v29;
      *(_DWORD *)(v17 + 8) = v30;
      *(_BYTE *)(v17 + 12) = v31;
      *(_DWORD *)(v17 + 16) = v32;
      *(_BYTE *)(v17 + 20) = v41;
      *(_OWORD *)(v17 + 24) = v42;
      *(_QWORD *)(v17 + 40) = v33;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t *v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ReliableBroadcastLink.SenderContext.PendingMessage>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v8 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v34)
          goto LABEL_33;
        v21 = v35[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v34)
            goto LABEL_33;
          v21 = v35[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v34)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_40;
              }
              if (v32 >= 64)
                bzero(v35, 8 * v34);
              else
                *v35 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v34)
                  goto LABEL_33;
                v21 = v35[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 32 * v19;
      v29 = *(_QWORD *)v28;
      v36 = *(_OWORD *)(v28 + 8);
      v30 = *(_QWORD *)(v28 + 24);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      result = MEMORY[0x1A1B053D0](*(_QWORD *)(v7 + 40), v27, 4);
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 32 * v16;
      *(_QWORD *)v17 = v29;
      *(_OWORD *)(v17 + 8) = v36;
      *(_QWORD *)(v17 + 24) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyCancellable>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  char v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  v44 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_33;
      v25 = v42[v13];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v41)
              goto LABEL_33;
            v25 = v42[v13];
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    v38 = *(_BYTE *)(v35 + 9);
    if ((v44 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    *(_BYTE *)(v20 + 9) = v38;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _BYTE v39[40];

  v6 = v4;
  v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v37 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v8 + 64);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v9 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36)
          goto LABEL_34;
        v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_34;
          v22 = v37[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              v6 = v4;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v8 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v36)
                  goto LABEL_34;
                v22 = v37[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_QWORD *)(v8 + 56) + 40 * v20;
      if ((v38 & 1) != 0)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of AudioSessionAssertionManager(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v10 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
      *v18 = v26;
      v18[1] = v25;
      result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v39, *(_QWORD *)(v10 + 56) + 40 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v6 = v10;
  return result;
}

uint64_t sub_1A0E47A58(id *a1)
{
  return SystemCoordinatorHostManager.state.setter(*a1);
}

uint64_t sub_1A0E47A88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1A0E47AD4()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t ObjC metadata update function for SystemCoordinatorHostManager()
{
  return type metadata accessor for SystemCoordinatorHostManager(0);
}

uint64_t type metadata accessor for SystemCoordinatorHostManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinatorHostManager);
}

void type metadata completion function for SystemCoordinatorHostManager()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Published<[UUID : SystemCoordinatorConfiguration]>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(319);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SystemCoordinatorHostManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.__allocating_init(configurationUpdatesRateLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DispatchTimeInterval();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 24)), (uint64_t *)((char *)a2 + *(int *)(a3 + 24)), v7);
  }
  return a1;
}

uint64_t destroy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for DispatchTimeInterval();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v6(a1 + *(int *)(a2 + 20), v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 24), v4);
}

uint64_t initializeWithCopy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t assignWithCopy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t initializeWithTake for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t assignWithTake for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E47F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E47FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorHostManager.EndpointProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.EndpointProvider.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = type metadata accessor for LinkManager.Attachment(0);
      return outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, type metadata accessor for LinkManager.Attachment);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, PresenceGroupSessionProviderObserver>);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of GroupSessionTable.Storage(a1, v20[7] + 24 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of GroupSessionTable.Storage(a1, v20[7] + 24 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = a2 & 0xFFFFFFFFFFFFLL;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0xFFFFFFFFFFFFLL);
  v11 = v7[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
        return outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, v8, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, v8, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, Conversation>);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
        return outlined init with take of Any(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 24 * v14);
        swift_release();
        result = swift_release();
        *v21 = a1;
        v21[1] = a2;
        v21[2] = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding);
}

{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_release();
      result = swift_release();
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplateRole>, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TopicManager.ConversationClient.Service(a1, v16[7] + 48 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TopicManager.ConversationClient.Service(a1, v16[7] + 48 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  char v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = (_OWORD *)(v16[7] + 48 * v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v18 = a1[1];
      *v17 = *a1;
      v17[1] = v18;
      v17[2] = a1[2];
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_QWORD *)(v16[6] + 8 * v10) = a2;
    v20 = (_OWORD *)(v16[7] + 48 * v10);
    v21 = a1[1];
    *v20 = *a1;
    v20[1] = v21;
    v20[2] = a1[2];
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  unint64_t v25;
  char v26;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (uint64_t *)(v22[7] + 32 * v16);
        swift_bridgeObjectRelease();
        result = swift_release();
        *v23 = a1;
        v23[1] = a2;
        v23[2] = a3;
        v23[3] = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, BackgroundSessionCreationRequest>);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v26 = a1;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, a4);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, v26, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (_QWORD **)v4;
  v27 = a1;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release();
      *(_QWORD *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, a4);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, v27, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        *(_QWORD *)v21 = a1;
        *(_BYTE *)(v21 + 8) = a2 & 1;
        *(_BYTE *)(v21 + 9) = HIBYTE(a2);
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2 & 0xFF01, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  _QWORD *v6;
  _QWORD **v8;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;

  v8 = (_QWORD **)v6;
  v13 = (_QWORD *)*v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v21 = *v8;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7] + 40 * v15;
        __swift_destroy_boxed_opaque_existential_1Tm(v22);
        return a6(a1, v22);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()(a5, (void (*)(_BYTE *, uint64_t))a6);
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1, a5, (void (*)(uint64_t, _BYTE *))a6);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v8;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v15, a2, a3, a1, v21, a6);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for LinkManager.Attachment(0);
  result = outlined init with take of Participant(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for LinkManager.Attachment);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of GroupSessionTable.Storage(a3, a4[7] + 24 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v7 = a4[6] + 8 * a1;
  *(_DWORD *)v7 = a2;
  *(_WORD *)(v7 + 4) = WORD2(a2);
  v8 = a4[7];
  v9 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  result = outlined init with take of Participant(a3, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = outlined init with take of TopicManager.ConversationClient.Service(a3, a4[7] + 48 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a7[6] + 4 * result) = a2;
  v7 = (_QWORD *)(a7[7] + 32 * result);
  *v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5 & 1;
  *(_BYTE *)(v7 + 9) = HIBYTE(a5);
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a5[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = a6(a4, a5[7] + 40 * a1);
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorHost>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for LinkManager.Attachment(0);
  v36 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LinkManager.Attachment>);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38;
        ;
        result = (void *)outlined init with take of Participant(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for LinkManager.Attachment))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    outlined init with copy of Participant(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for LinkManager.Attachment);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release();
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v22 = v20;
    *(_OWORD *)(v22 + 8) = v21;
    swift_retain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>, (void (*)(_BYTE *, uint64_t))outlined init with take of TypedPayloadDecoding);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, PresenceGroupSessionProviderObserver>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorTable.Storage>);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_retain();
    result = (void *)swift_retain();
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE v27[24];

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 24 * v18;
    outlined init with copy of GroupSessionTable.Storage(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)outlined init with take of GroupSessionTable.Storage((uint64_t)v27, *(_QWORD *)(v8 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[48];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    outlined init with copy of TopicManager.ConversationClient.Service(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = (void *)outlined init with take of TopicManager.ConversationClient.Service((uint64_t)v20, *(_QWORD *)(v4 + 56) + 48 * v15);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ReliableBroadcastLink.SenderContext>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 48 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_DWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 12);
    v23 = *(_DWORD *)(v19 + 16);
    v24 = *(_BYTE *)(v19 + 20);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_OWORD *)(v19 + 24);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v27 = v20;
    *(_DWORD *)(v27 + 8) = v21;
    *(_BYTE *)(v27 + 12) = v22;
    *(_DWORD *)(v27 + 16) = v23;
    *(_BYTE *)(v27 + 20) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    *(_QWORD *)(v27 + 40) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReliableBroadcastPacket.PacketIdentifier, ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v27 = v5 + 64;
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(v5 + 48) + 8 * v16;
    v19 = *(_DWORD *)v18;
    v20 = *(_WORD *)(v18 + 4);
    v21 = *(_QWORD *)(v29 + 72) * v16;
    outlined init with copy of Participant(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    v22 = *(_QWORD *)(v7 + 48) + v17;
    *(_DWORD *)v22 = v19;
    *(_WORD *)(v22 + 4) = v20;
    result = (void *)outlined init with take of Participant((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ReliableBroadcastLink.SenderContext.PendingMessage>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 32 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_OWORD *)(v19 + 8);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v23 = v20;
    *(_OWORD *)(v23 + 8) = v22;
    *(_QWORD *)(v23 + 24) = v21;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AsyncStream<Int>.Continuation>);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_23;
      v20 = *(_QWORD *)(v24 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    v18 = *(_QWORD *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_23;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v25)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyCancellable>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Conversation>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_BYTE *)(v20 + 8);
    LOBYTE(v20) = *(_BYTE *)(v20 + 9);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v24 = v21;
    *(_BYTE *)(v24 + 8) = v22;
    *(_BYTE *)(v24 + 9) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplateRole>, (void (*)(_BYTE *, uint64_t))outlined init with take of TypedPayloadDecoding);
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v26 = v9;
    return result;
  }
  result = (id)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = v7 + 64;
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(void **)(*(_QWORD *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[40];

  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v4 = v7;
    return result;
  }
  v27 = v4;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = 40 * v17;
    outlined init with copy of AudioSessionAssertionManager(*(_QWORD *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    a2(v29, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t outlined assign with take of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  assignWithTake for TopicManager.ConversationClient.Service(a2, a1);
  return a2;
}

uint64_t outlined init with copy of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TopicManager.ConversationClient.Service(a2, a1);
  return a2;
}

void partial apply for closure #1 in SystemCoordinatorHostManager._state.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in SystemCoordinatorHostManager._state.didset(a1, a2, v2);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, void *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SystemCoordinatorHost));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v23)
        return swift_release();
      v19 = *(_QWORD *)(v22 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v23)
          return swift_release();
        v19 = *(_QWORD *)(v22 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 3;
          if (v18 + 3 >= v23)
            return swift_release();
          v19 = *(_QWORD *)(v22 + 8 * v12);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v14);
    *(_QWORD *)&v6[*(int *)(v4 + 48)] = v17;
    a2(v6, v17);
    result = outlined destroy of (key: UUID, value: SystemCoordinatorHost)((uint64_t)v6);
  }
  v20 = v18 + 4;
  if (v20 >= v23)
    return swift_release();
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: UUID, value: SystemCoordinatorHost)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SystemCoordinatorHost));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  assignWithTake for GroupSessionTable.Storage(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

id closure #1 in SystemCoordinatorHostManager.state.getterpartial apply@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #1 in SystemCoordinatorHostManager.state.getter(a1);
}

objc_class *closure #1 in SystemCoordinatorHostManager.host(for:)partial apply@<X0>(objc_class **a1@<X8>)
{
  return partial apply for closure #1 in SystemCoordinatorHostManager.host(for:)(a1);
}

void _Streamed.wrappedValue.getter(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v4 = *v2;
  v5 = v2[2];
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = type metadata accessor for _Streamed.State(0, v6, *(_QWORD *)(v4 + 88), a1);
  v8 = *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v5 + 16);
  v9 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v5 + *(int *)(v7 + 40) + v8, v6);
  os_unfair_lock_unlock(v9);
}

uint64_t _Streamed.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized _Streamed.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t type metadata accessor for _Streamed.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Streamed.State);
}

void _Streamed.yield(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v36 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for AsyncStream.Continuation();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - v14;
  v16 = v1[2];
  type metadata accessor for _Streamed.State(0, v3, *(_QWORD *)(v2 + 88), v17);
  type metadata accessor for Dictionary.Values();
  type metadata accessor for Optional();
  v18 = v16 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v16 + 16);
  v19 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v19);
  v37 = v3;
  closure #1 in _Streamed.yield(_:)(v18, v38, v3, &v39);
  os_unfair_lock_unlock(v19);
  v20 = v39;
  if (!v39)
    return;
  v21 = *(_QWORD *)(v39 + 64);
  v32 = v39 + 64;
  v22 = 1 << *(_BYTE *)(v39 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v33 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v25 = 0;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_6;
    }
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v28 >= v33)
      goto LABEL_22;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v25;
    if (!v29)
    {
      v25 = v28 + 1;
      if (v28 + 1 >= v33)
        goto LABEL_22;
      v29 = *(_QWORD *)(v32 + 8 * v25);
      if (!v29)
      {
        v25 = v28 + 2;
        if (v28 + 2 >= v33)
          goto LABEL_22;
        v29 = *(_QWORD *)(v32 + 8 * v25);
        if (!v29)
          break;
      }
    }
LABEL_21:
    v24 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v15, *(_QWORD *)(v20 + 56) + *(_QWORD *)(v10 + 72) * v27, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v5, v38, v37);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v30 = v28 + 3;
  if (v30 >= v33)
  {
LABEL_22:
    swift_release();
    swift_bridgeObjectRelease_n();
    return;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v25 = v30;
    goto LABEL_21;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v33)
      goto LABEL_22;
    v29 = *(_QWORD *)(v32 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
}

void (*_Streamed.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  _Streamed.wrappedValue.getter(v8, (uint64_t)v7);
  return _Streamed.wrappedValue.modify;
}

void _Streamed.wrappedValue.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    _Streamed.yield(_:)((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    _Streamed.yield(_:)(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

_QWORD *_Streamed.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  swift_allocObject();
  v4 = specialized _Streamed.init(wrappedValue:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

_QWORD *_Streamed.init(wrappedValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v1;
  v4 = specialized _Streamed.init(wrappedValue:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t _Streamed.deinit()
{
  uint64_t v0;

  _Streamed.finish()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall _Streamed.finish()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for AsyncStream.Continuation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - v5;
  v7 = v0[2];
  type metadata accessor for _Streamed.State(0, v2, *(_QWORD *)(v1 + 88), v8);
  type metadata accessor for Dictionary();
  v9 = v7 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v7 + 16);
  v10 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v10);
  closure #1 in _Streamed.finish()(v9, &v24);
  os_unfair_lock_unlock(v10);
  v11 = 0;
  v12 = v24;
  v13 = v24 + 64;
  v14 = 1 << *(_BYTE *)(v24 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v24 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v11 << 6);
      goto LABEL_5;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v17)
      goto LABEL_21;
    v21 = *(_QWORD *)(v13 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v17)
        goto LABEL_21;
      v21 = *(_QWORD *)(v13 + 8 * v11);
      if (!v21)
      {
        v11 = v20 + 2;
        if (v20 + 2 >= v17)
          goto LABEL_21;
        v21 = *(_QWORD *)(v13 + 8 * v11);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v16 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v12 + 56) + *(_QWORD *)(v4 + 72) * v19, v3);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v22 = v20 + 3;
  if (v22 >= v17)
  {
LABEL_21:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v17)
      goto LABEL_21;
    v21 = *(_QWORD *)(v13 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t _Streamed.__deallocating_deinit()
{
  _Streamed.finish()();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _Streamed.projectedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v35[1] = a1;
  v39 = *v1;
  v2 = *(_QWORD *)(v39 + 80);
  v3 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x1E0C80A78](v3);
  v42 = (char *)v35 - v4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v7 = (_QWORD *)((char *)v35 - v6);
  v37 = *(_QWORD *)(v2 - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v41 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v35 - v10;
  v12 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v35 - v14;
  v16 = type metadata accessor for AsyncStream.Continuation();
  v36 = *(_QWORD *)(v16 - 8);
  v17 = v36;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v35 - v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DF07B8], v12);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v20, v16);
  v23 = *(_QWORD *)(v38 + 16);
  v24 = *(_QWORD *)(v39 + 88);
  type metadata accessor for _Streamed.State(0, v2, v24, v25);
  v26 = (uint64_t *)(v23 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v23 + 16));
  v27 = (os_unfair_lock_s *)(v23 + ((*(unsigned int *)(*(_QWORD *)v23 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v27);
  closure #1 in _Streamed.projectedValue.getter(v26, (uint64_t)v22, v2, v24, v7);
  os_unfair_lock_unlock(v27);
  v28 = *v7;
  v29 = (char *)v7 + *(int *)(TupleTypeMetadata2 + 48);
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v11, v29, v2);
  v31 = swift_allocObject();
  swift_weakInit();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v2;
  v32[3] = v24;
  v32[4] = v31;
  v32[5] = v28;
  AsyncStream.Continuation.onTermination.setter();
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v41, v11, v2);
  v33 = v42;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v44);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v22, v16);
}

uint64_t closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[4];

  v10 = type metadata accessor for AsyncStream.Continuation();
  v11 = type metadata accessor for Optional();
  result = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v21 - v13;
  v15 = *a1;
  v16 = *a1 + 1;
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    v21[0] = a4;
    *a1 = v16;
    v17 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v14, a2, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v10);
    v21[3] = v15;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v18 = (char *)a5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    *a5 = v15;
    v20 = type metadata accessor for _Streamed.State(0, a3, v21[0], v19);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v18, (char *)a1 + *(int *)(v20 + 40), a3);
  }
  return result;
}

uint64_t closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = *(_QWORD *)(result + 16);
    swift_retain();
    swift_release();
    type metadata accessor for _Streamed.State(0, a4, a5, v10);
    v11 = v9 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v9 + 16);
    v12 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v12);
    closure #1 in closure #2 in _Streamed.projectedValue.getter(v11, a3);
    os_unfair_lock_unlock(v12);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  type metadata accessor for AsyncStream.Continuation();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v8 - v5;
  v8[1] = a2;
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #1 in _Streamed.yield(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + *(int *)(type metadata accessor for _Streamed.State(0, v11, v12, v12) + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, a3);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v16 = 0;
  if ((v14 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v13, a2, a3);
    v16 = *(_QWORD *)(a1 + 8);
    type metadata accessor for AsyncStream.Continuation();
    result = swift_bridgeObjectRetain();
  }
  *a4 = v16;
  return result;
}

void closure #1 in _Streamed.finish()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AsyncStream.Continuation();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  Dictionary.removeAll(keepingCapacity:)(0);
  *a2 = v3;
}

uint64_t specialized OSAllocatedUnfairLock.init(uncheckedState:)()
{
  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer();
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

_QWORD *specialized _Streamed.init(wrappedValue:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for _Streamed.State(0, v3, *(_QWORD *)(v7 + 88), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for AsyncStream.Continuation();
  v13 = Dictionary.init()();
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v13;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v12[*(int *)(v9 + 40)], v6, v3);
  v14 = specialized OSAllocatedUnfairLock.init(uncheckedState:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v1[2] = v14;
  return v1;
}

uint64_t sub_1A0E4D5FC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0E4D620()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _Streamed.projectedValue.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in _Streamed.projectedValue.getter(a1, v1[4], v1[5], v1[2], v1[3]);
}

void sub_1A0E4D650(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _Streamed.wrappedValue.getter(a1, a2);
}

uint64_t sub_1A0E4D670()
{
  return specialized _Streamed.wrappedValue.setter();
}

uint64_t sub_1A0E4D690()
{
  return 16;
}

__n128 sub_1A0E4D69C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _Streamed()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _Streamed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Streamed);
}

uint64_t method lookup function for _Streamed()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _Streamed.__allocating_init(wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for _Streamed.State()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _Streamed.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, unint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = *a2;
    v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t destroy for _Streamed.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for _Streamed.State(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *assignWithCopy for _Streamed.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *initializeWithTake for _Streamed.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for _Streamed.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _Streamed.State(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A0E4DB6C + 4 * byte_1A0F116B8[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _Streamed.State(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x1E0DEC528]) - 8) + 16))(a2, v3);
}

uint64_t SystemCoordinatorHostConnection.__allocating_init(connection:queue:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  return XPCHostConnection.init(connection:queue:)();
}

uint64_t SystemCoordinatorHostConnection.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v1);
}

void SystemCoordinatorHostConnection.delegate.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*SystemCoordinatorHostConnection.delegate.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for SystemCoordinatorHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A1B05DC0](v5);
  return SystemCoordinatorHostConnection.delegate.modify;
}

void SystemCoordinatorHostConnection.delegate.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

Swift::Void __swiftcall SystemCoordinatorHostConnection.handleHostConnectionInvalidated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE v13[24];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  v6 = MEMORY[0x1A1B05DC0](v5);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = *(void **)(v6 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
    *v4 = v8;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
    v9 = v8;
    LOBYTE(v8) = _dispatchPreconditionTest(_:)();
    (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
    if ((v8 & 1) != 0)
    {
      v10 = &v7[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate];
      swift_beginAccess();
      if (MEMORY[0x1A1B05DC0](v10))
      {
        v11 = *((_QWORD *)v10 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, ObjectType, v11);

        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t SystemCoordinatorHostConnection.init(connection:queue:)()
{
  swift_unknownObjectWeakInit();
  return XPCHostConnection.init(connection:queue:)();
}

uint64_t SystemCoordinatorHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

id SystemCoordinatorHostConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc SystemCoordinatorHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t SystemCoordinatorHostConnection.requestCurrentState(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)XPCHostConnection.queue.getter();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  v15 = _Block_copy(aBlock);
  v16 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id *v13;
  id v14;
  _BYTE v15[24];

  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  v9 = MEMORY[0x1A1B05DC0](v8);
  if (v9)
  {
    v10 = (char *)v9;
    v11 = *(void **)(v9 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
    *v7 = v11;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
    v12 = v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)();
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
    if ((v11 & 1) != 0)
    {
      v13 = (id *)&v10[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState];
      swift_beginAccess();
      v14 = *v13;
      a2();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1A0E4E4F4()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)()
{
  uint64_t v0;

  closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t @objc SystemCoordinatorHostConnection.requestCurrentState(_:)(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = a1;
  SystemCoordinatorHostConnection.requestCurrentState(_:)((uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> (), v5);

  return swift_release();
}

uint64_t SystemCoordinatorHostConnection.setConfiguration(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)XPCHostConnection.queue.getter();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  v13 = _Block_copy(aBlock);
  v14 = v1;
  v15 = a1;
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  v2 = MEMORY[0x1A1B05DC0](v1);
  if (v2)
  {
    v3 = (void *)v2;
    PassthroughSubject.send(_:)();

  }
}

uint64_t sub_1A0E4E87C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)()
{
  uint64_t v0;

  closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A0E4E8B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  result = MEMORY[0x1A1B05DC0](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1A0E4E904()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SystemCoordinatorHostConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemCoordinatorHostConnection;
  if (!type metadata singleton initialization cache for SystemCoordinatorHostConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SystemCoordinatorHostConnection()
{
  return type metadata accessor for SystemCoordinatorHostConnection();
}

void @objc SystemCoordinatorHostConnection.setConfiguration(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SystemCoordinatorHostConnection.setConfiguration(_:)(v4);

}

uint64_t sub_1A0E4EA38()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t GroupStateObserver.isEligibleForGroupSession.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for GroupStateObserver.isEligibleForGroupSession : GroupStateObserver@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupStateObserver.isEligibleForGroupSession : GroupStateObserver()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for GroupStateObserver.$isEligibleForGroupSession : GroupStateObserver()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for GroupStateObserver.$isEligibleForGroupSession : GroupStateObserver(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  v8 = specialized GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(v7, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v8;
}

uint64_t GroupStateObserver.init(conversationManagerClient:queue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = specialized GroupStateObserver.init(conversationManagerClient:queue:)((uint64_t)v9, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v11;
}

uint64_t GroupStateObserver.__allocating_init(queue:)(void *a1)
{
  void *v2;
  uint64_t v3;

  type metadata accessor for ConversationManagerClient();
  v2 = (void *)static ConversationManagerClient.shared.getter();
  v3 = swift_allocObject();
  return specialized GroupStateObserver.init(conversationManagerClient:queue:)(v2, a1, v3);
}

uint64_t GroupStateObserver.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GroupStateObserver.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t specialized GroupStateObserver.init(conversationManagerClient:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  NSObject *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v56 = a5;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v64 = *(_QWORD *)(v66 - 8);
  v8 = MEMORY[0x1E0C80A78](v66);
  v75 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v76 = (char *)&v54 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v11);
  v68 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v57 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  v62 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v61 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v65 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  v73 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  MEMORY[0x1E0C80A78](v17);
  v72 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = v26;
  v27 = *(void (**)(void))(v26 + 32);
  v67 = v25;
  v28 = a4;
  v27();
  v77 = a3;
  v29 = a3 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  LOBYTE(v78) = 0;
  Published.init(initialValue:)();
  v30 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v60 = v29;
  v63 = v19;
  v30(v29, v23, v19);
  if (one-time initialization token for client != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.client);
  v32 = a2;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v54 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v35 = 138412290;
    v78 = (uint64_t)v32;
    v36 = v32;
    v37 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v38 = v54;
    *v54 = v36;

    v32 = v36;
    _os_log_impl(&dword_1A0DB3000, v33, v34, "Initialized group state observer on queue: %@", v35, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v38, -1, -1);
    MEMORY[0x1A1B05CC4](v35, -1, -1);
  }
  else
  {

    v33 = v32;
  }

  v39 = v67;
  v55 = v28;
  v78 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  v40 = MEMORY[0x1E0C95D90];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  v41 = v72;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>, MEMORY[0x1E0C95950]);
  v42 = v74;
  v78 = Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>, v40);
  v43 = v57;
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>, MEMORY[0x1E0C958E0]);
  v44 = v59;
  v45 = v61;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v44);
  v78 = (uint64_t)v32;
  v46 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v47 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v68, 1, 1, v46);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, MEMORY[0x1E0C957C0]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  v48 = v65;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v47, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v14);
  swift_beginAccess();
  v49 = v76;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v50 = v71;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v48, v50);
  v51 = v64;
  v52 = v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v75, v49, v66);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v52);
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v42);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v55);
  return v77;
}

uint64_t specialized GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized GroupStateObserver.init(conversationManagerClient:queue:)((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t ObjC metadata update function for GroupStateObserver()
{
  return type metadata accessor for GroupStateObserver();
}

uint64_t method lookup function for GroupStateObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupStateObserver.__allocating_init(conversationManagerClient:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t outlined init with take of (key: UUID, value: TUConversationActivitySessionContainer)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Subject.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 8))
  {
    v1 = *(_QWORD *)(v0 + 8);
  }
  else
  {
    v1 = closure #1 in Subject.wrappedValue.getter();
    *(_QWORD *)(v0 + 8) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t Subject.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t Subject.projectedValue.getter()
{
  return swift_retain();
}

uint64_t Subject.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for PassthroughSubject();
  result = PassthroughSubject.__allocating_init()();
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t closure #1 in Subject.wrappedValue.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for PassthroughSubject();
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95F48], v0);
  return Publisher.eraseToAnyPublisher()();
}

uint64_t (*Subject.wrappedValue.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = Subject.wrappedValue.getter();
  return Subject.wrappedValue.modify;
}

uint64_t Subject.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v3 + 8) = v2;
    return swift_release();
  }
  else
  {
    result = swift_release();
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

uint64_t destroy for Subject()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for Subject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Subject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Subject(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Subject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subject);
}

uint64_t ContentAssociation.tuContentAssociation.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ContentAssociation.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentAssociation.shared.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ContentAssociation.initiatorOwned.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ContentAssociation.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for ContentAssociation()
{
  return &type metadata for ContentAssociation;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  int64_t v42;

  v40 = a2;
  v3 = type metadata accessor for UTType();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v35 - v9;
  MEMORY[0x1E0C80A78](v8);
  v38 = (char *)&v35 - v11;
  v12 = *(_QWORD *)(a1 + 56);
  v36 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v37 = (unint64_t)(v13 + 63) >> 6;
  v41 = a1;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v39 = v10;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v42 = v17;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = *(_QWORD *)(v4 + 72);
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v26 = v38;
    v25(v38, *(_QWORD *)(v41 + 48) + v24 * i, v3);
    v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v27(v10, v26, v3);
    v28 = v7;
    v25(v7, (unint64_t)v10, v3);
    v29 = v40;
    v30 = *v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v29 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
      *v40 = v30;
    }
    v33 = *(_QWORD *)(v30 + 16);
    v32 = *(_QWORD *)(v30 + 24);
    if (v33 >= v32 >> 1)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30);
      *v40 = v30;
    }
    *(_QWORD *)(v30 + 16) = v33 + 1;
    v34 = v30 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v33 * v24;
    v7 = v28;
    v27((char *)v34, v28, v3);
    v10 = v39;
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v39, v3);
    v17 = v42;
    if (v15)
      goto LABEL_4;
LABEL_5:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v37)
      return swift_release();
    v21 = *(_QWORD *)(v36 + 8 * v20);
    v22 = v17 + 1;
    if (!v21)
    {
      v22 = v17 + 2;
      if (v17 + 2 >= v37)
        return swift_release();
      v21 = *(_QWORD *)(v36 + 8 * v22);
      if (!v21)
      {
        v22 = v17 + 3;
        if (v17 + 3 >= v37)
          return swift_release();
        v21 = *(_QWORD *)(v36 + 8 * v22);
        if (!v21)
        {
          v22 = v17 + 4;
          if (v17 + 4 >= v37)
            return swift_release();
          v21 = *(_QWORD *)(v36 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_20:
    v15 = (v21 - 1) & v21;
    v42 = v22;
  }
  v23 = v17 + 5;
  if (v17 + 5 >= v37)
    return swift_release();
  v21 = *(_QWORD *)(v36 + 8 * v23);
  if (v21)
  {
    v22 = v17 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v37)
      return swift_release();
    v21 = *(_QWORD *)(v36 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _PublisherElements.Iterator.Inner.cancel()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40[5];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[3];
  __int128 v46;
  _QWORD v47[3];
  __int128 v48;
  __int128 v49;
  unint64_t v50;

  v7 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  v9 = v3 + 32;
  swift_beginAccess();
  outlined init with copy of URL?(v3 + 32, (uint64_t)&v49, a1);
  if (v50 >= 2)
  {
    outlined init with take of TypedPayloadDecoding(&v49, (uint64_t)v47);
    if (one-time initialization token for default != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)v47, (uint64_t)v45);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v36 = a1;
      v38 = v8;
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v41 = v21;
      *(_DWORD *)v20 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v45, (uint64_t)v44);
      outlined init with copy of URL?((uint64_t)v44, (uint64_t)&v42, &demangling cache variable for type metadata for Subscription?);
      v35 = v7;
      if (v43)
      {
        outlined init with take of TypedPayloadDecoding(&v42, (uint64_t)v40);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v40, (uint64_t)v39);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Subscription);
        v22 = String.init<A>(reflecting:)();
        v24 = v23;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
      }
      else
      {
        v22 = 7104878;
        v24 = 0xE300000000000000;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v44, &demangling cache variable for type metadata for Subscription?);
      v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Handling cancellation by terminating upstream subscription: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v21, -1, -1);
      MEMORY[0x1A1B05CC4](v20, -1, -1);

      a1 = v36;
      v8 = v38;
      v7 = v35;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);

    }
    memset(v45, 0, sizeof(v45));
    v46 = xmmword_1A0F10770;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State((uint64_t)v45, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    __swift_project_boxed_opaque_existential_1(v47, v48);
    dispatch thunk of Cancellable.cancel()();
    v30 = *(_QWORD *)(v8 + 16);
    if (v30)
    {
      v31 = (uint64_t *)(v8 + 32);
      do
      {
        v32 = *v31++;
        v45[0] = 0;
        outlined init with take of Date?((uint64_t)v45, *(_QWORD *)(*(_QWORD *)(v32 + 64) + 40), a2);
        swift_continuation_resume();
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    swift_retain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v34 = v7;
      v37 = v8;
      v13 = a1;
      v14 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v40[0] = v33;
      *(_DWORD *)v14 = 136315138;
      outlined init with copy of URL?(v9, (uint64_t)v47, v13);
      outlined init with copy of URL?((uint64_t)v47, (uint64_t)v45, a3);
      if ((_QWORD)v46 == 2)
      {
        v15 = 7104878;
        v16 = 0xE300000000000000;
      }
      else
      {
        outlined init with take of Date?((uint64_t)v45, (uint64_t)v44, v13);
        outlined init with copy of URL?((uint64_t)v44, (uint64_t)&v42, v13);
        __swift_instantiateConcreteTypeFromMangledName(v13);
        v15 = String.init<A>(reflecting:)();
        v16 = v25;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v44, v13);
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v47, a3);
      v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v11, v12, "Terminating sequence from state: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v33, -1, -1);
      MEMORY[0x1A1B05CC4](v14, -1, -1);

      a1 = v13;
      v8 = v37;
      v7 = v34;
    }
    else
    {

      swift_release_n();
    }
    memset(v47, 0, sizeof(v47));
    v48 = xmmword_1A0F10770;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State((uint64_t)v47, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    v26 = *(_QWORD *)(v8 + 16);
    if (v26)
    {
      v27 = (uint64_t *)(v8 + 32);
      do
      {
        v28 = *v27++;
        v47[0] = 0;
        outlined init with take of Date?((uint64_t)v47, *(_QWORD *)(*(_QWORD *)(v28 + 64) + 40), a2);
        swift_continuation_resume();
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease();
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v49, a1);
  }
}

uint64_t specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State?);
}

uint64_t GroupSessionJournal.session.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionJournal.attachments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + 32))
  {
    v8 = *(_QWORD *)(v1 + 32);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionJournal.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher, MEMORY[0x1E0C96190]);
    v8 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + 32) = v8;
    swift_retain();
    swift_release();
  }
  *a1 = v8;
  return swift_retain();
}

uint64_t GroupSessionJournal.attachments.setter(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionJournal.Attachments.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionJournal.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher, MEMORY[0x1E0C96190]);
  v6 = Publisher.eraseToAnyPublisher()();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t (*GroupSessionJournal.attachments.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  GroupSessionJournal.attachments.getter(a1);
  return GroupSessionJournal.attachments.modify;
}

uint64_t GroupSessionJournal.attachments.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionJournal._attachments.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t GroupSessionJournal.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionJournal.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal_cancellables);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionJournal.cancellables.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionJournal.add<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v7 = type metadata accessor for URL();
  v5[9] = v7;
  v5[10] = *(_QWORD *)(v7 - 8);
  v5[11] = swift_task_alloc();
  v8 = type metadata accessor for Optional();
  v5[12] = v8;
  v5[13] = *(_QWORD *)(v8 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = *(_QWORD *)(a3 - 8);
  v5[16] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v5[17] = v9;
  v5[18] = *(_QWORD *)(v9 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionJournal.add<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  UUID.init()();
  if (one-time initialization token for ledger != -1)
    swift_once();
  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v6 = v0[15];
  v5 = v0[16];
  v8 = v0[5];
  v7 = v0[6];
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.ledger);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v5, v8, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v15 = v0[18];
  v14 = v0[19];
  v16 = v0[16];
  v17 = v0[17];
  v18 = v0[15];
  if (v13)
  {
    v35 = v0[18];
    v19 = v0[14];
    v31 = v0[13];
    v32 = v0[12];
    v20 = v0[6];
    v33 = v0[19];
    v21 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v37 = v36;
    *(_DWORD *)v21 = 136315394;
    v10(v19, v16, v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v19, 0, 1, v20);
    v22 = v11;
    v23 = >> prefix<A>(_:)(v19, v20);
    type = v12;
    v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v19, v32);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v20);
    *(_WORD *)(v21 + 12) = 2080;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v28 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v28(v33, v17);
    _os_log_impl(&dword_1A0DB3000, v22, type, "Received add request for item: %s, using ID: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v36, -1, -1);
    MEMORY[0x1A1B05CC4](v21, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v18 + 8))(v0[16], v0[6]);
    v28 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v28(v14, v17);

  }
  v0[21] = v28;
  v29 = (_QWORD *)swift_task_alloc();
  v0[22] = v29;
  *v29 = v0;
  v29[1] = GroupSessionJournal.add<A>(_:);
  return static URL.file<A>(from:)(v0[11], v0[5], v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  _QWORD *v4;

  v2 = *v1;
  v2[23] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[24] = (uint64_t)v4;
  *v4 = v2;
  v4[1] = GroupSessionJournal.add<A>(_:);
  return GroupSessionJournal.add(id:attachmentData:developerMetadata:)(v2[4], v2[20], v2[11], 0, 0xF000000000000000);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v2(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static URL.file<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[29] = a3;
  v4[30] = a4;
  v4[27] = a1;
  v4[28] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4[31] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v4[32] = v5;
  v4[33] = *(_QWORD *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v4[37] = v6;
  v4[38] = *(_QWORD *)(v6 - 8);
  v4[39] = swift_task_alloc();
  v7 = type metadata accessor for ResolvedTransferRepresentation();
  v4[40] = v7;
  v4[41] = *(_QWORD *)(v7 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v8 = type metadata accessor for _TransferRepresentationInputs();
  v4[44] = v8;
  v4[45] = *(_QWORD *)(v8 - 8);
  v4[46] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[47] = AssociatedTypeWitness;
  v10 = type metadata accessor for _TransferRepresentationValue();
  v4[48] = v10;
  v4[49] = *(_QWORD *)(v10 - 8);
  v4[50] = swift_task_alloc();
  v11 = type metadata accessor for _TransferRepresentationOutputs();
  v4[51] = v11;
  v4[52] = *(_QWORD *)(v11 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v12 = type metadata accessor for UTType();
  v4[57] = v12;
  v4[58] = *(_QWORD *)(v12 - 8);
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UTType?);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t static URL.file<A>(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];

  v62[1] = *MEMORY[0x1E0C80C00];
  v1 = MEMORY[0x1A1B040A4]();
  v2 = specialized Set.init<A>(_:)(v1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 200) = v2;
  v3 = v0 + 200;
  if (one-time initialization token for default != -1)
LABEL_22:
    swift_once();
  v4 = (unint64_t *)(v3 - 24);
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 536) = v5;
  *(_QWORD *)(v0 + 544) = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v62[0] = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = _typeName(_:qualified:)();
    *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_beginAccess();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]);
    swift_bridgeObjectRetain();
    v12 = Set.description.getter();
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v6, v7, "ItemType: %s has readableContentTypes: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    v15 = v9;
    v4 = (unint64_t *)(v3 - 24);
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);
  }

  v16 = *(_QWORD *)(v0 + 528);
  v17 = *(_QWORD *)(v0 + 504);
  v18 = *(_QWORD *)(v0 + 456);
  v19 = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 176) = MEMORY[0x1E0DEE9D8];
  static UTType.fileURL.getter();
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v17, v16);
  swift_endAccess();
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(_QWORD *)(v0 + 552) = v20;
  v20(v17, v18);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  *(_QWORD *)(v0 + 560) = v21;
  v22 = v21(v16, 1, v18);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v16, (uint64_t *)&demangling cache variable for type metadata for UTType?);
  if (v22 != 1)
  {
    static UTType.fileURL.getter();
    v23 = *(_QWORD *)(v0 + 176);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v23);
    v26 = *(_QWORD *)(v0 + 496);
    v27 = *(_QWORD *)(v0 + 456);
    v28 = *(_QWORD *)(v0 + 464);
    *(_QWORD *)(v23 + 16) = v25 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))(v23+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v25, v26, v27);
    *(_QWORD *)(v0 + 176) = v23;
  }
  v29 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v29, v4);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 568) = v30;
  v31 = *(_QWORD *)(v30 + 16);
  *(_QWORD *)(v0 + 576) = v31;
  if (v31)
  {
    *(_DWORD *)(v0 + 712) = *(_DWORD *)(*(_QWORD *)(v0 + 464) + 80);
    swift_bridgeObjectRetain();
    v32 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 584) = v32;
      if (v32 >= *(_QWORD *)(*(_QWORD *)(v0 + 568) + 16))
      {
        __break(1u);
        goto LABEL_22;
      }
      v33 = *(_QWORD *)(v0 + 440);
      v34 = *(_QWORD *)(v0 + 448);
      v35 = *(_QWORD *)(v0 + 424);
      v59 = *(_QWORD *)(v0 + 488);
      v60 = *(_QWORD *)(v0 + 416);
      v36 = *(_QWORD *)(v0 + 400);
      v61 = *(_QWORD *)(v0 + 408);
      v37 = *(_QWORD *)(v0 + 376);
      v57 = *(_QWORD *)(v0 + 392);
      v58 = *(_QWORD *)(v0 + 384);
      v3 = *(_QWORD *)(v0 + 368);
      v54 = *(_QWORD *)(v0 + 432);
      v55 = *(_QWORD *)(v0 + 360);
      v56 = *(_QWORD *)(v0 + 352);
      v38 = *(void (**)(void))(*(_QWORD *)(v0 + 464) + 16);
      *(_QWORD *)(v0 + 592) = v38;
      v38();
      dispatch thunk of static Transferable.transferRepresentation.getter();
      swift_getDynamicType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v33, v34, v37);
      _TransferRepresentationValue.init(_:)();
      _TransferRepresentationInputs.init()();
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v3, v56);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v36, v58);
      v39 = _TransferRepresentationOutputs.storage.getter();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v35, v61);
      v40 = swift_task_alloc();
      *(_QWORD *)(v40 + 16) = v59;
      v41 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(_QWORD))partial apply for closure #2 in static URL.file<A>(from:), v40, v39);
      *(_QWORD *)(v0 + 600) = v41;
      swift_task_dealloc();
      v42 = *(_QWORD *)(v41 + 16);
      *(_QWORD *)(v0 + 608) = v42;
      if (v42)
        break;
LABEL_17:
      swift_bridgeObjectRelease();
      v46 = *(_QWORD *)(v0 + 448);
      v47 = *(_QWORD *)(v0 + 432);
      v48 = *(_QWORD *)(v0 + 376);
      (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      v32 = *(_QWORD *)(v0 + 584) + 1;
      if (v32 == *(_QWORD *)(v0 + 576))
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    v43 = 0;
    v44 = *(_QWORD *)(v0 + 328);
    *(_DWORD *)(v0 + 716) = *(_DWORD *)(v44 + 80);
    *(_QWORD *)(v0 + 616) = *(_QWORD *)(v44 + 72);
    *(_QWORD *)(v0 + 624) = *(_QWORD *)(v44 + 16);
    v45 = MEMORY[0x1E0CB0338];
    while (1)
    {
      *(_QWORD *)(v0 + 632) = v43;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 716) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 716))+ *(_QWORD *)(v0 + 616) * v43, *(_QWORD *)(v0 + 320));
      if (ResolvedTransferRepresentation.representationType.getter() == v45)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
      v43 = *(_QWORD *)(v0 + 632) + 1;
      if (v43 == *(_QWORD *)(v0 + 608))
        goto LABEL_17;
    }
    v51 = swift_task_alloc();
    *(_QWORD *)(v0 + 640) = v51;
    *(_QWORD *)v51 = v0;
    *(_QWORD *)(v51 + 8) = static URL.file<A>(from:);
    v52 = *(_QWORD *)(v0 + 344);
    v53 = *(_OWORD *)(v0 + 224);
    *(_QWORD *)(v51 + 128) = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v51 + 136) = v52;
    *(_OWORD *)(v51 + 112) = v53;
    return swift_task_switch();
  }
  else
  {
LABEL_19:
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v49 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSString *v7;
  void (*v8)(uint64_t, NSObject *);
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_type_t v106;
  uint64_t v107;
  os_log_t loga;
  NSObject *log;
  os_log_t logb;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(NSObject **)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  loga = *(os_log_t *)(v0 + 232);
  outlined copy of Data._Representation(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 664));
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, NSObject *))(v6 + 8);
  *(_QWORD *)(v0 + 672) = v8;
  v8(v4, v5);
  if (v5 == loga)
  {
    v36 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 680) = v36;
    *(_QWORD *)(v0 + 688) = v37;
    if (v36)
    {
      v38 = (int *)v36;
      v39 = *(_QWORD *)(v0 + 664);
      v40 = *(_QWORD *)(v0 + 656);
      v41 = MEMORY[0x1E0CA86D8];
      *(_QWORD *)(v0 + 40) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v0 + 48) = v41;
      *(_QWORD *)(v0 + 16) = v40;
      *(_QWORD *)(v0 + 24) = v39;
      outlined copy of Data._Representation(v40, v39);
      v42 = *v38;
      v43 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 696) = v43;
      *v43 = v0;
      v43[1] = static URL.file<A>(from:);
      return ((uint64_t (*)(uint64_t, uint64_t))((char *)v38 + v42))(v0 + 56, v0 + 16);
    }
    v60 = *(_QWORD *)(v0 + 264);
    v61 = *(_QWORD *)(v0 + 248);
    v62 = *(_QWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 56, &demangling cache variable for type metadata for Transferable?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v61, 1, 1, v62);
    v9 = *(void **)(v0 + 648);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 248), &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v9 = *(void **)(v0 + 648);
  }
  Data.write(to:options:)();
  if (!v9)
  {
    v45 = *(_QWORD *)(v0 + 664);
    v46 = *(_QWORD *)(v0 + 656);
    logb = *(os_log_t *)(v0 + 552);
    v47 = *(_QWORD *)(v0 + 488);
    v48 = *(_QWORD *)(v0 + 456);
    v49 = *(_QWORD *)(v0 + 344);
    v50 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v52 = *(_QWORD *)(v0 + 264);
    outlined consume of Data._Representation(v46, v45);
    outlined consume of Data._Representation(v46, v45);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))logb)(v47, v48);
    v53 = *(_QWORD *)(v0 + 448);
    v54 = *(_QWORD *)(v0 + 432);
    v55 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v52 + 32))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 256));
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
  v11 = *(_QWORD *)(v0 + 664);
  v12 = *(_QWORD *)(v0 + 656);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 256);
  outlined consume of Data._Representation(v12, v11);
  outlined consume of Data._Representation(v12, v11);
  v10(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  v20 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 488);
  v21 = *(_QWORD *)(v0 + 456);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 376));
  v18(v20, v19, v21);
  v22 = v9;
  v23 = v9;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v106 = v25;
    log = v24;
    v101 = (uint64_t *)(v0 + 168);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 560);
    v28 = *(_QWORD *)(v0 + 520);
    v29 = *(_QWORD *)(v0 + 512);
    v30 = *(_QWORD *)(v0 + 480);
    v32 = *(_QWORD *)(v0 + 456);
    v31 = *(_QWORD *)(v0 + 464);
    v33 = swift_slowAlloc();
    v104 = swift_slowAlloc();
    *(_QWORD *)(v0 + 168) = v104;
    *(_DWORD *)v33 = 136315394;
    v26(v28, v30, v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v32);
    outlined init with copy of URL?(v28, v29, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v27(v29, 1, v32) == 1)
    {
      v34 = 0xE300000000000000;
      v35 = 7104878;
    }
    else
    {
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
      v64 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      v65 = *(_QWORD *)(v0 + 504);
      v66 = *(_QWORD *)(v0 + 472);
      v67 = *(_QWORD *)(v0 + 456);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 464) + 32))(v65, *(_QWORD *)(v0 + 512), v67);
      v63(v66, v65, v67);
      v35 = String.init<A>(reflecting:)();
      v34 = v68;
      v64(v65, v67);
    }
    v69 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v70 = *(_QWORD *)(v0 + 480);
    v71 = *(_QWORD *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v69(v70, v71);
    *(_WORD *)(v33 + 12) = 2080;
    *(_QWORD *)(v0 + 152) = v9;
    v72 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v73 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, log, v106, "Failed to get file from type: %s, error: %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v104, -1, -1);
    MEMORY[0x1A1B05CC4](v33, -1, -1);

  }
  else
  {
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v58 = *(_QWORD *)(v0 + 480);
    v59 = *(_QWORD *)(v0 + 456);

    v57(v58, v59);
  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
  v75 = *(_QWORD *)(v0 + 584) + 1;
  if (v75 == *(_QWORD *)(v0 + 576))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v76 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v56 = *(uint64_t (**)(void))(v0 + 8);
    return v56();
  }
  while (1)
  {
    *(_QWORD *)(v0 + 584) = v75;
    if (v75 >= *(_QWORD *)(*(_QWORD *)(v0 + 568) + 16))
      __break(1u);
    v77 = *(_QWORD *)(v0 + 440);
    v78 = *(_QWORD *)(v0 + 448);
    v79 = *(_QWORD *)(v0 + 424);
    v103 = *(_QWORD *)(v0 + 488);
    v105 = *(_QWORD *)(v0 + 416);
    v80 = *(_QWORD *)(v0 + 400);
    v107 = *(_QWORD *)(v0 + 408);
    v81 = *(_QWORD *)(v0 + 376);
    v100 = *(_QWORD *)(v0 + 392);
    v102 = *(_QWORD *)(v0 + 384);
    v82 = *(_QWORD *)(v0 + 368);
    v97 = *(_QWORD *)(v0 + 432);
    v98 = *(_QWORD *)(v0 + 360);
    v99 = *(_QWORD *)(v0 + 352);
    v83 = *(void (**)(void))(*(_QWORD *)(v0 + 464) + 16);
    *(_QWORD *)(v0 + 592) = v83;
    v83();
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v77, v78, v81);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v82, v99);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v80, v102);
    v84 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v79, v107);
    v85 = swift_task_alloc();
    *(_QWORD *)(v85 + 16) = v103;
    v86 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(_QWORD))partial apply for closure #2 in static URL.file<A>(from:), v85, v84);
    *(_QWORD *)(v0 + 600) = v86;
    swift_task_dealloc();
    v87 = *(_QWORD *)(v86 + 16);
    *(_QWORD *)(v0 + 608) = v87;
    if (v87)
      break;
LABEL_22:
    swift_bridgeObjectRelease();
    v91 = *(_QWORD *)(v0 + 448);
    v92 = *(_QWORD *)(v0 + 432);
    v93 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    v75 = *(_QWORD *)(v0 + 584) + 1;
    if (v75 == *(_QWORD *)(v0 + 576))
      goto LABEL_15;
  }
  v88 = 0;
  v89 = *(_QWORD *)(v0 + 328);
  *(_DWORD *)(v0 + 716) = *(_DWORD *)(v89 + 80);
  *(_QWORD *)(v0 + 616) = *(_QWORD *)(v89 + 72);
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v89 + 16);
  v90 = MEMORY[0x1E0CB0338];
  while (1)
  {
    *(_QWORD *)(v0 + 632) = v88;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 716) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 716))+ *(_QWORD *)(v0 + 616) * v88, *(_QWORD *)(v0 + 320));
    if (ResolvedTransferRepresentation.representationType.getter() == v90)
      break;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    v88 = *(_QWORD *)(v0 + 632) + 1;
    if (v88 == *(_QWORD *)(v0 + 608))
      goto LABEL_22;
  }
  v94 = swift_task_alloc();
  *(_QWORD *)(v0 + 640) = v94;
  *(_QWORD *)v94 = v0;
  *(_QWORD *)(v94 + 8) = static URL.file<A>(from:);
  v95 = *(_QWORD *)(v0 + 344);
  v96 = *(_OWORD *)(v0 + 224);
  *(_QWORD *)(v94 + 128) = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v94 + 136) = v95;
  *(_OWORD *)(v94 + 112) = v96;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 704) = v0;
  swift_task_dealloc();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v2 + 680));
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  void (*v7)(uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSURL *v16;
  void *v17;
  void *v18;
  NSURL *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  void (*v72)(uint64_t, uint64_t, uint64_t);
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  os_log_type_t v120;
  uint64_t v121;
  os_log_t log;
  os_log_t logb;
  NSObject *loga;
  os_log_t logc;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  v4 = swift_dynamicCast();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v2, v4 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3) == 1)
  {
    v5 = *(void **)(v0 + 704);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 248), &demangling cache variable for type metadata for URL?);
    Data.write(to:options:)();
    if (v5)
    {
      v6 = v5;
      v7 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
      v8 = *(_QWORD *)(v0 + 664);
      v9 = *(_QWORD *)(v0 + 656);
      v10 = *(_QWORD *)(v0 + 344);
      v11 = *(_QWORD *)(v0 + 320);
      v12 = *(_QWORD *)(v0 + 328);
      v13 = *(_QWORD *)(v0 + 288);
      v14 = *(_QWORD *)(v0 + 256);
      outlined consume of Data._Representation(v9, v8);
      outlined consume of Data._Representation(v9, v8);
      v7(v13, v14);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      goto LABEL_7;
    }
    v60 = *(_QWORD *)(v0 + 664);
    v61 = *(_QWORD *)(v0 + 656);
    logc = *(os_log_t *)(v0 + 552);
    v62 = *(_QWORD *)(v0 + 488);
    v63 = *(_QWORD *)(v0 + 456);
    v64 = *(_QWORD *)(v0 + 344);
    v65 = *(_QWORD *)(v0 + 320);
    v66 = *(_QWORD *)(v0 + 328);
    v67 = *(_QWORD *)(v0 + 264);
    outlined consume of Data._Representation(v61, v60);
    outlined consume of Data._Representation(v61, v60);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))logc)(v62, v63);
    v33 = *(void (**)(_QWORD, _QWORD, _QWORD))(v67 + 32);
LABEL_12:
    v68 = *(_QWORD *)(v0 + 448);
    v69 = *(_QWORD *)(v0 + 432);
    v70 = *(_QWORD *)(v0 + 376);
    v33(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 256));
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v71 = *(uint64_t (**)(void))(v0 + 8);
    return v71();
  }
  log = *(os_log_t *)(*(_QWORD *)(v0 + 264) + 32);
  ((void (*)(_QWORD, _QWORD, _QWORD))log)(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v16);
  v18 = v17;
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  *(_QWORD *)(v0 + 184) = 0;
  v22 = objc_msgSend(v15, sel_copyItemAtURL_toURL_error_, v18, v20, v0 + 184);

  v23 = *(void **)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 664);
  v25 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
  v26 = *(_QWORD *)(v0 + 656);
  if (v22)
  {
    v115 = *(_QWORD *)(v0 + 488);
    v118 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v113 = *(_QWORD *)(v0 + 456);
    v27 = *(_QWORD *)(v0 + 344);
    v29 = *(_QWORD *)(v0 + 320);
    v28 = *(_QWORD *)(v0 + 328);
    v30 = *(_QWORD *)(v0 + 272);
    v31 = *(_QWORD *)(v0 + 232);
    v32 = v23;
    outlined consume of Data._Representation(v26, v24);
    outlined consume of Data._Representation(v26, v24);
    v25(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    swift_bridgeObjectRelease();
    v118(v115, v113);
    v33 = (void (*)(_QWORD, _QWORD, _QWORD))log;
    goto LABEL_12;
  }
  v34 = *(_QWORD *)(v0 + 328);
  v119 = *(_QWORD *)(v0 + 320);
  logb = *(os_log_t *)(v0 + 344);
  v35 = *(_QWORD *)(v0 + 288);
  v36 = *(_QWORD *)(v0 + 272);
  v37 = *(_QWORD *)(v0 + 232);
  v38 = v23;
  v6 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  outlined consume of Data._Representation(v26, v24);
  outlined consume of Data._Representation(v26, v24);
  v25(v36, v37);
  v25(v35, v37);
  (*(void (**)(os_log_t, uint64_t))(v34 + 8))(logb, v119);
LABEL_7:
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  v41 = *(_QWORD *)(v0 + 480);
  v40 = *(_QWORD *)(v0 + 488);
  v42 = *(_QWORD *)(v0 + 456);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 376));
  v39(v41, v40, v42);
  v43 = v6;
  v44 = v6;
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v120 = v46;
    loga = v45;
    v111 = (uint64_t *)(v0 + 168);
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
    v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 560);
    v49 = *(_QWORD *)(v0 + 520);
    v50 = *(_QWORD *)(v0 + 512);
    v51 = *(_QWORD *)(v0 + 480);
    v53 = *(_QWORD *)(v0 + 456);
    v52 = *(_QWORD *)(v0 + 464);
    v54 = swift_slowAlloc();
    v116 = swift_slowAlloc();
    *(_QWORD *)(v0 + 168) = v116;
    *(_DWORD *)v54 = 136315394;
    v47(v49, v51, v53);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v53);
    outlined init with copy of URL?(v49, v50, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v48(v50, 1, v53) == 1)
    {
      v55 = 0xE300000000000000;
      v56 = 7104878;
    }
    else
    {
      v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
      v73 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      v74 = *(_QWORD *)(v0 + 504);
      v75 = *(_QWORD *)(v0 + 472);
      v76 = *(_QWORD *)(v0 + 456);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 464) + 32))(v74, *(_QWORD *)(v0 + 512), v76);
      v72(v75, v74, v76);
      v56 = String.init<A>(reflecting:)();
      v55 = v77;
      v73(v74, v76);
    }
    v78 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v79 = *(_QWORD *)(v0 + 480);
    v80 = *(_QWORD *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v78(v79, v80);
    *(_WORD *)(v54 + 12) = 2080;
    *(_QWORD *)(v0 + 152) = v6;
    v81 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v82 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, loga, v120, "Failed to get file from type: %s, error: %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v116, -1, -1);
    MEMORY[0x1A1B05CC4](v54, -1, -1);

  }
  else
  {
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v58 = *(_QWORD *)(v0 + 480);
    v59 = *(_QWORD *)(v0 + 456);

    v57(v58, v59);
  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
  v84 = *(_QWORD *)(v0 + 584) + 1;
  if (v84 == *(_QWORD *)(v0 + 576))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v85 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v71 = *(uint64_t (**)(void))(v0 + 8);
    return v71();
  }
  while (1)
  {
    *(_QWORD *)(v0 + 584) = v84;
    if (v84 >= *(_QWORD *)(*(_QWORD *)(v0 + 568) + 16))
      __break(1u);
    v87 = *(_QWORD *)(v0 + 440);
    v88 = *(_QWORD *)(v0 + 448);
    v89 = *(_QWORD *)(v0 + 424);
    v114 = *(_QWORD *)(v0 + 488);
    v117 = *(_QWORD *)(v0 + 416);
    v90 = *(_QWORD *)(v0 + 400);
    v121 = *(_QWORD *)(v0 + 408);
    v91 = *(_QWORD *)(v0 + 376);
    v110 = *(_QWORD *)(v0 + 392);
    v112 = *(_QWORD *)(v0 + 384);
    v92 = *(_QWORD *)(v0 + 368);
    v107 = *(_QWORD *)(v0 + 432);
    v108 = *(_QWORD *)(v0 + 360);
    v109 = *(_QWORD *)(v0 + 352);
    v93 = *(void (**)(void))(*(_QWORD *)(v0 + 464) + 16);
    *(_QWORD *)(v0 + 592) = v93;
    v93();
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v87, v88, v91);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v92, v109);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v90, v112);
    v94 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v89, v121);
    v95 = swift_task_alloc();
    *(_QWORD *)(v95 + 16) = v114;
    v96 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(_QWORD))partial apply for closure #2 in static URL.file<A>(from:), v95, v94);
    *(_QWORD *)(v0 + 600) = v96;
    swift_task_dealloc();
    v97 = *(_QWORD *)(v96 + 16);
    *(_QWORD *)(v0 + 608) = v97;
    if (v97)
      break;
LABEL_23:
    swift_bridgeObjectRelease();
    v101 = *(_QWORD *)(v0 + 448);
    v102 = *(_QWORD *)(v0 + 432);
    v103 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
    v84 = *(_QWORD *)(v0 + 584) + 1;
    if (v84 == *(_QWORD *)(v0 + 576))
      goto LABEL_16;
  }
  v98 = 0;
  v99 = *(_QWORD *)(v0 + 328);
  *(_DWORD *)(v0 + 716) = *(_DWORD *)(v99 + 80);
  *(_QWORD *)(v0 + 616) = *(_QWORD *)(v99 + 72);
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v99 + 16);
  v100 = MEMORY[0x1E0CB0338];
  while (1)
  {
    *(_QWORD *)(v0 + 632) = v98;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 716) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 716))+ *(_QWORD *)(v0 + 616) * v98, *(_QWORD *)(v0 + 320));
    if (ResolvedTransferRepresentation.representationType.getter() == v100)
      break;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    v98 = *(_QWORD *)(v0 + 632) + 1;
    if (v98 == *(_QWORD *)(v0 + 608))
      goto LABEL_23;
  }
  v104 = swift_task_alloc();
  *(_QWORD *)(v0 + 640) = v104;
  *(_QWORD *)v104 = v0;
  *(_QWORD *)(v104 + 8) = static URL.file<A>(from:);
  v105 = *(_QWORD *)(v0 + 344);
  v106 = *(_OWORD *)(v0 + 224);
  *(_QWORD *)(v104 + 128) = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v104 + 136) = v105;
  *(_OWORD *)(v104 + 112) = v106;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, unint64_t, _QWORD);
  uint64_t v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];

  v67[1] = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for ledger != -1)
LABEL_18:
    swift_once();
  v1 = *(void **)(v0 + 648);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 624);
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 320);
  __swift_project_value_buffer(*(_QWORD *)(v0 + 536), (uint64_t)static Log.ledger);
  v2(v4, v3, v5);
  v6 = v1;
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.fault.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(void **)(v0 + 648);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 504);
    v56 = *(_QWORD *)(v0 + 456);
    v58 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v13 = *(_QWORD *)(v0 + 336);
    v66 = *(_QWORD *)(v0 + 344);
    v60 = *(_QWORD *)(v0 + 328);
    v62 = *(_QWORD *)(v0 + 320);
    v14 = swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v67[0] = v64;
    *(_DWORD *)v14 = 136315394;
    ResolvedTransferRepresentation.contentType.getter();
    v16 = UTType.identifier.getter();
    v18 = v17;
    v58(v12, v56);
    *(_QWORD *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v67);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v19(v13, v62);
    *(_WORD *)(v14 + 12) = 2112;
    v20 = v11;
    v21 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v14 + 14) = v21;
    *v15 = v21;

    _os_log_impl(&dword_1A0DB3000, v8, v9, "Error loading data for type identifier\n%s: %@", (uint8_t *)v14, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v64, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

    v19(v66, v62);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 328);

    v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v26(v23, v24);

    v26(v22, v24);
  }
  v27 = MEMORY[0x1E0CB0338];
  while (1)
  {
    v28 = *(_QWORD *)(v0 + 632) + 1;
    if (v28 == *(_QWORD *)(v0 + 608))
    {
      while (1)
      {
        swift_bridgeObjectRelease();
        v29 = *(_QWORD *)(v0 + 448);
        v30 = *(_QWORD *)(v0 + 432);
        v31 = *(_QWORD *)(v0 + 376);
        (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
        v32 = *(_QWORD *)(v0 + 584) + 1;
        if (v32 == *(_QWORD *)(v0 + 576))
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
          swift_allocError();
          *v48 = 1;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
        *(_QWORD *)(v0 + 584) = v32;
        if (v32 >= *(_QWORD *)(*(_QWORD *)(v0 + 568) + 16))
          break;
        v33 = *(_QWORD *)(v0 + 440);
        v34 = *(_QWORD *)(v0 + 448);
        v35 = *(_QWORD *)(v0 + 424);
        v61 = *(_QWORD *)(v0 + 488);
        v63 = *(_QWORD *)(v0 + 416);
        v36 = *(_QWORD *)(v0 + 400);
        v65 = *(_QWORD *)(v0 + 408);
        v37 = *(_QWORD *)(v0 + 376);
        v57 = *(_QWORD *)(v0 + 392);
        v59 = *(_QWORD *)(v0 + 384);
        v38 = *(_QWORD *)(v0 + 368);
        v53 = *(_QWORD *)(v0 + 432);
        v54 = *(_QWORD *)(v0 + 360);
        v55 = *(_QWORD *)(v0 + 352);
        v39 = *(void (**)(void))(*(_QWORD *)(v0 + 464) + 16);
        *(_QWORD *)(v0 + 592) = v39;
        v39();
        dispatch thunk of static Transferable.transferRepresentation.getter();
        swift_getDynamicType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v33, v34, v37);
        _TransferRepresentationValue.init(_:)();
        _TransferRepresentationInputs.init()();
        swift_getAssociatedConformanceWitness();
        dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v38, v55);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v36, v59);
        v40 = _TransferRepresentationOutputs.storage.getter();
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v35, v65);
        v41 = swift_task_alloc();
        *(_QWORD *)(v41 + 16) = v61;
        v42 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(_QWORD))partial apply for closure #2 in static URL.file<A>(from:), v41, v40);
        *(_QWORD *)(v0 + 600) = v42;
        swift_task_dealloc();
        v43 = *(_QWORD *)(v42 + 16);
        *(_QWORD *)(v0 + 608) = v43;
        if (v43)
        {
          v28 = 0;
          v47 = *(_QWORD *)(v0 + 328);
          v46 = *(_DWORD *)(v47 + 80);
          *(_DWORD *)(v0 + 716) = v46;
          v45 = *(_QWORD *)(v47 + 72);
          *(_QWORD *)(v0 + 616) = v45;
          v44 = *(void (**)(_QWORD, unint64_t, _QWORD))(v47 + 16);
          *(_QWORD *)(v0 + 624) = v44;
          v27 = MEMORY[0x1E0CB0338];
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_18;
    }
    v44 = *(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 624);
    v45 = *(_QWORD *)(v0 + 616);
    LOBYTE(v46) = *(_BYTE *)(v0 + 716);
LABEL_13:
    *(_QWORD *)(v0 + 632) = v28;
    v44(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 600) + ((v46 + 32) & ~(unint64_t)v46) + v45 * v28, *(_QWORD *)(v0 + 320));
    if (ResolvedTransferRepresentation.representationType.getter() == v27)
      break;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
  }
  v50 = swift_task_alloc();
  *(_QWORD *)(v0 + 640) = v50;
  *(_QWORD *)v50 = v0;
  *(_QWORD *)(v50 + 8) = static URL.file<A>(from:);
  v51 = *(_QWORD *)(v0 + 344);
  v52 = *(_OWORD *)(v0 + 224);
  *(_QWORD *)(v50 + 128) = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v50 + 136) = v51;
  *(_OWORD *)(v50 + 112) = v52;
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  NSObject *log;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 232);
  outlined consume of Data._Representation(v3, v2);
  outlined consume of Data._Representation(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  v9 = *(void **)(v0 + 704);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  v12 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 488);
  v13 = *(_QWORD *)(v0 + 456);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 376));
  v10(v12, v11, v13);
  v14 = v9;
  v15 = v9;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v75 = v17;
    log = v16;
    v70 = (uint64_t *)(v0 + 168);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 560);
    v20 = *(_QWORD *)(v0 + 520);
    v21 = *(_QWORD *)(v0 + 512);
    v22 = *(_QWORD *)(v0 + 480);
    v24 = *(_QWORD *)(v0 + 456);
    v23 = *(_QWORD *)(v0 + 464);
    v25 = swift_slowAlloc();
    v73 = swift_slowAlloc();
    *(_QWORD *)(v0 + 168) = v73;
    *(_DWORD *)v25 = 136315394;
    v18(v20, v22, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v24);
    outlined init with copy of URL?(v20, v21, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v19(v21, 1, v24) == 1)
    {
      v26 = 0xE300000000000000;
      v27 = 7104878;
    }
    else
    {
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
      v32 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      v33 = *(_QWORD *)(v0 + 504);
      v34 = *(_QWORD *)(v0 + 472);
      v35 = *(_QWORD *)(v0 + 456);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 464) + 32))(v33, *(_QWORD *)(v0 + 512), v35);
      v31(v34, v33, v35);
      v27 = String.init<A>(reflecting:)();
      v26 = v36;
      v32(v33, v35);
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v38 = *(_QWORD *)(v0 + 480);
    v39 = *(_QWORD *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v37(v38, v39);
    *(_WORD *)(v25 + 12) = 2080;
    *(_QWORD *)(v0 + 152) = v9;
    v40 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v41 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, log, v75, "Failed to get file from type: %s, error: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v73, -1, -1);
    MEMORY[0x1A1B05CC4](v25, -1, -1);

  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v29 = *(_QWORD *)(v0 + 480);
    v30 = *(_QWORD *)(v0 + 456);

    v28(v29, v30);
  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
  v43 = *(_QWORD *)(v0 + 584) + 1;
  if (v43 == *(_QWORD *)(v0 + 576))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v44 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 584) = v43;
      if (v43 >= *(_QWORD *)(*(_QWORD *)(v0 + 568) + 16))
        __break(1u);
      v46 = *(_QWORD *)(v0 + 440);
      v47 = *(_QWORD *)(v0 + 448);
      v48 = *(_QWORD *)(v0 + 424);
      v72 = *(_QWORD *)(v0 + 488);
      v74 = *(_QWORD *)(v0 + 416);
      v49 = *(_QWORD *)(v0 + 400);
      v76 = *(_QWORD *)(v0 + 408);
      v50 = *(_QWORD *)(v0 + 376);
      v69 = *(_QWORD *)(v0 + 392);
      v71 = *(_QWORD *)(v0 + 384);
      v51 = *(_QWORD *)(v0 + 368);
      v66 = *(_QWORD *)(v0 + 432);
      v67 = *(_QWORD *)(v0 + 360);
      v68 = *(_QWORD *)(v0 + 352);
      v52 = *(void (**)(void))(*(_QWORD *)(v0 + 464) + 16);
      *(_QWORD *)(v0 + 592) = v52;
      v52();
      dispatch thunk of static Transferable.transferRepresentation.getter();
      swift_getDynamicType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v46, v47, v50);
      _TransferRepresentationValue.init(_:)();
      _TransferRepresentationInputs.init()();
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v51, v68);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v49, v71);
      v53 = _TransferRepresentationOutputs.storage.getter();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v48, v76);
      v54 = swift_task_alloc();
      *(_QWORD *)(v54 + 16) = v72;
      v55 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(_QWORD))partial apply for closure #2 in static URL.file<A>(from:), v54, v53);
      *(_QWORD *)(v0 + 600) = v55;
      swift_task_dealloc();
      v56 = *(_QWORD *)(v55 + 16);
      *(_QWORD *)(v0 + 608) = v56;
      if (v56)
        break;
LABEL_14:
      swift_bridgeObjectRelease();
      v60 = *(_QWORD *)(v0 + 448);
      v61 = *(_QWORD *)(v0 + 432);
      v62 = *(_QWORD *)(v0 + 376);
      (*(void (**)(_QWORD, _QWORD))(v0 + 552))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 456));
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      v43 = *(_QWORD *)(v0 + 584) + 1;
      if (v43 == *(_QWORD *)(v0 + 576))
        goto LABEL_8;
    }
    v57 = 0;
    v58 = *(_QWORD *)(v0 + 328);
    *(_DWORD *)(v0 + 716) = *(_DWORD *)(v58 + 80);
    *(_QWORD *)(v0 + 616) = *(_QWORD *)(v58 + 72);
    *(_QWORD *)(v0 + 624) = *(_QWORD *)(v58 + 16);
    v59 = MEMORY[0x1E0CB0338];
    while (1)
    {
      *(_QWORD *)(v0 + 632) = v57;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 600)+ ((*(unsigned __int8 *)(v0 + 716) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 716))+ *(_QWORD *)(v0 + 616) * v57, *(_QWORD *)(v0 + 320));
      if (ResolvedTransferRepresentation.representationType.getter() == v59)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
      v57 = *(_QWORD *)(v0 + 632) + 1;
      if (v57 == *(_QWORD *)(v0 + 608))
        goto LABEL_14;
    }
    v63 = swift_task_alloc();
    *(_QWORD *)(v0 + 640) = v63;
    *(_QWORD *)v63 = v0;
    *(_QWORD *)(v63 + 8) = static URL.file<A>(from:);
    v64 = *(_QWORD *)(v0 + 344);
    v65 = *(_OWORD *)(v0 + 224);
    *(_QWORD *)(v63 + 128) = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v63 + 136) = v64;
    *(_OWORD *)(v63 + 112) = v65;
    return swift_task_switch();
  }
}

uint64_t static URL.file<A>(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 648) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 656) = a1;
    *(_QWORD *)(v6 + 664) = a2;
  }
  return swift_task_switch();
}

uint64_t GroupSessionJournal.add(id:attachmentData:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v6[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionJournal.add(id:attachmentData:developerMetadata:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  int *v14;
  _QWORD *v15;
  int *v17;

  v1 = v0[9];
  v2 = v0[6];
  v3 = v0[7];
  v5 = v0[4];
  v4 = v0[5];
  v7 = v0[2];
  v6 = v0[3];
  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, v6, v8);
  v9 = (uint64_t *)(v1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                          + 48));
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1, v5, v10);
  *v9 = v4;
  v9[1] = v2;
  swift_storeEnumTagMultiPayload();
  v11 = type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakInit();
  outlined init with take of Participant(v1, v7 + *(int *)(v11 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  v12 = *(_QWORD *)(v3 + 24);
  ObjectType = swift_getObjectType();
  v14 = *(int **)(v12 + 40);
  outlined copy of Data?(v4, v2);
  v17 = (int *)((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc();
  v0[10] = v15;
  *v15 = v0;
  v15[1] = GroupSessionJournal.add(id:attachmentData:developerMetadata:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v17)(v0[3], v0[4], v0[5], v0[6], ObjectType, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  outlined destroy of Participant(*(_QWORD *)(v0 + 16), type metadata accessor for GroupSessionJournal.Attachment);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionJournal.add<A, B>(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[11] = a8;
  v9[12] = v8;
  v9[9] = a5;
  v9[10] = a6;
  v9[7] = a3;
  v9[8] = a4;
  v9[5] = a1;
  v9[6] = a2;
  v12 = type metadata accessor for URL();
  v9[13] = v12;
  v9[14] = *(_QWORD *)(v12 - 8);
  v9[15] = swift_task_alloc();
  v13 = type metadata accessor for Optional();
  v9[16] = v13;
  v9[17] = *(_QWORD *)(v13 - 8);
  v9[18] = swift_task_alloc();
  v14 = type metadata accessor for Optional();
  v9[19] = v14;
  v9[20] = *(_QWORD *)(v14 - 8);
  v9[21] = swift_task_alloc();
  v9[22] = *(_QWORD *)(a5 - 8);
  v9[23] = swift_task_alloc();
  v9[24] = *(_QWORD *)(a4 - 8);
  v9[25] = swift_task_alloc();
  v15 = type metadata accessor for UUID();
  v9[26] = v15;
  v9[27] = *(_QWORD *)(v15 - 8);
  v9[28] = swift_task_alloc();
  v9[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionJournal.add<A, B>(_:metadata:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;

  UUID.init()();
  if (one-time initialization token for ledger != -1)
    swift_once();
  v51 = v0[28];
  v53 = v0[29];
  v47 = v0[27];
  v1 = v0[25];
  v49 = v0[26];
  v3 = v0[23];
  v2 = v0[24];
  v4 = v0[22];
  v6 = v0[8];
  v5 = v0[9];
  v8 = v0[6];
  v7 = v0[7];
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.ledger);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v44(v1, v8, v6);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v46(v3, v7, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v51, v53, v49);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = v0[27];
  v13 = v0[28];
  v16 = v0[25];
  v15 = v0[26];
  v18 = v0[23];
  v17 = v0[24];
  v19 = v0[22];
  if (v12)
  {
    v54 = v10;
    v20 = v0[21];
    v38 = v0[20];
    v39 = v0[19];
    v50 = v0[27];
    v21 = v0[18];
    v41 = v0[17];
    v42 = v0[16];
    v40 = v0[23];
    v52 = v11;
    v22 = v0[8];
    v23 = v0[9];
    v43 = v0[26];
    v24 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v55 = v48;
    *(_DWORD *)v24 = 136315650;
    v44(v20, v16, v22);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v22);
    v45 = v13;
    v25 = >> prefix<A>(_:)(v20, v22);
    v37 = v19;
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v20, v39);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v22);
    *(_WORD *)(v24 + 12) = 2080;
    v46(v21, v40, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v21, 0, 1, v23);
    v28 = >> prefix<A>(_:)(v21, v23);
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v21, v42);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v23);
    *(_WORD *)(v24 + 22) = 2080;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v31 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v33(v45, v43);
    _os_log_impl(&dword_1A0DB3000, v54, v52, "Received add request for item: %s, metadata: %s, using ID: %s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v48, -1, -1);
    MEMORY[0x1A1B05CC4](v24, -1, -1);

  }
  else
  {
    v34 = v0[9];
    (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v0[25], v0[8]);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v34);
    v33 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v33(v13, v15);

  }
  v0[30] = v33;
  v35 = (_QWORD *)swift_task_alloc();
  v0[31] = v35;
  *v35 = v0;
  v35[1] = GroupSessionJournal.add<A, B>(_:metadata:);
  return static URL.file<A>(from:)(v0[15], v0[6], v0[8], v0[10]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 256);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(_QWORD *)(v0 + 264) = JSONEncoder.init()();
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(_QWORD *)(v0 + 272) = v2;
  *(_QWORD *)(v0 + 280) = v3;
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(_QWORD, _QWORD))(v0 + 240))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v2;
    v9 = v3;
    outlined copy of Data._Representation(v2, v3);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v10;
    *v10 = v0;
    v10[1] = GroupSessionJournal.add<A, B>(_:metadata:);
    return GroupSessionJournal.add(id:attachmentData:developerMetadata:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 120), v8, v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc();
  outlined consume of Data._Representation(*(_QWORD *)(v2 + 272), *(_QWORD *)(v2 + 280));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 104);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v4(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 240))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(_QWORD, _QWORD))(v0 + 240))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionJournal.Attachment.init(id:ledger:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakInit();
  swift_release();
  return outlined init with take of Participant(a2, a3 + *(int *)(v7 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t GroupSessionJournal.remove(attachment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t GroupSessionJournal.remove(attachment:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[3] + 24);
  ObjectType = swift_getObjectType();
  v5 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v1 + 64) + *(_QWORD *)(v1 + 64));
  v3 = (_QWORD *)swift_task_alloc();
  v0[4] = v3;
  *v3 = v0;
  v3[1] = GroupSessionJournal.remove(attachment:);
  return v5(v0[2], ObjectType, v1);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *GroupSessionJournal.__allocating_init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = type metadata accessor for GroupSession(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v6 = (_QWORD *)swift_allocObject();
  return specialized GroupSessionJournal.init(transportSession:)(a1, v6, v5, (uint64_t)&protocol witness table for GroupSession<A>);
}

_QWORD *GroupSessionJournal.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized GroupSessionJournal.__allocating_init(transportSession:)(a1, v2, ObjectType, a2);
}

_QWORD *GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized GroupSessionJournal.init(transportSession:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in GroupSessionJournal.init(transportSession:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v5 = *a1;
  swift_retain();
  v6 = specialized Sequence.compactMap<A>(_:)(v5, a2);
  result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t closure #2 in GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  NSObject *v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  os_log_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83[4];
  uint64_t v84;

  v78 = a2;
  v79 = (char *)a3;
  v68 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1E0C80A78](v68);
  v70 = (uint64_t *)((char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = type metadata accessor for GroupSessionJournal.Attachment(0);
  v71 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v76 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v67 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v75 = (char *)&v63 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v63 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v63 - v16;
  v18 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v81 = (char *)&v63 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v72 = (char *)&v63 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v73 = (char *)&v63 - v31;
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v63 - v32;
  v80 = a4 + 16;
  if (one-time initialization token for ledger != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  v35 = __swift_project_value_buffer(v34, (uint64_t)static Log.ledger);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v82 = a1;
  v36(v33, a1, v21);
  outlined init with copy of Participant((uint64_t)v79, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v74 = v35;
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.default.getter();
  v39 = os_log_type_enabled(v37, (os_log_type_t)v38);
  v77 = v36;
  if (v39)
  {
    v65 = v38;
    v66 = v37;
    v79 = v25;
    v40 = swift_slowAlloc();
    v64 = swift_slowAlloc();
    v83[0] = v64;
    *(_DWORD *)v40 = 136315394;
    v36(v17, (uint64_t)v33, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v17, 0, 1, v21);
    outlined init with copy of URL?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v15, 1, v21) == 1)
    {
      v41 = 7104878;
      v42 = 0xE300000000000000;
    }
    else
    {
      v44 = v73;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v73, v15, v21);
      v36(v72, (uint64_t)v44, v21);
      v41 = String.init<A>(reflecting:)();
      v42 = v45;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v21);
    }
    v43 = v81;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v21);
    *(_WORD *)(v40 + 12) = 2080;
    v46 = Participant.description.getter();
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v48 = v66;
    _os_log_impl(&dword_1A0DB3000, v66, (os_log_type_t)v65, "Received new attachment: %s from: %s", (uint8_t *)v40, 0x16u);
    v49 = v64;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v49, -1, -1);
    MEMORY[0x1A1B05CC4](v40, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v21);
    outlined destroy of Participant((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Participant);

    v43 = v81;
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v77(v43, v82, v21);
    v51 = Data.init(contentsOf:options:)();
    v52 = (uint64_t)v70;
    *v70 = v51;
    *(_QWORD *)(v52 + 8) = v53;
    swift_storeEnumTagMultiPayload();
    v54 = v76;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v76, v43, v21);
    v55 = v69;
    swift_weakInit();
    outlined init with take of Participant(v52, v54 + *(int *)(v55 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    swift_getKeyPath();
    swift_getKeyPath();
    v56 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
    v58 = v57;
    v59 = *v57;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v58 = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
      *v58 = v59;
    }
    v62 = *(_QWORD *)(v59 + 16);
    v61 = *(_QWORD *)(v59 + 24);
    if (v62 >= v61 >> 1)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v59);
      *v58 = v59;
    }
    *(_QWORD *)(v59 + 16) = v62 + 1;
    outlined init with take of Participant(v76, v59+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v62, type metadata accessor for GroupSessionJournal.Attachment);
    v56(v83, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t GroupSessionJournal.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionJournal.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t GroupSessionJournal.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GroupSessionJournal.Attachment.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*GroupSessionJournal.Attachment.id.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t key path getter for GroupSessionJournal.Attachment.ledger : GroupSessionJournal.Attachment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for GroupSessionJournal.Attachment(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(a1, (uint64_t)v6, type metadata accessor for GroupSessionJournal.Attachment);
  Strong = swift_weakLoadStrong();
  result = outlined destroy of Participant((uint64_t)v6, type metadata accessor for GroupSessionJournal.Attachment);
  *a2 = Strong;
  return result;
}

uint64_t GroupSessionJournal.Attachment.ledger.getter()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  return swift_weakLoadStrong();
}

uint64_t GroupSessionJournal.Attachment.ledger.setter()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakAssign();
  return swift_release();
}

uint64_t (*GroupSessionJournal.Attachment.ledger.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(type metadata accessor for GroupSessionJournal.Attachment(0) + 20);
  *(_QWORD *)a1 = swift_weakLoadStrong();
  return GroupSessionJournal.Attachment.ledger.modify;
}

uint64_t GroupSessionJournal.Attachment.ledger.modify()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t GroupSessionJournal.Attachment.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupSessionJournal.Attachment(0);
  return outlined init with copy of Participant(v1 + *(int *)(v3 + 24), a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t GroupSessionJournal.Attachment.source.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GroupSessionJournal.Attachment(0) + 24);
  return outlined assign with take of GroupSessionJournal.Attachment.AttachmentSource(a1, v3);
}

uint64_t (*GroupSessionJournal.Attachment.source.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[126] = v4;
  v5[125] = a4;
  v5[124] = a3;
  v5[123] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
  v5[127] = swift_task_alloc();
  v5[128] = swift_task_alloc();
  v6 = type metadata accessor for GroupSessionJournal.Attachment(0);
  v5[129] = v6;
  v5[130] = *(_QWORD *)(v6 - 8);
  v5[131] = swift_task_alloc();
  v5[132] = swift_task_alloc();
  v5[133] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[134] = swift_task_alloc();
  v5[135] = swift_task_alloc();
  v7 = type metadata accessor for Optional();
  v5[136] = v7;
  v5[137] = *(_QWORD *)(v7 - 8);
  v5[138] = swift_task_alloc();
  v5[139] = swift_task_alloc();
  v8 = type metadata accessor for UTType();
  v5[140] = v8;
  v5[141] = *(_QWORD *)(v8 - 8);
  v5[142] = swift_task_alloc();
  v5[143] = swift_task_alloc();
  v5[144] = swift_task_alloc();
  v9 = type metadata accessor for ResolvedTransferRepresentation();
  v5[145] = v9;
  v5[146] = *(_QWORD *)(v9 - 8);
  v5[147] = swift_task_alloc();
  v5[148] = swift_task_alloc();
  v5[149] = swift_task_alloc();
  v5[150] = swift_task_alloc();
  v5[151] = swift_task_alloc();
  v5[152] = swift_task_alloc();
  v5[153] = swift_task_alloc();
  v5[154] = swift_task_alloc();
  v10 = type metadata accessor for _TransferRepresentationInputs();
  v5[155] = v10;
  v5[156] = *(_QWORD *)(v10 - 8);
  v5[157] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[158] = AssociatedTypeWitness;
  v12 = type metadata accessor for _TransferRepresentationValue();
  v5[159] = v12;
  v5[160] = *(_QWORD *)(v12 - 8);
  v5[161] = swift_task_alloc();
  v13 = type metadata accessor for _TransferRepresentationOutputs();
  v5[162] = v13;
  v5[163] = *(_QWORD *)(v13 - 8);
  v5[164] = swift_task_alloc();
  v5[165] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[166] = swift_task_alloc();
  v5[167] = swift_task_alloc();
  v14 = type metadata accessor for URL();
  v5[168] = v14;
  v5[169] = *(_QWORD *)(v14 - 8);
  v5[170] = swift_task_alloc();
  v5[171] = swift_task_alloc();
  v5[172] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v5[173] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[174] = swift_task_alloc();
  v5[175] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)()
{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t ObjectType;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  unint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  uint64_t (*v141)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144[3];

  outlined init with copy of Participant(*(_QWORD *)(v0 + 1008) + *(int *)(*(_QWORD *)(v0 + 1032) + 24), *(_QWORD *)(v0 + 1384), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v2 = *(uint64_t **)(v0 + 1384);
      v4 = *v2;
      v3 = v2[1];
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      swift_allocError();
      *v5 = 11;
      swift_willThrow();
      outlined consume of Data._Representation(v4, v3);
    }
    else
    {
      Strong = swift_weakLoadStrong();
      *(_QWORD *)(v0 + 1408) = Strong;
      if (Strong)
      {
        *(_QWORD *)(v0 + 1416) = *(_QWORD *)(Strong + 16);
        v32 = *(_QWORD *)(Strong + 24);
        ObjectType = swift_getObjectType();
        v141 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v32 + 48) + *(_QWORD *)(v32 + 48));
        swift_unknownObjectRetain();
        v34 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1424) = v34;
        *v34 = v0;
        v34[1] = GroupSessionJournal.Attachment.load<A>(_:);
        return v141(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1008), ObjectType, v32);
      }
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v56 = 2;
      swift_willThrow();
    }
    goto LABEL_46;
  }
  v6 = *(_QWORD *)(v0 + 1400);
  v7 = *(_QWORD *)(v0 + 1384);
  v8 = *(_QWORD *)(v0 + 1352);
  v9 = *(_QWORD *)(v0 + 1344);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
  outlined consume of Data?(*(_QWORD *)(v7 + *(int *)(v10 + 48)), *(_QWORD *)(v7 + *(int *)(v10 + 48) + 8));
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v11(v6, v7, v9);
  v12 = *(_QWORD *)(v0 + 1400);
  v13 = *(_QWORD *)(v0 + 1392);
  v14 = *(_QWORD *)(v0 + 1352);
  v15 = *(_QWORD *)(v0 + 1344);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v15);
  outlined init with copy of URL?(v12, v13, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1392), &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_6:
      v16 = *(_QWORD *)(v0 + 1064);
      v17 = *(_QWORD *)(v0 + 1008);
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Log.ledger);
      outlined init with copy of Participant(v17, v16, type metadata accessor for GroupSessionJournal.Attachment);
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.error.getter();
      v21 = os_log_type_enabled(v19, v20);
      v22 = *(_QWORD *)(v0 + 1064);
      if (v21)
      {
        v23 = *(_QWORD *)(v0 + 1040);
        v24 = *(_QWORD *)(v0 + 1032);
        v25 = *(_QWORD *)(v0 + 1024);
        v26 = *(_QWORD *)(v0 + 1016);
        v27 = (uint8_t *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        v144[0] = v28;
        *(_DWORD *)v27 = 136315138;
        outlined init with copy of Participant(v22, v25, type metadata accessor for GroupSessionJournal.Attachment);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v24);
        outlined init with copy of URL?(v25, v26, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v24) == 1)
        {
          v29 = 7104878;
          v30 = 0xE300000000000000;
        }
        else
        {
          v114 = *(_QWORD *)(v0 + 1056);
          v115 = *(_QWORD *)(v0 + 1048);
          outlined init with take of Participant(*(_QWORD *)(v0 + 1016), v114, type metadata accessor for GroupSessionJournal.Attachment);
          outlined init with copy of Participant(v114, v115, type metadata accessor for GroupSessionJournal.Attachment);
          v29 = String.init<A>(reflecting:)();
          v30 = v116;
          outlined destroy of Participant(v114, type metadata accessor for GroupSessionJournal.Attachment);
        }
        v117 = *(_QWORD *)(v0 + 1064);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1024), &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        *(_QWORD *)(v0 + 888) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of Participant(v117, type metadata accessor for GroupSessionJournal.Attachment);
        _os_log_impl(&dword_1A0DB3000, v19, v20, "Failed to find URL for attachment %s", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v28, -1, -1);
        MEMORY[0x1A1B05CC4](v27, -1, -1);
      }
      else
      {
        outlined destroy of Participant(*(_QWORD *)(v0 + 1064), type metadata accessor for GroupSessionJournal.Attachment);
      }

      v118 = *(_QWORD *)(v0 + 1400);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v119 = 2;
      swift_willThrow();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v118, &demangling cache variable for type metadata for URL?);
      goto LABEL_46;
    }
LABEL_50:
    swift_once();
    goto LABEL_6;
  }
  v36 = *(_QWORD *)(v0 + 1336);
  v37 = *(_QWORD *)(v0 + 1328);
  v131 = *(_QWORD *)(v0 + 1320);
  v38 = *(_QWORD *)(v0 + 1312);
  v136 = *(_QWORD *)(v0 + 1304);
  v142 = *(_QWORD *)(v0 + 1296);
  v39 = *(_QWORD *)(v0 + 1288);
  v134 = *(_QWORD *)(v0 + 1280);
  v135 = *(_QWORD *)(v0 + 1272);
  v40 = *(_QWORD *)(v0 + 1264);
  v41 = *(_QWORD *)(v0 + 1256);
  v132 = *(_QWORD *)(v0 + 1248);
  v133 = *(_QWORD *)(v0 + 1240);
  v11(*(_QWORD *)(v0 + 1360), *(_QWORD *)(v0 + 1392), *(_QWORD *)(v0 + 1344));
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v37, v36, v40);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v41, v133);
  (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v39, v135);
  v42 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v38, v142);
  v137 = *(_QWORD *)(v42 + 16);
  v143 = v0;
  if (v137)
  {
    v43 = 0;
    v44 = *(_QWORD *)(v0 + 1168);
    v45 = MEMORY[0x1E0DEE9D8];
    while (v43 < *(_QWORD *)(v42 + 16))
    {
      v46 = *(_QWORD *)(v143 + 1232);
      v47 = *(_QWORD *)(v143 + 1224);
      v48 = *(_QWORD *)(v143 + 1160);
      v49 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      v50 = *(_QWORD *)(v44 + 72);
      v0 = v42;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16))(v46, v42 + v49 + v50 * v43, v48);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v51(v47, v46, v48);
      v144[0] = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1);
        v45 = v144[0];
      }
      v53 = *(_QWORD *)(v45 + 16);
      v52 = *(_QWORD *)(v45 + 24);
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        v45 = v144[0];
      }
      ++v43;
      v54 = *(_QWORD *)(v143 + 1224);
      v55 = *(_QWORD *)(v143 + 1160);
      *(_QWORD *)(v45 + 16) = v53 + 1;
      v51(v45 + v49 + v53 * v50, v54, v55);
      v42 = v0;
      if (v137 == v43)
        goto LABEL_23;
    }
    __break(1u);
    goto LABEL_50;
  }
  v45 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  v0 = v143;
  *(_QWORD *)(v143 + 1440) = v45;
  swift_bridgeObjectRelease();
  if (one-time initialization token for ledger != -1)
    swift_once();
  v57 = type metadata accessor for Logger();
  *(_QWORD *)(v143 + 1448) = __swift_project_value_buffer(v57, (uint64_t)static Log.ledger);
  swift_retain_n();
  v58 = Logger.logObject.getter();
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    v144[0] = v61;
    *(_DWORD *)v60 = 136315138;
    *(_QWORD *)(v143 + 968) = v45;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedTransferRepresentation]);
    v62 = String.init<A>(reflecting:)();
    *(_QWORD *)(v143 + 976) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v58, v59, "Supported representations: %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v61, -1, -1);
    MEMORY[0x1A1B05CC4](v60, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v64 = *(_QWORD *)(v45 + 16);
  *(_QWORD *)(v143 + 1456) = v64;
  if (!v64)
  {
LABEL_45:
    swift_release();
    v120 = *(_QWORD *)(v143 + 1400);
    v121 = *(_QWORD *)(v143 + 1360);
    v122 = *(_QWORD *)(v143 + 1352);
    v123 = *(_QWORD *)(v143 + 1344);
    v124 = *(_QWORD *)(v143 + 1336);
    v125 = *(_QWORD *)(v143 + 1320);
    v126 = *(_QWORD *)(v143 + 1264);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v127 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v120, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v124, v126);
LABEL_46:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v65 = 0;
  v66 = *(_QWORD *)(v143 + 1168);
  *(_DWORD *)(v143 + 1608) = *(_DWORD *)(v66 + 80);
  *(_QWORD *)(v143 + 1464) = *(_QWORD *)(v66 + 72);
  *(_QWORD *)(v143 + 1472) = *(_QWORD *)(v66 + 16);
  while (1)
  {
    *(_QWORD *)(v143 + 1480) = v65;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v143 + 1472))(*(_QWORD *)(v143 + 1216), *(_QWORD *)(v143 + 1440)+ ((*(unsigned __int8 *)(v143 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 1608))+ *(_QWORD *)(v143 + 1464) * v65, *(_QWORD *)(v143 + 1160));
    v67 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v143 + 1488) = v67;
    *(_QWORD *)(v143 + 1496) = v68;
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 1472);
    if (v67)
      break;
    v69(*(_QWORD *)(v143 + 1192), *(_QWORD *)(v143 + 1216), *(_QWORD *)(v143 + 1160));
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.error.getter();
    v91 = os_log_type_enabled(v89, v90);
    v92 = *(_QWORD *)(v143 + 1192);
    v93 = *(_QWORD *)(v143 + 1168);
    v94 = *(_QWORD *)(v143 + 1160);
    if (v91)
    {
      v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 1472);
      v96 = *(_QWORD *)(v143 + 1080);
      v97 = *(_QWORD *)(v143 + 1072);
      v98 = swift_slowAlloc();
      v139 = swift_slowAlloc();
      *(_QWORD *)(v143 + 944) = v139;
      *(_DWORD *)v98 = 136315138;
      v95(v96, v92, v94);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v96, 0, 1, v94);
      outlined init with copy of URL?(v96, v97, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v97, 1, v94) == 1)
      {
        v99 = 0xE300000000000000;
        v100 = 7104878;
      }
      else
      {
        v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 1472);
        v104 = *(_QWORD *)(v143 + 1184);
        v105 = *(_QWORD *)(v143 + 1176);
        v106 = *(_QWORD *)(v143 + 1168);
        v107 = *(_QWORD *)(v143 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v106 + 32))(v104, *(_QWORD *)(v143 + 1072), v107);
        v103(v105, v104, v107);
        v100 = String.init<A>(reflecting:)();
        v99 = v108;
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v107);
      }
      v109 = *(_QWORD *)(v143 + 1216);
      v110 = *(_QWORD *)(v143 + 1192);
      v111 = *(_QWORD *)(v143 + 1168);
      v112 = *(_QWORD *)(v143 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v143 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v98 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v99, (uint64_t *)(v143 + 944));
      swift_bridgeObjectRelease();
      v113 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
      v113(v110, v112);
      _os_log_impl(&dword_1A0DB3000, v89, v90, "Failed to find importing closure from representation %s", (uint8_t *)v98, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v139, -1, -1);
      MEMORY[0x1A1B05CC4](v98, -1, -1);

      v113(v109, v112);
    }
    else
    {
      v101 = *(_QWORD *)(v143 + 1216);

      v102 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v102(v92, v94);
      v102(v101, v94);
    }
    v65 = *(_QWORD *)(v143 + 1480) + 1;
    if (v65 == *(_QWORD *)(v143 + 1456))
      goto LABEL_45;
  }
  v70 = (int *)v67;
  v71 = *(_QWORD *)(v143 + 1216);
  v72 = *(_QWORD *)(v143 + 1208);
  v138 = *(_QWORD *)(v143 + 1160);
  v73 = *(_QWORD *)(v143 + 1152);
  v74 = *(_QWORD *)(v143 + 1144);
  v75 = *(_QWORD *)(v143 + 1128);
  v76 = *(_QWORD *)(v143 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v77 = static UTType.== infix(_:_:)();
  v78 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  *(_QWORD *)(v143 + 1504) = v78;
  v78(v74, v76);
  v78(v73, v76);
  v69(v72, v71, v138);
  v79 = *(_QWORD *)(v143 + 1208);
  v80 = *(_QWORD *)(v143 + 1168);
  v81 = *(_QWORD *)(v143 + 1160);
  if ((v77 & 1) != 0)
  {
    v86 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v86(*(_QWORD *)(v143 + 1208), *(_QWORD *)(v143 + 1160));
  }
  else
  {
    v82 = *(_QWORD *)(v143 + 1152);
    v83 = *(_QWORD *)(v143 + 1144);
    v84 = *(_QWORD *)(v143 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v85 = static UTType.== infix(_:_:)();
    v78(v83, v84);
    v78(v82, v84);
    v86 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    *(_QWORD *)(v143 + 1512) = v86;
    v86(v79, v81);
    if ((v85 & 1) == 0)
    {
      v87 = Data.init(contentsOf:options:)();
      *(_QWORD *)(v143 + 1576) = v87;
      *(_QWORD *)(v143 + 1584) = v88;
      v129 = MEMORY[0x1E0CA86D8];
      *(_QWORD *)(v143 + 240) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v143 + 248) = v129;
      *(_QWORD *)(v143 + 216) = v87;
      *(_QWORD *)(v143 + 224) = v88;
      outlined copy of Data._Representation(v87, v88);
      v140 = (uint64_t (*)(uint64_t, uint64_t))((char *)v70 + *v70);
      v130 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v143 + 1592) = v130;
      *v130 = v143;
      v130[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return v140(v143 + 176, v143 + 216);
    }
  }
  *(_QWORD *)(v143 + 1520) = v86;
  ResolvedTransferRepresentation.contentType.getter();
  v128 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v143 + 1528) = v128;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
  *v128 = v143;
  v128[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return Transferable.data(contentType:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1432) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  unint64_t v76;
  id v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t MetatypeMetadata;
  uint64_t v88;
  unint64_t v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  int *v150;
  uint64_t v151[3];

  v1 = v0[175];
  v2 = v0[171];
  v3 = v0[169];
  v4 = v0[168];
  swift_release();
  swift_unknownObjectRelease();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v5(v1, v2, v4);
  v144 = (void *)v0[179];
  v6 = v0[175];
  v7 = v0[174];
  v8 = v0[169];
  v9 = v0[168];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v9);
  outlined init with copy of URL?(v6, v7, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v9) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[174], &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_3:
      v10 = v0[133];
      v11 = v0[126];
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Log.ledger);
      outlined init with copy of Participant(v11, v10, type metadata accessor for GroupSessionJournal.Attachment);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.error.getter();
      v15 = os_log_type_enabled(v13, v14);
      v16 = v0[133];
      if (v15)
      {
        v17 = v0[130];
        v18 = v0[129];
        v19 = v0[128];
        v20 = v0[127];
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = swift_slowAlloc();
        v151[0] = v22;
        *(_DWORD *)v21 = 136315138;
        outlined init with copy of Participant(v16, v19, type metadata accessor for GroupSessionJournal.Attachment);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v18);
        outlined init with copy of URL?(v19, v20, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v18) == 1)
        {
          v23 = 7104878;
          v24 = 0xE300000000000000;
        }
        else
        {
          v118 = v0[132];
          v119 = v0[131];
          outlined init with take of Participant(v0[127], v118, type metadata accessor for GroupSessionJournal.Attachment);
          outlined init with copy of Participant(v118, v119, type metadata accessor for GroupSessionJournal.Attachment);
          v23 = String.init<A>(reflecting:)();
          v24 = v120;
          outlined destroy of Participant(v118, type metadata accessor for GroupSessionJournal.Attachment);
        }
        v121 = v0[133];
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[128], &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        v0[111] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of Participant(v121, type metadata accessor for GroupSessionJournal.Attachment);
        _os_log_impl(&dword_1A0DB3000, v13, v14, "Failed to find URL for attachment %s", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v22, -1, -1);
        MEMORY[0x1A1B05CC4](v21, -1, -1);
      }
      else
      {
        outlined destroy of Participant(v0[133], type metadata accessor for GroupSessionJournal.Attachment);
      }

      v122 = v0[175];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v123 = 2;
      swift_willThrow();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v122, &demangling cache variable for type metadata for URL?);
      goto LABEL_44;
    }
LABEL_49:
    swift_once();
    goto LABEL_3;
  }
  v25 = v0[167];
  v26 = v0[166];
  v136 = v0[165];
  v27 = v0[164];
  v145 = v0[163];
  v148 = v0[162];
  v28 = v0[161];
  v141 = v0[160];
  v142 = v0[159];
  v29 = v0[158];
  v30 = v0[157];
  v138 = v0[156];
  v139 = v0[155];
  v5(v0[170], v0[174], v0[168]);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v136 + 16))(v26, v25, v29);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v30, v139);
  (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v28, v142);
  v31 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v27, v148);
  v146 = *(_QWORD *)(v31 + 16);
  v149 = v0;
  if (v146)
  {
    v32 = 0;
    v33 = v0[146];
    v34 = MEMORY[0x1E0DEE9D8];
    v0 = (_QWORD *)v31;
    while (v32 < v0[2])
    {
      v35 = v149[154];
      v36 = v149[153];
      v37 = v149[145];
      v38 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      v39 = *(_QWORD *)(v33 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16))(v35, (unint64_t)v0 + v38 + v39 * v32, v37);
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
      v40(v36, v35, v37);
      v151[0] = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
        v34 = v151[0];
      }
      v42 = *(_QWORD *)(v34 + 16);
      v41 = *(_QWORD *)(v34 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
        v34 = v151[0];
      }
      ++v32;
      v43 = v149[153];
      v44 = v149[145];
      *(_QWORD *)(v34 + 16) = v42 + 1;
      v40(v34 + v38 + v42 * v39, v43, v44);
      if (v146 == v32)
        goto LABEL_17;
    }
    __break(1u);
    goto LABEL_49;
  }
  v34 = MEMORY[0x1E0DEE9D8];
LABEL_17:
  v0 = v149;
  v149[180] = v34;
  swift_bridgeObjectRelease();
  if (one-time initialization token for ledger != -1)
    swift_once();
  v45 = type metadata accessor for Logger();
  v149[181] = __swift_project_value_buffer(v45, (uint64_t)static Log.ledger);
  swift_retain_n();
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    v49 = swift_slowAlloc();
    v151[0] = v49;
    *(_DWORD *)v48 = 136315138;
    v149[121] = v34;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedTransferRepresentation]);
    v50 = String.init<A>(reflecting:)();
    v149[122] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v151);
    v0 = v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v46, v47, "Supported representations: %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v49, -1, -1);
    MEMORY[0x1A1B05CC4](v48, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v52 = *(_QWORD *)(v34 + 16);
  v0[182] = v52;
  if (!v52)
  {
LABEL_43:
    swift_release();
    v124 = v0[175];
    v125 = v0[170];
    v126 = v0[169];
    v127 = v0[168];
    v128 = v0[167];
    v129 = v0[165];
    v130 = v0[158];
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v131 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v125, v127);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v124, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
LABEL_44:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
  v53 = 0;
  v140 = (uint64_t)(v0 + 117);
  v137 = v0 + 118;
  v54 = v0[146];
  *((_DWORD *)v0 + 402) = *(_DWORD *)(v54 + 80);
  v0[183] = *(_QWORD *)(v54 + 72);
  v0[184] = *(_QWORD *)(v54 + 16);
  while (1)
  {
    v0[185] = v53;
    ((void (*)(_QWORD, unint64_t, _QWORD))v0[184])(v0[152], v0[180]+ ((*((unsigned __int8 *)v0 + 1608) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 1608))+ v0[183] * v53, v0[145]);
    v55 = ResolvedTransferRepresentation.importing.getter();
    v0[186] = v55;
    v0[187] = v56;
    v57 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
    if (!v55)
    {
      v57(v0[149], v0[152], v0[145]);
      v93 = Logger.logObject.getter();
      v94 = static os_log_type_t.error.getter();
      v95 = os_log_type_enabled(v93, v94);
      v96 = v0[149];
      v97 = v0[146];
      v98 = v0[145];
      if (v95)
      {
        v99 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
        v100 = v0[135];
        v101 = v0[134];
        v102 = swift_slowAlloc();
        v147 = swift_slowAlloc();
        v0[118] = v147;
        *(_DWORD *)v102 = 136315138;
        v99(v100, v96, v98);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v97 + 56))(v100, 0, 1, v98);
        outlined init with copy of URL?(v100, v101, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v101, 1, v98) == 1)
        {
          v103 = 0xE300000000000000;
          v104 = 7104878;
        }
        else
        {
          v107 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
          v108 = v0[148];
          v109 = v0[147];
          v110 = v0[146];
          v111 = v0[145];
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 32))(v108, v0[134], v111);
          v107(v109, v108, v111);
          v104 = String.init<A>(reflecting:)();
          v103 = v112;
          (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v111);
        }
        v113 = v0[152];
        v114 = v0[149];
        v115 = v0[146];
        v116 = v0[145];
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[135], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        *(_QWORD *)(v102 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v103, v137);
        swift_bridgeObjectRelease();
        v117 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
        v117(v114, v116);
        _os_log_impl(&dword_1A0DB3000, v93, v94, "Failed to find importing closure from representation %s", (uint8_t *)v102, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v147, -1, -1);
        MEMORY[0x1A1B05CC4](v102, -1, -1);

        v117(v113, v116);
      }
      else
      {
        v105 = v0[152];

        v106 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
        v106(v96, v98);
        v106(v105, v98);
      }
      goto LABEL_26;
    }
    v143 = (int *)v55;
    v58 = v0[152];
    v59 = v0[151];
    v60 = v0[145];
    v61 = v0[144];
    v62 = v0[143];
    v63 = v0[141];
    v64 = v0[140];
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.url.getter();
    v65 = static UTType.== infix(_:_:)();
    v66 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v0[188] = v66;
    v66(v62, v64);
    v66(v61, v64);
    v57(v59, v58, v60);
    v67 = v0[151];
    v68 = v0[146];
    v69 = v0[145];
    if ((v65 & 1) != 0)
    {
      v74 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v74(v0[151], v0[145]);
LABEL_46:
      v0[190] = v74;
      ResolvedTransferRepresentation.contentType.getter();
      v133 = (_QWORD *)swift_task_alloc();
      v0[191] = v133;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
      *v133 = v0;
      v133[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return Transferable.data(contentType:)();
    }
    v70 = v0[144];
    v71 = v0[143];
    v72 = v0[140];
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v73 = static UTType.== infix(_:_:)();
    v66(v71, v72);
    v66(v70, v72);
    v74 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v0[189] = v74;
    v74(v67, v69);
    if ((v73 & 1) != 0)
      goto LABEL_46;
    v75 = Data.init(contentsOf:options:)();
    v0[197] = v75;
    v0[198] = v76;
    if (!v144)
      break;
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v0[126], v0[170]);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v143);
    v77 = v144;
    v78 = v144;
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    v81 = os_log_type_enabled(v79, v80);
    v82 = v0[152];
    v83 = v0[145];
    if (v81)
    {
      v84 = v0[124];
      v85 = swift_slowAlloc();
      v86 = swift_slowAlloc();
      v151[0] = v86;
      *(_DWORD *)v85 = 136315394;
      v149[117] = v84;
      MetatypeMetadata = swift_getMetatypeMetadata();
      v88 = >> prefix<A>(_:)(v140, MetatypeMetadata);
      *(_QWORD *)(v85 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v151);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 12) = 2080;
      v149[115] = v144;
      v90 = v144;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v91 = String.init<A>(reflecting:)();
      *(_QWORD *)(v85 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v151);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v79, v80, "Failed load %s, error: %s", (uint8_t *)v85, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v86, -1, -1);
      v0 = v149;
      MEMORY[0x1A1B05CC4](v85, -1, -1);

    }
    else
    {

    }
    v74(v82, v83);
    v144 = 0;
LABEL_26:
    v53 = v0[185] + 1;
    if (v53 == v0[182])
      goto LABEL_43;
  }
  v134 = MEMORY[0x1E0CA86D8];
  v0[30] = MEMORY[0x1E0CB0338];
  v0[31] = v134;
  v0[27] = v75;
  v0[28] = v76;
  outlined copy of Data._Representation(v75, v76);
  v150 = (int *)((char *)v143 + *v143);
  v135 = (_QWORD *)swift_task_alloc();
  v0[199] = v135;
  *v135 = v0;
  v135[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return ((uint64_t (*)(_QWORD *, _QWORD *))v150)(v0 + 22, v0 + 27);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 1544);
  v2 = *(_QWORD *)(v0 + 1536);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1200), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
  outlined copy of Data._Representation(v2, v1);
  outlined copy of Data._Representation(v2, v1);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1544);
    v6 = *(_QWORD *)(v0 + 1536);
    v23 = *(_QWORD *)(v0 + 1200);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1504);
    v25 = *(_QWORD *)(v0 + 1160);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
    v7 = *(_QWORD *)(v0 + 1152);
    v8 = *(_QWORD *)(v0 + 1120);
    v9 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v30 = v28;
    *(_DWORD *)v9 = 136315394;
    type = v4;
    ResolvedTransferRepresentation.contentType.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0378]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v12 = v11;
    v24(v7, v8);
    *(_QWORD *)(v0 + 952) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26(v23, v25);
    *(_WORD *)(v9 + 12) = 2080;
    outlined copy of Data._Representation(v6, v5);
    v13 = Data.description.getter();
    v15 = v14;
    outlined consume of Data._Representation(v6, v5);
    *(_QWORD *)(v0 + 960) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v6, v5);
    outlined consume of Data._Representation(v6, v5);
    _os_log_impl(&dword_1A0DB3000, v3, type, "Exported data from attachmentURL to contentType: %s successfully. %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v28, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 1544);
    v17 = *(_QWORD *)(v0 + 1536);
    (*(void (**)(_QWORD, _QWORD))(v0 + 1520))(*(_QWORD *)(v0 + 1200), *(_QWORD *)(v0 + 1160));
    outlined consume of Data._Representation(v17, v16);
    outlined consume of Data._Representation(v17, v16);
  }

  v18 = *(_QWORD *)(v0 + 1544);
  v19 = *(_QWORD *)(v0 + 1536);
  v20 = *(int **)(v0 + 1488);
  *(_QWORD *)(v0 + 640) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(v0 + 648) = MEMORY[0x1E0CA86D8];
  *(_QWORD *)(v0 + 616) = v19;
  *(_QWORD *)(v0 + 624) = v18;
  outlined copy of Data._Representation(v19, v18);
  v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1560) = v21;
  *v21 = v0;
  v21[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return v29(v0 + 576, v0 + 616);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 1568) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 616);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t MetatypeMetadata;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  unint64_t v90;
  id v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  os_log_type_t v119;
  void *v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t (*v131)(uint64_t, uint64_t);
  uint64_t v132[3];

  v1 = v0 + 576;
  v2 = v0 + 696;
  outlined init with copy of AudioSessionAssertionManager(v0 + 576, v0 + 656);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_QWORD *)(v0 + 904) = v6;
    *(_DWORD *)v5 = 136315138;
    outlined init with copy of AudioSessionAssertionManager(v0 + 656, v0 + 336);
    outlined init with copy of URL?(v0 + 336, v0 + 136, &demangling cache variable for type metadata for Transferable?);
    if (*(_QWORD *)(v0 + 160))
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 136), v0 + 96);
      outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 56);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
      v7 = String.init<A>(reflecting:)();
      v9 = v8;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
    }
    else
    {
      v7 = 7104878;
      v9 = 0xE300000000000000;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 336, &demangling cache variable for type metadata for Transferable?);
    *(_QWORD *)(v0 + 928) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, (uint64_t *)(v0 + 904));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 656);
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Imported attachmentURL successfully. %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

    v2 = v0 + 696;
    v1 = v0 + 576;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 656);

  }
  outlined init with copy of AudioSessionAssertionManager(v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  if (swift_dynamicCast())
  {
    v114 = *(_QWORD *)(v0 + 1544);
    v10 = *(_QWORD *)(v0 + 1536);
    v11 = *(_QWORD *)(v0 + 1488);
    v121 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
    v127 = *(_QWORD *)(v0 + 1400);
    v124 = *(_QWORD *)(v0 + 1360);
    v116 = *(_QWORD *)(v0 + 1352);
    v122 = *(_QWORD *)(v0 + 1344);
    v12 = *(_QWORD *)(v0 + 1216);
    v13 = *(_QWORD *)(v0 + 1160);
    v14 = *(_QWORD *)(v0 + 1112);
    v15 = *(_QWORD *)(v0 + 992);
    v125 = *(_QWORD *)(v0 + 984);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v11);
    outlined consume of Data._Representation(v10, v114);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    v121(v12, v13);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v124, v122);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v127, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v125, v14, v15);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1320) + 8))(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  v18 = *(_QWORD *)(v0 + 1112);
  v19 = *(_QWORD *)(v0 + 1096);
  v20 = *(_QWORD *)(v0 + 1088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 992) - 8) + 56))(v18, 1, 1);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  outlined init with copy of AudioSessionAssertionManager(v1, v0 + 16);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v119 = v22;
    v123 = (uint64_t *)(v0 + 856);
    v23 = swift_slowAlloc();
    v126 = swift_slowAlloc();
    *(_QWORD *)(v0 + 856) = v126;
    *(_DWORD *)v23 = 136315394;
    outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 816);
    outlined init with copy of URL?(v0 + 816, v0 + 776, &demangling cache variable for type metadata for Transferable?);
    if (*(_QWORD *)(v0 + 800))
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 776), v0 + 736);
      outlined init with copy of AudioSessionAssertionManager(v0 + 736, v0 + 456);
      v24 = String.init<A>(reflecting:)();
      v26 = v25;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 736);
    }
    else
    {
      v26 = 0xE300000000000000;
      v24 = 7104878;
    }
    v111 = *(_QWORD *)(v0 + 1536);
    v112 = *(_QWORD *)(v0 + 1544);
    v110 = *(_QWORD *)(v0 + 1488);
    v115 = *(_QWORD *)(v0 + 1216);
    v117 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
    v113 = *(_QWORD *)(v0 + 1160);
    v32 = *(_QWORD *)(v0 + 992);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 816, &demangling cache variable for type metadata for Transferable?);
    *(_QWORD *)(v0 + 864) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    *(_WORD *)(v23 + 12) = 2080;
    *(_QWORD *)(v0 + 872) = v32;
    MetatypeMetadata = swift_getMetatypeMetadata();
    v34 = >> prefix<A>(_:)(v0 + 872, MetatypeMetadata);
    *(_QWORD *)(v0 + 880) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v21, v119, "Failed to convert %s to %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v126, -1, -1);
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v110);

    outlined consume of Data._Representation(v111, v112);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    v117(v115, v113);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 1544);
    v28 = *(_QWORD *)(v0 + 1536);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
    v30 = *(_QWORD *)(v0 + 1216);
    v31 = *(_QWORD *)(v0 + 1160);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 1488));

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    outlined consume of Data._Representation(v28, v27);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    v29(v30, v31);
  }
  v36 = *(_QWORD *)(v0 + 1480) + 1;
  if (v36 == *(_QWORD *)(v0 + 1456))
  {
LABEL_16:
    swift_release();
    v37 = *(_QWORD *)(v0 + 1400);
    v38 = *(_QWORD *)(v0 + 1360);
    v39 = *(_QWORD *)(v0 + 1352);
    v40 = *(_QWORD *)(v0 + 1344);
    v41 = *(_QWORD *)(v0 + 1336);
    v42 = *(_QWORD *)(v0 + 1320);
    v43 = *(_QWORD *)(v0 + 1264);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v44 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v37, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  v120 = *(void **)(v0 + 1568);
  while (1)
  {
    *(_QWORD *)(v0 + 1480) = v36;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1608))+ *(_QWORD *)(v0 + 1464) * v36, *(_QWORD *)(v0 + 1160));
    v48 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 1488) = v48;
    *(_QWORD *)(v0 + 1496) = v49;
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
    if (v48)
      break;
    v50(*(_QWORD *)(v0 + 1192), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    v53 = os_log_type_enabled(v51, v52);
    v54 = *(_QWORD *)(v0 + 1192);
    v55 = *(_QWORD *)(v0 + 1168);
    v56 = *(_QWORD *)(v0 + 1160);
    if (v53)
    {
      v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      v58 = *(_QWORD *)(v0 + 1080);
      v59 = *(_QWORD *)(v0 + 1072);
      v60 = swift_slowAlloc();
      v128 = swift_slowAlloc();
      *(_QWORD *)(v0 + 944) = v128;
      *(_DWORD *)v60 = 136315138;
      v57(v58, v54, v56);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v56);
      outlined init with copy of URL?(v58, v59, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v59, 1, v56) == 1)
      {
        v61 = 0xE300000000000000;
        v62 = 7104878;
      }
      else
      {
        v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        v64 = *(_QWORD *)(v0 + 1184);
        v65 = *(_QWORD *)(v0 + 1176);
        v66 = *(_QWORD *)(v0 + 1168);
        v67 = *(_QWORD *)(v0 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 32))(v64, *(_QWORD *)(v0 + 1072), v67);
        v63(v65, v64, v67);
        v62 = String.init<A>(reflecting:)();
        v61 = v68;
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v67);
      }
      v69 = *(_QWORD *)(v0 + 1216);
      v70 = *(_QWORD *)(v0 + 1192);
      v71 = *(_QWORD *)(v0 + 1168);
      v72 = *(_QWORD *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v60 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v61, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      v73 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v73(v70, v72);
      _os_log_impl(&dword_1A0DB3000, v51, v52, "Failed to find importing closure from representation %s", (uint8_t *)v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v128, -1, -1);
      MEMORY[0x1A1B05CC4](v60, -1, -1);

      v73(v69, v72);
    }
    else
    {
      v46 = *(_QWORD *)(v0 + 1216);

      v47 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v47(v54, v56);
      v47(v46, v56);
    }
LABEL_20:
    v36 = *(_QWORD *)(v0 + 1480) + 1;
    if (v36 == *(_QWORD *)(v0 + 1456))
      goto LABEL_16;
  }
  v74 = (int *)v48;
  v75 = *(_QWORD *)(v0 + 1216);
  v118 = *(_QWORD *)(v0 + 1208);
  v129 = *(_QWORD *)(v0 + 1160);
  v76 = *(_QWORD *)(v0 + 1152);
  v77 = *(_QWORD *)(v0 + 1144);
  v78 = *(_QWORD *)(v0 + 1128);
  v79 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v80 = static UTType.== infix(_:_:)();
  v81 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
  *(_QWORD *)(v0 + 1504) = v81;
  v81(v77, v79);
  v81(v76, v79);
  v50(v118, v75, v129);
  v82 = *(_QWORD *)(v0 + 1208);
  v83 = *(_QWORD *)(v0 + 1168);
  v84 = *(_QWORD *)(v0 + 1160);
  if ((v80 & 1) != 0)
  {
    v88 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v88(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1160));
LABEL_35:
    *(_QWORD *)(v0 + 1520) = v88;
    ResolvedTransferRepresentation.contentType.getter();
    v107 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1528) = v107;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
    *v107 = v0;
    v107[1] = GroupSessionJournal.Attachment.load<A>(_:);
    return Transferable.data(contentType:)();
  }
  v85 = *(_QWORD *)(v0 + 1152);
  v86 = *(_QWORD *)(v0 + 1144);
  v87 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.fileURL.getter();
  v130 = static UTType.== infix(_:_:)();
  v81(v86, v87);
  v81(v85, v87);
  v88 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  *(_QWORD *)(v0 + 1512) = v88;
  v88(v82, v84);
  if ((v130 & 1) != 0)
    goto LABEL_35;
  v89 = Data.init(contentsOf:options:)();
  *(_QWORD *)(v0 + 1576) = v89;
  *(_QWORD *)(v0 + 1584) = v90;
  if (v120)
  {
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 1360));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v74);
    v91 = v120;
    v92 = v120;
    v93 = Logger.logObject.getter();
    v94 = static os_log_type_t.error.getter();
    v95 = os_log_type_enabled(v93, v94);
    v96 = *(_QWORD *)(v0 + 1216);
    v97 = *(_QWORD *)(v0 + 1160);
    if (v95)
    {
      v98 = *(_QWORD *)(v0 + 992);
      v99 = swift_slowAlloc();
      v100 = swift_slowAlloc();
      v132[0] = v100;
      *(_DWORD *)v99 = 136315394;
      *(_QWORD *)(v0 + 936) = v98;
      v101 = swift_getMetatypeMetadata();
      v102 = >> prefix<A>(_:)(v0 + 936, v101);
      *(_QWORD *)(v99 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v132);
      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 12) = 2080;
      *(_QWORD *)(v0 + 920) = v120;
      v104 = v120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v105 = String.init<A>(reflecting:)();
      *(_QWORD *)(v99 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v132);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v93, v94, "Failed load %s, error: %s", (uint8_t *)v99, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v100, -1, -1);
      MEMORY[0x1A1B05CC4](v99, -1, -1);

    }
    else
    {

    }
    v88(v96, v97);
    v120 = 0;
    goto LABEL_20;
  }
  v108 = MEMORY[0x1E0CA86D8];
  *(_QWORD *)(v0 + 240) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(v0 + 248) = v108;
  *(_QWORD *)(v0 + 216) = v89;
  *(_QWORD *)(v0 + 224) = v90;
  outlined copy of Data._Representation(v89, v90);
  v131 = (uint64_t (*)(uint64_t, uint64_t))((char *)v74 + *v74);
  v109 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1592) = v109;
  *v109 = v0;
  v109[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return v131(v0 + 176, v0 + 216);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 1600) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 216);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t MetatypeMetadata;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  unint64_t v84;
  id v85;
  id v86;
  NSObject *v87;
  os_log_type_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t (*v120)(uint64_t, uint64_t);
  uint64_t v121[3];

  outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 1584);
    v2 = *(_QWORD *)(v0 + 1576);
    v114 = *(void (**)(uint64_t, uint64_t))(v0 + 1512);
    v107 = *(_QWORD *)(v0 + 1488);
    v115 = *(_QWORD *)(v0 + 1400);
    v3 = *(_QWORD *)(v0 + 1360);
    v110 = *(_QWORD *)(v0 + 1352);
    v112 = *(_QWORD *)(v0 + 1344);
    v105 = *(_QWORD *)(v0 + 1160);
    v106 = *(_QWORD *)(v0 + 1216);
    v4 = *(_QWORD *)(v0 + 1104);
    v104 = *(_QWORD *)(v0 + 1008);
    v5 = *(_QWORD *)(v0 + 992);
    v6 = *(_QWORD *)(v0 + 984);
    v7 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v5);
    outlined consume of Data._Representation(v2, v1);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, v4, v5);
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v104, v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v107);
    v114(v106, v105);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v3, v112);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v115, &demangling cache variable for type metadata for URL?);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1320) + 8))(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v9 = *(_QWORD *)(v0 + 1104);
  v10 = *(_QWORD *)(v0 + 1096);
  v11 = *(_QWORD *)(v0 + 1088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 992) - 8) + 56))(v9, 1, 1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 296);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v116 = (uint64_t *)(v0 + 912);
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    *(_QWORD *)(v0 + 912) = v15;
    *(_DWORD *)v14 = 136315394;
    outlined init with copy of AudioSessionAssertionManager(v0 + 296, v0 + 376);
    outlined init with copy of URL?(v0 + 376, v0 + 416, &demangling cache variable for type metadata for Transferable?);
    if (*(_QWORD *)(v0 + 440))
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 416), v0 + 496);
      outlined init with copy of AudioSessionAssertionManager(v0 + 496, v0 + 536);
      v16 = String.init<A>(reflecting:)();
      v18 = v17;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 496);
    }
    else
    {
      v18 = 0xE300000000000000;
      v16 = 7104878;
    }
    v111 = *(_QWORD *)(v0 + 1576);
    v113 = *(_QWORD *)(v0 + 1584);
    v22 = *(_QWORD *)(v0 + 992);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 376, &demangling cache variable for type metadata for Transferable?);
    *(_QWORD *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v116);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 296);
    *(_WORD *)(v14 + 12) = 2080;
    *(_QWORD *)(v0 + 896) = v22;
    MetatypeMetadata = swift_getMetatypeMetadata();
    v24 = >> prefix<A>(_:)(v0 + 896, MetatypeMetadata);
    *(_QWORD *)(v14 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v116);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "Failed to convert %s to %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

    outlined consume of Data._Representation(v111, v113);
    v21 = v0 + 176;
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 1584);
    v20 = *(_QWORD *)(v0 + 1576);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 296);
    outlined consume of Data._Representation(v20, v19);
    v21 = v0 + 176;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
  v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1512);
  v27 = *(_QWORD *)(v0 + 1488);
  v28 = *(_QWORD *)(v0 + 1216);
  v29 = *(_QWORD *)(v0 + 1160);
  $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 1360));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v27);
  v26(v28, v29);
  v30 = *(_QWORD *)(v0 + 1480) + 1;
  if (v30 == *(_QWORD *)(v0 + 1456))
  {
LABEL_10:
    swift_release();
    v31 = *(_QWORD *)(v0 + 1400);
    v32 = *(_QWORD *)(v0 + 1360);
    v33 = *(_QWORD *)(v0 + 1352);
    v34 = *(_QWORD *)(v0 + 1344);
    v35 = *(_QWORD *)(v0 + 1336);
    v36 = *(_QWORD *)(v0 + 1320);
    v37 = *(_QWORD *)(v0 + 1264);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v38 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v31, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v109 = *(void **)(v0 + 1600);
  while (1)
  {
    *(_QWORD *)(v0 + 1480) = v30;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1608))+ *(_QWORD *)(v0 + 1464) * v30, *(_QWORD *)(v0 + 1160));
    v42 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 1488) = v42;
    *(_QWORD *)(v0 + 1496) = v43;
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
    if (v42)
      break;
    v44(*(_QWORD *)(v0 + 1192), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    v47 = os_log_type_enabled(v45, v46);
    v48 = *(_QWORD *)(v0 + 1192);
    v49 = *(_QWORD *)(v0 + 1168);
    v50 = *(_QWORD *)(v0 + 1160);
    if (v47)
    {
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      v52 = *(_QWORD *)(v0 + 1080);
      v53 = *(_QWORD *)(v0 + 1072);
      v54 = swift_slowAlloc();
      v117 = swift_slowAlloc();
      *(_QWORD *)(v0 + 944) = v117;
      *(_DWORD *)v54 = 136315138;
      v51(v52, v48, v50);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v52, 0, 1, v50);
      outlined init with copy of URL?(v52, v53, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v53, 1, v50) == 1)
      {
        v55 = 0xE300000000000000;
        v56 = 7104878;
      }
      else
      {
        v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        v58 = *(_QWORD *)(v0 + 1184);
        v59 = *(_QWORD *)(v0 + 1176);
        v60 = *(_QWORD *)(v0 + 1168);
        v61 = *(_QWORD *)(v0 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 32))(v58, *(_QWORD *)(v0 + 1072), v61);
        v57(v59, v58, v61);
        v56 = String.init<A>(reflecting:)();
        v55 = v62;
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v61);
      }
      v63 = *(_QWORD *)(v0 + 1216);
      v64 = *(_QWORD *)(v0 + 1192);
      v65 = *(_QWORD *)(v0 + 1168);
      v66 = *(_QWORD *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v54 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      v67 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v67(v64, v66);
      _os_log_impl(&dword_1A0DB3000, v45, v46, "Failed to find importing closure from representation %s", (uint8_t *)v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v117, -1, -1);
      MEMORY[0x1A1B05CC4](v54, -1, -1);

      v67(v63, v66);
    }
    else
    {
      v40 = *(_QWORD *)(v0 + 1216);

      v41 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v41(v48, v50);
      v41(v40, v50);
    }
LABEL_14:
    v30 = *(_QWORD *)(v0 + 1480) + 1;
    if (v30 == *(_QWORD *)(v0 + 1456))
      goto LABEL_10;
  }
  v68 = (int *)v42;
  v69 = *(_QWORD *)(v0 + 1216);
  v108 = *(_QWORD *)(v0 + 1208);
  v118 = *(_QWORD *)(v0 + 1160);
  v70 = *(_QWORD *)(v0 + 1152);
  v71 = *(_QWORD *)(v0 + 1144);
  v72 = *(_QWORD *)(v0 + 1128);
  v73 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v74 = static UTType.== infix(_:_:)();
  v75 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  *(_QWORD *)(v0 + 1504) = v75;
  v75(v71, v73);
  v75(v70, v73);
  v44(v108, v69, v118);
  v76 = *(_QWORD *)(v0 + 1208);
  v77 = *(_QWORD *)(v0 + 1168);
  v78 = *(_QWORD *)(v0 + 1160);
  if ((v74 & 1) != 0)
  {
    v82 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v82(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1160));
LABEL_29:
    *(_QWORD *)(v0 + 1520) = v82;
    ResolvedTransferRepresentation.contentType.getter();
    v101 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1528) = v101;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
    *v101 = v0;
    v101[1] = GroupSessionJournal.Attachment.load<A>(_:);
    return Transferable.data(contentType:)();
  }
  v79 = *(_QWORD *)(v0 + 1152);
  v80 = *(_QWORD *)(v0 + 1144);
  v81 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.fileURL.getter();
  v119 = static UTType.== infix(_:_:)();
  v75(v80, v81);
  v75(v79, v81);
  v82 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  *(_QWORD *)(v0 + 1512) = v82;
  v82(v76, v78);
  if ((v119 & 1) != 0)
    goto LABEL_29;
  v83 = Data.init(contentsOf:options:)();
  *(_QWORD *)(v0 + 1576) = v83;
  *(_QWORD *)(v0 + 1584) = v84;
  if (v109)
  {
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 1360));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v68);
    v85 = v109;
    v86 = v109;
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.error.getter();
    v89 = os_log_type_enabled(v87, v88);
    v90 = *(_QWORD *)(v0 + 1216);
    v91 = *(_QWORD *)(v0 + 1160);
    if (v89)
    {
      v92 = *(_QWORD *)(v0 + 992);
      v93 = swift_slowAlloc();
      v94 = swift_slowAlloc();
      v121[0] = v94;
      *(_DWORD *)v93 = 136315394;
      *(_QWORD *)(v0 + 936) = v92;
      v95 = swift_getMetatypeMetadata();
      v96 = >> prefix<A>(_:)(v0 + 936, v95);
      *(_QWORD *)(v93 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v121);
      swift_bridgeObjectRelease();
      *(_WORD *)(v93 + 12) = 2080;
      *(_QWORD *)(v0 + 920) = v109;
      v98 = v109;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v99 = String.init<A>(reflecting:)();
      *(_QWORD *)(v93 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v121);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v87, v88, "Failed load %s, error: %s", (uint8_t *)v93, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v94, -1, -1);
      MEMORY[0x1A1B05CC4](v93, -1, -1);

    }
    else
    {

    }
    v82(v90, v91);
    v109 = 0;
    goto LABEL_14;
  }
  v102 = MEMORY[0x1E0CA86D8];
  *(_QWORD *)(v0 + 240) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(v0 + 248) = v102;
  *(_QWORD *)(v0 + 216) = v83;
  *(_QWORD *)(v0 + 224) = v84;
  outlined copy of Data._Representation(v83, v84);
  v120 = (uint64_t (*)(uint64_t, uint64_t))((char *)v68 + *v68);
  v103 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1592) = v103;
  *v103 = v0;
  v103[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return v120(v0 + 176, v0 + 216);
}

{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t MetatypeMetadata;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82[3];

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 1488));
  v1 = *(void **)(v0 + 1552);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1160);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 992);
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v82[0] = v12;
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v0 + 936) = v10;
    MetatypeMetadata = swift_getMetatypeMetadata();
    v14 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(_QWORD *)(v11 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v82);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 920) = v1;
    v16 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(reflecting:)();
    *(_QWORD *)(v11 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v82);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed load %s, error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

  }
  v2(v8, v9);
  while (1)
  {
    v21 = *(_QWORD *)(v0 + 1480) + 1;
    if (v21 == *(_QWORD *)(v0 + 1456))
    {
      swift_release();
      v65 = *(_QWORD *)(v0 + 1400);
      v66 = *(_QWORD *)(v0 + 1360);
      v67 = *(_QWORD *)(v0 + 1352);
      v68 = *(_QWORD *)(v0 + 1344);
      v69 = *(_QWORD *)(v0 + 1336);
      v70 = *(_QWORD *)(v0 + 1320);
      v71 = *(_QWORD *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v72 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v65, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 1480) = v21;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1608))+ *(_QWORD *)(v0 + 1464) * v21, *(_QWORD *)(v0 + 1160));
    v22 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 1488) = v22;
    *(_QWORD *)(v0 + 1496) = v23;
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
    if (v22)
      break;
    v24(*(_QWORD *)(v0 + 1192), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 1192);
    v29 = *(_QWORD *)(v0 + 1168);
    v30 = *(_QWORD *)(v0 + 1160);
    if (v27)
    {
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      v32 = *(_QWORD *)(v0 + 1080);
      v33 = *(_QWORD *)(v0 + 1072);
      v34 = swift_slowAlloc();
      v78 = swift_slowAlloc();
      *(_QWORD *)(v0 + 944) = v78;
      *(_DWORD *)v34 = 136315138;
      v31(v32, v28, v30);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v30);
      outlined init with copy of URL?(v32, v33, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v33, 1, v30) == 1)
      {
        v35 = 0xE300000000000000;
        v36 = 7104878;
      }
      else
      {
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        v38 = *(_QWORD *)(v0 + 1184);
        v39 = *(_QWORD *)(v0 + 1176);
        v40 = *(_QWORD *)(v0 + 1168);
        v41 = *(_QWORD *)(v0 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 32))(v38, *(_QWORD *)(v0 + 1072), v41);
        v37(v39, v38, v41);
        v36 = String.init<A>(reflecting:)();
        v35 = v42;
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v41);
      }
      v43 = *(_QWORD *)(v0 + 1216);
      v44 = *(_QWORD *)(v0 + 1192);
      v45 = *(_QWORD *)(v0 + 1168);
      v46 = *(_QWORD *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v34 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      v47 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v47(v44, v46);
      _os_log_impl(&dword_1A0DB3000, v25, v26, "Failed to find importing closure from representation %s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v78, -1, -1);
      MEMORY[0x1A1B05CC4](v34, -1, -1);

      v47(v43, v46);
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 1216);

      v20 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v20(v28, v30);
      v20(v19, v30);
    }
  }
  v48 = (int *)v22;
  v49 = *(_QWORD *)(v0 + 1216);
  v77 = *(_QWORD *)(v0 + 1208);
  v79 = *(_QWORD *)(v0 + 1160);
  v50 = *(_QWORD *)(v0 + 1152);
  v51 = *(_QWORD *)(v0 + 1144);
  v52 = *(_QWORD *)(v0 + 1128);
  v53 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v54 = static UTType.== infix(_:_:)();
  v55 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  *(_QWORD *)(v0 + 1504) = v55;
  v55(v51, v53);
  v55(v50, v53);
  v24(v77, v49, v79);
  v56 = *(_QWORD *)(v0 + 1208);
  v57 = *(_QWORD *)(v0 + 1168);
  v58 = *(_QWORD *)(v0 + 1160);
  if ((v54 & 1) != 0)
  {
    v62 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v62(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1160));
  }
  else
  {
    v59 = *(_QWORD *)(v0 + 1152);
    v60 = *(_QWORD *)(v0 + 1144);
    v61 = *(_QWORD *)(v0 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v80 = static UTType.== infix(_:_:)();
    v55(v60, v61);
    v55(v59, v61);
    v62 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    *(_QWORD *)(v0 + 1512) = v62;
    v62(v56, v58);
    if ((v80 & 1) == 0)
    {
      v63 = Data.init(contentsOf:options:)();
      *(_QWORD *)(v0 + 1576) = v63;
      *(_QWORD *)(v0 + 1584) = v64;
      v74 = MEMORY[0x1E0CA86D8];
      *(_QWORD *)(v0 + 240) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v0 + 248) = v74;
      *(_QWORD *)(v0 + 216) = v63;
      *(_QWORD *)(v0 + 224) = v64;
      outlined copy of Data._Representation(v63, v64);
      v81 = (uint64_t (*)(uint64_t, uint64_t))((char *)v48 + *v48);
      v75 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1592) = v75;
      *v75 = v0;
      v75[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return v81(v0 + 176, v0 + 216);
    }
  }
  *(_QWORD *)(v0 + 1520) = v62;
  ResolvedTransferRepresentation.contentType.getter();
  v73 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1528) = v73;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
  *v73 = v0;
  v73[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return Transferable.data(contentType:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83[3];

  v1 = *(_QWORD *)(v0 + 1488);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 1536), *(_QWORD *)(v0 + 1544));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 616);
  v2 = *(void **)(v0 + 1568);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
  v4 = v2;
  v5 = v2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1160);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 992);
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v83[0] = v13;
    *(_DWORD *)v12 = 136315394;
    *(_QWORD *)(v0 + 936) = v11;
    MetatypeMetadata = swift_getMetatypeMetadata();
    v15 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(_QWORD *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v83);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 920) = v2;
    v17 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v18 = String.init<A>(reflecting:)();
    *(_QWORD *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v83);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v6, v7, "Failed load %s, error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);

  }
  else
  {

  }
  v3(v9, v10);
  while (1)
  {
    v22 = *(_QWORD *)(v0 + 1480) + 1;
    if (v22 == *(_QWORD *)(v0 + 1456))
    {
      swift_release();
      v66 = *(_QWORD *)(v0 + 1400);
      v67 = *(_QWORD *)(v0 + 1360);
      v68 = *(_QWORD *)(v0 + 1352);
      v69 = *(_QWORD *)(v0 + 1344);
      v70 = *(_QWORD *)(v0 + 1336);
      v71 = *(_QWORD *)(v0 + 1320);
      v72 = *(_QWORD *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v73 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v66, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 1480) = v22;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1608))+ *(_QWORD *)(v0 + 1464) * v22, *(_QWORD *)(v0 + 1160));
    v23 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 1488) = v23;
    *(_QWORD *)(v0 + 1496) = v24;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
    if (v23)
      break;
    v25(*(_QWORD *)(v0 + 1192), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(_QWORD *)(v0 + 1192);
    v30 = *(_QWORD *)(v0 + 1168);
    v31 = *(_QWORD *)(v0 + 1160);
    if (v28)
    {
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      v33 = *(_QWORD *)(v0 + 1080);
      v34 = *(_QWORD *)(v0 + 1072);
      v35 = swift_slowAlloc();
      v79 = swift_slowAlloc();
      *(_QWORD *)(v0 + 944) = v79;
      *(_DWORD *)v35 = 136315138;
      v32(v33, v29, v31);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v31);
      outlined init with copy of URL?(v33, v34, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v34, 1, v31) == 1)
      {
        v36 = 0xE300000000000000;
        v37 = 7104878;
      }
      else
      {
        v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        v39 = *(_QWORD *)(v0 + 1184);
        v40 = *(_QWORD *)(v0 + 1176);
        v41 = *(_QWORD *)(v0 + 1168);
        v42 = *(_QWORD *)(v0 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 32))(v39, *(_QWORD *)(v0 + 1072), v42);
        v38(v40, v39, v42);
        v37 = String.init<A>(reflecting:)();
        v36 = v43;
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v42);
      }
      v44 = *(_QWORD *)(v0 + 1216);
      v45 = *(_QWORD *)(v0 + 1192);
      v46 = *(_QWORD *)(v0 + 1168);
      v47 = *(_QWORD *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v35 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v48(v45, v47);
      _os_log_impl(&dword_1A0DB3000, v26, v27, "Failed to find importing closure from representation %s", (uint8_t *)v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v79, -1, -1);
      MEMORY[0x1A1B05CC4](v35, -1, -1);

      v48(v44, v47);
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 1216);

      v21 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v21(v29, v31);
      v21(v20, v31);
    }
  }
  v49 = (int *)v23;
  v50 = *(_QWORD *)(v0 + 1216);
  v78 = *(_QWORD *)(v0 + 1208);
  v80 = *(_QWORD *)(v0 + 1160);
  v51 = *(_QWORD *)(v0 + 1152);
  v52 = *(_QWORD *)(v0 + 1144);
  v53 = *(_QWORD *)(v0 + 1128);
  v54 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v55 = static UTType.== infix(_:_:)();
  v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  *(_QWORD *)(v0 + 1504) = v56;
  v56(v52, v54);
  v56(v51, v54);
  v25(v78, v50, v80);
  v57 = *(_QWORD *)(v0 + 1208);
  v58 = *(_QWORD *)(v0 + 1168);
  v59 = *(_QWORD *)(v0 + 1160);
  if ((v55 & 1) != 0)
  {
    v63 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v63(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1160));
  }
  else
  {
    v60 = *(_QWORD *)(v0 + 1152);
    v61 = *(_QWORD *)(v0 + 1144);
    v62 = *(_QWORD *)(v0 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v81 = static UTType.== infix(_:_:)();
    v56(v61, v62);
    v56(v60, v62);
    v63 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    *(_QWORD *)(v0 + 1512) = v63;
    v63(v57, v59);
    if ((v81 & 1) == 0)
    {
      v64 = Data.init(contentsOf:options:)();
      *(_QWORD *)(v0 + 1576) = v64;
      *(_QWORD *)(v0 + 1584) = v65;
      v75 = MEMORY[0x1E0CA86D8];
      *(_QWORD *)(v0 + 240) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v0 + 248) = v75;
      *(_QWORD *)(v0 + 216) = v64;
      *(_QWORD *)(v0 + 224) = v65;
      outlined copy of Data._Representation(v64, v65);
      v82 = (uint64_t (*)(uint64_t, uint64_t))((char *)v49 + *v49);
      v76 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1592) = v76;
      *v76 = v0;
      v76[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return v82(v0 + 176, v0 + 216);
    }
  }
  *(_QWORD *)(v0 + 1520) = v63;
  ResolvedTransferRepresentation.contentType.getter();
  v74 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1528) = v74;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
  *v74 = v0;
  v74[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return Transferable.data(contentType:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85[3];

  v1 = *(_QWORD *)(v0 + 1488);
  v2 = *(_QWORD *)(v0 + 1360);
  v3 = *(_QWORD *)(v0 + 1008);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 1576), *(_QWORD *)(v0 + 1584));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
  $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v3, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  v4 = *(void **)(v0 + 1600);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1512);
  v6 = v4;
  v7 = v4;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 1216);
  v12 = *(_QWORD *)(v0 + 1160);
  if (v10)
  {
    v13 = *(_QWORD *)(v0 + 992);
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v85[0] = v15;
    *(_DWORD *)v14 = 136315394;
    *(_QWORD *)(v0 + 936) = v13;
    MetatypeMetadata = swift_getMetatypeMetadata();
    v17 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(_QWORD *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v85);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    *(_QWORD *)(v0 + 920) = v4;
    v19 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(reflecting:)();
    *(_QWORD *)(v14 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v85);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v8, v9, "Failed load %s, error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {

  }
  v5(v11, v12);
  while (1)
  {
    v24 = *(_QWORD *)(v0 + 1480) + 1;
    if (v24 == *(_QWORD *)(v0 + 1456))
    {
      swift_release();
      v68 = *(_QWORD *)(v0 + 1400);
      v69 = *(_QWORD *)(v0 + 1360);
      v70 = *(_QWORD *)(v0 + 1352);
      v71 = *(_QWORD *)(v0 + 1344);
      v72 = *(_QWORD *)(v0 + 1336);
      v73 = *(_QWORD *)(v0 + 1320);
      v74 = *(_QWORD *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v75 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v68, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 1480) = v24;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1608))+ *(_QWORD *)(v0 + 1464) * v24, *(_QWORD *)(v0 + 1160));
    v25 = ResolvedTransferRepresentation.importing.getter();
    *(_QWORD *)(v0 + 1488) = v25;
    *(_QWORD *)(v0 + 1496) = v26;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
    if (v25)
      break;
    v27(*(_QWORD *)(v0 + 1192), *(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1160));
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = *(_QWORD *)(v0 + 1192);
    v32 = *(_QWORD *)(v0 + 1168);
    v33 = *(_QWORD *)(v0 + 1160);
    if (v30)
    {
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      v35 = *(_QWORD *)(v0 + 1080);
      v36 = *(_QWORD *)(v0 + 1072);
      v37 = swift_slowAlloc();
      v81 = swift_slowAlloc();
      *(_QWORD *)(v0 + 944) = v81;
      *(_DWORD *)v37 = 136315138;
      v34(v35, v31, v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v33);
      outlined init with copy of URL?(v35, v36, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v36, 1, v33) == 1)
      {
        v38 = 0xE300000000000000;
        v39 = 7104878;
      }
      else
      {
        v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        v41 = *(_QWORD *)(v0 + 1184);
        v42 = *(_QWORD *)(v0 + 1176);
        v43 = *(_QWORD *)(v0 + 1168);
        v44 = *(_QWORD *)(v0 + 1160);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 32))(v41, *(_QWORD *)(v0 + 1072), v44);
        v40(v42, v41, v44);
        v39 = String.init<A>(reflecting:)();
        v38 = v45;
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v44);
      }
      v46 = *(_QWORD *)(v0 + 1216);
      v47 = *(_QWORD *)(v0 + 1192);
      v48 = *(_QWORD *)(v0 + 1168);
      v49 = *(_QWORD *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v37 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      v50 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v50(v47, v49);
      _os_log_impl(&dword_1A0DB3000, v28, v29, "Failed to find importing closure from representation %s", (uint8_t *)v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v81, -1, -1);
      MEMORY[0x1A1B05CC4](v37, -1, -1);

      v50(v46, v49);
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 1216);

      v23 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v23(v31, v33);
      v23(v22, v33);
    }
  }
  v51 = (int *)v25;
  v52 = *(_QWORD *)(v0 + 1216);
  v80 = *(_QWORD *)(v0 + 1208);
  v82 = *(_QWORD *)(v0 + 1160);
  v53 = *(_QWORD *)(v0 + 1152);
  v54 = *(_QWORD *)(v0 + 1144);
  v55 = *(_QWORD *)(v0 + 1128);
  v56 = *(_QWORD *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  v57 = static UTType.== infix(_:_:)();
  v58 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  *(_QWORD *)(v0 + 1504) = v58;
  v58(v54, v56);
  v58(v53, v56);
  v27(v80, v52, v82);
  v59 = *(_QWORD *)(v0 + 1208);
  v60 = *(_QWORD *)(v0 + 1168);
  v61 = *(_QWORD *)(v0 + 1160);
  if ((v57 & 1) != 0)
  {
    v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v65(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1160));
  }
  else
  {
    v62 = *(_QWORD *)(v0 + 1152);
    v63 = *(_QWORD *)(v0 + 1144);
    v64 = *(_QWORD *)(v0 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v83 = static UTType.== infix(_:_:)();
    v58(v63, v64);
    v58(v62, v64);
    v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    *(_QWORD *)(v0 + 1512) = v65;
    v65(v59, v61);
    if ((v83 & 1) == 0)
    {
      v66 = Data.init(contentsOf:options:)();
      *(_QWORD *)(v0 + 1576) = v66;
      *(_QWORD *)(v0 + 1584) = v67;
      v77 = MEMORY[0x1E0CA86D8];
      *(_QWORD *)(v0 + 240) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v0 + 248) = v77;
      *(_QWORD *)(v0 + 216) = v66;
      *(_QWORD *)(v0 + 224) = v67;
      outlined copy of Data._Representation(v66, v67);
      v84 = (uint64_t (*)(uint64_t, uint64_t))((char *)v51 + *v51);
      v78 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1592) = v78;
      *v78 = v0;
      v78[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return v84(v0 + 176, v0 + 216);
    }
  }
  *(_QWORD *)(v0 + 1520) = v65;
  ResolvedTransferRepresentation.contentType.getter();
  v76 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1528) = v76;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CA86D0]);
  *v76 = v0;
  v76[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return Transferable.data(contentType:)();
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 1536) = a1;
  *(_QWORD *)(v4 + 1544) = a2;
  *(_QWORD *)(v4 + 1552) = v2;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v4 + 1504))(*(_QWORD *)(v4 + 1136), *(_QWORD *)(v4 + 1120));
  return swift_task_switch();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = type metadata accessor for ResolvedTransferRepresentation();
  v7 = *(_QWORD *)(v27 - 8);
  v8 = MEMORY[0x1E0C80A78](v27);
  v26 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = MEMORY[0x1E0DEE9D8];
  v28 = MEMORY[0x1E0DEE9D8];
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v14 = 0;
    v22 = a2;
    v23 = a3;
    v21 = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v13 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v27);
      v16 = a1(v12);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v27);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if ((v16 & 1) != 0)
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v24(v26, v12, v27);
        v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v28;
        }
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v17 = v28;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(v17 + v15 + v19 * v13, v26, v27);
        v28 = v17;
        a3 = v23;
        a1 = v21;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v27);
      }
      if (v25 == ++v14)
      {
        v13 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSURL *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  id v34[2];

  v34[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GroupSessionJournal.Attachment(0);
  outlined init with copy of Participant(a1 + *(int *)(v11 + 24), (uint64_t)v10, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  outlined destroy of Participant((uint64_t)v10, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  if ((_DWORD)a1 == 2)
  {
    v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    URL._bridgeToObjectiveC()(v13);
    v15 = v14;
    v34[0] = 0;
    v16 = objc_msgSend(v12, sel_removeItemAtURL_error_, v14, v34);

    if (v16)
    {
      v17 = v34[0];
    }
    else
    {
      v32[1] = v34[0];
      v18 = v34[0];
      v19 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for ledger != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Log.ledger);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      v21 = v19;
      v22 = v19;
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v26 = (void *)swift_slowAlloc();
        v34[0] = v26;
        *(_DWORD *)v25 = 136315394;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
        v27 = dispatch thunk of CustomStringConvertible.description.getter();
        v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        *(_WORD *)(v25 + 12) = 2080;
        v33 = (uint64_t)v19;
        v29 = v19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v30 = String.init<A>(reflecting:)();
        v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A0DB3000, v23, v24, "Failed to remove file: %s, reason: %s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v26, -1, -1);
        MEMORY[0x1A1B05CC4](v25, -1, -1);

      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
    }
  }
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a3;
  v5[6] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for GroupSessionJournal.Attachment(0);
  outlined init with copy of Participant(v2 + *(int *)(v3 + 24), v1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v16;
      *v16 = v0;
      v16[1] = GroupSessionJournal.Attachment.loadMetadata<A>(of:);
      v17 = *(_QWORD *)(v0 + 40);
      v16[2] = v17;
      v16[3] = v17;
      return swift_task_switch();
    }
    outlined consume of Data._Representation(**(_QWORD **)(v0 + 56), *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8));
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 56);
    v7 = (uint64_t *)(v6
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                            + 48));
    v8 = *v7;
    v9 = v7[1];
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
    if (v9 >> 60 != 15)
    {
      outlined copy of Data._Representation(v8, v9);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v8, v9);
      swift_release();
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_13;
    }
    if (one-time initialization token for ledger != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.ledger);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1A0DB3000, v12, v13, "Failed to find the metadata", v14, 2u);
      MEMORY[0x1A1B05CC4](v14, -1, -1);
    }

    v5 = 2;
  }
  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *v15 = v5;
  swift_willThrow();
LABEL_13:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  outlined copy of Data._Representation(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v1, v2);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 80) = a2;
    *(_QWORD *)(v6 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  _BYTE *v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  type metadata accessor for GroupSessionJournal.Attachment(0);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
  {
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(Strong + 16);
    v2 = *(_QWORD *)(Strong + 24);
    ObjectType = swift_getObjectType();
    v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v2 + 56) + *(_QWORD *)(v2 + 56));
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v4;
    *v4 = v0;
    v4[1] = GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:);
    return v7(*(_QWORD *)(v0 + 16), ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v6 = 2;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 56) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 64) = a2;
    *(_QWORD *)(v6 + 72) = a1;
  }
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  _BYTE *v6;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);

  type metadata accessor for GroupSessionJournal.Attachment(0);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 40) = Strong;
  if (Strong)
  {
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(Strong + 16);
    v2 = *(_QWORD *)(Strong + 24);
    ObjectType = swift_getObjectType();
    v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v2 + 48) + *(_QWORD *)(v2 + 48));
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:);
    return v7(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v6 = 2;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionJournal.Attachments.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionJournal.Attachments.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner);
  v2 = swift_allocObject();
  swift_retain();
  v3 = (_DWORD *)swift_slowAlloc();
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = static Subscribers.Demand.none.getter();
  *v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSessionJournal.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSessionJournal.Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSessionJournal.Attachment], Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner, (uint64_t)&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t GroupSessionJournal.Attachments.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionJournal.Attachments.Iterator.baseIterator.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*GroupSessionJournal.Attachments.Iterator.baseIterator.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionJournal.Attachments.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[2];
  v2 = *v1;
  v0[3] = *v1;
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = GroupSessionJournal.Attachments.Iterator.next();
  return v6((uint64_t)&async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v3, (uint64_t)partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0);
}

uint64_t GroupSessionJournal.Attachments.Iterator.next()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[3];
  v2 = *v1;
  v0[4] = *v1;
  v3 = swift_task_alloc();
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator;
  return v6((uint64_t)&closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, (uint64_t)closure #1 in _PublisherElements.Iterator.next()specialized partial apply, v2, 0);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[5];
  v2 = *v1;
  v0[6] = *v1;
  v3 = swift_task_alloc();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return v6((uint64_t)&closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, (uint64_t)closure #1 in _PublisherElements.Iterator.next()specialized partial apply, v2, 0);
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v4)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  *(_QWORD *)(v3 + 72) = a1;
  return swift_task_switch();
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionJournal.Attachments@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionJournal.Attachments.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t static GroupSessionJournal.InternalErrors.== infix(_:_:)()
{
  return 1;
}

void GroupSessionJournal.InternalErrors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int GroupSessionJournal.InternalErrors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL static GroupSessionJournal.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void GroupSessionJournal.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int GroupSessionJournal.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t closure #2 in static URL.file<A>(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = type metadata accessor for UTType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResolvedTransferRepresentation.contentType.getter();
  v4 = static UTType.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t ResolvedTransferRepresentation.data<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  return swift_task_switch();
}

uint64_t ResolvedTransferRepresentation.data<A>(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v1 = ResolvedTransferRepresentation.exporting.getter();
  *(_QWORD *)(v0 + 144) = v1;
  *(_QWORD *)(v0 + 152) = v2;
  if (v1)
  {
    v3 = (int *)v1;
    v4 = *(_QWORD *)(v0 + 112);
    v10 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 80) = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v4);
    *(_QWORD *)&v10 = (char *)v3 + *v3;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v6;
    *v6 = v0;
    v6[1] = ResolvedTransferRepresentation.data<A>(from:);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v0 + 16, v0 + 56);
  }
  else
  {
    v8 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v9, *MEMORY[0x1E0CA8738], v8);
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 56);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 144));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransferableCurrency);
  if ((swift_dynamicCast() & 1) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v2 = type metadata accessor for TransferableError();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
  swift_allocError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x1E0CA8738], v2);
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 144));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path getter for GroupSessionJournal._attachments : GroupSessionJournal@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSessionJournal._attachments : GroupSessionJournal()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[6] = a3;
  v5[7] = a4;
  v5[4] = a1;
  v5[5] = a2;
  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    v7 = (_QWORD *)swift_task_alloc();
    v5[8] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?);
    *v7 = v5;
    v7[1] = specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  else
  {
    if (a5)
    {
      swift_getObjectType();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v5[9] = v9;
    v5[10] = v11;
    return swift_task_switch();
  }
}

{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[6] = a3;
  v5[7] = a4;
  v5[4] = a1;
  v5[5] = a2;
  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    v7 = (_QWORD *)swift_task_alloc();
    v5[8] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?);
    *v7 = v5;
    v7[1] = specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  else
  {
    if (a5)
    {
      swift_getObjectType();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v5[9] = v9;
    v5[10] = v11;
    return swift_task_switch();
  }
}

uint64_t specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v2 + 16));
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD *);

  v1 = (int *)v0[4];
  v0[11] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD *))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0 + 3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD *);

  v1 = (int *)v0[4];
  v0[11] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD *))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = v2;
  *v2 = v0;
  v2[1] = specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0 + 3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t type metadata accessor for GroupSessionJournal.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal.Attachment);
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return swift_task_switch();
}

{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return swift_task_switch();
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = **(_QWORD **)(v0 + 96);
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  v2 = swift_continuation_init();
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v2, v1);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD **)(*v0 + 88);
  v4 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_release();
  *v1 = v2;
  return (*(uint64_t (**)(void))(v4 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = **(_QWORD **)(v0 + 96);
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  v2 = swift_continuation_init();
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v2, v1, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  return swift_continuation_await();
}

_QWORD *specialized GroupSessionJournal.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject();
  return specialized GroupSessionJournal.init(transportSession:)(a1, v7, a3, a4);
}

_QWORD *specialized GroupSessionJournal.init(transportSession:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v28 = a1;
  v29 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]>);
  v30 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2[4] = 0;
  v18 = (char *)a2 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  v34[0] = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal_cancellables) = MEMORY[0x1E0DEE9E8];
  a2[2] = v28;
  a2[3] = a4;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  swift_unknownObjectRetain();
  v34[0] = v19(v29, a4);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>, MEMORY[0x1E0C95D90]);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]>, MEMORY[0x1E0C95950]);
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
  v20 = v32;
  v21 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, v10, v33);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v21);
  v22 = a2[3];
  ObjectType = swift_getObjectType();
  v34[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(ObjectType, v22);
  v24 = swift_allocObject();
  swift_weakInit();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for closure #2 in GroupSessionJournal.init(transportSession:);
  *(_QWORD *)(v25 + 24) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(UUID, URL, Participant), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  GroupSessionJournal.attachments.getter(v34);
  swift_unknownObjectRelease();
  swift_release();
  return a2;
}

uint64_t outlined assign with take of GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionJournal.Errors, &type metadata for GroupSessionJournal.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionJournal.Errors, &type metadata for GroupSessionJournal.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner.State?);
}

{
  return specialized closure #1 in _PublisherElements.Iterator.next()();
}

uint64_t partial apply for specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                   + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()))(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                   + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()))(a1, v4);
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionJournal.Attachments.Iterator, &type metadata for GroupSessionJournal.Attachments.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionJournal.InternalErrors, &type metadata for GroupSessionJournal.InternalErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors);
  }
  return result;
}

uint64_t sub_1A0E5EA0C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GroupSessionJournal.attachments.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1A0E5EA44(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A0E5EA78()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  return swift_weakAssign();
}

uint64_t ObjC metadata update function for GroupSessionJournal()
{
  return type metadata accessor for GroupSessionJournal(0);
}

uint64_t type metadata accessor for GroupSessionJournal(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal);
}

void type metadata completion function for GroupSessionJournal()
{
  unint64_t v0;

  type metadata accessor for Published<[GroupSessionJournal.Attachment]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for GroupSessionJournal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSessionJournal.__allocating_init(transportSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for Published<[GroupSessionJournal.Attachment]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionJournal.Attachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v20 = *v10;
      v19 = v10[1];
      outlined copy of Data._Representation(v20, v19);
      *v9 = v20;
      v9[1] = v19;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                   + 48);
      v15 = (char *)v9 + v14;
      v16 = (char *)v10 + v14;
      v17 = *((_QWORD *)v16 + 1);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)v15 = *(_OWORD *)v16;
      }
      else
      {
        v21 = *(_QWORD *)v16;
        outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
        *(_QWORD *)v15 = v21;
        *((_QWORD *)v15 + 1) = v17;
      }
      goto LABEL_10;
    }
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t destroy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_weakDestroy();
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v8 = v5[1];
    return outlined consume of Data._Representation(*v5, v8);
  }
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    v5 = (uint64_t *)((char *)v5 + *(int *)(result + 48));
    v8 = v5[1];
    if (v8 >> 60 != 15)
      return outlined consume of Data._Representation(*v5, v8);
  }
  return result;
}

uint64_t initializeWithCopy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v18 = *v9;
    v17 = v9[1];
    outlined copy of Data._Representation(v18, v17);
    *v8 = v18;
    v8[1] = v17;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                 + 48);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = *((_QWORD *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v19 = *(_QWORD *)v15;
      outlined copy of Data._Representation(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
      *(_QWORD *)v14 = v19;
      *((_QWORD *)v14 + 1) = v16;
    }
    goto LABEL_8;
  }
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  return a1;
}

uint64_t assignWithCopy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)(a2 + v7);
    outlined destroy of Participant(a1 + v7, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v18 = *v9;
      v17 = v9[1];
      outlined copy of Data._Representation(v18, v17);
      *v8 = v18;
      v8[1] = v17;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                   + 48);
      v14 = (char *)v8 + v13;
      v15 = (char *)v9 + v13;
      v16 = *((_QWORD *)v15 + 1);
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)v14 = *(_OWORD *)v15;
      }
      else
      {
        v19 = *(_QWORD *)v15;
        outlined copy of Data._Representation(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
        *(_QWORD *)v14 = v19;
        *((_QWORD *)v14 + 1) = v16;
      }
      goto LABEL_9;
    }
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t initializeWithTake for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    *(_OWORD *)&v8[*(int *)(v12 + 48)] = *(_OWORD *)&v9[*(int *)(v12 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    outlined destroy of Participant(a1 + v7, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
      *(_OWORD *)&v8[*(int *)(v12 + 48)] = *(_OWORD *)&v9[*(int *)(v12 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionJournal.Attachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E5F2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GroupSessionJournal.Attachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E5F320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for GroupSessionJournal.Attachment()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *a2;
      v14 = a2[1];
      outlined copy of Data._Representation(v15, v14);
      *a1 = v15;
      a1[1] = v14;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                  + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = *((_QWORD *)v11 + 1);
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)v10 = *(_OWORD *)v11;
      }
      else
      {
        v16 = *(_QWORD *)v11;
        outlined copy of Data._Representation(*(_QWORD *)v11, *((_QWORD *)v11 + 1));
        *(_QWORD *)v10 = v16;
        *((_QWORD *)v10 + 1) = v12;
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v4 = a1[1];
    return outlined consume of Data._Representation(*a1, v4);
  }
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    a1 = (uint64_t *)((char *)a1 + *(int *)(result + 48));
    v4 = a1[1];
    if (v4 >> 60 != 15)
      return outlined consume of Data._Representation(*a1, v4);
  }
  return result;
}

uint64_t *initializeWithCopy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v13 = *a2;
    v12 = a2[1];
    outlined copy of Data._Representation(v13, v12);
    *a1 = v13;
    a1[1] = v12;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v14 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v14;
      *((_QWORD *)v9 + 1) = v11;
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v13 = *a2;
      v12 = a2[1];
      outlined copy of Data._Representation(v13, v12);
      *a1 = v13;
      a1[1] = v12;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                  + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = *((_QWORD *)v10 + 1);
      if (v11 >> 60 == 15)
      {
        *(_OWORD *)v9 = *(_OWORD *)v10;
      }
      else
      {
        v14 = *(_QWORD *)v10;
        outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
        *(_QWORD *)v9 = v14;
        *((_QWORD *)v9 + 1) = v11;
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for GroupSessionJournal.Attachment.AttachmentSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for GroupSessionJournal.Attachment.AttachmentSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for GroupSessionJournal.Attachment.AttachmentSource()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_1A0F11B90;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Attachments()
{
  return &type metadata for GroupSessionJournal.Attachments;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Attachments.Iterator()
{
  return &type metadata for GroupSessionJournal.Attachments.Iterator;
}

uint64_t storeEnumTagSinglePayload for GroupSessionJournal.InternalErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0E5FA2C + 4 * asc_1A0F11880[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0E5FA4C + 4 * byte_1A0F11885[v4]))();
}

_BYTE *sub_1A0E5FA2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0E5FA4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E5FA54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E5FA5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E5FA64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E5FA6C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.InternalErrors()
{
  return &type metadata for GroupSessionJournal.InternalErrors;
}

uint64_t storeEnumTagSinglePayload for GroupSessionJournal.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E5FAD4 + 4 * byte_1A0F1188F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E5FB08 + 4 * byte_1A0F1188A[v4]))();
}

uint64_t sub_1A0E5FB08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E5FB10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E5FB18);
  return result;
}

uint64_t sub_1A0E5FB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E5FB2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E5FB30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E5FB38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Errors()
{
  return &type metadata for GroupSessionJournal.Errors;
}

uint64_t closure #2 in _PublisherElements.Iterator.next()specialized partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                   + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()))(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                   + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()))(a1, v4);
}

uint64_t outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A0E5FC04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionJournal.init(transportSession:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GroupSessionJournal.init(transportSession:)(a1, v2, a2);
}

uint64_t partial apply for closure #2 in GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in GroupSessionJournal.init(transportSession:)(a1, a2, a3, v3);
}

uint64_t sub_1A0E5FC38()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v38[2];
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v49 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1E0C80A78](v49);
  v48 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for GroupSessionJournal.Attachment(0);
  v50 = *(_QWORD *)(v47 - 8);
  v9 = MEMORY[0x1E0C80A78](v47);
  v46 = (uint64_t)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v39 = (uint64_t)v38 - v11;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v45 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v19 = a1;
    v20 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v43 = *(_QWORD *)(v13 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 16);
    v41 = a2 + 16;
    v38[0] = v19;
    v38[1] = v2;
    swift_bridgeObjectRetain();
    v51 = MEMORY[0x1E0DEE9D8];
    v44 = v17;
    v42 = v21;
    while (1)
    {
      v21(v17, v20, v12);
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v40(v17, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12) == 1)
        break;
      v52 = v18;
      v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v24 = v13;
      v25 = v45;
      v23(v45, v17, v12);
      swift_beginAccess();
      swift_weakLoadStrong();
      v26 = (uint64_t)v48;
      swift_storeEnumTagMultiPayload();
      v21(v8, v25, v12);
      v27 = v47;
      swift_weakInit();
      swift_release();
      outlined init with take of Participant(v26, (uint64_t)&v8[*(int *)(v27 + 24)], type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
      v28 = v50;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v8, 0, 1, v27);
      v29 = v24;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1, v27) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        v17 = v44;
        v13 = v24;
        v21 = v42;
        v22 = v52;
      }
      else
      {
        v30 = v39;
        outlined init with take of Participant((uint64_t)v8, v39, type metadata accessor for GroupSessionJournal.Attachment);
        outlined init with take of Participant(v30, v46, type metadata accessor for GroupSessionJournal.Attachment);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = v52;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
        v17 = v44;
        v13 = v29;
        v21 = v42;
        v33 = *(_QWORD *)(v51 + 16);
        v32 = *(_QWORD *)(v51 + 24);
        if (v33 >= v32 >> 1)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v51);
        v34 = v50;
        v35 = v51;
        *(_QWORD *)(v51 + 16) = v33 + 1;
        outlined init with take of Participant(v46, v35+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v33, type metadata accessor for GroupSessionJournal.Attachment);
      }
      v20 += v43;
      v18 = v22 - 1;
      if (!v18)
      {
        v40(v17, 1, 1, v12);
        break;
      }
    }
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    v51 = MEMORY[0x1E0DEE9D8];
    v36(v17, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  return v51;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionAttachmentManager.Attachment?);
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  v38 = *(_QWORD *)(v36 - 8);
  v7 = MEMORY[0x1E0C80A78](v36);
  v35 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v30 = (uint64_t)&v29 - v9;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v33 = v13;
    v34 = a2;
    v18 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v32 = *(_QWORD *)(v11 + 72);
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v29 = a1;
    swift_bridgeObjectRetain();
    v39 = MEMORY[0x1E0DEE9D8];
    v19 = (uint64_t)v31;
    while (1)
    {
      v37(v16, v18, v10);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v20(v16, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
        break;
      v21 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v33, v16, v10);
      closure #1 in closure #1 in GroupSessionAttachmentManager.init(transportSession:)(v21, v34, v19);
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v21, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v39;
      }
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v21, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v19, 1, v36) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v19, &demangling cache variable for type metadata for GroupSessionAttachmentManager.Attachment?);
      }
      else
      {
        v22 = v19;
        v23 = v30;
        outlined init with take of GroupSessionAttachmentManager.Attachment(v22, v30);
        outlined init with take of GroupSessionAttachmentManager.Attachment(v23, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1, v39);
        v25 = *(_QWORD *)(v39 + 16);
        v24 = *(_QWORD *)(v39 + 24);
        if (v25 >= v24 >> 1)
          v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v39);
        v26 = v39;
        *(_QWORD *)(v39 + 16) = v25 + 1;
        outlined init with take of GroupSessionAttachmentManager.Attachment(v35, v26+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v25);
        v19 = (uint64_t)v31;
      }
      v18 += v32;
      if (!--v17)
      {
        v20(v16, 1, 1, v10);
        break;
      }
    }
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v39 = MEMORY[0x1E0DEE9D8];
    v27(v16, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t partial apply for closure #2 in static URL.file<A>(from:)()
{
  return closure #2 in static URL.file<A>(from:)() & 1;
}

uint64_t specialized GroupSessionProvider.uuid.getter()
{
  uint64_t v0;
  Swift::String v2;

  (*(void (**)(void))(*(_QWORD *)v0 + 176))();
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  swift_bridgeObjectRelease();
  specialized static GroupSessionProvider.providerIdentifier.getter();
  swift_bridgeObjectRetain();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  static SharableObjectIdentifier.identifier<A>(ofType:with:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static GroupSessionProvider.providerIdentifier.getter()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = NSProcessInfo.stableAppIdentifier.getter();
  v3 = v2;

  if (v3)
    goto LABEL_4;
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_4:
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._object = (void *)0x80000001A0F1ADF0;
    v7._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v7);
    return v1;
  }
  _StringGuts.grow(_:)(147);
  v9._countAndFlagsBits = 0xD000000000000090;
  v9._object = (void *)0x80000001A0F1A0B0;
  String.append(_:)(v9);
  v10._object = (void *)0x80000001A0F1ADF0;
  v10._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized GroupSessionProvider.join()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _UNKNOWN **v6;
  uint64_t ObjectType;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t, _UNKNOWN **);

  result = swift_conformsToProtocol2();
  if (result)
  {
    v2 = result;
    v3 = one-time initialization token for default;
    swift_retain();
    if (v3 != -1)
      swift_once();
    v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
    __swift_project_value_buffer(v4, (uint64_t)static GroupSessionProviderTestingOverrides.default);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
    Testable.wrappedValue.getter();
    v5 = v0[5];
    if (v5)
    {
      v6 = (_UNKNOWN **)v0[6];
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      if (one-time initialization token for shared != -1)
        swift_once();
      v5 = static BackgroundGroupSessionManager.shared;
      swift_retain();
      v6 = &protocol witness table for BackgroundGroupSessionManager;
    }
    v0[10] = v5;
    ObjectType = swift_getObjectType();
    v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _UNKNOWN **))((char *)v6[3] + *(int *)v6[3]);
    v8 = (_QWORD *)swift_task_alloc();
    v0[11] = v8;
    *v8 = v0;
    v8[1] = specialized GroupSessionProvider.join();
    return v9(v0[9], v2, ObjectType, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  swift_unknownObjectRelease();
  swift_release();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 72);

  (*(void (**)(void))(*(_QWORD *)v5 + 200))();
  *(_QWORD *)(v0 + 64) = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRelease();
  swift_release();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Failed to start tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(void **)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);

  (*(void (**)(void))(*(_QWORD *)v6 + 200))();
  *(_QWORD *)(v0 + 56) = v5;
  v7 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized GroupSessionProvider.leave()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[9] = v0;
  v2 = type metadata accessor for UUID();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _UNKNOWN **v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, uint64_t, _UNKNOWN **);

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v1, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  v2 = v0[5];
  if (v2)
  {
    v3 = (_UNKNOWN **)v0[6];
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    if (one-time initialization token for shared != -1)
      swift_once();
    v2 = static BackgroundGroupSessionManager.shared;
    swift_retain();
    v3 = &protocol witness table for BackgroundGroupSessionManager;
  }
  v0[13] = v2;
  ObjectType = swift_getObjectType();
  specialized GroupSessionProvider.uuid.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, _UNKNOWN **))((char *)v3[4] + *(int *)v3[4]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = v5;
  *v5 = v0;
  v5[1] = specialized GroupSessionProvider.leave();
  return v7(v0[12], ObjectType, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[11] + 8))(v2[12], v2[10]);
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully left GroupSessionProvider", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 72);

  (*(void (**)(void))(*(_QWORD *)v5 + 200))();
  *(_QWORD *)(v0 + 64) = 0;
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  id v7;

  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Failed to leave GroupSessionProvider", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(void **)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 72);

  (*(void (**)(void))(*(_QWORD *)v6 + 200))();
  *(_QWORD *)(v0 + 56) = v5;
  v7 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CollaborationActivity.activate()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v1 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 48) + 136);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1();
  v3 = swift_release();
  if (!v2)
  {
    v6 = *(_QWORD **)(v0 + 48);
    *(_QWORD *)(v0 + 64) = v6[2];
    *(_QWORD *)(v0 + 72) = v6[3];
    v9 = (uint64_t (*)(void))(**(int **)(*v6 + 128) + *(_QWORD *)(*v6 + 128));
    swift_bridgeObjectRetain();
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v7;
    *v7 = v0;
    v7[1] = CollaborationActivity.activate();
    return v9();
  }
  v4 = (*(uint64_t (**)(uint64_t))(v0 + 56))(v3);
  *(_QWORD *)(v0 + 104) = v4;
  if (v4)
  {
    v9 = (uint64_t (*)(void))((char *)&async function pointer to specialized GroupSessionProvider.join()
                           + async function pointer to specialized GroupSessionProvider.join());
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v5;
    *v5 = v0;
    v5[1] = CollaborationActivity.activate();
    return v9();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (__cdecl *v13)();

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(void **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultContainer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>);
  swift_allocObject();
  v7 = specialized CKShareGroupSessionProvider.init(id:activity:share:container:)(v4, v3, v5, v1, v6);
  if (v2)
  {
    v8 = *(uint64_t (**)(_QWORD))(v0 + 8);
    return v8(0);
  }
  v10 = (*(uint64_t (**)(_QWORD *))(**(_QWORD **)(v0 + 48) + 144))(v7);
  v11 = (*(uint64_t (**)(uint64_t))(v0 + 56))(v10);
  *(_QWORD *)(v0 + 104) = v11;
  if (!v11)
  {
    v8 = *(uint64_t (**)(_QWORD))(v0 + 8);
    return v8(0);
  }
  v13 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized GroupSessionProvider.join()
                              + async function pointer to specialized GroupSessionProvider.join());
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v12;
  *v12 = v0;
  v12[1] = CollaborationActivity.activate();
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 104) != 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18[2];

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v1 = *(void **)(v0 + 120);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v10 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)(v0 + 16) = v9;
    type metadata accessor for CollaborationActivity();
    swift_retain();
    v11 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 32) = v8;
    v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v14 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to active activity %s, error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_willThrow();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t CollaborationActivity.activate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
  }
  else
  {
    *(_QWORD *)(v4 + 96) = a1;
    return swift_task_switch();
  }
}

uint64_t specialized IdentifiableGroupActivity.uuid.getter()
{
  type metadata accessor for UUID();
  return static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
}

{
  type metadata accessor for UUID();
  return static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
}

_QWORD *specialized CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint8_t *v31;
  void (*v32)(char *, uint64_t, uint64_t, uint8_t *);
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  id v58;
  id v59;
  void (*v60)(char *, uint64_t, uint64_t, uint8_t *);
  uint8_t *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65[5];
  uint64_t v66;

  v63 = a5;
  v6 = v5;
  v64 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  if (one-time initialization token for default != -1)
    swift_once();
  v65[0] = static PresenceSessionInfo.default;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v5[12] = CurrentValueSubject.init(_:)();
  static TaskPriority.userInitiated.getter();
  v17 = type metadata accessor for TaskPriority();
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)(v17 - 8) + 56);
  v61 = (uint8_t *)v17;
  ((void (*)(char *, _QWORD, uint64_t))v60)(v16, 0, 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DF07B8], v10);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 + 168)) = MEMORY[0x1E0DEE9E8];
  v18 = v64;
  v5[2] = a1;
  v5[3] = v18;
  v5[6] = a3;
  swift_retain();
  v19 = objc_msgSend(a4, sel_containerID);

  v20 = a4;
  if (!v19)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Log.ckShareGroupSessionProvider);
    v41 = a4;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v62 = v20;
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v64 = a3;
      v65[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v61 = v44 + 4;
      v66 = (uint64_t)v41;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v51 = v41;
      v52 = String.init<A>(reflecting:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v20 = v62;
      swift_bridgeObjectRelease();
      v49 = "Share %s doesn't have a containerID";
      goto LABEL_17;
    }
LABEL_18:

    goto LABEL_19;
  }
  v65[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v5[5] = CurrentValueSubject.init(_:)();
  v21 = objc_msgSend(a4, sel_currentUserParticipant);
  if (v21)
  {
    v22 = v21;
    v23 = CKShareParticipant.handle.getter();

    if (v23)
    {
      v64 = a3;
      v24 = objc_msgSend(v23, sel_normalizedValue);
      if (!v24)
        v24 = objc_msgSend(v23, sel_value);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v59 = v23;
      v26 = v25;
      v28 = v27;

      v65[3] = (uint64_t)&type metadata for AddressableMember;
      v65[4] = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      v65[0] = v26;
      v65[1] = v28;
      outlined init with take of Member?((uint64_t)v65, (uint64_t)(v6 + 7));
      v29 = v63;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 152)) = v63;
      swift_beginAccess();
      v66 = (uint64_t)v20;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v58 = v20;
      v30 = v29;
      Published.init(initialValue:)();
      swift_endAccess();
      v32 = v60;
      v31 = v61;
      v60(v16, 1, 1, v61);
      v33 = (_QWORD *)swift_allocObject();
      v33[2] = 0;
      v33[3] = 0;
      v33[4] = v6;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v33);
      swift_beginAccess();
      type metadata accessor for AnyCancellable();
      swift_allocObject();
      swift_retain();
      v34 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v66, v34);
      swift_release();
      swift_endAccess();
      swift_release();
      v32(v16, 1, 1, v31);
      v35 = (_QWORD *)swift_allocObject();
      v35[2] = 0;
      v35[3] = 0;
      v36 = v58;
      v35[4] = v6;
      v35[5] = v36;
      v35[6] = v30;
      v37 = v36;
      v38 = v30;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v35);
      swift_beginAccess();
      swift_allocObject();
      swift_retain();
      v39 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v66, v39);
      swift_release();
      swift_endAccess();
      swift_release();

      swift_release();
      return v6;
    }
  }
  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.ckShareGroupSessionProvider);
  v41 = a4;
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v42, v43))
    goto LABEL_18;
  v64 = a3;
  v44 = (uint8_t *)swift_slowAlloc();
  v45 = swift_slowAlloc();
  v65[0] = v45;
  v62 = v20;
  *(_DWORD *)v44 = 136315138;
  v61 = v44 + 4;
  v66 = (uint64_t)v41;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  v46 = v41;
  v47 = String.init<A>(reflecting:)();
  v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v65);
  v20 = v62;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  v49 = "Share %s doesn't have a currentUserParticipant";
LABEL_17:
  _os_log_impl(&dword_1A0DB3000, v42, v43, v49, v44, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A1B05CC4](v45, -1, -1);
  MEMORY[0x1A1B05CC4](v44, -1, -1);

LABEL_19:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>.Errors);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CollaborationActivity>.Errors and conformance CKShareGroupSessionProvider<A>.Errors, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>.Errors, (uint64_t)&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors);
  swift_allocError();
  *v54 = 0;
  swift_willThrow();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  if (v19)
    swift_release();
  swift_release();
  swift_release();
  v55 = (char *)v6 + *(_QWORD *)(*v6 + 144);
  v56 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>);
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[7] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>);
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v4[11] = v6;
  v4[12] = *(_QWORD *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  v4[14] = v7;
  v4[15] = *(_QWORD *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  (*(void (**)(void))(**(_QWORD **)(v0 + 56) + 344))();
  v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<CKShare>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CKShare>.Publisher, MEMORY[0x1E0C96190]);
  MEMORY[0x1A1B04650](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  *(_QWORD *)(v0 + 136) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator, MEMORY[0x1E0C95E78]);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v8;
  *v8 = v0;
  v8[1] = specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27;

  v1 = *(void **)(v0 + 152);
  if (v1)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain_n();
    v3 = v1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 56);
    if (v6)
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v27 = v9;
      *(_DWORD *)v8 = 136315394;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 408))(v9);
      v12 = v11;
      swift_release();
      *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v8 + 12) = 2080;
      *(_QWORD *)(v0 + 48) = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v13 = v3;
      v14 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v27);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Saw an updated CKShare: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v9, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    (*(void (**)(void))(**(_QWORD **)(v0 + 56) + 224))();
    *(_QWORD *)(v0 + 40) = CKShare.members.getter();
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v25;
    *v25 = v0;
    v25[1] = specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v0 + 56);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v27 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 408))(v22);
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "%s Stopped listening for updated CKShares", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

uint64_t specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  v7 = type metadata accessor for AsyncSerialQueue();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>);
  v6[18] = v8;
  v6[19] = *(_QWORD *)(v8 - 8);
  v6[20] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Iterator);
  v6[21] = v9;
  v6[22] = *(_QWORD *)(v9 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v2 = (void *)v0[13];
  v1 = (void *)v0[14];
  v3 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = (void *)v0[13];
  v12 = (void *)v0[14];
  v13 = v0[12];
  if (v10)
  {
    v32 = (void *)v0[14];
    type = v9;
    v14 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35 = v34;
    *(_DWORD *)v14 = 136315650;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 408))();
    v17 = v16;
    swift_release();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v14 + 12) = 2080;
    v0[8] = v11;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
    v18 = v11;
    v19 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v14 + 22) = 2080;
    v0[10] = v32;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainer);
    v21 = v32;
    v22 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v8, type, "%s Starting task to listen for CKShare updates on share: %s, container: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v34, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {
    swift_release_n();

  }
  v25 = v0[19];
  v24 = v0[20];
  v26 = v0[18];
  v27 = (void *)v0[13];
  v28 = (void *)v0[14];
  type metadata accessor for ShareChangeObserver();
  swift_allocObject();
  v29 = ShareChangeObserver.init(share:container:)(v27, v28);
  v0[25] = v29;
  (*(void (**)(void))(*v29 + 128))();
  MEMORY[0x1A1B04BE4](v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  v30 = (_QWORD *)swift_task_alloc();
  v0[26] = v30;
  *v30 = v0;
  v30[1] = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v1;
    swift_retain_n();
    v3 = v2;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 96);
    if (v6)
    {
      v8 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v28 = v27;
      *(_DWORD *)v8 = 136315650;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 408))();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v28);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v8 + 12) = 2080;
      *(_QWORD *)(v0 + 40) = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v12 = v3;
      v13 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v28);
      swift_bridgeObjectRelease();

      *(_WORD *)(v8 + 22) = 2080;
      v15 = objc_msgSend(v12, sel_participants);
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)(v0 + 48) = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CKShareParticipant]);
      v17 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v28);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Saw share %s updated with participants: %s", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v27, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    v21 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 96);
    (*(void (**)(void))(*(_QWORD *)v23 + 272))();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = v3;
    swift_retain();
    v25 = v3;
    AsyncSerialQueue.perform(_:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v26;
    *v26 = v0;
    v26[1] = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  v1 = *(void **)(v0 + 24);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 408))();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Share ended", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

BOOL static CollaborationActivity.CollaborationActivityError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void CollaborationActivity.CollaborationActivityError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t CollaborationActivity.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CollaborationActivity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupActivityMetadata(v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata, a1);
}

id CollaborationActivity.container.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container);
}

uint64_t CollaborationActivity.fetchShare.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  swift_retain();
  return v1;
}

uint64_t CollaborationActivity.share.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v0 + 16)
                                    + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare)
                         + *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                     + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = CollaborationActivity.share.getter;
  return v3();
}

uint64_t CollaborationActivity.share.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t CollaborationActivity.sessionManager.getter()
{
  return swift_retain();
}

uint64_t CollaborationActivity.groupSessionProvider.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t CollaborationActivity.groupSessionProvider.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*CollaborationActivity.groupSessionProvider.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t CollaborationActivity.__allocating_init(id:metadata:container:fetchShare:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = swift_allocObject();
  v13 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v12 + v13) = static BackgroundGroupSessionManager.shared;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  outlined init with take of GroupActivityMetadata(a3, v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = a4;
  v14 = (_QWORD *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  *v14 = a5;
  v14[1] = a6;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_retain();
  return v12;
}

uint64_t CollaborationActivity.init(id:metadata:container:fetchShare:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  _QWORD *v14;

  v13 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v6 + v13) = static BackgroundGroupSessionManager.shared;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  outlined init with take of GroupActivityMetadata(a3, v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = a4;
  v14 = (_QWORD *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  *v14 = a5;
  v14[1] = a6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  return v6;
}

uint64_t CollaborationActivity.__allocating_init(id:metadata:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  CollaborationActivity.init(id:metadata:share:)(a1, a2, a3, a4);
  return v8;
}

id CollaborationActivity.init(id:metadata:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  id result;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;

  v9 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v4 + v9) = static BackgroundGroupSessionManager.shared;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  swift_retain();
  result = objc_msgSend(a4, sel_containerID);
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C94C28]), sel_initWithContainerID_, result);

    outlined init with take of GroupActivityMetadata(a3, v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = v12;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a4;
    v14 = (_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
    *v14 = &async function pointer to partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
    v14[1] = v13;
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CollaborationActivity.init(id:metadata:share:)(void *a1)
{
  uint64_t v1;

  return closure #1 in CollaborationActivity.init(id:metadata:share:)(*(uint64_t (**)(uint64_t))(v1 + 8), v1, (uint64_t)a1);
}

uint64_t CollaborationActivity.updateShare(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for UUID();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Updating CKShare", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[3];

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  v0[6] = swift_allocError();
  *v8 = 5;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

GroupActivities::CollaborationActivity::CodingKeys_optional __swiftcall CollaborationActivity.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupActivities::CollaborationActivity::CodingKeys_optional)3;
}

Swift::Int CollaborationActivity.CollaborationActivityError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t CollaborationActivity.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CollaborationActivity.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x617461646174656DLL;
  if (a1 == 1)
    return 25705;
  return 0x656E6961746E6F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CollaborationActivity.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 25705;
  if (*v0 != 1)
    v1 = 0x656E6961746E6F63;
  if (*v0)
    return v1;
  else
    return 0x617461646174656DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CollaborationActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CollaborationActivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CollaborationActivity.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CollaborationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CollaborationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CollaborationActivity.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CollaborationActivity.init(from:)(a1);
  return v2;
}

uint64_t CollaborationActivity.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = v1;
  v5 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CollaborationActivity.CodingKeys>);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1)
  {
    v26 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
    swift_once();
    v11 = v26;
  }
  v29 = v11;
  v30 = a1;
  *(_QWORD *)(v3 + v11) = static BackgroundGroupSessionManager.shared;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v17 = (uint64_t)v30;
  }
  else
  {
    LOBYTE(v31) = 0;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityMetadata and conformance GroupActivityMetadata, type metadata accessor for GroupActivityMetadata, (uint64_t)&protocol conformance descriptor for GroupActivityMetadata);
    v12 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata;
    outlined init with take of GroupActivityMetadata((uint64_t)v7, v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
    LOBYTE(v31) = 1;
    *(_QWORD *)(v3 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)(v3 + 24) = v16;
    v33 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = (uint64_t)v30;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainerSetupInfo);
    v18 = v31;
    v19 = v32;
    v20 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    outlined consume of Data._Representation(v18, v19);
    if (v20)
    {
      v21 = v12;
      v22 = v17;
      v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C94C28]), sel_initWithContainerSetupInfo_, v20);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v21);
      *(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = v23;
      v24 = (_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
      *v24 = &async function pointer to closure #1 in CollaborationActivity.init(from:);
      v24[1] = 0;
      v13 = v22;
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError();
    swift_allocError();
    *v25 = 3;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v12);
    swift_bridgeObjectRelease();
    outlined destroy of GroupActivityMetadata(v15);
  }
  swift_release();
  swift_release();
  type metadata accessor for CollaborationActivity();
  swift_deallocPartialClassInstance();
  v13 = v17;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  return v3;
}

uint64_t closure #1 in CollaborationActivity.init(from:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError();
  swift_allocError();
  *v1 = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CollaborationActivity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BYTE v18[8];
  id v19[3];

  v3 = v1;
  v19[2] = *(id *)MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CollaborationActivity.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19[0]) = 0;
  type metadata accessor for GroupActivityMetadata(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityMetadata and conformance GroupActivityMetadata, type metadata accessor for GroupActivityMetadata, (uint64_t)&protocol conformance descriptor for GroupActivityMetadata);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v19[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = (void *)objc_opt_self();
    v10 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container), sel_setupInfo);
    v19[0] = 0;
    v11 = objc_msgSend(v9, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v10, 1, v19);

    v12 = v19[0];
    if (v11)
    {
      v13 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      v19[0] = v13;
      v19[1] = v15;
      v18[7] = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      outlined consume of Data._Representation((uint64_t)v13, (unint64_t)v15);
    }
    else
    {
      v16 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CollaborationActivity.deactivate()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (*v9)(void);

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 48) + 136))();
  *(_QWORD *)(v0 + 56) = v1;
  if (v1)
  {
    v9 = (uint64_t (*)(void))((char *)&async function pointer to specialized GroupSessionProvider.leave()
                           + async function pointer to specialized GroupSessionProvider.leave());
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = CollaborationActivity.deactivate();
    v3 = v9;
  }
  else
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.ckShareGroupSessionProvider);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1A0DB3000, v5, v6, "deactivate called on legacy API, but activate() was never called.", v7, 2u);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }

    v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18[2];

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v10 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)(v0 + 16) = v9;
    type metadata accessor for CollaborationActivity();
    swift_retain();
    v11 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 32) = v8;
    v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v14 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to leave activity %s, error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_willThrow();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CollaborationActivity.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of GroupActivityMetadata(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t CollaborationActivity.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of GroupActivityMetadata(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

id protocol witness for CollaborationGroupActivity.container.getter in conformance CollaborationActivity()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container);
}

uint64_t protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)v0 + 128) + *(_QWORD *)(**(_QWORD **)v0 + 128));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity;
  return v4();
}

uint64_t protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  outlined init with copy of GroupActivityMetadata(*v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata, a1);
  return protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t protocol witness for Identifiable.id.getter in conformance CollaborationActivity@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollaborationActivity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollaborationActivity()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t static CollaborationActivity.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v10 - v5;
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  v7 = static UUID.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CollaborationActivity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v10 - v5;
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  v7 = static UUID.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t CKUserIdentity.loggingIdentity.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = 0x6E776F6E6B6E75;
  v2 = objc_msgSend(v0, sel_lookupInfo);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_emailAddress);
    if (v4)
    {
      v5 = v4;
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

    }
    else
    {
      v1 = 0;
      v7 = 0;
    }
    v8 = objc_msgSend(v3, sel_phoneNumber);
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      if (!v7)
      {
        if (v12)
        {

          return v10;
        }
LABEL_12:

        return 0x6E776F6E6B6E75;
      }
    }
    else if (!v7)
    {
      goto LABEL_12;
    }

    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t type metadata accessor for CollaborationActivity()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CollaborationActivity;
  if (!type metadata singleton initialization cache for CollaborationActivity)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of GroupActivityMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GroupActivityMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A0E64EC8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v2 = *(void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
  return partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)((uint64_t)v2);
}

unint64_t lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BackgroundGroupSessionManagerError, &type metadata for BackgroundGroupSessionManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BackgroundGroupSessionManagerError, &type metadata for BackgroundGroupSessionManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError);
  }
  return result;
}

uint64_t specialized CollaborationActivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x617461646174656DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xED00006F666E4972)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CodingKeys, &type metadata for CollaborationActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CodingKeys, &type metadata for CollaborationActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CodingKeys, &type metadata for CollaborationActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CodingKeys, &type metadata for CollaborationActivity.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of GroupActivityMetadata(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CollaborationActivityError, &type metadata for CollaborationActivity.CollaborationActivityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CollaborationActivity.CollaborationActivityError, &type metadata for CollaborationActivity.CollaborationActivityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t (*)(uint64_t))type metadata accessor for CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for CollaborationActivity(a1, a2, a3, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity);
}

{
  return instantiation function for generic protocol witness table for CollaborationActivity(a1, a2, a3, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity);
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(a4, (uint64_t (*)(uint64_t))type metadata accessor for CollaborationActivity, a5);
  result = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(a6, (uint64_t (*)(uint64_t))type metadata accessor for CollaborationActivity, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A0E653A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E653D8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t dispatch thunk of CollaborationGroupActivity.container.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CollaborationGroupActivity.share.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 24) + *(_QWORD *)(a2 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v7(a1, a2);
}

uint64_t ObjC metadata update function for CollaborationActivity()
{
  return type metadata accessor for CollaborationActivity();
}

uint64_t type metadata completion function for CollaborationActivity()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupActivityMetadata(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for CollaborationActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CollaborationActivity.share.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 128) + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
  return v4();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(id:metadata:container:fetchShare:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(id:metadata:share:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of CollaborationActivity.updateShare(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of CollaborationActivity.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CollaborationActivity.deactivate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 200) + *(_QWORD *)(*(_QWORD *)v0 + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

uint64_t storeEnumTagSinglePayload for CollaborationActivity.CollaborationActivityError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0E65704 + 4 * byte_1A0F11C25[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0E65738 + 4 * byte_1A0F11C20[v4]))();
}

uint64_t sub_1A0E65738(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E65740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E65748);
  return result;
}

uint64_t sub_1A0E65754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E6575CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0E65760(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E65768(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollaborationActivity.CollaborationActivityError()
{
  return &type metadata for CollaborationActivity.CollaborationActivityError;
}

uint64_t storeEnumTagSinglePayload for CollaborationActivity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E657D0 + 4 * byte_1A0F11C2F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E65804 + 4 * byte_1A0F11C2A[v4]))();
}

uint64_t sub_1A0E65804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E6580C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E65814);
  return result;
}

uint64_t sub_1A0E65820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E65828);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E6582C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E65834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollaborationActivity.CodingKeys()
{
  return &type metadata for CollaborationActivity.CodingKeys;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in CollaborationActivity.init(id:metadata:share:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1A0E6586C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6);
}

void _sScT15GroupActivitiesE5store2inyShy7Combine14AnyCancellableCGz_tFyycfU_yt_s5NeverOTg5TA_0()
{
  specialized closure #1 in Task.store(in:)();
}

uint64_t sub_1A0E6590C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1A0E659C8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t one-time initialization function for _groupActivity()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UTType();
  __swift_allocate_value_buffer(v3, static UTType._groupActivity);
  __swift_project_value_buffer(v3, (uint64_t)static UTType._groupActivity);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t static UTType._groupActivity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _groupActivity != -1)
    swift_once();
  v2 = type metadata accessor for UTType();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static UTType._groupActivity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t aBlock[6];

  v5 = v4;
  if (one-time initialization token for default != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v26 = v5;
    v13 = (uint8_t *)swift_slowAlloc();
    v25 = a2;
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = a3;
    v16 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v11, v12, "Async registerGroupActivity called for type %s", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v14;
    a2 = v25;
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    v19 = v13;
    v5 = v26;
    MEMORY[0x1A1B05CC4](v19, -1, -1);
  }
  else
  {
    v15 = a3;
  }

  if (one-time initialization token for _groupActivity != -1)
    swift_once();
  v20 = type metadata accessor for UTType();
  __swift_project_value_buffer(v20, (uint64_t)static UTType._groupActivity);
  v21 = UTType.identifier.getter();
  v22 = (void *)MEMORY[0x1A1B048B4](v21);
  swift_bridgeObjectRelease();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v15;
  v23[3] = a4;
  v23[4] = a1;
  v23[5] = a2;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  aBlock[5] = (uint64_t)v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed (@escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ())?, @unowned @thick Swift.AnyObject.Type?, @guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_7;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_registerItemForTypeIdentifier_loadHandler_, v22, v24);
  _Block_release(v24);

}

uint64_t closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a5;
  v18[7] = a6;
  v18[8] = a1;
  v18[9] = a2;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  v8[8] = a8;
  v8[9] = v16;
  v8[6] = a6;
  v8[7] = a7;
  v11 = *(_QWORD *)(type metadata accessor for AnyGroupActivity(0) - 8);
  v8[10] = v11;
  v8[11] = *(_QWORD *)(v11 + 64);
  v8[12] = swift_task_alloc();
  v8[13] = swift_task_alloc();
  v8[14] = *(_QWORD *)(a8 - 8);
  v12 = swift_task_alloc();
  v8[15] = v12;
  v15 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v13 = (_QWORD *)swift_task_alloc();
  v8[16] = v13;
  *v13 = v8;
  v13[1] = closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  return v15(v12);
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, void *);
  id v26;
  uint64_t v28;
  uint64_t v29[2];

  v1 = *(void **)(v0 + 136);
  GroupActivity.eraseToAnyGroupActivity()(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(uint64_t **)(v0 + 104));
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 64));
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    v3 = v1;
    v4 = v1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v29[0] = v8;
      *(_DWORD *)v7 = 136315394;
      v9 = _typeName(_:qualified:)();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      *(_QWORD *)(v0 + 24) = v1;
      v11 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v12 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v5, v6, "Activity conversion failed for type %s, error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {

    }
    v25 = *(void (**)(_QWORD, void *))(v0 + 48);
    if (v25)
    {
      v26 = v1;
      v25(0, v1);

    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 112);
    v28 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 48);
    outlined init with copy of AnyGroupActivity(v16, v15);
    v21 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v22 = swift_allocObject();
    outlined init with take of AnyGroupActivity(v15, v22 + v21);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
    swift_allocObject();
    *(_QWORD *)(v0 + 40) = Future.init(_:)();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v19;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v19;
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v20);
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v20);
    lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
    Publisher.sinkOnce(_:onError:)();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of AnyGroupActivity(v16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(_QWORD, void *);
  id v15;
  uint64_t v17;

  v1 = *(void **)(v0 + 136);
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = _typeName(_:qualified:)();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v1;
    v11 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Activity conversion failed for type %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {

  }
  v14 = *(void (**)(_QWORD, void *))(v0 + 48);
  if (v14)
  {
    v15 = v1;
    v14(0, v1);

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(void **a1, void (*a2)(_QWORD, void *))
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *a1;
  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  v5 = v3;
  v6 = v3;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8))
  {

    if (!a2)
      return;
    goto LABEL_7;
  }
  v9 = (uint8_t *)swift_slowAlloc();
  v10 = swift_slowAlloc();
  v14 = v10;
  *(_DWORD *)v9 = 136315138;
  v11 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v12 = String.init<A>(reflecting:)();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1A0DB3000, v7, v8, "Failed to convert from AnyGroupActivity to TUConversationActivity, error: %s", v9, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A1B05CC4](v10, -1, -1);
  MEMORY[0x1A1B05CC4](v9, -1, -1);

  if (a2)
LABEL_7:
    a2(0, v3);
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[2];
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for Optional();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v38 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v46 = v14;
  v47 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v38 - v15;
  if (one-time initialization token for default != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18(v16, a1, a2);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v45 = v18;
  if (v21)
  {
    v41 = a3;
    v22 = swift_slowAlloc();
    v42 = v4;
    v23 = (uint8_t *)v22;
    v40 = swift_slowAlloc();
    aBlock[0] = v40;
    *(_DWORD *)v23 = 136315138;
    v38[1] = v23 + 4;
    v39 = v23;
    v18(v11, (uint64_t)v16, a2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, a2);
    v24 = a1;
    v25 = >> prefix<A>(_:)((uint64_t)v11, a2);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
    v28 = v25;
    a1 = v24;
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v41;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a2);
    v29 = v39;
    _os_log_impl(&dword_1A0DB3000, v19, v20, "Synchronous registerGroupActivity called for activity %s", v39, 0xCu);
    v30 = v40;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    v4 = v42;
    MEMORY[0x1A1B05CC4](v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a2);
  }

  if (one-time initialization token for _groupActivity != -1)
    swift_once();
  v31 = type metadata accessor for UTType();
  __swift_project_value_buffer(v31, (uint64_t)static UTType._groupActivity);
  v32 = UTType.identifier.getter();
  v33 = (void *)MEMORY[0x1A1B048B4](v32);
  swift_bridgeObjectRelease();
  v34 = v47;
  v45(v47, a1, a2);
  v35 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v36 + v35, v34, a2);
  aBlock[4] = (uint64_t)partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(_:);
  aBlock[5] = v36;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed (@escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ())?, @unowned @thick Swift.AnyObject.Type?, @guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6_0;
  v37 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v4, sel_registerItemForTypeIdentifier_loadHandler_, v33, v37);
  _Block_release(v37);

}

uint64_t closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;

  v24[5] = *(_QWORD *)(a6 - 8);
  v25 = a2;
  MEMORY[0x1E0C80A78](a1);
  v10 = type metadata accessor for Optional();
  v24[3] = *(_QWORD *)(v10 - 8);
  v24[4] = v10;
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for AnyGroupActivity(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v24 - v16;
  GroupActivity.eraseToAnyGroupActivity()(a6, a7, (_QWORD *)((char *)v24 - v16));
  outlined init with copy of AnyGroupActivity((uint64_t)v17, (uint64_t)v15);
  v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v19 = swift_allocObject();
  outlined init with take of AnyGroupActivity((uint64_t)v15, v19 + v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  v26 = Future.init(_:)();
  v20 = swift_allocObject();
  v21 = v25;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = v21;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = v21;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of AnyGroupActivity((uint64_t)v17);
}

id NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_progressWithTotalUnitCount_, 100);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = v2;
  v10[7] = v8;
  swift_retain();
  v11 = v2;
  v12 = v8;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in NSItemProvider.loadGroupActivity(completionHandler:), (uint64_t)v10);
  swift_release();
  return v12;
}

uint64_t closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  v7[9] = swift_task_alloc();
  v7[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  v2 = swift_task_alloc();
  v0[11] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[12] = v3;
  type metadata accessor for TUConversationActivity();
  *v3 = v0;
  v3[1] = closure #1 in NSItemProvider.loadGroupActivity(completionHandler:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  uint64_t v18;
  id v19;
  uint64_t v21;

  v1 = *(void **)(v0 + 104);
  AnyGroupActivity.init(tuConversationActivity:)(*(void **)(v0 + 16), *(char **)(v0 + 80));
  if (v1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    v3 = v1;
    v4 = v1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v21 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 24) = v1;
      v9 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v10 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to load GroupActivity, error %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {

    }
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(void (**)(uint64_t, void *))(v0 + 40);
    v18 = type metadata accessor for AnyGroupActivity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
    v19 = v1;
    v17(v16, v1);

    outlined destroy of AnyGroupActivity?(v16);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(void **)(v0 + 64);
    v14 = *(void (**)(uint64_t, _QWORD))(v0 + 40);
    v15 = type metadata accessor for AnyGroupActivity(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
    v14(v12, 0);
    outlined destroy of AnyGroupActivity?(v12);
    objc_msgSend(v13, sel_setCompletedUnitCount_, objc_msgSend(v13, sel_totalUnitCount));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  uint64_t v14;
  id v15;
  uint64_t v17;

  swift_task_dealloc();
  v1 = *(void **)(v0 + 104);
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 24) = v1;
    v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to load GroupActivity, error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {

  }
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(void (**)(uint64_t, void *))(v0 + 40);
  v14 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v15 = v1;
  v13(v12, v1);

  outlined destroy of AnyGroupActivity?(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSItemProvider.loadGroupActivity()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t NSItemProvider.loadGroupActivity()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[4];
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  type metadata accessor for TUConversationActivity();
  *v3 = v0;
  v3[1] = NSItemProvider.loadGroupActivity();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  AnyGroupActivity.init(tuConversationActivity:)(*(void **)(v0 + 16), *(char **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  *v3 = v0;
  v3[1] = NSItemProvider.loadGroupActivity();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A0E67B90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, a2, a3, a4, v4[4], v4[5], v4[2], v4[3]);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1A0E67BD8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(a1, a2, a3, a4, v4 + ((v6 + 32) & ~v6), v5, *(_QWORD *)(v4 + 24));
}

uint64_t sub_1A0E67C4C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(a1, v4, v5, v6, v7, v9, v8);
}

void partial apply for closure #1 in NSItemProvider.loadGroupActivity()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in NSItemProvider.loadGroupActivity()(a1, *(void **)(v1 + 16));
}

uint64_t outlined destroy of AnyGroupActivity?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *partial apply for closure #2 in closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16);
  if (v2)
    return (_QWORD *)v2(0, *result);
  return result;
}

uint64_t sub_1A0E67DA0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A0E67DCC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 64))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[2];
  v6 = v1[3];
  v7 = (int *)v1[6];
  v8 = v1[7];
  v10 = v1[8];
  v9 = v1[9];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, v5, v6, v7, v8, v10, v9, v4);
}

_QWORD *partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16);
  if (v2)
    return (_QWORD *)v2(*result, 0);
  return result;
}

uint64_t objectdestroy_19Tm_0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(void **a1)
{
  uint64_t v1;

  closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, *(void (**)(_QWORD, void *))(v1 + 16));
}

uint64_t CodingUserInfoKey.typedPayloadDecoderMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for typedPayloadDecoderMap != -1)
    swift_once();
  v0 = type metadata accessor for CodingUserInfoKey();
  return __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
}

uint64_t one-time initialization function for typedPayloadDecoderMap()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v3, static CodingUserInfoKey.typedPayloadDecoderMap);
  v4 = __swift_project_value_buffer(v3, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  CodingUserInfoKey.init(rawValue:)();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t static CodingUserInfoKey.typedPayloadDecoderMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for typedPayloadDecoderMap != -1)
    swift_once();
  v2 = type metadata accessor for CodingUserInfoKey();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t TypedPayloadDecoder.decode(fromDecodingContainer:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = swift_dynamicCastMetatype();
  if (result)
  {
    __break(1u);
  }
  else
  {
    a4[3] = a1;
    a4[4] = a2;
    a4[5] = a3;
    __swift_allocate_boxed_opaque_existential_1(a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TypedPayloadBox.CodingKeys>);
    result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v4)
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  }
  return result;
}

uint64_t protocol witness for TypedPayloadDecoding.decode(fromDecodingContainer:) in conformance TypedPayloadDecoder<A>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return TypedPayloadDecoder.decode(fromDecodingContainer:)(a1[2], a1[3], a1[4], a2);
}

uint64_t dispatch thunk of TypedPayloadDecoding.decode(fromDecodingContainer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for TypedPayloadDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedPayloadDecoder);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t BroadcastOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

GroupActivities::BroadcastOptions __swiftcall BroadcastOptions.init(rawValue:)(GroupActivities::BroadcastOptions rawValue)
{
  GroupActivities::BroadcastOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t BroadcastOptions.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static BroadcastOptions.mirroredVideo.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BroadcastOptions.tuBroadcastingAttributes.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t lazy protocol witness table accessor for type BroadcastOptions and conformance BroadcastOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BroadcastOptions, &type metadata for BroadcastOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BroadcastOptions, &type metadata for BroadcastOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BroadcastOptions, &type metadata for BroadcastOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for BroadcastOptions, &type metadata for BroadcastOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcastOptions()
{
  return &type metadata for BroadcastOptions;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

double AnySpatialTemplateRole.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((__int128 *)a1, (uint64_t)v4);
    outlined init with take of TypedPayloadDecoding(v4, a2);
  }
  else
  {
    outlined destroy of SpatialTemplateRole?(a1);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t outlined destroy of SpatialTemplateRole?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnySpatialTemplateRole.spatialTemplateRole.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

uint64_t AnySpatialTemplateRole.hash(into:)()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int AnySpatialTemplateRole.hashValue.getter()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnySpatialTemplateRole()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnySpatialTemplateRole()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnySpatialTemplateRole()
{
  _QWORD *v0;

  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static AnySpatialTemplateRole.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[40];
  _BYTE v22[40];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v26);
  outlined init with copy of AudioSessionAssertionManager(a2, (uint64_t)v23);
  v3 = v27;
  v4 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  v7 = v6;
  v8 = v24;
  v9 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
    if ((v12 & 1) == 0)
      goto LABEL_9;
  }
  v14 = __swift_project_boxed_opaque_existential_1(v26, v27);
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(_BYTE *))(v16 + 16))(&v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  AnyHashable.init<A>(_:)();
  v17 = __swift_project_boxed_opaque_existential_1(v23, v24);
  MEMORY[0x1E0C80A78](v17);
  (*(void (**)(_BYTE *))(v19 + 16))(&v21[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  AnyHashable.init<A>(_:)();
  v13 = MEMORY[0x1A1B04F8C](v22, v21);
  outlined destroy of AnyHashable((uint64_t)v21);
  outlined destroy of AnyHashable((uint64_t)v22);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v13 & 1;
}

unint64_t lazy protocol witness table accessor for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnySpatialTemplateRole, &type metadata for AnySpatialTemplateRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySpatialTemplateRole()
{
  return &type metadata for AnySpatialTemplateRole;
}

uint64_t GroupSessionProviderObserver.groupSessionService.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v0 + 16);
}

uint64_t GroupSessionProviderObserver.groupSessionService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*GroupSessionProviderObserver.groupSessionService.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return PresenceGroupSessionProviderObserver.groupSessionService.modify;
}

uint64_t GroupSessionProviderObserver.provider.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionProviderObserver.membershipObserver.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t GroupSessionProviderObserver.membershipObserver.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*GroupSessionProviderObserver.membershipObserver.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionProviderObserver.unknownParticipants.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionProviderObserver.unknownParticipants.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionProviderObserver.unknownParticipants.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

_QWORD *GroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t ObjectType;
  _QWORD *v10;

  v8 = (_QWORD *)swift_allocObject();
  ObjectType = swift_getObjectType();
  v10 = specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v8, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

_QWORD *GroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t ObjectType;
  _QWORD *v10;

  ObjectType = swift_getObjectType();
  v10 = specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v4, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

Swift::Void __swiftcall GroupSessionProviderObserver.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v41 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](v4);
  v42 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v38 - v8;
  if (one-time initialization token for groupSessionProviderObserver != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.groupSessionProviderObserver);
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v38[1] = v11;
    v14 = swift_slowAlloc();
    v40 = v4;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v39 = v9;
    *(_DWORD *)v15 = 136315138;
    v44 = v16;
    v43 = *(_OWORD *)(v1 + 32);
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    v17 = String.init<A>(reflecting:)();
    *(_QWORD *)&v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v44);
    v9 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "ProviderObserver for %s started", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v16, -1, -1);
    v19 = v15;
    v4 = v40;
    MEMORY[0x1A1B05CC4](v19, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  swift_release();
  if (v20)
  {
    swift_retain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      *(_DWORD *)v23 = 136315138;
      v44 = v24;
      v43 = *(_OWORD *)(v1 + 32);
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
      v25 = String.init<A>(reflecting:)();
      *(_QWORD *)&v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v21, v22, "ProviderObserver for %s already started.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v24, -1, -1);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  else
  {
    v27 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 72))(ObjectType, v27);
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    v30 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>, MEMORY[0x1E0C95FB8]);
    MEMORY[0x1A1B04650](v29, v30);
    swift_release();
    v31 = type metadata accessor for TaskPriority();
    v32 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v41, 1, 1, v31);
    v33 = swift_allocObject();
    swift_weakInit();
    v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v42, v9, v4);
    v35 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v36 + v35, v34, v4);
    *(_QWORD *)(v36 + ((v6 + v35 + 7) & 0xFFFFFFFFFFFFFFF8)) = v33;
    v37 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in GroupSessionProviderObserver.start(), v36);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v37);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

uint64_t closure #1 in GroupSessionProviderObserver.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[16] = a4;
  v5[17] = a5;
  v6 = type metadata accessor for UUID();
  v5[18] = v6;
  v5[19] = *(_QWORD *)(v6 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator);
  v5[22] = v7;
  v5[23] = *(_QWORD *)(v7 - 8);
  v5[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in GroupSessionProviderObserver.start()()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  swift_beginAccess();
  *(_QWORD *)(v0 + 200) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = closure #1 in GroupSessionProviderObserver.start();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(_QWORD, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 216);
  if (v1)
  {
    if (one-time initialization token for groupSessionProviderObserver != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 232) = __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      *(_QWORD *)(v0 + 104) = v6;
      *(_DWORD *)v5 = 136315394;
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        *(_QWORD *)(v0 + 120) = Strong;
        type metadata accessor for GroupSessionProviderObserver();
        v8 = String.init<A>(reflecting:)();
        v10 = v9;
      }
      else
      {
        v10 = 0xE300000000000000;
        v8 = 7104878;
      }
      *(_QWORD *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, (uint64_t *)(v0 + 104));
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      *(_QWORD *)(v0 + 112) = v1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
      v11 = String.init<A>(reflecting:)();
      *(_QWORD *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)(v0 + 104));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v3, v4, "%s received updated members: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v6, -1, -1);
      MEMORY[0x1A1B05CC4](v5, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    v13 = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 240) = v13;
    if (v13)
    {
      v14 = v13;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v13);
      *(_QWORD *)(v0 + 248) = v15;
      if (v15)
      {
        v17 = v16;
        v18 = *(_QWORD *)(v0 + 168);
        *(_QWORD *)(v0 + 256) = v16;
        ObjectType = swift_getObjectType();
        *(_QWORD *)(v0 + 264) = ObjectType;
        v20 = *(_QWORD *)(v14 + 40);
        v21 = swift_getObjectType();
        GroupSessionProvider.uuid.getter(v21, v20, v18);
        v24 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v17 + 40) + *(_QWORD *)(v17 + 40));
        v22 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 272) = v22;
        *v22 = v0;
        v22[1] = closure #1 in GroupSessionProviderObserver.start();
        return v24(*(_QWORD *)(v0 + 168), v1, ObjectType, v17);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  v3 = v2[21];
  v4 = v2[18];
  v5 = v2[19];
  if (v0)
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[38] = v6;
    v6(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  swift_unknownObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v1;
  *v1 = v0;
  v1[1] = closure #1 in GroupSessionProviderObserver.start();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  return swift_task_switch();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v3 = (void (*)(uint64_t, uint64_t))v2[38];
  v4 = v2[20];
  v5 = v2[18];
  if (v0)

  v3(v4, v5);
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _QWORD *v17;
  uint64_t (*v19)(_QWORD, _QWORD, uint64_t);
  uint64_t v20;

  v1 = (void *)v0[35];
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[35];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v20 = v8;
    v0[11] = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to update members for reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[35];

  }
  v13 = v0[32];
  v14 = v0[20];
  v15 = *(_QWORD *)(v0[30] + 40);
  ObjectType = swift_getObjectType();
  GroupSessionProvider.uuid.getter(ObjectType, v15, v14);
  v19 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))(**(int **)(v13 + 32) + *(_QWORD *)(v13 + 32));
  v17 = (_QWORD *)swift_task_alloc();
  v0[37] = v17;
  *v17 = v0;
  v17[1] = closure #1 in GroupSessionProviderObserver.start();
  return v19(v0[20], v0[33], v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;

  v1 = *(void **)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 40);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  *(_QWORD *)(v0 + 80) = v1;
  v7 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = v1;
  return swift_task_switch();
}

uint64_t GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t);

  *(_OWORD *)(v0 + 128) = *(_OWORD *)(*(_QWORD *)(v0 + 152) + 32);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider);
  if (!swift_dynamicCast())
  {
    *(_QWORD *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    outlined destroy of ErrorRecoveryGroupSessionProvider?(v0 + 56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = (_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v0 + 16);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160);
  v6 = v5(v4);
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176);
  swift_bridgeObjectRetain();
  v8 = (uint64_t (*)(uint64_t, _QWORD))v7(v0 + 96);
  specialized Set.formUnion<A>(_:)(v3);
  v9 = v8(v0 + 96, 0);
  v10 = v5(v9);
  v11 = specialized static Set.== infix(_:_:)(v6, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    if (one-time initialization token for groupSessionProviderObserver != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.groupSessionProviderObserver);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1A0DB3000, v13, v14, "No change in unknown participants", v15, 2u);
      MEMORY[0x1A1B05CC4](v15, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for groupSessionProviderObserver != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.groupSessionProviderObserver);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1A0DB3000, v18, v19, "Detected a difference in unknown participants, fetching membership update.", v20, 2u);
    MEMORY[0x1A1B05CC4](v20, -1, -1);
  }

  v21 = *(_QWORD *)(v0 + 40);
  v22 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v1, v21);
  v24 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v22 + 8) + *(_QWORD *)(v22 + 8));
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v23;
  *v23 = v0;
  v23[1] = GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:);
  return v24(v21, v22);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::Int *v10;
  Swift::Int v11;
  Swift::Int v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::Int v16;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (Swift::Int *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v16, v11, v12);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t GroupSessionProviderObserver.deinit()
{
  uint64_t v0;

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionProviderObserver.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

_QWORD *specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  a4[3] = 0;
  swift_unknownObjectWeakInit();
  v10 = MEMORY[0x1E0DEE9E8];
  a4[6] = 0;
  a4[7] = v10;
  a4[4] = a1;
  a4[5] = a2;
  swift_beginAccess();
  a4[3] = a6;
  swift_unknownObjectWeakAssign();
  return a4;
}

uint64_t sub_1A0E6A4B0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0E6A4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionProviderObserver.start()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in GroupSessionProviderObserver.start()(a1, v6, v7, v8, v9);
}

uint64_t outlined destroy of ErrorRecoveryGroupSessionProvider?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A0E6A650@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E6A680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0E6A6C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E6A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E6A720@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E6A750(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for GroupSessionProviderObserver()
{
  return objc_opt_self();
}

uint64_t method lookup function for GroupSessionProviderObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.start()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 200) + *(_QWORD *)(*(_QWORD *)v1 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v6(a1);
}

Swift::Int InternalGroupSessionProvider.groupSessions(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[7];
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v4 = v3;
  v7 = a1;
  v8 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivitySession();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
  v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = MEMORY[0x1E0DEE9E8];
    v36 = MEMORY[0x1E0DEE9E8];
    __CocoaSet.makeIterator()();
    v11 = __CocoaSet.Iterator.next()();
    if (v11)
    {
      v29 = a2;
      v30 = v7;
      v31 = a3;
      v32 = 0;
      v33 = v4;
      do
      {
        v34 = v11;
        swift_dynamicCast();
        if (objc_msgSend(v35, sel_state) && objc_msgSend(v35, sel_state) != (id)1)
        {

        }
        else
        {
          v12 = v35;
          v13 = v36;
          v14 = *(_QWORD *)(v36 + 16);
          if (*(_QWORD *)(v36 + 24) <= v14)
          {
            specialized _NativeSet.resize(capacity:)(v14 + 1, &demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
            v13 = v36;
          }
          result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v13 + 40));
          v16 = v13 + 56;
          v17 = -1 << *(_BYTE *)(v13 + 32);
          v18 = result & ~v17;
          v19 = v18 >> 6;
          if (((-1 << v18) & ~*(_QWORD *)(v13 + 56 + 8 * (v18 >> 6))) != 0)
          {
            v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 56 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v21 = 0;
            v22 = (unint64_t)(63 - v17) >> 6;
            do
            {
              if (++v19 == v22 && (v21 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v23 = v19 == v22;
              if (v19 == v22)
                v19 = 0;
              v21 |= v23;
              v24 = *(_QWORD *)(v16 + 8 * v19);
            }
            while (v24 == -1);
            v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          }
          *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v20) = v12;
          ++*(_QWORD *)(v13 + 16);
        }
        v11 = __CocoaSet.Iterator.next()();
      }
      while (v11);
      v10 = v36;
      v4 = v33;
      v7 = v30;
      a3 = v31;
      a2 = v29;
    }
    v25 = swift_release();
  }
  else
  {
    v25 = specialized _NativeSet.filter(_:)(v9);
    v10 = v25;
  }
  MEMORY[0x1E0C80A78](v25);
  v28[2] = a2;
  v28[3] = a3;
  v28[4] = v7;
  v28[5] = v4;
  specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #2 in InternalGroupSessionProvider.groupSessions(for:), (uint64_t)v28, v10);
  v27 = v26;
  swift_release();
  return v27;
}

void closure #2 in InternalGroupSessionProvider.groupSessions(for:)(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (**a5)(char *, uint64_t, uint64_t)@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t);
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t);
  id v34;
  void *v35;
  _QWORD v36[5];
  void (**v37)(char *, uint64_t, uint64_t);

  v37 = a5;
  v9 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  v12 = objc_msgSend(a2, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = objc_msgSend(a2, sel_initiator);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, sel_value);

    v16 = (void (*)(char *, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v17;
    v33 = v16;

  }
  else
  {
    v32 = (void (*)(char *, uint64_t, uint64_t))0xE000000000000000;
    v33 = 0;
  }
  v18 = objc_msgSend(a2, sel_localParticipantIdentifier);
  v19 = objc_msgSend(a2, sel_localMember);
  v20 = v19;
  if (v19)
  {
    v21 = objc_msgSend(v19, sel_handle);

    v22 = objc_msgSend(v21, (SEL)&selRef_imageData);
    v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

  }
  else
  {
    v24 = 0xE000000000000000;
  }
  v25 = objc_msgSend(a2, sel_unreliableMessengerConfig);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v36, a3, a4);
  v27 = v34;
  v28 = v35;
  v29 = specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(v34, (uint64_t)v11, v33, v32, (uint64_t)v18, (uint64_t)v20, v24, v25, v26, (uint64_t)v36);
  if (v28)
  {

    v30 = 0;
  }
  else
  {
    v30 = v29;

  }
  *v37 = v30;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)();
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for Participant();
  v3 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  v38 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v34 = v0;
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v36 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v35 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    v16 = type metadata accessor for Participant;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v35)
          goto LABEL_33;
        v21 = v36[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_33;
          v21 = v36[v15];
          if (!v21)
          {
            v15 = v20 + 2;
            if (v20 + 2 >= v35)
              goto LABEL_33;
            v21 = v36[v15];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v35)
              {
LABEL_33:
                swift_release();
                v1 = v34;
                v33 = 1 << *(_BYTE *)(v6 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v36[v22];
              if (!v21)
              {
                while (1)
                {
                  v15 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_39;
                  if (v15 >= v35)
                    goto LABEL_33;
                  v21 = v36[v15];
                  ++v22;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v15 = v22;
            }
          }
        }
LABEL_23:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v23 = *(_QWORD *)(v38 + 72);
      v24 = v16;
      outlined init with take of Participant(*(_QWORD *)(v6 + 48) + v23 * v19, (uint64_t)v5, (uint64_t (*)(_QWORD))v16);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      dispatch thunk of Hashable.hash(into:)();
      v25 = v37;
      String.hash(into:)();
      Hasher._combine(_:)(*(_QWORD *)&v5[*(int *)(v25 + 24)]);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
        v16 = v24;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        v16 = v24;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      result = outlined init with take of Participant((uint64_t)v5, *(_QWORD *)(v8 + 48) + v17 * v23, (uint64_t (*)(_QWORD))v16);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  v38 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v34 = v0;
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v36 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v35 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    v16 = type metadata accessor for PresenceSessionInfo.Participant;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v35)
          goto LABEL_33;
        v21 = v36[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_33;
          v21 = v36[v15];
          if (!v21)
          {
            v15 = v20 + 2;
            if (v20 + 2 >= v35)
              goto LABEL_33;
            v21 = v36[v15];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v35)
              {
LABEL_33:
                swift_release();
                v1 = v34;
                v33 = 1 << *(_BYTE *)(v6 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v36[v22];
              if (!v21)
              {
                while (1)
                {
                  v15 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_39;
                  if (v15 >= v35)
                    goto LABEL_33;
                  v21 = v36[v15];
                  ++v22;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v15 = v22;
            }
          }
        }
LABEL_23:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v23 = *(_QWORD *)(v38 + 72);
      v24 = v16;
      outlined init with take of Participant(*(_QWORD *)(v6 + 48) + v23 * v19, (uint64_t)v5, v16);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      dispatch thunk of Hashable.hash(into:)();
      v25 = v37;
      String.hash(into:)();
      Hasher._combine(_:)(v5[*(int *)(v25 + 24)]);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
        v16 = v24;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        v16 = v24;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      result = outlined init with take of Participant((uint64_t)v5, *(_QWORD *)(v8 + 48) + v17 * v23, v16);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt16>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
      result = MEMORY[0x1A1B053D0](*(_QWORD *)(v4 + 40), v18, 2);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (Swift::UInt8 *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ReliableBroadcastPacket.Message>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v8 = 1 << *(_BYTE *)(v6 + 32);
    v9 = (_QWORD *)(v6 + 56);
    v10 = -1;
    if (v8 < 64)
      v10 = ~(-1 << v8);
    v11 = v10 & *(_QWORD *)(v6 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v14 << 6);
      }
      else
      {
        v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_22;
        v18 = v9[v17];
        ++v14;
        if (!v18)
        {
          v14 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_22;
          v18 = v9[v14];
          if (!v18)
          {
            v14 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_22;
            v18 = v9[v14];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_22:
                swift_release();
                v20 = 1 << *(_BYTE *)(v6 + 32);
                if (v20 > 63)
                  bzero((void *)(v6 + 56), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v20;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v18 = v9[v19];
              if (!v18)
              {
                while (1)
                {
                  v14 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_28;
                  if (v14 >= v12)
                    goto LABEL_22;
                  v18 = v9[v14];
                  ++v19;
                  if (v18)
                    goto LABEL_21;
                }
              }
              v14 = v19;
            }
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      outlined init with take of Participant(*(_QWORD *)(v6 + 48) + *(_QWORD *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for ReliableBroadcastPacket.Message);
      result = specialized _NativeSet._unsafeInsertNew(_:)(v5, v7);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<CPParticipant>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &demangling cache variable for type metadata for _SetStorage<UTType>, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  unint64_t *v45;
  uint64_t v46;

  v45 = a4;
  v46 = a5;
  v7 = v5;
  v44 = a2;
  v8 = a2(0);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - v9;
  v11 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v12 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v42 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v40 = v5;
    v41 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    while (1)
    {
      if (v17)
      {
        v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v23 = v22 | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v24 >= v41)
          goto LABEL_33;
        v25 = v42[v24];
        ++v20;
        if (!v25)
        {
          v20 = v24 + 1;
          if (v24 + 1 >= v41)
            goto LABEL_33;
          v25 = v42[v20];
          if (!v25)
          {
            v20 = v24 + 2;
            if (v24 + 2 >= v41)
              goto LABEL_33;
            v25 = v42[v20];
            if (!v25)
            {
              v26 = v24 + 3;
              if (v26 >= v41)
              {
LABEL_33:
                swift_release();
                v7 = v40;
                v38 = 1 << *(_BYTE *)(v11 + 32);
                if (v38 > 63)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v25 = v42[v26];
              if (!v25)
              {
                while (1)
                {
                  v20 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_39;
                  if (v20 >= v41)
                    goto LABEL_33;
                  v25 = v42[v20];
                  ++v26;
                  if (v25)
                    goto LABEL_23;
                }
              }
              v20 = v26;
            }
          }
        }
LABEL_23:
        v17 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      v27 = v11;
      v28 = *(_QWORD *)(v11 + 48);
      v29 = *(_QWORD *)(v43 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 32);
      v30(v10, v28 + v29 * v23, v8);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(v45, v44, v46);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v31 = -1 << *(_BYTE *)(v13 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v18 + 8 * v33);
        }
        while (v37 == -1);
        v21 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(*(_QWORD *)(v13 + 48) + v21 * v29, v10, v8);
      ++*(_QWORD *)(v13 + 16);
      v11 = v27;
    }
  }
  result = swift_release();
  *v7 = v13;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet._unsafeInsertNew(_:)(Swift::UInt8 *a1, uint64_t a2)
{
  int *v4;
  Swift::UInt8 *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  v4 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  v5 = &a1[v4[5]];
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v6 = (uint64_t *)&v5[*(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20)];
  v7 = *v6;
  v8 = v6[1];
  outlined copy of Data._Representation(*v6, v8);
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v8);
  Hasher._combine(_:)(*(_DWORD *)&a1[v4[6]]);
  Hasher._combine(_:)(*(_WORD *)&a1[v4[7]]);
  Hasher._combine(_:)(*(_WORD *)&a1[v4[8]]);
  v9 = (uint64_t *)&a1[v4[9]];
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  Data.hash(into:)();
  outlined consume of Data._Representation(v10, v11);
  Hasher._finalize()();
  v12 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
  result = outlined init with take of Participant((uint64_t)a1, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*((_QWORD *)v4 - 1) + 72) * v12, type metadata accessor for ReliableBroadcastPacket.Message);
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t type metadata accessor for TUConversationActivitySession()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversationActivitySession;
  if (!lazy cache variable for type metadata for TUConversationActivitySession)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  }
  return result;
}

void partial apply for closure #2 in InternalGroupSessionProvider.groupSessions(for:)(id *a1@<X0>, void (**a2)(char *, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  closure #2 in InternalGroupSessionProvider.groupSessions(for:)(a1, *(void **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeSet.filter(_:)((_QWORD *)((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    v7 = v6;
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v8, v4, v2);
    v7 = v9;
    swift_release();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
  }
  return v7;
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessionsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.topicManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.audioSessionAssertionManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessionTable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.prepareForActivation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 48) + *(_QWORD *)(a4 + 48));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InternalGroupSessionProvider.begin(activity:request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 56) + *(_QWORD *)(a4 + 56));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InternalGroupSessionProvider.end(activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 64) + *(_QWORD *)(a3 + 64));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(presenceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 40) + *(_QWORD *)(a4 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(presenceSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 48) + *(_QWORD *)(a3 + 48));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v9(a1, a2, a3);
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v20;

  v20 = 0;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_20:
    v16 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    if (objc_msgSend(v16, sel_state))
    {
      v17 = objc_msgSend(v16, sel_state);

      if (v17 == (id)1)
        goto LABEL_5;
    }
    else
    {

LABEL_5:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v20++, 1))
        goto LABEL_26;
    }
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v13 >= v9)
    goto LABEL_23;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v4;
  if (v14)
    goto LABEL_19;
  v4 = v13 + 1;
  if (v13 + 1 >= v9)
    goto LABEL_23;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_19:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_20;
  }
  v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_23:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v20, a3);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      goto LABEL_23;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t PresentationSpatialTemplate.customOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[40];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  outlined init with copy of SpatialTemplateConfiguration(v1 + 8, (uint64_t)v12);
  outlined init with take of SpatialTemplateRole?((uint64_t)v12, (uint64_t)v13);
  v3 = v14;
  if (v14)
  {
    v4 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    v7 = v6;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
    if (v5 == 0x65746E6573657270 && v7 == 0xE900000000000072)
    {
      result = swift_bridgeObjectRelease();
      v11 = 1;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      v11 = v9 & 1;
    }
  }
  else
  {
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for SpatialTemplateRole?);
    v11 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t PresentationSpatialTemplate.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresentationSpatialTemplate.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SpatialTemplateConfiguration(v1 + 8, a1);
}

uint64_t PresentationSpatialTemplate.Role.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresentationSpatialTemplate.Role.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void *static PresentationSpatialTemplate.Role.allCases.getter()
{
  return &outlined read-only object #0 of static PresentationSpatialTemplate.Role.allCases.getter;
}

uint64_t PresentationSpatialTemplate.Role.rawValue.getter()
{
  return 0x65746E6573657270;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationSpatialTemplate.Role()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationSpatialTemplate.Role()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationSpatialTemplate.Role()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationSpatialTemplate.Role@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationSpatialTemplate.Role, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PresentationSpatialTemplate.Role(_QWORD *a1@<X8>)
{
  *a1 = 0x65746E6573657270;
  a1[1] = 0xE900000000000072;
}

uint64_t outlined init with copy of SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SpatialTemplateConfiguration(a2, a1);
  return a2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PresentationSpatialTemplate.Role(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PresentationSpatialTemplate.Role;
}

BOOL static PresentationSpatialTemplate.PresenterRoleBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PresentationSpatialTemplate.PresenterRoleBehavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PresentationSpatialTemplate.PresenterRoleBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t PresentationSpatialTemplate.init(presenterRoleBehavior:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  ValueMetadata *v4;
  unint64_t result;

  v3 = *a1;
  *a2 = MEMORY[0x1E0DEE9D8];
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    result = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
  else
  {
    v4 = &type metadata for PresentationSpatialTemplate.Role;
    result = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  }
  a2[4] = v4;
  a2[5] = result;
  return result;
}

uint64_t static PresentationSpatialTemplate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static SpatialTemplateConfiguration.== infix(_:_:)(a1 + 8, a2 + 8);
}

uint64_t PresentationSpatialTemplate.hash(into:)()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationSpatialTemplate.Role, &type metadata for PresentationSpatialTemplate.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationSpatialTemplate.Role, &type metadata for PresentationSpatialTemplate.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationSpatialTemplate.Role, &type metadata for PresentationSpatialTemplate.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

Swift::Int PresentationSpatialTemplate.hashValue.getter()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for SpatialTemplate.configuration.getter in conformance PresentationSpatialTemplate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SpatialTemplateConfiguration(v1 + 8, a1);
}

uint64_t protocol witness for SpatialTemplate.elements.getter in conformance PresentationSpatialTemplate()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationSpatialTemplate()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationSpatialTemplate()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  return specialized static SpatialTemplateConfiguration.== infix(_:_:)(a1 + 8, a2 + 8);
}

uint64_t one-time initialization function for presentation()
{
  uint64_t result;
  _QWORD v1[6];

  v1[0] = MEMORY[0x1E0DEE9D8];
  v1[4] = &type metadata for PresentationSpatialTemplate.Role;
  v1[5] = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  result = outlined destroy of PresentationSpatialTemplate((uint64_t)v1);
  static SpatialTemplatePreference.presentation = 0;
  word_1EE5D8488 = 1025;
  return result;
}

uint64_t static SpatialTemplatePreference.presentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  if (one-time initialization token for presentation != -1)
    swift_once();
  result = swift_beginAccess();
  v3 = word_1EE5D8488;
  v4 = HIBYTE(word_1EE5D8488);
  *(_QWORD *)a1 = static SpatialTemplatePreference.presentation;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  return result;
}

uint64_t static SpatialTemplatePreference.presentation.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 9);
  if (one-time initialization token for presentation != -1)
    swift_once();
  result = swift_beginAccess();
  static SpatialTemplatePreference.presentation = v1;
  LOBYTE(word_1EE5D8488) = v2;
  HIBYTE(word_1EE5D8488) = v3;
  return result;
}

uint64_t (*static SpatialTemplatePreference.presentation.modify())()
{
  if (one-time initialization token for presentation != -1)
    swift_once();
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

unint64_t lazy protocol witness table accessor for type [PresentationSpatialTemplate.Role] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PresentationSpatialTemplate.Role]);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A]);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PresentationSpatialTemplate.Role(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationSpatialTemplate.PresenterRoleBehavior, &type metadata for PresentationSpatialTemplate.PresenterRoleBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationSpatialTemplate, &type metadata for PresentationSpatialTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate);
  }
  return result;
}

uint64_t destroy for PresentationSpatialTemplate(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
    return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  return result;
}

uint64_t initializeWithCopy for PresentationSpatialTemplate(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[4];
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationSpatialTemplate(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationSpatialTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate()
{
  return &type metadata for PresentationSpatialTemplate;
}

uint64_t storeEnumTagSinglePayload for PresentationSpatialTemplate.Role(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0E6E1CC + 4 * asc_1A0F12300[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0E6E1EC + 4 * byte_1A0F12305[v4]))();
}

_BYTE *sub_1A0E6E1CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0E6E1EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E6E1F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E6E1FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E6E204(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E6E20C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate.Role()
{
  return &type metadata for PresentationSpatialTemplate.Role;
}

uint64_t storeEnumTagSinglePayload for PresentationSpatialTemplate.PresenterRoleBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E6E274 + 4 * byte_1A0F1230F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E6E2A8 + 4 * byte_1A0F1230A[v4]))();
}

uint64_t sub_1A0E6E2A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E6E2B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E6E2B8);
  return result;
}

uint64_t sub_1A0E6E2C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E6E2CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E6E2D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E6E2D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate.PresenterRoleBehavior()
{
  return &type metadata for PresentationSpatialTemplate.PresenterRoleBehavior;
}

void CGImageRef.thumbnailImageData(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Thumb;
  CGImage *v9;
  __CFData *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  CGImageDestination *v15;
  CGImageDestination *v16;
  uint64_t v17;
  __CFData *v18;
  id v19;
  __CFData *v20;
  id v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __CFData *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  __CFData *v54;
  id v55;
  uint64_t v56;
  int v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1;
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Thumb = CGImageCreateThumb();
  if (Thumb)
  {
    v9 = (CGImage *)Thumb;
    v10 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
    static UTType.jpeg.getter();
    v11 = UTType.identifier.getter();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v14 = (__CFString *)MEMORY[0x1A1B048B4](v11, v13);
    swift_bridgeObjectRelease();
    v15 = CGImageDestinationCreateWithData(v10, v14, 1uLL, 0);
    if (v15)
    {
      v16 = v15;
      CGImageDestinationAddImage(v15, v9, 0);
      if (CGImageDestinationFinalize(v16))
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Log.default);
        v18 = v10;
        v19 = v2;
        v20 = v18;
        v21 = v19;
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v22, (os_log_type_t)v23))
        {

          goto LABEL_28;
        }
        v55 = v21;
        v57 = v23;
        v58 = v22;
        v24 = swift_slowAlloc();
        v56 = swift_slowAlloc();
        v59 = a1;
        v60 = v56;
        *(_DWORD *)v24 = 136315650;
        v25 = String.init<A>(reflecting:)();
        v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        v27 = v20;
        v28 = NSData.startIndex.getter();
        v29 = NSData.endIndex.getter();
        v30 = NSData.startIndex.getter();
        v31 = NSData.endIndex.getter();
        if (v28 < v30 || v31 < v28)
        {
          __break(1u);
        }
        else
        {
          v32 = NSData.startIndex.getter();
          v33 = NSData.endIndex.getter();

          if (v29 >= v32 && v33 >= v29)
          {
            if (!__OFSUB__(v29, v28))
            {
              v59 = v29 - v28;
              v34 = String.init<A>(reflecting:)();
              v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v24 + 22) = 2080;
              v36 = v55;
              v59 = (uint64_t)v55;
              type metadata accessor for CGImageRef(0);
              v37 = v36;
              v38 = String.init<A>(reflecting:)();
              v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              v40 = v58;
              _os_log_impl(&dword_1A0DB3000, v58, (os_log_type_t)v57, "Generated image preview of size %s  %s bytes for %s", (uint8_t *)v24, 0x20u);
              v41 = v56;
              swift_arrayDestroy();
              MEMORY[0x1A1B05CC4](v41, -1, -1);
              MEMORY[0x1A1B05CC4](v24, -1, -1);

LABEL_28:
              v54 = v20;
              static Data._unconditionallyBridgeFromObjectiveC(_:)();

              return;
            }
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
        return;
      }
      if (one-time initialization token for default != -1)
        swift_once();
      v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Log.default);
      v51 = Logger.logObject.getter();
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        _os_log_impl(&dword_1A0DB3000, v51, v52, "Error finalizing thumbnail image", v53, 2u);
        MEMORY[0x1A1B05CC4](v53, -1, -1);

        return;
      }

    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Log.default);
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_1A0DB3000, v47, v48, "Error creating thumbnail image destination ref", v49, 2u);
        MEMORY[0x1A1B05CC4](v49, -1, -1);

        return;
      }

    }
    return;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Log.default);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_1A0DB3000, v43, v44, "Error creating thumbnail image", v45, 2u);
    MEMORY[0x1A1B05CC4](v45, -1, -1);
  }

}

CGImageRef specialized static CGImageRef.thumbnailImage(from:)()
{
  const __CFData *isa;
  CGDataProvider *v1;
  CGImageRef v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = CGDataProviderCreateWithCFData(isa);

  if (v1)
  {
    v2 = CGImageCreateWithJPEGDataProvider(v1, 0, 1, kCGRenderingIntentDefault);

  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to create CGDataProvider from dataBlob", v6, 2u);
      MEMORY[0x1A1B05CC4](v6, -1, -1);
    }

    return 0;
  }
  return v2;
}

void GroupSessionMessenger.receive<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v22 = a4;
  v19[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  type metadata accessor for GroupSessionMessenger.MessageContext();
  v19[1] = swift_getTupleTypeMetadata2();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, MEMORY[0x1E0C95D90]);
  v8 = type metadata accessor for Publishers.CompactMap();
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - v9;
  v19[3] = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95708], v8);
  v11 = type metadata accessor for Publishers.HandleEvents();
  v20 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v19 - v12;
  v23 = static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a1, a1, a2, a3);
  v14 = *(_BYTE *)(v4 + 40);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_BYTE *)(v15 + 40) = v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = partial apply for closure #1 in GroupSessionMessenger.receive<A>(_:);
  v16[6] = v15;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C957C0], v11);
  v18 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
  GroupSessionMessenger.MessageStream.init(outputStream:)(v18, v22);
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupSessionMessenger.MessageContext;
  if (!type metadata singleton initialization cache for GroupSessionMessenger.MessageContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GroupSessionMessenger.send<A>(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  void (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[6];
  char v38;

  v6 = v5;
  v34 = a3;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v37[3] = v15;
  v37[4] = v16;
  v37[5] = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
  v19(boxed_opaque_existential_1, a1, a5);
  v38 = 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  v19((uint64_t *)v12, a1, a5);
  swift_bridgeObjectRetain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v32 = a4;
    v25 = v24;
    v36 = v24;
    *(_DWORD *)v23 = 136315394;
    swift_getDynamicType();
    v26 = _typeName(_:qualified:)();
    v33 = v6;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
    *(_WORD *)(v23 + 12) = 2080;
    v35 = v14;
    swift_bridgeObjectRetain();
    v28 = String.init<A>(reflecting:)();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v6 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v21, v22, "Sending message: %s to: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    v30 = v25;
    a4 = v32;
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    MEMORY[0x1A1B05CC4](v23, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);

    swift_bridgeObjectRelease_n();
  }
  v36 = v14;
  LOBYTE(v35) = *(_BYTE *)(v6 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v37, &v36, (char *)&v35, v34, a4);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v37);
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = specialized Dictionary._Variant.subscript.modify(v2, (uint64_t)v5);
  return AttachmentLedgerTopic.attachments.modify;
}

void (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15GroupActivities0C16SessionMessengerC14MessageWrapper33_7F6FED5A36F2E7FBC6D91B446E55DE7FLLV_s5NeverOAI_AF0G7ContextVAD15SendReliabilityOtTg5@<X0>(void (*a1)(_OWORD *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[3];
  unsigned __int8 v10;
  _OWORD v11[3];
  unsigned __int8 v12;

  outlined init with copy of URL?(v2, (uint64_t)v11, &demangling cache variable for type metadata for GroupSessionMessenger.MessageWrapper?);
  if (v12 == 255)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
  else
  {
    v9[0] = v11[0];
    v9[1] = v11[1];
    v9[2] = v11[2];
    v10 = v12;
    a1(v9);
    result = outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v9);
    if (!v3)
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
    }
  }
  return result;
}

void GroupSessionMessenger.deliveryMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  GroupSessionMessenger.init<A>(session:)(a1);
  return v2;
}

uint64_t GroupSessionMessenger.init<A>(session:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v4 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = &protocol witness table for GroupSession<A>;
  *(_BYTE *)(v2 + 40) = 0;
  return v2;
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)(uint64_t a1, char *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  GroupSessionMessenger.init<A>(session:deliveryMode:)(a1, a2);
  return v4;
}

uint64_t GroupSessionMessenger.init<A>(session:deliveryMode:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;

  v3 = v2;
  v5 = *a2;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v6 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = &protocol witness table for GroupSession<A>;
  *(_BYTE *)(v3 + 40) = v5;
  return v3;
}

uint64_t GroupSessionMessenger.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v5 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v5;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  return v4;
}

uint64_t GroupSessionMessenger.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v6 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = v6;
  *(_BYTE *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  return v3;
}

uint64_t GroupSessionMessenger.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t GroupSessionMessenger.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

BOOL static GroupSessionMessenger.DeliveryMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void GroupSessionMessenger.DeliveryMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

GroupActivities::SendReliability __swiftcall SendReliability.init(_:)(GroupActivities::SendReliability result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result;
  return result;
}

uint64_t GroupSessionMessenger.MessageContext.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t GroupSessionMessenger.MessageContext.source.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Participant(a1, v1);
}

uint64_t (*GroupSessionMessenger.MessageContext.source.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionMessenger.MessageContext.init(source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of Participant(a1, a2);
}

uint64_t GroupSessionMessenger.MessageWrapper.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v11[3];
  _OWORD v12[3];
  char v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupSessionMessenger.MessageWrapper.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined init with take of GroupSessionMessenger.MessageType(v11, (uint64_t)v12);
    v9 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = v12[2];
    *(_BYTE *)(a2 + 48) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  return 0x6567617373656DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupSessionMessenger.MessageWrapper.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GroupSessionMessenger.MessageWrapper.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupSessionMessenger.MessageWrapper@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupSessionMessenger.MessageWrapper.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupSessionMessenger.MessageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupSessionMessenger.MessageWrapper.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionMessenger.MessageType.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GroupSessionMessenger.MessageType.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupSessionMessenger.MessageType.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 100;
  if (*v1)
    v2 = 116;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 116;
  else
    return 100;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupSessionMessenger.MessageType.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupSessionMessenger.MessageType.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupSessionMessenger.MessageType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v16;
  __int128 v17[3];
  char v18;
  __int128 v19[3];
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupSessionMessenger.MessageType.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = *(_QWORD *)(KeyedDecodingContainer.allKeys.getter() + 16);
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      v10 = KeyedDecodingContainer.allKeys.getter();
      if (*(_QWORD *)(v10 + 16))
      {
        v11 = *(_BYTE *)(v10 + 32);
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
        {
          LOBYTE(v16) = 1;
          lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v18 = 1;
LABEL_11:
          outlined init with take of GroupSessionMessenger.MessageType(v17, (uint64_t)v19);
          outlined init with take of GroupSessionMessenger.MessageType(v19, a2);
          return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v20 = 0;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v17[0] = v16;
      v18 = 0;
      goto LABEL_11;
    }
    v12 = type metadata accessor for DecodingError();
    swift_allocError();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v14 = &type metadata for GroupSessionMessenger.MessageType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0DEC450], v12);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t GroupSessionMessenger.MessageType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v9;
  uint64_t v10;
  char v11;
  _OWORD v12[3];
  _OWORD v13[3];
  char v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupSessionMessenger.MessageType.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GroupSessionMessenger.MessageType(v2, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v12[0] = v13[0];
    v12[1] = v13[1];
    v12[2] = v13[2];
    v11 = 1;
    lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of TypedPayloadBox((uint64_t)v12);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v9 = v13[0];
    v12[0] = v13[0];
    v11 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return outlined consume of Data._Representation(v9, *((unint64_t *)&v9 + 1));
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupSessionMessenger.MessageType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupSessionMessenger.MessageType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupSessionMessenger.MessageType(_QWORD *a1)
{
  return GroupSessionMessenger.MessageType.encode(to:)(a1);
}

void specialized GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  specialized GroupSessionMessenger.MessageStream.init(outputStream:)(a1, 0x6567617373654DLL, 0xE700000000000000, a2);
}

void specialized GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v13 = v12;
    *(_DWORD *)v11 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Creating message stream for message type: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  *a4 = a1;
}

void GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v5, v6, "Creating message stream for message type: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }

  *a2 = a1;
}

uint64_t GroupSessionMessenger.MessageStream.receive<A>(subscriber:)()
{
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  return AnyPublisher.receive<A>(subscriber:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance GroupSessionMessenger.MessageStream<A>()
{
  return GroupSessionMessenger.MessageStream.receive<A>(subscriber:)();
}

uint64_t GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v8 = *a2;
  v9 = *a3;
  v15 = MEMORY[0x1E0CB0338];
  result = tryLog<A>(_:_:function:line:)();
  v11 = v19;
  if (v19 >> 60 != 15)
  {
    v12 = v18;
    v13 = *(_QWORD *)(v5 + 24);
    v17 = v8;
    ObjectType = swift_getObjectType();
    v16 = v9;
    (*(void (**)(uint64_t, unint64_t, uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v19, &v17, &v16, a4, a5, ObjectType, v13, v15);
    return outlined consume of Data?(v12, v11);
  }
  return result;
}

uint64_t implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper();
  swift_retain();
  v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v5 = v4;
  result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v5;
  }
  return result;
}

uint64_t GroupSessionMessenger.send(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _DWORD *v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];
  char v20;

  v6 = v5;
  v11 = *a3;
  v19[0] = a1;
  v19[1] = a2;
  v20 = 0;
  outlined copy of Data._Representation(a1, a2);
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (_DWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    *v15 = 134218242;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(a1, a2);
  outlined consume of Data._Representation(a1, a2);

  swift_bridgeObjectRelease_n();
  v18 = v11;
  LOBYTE(v17) = *(_BYTE *)(v6 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v19, &v18, (char *)&v17, a4, a5);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v19);
}

uint64_t specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(ValueMetadata *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ObjectType;
  uint64_t v67;
  _QWORD v68[5];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _UNKNOWN **v72;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1)
    swift_once();
  Lock.lock()();
  ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v12 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((_QWORD *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(v12[7] + 24 * v13 + 16);
    swift_endAccess();
    v16 = &type metadata for PlaybackSyncer.Message;
    v17 = swift_conformsToProtocol2();
    if (v17)
      v18 = v17;
    else
      v18 = 0;
    if (!v17)
      v16 = 0;
    if (v16)
    {
      v19 = *(uint64_t (**)(ValueMetadata *, uint64_t))(v18 + 8);
      swift_retain();
      swift_retain();
      v20 = v19(v16, v18);
      v22 = v21;
    }
    else
    {
      v20 = 0xD000000000000026;
      swift_retain();
      swift_retain();
      v22 = 0x80000001A0F1B080;
    }
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoder<PlaybackSyncer.Message>);
    v71 = v48;
    v72 = &protocol witness table for TypedPayloadDecoder<A>;
    v49 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
    v69 = v49;
    if (v48)
    {
      v50 = v49;
      outlined init with take of TypedPayloadDecoding(&v70, (uint64_t)v68);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v67 = v50;
      v69 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v68, v20, v22, isUniquelyReferenced_nonNull_native);
      v69 = v67;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v70, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      specialized Dictionary._Variant.removeValue(forKey:)(v20, v22, (uint64_t)v68);
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v68, &demangling cache variable for type metadata for TypedPayloadDecoding?);
    }
    PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v69);
    if (one-time initialization token for default != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Log.default);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v56 = swift_slowAlloc();
      *(_QWORD *)&v70 = v56;
      *(_DWORD *)v55 = 136315138;
      v68[0] = a1;
      v57 = String.init<A>(reflecting:)();
      v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v53, v54, "Returning stored message stream for session %s", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v56, -1, -1);
      MEMORY[0x1A1B05CC4](v55, -1, -1);
    }
    swift_release();

  }
  else
  {
    v60 = a2;
    swift_endAccess();
    if (one-time initialization token for default != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    v26 = os_log_type_enabled(v24, v25);
    v64 = v9;
    v65 = v8;
    v62 = v5;
    v63 = v11;
    v61 = v7;
    if (v26)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      *(_QWORD *)&v70 = v28;
      *(_DWORD *)v27 = 136315138;
      v68[0] = a1;
      v29 = String.init<A>(reflecting:)();
      v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v24, v25, "Creating new message stream for session %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v28, -1, -1);
      MEMORY[0x1A1B05CC4](v27, -1, -1);
    }

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    v31 = PropertyListDecoder.init()();
    v32 = swift_conformsToProtocol2();
    if (v32)
      v33 = v32;
    else
      v33 = 0;
    if (v32)
      v34 = &type metadata for PlaybackSyncer.Message;
    else
      v34 = 0;
    if (v34)
    {
      v35 = (*(uint64_t (**)(void))(v33 + 8))();
      v37 = v36;
    }
    else
    {
      v35 = 0xD000000000000026;
      v37 = 0x80000001A0F1B080;
    }
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoder<PlaybackSyncer.Message>);
    v71 = v38;
    v72 = &protocol witness table for TypedPayloadDecoder<A>;
    v39 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
    v69 = v39;
    if (v38)
    {
      v40 = v39;
      outlined init with take of TypedPayloadDecoding(&v70, (uint64_t)v68);
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v67 = v40;
      v69 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v68, v35, v37, v41);
      v69 = v67;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v70, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      specialized Dictionary._Variant.removeValue(forKey:)(v35, v37, (uint64_t)v68);
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v68, &demangling cache variable for type metadata for TypedPayloadDecoding?);
    }
    PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v69);
    *(_QWORD *)&v70 = (*(uint64_t (**)(uint64_t))(v60 + 8))(ObjectType);
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(_QWORD *)(v42 + 24) = v31;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>, MEMORY[0x1E0C95D90]);
    v43 = v61;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>, MEMORY[0x1E0C95708]);
    v44 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v4);
    *(_QWORD *)&v70 = v44;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>, MEMORY[0x1E0C95AA0]);
    v45 = v63;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>, MEMORY[0x1E0C957C0]);
    v46 = v65;
    v15 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v46);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    v47 = swift_isUniquelyReferenced_nonNull_native();
    v68[0] = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v31, v15, a1, v47);
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)v68[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v15;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  void *v45;
  uint64_t v46[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1)
    swift_once();
  Lock.lock()();
  ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v12 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((_QWORD *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(v12[7] + 24 * v13 + 16);
    swift_endAccess();
    v16 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v16 != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v45 = (void *)a1;
      v46[0] = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = String.init<A>(reflecting:)();
      v45 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Returning stored message stream for session %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v21, -1, -1);
      MEMORY[0x1A1B05CC4](v20, -1, -1);
    }
    swift_release();

  }
  else
  {
    v39 = a2;
    swift_endAccess();
    if (one-time initialization token for default != -1)
      swift_once();
    v40 = v5;
    v41 = v11;
    v42 = v9;
    v43 = v8;
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.default);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v45 = (void *)a1;
      v46[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = String.init<A>(reflecting:)();
      v45 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v25, v26, "Creating new message stream for session %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v28, -1, -1);
      MEMORY[0x1A1B05CC4](v27, -1, -1);
    }

    v31 = ObjectType;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    v32 = PropertyListDecoder.init()();
    v46[0] = (*(uint64_t (**)(uint64_t))(v39 + 8))(v31);
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(_QWORD *)(v33 + 24) = v32;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>, MEMORY[0x1E0C95D90]);
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>, MEMORY[0x1E0C95708]);
    v34 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v4);
    v46[0] = v34;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>, MEMORY[0x1E0C95AA0]);
    v35 = v41;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>, MEMORY[0x1E0C957C0]);
    v36 = v43;
    v15 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v36);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v32, v15, a1, isUniquelyReferenced_nonNull_native);
    static GroupSessionMessenger.MessageStreamStore.contents = v45;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v15;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ObjectType;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[5];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _UNKNOWN **v80;

  v70 = a4;
  v71 = a6;
  v73 = a2;
  v74 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1)
    swift_once();
  Lock.lock()();
  ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v16 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((_QWORD *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(v16[7] + 24 * v17 + 16);
    swift_endAccess();
    v20 = MEMORY[0x1E0CB0338];
    swift_retain();
    swift_retain();
    if (v74 != v20)
    {
      v21 = v70;
      v22 = v71;
      v23 = static Encodable.messageIdentifier.getter(v70);
      v25 = v24;
      TypedPayloadDecoder.init()(v21, a5, v22);
      v26 = type metadata accessor for TypedPayloadDecoder(0, v21, a5, v22);
      v79 = v26;
      v80 = &protocol witness table for TypedPayloadDecoder<A>;
      v27 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
      v77 = v27;
      if (v26)
      {
        v28 = v27;
        outlined init with take of TypedPayloadDecoding(&v78, (uint64_t)v76);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v75 = v28;
        v77 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v76, v23, v25, isUniquelyReferenced_nonNull_native);
        v77 = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v78, &demangling cache variable for type metadata for TypedPayloadDecoding?);
        specialized Dictionary._Variant.removeValue(forKey:)(v23, v25, (uint64_t)v76);
        swift_bridgeObjectRelease();
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v76, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      }
      PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v77);
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Log.default);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      *(_QWORD *)&v78 = v60;
      *(_DWORD *)v59 = 136315138;
      v76[0] = a1;
      v61 = String.init<A>(reflecting:)();
      v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v57, v58, "Returning stored message stream for session %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v60, -1, -1);
      MEMORY[0x1A1B05CC4](v59, -1, -1);
    }
    swift_release();

  }
  else
  {
    v65 = a5;
    swift_endAccess();
    if (one-time initialization token for default != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.default);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v68 = v15;
    v69 = v13;
    v66 = v11;
    v67 = v9;
    if (v33)
    {
      v34 = swift_slowAlloc();
      v64 = v8;
      v35 = (uint8_t *)v34;
      v36 = swift_slowAlloc();
      *(_QWORD *)&v78 = v36;
      *(_DWORD *)v35 = 136315138;
      v76[0] = a1;
      v37 = String.init<A>(reflecting:)();
      v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v31, v32, "Creating new message stream for session %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v36, -1, -1);
      v39 = v35;
      v8 = v64;
      MEMORY[0x1A1B05CC4](v39, -1, -1);
    }

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    v40 = PropertyListDecoder.init()();
    if (v74 != MEMORY[0x1E0CB0338])
    {
      v42 = v70;
      v41 = v71;
      v43 = static Encodable.messageIdentifier.getter(v70);
      v45 = v44;
      v46 = v65;
      TypedPayloadDecoder.init()(v42, v65, v41);
      v47 = type metadata accessor for TypedPayloadDecoder(0, v42, v46, v41);
      v79 = v47;
      v80 = &protocol witness table for TypedPayloadDecoder<A>;
      v48 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
      v77 = v48;
      if (v47)
      {
        v49 = v48;
        outlined init with take of TypedPayloadDecoding(&v78, (uint64_t)v76);
        v50 = swift_isUniquelyReferenced_nonNull_native();
        v75 = v49;
        v77 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v76, v43, v45, v50);
        v77 = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v78, &demangling cache variable for type metadata for TypedPayloadDecoding?);
        specialized Dictionary._Variant.removeValue(forKey:)(v43, v45, (uint64_t)v76);
        swift_bridgeObjectRelease();
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v76, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      }
      PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v77);
    }
    *(_QWORD *)&v78 = (*(uint64_t (**)(uint64_t))(v73 + 8))(ObjectType);
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(_QWORD *)(v51 + 24) = v40;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>, MEMORY[0x1E0C95D90]);
    v52 = v66;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>, MEMORY[0x1E0C95708]);
    v53 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v8);
    *(_QWORD *)&v78 = v53;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>, MEMORY[0x1E0C95AA0]);
    v54 = v68;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>, MEMORY[0x1E0C957C0]);
    v19 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v12);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v40, v19, a1, v55);
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)v76[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v19;
}

uint64_t closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[3];
  char v28;
  _OWORD v29[3];

  v26 = a8;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v25 - v17;
  if ((a4 & 1) == 0)
  {
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_6:
    type metadata accessor for GroupSessionMessenger.MessageContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v26, 1, 1, TupleTypeMetadata2);
  }
  if ((*a3 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v27);
  if ((v28 & 1) != 0)
  {
    v29[0] = v27[0];
    v29[1] = v27[1];
    v29[2] = v27[2];
    v19 = TypedPayloadBox.unbox<A>(as:)(a5, (uint64_t)v18);
    MEMORY[0x1E0C80A78](v19);
    *(&v25 - 4) = a5;
    *(&v25 - 3) = a6;
    *(&v25 - 2) = a7;
    *(&v25 - 1) = a2;
    type metadata accessor for GroupSessionMessenger.MessageContext();
    v20 = swift_getTupleTypeMetadata2();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:), (uint64_t)(&v25 - 6), MEMORY[0x1E0DEDCE8], v20, v21, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return outlined destroy of TypedPayloadBox((uint64_t)v29);
  }
  else
  {
    outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v27);
    type metadata accessor for GroupSessionMessenger.MessageContext();
    v24 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v26, 1, 1, v24);
  }
}

uint64_t sub_1A0E722FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, a2, a3, *(_BYTE *)(v4 + 40), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

uint64_t closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  type metadata accessor for GroupSessionMessenger.MessageContext();
  v8 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a1, a3);
  return outlined init with copy of Participant(a2, v8, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
}

uint64_t sub_1A0E723BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed GroupSessionMessenger.MessageWrapper, @in_guaranteed GroupSessionMessenger.MessageContext, @in_guaranteed SendReliability) -> (@out (A, GroupSessionMessenger.MessageContext)?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

void closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  type metadata accessor for GroupSessionMessenger.MessageContext();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  v12 = *(int *)(TupleTypeMetadata2 + 48);
  v13 = (uint64_t)&v10[v12];
  v14 = a1 + v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v10, a1, a2);
  outlined init with copy of Participant(v14, v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, TupleTypeMetadata2);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v22 = v18;
    *(_DWORD *)v17 = 136315138;
    swift_getDynamicType();
    v19 = _typeName(_:qualified:)();
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
    _os_log_impl(&dword_1A0DB3000, v15, v16, "Receiving message: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    MEMORY[0x1A1B05CC4](v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
  }

}

uint64_t sub_1A0E726A0()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in GroupSessionMessenger.receive<A>(_:)(a1, *(_QWORD *)(v1 + 16));
}

void GroupSessionMessenger.receive(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14[2];

  v14[0] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = (_QWORD *)specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  v10 = *(_BYTE *)(v1 + 40);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in GroupSessionMessenger.receive(_:);
  *(_QWORD *)(v12 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, MEMORY[0x1E0C95D90]);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>, MEMORY[0x1E0C95708]);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>>, MEMORY[0x1E0C957C0]);
  v13 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized GroupSessionMessenger.MessageStream.init(outputStream:)(v13, 1635017028, 0xE400000000000000, v14[0]);
}

uint64_t closure #1 in GroupSessionMessenger.receive(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  char v15;

  if ((a4 & 1) == 0)
  {
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a5, 1, 1, v9);
  }
  if ((*a3 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v14);
  if (v15 == 1)
  {
    outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v14);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a5, 1, 1, v7);
  }
  else
  {
    v10 = v14[0];
    v11 = v14[1];
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    v13 = (uint64_t)a5 + *(int *)(v12 + 48);
    *a5 = v10;
    a5[1] = v11;
    outlined init with copy of Participant(a2, v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a5, 0, 1, v12);
  }
}

void closure #2 in GroupSessionMessenger.receive(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v23 - v7;
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (uint64_t *)((char *)&v23 - v10);
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v23 - v12);
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  v15 = *(int *)(v2 + 48);
  v16 = (uint64_t)a1 + v15;
  v18 = *a1;
  v17 = a1[1];
  *v13 = v18;
  v13[1] = v17;
  outlined init with copy of Participant(v16, (uint64_t)v13 + v15, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
  outlined init with copy of URL?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  outlined init with take of (Data, GroupSessionMessenger.MessageContext)((uint64_t)v13, (uint64_t)v8);
  outlined copy of Data._Representation(v18, v17);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    *(_DWORD *)swift_slowAlloc() = 134217984;
    v21 = *(int *)(v2 + 48);
    v22 = v11[1];
    *v5 = *v11;
    v5[1] = v22;
    outlined init with copy of Participant((uint64_t)v11 + v21, (uint64_t)v5 + v21, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
    __asm { BR              X10 }
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));

}

void *one-time initialization function for contents()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static GroupSessionMessenger.MessageStreamStore.contents = result;
  return result;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.contentsCount.getter()
{
  uint64_t v1;

  if (one-time initialization token for lock != -1)
    swift_once();
  Lock.withLock<A>(_:)();
  return v1;
}

uint64_t *GroupSessionMessenger.MessageStreamStore.lock.unsafeMutableAddressor()
{
  if (one-time initialization token for lock != -1)
    swift_once();
  return &static GroupSessionMessenger.MessageStreamStore.lock;
}

uint64_t closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for contents != -1)
    swift_once();
  result = swift_beginAccess();
  *a1 = *((_QWORD *)static GroupSessionMessenger.MessageStreamStore.contents + 2);
  return result;
}

uint64_t one-time initialization function for lock()
{
  uint64_t result;

  type metadata accessor for Lock();
  swift_allocObject();
  result = Lock.init()();
  static GroupSessionMessenger.MessageStreamStore.lock = result;
  return result;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.lock.getter()
{
  if (one-time initialization token for lock != -1)
    swift_once();
  return swift_retain();
}

unint64_t PropertyListDecoder.messageDecodersByMessageIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;

  v0 = type metadata accessor for CodingUserInfoKey();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for typedPayloadDecoderMap != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  v5 = dispatch thunk of PropertyListDecoder.userInfo.getter();
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v10);
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (*((_QWORD *)&v11 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
    if ((swift_dynamicCast() & 1) != 0)
      return v9[1];
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t PropertyListDecoder.messageDecodersByMessageIdentifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  uint64_t v25[4];

  v2 = v1;
  v4 = type metadata accessor for CodingUserInfoKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v23 = v2;
    v11 = swift_slowAlloc();
    v22 = v5;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    v25[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v21[1] = v12 + 4;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoding);
    v14 = Dictionary.description.getter();
    v16 = v15;
    swift_bridgeObjectRelease();
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Registering new typed payload decoding map: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    v17 = v12;
    v5 = v22;
    MEMORY[0x1A1B05CC4](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for typedPayloadDecoderMap != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  v25[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
  v25[0] = a1;
  v19 = (uint64_t (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v25, (uint64_t)v7);
  return v19(v24, 0);
}

uint64_t receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  void *v22;
  uint64_t v23[4];
  void *v24;
  uint8_t *v25;

  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  v3 = specialized Dictionary.subscript.modify(v23, a1);
  if (v2[1])
  {
    if (__OFSUB__(*v2, 1))
    {
      __break(1u);
LABEL_19:
      swift_once();
LABEL_10:
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.default);
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v23[0] = v15;
        *(_DWORD *)v14 = 136315138;
        v25 = v14 + 4;
        v24 = (void *)a1;
        v16 = String.init<A>(reflecting:)();
        v24 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v12, v13, "Removing stored message stream for session %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v15, -1, -1);
        MEMORY[0x1A1B05CC4](v14, -1, -1);
      }

      swift_beginAccess();
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v19 & 1) != 0)
      {
        v20 = v18;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = static GroupSessionMessenger.MessageStreamStore.contents;
        v24 = static GroupSessionMessenger.MessageStreamStore.contents;
        static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v22 = v24;
        }
        specialized _NativeDictionary._delete(at:)(v20, (uint64_t)v22);
        static GroupSessionMessenger.MessageStreamStore.contents = v22;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      return swift_endAccess();
    }
    --*v2;
  }
  ((void (*)(uint64_t *, _QWORD))v3)(v23, 0);
  swift_endAccess();
  swift_beginAccess();
  v4 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((_QWORD *)static GroupSessionMessenger.MessageStreamStore.contents + 2))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(v4[7] + 24 * v5);
      v8 = *v7;
      v9 = v7[1];
      swift_endAccess();
      swift_retain();
      swift_retain();
      result = outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(v8, v9);
      if (v8)
        return result;
      if (one-time initialization token for default == -1)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  return swift_endAccess();
}

uint64_t closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[56];

  tryLog<A>(_:_:function:line:)();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15GroupActivities0C16SessionMessengerC14MessageWrapper33_7F6FED5A36F2E7FBC6D91B446E55DE7FLLV_s5NeverOAI_AF0G7ContextVAD15SendReliabilityOtTg5((void (*)(_OWORD *))partial apply for closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:), a1);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v3, &demangling cache variable for type metadata for GroupSessionMessenger.MessageWrapper?);
}

uint64_t closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  return Lock.withLock<A>(_:)();
}

void (*closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1))(_QWORD *a1)
{
  void (*result)(_QWORD *);
  _QWORD *v3;
  _QWORD v4[4];

  if (one-time initialization token for contents != -1)
    swift_once();
  swift_beginAccess();
  result = specialized Dictionary.subscript.modify(v4, a1);
  if (!v3[1])
    goto LABEL_6;
  if (!__OFADD__(*v3, 1))
  {
    ++*v3;
LABEL_6:
    ((void (*)(_QWORD *, _QWORD))result)(v4, 0);
    return (void (*)(_QWORD *))swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  return Lock.withLock<A>(_:)();
}

uint64_t outlined assign with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A0E739CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionMessenger.receive(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return closure #1 in GroupSessionMessenger.receive(_:)(a1, a2, a3, *(_BYTE *)(v4 + 16), a4);
}

uint64_t sub_1A0E739E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter(a1);
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.DeliveryMode, &type metadata for GroupSessionMessenger.DeliveryMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageReliability, &type metadata for GroupSessionMessenger.MessageReliability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability);
  }
  return result;
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return objc_opt_self();
}

uint64_t method lookup function for GroupSessionMessenger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init<A>(session:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init(transportSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.DeliveryMode()
{
  return &type metadata for GroupSessionMessenger.DeliveryMode;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageReliability()
{
  return &type metadata for GroupSessionMessenger.MessageReliability;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionMessenger.MessageContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for Participant();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GroupSessionMessenger.MessageContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for Participant();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for Participant();
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for Participant();
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t initializeWithTake for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v5 + 20)) = *(_OWORD *)(a2 + *(int *)(v5 + 20));
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for Participant();
  v6 = *(int *)(v5 + 20);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v5 + 24)) = *(_QWORD *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E73DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E73E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for GroupSessionMessenger.MessageContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSessionMessenger.MessageStream);
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageStreamStore()
{
  return &type metadata for GroupSessionMessenger.MessageStreamStore;
}

uint64_t destroy for GroupSessionMessenger.MessageWrapper(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  else
    return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_BYTE *)(a2 + 48);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 40) = v4;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v7);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
  }
  *(_BYTE *)(a1 + 48) = v3;
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of GroupSessionMessenger.MessageType(a1);
    v4 = *(_BYTE *)(a2 + 48);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(v7, v6);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v6;
    }
    *(_BYTE *)(a1 + 48) = v4;
  }
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of GroupSessionMessenger.MessageType(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageWrapper()
{
  return &type metadata for GroupSessionMessenger.MessageWrapper;
}

uint64_t destroy for GroupSessionMessenger.MessageType(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  else
    return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *((unsigned __int8 *)a2 + 48);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = a2[5];
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 40) = v4;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    v6 = 1;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    v6 = 0;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_BYTE *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      v7 = 1;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(v9, v8);
      v7 = 0;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 48) = v7;
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      LOBYTE(v5) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GroupSessionMessenger.MessageType(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 48);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for GroupSessionMessenger.MessageType(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageType()
{
  return &type metadata for GroupSessionMessenger.MessageType;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType.CodingKeys, &unk_1E44F6FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType.CodingKeys, &unk_1E44F6FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType.CodingKeys, &unk_1E44F6FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType.CodingKeys, &unk_1E44F6FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox, &type metadata for TypedPayloadBox);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox, &type metadata for TypedPayloadBox);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox);
  }
  return result;
}

uint64_t outlined init with take of GroupSessionMessenger.MessageType(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper.CodingKeys, &unk_1E44F7150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper.CodingKeys, &unk_1E44F7150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper.CodingKeys, &unk_1E44F7150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper.CodingKeys, &unk_1E44F7150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType, &type metadata for GroupSessionMessenger.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageType, &type metadata for GroupSessionMessenger.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType);
  }
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x68uLL);
  *a1 = v4;
  v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v4[10] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v7, a2, v5);
  v4[11] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[12] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[2] = a2;
  v8[3] = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((_BYTE *)v8 + 40) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = (uint64_t *)(*(_QWORD *)(*v4 + 56) + 16 * v11);
        v18 = *v17;
        v19 = v17[1];
LABEL_12:
        *v8 = v18;
        v8[1] = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v18 = 0;
      v19 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v8[4] = v20;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = (char *)malloc(0x38uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 3) = a2;
  *((_QWORD *)v8 + 4) = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[48] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 5) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*v4 + 56) + 24 * v11;
        v18 = *(_QWORD *)v17;
        v19 = *(_OWORD *)(v17 + 8);
LABEL_12:
        *(_QWORD *)v8 = v18;
        *(_OWORD *)(v8 + 8) = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v18 = 0;
      v19 = 0uLL;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      *((_QWORD *)v8 + 5) = v20;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[2]);
  outlined consume of SystemCoordinatorTable.Storage?(*v1, v1[1]);
  free(v1);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = *((_BYTE *)*a1 + 48);
  if (v3)
  {
    v6 = v1[5];
    v7 = *(_QWORD **)v1[4];
    if ((v5 & 1) != 0)
    {
      v8 = (uint64_t *)(v7[7] + 24 * v6);
      *v8 = v2;
      v8[1] = v3;
      v8[2] = v4;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v6, v1[3], v2, v3, v4, v7);
    }
  }
  else if (((*a1)[6] & 1) != 0)
  {
    specialized _NativeDictionary._delete(at:)(v1[5], *(_QWORD *)v1[4]);
  }
  v9 = *v1;
  v10 = v1[1];
  outlined copy of GroupSessionMessenger.MessageStreamStore.Storage?(v2, v3);
  outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(v9, v10);
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v19;

  v10 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v14 = a1[1];
  if (v14)
  {
    v16 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v17 = (uint64_t *)(v16[7] + 16 * a4);
      *v17 = v15;
      v17[1] = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)v13, v15, v14, v16);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of SystemCoordinatorTable.Storage?(v15, v14);
}

uint64_t outlined init with take of (Data, GroupSessionMessenger.MessageContext)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GroupSessionMessenger.MessageContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A0E74D10()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  return closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A0E74D28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  return closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A0E74D40()
{
  return swift_deallocObject();
}

uint64_t partial apply for receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  uint64_t v0;

  return receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  uint64_t v0;

  return closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of GroupSessionMessenger.MessageStreamStore.Storage?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void (*partial apply for closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)())(_QWORD *a1)
{
  uint64_t v0;

  return closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for implicit closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper();
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t partial apply for closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_BYTE *)(v2 + 24);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  v8 = a2 + *(int *)(v7 + 48);
  v9 = *(int *)(v7 + 64);
  outlined init with copy of GroupSessionMessenger.MessageWrapper(a1, a2);
  result = outlined init with copy of Participant(v5, v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  *(_BYTE *)(a2 + v9) = v6;
  return result;
}

uint64_t outlined init with copy of GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GroupSessionMessenger.MessageWrapper(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper, &type metadata for GroupSessionMessenger.MessageWrapper);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageWrapper, &type metadata for GroupSessionMessenger.MessageWrapper);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper);
  }
  return result;
}

uint64_t outlined copy of SystemCoordinatorTable.Storage?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1A0E74FF4()
{
  return swift_deallocObject();
}

uint64_t sub_1A0E75004()
{
  return swift_deallocObject();
}

uint64_t sub_1A0E75014()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @in_guaranteed Participant, @in_guaranteed SendReliability) -> (@out (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)?)(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, char *, char *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return v3(v4, v5, &a1[*(int *)(v6 + 48)], &a1[*(int *)(v6 + 64)]);
}

uint64_t sub_1A0E75088()
{
  return swift_deallocObject();
}

uint64_t sub_1A0E75098()
{
  return swift_deallocObject();
}

uint64_t sub_1A0E750A8()
{
  return swift_deallocObject();
}

uint64_t destroy for GroupSessionMessenger.MessageStreamStore.Storage()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupSessionMessenger.MessageStreamStore.Storage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for GroupSessionMessenger.MessageStreamStore.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageStreamStore.Storage()
{
  return &unk_1E44F72F0;
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0E752A0 + 4 * byte_1A0F12550[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0E752C0 + 4 * byte_1A0F12555[v4]))();
}

_BYTE *sub_1A0E752A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0E752C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E752C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E752D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E752D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E752E0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  return &unk_1E44F7150;
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.DeliveryMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E75348 + 4 * byte_1A0F1255F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E7537C + 4 * byte_1A0F1255A[v4]))();
}

uint64_t sub_1A0E7537C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E75384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E7538CLL);
  return result;
}

uint64_t sub_1A0E75398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E753A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E753A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E753AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageType.CodingKeys()
{
  return &unk_1E44F6FA0;
}

uint64_t closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)partial apply()
{
  return partial apply for closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)();
}

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, _QWORD *a2)
{
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(a1, a2, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t (*a5)(BOOL, uint64_t, uint64_t, uint64_t))
{
  os_unfair_lock_s *v10;
  uint64_t *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[4];
  __int128 v24;
  uint64_t v25;

  v10 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  outlined init with copy of URL?((uint64_t)(a2 + 4), (uint64_t)&v24, a3);
  if (!v25)
  {
    v11 = a2 + 3;
    swift_beginAccess();
    v12 = a2[3];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = a5(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
      *v11 = v12;
    }
    v15 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      v12 = a5(v14 > 1, v15 + 1, 1, v12);
      *v11 = v12;
    }
    *(_QWORD *)(v12 + 16) = v15 + 1;
    *(_QWORD *)(v12 + 8 * v15 + 32) = a1;
    swift_endAccess();
    swift_beginAccess();
    v16 = a2[9];
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      goto LABEL_12;
    if (v16 < 0)
    {
      __break(1u);
      return;
    }
    v17 = v16 + 1;
    if (__OFADD__(v16, 1))
LABEL_12:
      v17 = static Subscribers.Demand.unlimited.getter();
    a2[9] = v17;
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    return;
  }
  if (v25 == 1)
  {
    os_unfair_lock_unlock(v10);
    v23[0] = 0;
    outlined init with take of Date?((uint64_t)v23, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), a4);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(&v24, (uint64_t)v23);
    v18 = a2 + 3;
    swift_beginAccess();
    v19 = a2[3];
    v20 = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v19;
    if ((v20 & 1) == 0)
    {
      v19 = a5(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      *v18 = v19;
    }
    v22 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v19 + 24);
    if (v22 >= v21 >> 1)
    {
      v19 = a5(v21 > 1, v22 + 1, 1, v19);
      *v18 = v19;
    }
    *(_QWORD *)(v19 + 16) = v22 + 1;
    *(_QWORD *)(v19 + 8 * v22 + 32) = a1;
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  return a2(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t GroupSessionAttachmentManager.session.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionAttachmentManager.attachments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + 32))
  {
    v8 = *(_QWORD *)(v1 + 32);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionAttachmentManager.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher, MEMORY[0x1E0C96190]);
    v8 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + 32) = v8;
    swift_retain();
    swift_release();
  }
  *a1 = v8;
  return swift_retain();
}

uint64_t GroupSessionAttachmentManager.attachments.setter(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionAttachmentManager.Attachments.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionAttachmentManager.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher, MEMORY[0x1E0C96190]);
  v6 = Publisher.eraseToAnyPublisher()();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.attachments.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  GroupSessionAttachmentManager.attachments.getter(a1);
  return GroupSessionJournal.attachments.modify;
}

uint64_t GroupSessionAttachmentManager._attachments.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t GroupSessionAttachmentManager.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionAttachmentManager.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager_cancellables);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionAttachmentManager.cancellables.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionAttachmentManager.upload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[56] = a4;
  v5[57] = v4;
  v5[54] = a2;
  v5[55] = a3;
  v5[53] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  v7 = type metadata accessor for URL();
  v5[60] = v7;
  v5[61] = *(_QWORD *)(v7 - 8);
  v5[62] = swift_task_alloc();
  v8 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  v5[63] = v8;
  v5[64] = *(_QWORD *)(v8 - 8);
  v5[65] = swift_task_alloc();
  v5[66] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[67] = swift_task_alloc();
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  v9 = type metadata accessor for ResolvedTransferRepresentation();
  v5[70] = v9;
  v5[71] = *(_QWORD *)(v9 - 8);
  v5[72] = swift_task_alloc();
  v5[73] = swift_task_alloc();
  v5[74] = swift_task_alloc();
  v5[75] = swift_task_alloc();
  v5[76] = swift_task_alloc();
  v5[77] = swift_task_alloc();
  v10 = type metadata accessor for _TransferRepresentationInputs();
  v5[78] = v10;
  v5[79] = *(_QWORD *)(v10 - 8);
  v5[80] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[81] = AssociatedTypeWitness;
  v12 = type metadata accessor for _TransferRepresentationValue();
  v5[82] = v12;
  v5[83] = *(_QWORD *)(v12 - 8);
  v5[84] = swift_task_alloc();
  v13 = type metadata accessor for _TransferRepresentationOutputs();
  v5[85] = v13;
  v5[86] = *(_QWORD *)(v13 - 8);
  v5[87] = swift_task_alloc();
  v5[88] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[89] = swift_task_alloc();
  v5[90] = swift_task_alloc();
  v5[91] = swift_task_alloc();
  v14 = type metadata accessor for Optional();
  v5[92] = v14;
  v5[93] = *(_QWORD *)(v14 - 8);
  v5[94] = swift_task_alloc();
  v5[95] = *(_QWORD *)(a3 - 8);
  v5[96] = swift_task_alloc();
  v15 = type metadata accessor for UUID();
  v5[97] = v15;
  v5[98] = *(_QWORD *)(v15 - 8);
  v5[99] = swift_task_alloc();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionAttachmentManager.upload<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, _QWORD, uint64_t);
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v80;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  void (*v112)(uint64_t *, uint64_t, uint64_t);
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_log_type_t typea;
  os_log_type_t typeb[8];
  uint64_t type;
  uint64_t v123;
  uint64_t v124;
  os_log_type_t v125;
  os_log_t log;
  NSObject *loga;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[2];

  UUID.init()();
  if (one-time initialization token for ledger != -1)
    goto LABEL_34;
  while (1)
  {
    v1 = *(_QWORD *)(v0 + 808);
    v2 = *(_QWORD *)(v0 + 800);
    v3 = *(_QWORD *)(v0 + 784);
    v4 = *(_QWORD *)(v0 + 776);
    v5 = *(uint64_t **)(v0 + 768);
    v6 = *(_QWORD *)(v0 + 760);
    log = (os_log_t)(v0 + 440);
    v8 = *(_QWORD *)(v0 + 432);
    v7 = *(_QWORD *)(v0 + 440);
    v9 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 816) = v9;
    *(_QWORD *)(v0 + 824) = __swift_project_value_buffer(v9, (uint64_t)static Log.ledger);
    v10 = v7;
    v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
    v11(v5, v8, v10);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 832) = v12;
    v12(v2, v1, v4);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 800);
    v17 = *(_QWORD *)(v0 + 784);
    v18 = *(_QWORD *)(v0 + 776);
    v19 = *(_QWORD *)(v0 + 768);
    v20 = *(_QWORD *)(v0 + 760);
    v112 = v11;
    if (v15)
    {
      v21 = *(_QWORD *)(v0 + 752);
      v114 = *(_QWORD *)(v0 + 744);
      v116 = *(_QWORD *)(v0 + 736);
      v123 = *(_QWORD *)(v0 + 800);
      v22 = *(_QWORD *)(v0 + 440);
      v118 = *(_QWORD *)(v0 + 776);
      v23 = swift_slowAlloc();
      v131 = swift_slowAlloc();
      v134[0] = v131;
      *(_DWORD *)v23 = 136315394;
      v11((uint64_t *)v21, v19, v22);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v21, 0, 1, v22);
      v24 = >> prefix<A>(_:)(v21, v22);
      typea = v14;
      v26 = v25;
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v21, v116);
      *(_QWORD *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v22);
      *(_WORD *)(v23 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
      v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v29(v123, v118);
      _os_log_impl(&dword_1A0DB3000, v13, typea, "Received upload request for item: %s, using ID: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v131, -1, -1);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, Class))(v20 + 8))(v19, log->isa);
      v29 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v29(v16, v18);
    }

    v115 = v29;
    *(_QWORD *)(v0 + 840) = v29;
    v30 = *(_QWORD *)(v0 + 728);
    v31 = *(_QWORD *)(v0 + 720);
    v32 = *(_QWORD *)(v0 + 704);
    v33 = *(_QWORD *)(v0 + 696);
    v128 = *(_QWORD *)(v0 + 688);
    v132 = *(_QWORD *)(v0 + 680);
    v34 = *(_QWORD *)(v0 + 672);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 664);
    v124 = *(_QWORD *)(v0 + 656);
    v35 = *(_QWORD *)(v0 + 648);
    v36 = *(_QWORD *)(v0 + 640);
    v117 = *(_QWORD *)(v0 + 632);
    v119 = *(_QWORD *)(v0 + 624);
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v113(v31, v30, v35);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v36, v119);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)typeb + 8))(v34, v124);
    v37 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v33, v132);
    v133 = v0;
    v129 = *(_QWORD *)(v37 + 16);
    if (!v129)
      break;
    v38 = 0;
    v39 = *(_QWORD *)(v0 + 568);
    v40 = MEMORY[0x1E0DEE9D8];
    v41 = (_QWORD *)v0;
    while (v38 < *(_QWORD *)(v37 + 16))
    {
      v42 = v41[77];
      v43 = v41[75];
      v44 = v41[70];
      v45 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v46 = *(_QWORD *)(v39 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v39 + 16))(v42, v37 + v45 + v46 * v38, v44);
      v0 = *(_QWORD *)(v39 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v0)(v43, v42, v44);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v134[0] = v40;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1);
        v40 = v134[0];
      }
      v49 = *(_QWORD *)(v40 + 16);
      v48 = *(_QWORD *)(v40 + 24);
      v41 = (_QWORD *)v133;
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        v40 = v134[0];
      }
      ++v38;
      v50 = *(_QWORD *)(v133 + 600);
      v51 = *(_QWORD *)(v133 + 560);
      *(_QWORD *)(v40 + 16) = v49 + 1;
      ((void (*)(unint64_t, uint64_t, uint64_t))v0)(v40 + v45 + v49 * v46, v50, v51);
      if (v129 == v38)
        goto LABEL_15;
    }
    __break(1u);
LABEL_34:
    swift_once();
  }
  v40 = MEMORY[0x1E0DEE9D8];
  v41 = (_QWORD *)v0;
LABEL_15:
  swift_bridgeObjectRelease();
  v52 = v41[71];
  v53 = v41[70];
  v54 = v41[69];
  if (*(_QWORD *)(v40 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v52 + 16))(v41[69], v40 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)), v41[70]);
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
    v55(v54, 0, 1, v53);
  }
  else
  {
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
    v55(v54, 1, 1, v53);
  }
  v56 = *(_QWORD *)(v133 + 568);
  v57 = *(_QWORD *)(v133 + 560);
  v58 = *(_QWORD *)(v133 + 552);
  swift_release();
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  if (v59(v58, 1, v57) == 1)
  {
    v60 = *(_QWORD *)(v133 + 728);
    v61 = *(_QWORD *)(v133 + 712);
    v62 = *(_QWORD *)(v133 + 648);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v133 + 552), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    v113(v61, v60, v62);
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.error.getter();
    v65 = os_log_type_enabled(v63, v64);
    v66 = *(_QWORD *)(v133 + 712);
    v67 = *(_QWORD *)(v133 + 704);
    v68 = *(_QWORD *)(v133 + 648);
    v69 = v133;
    if (v65)
    {
      v70 = (uint8_t *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      v134[0] = v71;
      *(_DWORD *)v70 = 136315138;
      swift_getDynamicType();
      v72 = _typeName(_:qualified:)();
      *(_QWORD *)(v133 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v69 = v133;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
      _os_log_impl(&dword_1A0DB3000, v63, v64, "Failed to find supported representation for strategy: %s", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v71, -1, -1);
      MEMORY[0x1A1B05CC4](v70, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v67 + 8))(*(_QWORD *)(v133 + 712), *(_QWORD *)(v133 + 648));
    }

    v82 = *(_QWORD *)(v69 + 808);
    v83 = *(_QWORD *)(v69 + 776);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v84 = 0;
    swift_willThrow();
    v115(v82, v83);
  }
  else
  {
    v74 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v133 + 568) + 32);
    v74(*(_QWORD *)(v133 + 608), *(_QWORD *)(v133 + 552), *(_QWORD *)(v133 + 560));
    v75 = ResolvedTransferRepresentation.exporting.getter();
    *(_QWORD *)(v133 + 848) = v75;
    *(_QWORD *)(v133 + 856) = v76;
    if (v75)
    {
      v77 = (int *)v75;
      v78 = *(_QWORD *)(v133 + 432);
      v130 = *(_OWORD *)&log->isa;
      *(_OWORD *)(v133 + 160) = *(_OWORD *)&log->isa;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v133 + 136));
      v112(boxed_opaque_existential_1, v78, v130);
      *(_QWORD *)&v130 = (char *)v77 + *v77;
      v80 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v133 + 864) = v80;
      *v80 = v133;
      v80[1] = GroupSessionAttachmentManager.upload<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v130)(v133 + 96, v133 + 136);
    }
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 + 568) + 16);
    v85(*(_QWORD *)(v133 + 592), *(_QWORD *)(v133 + 608), *(_QWORD *)(v133 + 560));
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.error.getter();
    v88 = os_log_type_enabled(v86, v87);
    v89 = *(_QWORD *)(v133 + 592);
    if (v88)
    {
      v125 = v87;
      loga = v86;
      v90 = *(_QWORD *)(v133 + 560);
      v91 = *(_QWORD *)(v133 + 544);
      v92 = *(_QWORD *)(v133 + 536);
      v93 = (uint8_t *)swift_slowAlloc();
      type = swift_slowAlloc();
      v134[0] = type;
      *(_DWORD *)v93 = 136315138;
      v85(v91, v89, v90);
      v55(v91, 0, 1, v90);
      outlined init with copy of URL?(v91, v92, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if (v59(v92, 1, v90) == 1)
      {
        v94 = 0xE300000000000000;
        v95 = 7104878;
      }
      else
      {
        v98 = *(_QWORD *)(v133 + 584);
        v99 = *(_QWORD *)(v133 + 576);
        v100 = *(_QWORD *)(v133 + 568);
        v101 = *(_QWORD *)(v133 + 560);
        v74(v98, *(_QWORD *)(v133 + 536), v101);
        v85(v99, v98, v101);
        v95 = String.init<A>(reflecting:)();
        v94 = v102;
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v101);
      }
      v97 = v133;
      v103 = *(_QWORD *)(v133 + 592);
      v104 = *(_QWORD *)(v133 + 568);
      v105 = *(_QWORD *)(v133 + 560);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v133 + 544), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(_QWORD *)(v133 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v94, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v96 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
      v96(v103, v105);
      _os_log_impl(&dword_1A0DB3000, loga, v125, "Failed to find exporting closure from representation: %s", v93, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](type, -1, -1);
      MEMORY[0x1A1B05CC4](v93, -1, -1);

    }
    else
    {
      v96 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v133 + 568) + 8);
      v96(*(_QWORD *)(v133 + 592), *(_QWORD *)(v133 + 560));

      v97 = v133;
    }
    v106 = *(_QWORD *)(v97 + 808);
    v107 = *(_QWORD *)(v97 + 776);
    v108 = *(_QWORD *)(v133 + 608);
    v109 = *(_QWORD *)(v133 + 560);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v110 = 0;
    swift_willThrow();
    v111 = v108;
    v69 = v133;
    v96(v111, v109);
    v115(v106, v107);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v69 + 704) + 8))(*(_QWORD *)(v69 + 728), *(_QWORD *)(v69 + 648));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v69 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 872) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 136);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v50;
  uint64_t ObjectType;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);
  uint64_t v63;

  outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransferableCurrency);
  v61 = v0 + 96;
  if (!swift_dynamicCast())
  {
    outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 256);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v63 = v27;
      *(_DWORD *)v26 = 136315138;
      outlined init with copy of AudioSessionAssertionManager(v0 + 256, v0 + 16);
      outlined init with copy of URL?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for TransferableCurrency?);
      if (*(_QWORD *)(v0 + 80))
      {
        outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v0 + 216);
        outlined init with copy of AudioSessionAssertionManager(v0 + 216, v0 + 296);
        v28 = String.init<A>(reflecting:)();
        v30 = v29;
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
      }
      else
      {
        v30 = 0xE300000000000000;
        v28 = 7104878;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for TransferableCurrency?);
      *(_QWORD *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 256);
      _os_log_impl(&dword_1A0DB3000, v24, v25, "Failed to convert %s to Data", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v27, -1, -1);
      MEMORY[0x1A1B05CC4](v26, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 256);
    }

    v41 = *(_QWORD *)(v0 + 848);
    v42 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v43 = *(_QWORD *)(v0 + 808);
    v44 = *(_QWORD *)(v0 + 776);
    v45 = *(_QWORD *)(v0 + 608);
    v46 = *(_QWORD *)(v0 + 568);
    v47 = *(_QWORD *)(v0 + 560);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v48 = 1;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v41);
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    v42(v43, v44);
    goto LABEL_17;
  }
  v57 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 776);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 488);
  v60 = *(_QWORD *)(v0 + 480);
  v9 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 880) = v11;
  *(_QWORD *)(v0 + 888) = v10;
  v1(v5, v2, v4);
  swift_weakInit();
  v12 = (uint64_t *)(v5 + *(int *)(v6 + 24));
  *v12 = v11;
  v12[1] = v10;
  outlined copy of Data._Representation(v11, v10);
  UUID.init()();
  UUID.uuidString.getter();
  v57(v3, v4);
  static URL.temporaryDirectory.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v60);
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v9, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v60) == 1)
  {
    v55 = v10;
    v58 = v11;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 472), &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(*(_QWORD *)(v0 + 816), (uint64_t)static Log.default);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1A0DB3000, v13, v14, "Failed to convert TemporaryDirectory to URL", v15, 2u);
      MEMORY[0x1A1B05CC4](v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 848);
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v53 = *(_QWORD *)(v0 + 808);
    v18 = *(_QWORD *)(v0 + 776);
    v19 = *(_QWORD *)(v0 + 608);
    v20 = *(_QWORD *)(v0 + 568);
    v21 = *(_QWORD *)(v0 + 560);
    v22 = *(_QWORD *)(v0 + 528);

    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *v23 = 2;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v16);
    outlined consume of Data._Representation(v58, v55);
    outlined destroy of Participant(v22, type metadata accessor for GroupSessionAttachmentManager.Attachment);
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v17(v53, v18);
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(v0 + 872);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 488) + 32))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
  Data.write(to:options:)();
  if (v31)
  {
    v32 = v10;
    v33 = v11;
    v56 = *(_QWORD *)(v0 + 808);
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    v54 = *(_QWORD *)(v0 + 776);
    v34 = *(_QWORD *)(v0 + 608);
    v35 = *(_QWORD *)(v0 + 568);
    v36 = *(_QWORD *)(v0 + 560);
    v37 = *(_QWORD *)(v0 + 528);
    v38 = *(_QWORD *)(v0 + 488);
    v39 = *(_QWORD *)(v0 + 496);
    v40 = *(_QWORD *)(v0 + 480);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 848));
    outlined consume of Data._Representation(v33, v32);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
    outlined destroy of Participant(v37, type metadata accessor for GroupSessionAttachmentManager.Attachment);
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    v59(v56, v54);
LABEL_17:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 704) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 648));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v50 = *(_QWORD *)(*(_QWORD *)(v0 + 456) + 24);
  ObjectType = swift_getObjectType();
  v62 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(**(int **)(v50 + 40)
                                                                                           + *(_QWORD *)(v50 + 40));
  v52 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 896) = v52;
  *v52 = v0;
  v52[1] = GroupSessionAttachmentManager.upload<A>(_:);
  return v62(*(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 496), 0, 0xF000000000000000, ObjectType, v50);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 904) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  void (*v3)(uint64_t, _QWORD);
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D15358]), sel_init);
  v2 = objc_msgSend(v1, sel_sharePlayAttachmentLedgerEnabled);

  if ((v2 & 1) == 0)
  {
    outlined init with copy of Participant(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 520), type metadata accessor for GroupSessionAttachmentManager.Attachment);
    swift_getKeyPath();
    swift_getKeyPath();
    v3 = (void (*)(uint64_t, _QWORD))static Published.subscript.modify();
    v5 = v4;
    v6 = *v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
      *v5 = v6;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v6);
      *v5 = v6;
    }
    v10 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(v6 + 16) = v9 + 1;
    outlined init with take of GroupSessionAttachmentManager.Attachment(v10, v6+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v9);
    v3(v0 + 336, 0);
    swift_release();
    swift_release();
  }
  v23 = *(_QWORD *)(v0 + 888);
  v22 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 808);
  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v28 = *(_QWORD *)(v0 + 728);
  v26 = *(_QWORD *)(v0 + 704);
  v24 = *(_QWORD *)(v0 + 776);
  v25 = *(_QWORD *)(v0 + 648);
  v13 = *(_QWORD *)(v0 + 608);
  v14 = *(_QWORD *)(v0 + 568);
  v15 = *(_QWORD *)(v0 + 560);
  v16 = *(_QWORD *)(v0 + 528);
  v18 = *(_QWORD *)(v0 + 488);
  v17 = *(_QWORD *)(v0 + 496);
  v19 = *(_QWORD *)(v0 + 480);
  v20 = *(_QWORD *)(v0 + 424);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 848));
  outlined consume of Data._Representation(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v27(v12, v24);
  outlined init with take of GroupSessionAttachmentManager.Attachment(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 776);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 560);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 848));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 704) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 648));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 808);
  v13 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
  v11 = *(_QWORD *)(v0 + 776);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 488);
  v8 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 480);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 848));
  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of Participant(v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v13(v12, v11);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 704) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 648));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionAttachmentManager.Attachment.init(id:ledger:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakInit();
  result = swift_release();
  v11 = (_QWORD *)(a4 + *(int *)(v9 + 24));
  *v11 = a2;
  v11[1] = a3;
  return result;
}

_QWORD *GroupSessionAttachmentManager.__allocating_init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = type metadata accessor for GroupSession(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v6 = (_QWORD *)swift_allocObject();
  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v6, v5, (uint64_t)&protocol witness table for GroupSession<A>);
}

_QWORD *GroupSessionAttachmentManager.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized GroupSessionAttachmentManager.__allocating_init(transportSession:)(a1, v2, ObjectType, a2);
}

_QWORD *GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v5 = *a1;
  swift_retain();
  v6 = specialized Sequence.compactMap<A>(_:)(v5, a2);
  result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t closure #1 in closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  NSObject *v21;
  int v22;
  _BOOL4 v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];

  v39 = a3;
  v37 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v32 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v35 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v32 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v32 - v17;
  if (one-time initialization token for ledger != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.ledger);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v38 = a1;
  v20(v18, a1, v10);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, (os_log_type_t)v22);
  v36 = (void (*)(uint64_t, uint64_t, uint64_t))v20;
  if (v23)
  {
    v34 = v22;
    v24 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v40[0] = v33;
    *(_DWORD *)v24 = 136315138;
    v20(v9, (uint64_t)v18, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    outlined init with copy of URL?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      v25 = 0xE300000000000000;
      v26 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v7, v10);
      v20(v35, (uint64_t)v16, v10);
      v26 = String.init<A>(reflecting:)();
      v25 = v27;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    v40[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    _os_log_impl(&dword_1A0DB3000, v21, (os_log_type_t)v34, "Received new attachment: %s", v24, 0xCu);
    v28 = v33;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v28, -1, -1);
    MEMORY[0x1A1B05CC4](v24, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }

  swift_beginAccess();
  swift_weakLoadStrong();
  v29 = v39;
  v36(v39, v38, v10);
  v30 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakInit();
  swift_release();
  *(_OWORD *)(v29 + *(int *)(v30 + 24)) = xmmword_1A0F12A70;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
}

uint64_t closure #2 in GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  NSObject *v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t result;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  void (*v56)(uint64_t *, _QWORD);
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81[4];
  uint64_t v82;

  v75 = a2;
  v68 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  v69 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v73 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v67 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v72 = (char *)&v63 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v74 = (uint64_t)&v63 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v63 - v15;
  v17 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v80 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v77 = (char *)&v63 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v70 = (char *)&v63 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v63 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v63 - v31;
  v76 = a4 + 16;
  if (one-time initialization token for ledger != -1)
    swift_once();
  v33 = type metadata accessor for Logger();
  v34 = __swift_project_value_buffer(v33, (uint64_t)static Log.ledger);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v79 = a1;
  v35(v32, a1, v20);
  outlined init with copy of Participant(a3, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v71 = v34;
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.default.getter();
  v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
  v66 = v30;
  v78 = v35;
  if (v38)
  {
    v64 = v37;
    v65 = v19;
    v39 = swift_slowAlloc();
    v63 = swift_slowAlloc();
    v81[0] = v63;
    *(_DWORD *)v39 = 136315394;
    v35(v16, (uint64_t)v32, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v20);
    v40 = v74;
    outlined init with copy of URL?((uint64_t)v16, v74, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v40, 1, v20) == 1)
    {
      v41 = 7104878;
      v42 = 0xE300000000000000;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v30, v40, v20);
      v35(v70, (uint64_t)v30, v20);
      v41 = String.init<A>(reflecting:)();
      v42 = v43;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, v20);
    *(_WORD *)(v39 + 12) = 2080;
    v44 = (uint64_t)v65;
    v45 = Participant.description.getter();
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v44, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    _os_log_impl(&dword_1A0DB3000, v36, (os_log_type_t)v64, "Received new attachment: %s from: %s", (uint8_t *)v39, 0x16u);
    v47 = v63;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v47, -1, -1);
    MEMORY[0x1A1B05CC4](v39, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, v20);
    outlined destroy of Participant((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v49 = v77;
  if (result)
  {
    v78(v77, v79, v20);
    v50 = Data.init(contentsOf:options:)();
    v52 = v51 | 0x1000000000000000;
    v53 = v73;
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v73, v49, v20);
    v54 = v68;
    swift_weakInit();
    v55 = (uint64_t *)(v53 + *(int *)(v54 + 24));
    *v55 = v50;
    v55[1] = v52;
    swift_getKeyPath();
    swift_getKeyPath();
    v56 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
    v58 = v57;
    v59 = *v57;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v58 = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
      *v58 = v59;
    }
    v62 = *(_QWORD *)(v59 + 16);
    v61 = *(_QWORD *)(v59 + 24);
    if (v62 >= v61 >> 1)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v59);
      *v58 = v59;
    }
    *(_QWORD *)(v59 + 16) = v62 + 1;
    outlined init with take of GroupSessionAttachmentManager.Attachment(v73, v59+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v62);
    v56(v81, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t GroupSessionAttachmentManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionAttachmentManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t GroupSessionAttachmentManager.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GroupSessionAttachmentManager.Attachment.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*GroupSessionAttachmentManager.Attachment.id.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t key path getter for GroupSessionAttachmentManager.Attachment.ledger : GroupSessionAttachmentManager.Attachment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(a1, (uint64_t)v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  Strong = swift_weakLoadStrong();
  result = outlined destroy of Participant((uint64_t)v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  *a2 = Strong;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachment.ledger.getter()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  return swift_weakLoadStrong();
}

uint64_t GroupSessionAttachmentManager.Attachment.ledger.setter()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakAssign();
  return swift_release();
}

uint64_t (*GroupSessionAttachmentManager.Attachment.ledger.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 20);
  *(_QWORD *)a1 = swift_weakLoadStrong();
  return GroupSessionJournal.Attachment.ledger.modify;
}

uint64_t GroupSessionAttachmentManager.Attachment.source.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t GroupSessionAttachmentManager.Attachment.source.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24);
  result = outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.Attachment.source.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionAttachmentManager.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[49] = a4;
  v5[50] = v4;
  v5[47] = a1;
  v5[48] = a3;
  v6 = type metadata accessor for Optional();
  v5[51] = v6;
  v5[52] = *(_QWORD *)(v6 - 8);
  v5[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[54] = swift_task_alloc();
  v5[55] = swift_task_alloc();
  v5[56] = swift_task_alloc();
  v7 = type metadata accessor for ResolvedTransferRepresentation();
  v5[57] = v7;
  v5[58] = *(_QWORD *)(v7 - 8);
  v5[59] = swift_task_alloc();
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  v5[64] = swift_task_alloc();
  v8 = type metadata accessor for _TransferRepresentationInputs();
  v5[65] = v8;
  v5[66] = *(_QWORD *)(v8 - 8);
  v5[67] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[68] = AssociatedTypeWitness;
  v10 = type metadata accessor for _TransferRepresentationValue();
  v5[69] = v10;
  v5[70] = *(_QWORD *)(v10 - 8);
  v5[71] = swift_task_alloc();
  v11 = type metadata accessor for _TransferRepresentationOutputs();
  v5[72] = v11;
  v5[73] = *(_QWORD *)(v11 - 8);
  v5[74] = swift_task_alloc();
  v5[75] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[76] = swift_task_alloc();
  v5[77] = swift_task_alloc();
  v5[78] = swift_task_alloc();
  v12 = type metadata accessor for URL();
  v5[79] = v12;
  v5[80] = *(_QWORD *)(v12 - 8);
  v5[81] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionAttachmentManager.Attachment.load<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t ObjectType;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  unint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  _QWORD *v115;
  uint64_t (*v116)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v117[2];

  v1 = v0[50];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24));
  v3 = *v2;
  v0[82] = *v2;
  v4 = v2[1];
  v0[83] = v4;
  v5 = (v4 >> 60) & 3;
  v6 = v4;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 != 1)
    {
      Strong = swift_weakLoadStrong();
      v0[84] = Strong;
      if (Strong)
      {
        v0[85] = *(_QWORD *)(Strong + 16);
        v29 = *(_QWORD *)(Strong + 24);
        ObjectType = swift_getObjectType();
        v116 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v29 + 48) + *(_QWORD *)(v29 + 48));
        swift_unknownObjectRetain();
        v31 = (_QWORD *)swift_task_alloc();
        v0[86] = v31;
        *v31 = v0;
        v31[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
        return v116(v0[81], v0[50], ObjectType, v29);
      }
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v69 = 2;
      swift_willThrow();
      goto LABEL_37;
    }
    v6 = v4 & 0xCFFFFFFFFFFFFFFFLL;
  }
  v100 = v6;
  v0[89] = v6;
  v0[88] = v3;
  v7 = v0[78];
  v8 = v0[77];
  v9 = v0[74];
  v110 = v0[73];
  v114 = v0[72];
  v10 = v0[71];
  v107 = v0[70];
  v109 = v0[69];
  v11 = v0[68];
  v12 = v0[67];
  v102 = v0[75];
  v104 = v0[66];
  v105 = v0[65];
  v101 = v3;
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(v3, v4);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
  v103(v8, v7, v11);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v12, v105);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v10, v109);
  v13 = (char *)_TransferRepresentationOutputs.storage.getter();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v9, v114);
  v111 = *((_QWORD *)v13 + 2);
  v115 = v0;
  if (v111)
  {
    v14 = 0;
    v15 = v0[58];
    v16 = MEMORY[0x1E0DEE9D8];
    v17 = v0;
    while (v14 < *((_QWORD *)v13 + 2))
    {
      v18 = v17[64];
      v19 = v17[62];
      v20 = v17[57];
      v21 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v22 = *(_QWORD *)(v15 + 72);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v18, &v13[v21 + v22 * v14], v20);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v23(v19, v18, v20);
      v117[0] = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v117[0];
      }
      v25 = *(_QWORD *)(v16 + 16);
      v24 = *(_QWORD *)(v16 + 24);
      v17 = v115;
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v16 = v117[0];
      }
      ++v14;
      v26 = v115[62];
      v27 = v115[57];
      *(_QWORD *)(v16 + 16) = v25 + 1;
      v23(v16 + v21 + v25 * v22, v26, v27);
      if (v111 == v14)
        goto LABEL_16;
    }
    __break(1u);
    goto LABEL_39;
  }
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = v0;
LABEL_16:
  swift_bridgeObjectRelease();
  v33 = v17;
  v36 = v17 + 57;
  v35 = v17[57];
  v34 = v36[1];
  v37 = v33[56];
  if (*(_QWORD *)(v16 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v37, v16 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)), v35);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v38(v37, 0, 1, v35);
  }
  else
  {
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v38(v33[56], 1, 1, v35);
  }
  v13 = (char *)v115;
  v39 = v115[57];
  v40 = v115[58];
  v41 = v115[56];
  swift_release();
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v42(v41, 1, v39) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v115[56], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_21:
      v43 = *((_QWORD *)v13 + 78);
      v44 = *((_QWORD *)v13 + 76);
      v45 = v115[68];
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Log.ledger);
      v47 = v44;
      v48 = v115;
      v103(v47, v43, v45);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.error.getter();
      v51 = os_log_type_enabled(v49, v50);
      v52 = v115[76];
      v53 = v115[75];
      v54 = v115[68];
      if (v51)
      {
        v55 = (uint8_t *)swift_slowAlloc();
        v56 = swift_slowAlloc();
        v117[0] = v56;
        *(_DWORD *)v55 = 136315138;
        swift_getDynamicType();
        v57 = _typeName(_:qualified:)();
        v115[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v59(v52, v54);
        _os_log_impl(&dword_1A0DB3000, v49, v50, "Failed to find supported representation for strategy: %s", v55, 0xCu);
        swift_arrayDestroy();
        v48 = v115;
        MEMORY[0x1A1B05CC4](v56, -1, -1);
        MEMORY[0x1A1B05CC4](v55, -1, -1);
      }
      else
      {
        v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v59(v115[76], v115[68]);
      }

      v66 = v48[78];
      v67 = v115[68];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v68 = 0;
      swift_willThrow();
      outlined consume of Data._Representation(v101, v100);
      v0 = v115;
      v59(v66, v67);
      goto LABEL_37;
    }
LABEL_39:
    swift_once();
    goto LABEL_21;
  }
  v60 = *(void (**)(uint64_t, _QWORD, uint64_t))(v115[58] + 32);
  v60(v115[63], v115[56], v115[57]);
  v61 = ResolvedTransferRepresentation.importing.getter();
  v115[90] = v61;
  v115[91] = v62;
  if (v61)
  {
    v63 = (int *)v61;
    v64 = MEMORY[0x1E0CA86D8];
    v115[20] = MEMORY[0x1E0CB0338];
    v115[21] = v64;
    v115[17] = v101;
    v115[18] = v100;
    outlined copy of Data._Representation(v101, v100);
    v112 = (int *)((char *)v63 + *v63);
    v65 = (_QWORD *)swift_task_alloc();
    v115[92] = v65;
    *v65 = v115;
    v65[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
    return ((uint64_t (*)(_QWORD *, _QWORD *))v112)(v115 + 12, v115 + 17);
  }
  if (one-time initialization token for ledger != -1)
    swift_once();
  v0 = v115;
  v70 = v115[63];
  v71 = v115[61];
  v72 = v115[57];
  v73 = v115[58];
  v74 = type metadata accessor for Logger();
  __swift_project_value_buffer(v74, (uint64_t)static Log.ledger);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  v113(v71, v70, v72);
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.error.getter();
  v77 = os_log_type_enabled(v75, v76);
  v78 = v115[61];
  if (v77)
  {
    v108 = v76;
    v79 = v115[57];
    v80 = v115[54];
    v81 = v115[55];
    v82 = (uint8_t *)swift_slowAlloc();
    v106 = swift_slowAlloc();
    v117[0] = v106;
    *(_DWORD *)v82 = 136315138;
    v113(v81, v78, v79);
    v38(v81, 0, 1, v79);
    outlined init with copy of URL?(v81, v80, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (v42(v80, 1, v79) == 1)
    {
      v83 = 0xE300000000000000;
      v84 = 7104878;
    }
    else
    {
      v87 = v115[59];
      v86 = v115[60];
      v89 = v115[57];
      v88 = v115[58];
      v60(v86, v115[54], v89);
      v113(v87, v86, v89);
      v84 = String.init<A>(reflecting:)();
      v83 = v90;
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v89);
    }
    v91 = v115[61];
    v93 = v115[57];
    v92 = v115[58];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v115[55], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    v115[45] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v83, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v85 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
    v85(v91, v93);
    _os_log_impl(&dword_1A0DB3000, v75, v108, "Failed to find importing closure from representation %s", v82, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v106, -1, -1);
    MEMORY[0x1A1B05CC4](v82, -1, -1);
  }
  else
  {
    v85 = *(void (**)(uint64_t, uint64_t))(v115[58] + 8);
    v85(v115[61], v115[57]);
  }

  v94 = v115[78];
  v95 = v115[75];
  v96 = v115[68];
  v97 = v115[63];
  v98 = v115[57];
  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *v99 = 0;
  swift_willThrow();
  outlined consume of Data._Representation(v101, v100);
  v85(v97, v98);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
LABEL_37:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 696) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t, _QWORD, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(uint64_t, uint64_t, uint64_t);
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  os_log_t log;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v110)(char *, char *);
  uint64_t v111[2];

  v1 = *((_QWORD *)v0 + 87);
  swift_unknownObjectRelease();
  v2 = Data.init(contentsOf:options:)();
  v4 = v3;
  v5 = *((_QWORD *)v0 + 81);
  v6 = *((_QWORD *)v0 + 80);
  v7 = *((_QWORD *)v0 + 79);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  v95 = v2;
  v96 = v4;
  *((_QWORD *)v0 + 89) = v4;
  *((_QWORD *)v0 + 88) = v2;
  v8 = v0;
  v9 = *((_QWORD *)v0 + 78);
  v10 = *((_QWORD *)v0 + 77);
  v11 = *((_QWORD *)v0 + 74);
  v106 = *((_QWORD *)v0 + 73);
  v108 = *((_QWORD *)v0 + 72);
  v12 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v0 + 71);
  log = (os_log_t)*((_QWORD *)v0 + 70);
  v104 = *((_QWORD *)v0 + 69);
  v13 = *((_QWORD *)v0 + 68);
  v14 = *((_QWORD *)v0 + 67);
  v97 = *((_QWORD *)v0 + 75);
  v99 = *((_QWORD *)v0 + 66);
  v101 = *((_QWORD *)v0 + 65);
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*((_QWORD *)v0 + 82), *((_QWORD *)v0 + 83));
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
  v98(v10, v9, v13);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v14, v101);
  ((void (*)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))log[1].isa)(v12, v104);
  v15 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v11, v108);
  v107 = *(_QWORD *)(v15 + 16);
  v109 = v8;
  if (v107)
  {
    v16 = 0;
    v17 = *((_QWORD *)v8 + 58);
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = v8;
    while (v16 < *(_QWORD *)(v15 + 16))
    {
      v20 = *((_QWORD *)v19 + 64);
      v21 = *((_QWORD *)v19 + 62);
      v22 = *((_QWORD *)v19 + 57);
      v23 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v24 = *(_QWORD *)(v17 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(v20, v15 + v23 + v24 * v16, v22);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
      v12(v21, v20, v22);
      v111[0] = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v111[0];
      }
      v26 = *(_QWORD *)(v18 + 16);
      v25 = *(_QWORD *)(v18 + 24);
      v19 = v109;
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v18 = v111[0];
      }
      ++v16;
      v27 = *((_QWORD *)v109 + 62);
      v28 = *((_QWORD *)v109 + 57);
      *(_QWORD *)(v18 + 16) = v26 + 1;
      v12(v18 + v23 + v26 * v24, v27, v28);
      if (v107 == v16)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_35;
  }
  v18 = MEMORY[0x1E0DEE9D8];
  v19 = v8;
LABEL_13:
  swift_bridgeObjectRelease();
  v29 = *((_QWORD *)v19 + 57);
  v30 = *((_QWORD *)v19 + 58);
  v31 = *((_QWORD *)v19 + 56);
  if (*(_QWORD *)(v18 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v30 + 16))(*((_QWORD *)v19 + 56), v18 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)), *((_QWORD *)v19 + 57));
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v32(v31, 0, 1, v29);
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v32(*((_QWORD *)v19 + 56), 1, 1, v29);
  }
  v33 = *((_QWORD *)v19 + 57);
  v34 = *((_QWORD *)v19 + 58);
  v12 = v19;
  v35 = *((_QWORD *)v19 + 56);
  swift_release();
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v36(v35, 1, v33) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*((_QWORD *)v12 + 56), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_18:
      v37 = *((_QWORD *)v12 + 78);
      v38 = *((_QWORD *)v12 + 76);
      v39 = *((_QWORD *)v109 + 68);
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Log.ledger);
      v41 = v109;
      v98(v38, v37, v39);
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      v44 = os_log_type_enabled(v42, v43);
      v45 = *((_QWORD *)v109 + 76);
      v46 = *((_QWORD *)v109 + 75);
      v47 = *((_QWORD *)v109 + 68);
      if (v44)
      {
        v48 = (uint8_t *)swift_slowAlloc();
        v49 = swift_slowAlloc();
        v111[0] = v49;
        *(_DWORD *)v48 = 136315138;
        swift_getDynamicType();
        v50 = _typeName(_:qualified:)();
        *((_QWORD *)v109 + 46) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v52 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v52(v45, v47);
        _os_log_impl(&dword_1A0DB3000, v42, v43, "Failed to find supported representation for strategy: %s", v48, 0xCu);
        swift_arrayDestroy();
        v41 = v109;
        MEMORY[0x1A1B05CC4](v49, -1, -1);
        MEMORY[0x1A1B05CC4](v48, -1, -1);
      }
      else
      {
        v52 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v52(*((_QWORD *)v109 + 76), *((_QWORD *)v109 + 68));
      }

      v60 = *((_QWORD *)v41 + 78);
      v61 = *((_QWORD *)v109 + 68);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *v62 = 0;
      swift_willThrow();
      outlined consume of Data._Representation(v95, v96);
      v0 = v109;
      v52(v60, v61);
      goto LABEL_33;
    }
LABEL_35:
    swift_once();
    goto LABEL_18;
  }
  v53 = *(void (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)v12 + 58) + 32);
  v53(*((_QWORD *)v12 + 63), *((_QWORD *)v12 + 56), *((_QWORD *)v12 + 57));
  v54 = ResolvedTransferRepresentation.importing.getter();
  *((_QWORD *)v12 + 90) = v54;
  *((_QWORD *)v12 + 91) = v55;
  if (v54)
  {
    v56 = (int *)v54;
    v57 = MEMORY[0x1E0CA86D8];
    *((_QWORD *)v12 + 20) = MEMORY[0x1E0CB0338];
    *((_QWORD *)v12 + 21) = v57;
    *((_QWORD *)v12 + 17) = v95;
    *((_QWORD *)v12 + 18) = v96;
    outlined copy of Data._Representation(v95, v96);
    v110 = (uint64_t (*)(char *, char *))((char *)v56 + *v56);
    v58 = (_QWORD *)swift_task_alloc();
    *((_QWORD *)v12 + 92) = v58;
    *v58 = v12;
    v58[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
    return v110((char *)v12 + 96, (char *)v12 + 136);
  }
  if (one-time initialization token for ledger != -1)
    swift_once();
  v63 = *((_QWORD *)v12 + 63);
  v64 = *((_QWORD *)v12 + 61);
  v65 = *((_QWORD *)v12 + 58);
  v66 = *((_QWORD *)v109 + 57);
  v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Log.ledger);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  v69 = v109;
  v105 = v68;
  v68(v64, v63, v66);
  v70 = Logger.logObject.getter();
  v71 = static os_log_type_t.error.getter();
  v72 = os_log_type_enabled(v70, v71);
  v73 = *((_QWORD *)v109 + 61);
  if (v72)
  {
    v102 = v71;
    v74 = *((_QWORD *)v109 + 57);
    v75 = *((_QWORD *)v109 + 54);
    v76 = *((_QWORD *)v109 + 55);
    v77 = (uint8_t *)swift_slowAlloc();
    v100 = swift_slowAlloc();
    v111[0] = v100;
    *(_DWORD *)v77 = 136315138;
    v105(v76, v73, v74);
    v32(v76, 0, 1, v74);
    outlined init with copy of URL?(v76, v75, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (v36(v75, 1, v74) == 1)
    {
      v78 = 0xE300000000000000;
      v79 = 7104878;
    }
    else
    {
      v81 = *((_QWORD *)v109 + 59);
      v82 = *((_QWORD *)v109 + 60);
      v84 = *((_QWORD *)v109 + 57);
      v83 = *((_QWORD *)v109 + 58);
      v53(v82, *((_QWORD *)v109 + 54), v84);
      v105(v81, v82, v84);
      v79 = String.init<A>(reflecting:)();
      v78 = v85;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    }
    v86 = *((_QWORD *)v109 + 61);
    v88 = *((_QWORD *)v109 + 57);
    v87 = *((_QWORD *)v109 + 58);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*((_QWORD *)v109 + 55), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    *((_QWORD *)v109 + 45) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v78, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v80 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v80(v86, v88);
    _os_log_impl(&dword_1A0DB3000, v70, v102, "Failed to find importing closure from representation %s", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v100, -1, -1);
    MEMORY[0x1A1B05CC4](v77, -1, -1);

    v69 = v109;
  }
  else
  {
    v80 = *(void (**)(uint64_t, uint64_t))(*((_QWORD *)v109 + 58) + 8);
    v80(*((_QWORD *)v109 + 61), *((_QWORD *)v109 + 57));

  }
  v89 = *((_QWORD *)v69 + 78);
  v90 = *((_QWORD *)v69 + 75);
  v91 = *((_QWORD *)v109 + 68);
  v92 = *((_QWORD *)v109 + 63);
  v93 = *((_QWORD *)v109 + 57);
  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *v94 = 0;
  swift_willThrow();
  outlined consume of Data._Representation(v95, v96);
  v80(v92, v93);
  v0 = v109;
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
LABEL_33:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*((uint64_t (**)(void))v0 + 1))();
}

{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 136);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];

  v1 = *(_QWORD *)(v0 + 384);
  outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  v2 = swift_dynamicCast();
  v3 = *(_QWORD *)(v1 - 8);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v44 = v0 + 96;
  if (v2)
  {
    v5 = *(_QWORD *)(v0 + 720);
    v37 = *(_QWORD *)(v0 + 704);
    v6 = *(_QWORD *)(v0 + 624);
    v40 = *(_QWORD *)(v0 + 600);
    v38 = *(_QWORD *)(v0 + 712);
    v39 = *(_QWORD *)(v0 + 544);
    v7 = *(_QWORD *)(v0 + 504);
    v8 = *(_QWORD *)(v0 + 464);
    v9 = *(_QWORD *)(v0 + 456);
    v10 = *(_QWORD *)(v0 + 424);
    v11 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 384);
    v4(v10, 0, 1, v12);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
    outlined consume of Data._Representation(v37, v38);
    __swift_destroy_boxed_opaque_existential_1Tm(v44);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11, v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v6, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 408);
    v4(v14, 1, 1, *(_QWORD *)(v0 + 384));
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    if (one-time initialization token for ledger != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.ledger);
    outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 216);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v45[0] = v43;
      *(_DWORD *)v20 = 136315394;
      outlined init with copy of AudioSessionAssertionManager(v0 + 216, v0 + 16);
      outlined init with copy of URL?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for Transferable?);
      if (*(_QWORD *)(v0 + 320))
      {
        outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 296), v0 + 56);
        outlined init with copy of AudioSessionAssertionManager(v0 + 56, v0 + 256);
        v21 = String.init<A>(reflecting:)();
        v23 = v22;
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
      }
      else
      {
        v23 = 0xE300000000000000;
        v21 = 7104878;
      }
      v24 = *(_QWORD *)(v0 + 384);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for Transferable?);
      *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
      *(_WORD *)(v20 + 12) = 2080;
      *(_QWORD *)(v0 + 344) = v24;
      MetatypeMetadata = swift_getMetatypeMetadata();
      v26 = >> prefix<A>(_:)(v0 + 344, MetatypeMetadata);
      *(_QWORD *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Failed to convert %s to %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v43, -1, -1);
      MEMORY[0x1A1B05CC4](v20, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
    }

    v28 = *(_QWORD *)(v0 + 720);
    v29 = *(_QWORD *)(v0 + 712);
    v30 = *(_QWORD *)(v0 + 704);
    v31 = *(_QWORD *)(v0 + 600);
    v41 = *(_QWORD *)(v0 + 544);
    v42 = *(_QWORD *)(v0 + 624);
    v32 = *(_QWORD *)(v0 + 504);
    v33 = *(_QWORD *)(v0 + 456);
    v34 = *(_QWORD *)(v0 + 464);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v35 = 1;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v28);
    outlined consume of Data._Representation(v30, v29);
    __swift_destroy_boxed_opaque_existential_1Tm(v44);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v42, v41);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v13();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(_QWORD *)(v0 + 624);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 456);
  v8 = *(_QWORD *)(v0 + 464);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 720));
  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  _BYTE *v6;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);

  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
  {
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(Strong + 16);
    v2 = *(_QWORD *)(Strong + 24);
    ObjectType = swift_getObjectType();
    v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v2 + 48) + *(_QWORD *)(v2 + 48));
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v4;
    *v4 = v0;
    v4[1] = GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:);
    return v7(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16), ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v6 = 2;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 80);
  swift_unknownObjectRelease();
  v2 = Data.init(contentsOf:options:)();
  v4 = v3;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 48), v5);
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v2;
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 48), v5);
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v4);
  }
}

{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionAttachmentManager.Attachment.loadMetadata<A>(of:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *v1 = 0;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionAttachmentManager.Attachments.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionAttachmentManager.Attachments.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner);
  v2 = swift_allocObject();
  swift_retain();
  v3 = (_DWORD *)swift_slowAlloc();
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = static Subscribers.Demand.none.getter();
  *v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner, (uint64_t)&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.baseIterator.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.Attachments.Iterator.baseIterator.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[2];
  v2 = *v1;
  v0[3] = *v1;
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = GroupSessionJournal.Attachments.Iterator.next();
  return v6((uint64_t)&async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v3, (uint64_t)partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionAttachmentManager.Attachments.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionAttachmentManager.Attachments.Iterator()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[3];
  v2 = *v1;
  v0[4] = *v1;
  v3 = swift_task_alloc();
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator;
  return v6((uint64_t)&closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, (uint64_t)partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0);
}

uint64_t _s15GroupActivities0A24SessionAttachmentManagerC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t _s15GroupActivities0A24SessionAttachmentManagerC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)v0[5];
  v2 = *v1;
  v0[6] = *v1;
  v3 = swift_task_alloc();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:)
                                                                           + async function pointer to specialized withTaskCancellationHandler<A>(operation:onCancel:isolation:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return v6((uint64_t)&closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, (uint64_t)partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionAttachmentManager.Attachments@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionAttachmentManager.Attachments.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t key path getter for GroupSessionAttachmentManager._attachments : GroupSessionAttachmentManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSessionAttachmentManager._attachments : GroupSessionAttachmentManager()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for GroupSessionAttachmentManager.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionAttachmentManager.Attachment);
}

uint64_t outlined init with take of GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *specialized GroupSessionAttachmentManager.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject();
  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v7, a3, a4);
}

_QWORD *specialized GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a1;
  v29 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]>);
  v30 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2[4] = 0;
  v18 = (char *)a2 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  v34 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager_cancellables) = MEMORY[0x1E0DEE9E8];
  a2[2] = v28;
  a2[3] = a4;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  swift_unknownObjectRetain();
  v34 = v19(v29, a4);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>, MEMORY[0x1E0C95D90]);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]>, MEMORY[0x1E0C95950]);
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
  v20 = v32;
  v21 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, v10, v33);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v21);
  v22 = a2[3];
  ObjectType = swift_getObjectType();
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(ObjectType, v22);
  v24 = swift_allocObject();
  swift_weakInit();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for closure #2 in GroupSessionAttachmentManager.init(transportSession:);
  *(_QWORD *)(v25 + 24) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(UUID, URL, Participant), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  return a2;
}

uint64_t outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return outlined copy of Data._Representation(result, a2);
}

uint64_t outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return outlined consume of Data._Representation(result, a2);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GroupSessionAttachmentManager.Attachment()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
}

unint64_t lazy protocol witness table accessor for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionAttachmentManager.Attachments.Iterator, &type metadata for GroupSessionAttachmentManager.Attachments.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator);
  }
  return result;
}

uint64_t sub_1A0E7BCFC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GroupSessionAttachmentManager.attachments.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1A0E7BD34(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A0E7BD68()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  return swift_weakAssign();
}

uint64_t ObjC metadata update function for GroupSessionAttachmentManager()
{
  return type metadata accessor for GroupSessionAttachmentManager(0);
}

uint64_t type metadata accessor for GroupSessionAttachmentManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionAttachmentManager);
}

void type metadata completion function for GroupSessionAttachmentManager()
{
  unint64_t v0;

  type metadata accessor for Published<[GroupSessionAttachmentManager.Attachment]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for GroupSessionAttachmentManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSessionAttachmentManager.__allocating_init(transportSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for Published<[GroupSessionAttachmentManager.Attachment]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionAttachmentManager.Attachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_weakDestroy();
  return outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v12, v13);
  return a1;
}

uint64_t initializeWithTake for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E7C1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  else
    return (~*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) & 0x3000000000000000) == 0;
}

uint64_t storeEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E7C230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (-(int)a2 & 3) << 60;
  return result;
}

uint64_t type metadata completion function for GroupSessionAttachmentManager.Attachment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1)
{
  return outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if ((~*(_QWORD *)(a1 + 8) & 0x3000000000000000) != 0)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_OWORD *)result = xmmword_1A0F12A80;
  }
  return result;
}

uint64_t getEnumTag for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1)
{
  if (((*(_QWORD *)(a1 + 8) >> 60) & 2) != 0)
    return (*(_DWORD *)a1 + 2);
  else
    return (*(_QWORD *)(a1 + 8) >> 60) & 3;
}

uint64_t destructiveProjectEnumData for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for GroupSessionAttachmentManager.Attachment.AttachmentSource(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachment.AttachmentSource()
{
  return &type metadata for GroupSessionAttachmentManager.Attachment.AttachmentSource;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachments()
{
  return &type metadata for GroupSessionAttachmentManager.Attachments;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachments.Iterator()
{
  return &type metadata for GroupSessionAttachmentManager.Attachments.Iterator;
}

uint64_t sub_1A0E7C570()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GroupSessionAttachmentManager.init(transportSession:)(a1, v2, a2);
}

uint64_t partial apply for closure #2 in GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in GroupSessionAttachmentManager.init(transportSession:)(a1, a2, a3, v3);
}

uint64_t sub_1A0E7C5A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s10Foundation4UUIDVAA3URLV15GroupActivities11ParticipantVIegnnn_AC_AeHtIegn_TRTA_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t dispatch thunk of static CustomMessageIdentifiable.messageIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Participant.init(handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;

  UUID.init()();
  result = type metadata accessor for Participant();
  v7 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v7 = a1;
  v7[1] = a2;
  *(_QWORD *)(a3 + *(int *)(result + 24)) = 0;
  return result;
}

uint64_t Participant.init(serverIdentifier:handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;

  UUID.init(_:)();
  result = type metadata accessor for Participant();
  *(_QWORD *)(a4 + *(int *)(result + 24)) = a1;
  v9 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v9 = a2;
  v9[1] = a3;
  return result;
}

id Participant.cpParticipant.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Class isa;
  void *v7;
  id v8;

  v1 = type metadata accessor for Participant();
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v3 = *v2;
  v4 = v2[1];
  v5 = objc_allocWithZone(MEMORY[0x1E0D15360]);
  swift_bridgeObjectRetain();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v7 = (void *)MEMORY[0x1A1B048B4](v3, v4);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v5, sel_initWithUUID_accountIdentifier_, isa, v7);

  objc_msgSend(v8, sel__setParticipantIdentifier_, *(_QWORD *)(v0 + *(int *)(v1 + 24)));
  return v8;
}

uint64_t Participant.init(id:handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4, a1, v8);
  v10 = UUID.uint64Value.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  result = type metadata accessor for Participant();
  *(_QWORD *)(a4 + *(int *)(result + 24)) = v10;
  v12 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t Participant.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Participant.handle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Participant() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Participant.serverIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Participant() + 24));
}

uint64_t Participant.init(cpParticipant:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;

  v4 = objc_msgSend(a1, sel_participantIdentifier);
  v5 = objc_msgSend(a1, sel_accountIdentifier);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  UUID.init(_:)();
  result = type metadata accessor for Participant();
  *(_QWORD *)(a2 + *(int *)(result + 24)) = v4;
  v10 = (uint64_t *)(a2 + *(int *)(result + 20));
  *v10 = v6;
  v10[1] = v8;
  return result;
}

void Participant.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = type metadata accessor for Participant();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int Participant.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = type metadata accessor for Participant();
  String.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Participant(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

unint64_t Participant.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Participant() + 20));
  v4 = *v2;
  v3 = v2[1];
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v4;
    v6._object = (void *)v3;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0x656C646E6168202CLL;
    v7._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000010;
}

BOOL specialized static Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  _BOOL8 result;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for Participant();
  v5 = *(int *)(v4 + 20);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  if (v6 == *v8 && v7 == v8[1])
    return *(_QWORD *)(a1 + *(int *)(v4 + 24)) == *(_QWORD *)(a2 + *(int *)(v4 + 24));
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v10 & 1) != 0)
    return *(_QWORD *)(a1 + *(int *)(v4 + 24)) == *(_QWORD *)(a2 + *(int *)(v4 + 24));
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Participant(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for Participant()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E7D428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Participant()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E7D4B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t static BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A0F0EDD0;
  v7 = a1;
  (*(void (**)(void))(a3 + 8))();
  if (!v3)
  {
    swift_beginAccess();
    v7 = *(_QWORD *)(v6 + 16);
    outlined copy of Data._Representation(v7, *(_QWORD *)(v6 + 24));
  }
  swift_release();
  return v7;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1A0E7D71C
     + *((int *)qword_1A0E7D950 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1A0E7D72C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  outlined copy of Data._Representation(v1, v0);
  closure #1 in Data.init<A>(_:)(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  outlined consume of Data._Representation(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v13);
  return v4;
}

double BinaryEncoder.__allocating_init()()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_1A0F0EDD0;
  return result;
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in BinaryEncoder.encode<A>(_:), 0, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CB0338], MEMORY[0x1E0DEDD18], a8);
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v9, v10);
}

uint64_t closure #1 in BinaryEncoder.encode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = specialized Data.InlineData.init(_:)(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t BinaryEncoder.encode(_:)()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v12 = UUID.uuid.getter();
  v13 = v0;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v8 = specialized Data.init<A>(_:)((uint64_t)&v12, (uint64_t)v21);
  v10 = v9;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v8, v10);
}

{
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t BinaryEncoder.encode<A>(_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v3 = (char *)&v11 - v2;
  dispatch thunk of RawRepresentable.rawValue.getter();
  BinaryEncoder.encode<A>(_:)((uint64_t)v3, AssociatedTypeWitness, v4, v5, v6, v7, v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 8))(v3);
}

uint64_t BinaryEncoder.deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t BinaryEncoder.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

double BinaryEncoder.init()()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_1A0F0EDD0;
  return result;
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for BinaryEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BinaryEncoder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v5;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB1B08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t IdentifiableGroupActivity.uuid.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v15[6] = *(_QWORD *)(v16 - 8);
  v7 = MEMORY[0x1E0C80A78](v16);
  v15[5] = (char *)v15 - v8;
  v17 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v15 - v11;
  v15[7] = v5;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v13 = type metadata accessor for UUID();
  swift_getAssociatedConformanceWitness();
  default argument 0 of static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(AssociatedTypeWitness, v13);
  v18 = a3;
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

id XPCWrapper.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized XPCWrapper.init(_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)v1 + 10) - 8) + 8))(a1);
  return v4;
}

uint64_t @objc static XPCWrapper.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static XPCWrapper.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t XPCWrapper.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1)
                                                                            + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x68)]);
}

id XPCWrapper.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = specialized XPCWrapper.init(_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

Swift::Void __swiftcall XPCWrapper.encode(with:)(NSCoder with)
{
  Class isa;
  id v3;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = (id)MEMORY[0x1A1B048B4](1635017060, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v3);

}

void @objc XPCWrapper.encode(with:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  XPCWrapper.encode(with:)((NSCoder)v4);

}

id XPCWrapper.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return XPCWrapper.init(coder:)(a1);
}

id XPCWrapper.init(coder:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v18)(char *, char *, uint64_t);
  _QWORD *v19;
  char *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  objc_super v27;
  __int128 v28;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = v3[10];
  v25 = type metadata accessor for Optional();
  v5 = MEMORY[0x1E0C80A78](v25);
  v7 = (char *)&v22 - v6;
  v8 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v22 - v9;
  type metadata accessor for NSData();
  v11 = v1;
  v12 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v12)
  {
    v13 = (void *)v12;
    v26 = a1;
    v28 = xmmword_1A0F12E20;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

    v14 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) >> 60 != 15)
    {
      v15 = v28;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      v23 = v3[11];
      v24 = v15;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v4);
      v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v18(v10, v7, v4);
      v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v20 = &v11[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v11) + 0x70)];
      *(_QWORD *)v20 = v24;
      *((_QWORD *)v20 + 1) = v14;
      v18(&v11[*(_QWORD *)((*v19 & *(_QWORD *)v11) + 0x68)], v10, v4);

      v21 = (objc_class *)type metadata accessor for XPCWrapper(0, v4, v23, v3[12]);
      v27.receiver = v11;
      v27.super_class = v21;
      v16 = objc_msgSendSuper2(&v27, sel_init);

      return v16;
    }

  }
  else
  {

  }
  type metadata accessor for XPCWrapper(0, v4, v3[11], v3[12]);
  swift_deallocPartialClassInstance();
  return 0;
}

id @objc XPCWrapper.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return XPCWrapper.init(coder:)(a3);
}

uint64_t XPCWrapper.subscript.getter()
{
  return swift_getAtKeyPath();
}

id XPCWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void XPCWrapper.init()()
{
  specialized XPCWrapper.init()();
}

void @objc XPCWrapper.init()()
{
  specialized XPCWrapper.init()();
}

id XPCWrapper.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for XPCWrapper(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc XPCWrapper.__ivar_destroyer(char *a1)
{
  _QWORD *v2;
  char *v3;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x68)]);
  v3 = &a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x70)];
  return outlined consume of Data._Representation(*(_QWORD *)v3, *((_QWORD *)v3 + 1));
}

id specialized XPCWrapper.init(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  objc_class *v14;
  objc_super v15;
  char *v16;

  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v3 = v2[10];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(void))(v4 + 16);
  v16 = (char *)v0 + v2[13];
  v5();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v6 = v0;
  JSONEncoder.init()();
  v7 = v2[12];
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);

    type metadata accessor for XPCWrapper(0, v3, v2[11], v7);
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    v11 = v8;
    v12 = v9;
    swift_release();
    v13 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x70));
    *v13 = v11;
    v13[1] = v12;

    v14 = (objc_class *)type metadata accessor for XPCWrapper(0, v3, v2[11], v7);
    v15.receiver = v6;
    v15.super_class = v14;
    return objc_msgSendSuper2(&v15, sel_init);
  }
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

uint64_t type metadata accessor for XPCWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCWrapper);
}

void specialized XPCWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata completion function for XPCWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for XPCWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCWrapper.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCWrapper.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of XPCWrapper.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of XPCWrapper.subscript.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t static BinaryDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t);

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = 0;
  v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a5 + 8);
  outlined copy of Data._Representation(a2, a3);
  return v10(v9, a4, a5);
}

void BinaryDecoder.isAtEnd.getter()
{
  swift_beginAccess();
  __asm { BR              X13 }
}

BOOL sub_1A0E7ED24()
{
  uint64_t v0;
  uint64_t v1;

  return v1 >= BYTE6(v0);
}

uint64_t BinaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v20 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1A1B0534C](&unk_1A0F12E78, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v21 = a3;
  MEMORY[0x1A1B052EC](v9, a1, v6);
  v11 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  v12 = *(_QWORD *)(a1 - 8);
  if (v11 / 8 == *(_QWORD *)(v12 + 64))
  {
    if (!__OFADD__(*(_QWORD *)(v3 + 32), v11 / 8))
    {
      swift_beginAccess();
      __asm { BR              X13 }
    }
    __break(1u);
    JUMPOUT(0x1A0E7F268);
  }
  v13 = type metadata accessor for DecodingError();
  swift_allocError();
  v15 = v14;
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v16._object = (void *)0x80000001A0F1B170;
  v16._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v16);
  v17._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD00000000000003FLL;
  v18._object = (void *)0x80000001A0F1B190;
  String.append(_:)(v18);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC458], v13);
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v21, a1);
}

uint64_t closure #1 in BinaryDecoder.decode<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = a2 - result;
  if (!result)
    v6 = 0;
  if (v6 == a3)
  {
    result = swift_beginAccess();
    if (a6 >= a5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      return DataProtocol.copyBytes<A>(to:from:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in BinaryDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in BinaryDecoder.decode<A>(_:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void BinaryDecoder.decode(_:)()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 32), 16))
  {
    swift_beginAccess();
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1A0E7F6CCLL);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

void BinaryDecoder.decode(_:encoding:delimiter:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v4);
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A0F0EAB0;
  *(_BYTE *)(v7 + 32) = a2;
  outlined copy of Data._Representation(v5, v6);
  specialized Data.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  __asm { BR              X12 }
}

uint64_t sub_1A0E7F854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;

  if (BYTE6(v4) < a4)
  {
    __break(1u);
    goto LABEL_10;
  }
  v12 = Data.range(of:options:in:)();
  v14 = v13;
  outlined consume of Data._Representation(v10, v6);
  outlined consume of Data._Representation(v8, v9);
  if ((v14 & 1) != 0)
  {
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC458], v20);
    swift_willThrow();
    return v7;
  }
  v15 = v5[4];
  if (v12 < v15)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1A0E7FB88);
  }
  swift_beginAccess();
  v16 = specialized Data.subscript.getter(v15, v12, v5[2], v5[3]);
  v18 = v17;
  swift_endAccess();
  *(_QWORD *)(v11 - 128) = v16;
  *(_QWORD *)(v11 - 120) = v18;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v11 - 144) + 16))(v7, *(_QWORD *)(v11 - 72), *(_QWORD *)(v11 - 136));
  lazy protocol witness table accessor for type Data and conformance Data();
  String.init<A>(bytes:encoding:)();
  if (v19)
    __asm { BR              X10 }
  v7 = type metadata accessor for DecodingError();
  swift_allocError();
  v24 = v23;
  *(_QWORD *)(v11 - 128) = 0;
  *(_QWORD *)(v11 - 120) = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v25 = *(_QWORD *)(v11 - 120);
  *(_QWORD *)(v11 - 128) = *(_QWORD *)(v11 - 128);
  *(_QWORD *)(v11 - 120) = v25;
  v26._object = (void *)0x80000001A0F1B2A0;
  v26._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v26);
  lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding();
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x6E69646F636E6520;
  v28._object = (void *)0xEA00000000002E67;
  String.append(_:)(v28);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v24, *MEMORY[0x1E0DEC458], v7);
  swift_willThrow();
  outlined consume of Data._Representation(v16, v18);
  return v7;
}

uint64_t specialized Data.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1A0E7FBC8 + dword_1A0E7FC24[a4 >> 62]))();
}

uint64_t sub_1A0E7FBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (BYTE6(a4) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 + 1 < a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x1A0E7FC24);
  }
  return Data._Representation.subscript.getter();
}

void BinaryDecoder.decode(_:length:)(uint64_t a1)
{
  specialized BinaryDecoder.decode(_:length:)(a1);
}

void BinaryDecoder.decodeRemainder()()
{
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1A0E7FC90@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (v3 >= BYTE6(a2))
    return 0;
  if (a3)
  {
    if (a3 == 1)
    {
      v4 = (int)a1;
      v5 = a1 >> 32;
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(_QWORD *)(a1 + 24);
    }
  }
  else
  {
    v4 = 0;
    v5 = BYTE6(a2);
  }
  if (v5 < v3 || v5 < v4)
  {
    __break(1u);
    JUMPOUT(0x1A0E7FD40);
  }
  return Data._Representation.subscript.getter();
}

uint64_t BinaryDecoder.deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t BinaryDecoder.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t BinaryDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8);
  v6 = swift_retain();
  return v5(v6, a2, a3);
}

uint64_t BinaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v22[6];

  v22[0] = a4;
  v22[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v22 - v7;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v22 - v11;
  v13 = v22[5];
  result = BinaryDecoder.decode<A>(_:)(AssociatedTypeWitness, a3, (uint64_t)v8);
  if (!v13)
  {
    dispatch thunk of RawRepresentable.init(rawValue:)();
    v15 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v16 = type metadata accessor for DecodingError();
      swift_allocError();
      v18 = v17;
      v22[2] = 0;
      v22[3] = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v19._countAndFlagsBits = 0xD000000000000034;
      v19._object = (void *)0x80000001A0F1B2D0;
      String.append(_:)(v19);
      v20._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._object = (void *)0x80000001A0F1B310;
      v21._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v21);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC458], v16);
      return swift_willThrow();
    }
    else
    {
      return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v15 + 32))(v22[0], v12, a2);
    }
  }
  return result;
}

uint64_t BinaryDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  result = BinaryDecoder.decode<A>(_:)(v9, a4, (uint64_t)&v13 - v10);
  if (!v4)
    return MEMORY[0x1A1B054CC](v11, a2, a3);
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding;
  if (!lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding)
  {
    v1 = type metadata accessor for String.Encoding();
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB1A28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding);
  }
  return result;
}

void specialized BinaryDecoder.decode(_:length:)(uint64_t a1)
{
  uint64_t v1;

  if (!__OFADD__(*(_QWORD *)(v1 + 32), a1))
  {
    swift_beginAccess();
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x1A0E80410);
}

uint64_t type metadata accessor for BinaryDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for BinaryDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t SystemCoordinator.ParticipantState.isSpatial.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SystemCoordinator.ParticipantState.seat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + 16, a1, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
}

uint64_t SystemCoordinator.ParticipantState.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + 120, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SystemCoordinator.ParticipantState.init(isSpatial:seat:role:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;

  *a4 = a1;
  v5 = (uint64_t)(a4 + 120);
  outlined init with take of Date?(a2, (uint64_t)(a4 + 16), &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  return outlined init with take of Date?(a3, v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

__n128 SystemCoordinator.ParticipantState.Seat.pose.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t SystemCoordinator.ParticipantState.Seat.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + 64, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SystemCoordinator.ParticipantState.Seat.hash(into:)()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = v0[1];
  v12 = *v0;
  v13 = v1;
  v2 = v0[3];
  v14 = v0[2];
  v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SystemCoordinator.ParticipantState.Seat.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  Hasher.init(_seed:)();
  v1 = v0[1];
  v12 = *v0;
  v13 = v1;
  v2 = v0[3];
  v14 = v0[2];
  v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SystemCoordinator.ParticipantState.Seat.init(pose:role:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  v4 = a1[3];
  a3[2] = a1[2];
  a3[3] = v4;
  return outlined init with take of Date?(a2, (uint64_t)(a3 + 4), &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SystemCoordinator.ParticipantState.Seat()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = v0[1];
  v12 = *v0;
  v13 = v1;
  v2 = v0[3];
  v14 = v0[2];
  v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinator.ParticipantState.Seat()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  Hasher.init(_seed:)();
  v1 = v0[1];
  v12 = *v0;
  v13 = v1;
  v2 = v0[3];
  v14 = v0[2];
  v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = a1;
  v5 = *a2;
  v6 = *((unsigned __int8 *)a2 + 8);
  v41 = *((unsigned __int8 *)a2 + 9);
  *(_BYTE *)a3 = a1[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial];
  (*(void (**)(__int128 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x70))(&v45);
  v7 = v52;
  if (v52 == 1)
  {
    v45 = 0u;
    v46 = 0u;
    v47 = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 104) = xmmword_1A0F10770;
    goto LABEL_11;
  }
  v38 = v3;
  v39 = v6;
  v40 = v5;
  v37 = v45;
  v8 = v46;
  v36 = *((_QWORD *)&v45 + 1);
  v9 = *((_QWORD *)&v46 + 1);
  v10 = v47;
  v11 = v48;
  v12 = v49;
  v13 = v50;
  v14 = v51;
  v15 = v53;
  if (v52)
  {
    swift_bridgeObjectRetain();
    role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v14, v7, &v42);
    v16 = v7;
  }
  else
  {
    v16 = 0;
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
  }
  v34 = v15;
  v35 = v14;
  v33 = v14;
  v17 = v37;
  v18 = v36;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v37, v36, v8, v9, v10, v11, v12, v13, v33, v16);
  outlined init with take of Date?((uint64_t)&v42, (uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v37, v36, v8, v9, v10, v11, v12, v13, v35, v7);
  outlined init with copy of URL?((uint64_t)&v45, a3 + 80, &demangling cache variable for type metadata for SpatialTemplateRole?);
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 64) = v12;
  *(_QWORD *)(a3 + 72) = v13;
  *(_QWORD *)(a3 + 48) = v10;
  *(_QWORD *)(a3 + 56) = v11;
  v19 = *((_QWORD *)&v46 + 1);
  v3 = v38;
  if (!*((_QWORD *)&v46 + 1))
  {
LABEL_11:
    if (!*(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8])
      goto LABEL_12;
    goto LABEL_16;
  }
  v20 = v47;
  v21 = __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
  v22 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v24);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v19);
  v28 = *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8];
  if (v28)
  {
    if (v25 == *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier] && v28 == v27)
    {

      swift_bridgeObjectRelease();
LABEL_13:
      outlined init with copy of URL?((uint64_t)&v45, a3 + 120, &demangling cache variable for type metadata for SpatialTemplateRole?);
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
LABEL_12:

      goto LABEL_13;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_16:
  v30 = *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8];
  if (v30)
  {
    v31 = *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
    swift_bridgeObjectRetain();
    role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v31, v30, &v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
  }

  outlined init with take of Date?((uint64_t)&v42, a3 + 120, &demangling cache variable for type metadata for SpatialTemplateRole?);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001A0F1B3B0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "%s: The provided role identifier does not match a role in the current template.", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }

  a3[3] = &type metadata for GenericSpatialTemplateRole;
  a3[4] = lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole();
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t GenericSpatialTemplateRole.roleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t GenericSpatialTemplateRole.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static GenericSpatialTemplateRole.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int GenericSpatialTemplateRole.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for SpatialTemplateRole.roleIdentifier.getter in conformance GenericSpatialTemplateRole()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinator.ParticipantStates.base.getter@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.ParticipantStates.base.getter(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>, a1);
}

uint64_t SystemCoordinator.ParticipantStates.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
  lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>();
  AsyncPublisher.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
}

uint64_t SystemCoordinator.ParticipantStates.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  return AsyncPublisher.makeAsyncIterator()();
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.init(baseIterator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.ParticipantStates.base.getter(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator, a1);
}

uint64_t SystemCoordinator.ParticipantStates.base.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*SystemCoordinator.ParticipantStates.Iterator.baseIterator.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return AsyncPublisher.Iterator.next()();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance SystemCoordinator.ParticipantStates.Iterator()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return AsyncPublisher.Iterator.next()();
}

uint64_t _s15GroupActivities17SystemCoordinatorC17ParticipantStatesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  *v1 = v0;
  v1[1] = _s15GroupActivities17SystemCoordinatorC17ParticipantStatesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncPublisher.Iterator.next()();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance SystemCoordinator.ParticipantStates()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  return outlined destroy of SystemCoordinator.ParticipantStates(v0);
}

uint64_t specialized static SystemCoordinator.ParticipantState.Seat.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  int v13;
  char v14;
  uint64_t *v15;
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  SPPose3D v29;
  uint64_t v30;
  SPPose3D v31;
  uint64_t v32;

  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(double *)(a2 + 48);
  v12 = *(double *)(a2 + 56);
  *(_OWORD *)&v31.position.x = *(_OWORD *)a1;
  *(_OWORD *)&v31.position.vector.f64[2] = v4;
  v31.rotation.vector.f64[2] = v6;
  v31.rotation.vector.f64[3] = v7;
  *(_OWORD *)v31.rotation.vector.f64 = v5;
  *(_OWORD *)&v29.position.x = v8;
  *(_OWORD *)&v29.position.vector.f64[2] = v9;
  v29.rotation.vector.f64[2] = v11;
  v29.rotation.vector.f64[3] = v12;
  *(_OWORD *)v29.rotation.vector.f64 = v10;
  v13 = SPPose3DEqualToPose(&v31, &v29);
  outlined init with copy of SystemCoordinator.ParticipantState.Seat((__int128 *)a1, (uint64_t)&v31);
  outlined init with copy of SystemCoordinator.ParticipantState.Seat((__int128 *)a2, (uint64_t)&v29);
  if (v13)
  {
    outlined init with copy of URL?((uint64_t)&v32, (uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
    if (v21)
    {
      outlined init with take of TypedPayloadDecoding(&v20, (uint64_t)v27);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
      memset(v27, 0, sizeof(v27));
      v28 = 0;
    }
    outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
    if (v21)
    {
      outlined init with take of TypedPayloadDecoding(&v20, (uint64_t)v25);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
      memset(v25, 0, sizeof(v25));
      v26 = 0;
    }
    outlined init with copy of URL?((uint64_t)v27, (uint64_t)&v20, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined init with copy of URL?((uint64_t)v25, (uint64_t)&v22, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (v21)
    {
      outlined init with copy of URL?((uint64_t)&v20, (uint64_t)v19, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      if (*((_QWORD *)&v23 + 1))
      {
        v17[0] = v22;
        v17[1] = v23;
        v18 = v24;
        v14 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v19, (uint64_t)v17);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v17);
        v15 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v19);
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v19);
        v14 = 0;
        v15 = (uint64_t *)&demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      }
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
      if (*((_QWORD *)&v23 + 1))
        v15 = (uint64_t *)&demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      else
        v15 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
      if (*((_QWORD *)&v23 + 1))
        v14 = 0;
      else
        v14 = -1;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, v15);
  }
  else
  {
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static SystemCoordinator.ParticipantState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  char v6;
  char v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[112];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[5];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[120];
  uint64_t v33;
  _BYTE v34[120];
  uint64_t v35;

  v4 = *a1;
  v5 = *a2;
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)v34);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)v32);
  if (v4 != v5)
  {
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
LABEL_20:
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
LABEL_21:
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
LABEL_22:
    v7 = 0;
    return v7 & 1;
  }
  outlined init with copy of URL?((uint64_t)&v35, (uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v18)
  {
    outlined init with take of TypedPayloadDecoding(&v17, (uint64_t)&v29);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v33, (uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v18)
  {
    outlined init with take of TypedPayloadDecoding(&v17, (uint64_t)&v26);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v29, (uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)&v26, (uint64_t)&v19, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (!v18)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
    if (!*((_QWORD *)&v20 + 1))
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
      outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
      goto LABEL_15;
    }
LABEL_19:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?));
    goto LABEL_20;
  }
  outlined init with copy of URL?((uint64_t)&v17, (uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (!*((_QWORD *)&v20 + 1))
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
    outlined destroy of AnySpatialTemplateRole((uint64_t)v16);
    goto LABEL_19;
  }
  v9 = v19;
  v10 = v20;
  *(_QWORD *)&v11 = v21;
  v6 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v16, (uint64_t)&v9);
  outlined destroy of AnySpatialTemplateRole((uint64_t)&v9);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
  outlined destroy of AnySpatialTemplateRole((uint64_t)v16);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
  if ((v6 & 1) == 0)
    goto LABEL_21;
LABEL_15:
  outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  outlined init with copy of URL?((uint64_t)&v27, (uint64_t)v23, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  if (v22 != 1)
  {
    outlined init with copy of URL?((uint64_t)&v17, (uint64_t)v16, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
    if (*((_QWORD *)&v24 + 1) != 1)
    {
      v13 = v23[4];
      v14 = v24;
      v15 = v25;
      v9 = v23[0];
      v10 = v23[1];
      v11 = v23[2];
      v12 = v23[3];
      v7 = specialized static SystemCoordinator.ParticipantState.Seat.== infix(_:_:)((uint64_t)v16, (uint64_t)&v9);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v9);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)v16);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
      return v7 & 1;
    }
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)v16);
    goto LABEL_26;
  }
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
  if (*((_QWORD *)&v24 + 1) != 1)
  {
LABEL_26:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for (SystemCoordinator.ParticipantState.Seat?, SystemCoordinator.ParticipantState.Seat?));
    goto LABEL_22;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  v7 = 1;
  return v7 & 1;
}

uint64_t outlined consume of SystemCoordinatorState.ParticipantState.Seat?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = a10;
  if (a10 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinator.ParticipantState.Seat, &type metadata for SystemCoordinator.ParticipantState.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for GenericSpatialTemplateRole(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GenericSpatialTemplateRole, &type metadata for GenericSpatialTemplateRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GenericSpatialTemplateRole, &type metadata for GenericSpatialTemplateRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GenericSpatialTemplateRole, &type metadata for GenericSpatialTemplateRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator;
  if (!lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator)
  {
    v1 = type metadata accessor for SystemCoordinator.ParticipantStates.Iterator(255);
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinator.ParticipantStates.Iterator, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinator.ParticipantStates.Iterator);
}

uint64_t destroy for SystemCoordinator.ParticipantState(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 104) >= 2uLL)
    result = __swift_destroy_boxed_opaque_existential_1Tm(result + 80);
  if (*(_QWORD *)(v1 + 144))
    return __swift_destroy_boxed_opaque_existential_1Tm(v1 + 120);
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 104);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v8 = *(_OWORD *)(a2 + 32);
    *v4 = *v5;
    *(_OWORD *)(a1 + 32) = v8;
    v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 32);
    *v4 = *v5;
    *(_OWORD *)(a1 + 32) = v10;
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    v12 = (_OWORD *)(a1 + 80);
    v13 = (_OWORD *)(a2 + 80);
    if (v6)
    {
      v14 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v6;
      *(_QWORD *)(a1 + 112) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v12, v13);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 96);
      *v12 = *v13;
      *(_OWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    }
  }
  v16 = (_OWORD *)(a1 + 120);
  v17 = (_OWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 144);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 136);
    *v16 = *v17;
    *(_OWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 16;
  v5 = (__int128 *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a2 + 104);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      v8 = *v5;
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)v4 = v8;
      v10 = *(_OWORD *)(a2 + 64);
      v11 = *(_OWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
      *(_OWORD *)(a1 + 64) = v10;
    }
    else
    {
      v18 = *v5;
      v19 = *(_OWORD *)(a2 + 32);
      v20 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v20;
      *(_OWORD *)v4 = v18;
      *(_OWORD *)(a1 + 32) = v19;
      v21 = (_OWORD *)(a1 + 80);
      v22 = (__int128 *)(a2 + 80);
      v23 = *(_QWORD *)(a2 + 104);
      if (v23)
      {
        *(_QWORD *)(a1 + 104) = v23;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        (**(void (***)(_OWORD *, __int128 *))(v23 - 8))(v21, v22);
      }
      else
      {
        v33 = *v22;
        v34 = *(_OWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *v21 = v33;
        *(_OWORD *)(a1 + 96) = v34;
      }
    }
  }
  else
  {
    if (v7 == 1)
    {
      outlined destroy of SystemCoordinator.ParticipantState.Seat(a1 + 16);
      v14 = v5[1];
      v13 = v5[2];
      *(_OWORD *)v4 = *v5;
      *(_OWORD *)(v4 + 16) = v14;
      *(_OWORD *)(v4 + 32) = v13;
      v16 = v5[4];
      v15 = v5[5];
      v17 = v5[3];
      *(_QWORD *)(v4 + 96) = *((_QWORD *)v5 + 12);
      *(_OWORD *)(v4 + 64) = v16;
      *(_OWORD *)(v4 + 80) = v15;
      *(_OWORD *)(v4 + 48) = v17;
      goto LABEL_16;
    }
    v24 = *(_QWORD *)(a2 + 16);
    v25 = *(_QWORD *)(a2 + 24);
    v26 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v25;
    v28 = *(_QWORD *)(a2 + 48);
    v27 = *(_QWORD *)(a2 + 56);
    v29 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v29;
    *(_QWORD *)(a1 + 48) = v28;
    *(_QWORD *)(a1 + 56) = v27;
    v30 = (_OWORD *)(a1 + 80);
    v31 = (__int128 *)(a2 + 80);
    v32 = *(_QWORD *)(a2 + 104);
    if (v6)
    {
      if (v32)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
        goto LABEL_16;
      }
      __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
    }
    else if (v32)
    {
      *(_QWORD *)(a1 + 104) = v32;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 80, a2 + 80);
      goto LABEL_16;
    }
    v35 = *v31;
    v36 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *v30 = v35;
    *(_OWORD *)(a1 + 96) = v36;
  }
LABEL_16:
  v37 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(a1 + 144))
  {
    if (v37)
    {
      *(_QWORD *)(a1 + 144) = v37;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 120, a2 + 120);
      return a1;
    }
LABEL_22:
    v38 = *(_OWORD *)(a2 + 120);
    v39 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v38;
    *(_OWORD *)(a1 + 136) = v39;
    return a1;
  }
  if (!v37)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
    goto LABEL_22;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  return a1;
}

uint64_t outlined destroy of SystemCoordinator.ParticipantState.Seat(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 64);
  return a1;
}

__n128 __swift_memcpy160_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6 == 1)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 104) == 1)
  {
    outlined destroy of SystemCoordinator.ParticipantState.Seat(a1 + 16);
LABEL_4:
    v7 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v7;
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(v5 + 96);
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    v9 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v9;
    goto LABEL_8;
  }
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 48) = v11;
  v13 = (_OWORD *)(a1 + 80);
  v14 = (_OWORD *)(a2 + 80);
  if (v6)
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
  v15 = *(_OWORD *)(a2 + 96);
  *v13 = *v14;
  *(_OWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
LABEL_8:
  if (*(_QWORD *)(a1 + 144))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 144);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 144) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.ParticipantState()
{
  return &type metadata for SystemCoordinator.ParticipantState;
}

uint64_t destroy for SystemCoordinator.ParticipantState.Seat(uint64_t result)
{
  if (*(_QWORD *)(result + 88))
    return __swift_destroy_boxed_opaque_existential_1Tm(result + 64);
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = a1 + 64;
  v7 = a2 + 64;
  v8 = *(_QWORD *)(a2 + 88);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = v9;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v6, v7);
  }
  else
  {
    v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v10;
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
  }
  return a1;
}

_QWORD *assignWithCopy for SystemCoordinator.ParticipantState.Seat(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  *a1 = v3;
  a1[1] = v4;
  v7 = a2[4];
  v6 = a2[5];
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  a1[4] = v7;
  a1[5] = v6;
  v9 = a1 + 8;
  v10 = a2 + 8;
  v11 = a2[11];
  if (!a1[11])
  {
    if (v11)
    {
      a1[11] = v11;
      a1[12] = a2[12];
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
      return a1;
    }
LABEL_7:
    v12 = *(_OWORD *)v10;
    v13 = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    *(_OWORD *)v9 = v12;
    *((_OWORD *)v9 + 1) = v13;
    return a1;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 8));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  return a1;
}

__n128 __swift_memcpy104_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = a1 + 64;
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantState.Seat(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantState.Seat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.ParticipantState.Seat()
{
  return &type metadata for SystemCoordinator.ParticipantState.Seat;
}

ValueMetadata *type metadata accessor for GenericSpatialTemplateRole()
{
  return &type metadata for GenericSpatialTemplateRole;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  return destroy for SystemCoordinator.ParticipantStates(a1, a2, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantStates()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E824E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantStates()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E824F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t type metadata accessor for SystemCoordinator.ParticipantStates(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinator.ParticipantStates);
}

void type metadata completion function for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for SystemCoordinator.ParticipantStates(a1, a2, a3, &lazy cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>, MEMORY[0x1E0C95E80]);
}

uint64_t initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2)
{
  return destroy for SystemCoordinator.ParticipantStates(a1, a2, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t destroy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantStates.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E826F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantStates.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E8274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void type metadata completion function for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for SystemCoordinator.ParticipantStates(a1, a2, a3, &lazy cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator, MEMORY[0x1E0C95E68]);
}

void type metadata completion function for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t))
{
  unint64_t v5;

  type metadata accessor for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
    v7 = lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>();
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t outlined destroy of SystemCoordinator.ParticipantStates(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t SPPose3DEqualToPose(SPPose3D *a1, SPPose3D *a2)
{
  int64x2_t v2;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;

  v2 = vceqq_f64(*(float64x2_t *)&a1->position.x, *(float64x2_t *)&a2->position.x);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)&a1->position.vector.f64[2], *(float64x2_t *)&a2->position.vector.f64[2]), (int8x16_t)v2)).u64[0] & 0x8000000000000000) == 0)return 0;
  v4 = *(float64x2_t *)a1->rotation.vector.f64;
  v5 = *(float64x2_t *)&a1->rotation.quaternion.vector.f64[2];
  v6 = *(float64x2_t *)a2->rotation.vector.f64;
  v7 = *(float64x2_t *)&a2->rotation.quaternion.vector.f64[2];
  v8 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v4, v6), (int8x16_t)vceqq_f64(v5, v7));
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0)
    return 1;
  v9 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v4, vnegq_f64(v6)), (int8x16_t)vceqq_f64(v5, vnegq_f64(v7)));
  return vandq_s8((int8x16_t)v9, (int8x16_t)vdupq_laneq_s64(v9, 1)).u64[0] >> 63;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantState.Seat(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  v7 = a2 + 64;
  v8 = a1 + 4;
  v9 = *((_QWORD *)a1 + 11);
  if (v9)
  {
    v10 = *((_QWORD *)a1 + 12);
    *(_QWORD *)(a2 + 88) = v9;
    *(_QWORD *)(a2 + 96) = v10;
    (**(void (***)(uint64_t, __int128 *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *v8;
    v12 = a1[5];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a1 + 12);
    *(_OWORD *)v7 = v11;
    *(_OWORD *)(v7 + 16) = v12;
  }
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SystemCoordinator.ParticipantState(a2, a1);
  return a2;
}

uint64_t outlined destroy of SystemCoordinator.ParticipantState(uint64_t a1)
{
  destroy for SystemCoordinator.ParticipantState(a1);
  return a1;
}

uint64_t AttachmentLedgerTopic.attachmentsPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 392))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DownloadAttachment]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>, MEMORY[0x1E0C95FB8]);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>, MEMORY[0x1E0C95950]);
  v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t closure #1 in AttachmentLedgerTopic.attachmentsPublisher.getter@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized _arrayForceCast<A, B>(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v16 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v16;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x1A1B05010](v5, a1);
        v16 = v3;
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          v3 = v16;
        }
        ++v5;
        v14 = type metadata accessor for Attachment();
        v15 = &protocol witness table for Attachment;
        *(_QWORD *)&v13 = v6;
        *(_QWORD *)(v3 + 16) = v8 + 1;
        outlined init with take of TypedPayloadDecoding(&v13, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (uint64_t *)(a1 + 32);
      do
      {
        v10 = *v9;
        v16 = v3;
        v11 = *(_QWORD *)(v3 + 16);
        v12 = *(_QWORD *)(v3 + 24);
        swift_retain();
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          v3 = v16;
        }
        v14 = type metadata accessor for Attachment();
        v15 = &protocol witness table for Attachment;
        *(_QWORD *)&v13 = v10;
        *(_QWORD *)(v3 + 16) = v11 + 1;
        outlined init with take of TypedPayloadDecoding(&v13, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DownloadAttachmentTopic.attachmentsPublisher.getter in conformance AttachmentLedgerTopic()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(**(_QWORD **)v0 + 392))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DownloadAttachment]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>, MEMORY[0x1E0C95FB8]);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>, MEMORY[0x1E0C95950]);
  v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t Attachment.assetSkeleton.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Attachment.MMCSMetadata();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v2[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v2[12] = v5;
  v2[13] = *(_QWORD *)(v5 - 8);
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Attachment.assetSkeleton.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A1B04BE4](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[15] = v4;
  *v4 = v0;
  v4[1] = Attachment.assetSkeleton.getter;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = v0[8];
  v2 = v0[5];
  v3 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
  }
  else
  {
    v5 = v0[16];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[7], v1, v2);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for AssetSkeleton();
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D109A0];
    v7 = Attachment.MMCSMetadata.assetSkeleton.getter();
    v9 = v8;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AssetSkeleton and conformance AssetSkeleton, v6, MEMORY[0x1E0D109B8]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v10 = v5;
    v12 = v0[13];
    v11 = v0[14];
    v13 = v0[12];
    if (!v10)
    {
      v18 = v0[7];
      v20 = v0[5];
      v19 = v0[6];
      outlined consume of Data._Representation(v7, v9);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v17 = (uint64_t (*)(void))v0[1];
      return v17();
    }
    v22 = v0[12];
    v14 = v0[6];
    v15 = v0[7];
    v16 = v0[5];
    outlined consume of Data._Representation(v7, v9);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentDownloadTask.Errors, &type metadata for AttachmentDownloadTask.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentDownloadTask.Errors, &type metadata for AttachmentDownloadTask.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors);
  }
  return result;
}

uint64_t Attachment.signal.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Signal();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF0A50], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in Attachment.signal.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Attachment.signal.getter, (uint64_t)v12);
  return swift_release();
}

uint64_t partial apply for closure #1 in Attachment.signal.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attachment.signal.getter(a1, v1);
}

uint64_t closure #1 in closure #1 in Attachment.signal.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[6] = a4;
  v5[7] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.YieldResult);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v7 = type metadata accessor for Signal();
  v5[13] = v7;
  v5[14] = *(_QWORD *)(v7 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v8 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v5[17] = v8;
  v5[18] = *(_QWORD *)(v8 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v9 = type metadata accessor for Attachment.UpdatingBlob();
  v5[22] = v9;
  v5[23] = *(_QWORD *)(v9 - 8);
  v5[24] = swift_task_alloc();
  v10 = type metadata accessor for Attachment.MMCSMetadata();
  v5[25] = v10;
  v5[26] = *(_QWORD *)(v10 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v5[29] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v5[30] = v11;
  v5[31] = *(_QWORD *)(v11 - 8);
  v5[32] = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v5[33] = v12;
  v5[34] = *(_QWORD *)(v12 - 8);
  v5[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in Attachment.signal.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[31];
  v1 = v0[32];
  v3 = v0[30];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v0[36] = JSONDecoder.init()();
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A1B04BE4](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[37] = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in Attachment.signal.getter;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
  {
    *(_DWORD *)(v2 + 320) = *MEMORY[0x1E0D148F8];
    *(_QWORD *)(v2 + 304) = 0;
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
    swift_release();
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_DWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 224), v1, v2);
  Attachment.MMCSMetadata.status.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v5, v6) == v4)
  {
    v8 = *(void **)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 96))(v12, *(_QWORD *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v12, v11);
    v13 = Attachment.UpdatingBlob.data.getter();
    v15 = v14;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Signal and conformance Signal, (uint64_t (*)(uint64_t))MEMORY[0x1E0D109F0], MEMORY[0x1E0D10A08]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v8)
    {
      v72 = *(_QWORD *)(v0 + 280);
      v67 = *(_QWORD *)(v0 + 272);
      v70 = *(_QWORD *)(v0 + 264);
      v16 = *(_QWORD *)(v0 + 224);
      v18 = *(_QWORD *)(v0 + 200);
      v17 = *(_QWORD *)(v0 + 208);
      v19 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 192);
      v21 = *(_QWORD *)(v0 + 176);
      outlined consume of Data._Representation(v13, v15);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v72, v70);
      *(_QWORD *)(v0 + 24) = v8;
      v22 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
      AsyncThrowingStream.Continuation.finish(throwing:)();
      swift_release();

      goto LABEL_6;
    }
    v74 = *(_QWORD *)(v0 + 200);
    v76 = *(_QWORD *)(v0 + 224);
    v69 = *(_QWORD *)(v0 + 192);
    v71 = *(_QWORD *)(v0 + 208);
    v64 = *(_QWORD *)(v0 + 184);
    v66 = *(_QWORD *)(v0 + 176);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = *(_QWORD *)(v0 + 128);
    v49 = *(_QWORD *)(v0 + 104);
    v48 = *(_QWORD *)(v0 + 112);
    v51 = *(_QWORD *)(v0 + 88);
    v50 = *(_QWORD *)(v0 + 96);
    v63 = *(_QWORD *)(v0 + 80);
    outlined consume of Data._Representation(v13, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v47, v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v63);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v69, v66);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v76, v74);
  }
  else
  {
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 8);
    v24(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v25 = *(_QWORD *)(v0 + 216);
    v26 = *(_QWORD *)(v0 + 224);
    v27 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 208);
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v25, v26, v27);
    swift_retain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v75 = v31;
      v65 = *(_QWORD *)(v0 + 144);
      v68 = *(_QWORD *)(v0 + 136);
      v32 = *(_QWORD *)(v0 + 64);
      v33 = *(_QWORD *)(v0 + 72);
      v34 = *(_QWORD *)(v0 + 48);
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_DWORD *)v35 = 136315394;
      v73 = v36;
      *(_QWORD *)(v0 + 32) = v36;
      *(_QWORD *)(v0 + 40) = v34;
      type metadata accessor for Attachment();
      swift_retain();
      v37 = String.init<A>(reflecting:)();
      *(_QWORD *)(v35 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)(v0 + 32));
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v35 + 12) = 2080;
      Attachment.MMCSMetadata.status.getter();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v33, 0, 1, v68);
      outlined init with copy of URL?(v33, v32, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v32, 1, v68) == 1)
      {
        v39 = 0xE300000000000000;
        v40 = 7104878;
      }
      else
      {
        v53 = *(_QWORD *)(v0 + 152);
        v52 = *(_QWORD *)(v0 + 160);
        v54 = *(_QWORD *)(v0 + 136);
        v55 = *(_QWORD *)(v0 + 144);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 32))(v52, *(_QWORD *)(v0 + 64), v54);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v53, v52, v54);
        v40 = String.init<A>(reflecting:)();
        v39 = v56;
        v24(v52, v54);
      }
      v58 = *(_QWORD *)(v0 + 216);
      v57 = *(_QWORD *)(v0 + 224);
      v60 = *(_QWORD *)(v0 + 200);
      v59 = *(_QWORD *)(v0 + 208);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 72), &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
      *(_QWORD *)(v35 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, (uint64_t *)(v0 + 32));
      swift_bridgeObjectRelease();
      v61 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v61(v58, v60);
      _os_log_impl(&dword_1A0DB3000, v30, v75, "%s's status doesn't have a signal blob, status: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v73, -1, -1);
      MEMORY[0x1A1B05CC4](v35, -1, -1);

      v61(v57, v60);
    }
    else
    {
      v42 = *(_QWORD *)(v0 + 216);
      v41 = *(_QWORD *)(v0 + 224);
      v43 = *(_QWORD *)(v0 + 200);
      v44 = *(_QWORD *)(v0 + 208);

      v45 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v45(v42, v43);
      swift_release_n();
      v45(v41, v43);
    }
  }
  v62 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v62;
  *v62 = v0;
  v62[1] = closure #1 in closure #1 in Attachment.signal.getter;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    *(_QWORD *)(v2 + 304) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Attachment.waitForUploadFinished()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[5] = v0;
  v1[6] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v2 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v3 = type metadata accessor for Attachment.MMCSMetadata();
  v1[14] = v3;
  v1[15] = *(_QWORD *)(v3 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v1[18] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v1[19] = v4;
  v1[20] = *(_QWORD *)(v4 - 8);
  v1[21] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v1[22] = v5;
  v1[23] = *(_QWORD *)(v5 - 8);
  v1[24] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[19];
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A1B04BE4](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[25] = v4;
  *v4 = v0;
  v4[1] = Attachment.waitForUploadFinished();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    *(_DWORD *)(v2 + 216) = *MEMORY[0x1E0D14900];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t (*v5)(void);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  v6 = *(_DWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 136), v1, v2);
  Attachment.MMCSMetadata.status.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8) == v6)
  {
    v11 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 8);
  v17(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72));
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v54 = v24;
    v25 = *(_QWORD *)(v0 + 80);
    v52 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 56);
    v27 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 40);
    v29 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    *(_DWORD *)v29 = 136315394;
    v53 = v30;
    *(_QWORD *)(v0 + 24) = v30;
    *(_QWORD *)(v0 + 32) = v28;
    swift_retain();
    v31 = String.init<A>(reflecting:)();
    *(_QWORD *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)(v0 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v29 + 12) = 2080;
    Attachment.MMCSMetadata.status.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v52);
    outlined init with copy of URL?(v27, v26, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v52) == 1)
    {
      v33 = 0xE300000000000000;
      v34 = 7104878;
    }
    else
    {
      v43 = *(_QWORD *)(v0 + 88);
      v42 = *(_QWORD *)(v0 + 96);
      v45 = *(_QWORD *)(v0 + 72);
      v44 = *(_QWORD *)(v0 + 80);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 32))(v42, *(_QWORD *)(v0 + 56), v45);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v42, v45);
      v34 = String.init<A>(reflecting:)();
      v33 = v46;
      v17(v42, v45);
    }
    v48 = *(_QWORD *)(v0 + 128);
    v47 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 120);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    *(_QWORD *)(v29 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, (uint64_t *)(v0 + 24));
    swift_bridgeObjectRelease();
    v39 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v39(v48, v50);
    _os_log_impl(&dword_1A0DB3000, v23, v54, "%s's status is currently: %s, not finished.", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v53, -1, -1);
    MEMORY[0x1A1B05CC4](v29, -1, -1);

    v40 = v47;
    v41 = v50;
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 112);
    v37 = *(_QWORD *)(v0 + 120);

    v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v39(v36, v38);
    swift_release_n();
    v40 = v35;
    v41 = v38;
  }
  v39(v40, v41);
  v51 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v51;
  *v51 = v0;
  v51[1] = Attachment.waitForUploadFinished();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for DownloadAttachment.id.getter in conformance Attachment()
{
  return Attachment.id.getter();
}

uint64_t protocol witness for DownloadAttachment.assetSkeleton.getter in conformance Attachment(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return Attachment.assetSkeleton.getter(a1);
}

uint64_t protocol witness for DownloadAttachment.signal.getter in conformance Attachment()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Signal();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF0A50], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t protocol witness for DownloadAttachment.waitForUploadFinished() in conformance Attachment()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return Attachment.waitForUploadFinished()();
}

uint64_t AttachmentDownloadTask.topic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1 + 112, a1);
}

uint64_t AttachmentDownloadTask.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1 + 152, a1);
}

uint64_t AttachmentDownloadTask.file.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path setter for AttachmentDownloadTask.signalHandler : AttachmentDownloadTask(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t AttachmentDownloadTask.signalHandler.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t AttachmentDownloadTask.signalHandler.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*AttachmentDownloadTask.signalHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

BOOL static AttachmentDownloadTask.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AttachmentDownloadTask.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int AttachmentDownloadTask.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[2];

  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v15 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)((uint64_t)v12, (uint64_t)v18, a3, a4, v22[1], v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v20;
}

uint64_t AttachmentDownloadTask.init(topic:attachment:file:manager:)(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  swift_defaultActor_initialize();
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding(a1, v4 + 112);
  outlined init with take of TypedPayloadDecoding(a2, v4 + 152);
  v9 = v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  outlined init with take of TypedPayloadDecoding(a4, v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  return v4;
}

uint64_t AttachmentDownloadTask.start()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for Asset();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v3 = type metadata accessor for AssetSkeleton();
  v1[14] = v3;
  v1[15] = *(_QWORD *)(v3 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v4 = type metadata accessor for TaskPriority();
  v1[20] = v4;
  v1[21] = *(_QWORD *)(v4 - 8);
  v1[22] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20;

  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v1, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[22];
    v16 = v0[20];
    v17 = v0[21];
    v5 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v5 = 136315394;
    v6 = AttachmentDownloadTask.description.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v16);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s received download request with priority: %s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v11 = (_QWORD *)v0[8];
  v12 = v11[22];
  v13 = v11[23];
  __swift_project_boxed_opaque_existential_1(v11 + 19, v12);
  v19 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v13 + 16) + *(_QWORD *)(v13 + 16));
  v14 = (_QWORD *)swift_task_alloc();
  v0[24] = v14;
  *v14 = v0;
  v14[1] = AttachmentDownloadTask.start();
  return v19(v0[19], v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 16);
  v1(v0[18], v0[19], v0[14]);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[18];
  v7 = v0[14];
  v6 = v0[15];
  if (v4)
  {
    v9 = v0[12];
    v8 = v0[13];
    v10 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v10 = 136315138;
    v1(v8, v5, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
    outlined init with copy of URL?(v8, v9, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v7) == 1)
    {
      v11 = 0xE300000000000000;
      v12 = 7104878;
    }
    else
    {
      v14 = v0[16];
      v15 = v0[17];
      v17 = v0[14];
      v16 = v0[15];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v15, v0[12], v17);
      v1(v14, v15, v17);
      v12 = String.init<A>(reflecting:)();
      v11 = v18;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    v19 = v0[18];
    v21 = v0[14];
    v20 = v0[15];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[13], &demangling cache variable for type metadata for AssetSkeleton?);
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v13(v19, v21);
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Unpacked skeleton: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v13(v0[18], v0[14]);
  }

  v0[26] = v13;
  v22 = (_QWORD *)swift_task_alloc();
  v0[27] = v22;
  *v22 = v0;
  v22[1] = AttachmentDownloadTask.start();
  return AttachmentDownloadTask.start(asset:)(v0[19]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = (void *)v0[28];
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[28];
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = AttachmentDownloadTask.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[3] = v6;
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Failed to download asset through skeleton %s, attempting directly through the asset.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v14 = (void *)v0[28];
    swift_release_n();

  }
  AssetSkeleton.asset.getter();
  v15 = (_QWORD *)swift_task_alloc();
  v0[29] = v15;
  *v15 = v0;
  v15[1] = AttachmentDownloadTask.start();
  return AttachmentDownloadTask.start(asset:)(v0[11]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 112);

  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentDownloadTask.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(68);
  v0._object = (void *)0x80000001A0F1B3D0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A6369706F74202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachmentTopic);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A656C6966202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x686361747461202CLL;
  v4._object = (void *)0xEE00203A746E656DLL;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[36] = a1;
  v2[37] = v1;
  v3 = type metadata accessor for SimultaneousTransferError();
  v2[38] = v3;
  v2[39] = *(_QWORD *)(v3 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v4 = type metadata accessor for Asset();
  v2[42] = v4;
  v2[43] = *(_QWORD *)(v4 - 8);
  v2[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[45] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[46] = v5;
  v2[47] = *(_QWORD *)(v5 - 8);
  v2[48] = swift_task_alloc();
  v6 = type metadata accessor for AssetDownloadRequest();
  v2[49] = v6;
  v2[50] = *(_QWORD *)(v6 - 8);
  v2[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v7 = type metadata accessor for AssetSkeleton();
  v2[54] = v7;
  v2[55] = *(_QWORD *)(v7 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for SimultaneousTransferError();
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  type metadata accessor for Credential();
  v2[25] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v6 = type metadata accessor for AssetDownloadRequest();
  v2[29] = v6;
  v2[30] = *(_QWORD *)(v6 - 8);
  v2[31] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v2[32] = v7;
  v2[33] = *(_QWORD *)(v7 - 8);
  v2[34] = swift_task_alloc();
  v8 = type metadata accessor for DownloadToken();
  v2[35] = v8;
  v2[36] = *(_QWORD *)(v8 - 8);
  v2[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v9 = type metadata accessor for Asset();
  v2[41] = v9;
  v2[42] = *(_QWORD *)(v9 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentDownloadTask.start(asset:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *log;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v43)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v44;

  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v1 = v0[58];
  v2 = v0[54];
  v3 = v0[55];
  v4 = v0[36];
  v5 = type metadata accessor for Logger();
  v0[59] = __swift_project_value_buffer(v5, (uint64_t)static Log.downloadTask);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[58];
  v12 = v0[54];
  v11 = v0[55];
  v42 = v6;
  if (v9)
  {
    v40 = v8;
    log = v7;
    v13 = v0[53];
    v38 = v0[52];
    v14 = swift_slowAlloc();
    v39 = swift_slowAlloc();
    v44 = v39;
    *(_DWORD *)v14 = 136315394;
    v15 = AttachmentDownloadTask.description.getter();
    v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v6(v13, v10, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
    outlined init with copy of URL?(v13, v38, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v12) == 1)
    {
      v17 = 0xE300000000000000;
      v18 = 7104878;
    }
    else
    {
      v20 = v0[56];
      v19 = v0[57];
      v21 = v0[54];
      v22 = v0[55];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 32))(v19, v0[52], v21);
      v6(v20, v19, v21);
      v18 = String.init<A>(reflecting:)();
      v17 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
    }
    v24 = v0[58];
    v25 = v0[54];
    v26 = v0[55];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[53], &demangling cache variable for type metadata for AssetSkeleton?);
    v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    v7 = log;
    _os_log_impl(&dword_1A0DB3000, log, v40, "%s Starting to attempt to download attachment through AssetSkeleton %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v39, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  v27 = v0[57];
  v28 = v0[54];
  v29 = v0[47];
  v30 = v0[48];
  v31 = v0[46];
  v33 = v0[36];
  v32 = v0[37];
  v34 = *(_QWORD *)(v32 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 24);
  v35 = *(_QWORD *)(v32 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v32 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager), v34);
  v42(v27, v33, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v32 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v31);
  AssetDownloadRequest.init(skeleton:fileURL:)();
  v43 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(**(int **)(v35 + 32) + *(_QWORD *)(v35 + 32));
  v36 = (_QWORD *)swift_task_alloc();
  v0[60] = v36;
  *v36 = v0;
  v36[1] = AttachmentDownloadTask.start(asset:);
  return v43(v0 + 7, v0[51], v34, v35);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[50] + 8))(v2[51], v2[49]);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20;

  v1 = (_QWORD *)(v0 + 16);
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v0 + 16);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v20 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v20);
    v1 = (_QWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Fetched AssetDownloadCoordinator", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 296);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = swift_allocObject();
  swift_weakInit();
  outlined init with copy of AudioSessionAssertionManager(v9 + 152, v0 + 136);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v1, v0 + 96);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 136), (uint64_t)(v12 + 4));
  v12[9] = v11;
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 96), (uint64_t)(v12 + 10));
  v13 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentDownloadTask.start(asset:), (uint64_t)v12);
  v14 = (uint64_t *)(v9 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *v14 = v13;
  swift_release();
  v15 = *(_QWORD *)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v1, v15);
  v19 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v16 + 8) + *(_QWORD *)(v16 + 8));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v17;
  *v17 = v0;
  v17[1] = AttachmentDownloadTask.start(asset:);
  return v19(*(_QWORD *)(v0 + 352), v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[43] + 8))(v2[44], v2[42]);
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s finished download", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  $defer #1 () in AttachmentDownloadTask.start(asset:)(*(_QWORD *)(v0 + 296));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  _BYTE *v10;
  uint64_t v12;

  v1 = *(void **)(v0 + 488);
  *(_QWORD *)(v0 + 208) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v12 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = AttachmentDownloadTask.description.getter();
      *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v6, -1, -1);
      MEMORY[0x1A1B05CC4](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v9 = *(void **)(v0 + 488);
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *v10 = 1;
    swift_willThrow();

  }
  else
  {
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  uint64_t v29[2];

  v1 = v0 + 16;
  v2 = *(void **)(v0 + 504);
  swift_retain();
  v3 = v2;
  swift_retain();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 504);
    v8 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)v8 = 136315394;
    v9 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 240) = v7;
    v11 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "%s Failed to finish downloading, error: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    v1 = v0 + 16;
    MEMORY[0x1A1B05CC4](v28, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 504);
    swift_release_n();

  }
  v15 = *(void **)(v0 + 504);
  *(_QWORD *)(v0 + 216) = v15;
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v29[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = AttachmentDownloadTask.description.getter();
      *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "%s caught SimultaneousTransferError", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v24 = *(void **)(v0 + 504);
    v25 = *(_QWORD *)(v0 + 296);
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *v26 = 1;
    swift_willThrow();

    $defer #1 () in AttachmentDownloadTask.start(asset:)(v25);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 296);
    swift_willThrow();
    $defer #1 () in AttachmentDownloadTask.start(asset:)(v23);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *log;
  uint64_t v42;

  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 376) = __swift_project_value_buffer(v5, (uint64_t)static Log.downloadTask);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 384) = v6;
  v6(v2, v1, v3);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  if (v9)
  {
    v40 = v8;
    log = v7;
    v37 = *(_QWORD *)(v0 + 320);
    v38 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 368);
    v13 = swift_slowAlloc();
    v39 = swift_slowAlloc();
    v42 = v39;
    *(_DWORD *)v13 = 136315394;
    v14 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v6(v37, v36, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v37, 0, 1, v12);
    outlined init with copy of URL?(v37, v38, &demangling cache variable for type metadata for Asset?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v12) == 1)
    {
      v16 = 0xE300000000000000;
      v17 = 7104878;
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 352);
      v19 = *(_QWORD *)(v0 + 360);
      v21 = *(_QWORD *)(v0 + 328);
      v22 = *(_QWORD *)(v0 + 336);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 32))(v19, *(_QWORD *)(v0 + 312), v21);
      v6(v20, v19, v21);
      v17 = String.init<A>(reflecting:)();
      v16 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
    }
    v24 = *(_QWORD *)(v0 + 368);
    v25 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 336);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 320), &demangling cache variable for type metadata for Asset?);
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v18(v24, v25);
    v7 = log;
    _os_log_impl(&dword_1A0DB3000, log, v40, "%s Starting to attempt to download attachment directly from Asset %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v39, -1, -1);
    MEMORY[0x1A1B05CC4](v13, -1, -1);
  }
  else
  {
    swift_release_n();
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v12);
  }

  *(_QWORD *)(v0 + 392) = v18;
  v27 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 144);
  v29 = type metadata accessor for TaskPriority();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v27, 1, 1, v29);
  outlined init with copy of AudioSessionAssertionManager(v28 + 152, v0 + 16);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 16), v31 + 32);
  v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentDownloadTask.start(asset:), v31);
  *(_QWORD *)(v0 + 400) = v32;
  v30(v27, 1, 1, v29);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v32;
  swift_retain();
  *(_QWORD *)(v0 + 408) = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #2 in AttachmentDownloadTask.start(asset:), (uint64_t)v33);
  v34 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 416) = v34;
  *(_QWORD *)(v0 + 424) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v34 = v0;
  v34[1] = AttachmentDownloadTask.start(asset:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v16;

  MEMORY[0x1A1B04B54](v0[51], MEMORY[0x1E0DEE9C0] + 8, v0[53], MEMORY[0x1E0DEDB38]);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v16 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentDownloadTask.description.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s Requesting downloadToken", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v7 = (_QWORD *)v0[18];
  v8 = v7 + 19;
  v9 = v7[17];
  v10 = v7[18];
  __swift_project_boxed_opaque_existential_1(v7 + 14, v9);
  v11 = v7[22];
  v12 = v7[23];
  __swift_project_boxed_opaque_existential_1(v8, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v15 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v10 + 16) + *(_QWORD *)(v10 + 16));
  v13 = (_QWORD *)swift_task_alloc();
  v0[55] = v13;
  *v13 = v0;
  v13[1] = AttachmentDownloadTask.start(asset:);
  return v15(v0[37], v0[34], v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v23 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentDownloadTask.description.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s Received downloadToken, fetching Asset", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v7 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  v8 = v0[45];
  v9 = v0[41];
  v11 = v0[27];
  v10 = v0[28];
  v12 = v0[26];
  v17 = v0[24];
  v18 = v0[23];
  v19 = v0[22];
  v13 = v0[17];
  v14 = v0[18];
  v22 = *(_QWORD *)(v14 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 24);
  v20 = *(_QWORD *)(v14 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v14 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager), v22);
  v7(v8, v13, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v12);
  dispatch thunk of Token.accountID.getter();
  dispatch thunk of Token.token.getter();
  type metadata accessor for Credential.Builder();
  swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  dispatch thunk of Token.expirationDate.getter();
  Credential.Builder.setExpirationDate(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  Credential.Builder.build()();
  swift_release();
  AssetDownloadRequest.init(asset:fileURL:credential:)();
  v21 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v20 + 24) + *(_QWORD *)(v20 + 24));
  v15 = (_QWORD *)swift_task_alloc();
  v0[57] = v15;
  *v15 = v0;
  v15[1] = AttachmentDownloadTask.start(asset:);
  return v21(v0[43], v0[31], v22, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[30] + 8))(v2[31], v2[29]);
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(_QWORD, _QWORD))(v0 + 392))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v11 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 280);
    v13 = *(_QWORD *)(v0 + 296);
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v14 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s finished download", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 280);
    swift_release();

    swift_release_n();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v32[2];

  v1 = *(void **)(v0 + 464);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 464);
    v7 = swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    v8 = v32[0];
    *(_DWORD *)v7 = 136315394;
    v9 = AttachmentDownloadTask.description.getter();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v6;
    v11 = v6;
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Failed to finish downloading, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 464);
    swift_release_n();

  }
  v15 = *(void **)(v0 + 464);
  *(_QWORD *)(v0 + 56) = v15;
  v16 = v15;
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v32[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = AttachmentDownloadTask.description.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "%s caught SimultaneousTransferError", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v26 = *(void **)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 296);
    v29 = *(_QWORD *)(v0 + 280);
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *v30 = 1;
    swift_willThrow();
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 288);
    v23 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 280);
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  v7 = type metadata accessor for Signal();
  v6[17] = v7;
  v6[18] = *(_QWORD *)(v7 - 8);
  v6[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Signal?);
  v6[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>);
  v6[21] = v8;
  v6[22] = *(_QWORD *)(v8 - 8);
  v6[23] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Iterator);
  v6[24] = v9;
  v6[25] = *(_QWORD *)(v9 - 8);
  v6[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[22];
  v2 = v0[23];
  v3 = v0[21];
  v4 = (_QWORD *)v0[14];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v0[27] = JSONDecoder.init()();
  v6 = v4[3];
  v5 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v6, v5);
  MEMORY[0x1A1B04BE4](v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  v7 = (_QWORD *)swift_task_alloc();
  v0[28] = v7;
  *v7 = v0;
  v7[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD, uint64_t, uint64_t);
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    swift_release();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 152), v1, v2);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 232) = Strong;
  if (!Strong)
  {
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 144);
    v20 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 136);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    goto LABEL_9;
  }
  v5 = Strong;
  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 240) = __swift_project_value_buffer(v6, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v29 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v11 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 64) = v11;
    v12._object = (void *)0x80000001A0F1B3D0;
    v12._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v12);
    *(_QWORD *)(v0 + 104) = v5;
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 0x3A6369706F74202CLL;
    v13._object = (void *)0xE900000000000020;
    String.append(_:)(v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachmentTopic);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0x203A656C6966202CLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x686361747461202CLL;
    v16._object = (void *)0xEE00203A746E656DLL;
    String.append(_:)(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
    _print_unlocked<A, B>(_:_:)();
    *(_QWORD *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), &v29);
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "%s Received signal blob, sending over to coordinator.", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v24 = *(_QWORD **)(v0 + 128);
  v25 = v24[3];
  v26 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v25);
  v28 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v26 + 16) + *(_QWORD *)(v26 + 16));
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v27;
  *v27 = v0;
  v27[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  return v28(*(_QWORD *)(v0 + 152), v25, v26);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[18];
  v1 = v0[19];
  v3 = v0[17];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[33] = v4;
  *v4 = v0;
  v4[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  v1 = *(void **)(v0 + 96);
  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.downloadTask);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 88) = v1;
    v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Signal listener failed for: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  v1 = (void *)v0[32];
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[32];
    v7 = v0[18];
    v20 = v0[19];
    v8 = v0[17];
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    v0[10] = v6;
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to handle updated attachment, reason: %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v8);
  }
  else
  {
    v14 = (void *)v0[32];
    v16 = v0[18];
    v15 = v0[19];
    v17 = v0[17];

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  v18 = (_QWORD *)swift_task_alloc();
  v0[33] = v18;
  *v18 = v0;
  v18[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 32) + *(_QWORD *)(v3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v6(v2, v3);
}

uint64_t $defer #1 () in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];

  if (one-time initialization token for downloadTask != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = AttachmentDownloadTask.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "%s Cleaning up signalHandler", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  v10 = *v9;
  if (*v9)
  {
    swift_retain();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A1B04B54](v10, MEMORY[0x1E0DEE9C0] + 8, v11, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  *v9 = 0;
  return swift_release();
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in AttachmentDownloadTask.start(asset:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = closure #2 in AttachmentDownloadTask.start(asset:);
  return v3(5000000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1A1B04B54](v1, MEMORY[0x1E0DEE9C0] + 8, v2, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentDownloadTask.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AttachmentDownloadTask.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AttachmentDownloadTask.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a6;
  v26 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  v22 = a7;
  v23 = a9;
  v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v16, a2, a7);
  type metadata accessor for AttachmentDownloadTask();
  v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding(&v24, v17 + 112);
  outlined init with take of TypedPayloadDecoding(&v21, v17 + 152);
  v18 = v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
  outlined init with take of TypedPayloadDecoding(a4, v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  return v17;
}

uint64_t sub_1A0E8992C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0E89950()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[9];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentDownloadTask.start(asset:)(a1, v4, v5, (uint64_t)(v1 + 4), v6, (uint64_t)(v1 + 10));
}

uint64_t sub_1A0E89A10()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AttachmentDownloadTask.start(asset:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1A0E89A9C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in AttachmentDownloadTask.start(asset:)(a1, v4, v5, v6);
}

uint64_t sub_1A0E89B7C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t dispatch thunk of DownloadAttachment.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DownloadAttachment.assetSkeleton.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of DownloadAttachment.signal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DownloadAttachment.waitForUploadFinished()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 32) + *(_QWORD *)(a2 + 32));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v7(a1, a2);
}

uint64_t dispatch thunk of DownloadAttachmentTopic.attachmentsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DownloadAttachmentTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t ObjC metadata update function for AttachmentDownloadTask()
{
  return type metadata accessor for AttachmentDownloadTask();
}

uint64_t type metadata accessor for AttachmentDownloadTask()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AttachmentDownloadTask;
  if (!type metadata singleton initialization cache for AttachmentDownloadTask)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AttachmentDownloadTask()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AttachmentDownloadTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.start()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 160) + *(_QWORD *)(*(_QWORD *)v0 + 160));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 168) + *(_QWORD *)(*(_QWORD *)v1 + 168));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t storeEnumTagSinglePayload for AttachmentDownloadTask.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E89FD4 + 4 * byte_1A0F130F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E8A008 + 4 * asc_1A0F130F0[v4]))();
}

uint64_t sub_1A0E8A008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E8A010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E8A018);
  return result;
}

uint64_t sub_1A0E8A024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E8A02CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E8A030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E8A038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentDownloadTask.Errors()
{
  return &type metadata for AttachmentDownloadTask.Errors;
}

uint64_t sub_1A0E8A054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.signal.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in Attachment.signal.getter(a1, v5, v6, v7, v8);
}

uint64_t _SpatialTemplateElementOutput.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 96) = v7;
  return swift_bridgeObjectRetain();
}

__n128 _SpatialTemplateElementOutput.init(output:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *((_QWORD *)a1 + 5);
  v3 = *((_QWORD *)a1 + 6);
  v4 = *((_BYTE *)a1 + 96);
  v6 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_QWORD *)(a2 + 40) = v2;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 48) = v3;
  result = (__n128)a1[4];
  v8 = a1[5];
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 96) = v4;
  return result;
}

__n128 SpatialTemplateSeatElement.position.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;

  result = *v1;
  v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 SpatialTemplateSeatElement.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t SpatialTemplateSeatElement.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + 88, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

__n128 SpatialTemplateSeatElement._output.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 result;
  __int128 v13;
  uint64_t v14[2];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  outlined init with copy of URL?((uint64_t)v1 + 88, (uint64_t)v15, &demangling cache variable for type metadata for SpatialTemplateRole?);
  v4 = v16;
  if (v16)
  {
    v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    SpatialTemplateRole.output.getter(v5, v14);
    v4 = v14[0];
    v6 = v14[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for SpatialTemplateRole?);
    v6 = 0;
  }
  v7 = *v2;
  v8 = *((_QWORD *)v2 + 2);
  v9 = *((_QWORD *)v2 + 3);
  v10 = *((_QWORD *)v2 + 4);
  v11 = *((_BYTE *)v2 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 48) = v10;
  result = (__n128)v2[3];
  v13 = v2[4];
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 96) = v11;
  return result;
}

double static SpatialTemplateElementPosition.app.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 static SpatialTemplateElementDirection.lookingAt(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  __n128 result;

  v3 = a1[1].n128_u64[0];
  v2 = a1[1].n128_u64[1];
  result = *a1;
  a2->n128_u64[0] = 0;
  a2[1] = result;
  a2[2].n128_u64[0] = v3;
  a2[2].n128_u64[1] = v2;
  a2[3].n128_u8[0] = 0;
  return result;
}

uint64_t SpatialTemplateSeatElement.init(position:direction:role:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 3);
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a4 + 16) = *((_QWORD *)a1 + 2);
  *(_QWORD *)(a4 + 24) = v5;
  *(_OWORD *)a4 = v4;
  *(_QWORD *)(a4 + 32) = v6;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a4 + 64) = v8;
  *(_BYTE *)(a4 + 80) = v7;
  return outlined init with take of SpatialTemplateRole?(a3, a4 + 88);
}

BOOL static SpatialTemplateElementPosition.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL4 v2;

  v2 = *a1 == *a2;
  if (a1[1] != a2[1])
    v2 = 0;
  return a1[2] == a2[2] && v2;
}

uint64_t SpatialTemplateSeatElement.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 80);
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v0 + 88, (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SpatialTemplateSeatElement.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 80);
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v1 + 88, (uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v9 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v8, (uint64_t)v11);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v11, 0, sizeof(v11));
    v12 = 0;
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)&v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = v8;
    v6 = v9;
    v7 = v10;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

__n128 protocol witness for SpatialTemplateElement.position.getter in conformance SpatialTemplateSeatElement@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;

  result = *v1;
  v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 protocol witness for SpatialTemplateElement.direction.getter in conformance SpatialTemplateSeatElement@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t protocol witness for SpatialTemplateElement.role.getter in conformance SpatialTemplateSeatElement@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + 88, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateSeatElement()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 80);
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v0 + 88, (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateSeatElement()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 80);
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v1 + 88, (uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v9 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v8, (uint64_t)v11);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v11, 0, sizeof(v11));
    v12 = 0;
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)&v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = v8;
    v6 = v9;
    v7 = v10;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

__n128 static SpatialTemplateElement<>.seat(position:direction:role:)@<Q0>(__int128 *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __n128 result;
  __n128 v12;
  __int128 v13;

  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = a2->n128_u64[0];
  v12 = a2[1];
  v13 = *a1;
  v8 = a2[2].n128_u64[0];
  v9 = a2[2].n128_u64[1];
  v10 = a2[3].n128_u8[0];
  outlined init with copy of URL?(a3, a4 + 88, &demangling cache variable for type metadata for SpatialTemplateRole?);
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 24) = v6;
  *(_OWORD *)a4 = v13;
  *(_QWORD *)(a4 + 32) = v7;
  result = v12;
  *(__n128 *)(a4 + 48) = v12;
  *(_QWORD *)(a4 + 64) = v8;
  *(_QWORD *)(a4 + 72) = v9;
  *(_BYTE *)(a4 + 80) = v10;
  return result;
}

__n128 SpatialTemplateElementDirection.output.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

__n128 SpatialTemplateElementDirection.init(output:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 48) = v2;
  return result;
}

__n128 static SpatialTemplateElementDirection.lookingAt(_:)@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v8, v3, v4);
  v6 = v9;
  v5 = v10;
  result = v8;
  a2->n128_u64[0] = 0;
  a2[1] = result;
  a2[2].n128_u64[0] = v6;
  a2[2].n128_u64[1] = v5;
  a2[3].n128_u8[0] = 0;
  return result;
}

_BYTE *static SpatialTemplateElementDirection.alignedWith(appAxis:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  uint64_t v3;

  v2 = *result == 0;
  *(_QWORD *)a2 = 0;
  v3 = 2;
  if (v2)
    v3 = 0;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

__n128 static SpatialTemplateElementDirection.+ infix(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;
  __n128 result;
  __int128 v5;

  v3 = *(_BYTE *)(a1 + 48);
  *(double *)a2 = *(double *)a1 + a3;
  result = *(__n128 *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 48) = v3;
  return result;
}

double SpatialTemplateElementDirection.rotatedBy(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  double result;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_BYTE *)(v2 + 48);
  if ((v4 & 1) != 0)
  {
    v5 = 0;
    v3 = *(_QWORD *)(v2 + 16);
    v6 = 0uLL;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
    v6 = *(_OWORD *)(v2 + 24);
  }
  result = *(double *)v2 + a2;
  *(double *)a1 = result;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

void SpatialTemplateElementDirection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int SpatialTemplateElementDirection.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialTemplateElementDirection()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpatialTemplateElementDirection()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateElementDirection()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t SpatialTemplateElementAxis.storage.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL static SpatialTemplateElementAxis.Storage.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SpatialTemplateElementAxis.Storage.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int SpatialTemplateElementAxis.Storage.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

GroupActivities::SpatialTemplateElementAxis __swiftcall SpatialTemplateElementAxis.init(storage:)(GroupActivities::SpatialTemplateElementAxis storage)
{
  _BYTE *v1;

  *v1 = storage.storage & 1;
  return storage;
}

void static SpatialTemplateElementAxis.x.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SpatialTemplateElementAxis.z.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void SpatialTemplateElementAxis.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SpatialTemplateElementAxis.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int SpatialTemplateElementAxis.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

__n128 SpatialTemplateElementPosition.output.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;

  result = *v1;
  v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 SpatialTemplateElementPosition.init(output:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;

  result = *a1;
  v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  *a2 = result;
  return result;
}

void SpatialTemplateElementPosition.offsetBy(x:z:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  double *v3;

  SPVector3DMake(*v3 + a2, v3[1], v3[2] + a3, a1);
}

void SpatialTemplateElementPosition.offsetBy(x:)(double *a1@<X8>, double a2@<D0>)
{
  double *v2;

  SPVector3DMake(*v2 + a2, v2[1], v2[2] + 0.0, a1);
}

void SpatialTemplateElementPosition.offsetBy(z:)(double *a1@<X8>, double a2@<D0>)
{
  double *v2;

  SPVector3DMake(*v2 + 0.0, v2[1], v2[2] + a2, a1);
}

uint64_t SpatialTemplateElementPosition.hash(into:)()
{
  Hasher._combine(_:)(0);
  return SPVector3D.hash(into:)();
}

Swift::Int SpatialTemplateElementPosition.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialTemplateElementPosition()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateElementPosition()
{
  Hasher._combine(_:)(0);
  return SPVector3D.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateElementPosition()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialTemplateElementPosition(double *a1, double *a2)
{
  _BOOL4 v2;

  v2 = *a1 == *a2;
  if (a1[1] != a2[1])
    v2 = 0;
  return a1[2] == a2[2] && v2;
}

uint64_t specialized static SpatialTemplateSeatElement.== infix(_:_:)(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  BOOL v22;
  char v24;
  uint64_t *v26;
  _OWORD v27[2];
  uint64_t v28;
  _BYTE v29[40];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[88];
  uint64_t v40;
  _BYTE v41[88];
  uint64_t v42;
  _BYTE v43[32];
  double v44;
  double v45;
  double v46;
  double v47;
  char v48;
  _BYTE v49[32];
  double v50;
  double v51;
  double v52;
  double v53;
  char v54;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v49);
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v43);
  if (v4 != v7 || v5 != v8 || v6 != v9)
  {
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v43);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v49);
LABEL_22:
    outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v41);
    outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
    v24 = 0;
    return v24 & 1;
  }
  v12 = v50;
  v13 = v51;
  v14 = v52;
  v15 = v53;
  v16 = v54;
  outlined destroy of SpatialTemplateSeatElement((uint64_t)v49);
  v17 = v44;
  v18 = v45;
  v19 = v46;
  v20 = v47;
  v21 = v48;
  outlined destroy of SpatialTemplateSeatElement((uint64_t)v43);
  if (v12 != v17)
    goto LABEL_22;
  if ((v16 & 1) != 0)
  {
    if ((v21 & 1) == 0 || LOBYTE(v18) != LOBYTE(v13))
      goto LABEL_22;
  }
  else
  {
    if ((v21 & 1) != 0)
      goto LABEL_22;
    v22 = v13 == v18 && v14 == v19;
    if (!v22 || v15 != v20)
      goto LABEL_22;
  }
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v41);
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v39);
  outlined init with copy of URL?((uint64_t)&v42, (uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v31)
  {
    outlined init with take of TypedPayloadDecoding(&v30, (uint64_t)v37);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v37, 0, sizeof(v37));
    v38 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v40, (uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v31)
  {
    outlined init with take of TypedPayloadDecoding(&v30, (uint64_t)v35);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v35, 0, sizeof(v35));
    v36 = 0;
  }
  outlined init with copy of URL?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)v35, (uint64_t)&v32, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (v31)
  {
    outlined init with copy of URL?((uint64_t)&v30, (uint64_t)v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((_QWORD *)&v33 + 1))
    {
      v27[0] = v32;
      v27[1] = v33;
      v28 = v34;
      v24 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v29, (uint64_t)v27);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v27);
      v26 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v29);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v29);
      v24 = 0;
      v26 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
    if (*((_QWORD *)&v33 + 1))
      v26 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    else
      v26 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
    if (*((_QWORD *)&v33 + 1))
      v24 = 0;
    else
      v24 = -1;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, v26);
  return v24 & 1;
}

BOOL specialized static SpatialTemplateElementDirection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  BOOL v4;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(double *)(a1 + 16);
  v3 = *(double *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0)
    {
      v4 = v2 == v3 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
      if (v4 && *(double *)(a1 + 32) == *(double *)(a2 + 32))
        return 1;
    }
    return 0;
  }
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && LOBYTE(v3) == LOBYTE(v2);
}

void SPVector3DMake(double a1@<D0>, double a2@<D1>, double a3@<D2>, double *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
}

unint64_t instantiation function for generic protocol witness table for SpatialTemplateSeatElement(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement;
  if (!lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateSeatElement, &type metadata for SpatialTemplateSeatElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement;
  if (!lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateSeatElement, &type metadata for SpatialTemplateSeatElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateElementDirection, &type metadata for SpatialTemplateElementDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateElementAxis.Storage, &type metadata for SpatialTemplateElementAxis.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateElementAxis, &type metadata for SpatialTemplateElementAxis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateElementPosition, &type metadata for SpatialTemplateElementPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition);
  }
  return result;
}

uint64_t dispatch thunk of SpatialTemplateElement.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SpatialTemplateElement.direction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpatialTemplateElement.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SpatialTemplateElement._output.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t initializeWithCopy for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

__n128 __swift_memcpy97_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SpatialTemplateElementOutput(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _SpatialTemplateElementOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SpatialTemplateElementOutput()
{
  return &type metadata for _SpatialTemplateElementOutput;
}

uint64_t destroy for SpatialTemplateSeatElement(uint64_t result)
{
  if (*(_QWORD *)(result + 112))
    return __swift_destroy_boxed_opaque_existential_1Tm(result + 88);
  return result;
}

uint64_t initializeWithCopy for SpatialTemplateSeatElement(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = a1 + 88;
  v6 = *(_QWORD *)(a2 + 112);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 120) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v5, a2 + 88);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v5 + 16) = v8;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 120);
  }
  return a1;
}

uint64_t assignWithCopy for SpatialTemplateSeatElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 32) = a2[4];
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v8 = a1 + 88;
  v9 = (__int128 *)(a2 + 11);
  v10 = a2[14];
  if (!*(_QWORD *)(a1 + 112))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 112) = v10;
      *(_QWORD *)(a1 + 120) = a2[15];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, (uint64_t)(a2 + 11));
      return a1;
    }
LABEL_7:
    v11 = *v9;
    v12 = v9[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
    *(_OWORD *)v8 = v11;
    *(_OWORD *)(v8 + 16) = v12;
    return a1;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), a2 + 11);
  return a1;
}

__n128 __swift_memcpy128_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for SpatialTemplateSeatElement(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v6 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v7 = a1 + 88;
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
  v8 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)v7 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplateSeatElement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplateSeatElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 112) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateSeatElement()
{
  return &type metadata for SpatialTemplateSeatElement;
}

__n128 __swift_memcpy49_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementDirection()
{
  return &type metadata for SpatialTemplateElementDirection;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementAxis()
{
  return &type metadata for SpatialTemplateElementAxis;
}

uint64_t storeEnumTagSinglePayload for SpatialTemplateElementAxis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E8BDC0 + 4 * byte_1A0F132D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E8BDF4 + 4 * asc_1A0F132D0[v4]))();
}

uint64_t sub_1A0E8BDF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E8BDFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E8BE04);
  return result;
}

uint64_t sub_1A0E8BE10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E8BE18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E8BE1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E8BE24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementAxis.Storage()
{
  return &type metadata for SpatialTemplateElementAxis.Storage;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementPosition()
{
  return &type metadata for SpatialTemplateElementPosition;
}

uint64_t outlined init with copy of SpatialTemplateSeatElement(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  v8 = a2 + 88;
  v9 = (__int128 *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 112);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 112) = v10;
    *(_QWORD *)(a2 + 120) = v11;
    (**(void (***)(uint64_t, __int128 *))(v10 - 8))(v8, v9);
  }
  else
  {
    v12 = *v9;
    v13 = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(a1 + 120);
    *(_OWORD *)v8 = v12;
    *(_OWORD *)(v8 + 16) = v13;
  }
  return a2;
}

uint64_t outlined destroy of SpatialTemplateSeatElement(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
  return a1;
}

uint64_t GroupSession.showNotice(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock[7];

  v2 = v1;
  v49 = *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v53 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  MEMORY[0x1E0C80A78](v7);
  v50 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v42 - v13;
  v15 = type metadata accessor for GroupSessionEvent();
  v55 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v55 + 64);
  v17 = MEMORY[0x1E0C80A78](v15);
  v47 = (uint64_t)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v54 = (uint64_t)&v42 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v42 - v20;
  if (one-time initialization token for default != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.default);
  v48 = a1;
  outlined init with copy of Participant(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
  swift_retain();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v44 = v24;
    v45 = v5;
    v46 = v4;
    v25 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    aBlock[0] = v43;
    *(_DWORD *)v25 = 136315394;
    v26 = GroupSession.description.getter();
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, aBlock);
    v42 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    outlined init with copy of Participant((uint64_t)v21, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    v28 = v55;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v14, 0, 1, v15);
    outlined init with copy of URL?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for GroupSessionEvent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v12, 1, v15) == 1)
    {
      v29 = 0xE300000000000000;
      v30 = 7104878;
    }
    else
    {
      v31 = v54;
      outlined init with take of Participant((uint64_t)v12, v54, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
      outlined init with copy of Participant(v31, v47, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
      v30 = String.init<A>(reflecting:)();
      v29 = v32;
      outlined destroy of Participant(v31, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    }
    v5 = v45;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for GroupSessionEvent?);
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    _os_log_impl(&dword_1A0DB3000, v23, (os_log_type_t)v44, "Application posted event on %s event: %s", (uint8_t *)v25, 0x16u);
    v33 = v43;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v33, -1, -1);
    MEMORY[0x1A1B05CC4](v25, -1, -1);

    v4 = v46;
  }
  else
  {
    swift_release();
    outlined destroy of Participant((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);

  }
  v34 = v54;
  outlined init with copy of Participant(v48, v54, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
  v35 = (*(unsigned __int8 *)(v55 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  v36 = (_QWORD *)swift_allocObject();
  v37 = v49;
  v36[2] = *(_QWORD *)(v49 + 80);
  v36[3] = *(_QWORD *)(v37 + 88);
  v36[4] = v2;
  outlined init with take of Participant(v34, (uint64_t)v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.showNotice(_:);
  aBlock[5] = (uint64_t)v36;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_8;
  v38 = _Block_copy(aBlock);
  swift_retain();
  v39 = v50;
  static DispatchQoS.unspecified.getter();
  v56 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v40 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v39, v40, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v40, v4);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
  return swift_release();
}

uint64_t GroupSessionEvent.init(originator:avCommand:rate:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    goto LABEL_14;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_15:
    if (a3)
    {
      objc_msgSend(a3, sel_doubleValue);
      v25 = v24;

      if (v25 > 0.0)
        v26 = 1;
      else
        v26 = 2;
      goto LABEL_19;
    }
    if (one-time initialization token for playback != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.playback);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1A0DB3000, v33, v34, "Failed to get rate for setRate command", v35, 2u);
      MEMORY[0x1A1B05CC4](v35, -1, -1);
    }

    goto LABEL_25;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_15;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_27:

    v26 = 3;
LABEL_19:
    v27 = type metadata accessor for GroupSessionEvent();
    v28 = a4 + *(int *)(v27 + 24);
    v29 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    outlined init with take of Participant(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v30 = (uint64_t *)(a4 + *(int *)(v27 + 20));
    *v30 = v26;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = 0;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a4, 0, 1, v27);
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
    goto LABEL_27;
  if (one-time initialization token for playback != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.playback);
  v39 = a2;
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v46 = v43;
    *(_DWORD *)v42 = 136315138;
    type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(0);
    v39 = v39;
    v44 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v40, v41, "Unknown avCommand %s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v43, -1, -1);
    MEMORY[0x1A1B05CC4](v42, -1, -1);

  }
  else
  {

  }
LABEL_25:
  outlined destroy of Participant(a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v36 = type metadata accessor for GroupSessionEvent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a4, 1, 1, v36);
}

uint64_t GroupSessionEvent.originator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t GroupSessionEvent.action.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;

  v3 = (_OWORD *)(v1 + *(int *)(type metadata accessor for GroupSessionEvent() + 20));
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupSessionEvent();
  return outlined init with copy of URL?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupSessionEvent.init(originator:action:url:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v11 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  outlined init with take of Participant(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v8 = type metadata accessor for GroupSessionEvent();
  v9 = a4 + *(int *)(v8 + 20);
  *(_OWORD *)v9 = v11;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v7;
  return outlined init with take of URL?(a3, a4 + *(int *)(v8 + 24));
}

uint64_t GroupSessionEvent.Action.init(eventType:item:queueItemType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void static GroupSessionEvent.Action.play.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void static GroupSessionEvent.Action.pause.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void static GroupSessionEvent.Action.seek.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.skip(item:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 4;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.eventType.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GroupSessionEvent.Action.item.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupSessionEvent.Action.queueItemType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t static GroupSessionEvent.Action.QueueChange.Item.song(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 1;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.init(name:tuItemType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static GroupSessionEvent.Action.QueueChange.Item.container(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 2;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.tuItemType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t static GroupSessionEvent.Action.QueueChange.setUpNext(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return static GroupSessionEvent.Action.QueueChange.setUpNext(_:)(a1, 8, a2);
}

__n128 GroupSessionEvent.Action.QueueChange.init(action:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t static GroupSessionEvent.Action.QueueChange.added(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return static GroupSessionEvent.Action.QueueChange.setUpNext(_:)(a1, 10, a2);
}

uint64_t static GroupSessionEvent.Action.QueueChange.setUpNext(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  *a3 = a2;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.action.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t static GroupSessionEvent.Action.updatedQueue(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.start.getter(_QWORD *a1@<X8>)
{
  *a1 = 12;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.react(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 7;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static GroupSessionEvent.Action.custom(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 99;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.changeUpNext.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.addQueueItem(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = 1;
  if (a1[2] != 1)
    v4 = 2;
  *a2 = 10;
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v4;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.updateQueue.getter(_QWORD *a1@<X8>)
{
  *a1 = 11;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void closure #1 in GroupSession.showNotice(_:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id *v21;
  id v22;
  NSObject *v23;
  void *v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t aBlock[6];
  uint64_t v49;
  uint64_t v50;

  v4 = *a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v46 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v47 = (uint64_t)&v42 - v8;
  v45 = type metadata accessor for GroupSessionEvent();
  v9 = *(_QWORD *)(v45 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](v45);
  v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v42 - v13);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v42 - v15;
  GroupSession.state.getter();
  v17 = (void *)aBlock[0];
  v49 = aBlock[0];
  v50 = 1;
  v19 = *(_QWORD *)(v4 + 80);
  v18 = *(_QWORD *)(v4 + 88);
  v20 = static GroupSession.State.== infix(_:_:)((id *)&v49, (void **)&v50);
  outlined consume of GroupSession<A>.State<A>(v17);
  if ((v20 & 1) != 0)
  {
    LODWORD(v47) = GroupSession.hasPendingActivityUpdate.getter();
    v21 = (id *)((char *)a1 + *(_QWORD *)(*a1 + 280));
    swift_beginAccess();
    v22 = *v21;
    v23 = XPCClient.queue.getter();

    outlined init with copy of Participant(a2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    a2 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v19;
    v14[3] = v18;
    v14[4] = a1;
    outlined init with take of Participant((uint64_t)v16, (uint64_t)v14 + a2, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    *((_BYTE *)v14 + a2 + v10) = v47 & 1;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for closure #1 in closure #1 in GroupSession.showNotice(_:);
    *(_QWORD *)(v9 + 24) = v14;
    aBlock[4] = (uint64_t)_sIg_Ieg_TRTA_0;
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_11;
    v24 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v23, v24);

    _Block_release(v24);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.default);
  outlined init with copy of Participant(a2, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    aBlock[0] = v43;
    *(_DWORD *)v29 = 136315394;
    v30 = v47;
    outlined init with copy of Participant((uint64_t)v14, v47, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    v31 = v45;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v45);
    v32 = v30;
    v33 = v46;
    outlined init with copy of URL?(v32, v46, &demangling cache variable for type metadata for GroupSessionEvent?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v33, 1, v31) == 1)
    {
      v34 = 0xE300000000000000;
      v35 = 7104878;
    }
    else
    {
      v36 = (uint64_t)v16;
      outlined init with take of Participant(v33, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
      outlined init with copy of Participant((uint64_t)v16, v44, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
      v35 = String.init<A>(reflecting:)();
      v34 = v37;
      outlined destroy of Participant(v36, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v47, &demangling cache variable for type metadata for GroupSessionEvent?);
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
    *(_WORD *)(v29 + 12) = 2080;
    v38 = GroupSession.description.getter();
    v40 = v39;
    swift_release();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v27, v28, "Dropping event %s because session isn't joined %s", (uint8_t *)v29, 0x16u);
    v41 = v43;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v41, -1, -1);
    MEMORY[0x1A1B05CC4](v29, -1, -1);

  }
  else
  {
    swift_release();
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);

    swift_release();
  }
}

void closure #1 in closure #1 in GroupSession.showNotice(_:)(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

void closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = type metadata accessor for GroupSessionEvent();
  type metadata accessor for Participant();
  outlined init with copy of URL?(a2 + *(int *)(v8 + 24), (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  objc_allocWithZone((Class)type metadata accessor for ActivitySessionEvent());
  swift_bridgeObjectRetain();
  v9 = (void *)ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)();
  objc_msgSend(v7, sel_postEventWithEvent_, v9);

}

uint64_t GroupSessionEvent.activitySessionEvent(hasPendingActivityUpdate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for GroupSessionEvent();
  type metadata accessor for Participant();
  outlined init with copy of URL?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for URL?);
  v5 = objc_allocWithZone((Class)type metadata accessor for ActivitySessionEvent());
  swift_bridgeObjectRetain();
  return ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)();
}

uint64_t GroupSession.Event.originator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t GroupSession.Event.action.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of GroupSession<A>.Event.Action<A>(v4, v5);
}

uint64_t GroupSession.Event.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of URL?(v2 + *(int *)(a1 + 40), a2, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupSession.Event.init(originator:action:url:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v10 = *a2;
  v11 = a2[1];
  outlined init with take of Participant(a1, a6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v13 = type metadata accessor for GroupSession.Event(0, a4, a5, v12);
  v14 = (_QWORD *)(a6 + *(int *)(v13 + 36));
  *v14 = v10;
  v14[1] = v11;
  return outlined init with take of URL?(a3, a6 + *(int *)(v13 + 40));
}

uint64_t GroupSession.postEvent(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for GroupSessionEvent();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupSession.Event(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v8);
  v10 = type metadata accessor for Optional();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v32 - v15;
  if (one-time initialization token for default != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v18(v16, a1, v9);
  swift_retain();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc();
    v35 = v7;
    v23 = v22;
    v34 = swift_slowAlloc();
    v41 = v34;
    *(_DWORD *)v23 = 136315394;
    v36 = a1;
    v33 = v21;
    v24 = GroupSession.description.getter();
    v39 = v2;
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v32 = v23 + 14;
    v18(v13, (uint64_t)v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v9);
    v26 = >> prefix<A>(_:)((uint64_t)v13, v9);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v9);
    _os_log_impl(&dword_1A0DB3000, v19, (os_log_type_t)v33, "Application posted deprecated event on %s event: %s", (uint8_t *)v23, 0x16u);
    v29 = v34;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    v30 = v23;
    v7 = v35;
    MEMORY[0x1A1B05CC4](v30, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v9);
  }

  GroupSession.Event.groupSessionEvent.getter(v9, (uint64_t)v7);
  GroupSession.showNotice(_:)((uint64_t)v7);
  return outlined destroy of Participant((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
}

uint64_t GroupSession.Event.groupSessionEvent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;

  outlined init with copy of Participant(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v5 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v6 = v5[1];
  if (v6 < 3)
    v7 = v6 + 1;
  else
    v7 = 4;
  if (v6 >= 3)
    v8 = v5[1];
  else
    v8 = 0;
  if (v6 >= 3)
    v9 = *v5;
  else
    v9 = 0;
  outlined copy of GroupSession<A>.Event.Action<A>(*v5, v6);
  v10 = v2 + *(int *)(a1 + 40);
  v11 = type metadata accessor for GroupSessionEvent();
  result = outlined init with copy of URL?(v10, a2 + *(int *)(v11 + 24), &demangling cache variable for type metadata for URL?);
  v13 = (uint64_t *)(a2 + *(int *)(v11 + 20));
  *v13 = v7;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = 0;
  return result;
}

uint64_t GroupSession.Event.Action.groupSessionEventAction.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = 2;
    }
    else
    {
      if (v3 != 2)
      {
        *a1 = 4;
        a1[1] = v2;
        a1[2] = v3;
        a1[3] = 0;
        return outlined copy of GroupSession<A>.Event.Action<A>(v2, v3);
      }
      v4 = 3;
    }
  }
  else
  {
    v4 = 1;
  }
  *a1 = v4;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return outlined copy of GroupSession<A>.Event.Action<A>(v2, v3);
}

uint64_t GroupSession.Event.localizedDescription.getter()
{
  return 0;
}

uint64_t GroupSession.Event.init(originator:localizedDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13[2];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for URL();
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return GroupSession.Event.init(originator:action:url:)(a1, v13, (uint64_t)v10, a2, a3, a4);
}

uint64_t type metadata accessor for GroupSessionEvent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupSessionEvent;
  if (!type metadata singleton initialization cache for GroupSessionEvent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A0E8DACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for GroupSessionEvent();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 24);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_deallocObject();
}

void partial apply for closure #1 in GroupSession.showNotice(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GroupSessionEvent() - 8) + 80);
  closure #1 in GroupSession.showNotice(_:)(*(uint64_t **)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of GroupSession<A>.Event.Action<A>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t type metadata accessor for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.Event);
}

uint64_t type metadata accessor for GroupSession.Event.Action(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.Event.Action);
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for Participant();
    v9 = *(int *)(v8 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 24));
    v13 = *(int *)(a3 + 20);
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v18 = *((_QWORD *)v16 + 2);
    v17 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v15 + 2) = v18;
    *((_QWORD *)v15 + 3) = v17;
    v19 = (char *)a1 + v14;
    v20 = (char *)a2 + v14;
    v21 = type metadata accessor for URL();
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t destroy for GroupSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v17 = *(_QWORD *)(v15 + 16);
  v16 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 16) = v17;
  *(_QWORD *)(v14 + 24) = v16;
  v18 = (void *)(a1 + v13);
  v19 = (const void *)(a2 + v13);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v11 = *(int *)(a3 + 20);
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_QWORD *)(a2 + v11);
  v12[1] = *(_QWORD *)(a2 + v11 + 8);
  v12[2] = *(_QWORD *)(a2 + v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[3] = *(_QWORD *)(v13 + 24);
  v14 = *(int *)(a3 + 24);
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v12) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v12)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = (_OWORD *)(a1 + v8);
  v11 = (_OWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (void *)(a1 + v9);
  v14 = (const void *)(a2 + v9);
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)(a2 + v13);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 + v13 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  v16 = *(int *)(a3 + 24);
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v15) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E8E408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 16);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSessionEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E8E4D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Participant();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 16) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for GroupSessionEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Participant();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action()
{
  return &type metadata for GroupSessionEvent.Action;
}

uint64_t destroy for GroupSessionEvent.Action.QueueChange()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupSessionEvent.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GroupSessionEvent.Action(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for GroupSessionEvent.Action(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEvent.Action(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionEvent.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action.QueueChange()
{
  return &type metadata for GroupSessionEvent.Action.QueueChange;
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action.QueueChange.Item()
{
  return &type metadata for GroupSessionEvent.Action.QueueChange.Item;
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupSessionEvent.Action.QueueChange.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GroupSessionEvent.Action.QueueChange.Item(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for GroupSessionEvent.Action.QueueChange.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for QueueItem()
{
  return &type metadata for QueueItem;
}

void type metadata completion function for GroupSession.Event()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Participant();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.Event(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for Participant();
    v9 = *(int *)(v8 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 24));
    v14 = *(int *)(a3 + 36);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v17 >= 3)
    {
      *v15 = *v16;
      v15[1] = v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    v19 = *(int *)(a3 + 40);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for URL();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 36) + 8) >= 3uLL)
    swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 40);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v13 = *(int *)(a3 + 36);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = *(_QWORD *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  if (v16 >= 3)
  {
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v17 = *(int *)(a3 + 40);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v11 = *(int *)(a3 + 36);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = *(_QWORD *)(a1 + v11 + 8);
  v15 = *(_QWORD *)(a2 + v11 + 8);
  if (v14 < 3)
  {
    if (v15 >= 3)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v15 < 3)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, &demangling cache variable for type metadata for (item: String));
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v16 = *(int *)(a3 + 40);
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 40);
  *(_OWORD *)(a1 + *(int *)(a3 + 36)) = *(_OWORD *)(a2 + *(int *)(a3 + 36));
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for Participant();
  v8 = *(int *)(v7 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(v7 + 24)) = *(_QWORD *)(a2 + *(int *)(v7 + 24));
  v13 = *(int *)(a3 + 36);
  v14 = a1 + v13;
  v15 = a2 + v13;
  if (*(_QWORD *)(a1 + v13 + 8) < 3uLL)
    goto LABEL_4;
  v16 = *(_QWORD *)(v15 + 8);
  if (v16 < 3)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v14, &demangling cache variable for type metadata for (item: String));
LABEL_4:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_6;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v16;
  swift_bridgeObjectRelease();
LABEL_6:
  v17 = *(int *)(a3 + 40);
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_11;
  }
  if (v24)
  {
LABEL_11:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Event()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E8F158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483644)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 3;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSession.Event()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E8F220(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Participant();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483644)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 + 2);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

unint64_t destroy for GroupSession.Event.Action(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupSession.Event.Action(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for GroupSession.Event.Action(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GroupSession.Event.Action(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Event.Action(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GroupSession.Event.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GroupSession.Event.Action(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for GroupSession.Event.Action(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t sub_1A0E8F514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for GroupSessionEvent();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v3 + *(int *)(v1 + 24);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in GroupSession.showNotice(_:)()
{
  uint64_t v0;

  type metadata accessor for GroupSessionEvent();
  closure #1 in closure #1 in GroupSession.showNotice(_:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1A0E8F640()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t key path getter for SystemCoordinatorClientConnection.serverDisconnectedCallback : SystemCoordinatorClientConnection@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for SystemCoordinatorClientConnection.serverDisconnectedCallback : SystemCoordinatorClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t SystemCoordinatorClientConnection.serverDisconnectedCallback.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t SystemCoordinatorClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*SystemCoordinatorClientConnection.serverDisconnectedCallback.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

Swift::Void __swiftcall SystemCoordinatorClientConnection.handleServerDisconnect()()
{
  uint64_t v0;
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
}

uint64_t key path getter for SystemCoordinatorClientConnection.stateCallback : SystemCoordinatorClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*a1 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  v5 = *v3;
  v4 = v3[1];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  a2[1] = v6;
  return swift_retain();
}

uint64_t key path setter for SystemCoordinatorClientConnection.stateCallback : SystemCoordinatorClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = (uint64_t (**)(uint64_t))(*a2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  *v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ());
  v6[1] = (uint64_t (*)(uint64_t))v5;
  swift_retain();
  return swift_release();
}

uint64_t SystemCoordinatorClientConnection.stateCallback.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t SystemCoordinatorClientConnection.stateCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*SystemCoordinatorClientConnection.stateCallback.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinatorClientConnection.updateState(_:)(uint64_t a1)
{
  uint64_t v1;
  void (**v3)(uint64_t);
  void (*v4)(uint64_t);

  v3 = (void (**)(uint64_t))(v1 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  v4 = *v3;
  swift_retain();
  v4(a1);
  return swift_release();
}

uint64_t @objc SystemCoordinatorClientConnection.updateState(_:)(char *a1, uint64_t a2, void *a3)
{
  char *v5;
  void (*v6)(id);
  id v7;
  char *v8;

  v5 = &a1[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  swift_beginAccess();
  v6 = *(void (**)(id))v5;
  v7 = a3;
  v8 = a1;
  swift_retain();
  v6(v7);

  return swift_release();
}

id SystemCoordinatorClientConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SystemCoordinatorClientConnection.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = &v0[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  *(_QWORD *)v3 = destructiveProjectEnumData for GroupSessionErrors;
  *((_QWORD *)v3 + 1) = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc SystemCoordinatorClientConnection.init()(char *a1)
{
  objc_class *ObjectType;
  char *v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = &a1[direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &a1[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  *(_QWORD *)v4 = destructiveProjectEnumData for GroupSessionErrors;
  *((_QWORD *)v4 + 1) = 0;
  v6.receiver = a1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t SystemCoordinatorClientConnection.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback));
  return swift_release();
}

id SystemCoordinatorClientConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SystemCoordinatorClientConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemCoordinatorClientConnection;
  if (!type metadata singleton initialization cache for SystemCoordinatorClientConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorClientConnection()
{
  return swift_initClassMetadata2();
}

uint64_t @objc SystemCoordinatorClientConnection.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(a1 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback));
  return swift_release();
}

uint64_t ObjC metadata update function for SystemCoordinatorClientConnection()
{
  return type metadata accessor for SystemCoordinatorClientConnection();
}

uint64_t sub_1A0E8FE70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.getter in conformance SystemCoordinatorClientConnection()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.setter in conformance SystemCoordinatorClientConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.modify in conformance SystemCoordinatorClientConnection())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t protocol witness for SystemCoordinatorClient.stateCallback.getter in conformance SystemCoordinatorClientConnection()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for SystemCoordinatorClient.stateCallback.setter in conformance SystemCoordinatorClientConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*protocol witness for SystemCoordinatorClient.stateCallback.modify in conformance SystemCoordinatorClientConnection())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t NSProcessInfo.stableAppIdentifier.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  SecTaskRef v5;
  SecTaskRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _OWORD v21[2];
  _QWORD v22[5];

  v1 = type metadata accessor for Entitlement();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = SecTaskCreateFromSelf(0);
  if (!v5)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    v11 = v0;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v14 = 138412290;
      v22[0] = v11;
      v16 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v15 = v11;

      _os_log_impl(&dword_1A0DB3000, v12, v13, "Could not create task info for process: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v15, -1, -1);
      MEMORY[0x1A1B05CC4](v14, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v6 = v5;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0D14990], v1);
  v7 = specialized SecTaskRef.value<A>(_:forEntitlement:)((uint64_t)v4);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v9)
  {

    return v7;
  }
  v17 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v18 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001BLL, 0x80000001A0F1B4D0);
  v19 = objc_msgSend(v17, sel_objectForInfoDictionaryKey_, v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {

    memset(v21, 0, sizeof(v21));
  }
  outlined init with take of Any?((uint64_t)v21, (uint64_t)v22);
  if (!v22[3])
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v22, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  if (swift_dynamicCast())
    return v22[4];
  else
    return 0;
}

uint64_t specialized SecTaskRef.value<A>(_:forEntitlement:)(uint64_t a1)
{
  __SecTask *v1;
  __SecTask *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __CFString *v20;
  CFTypeRef v21;
  uint64_t v23;
  __SecTask *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  __SecTask *v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  os_log_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  CFErrorRef v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CFErrorRef error[2];

  v2 = v1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v41 - v8;
  v10 = type metadata accessor for Entitlement();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v46 = (char *)v41 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v41 - v17;
  error[0] = 0;
  v19 = Entitlement.rawValue.getter();
  v20 = (__CFString *)MEMORY[0x1A1B048B4](v19);
  swift_bridgeObjectRelease();
  v21 = SecTaskCopyValueForEntitlement(v2, v20, error);

  v50 = (uint64_t)v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  if (swift_dynamicCast())
    return v48;
  if (one-time initialization token for default != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v45(v18, a1, v10);
  v24 = v2;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    v43 = v26;
    v44 = v25;
    v27 = swift_slowAlloc();
    v42 = swift_slowAlloc();
    v50 = v42;
    *(_DWORD *)v27 = 136315650;
    v48 = (uint64_t)v24;
    type metadata accessor for SecTaskRef(0);
    v28 = v24;
    v29 = String.init<A>(reflecting:)();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v50);
    v41[1] = &v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    v31 = (void (*)(char *, char *, uint64_t))v45;
    v45(v9, (uint64_t)v18, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    outlined init with copy of Entitlement?((uint64_t)v9, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      v32 = 0xE300000000000000;
      v33 = 7104878;
    }
    else
    {
      v34 = v46;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v46, v7, v10);
      v31(v14, v34, v10);
      v33 = String.init<A>(reflecting:)();
      v32 = v35;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Entitlement?);
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    *(_WORD *)(v27 + 22) = 2080;
    swift_beginAccess();
    if (error[0])
    {
      v47 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
      v36 = String.init<A>(reflecting:)();
      v38 = v37;
    }
    else
    {
      v38 = 0xE300000000000000;
      v36 = 7104878;
    }
    v47 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v39 = v44;
    _os_log_impl(&dword_1A0DB3000, v44, (os_log_type_t)v43, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v27, 0x20u);
    v40 = v42;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v40, -1, -1);
    MEMORY[0x1A1B05CC4](v27, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  return 0;
}

{
  __SecTask *v1;
  __SecTask *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __CFString *v20;
  CFTypeRef v21;
  uint64_t v23;
  __SecTask *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  __SecTask *v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  os_log_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  CFErrorRef v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CFErrorRef error[2];

  v2 = v1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v41 - v8;
  v10 = type metadata accessor for Entitlement();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v46 = (char *)v41 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v41 - v17;
  error[0] = 0;
  v19 = Entitlement.rawValue.getter();
  v20 = (__CFString *)MEMORY[0x1A1B048B4](v19);
  swift_bridgeObjectRelease();
  v21 = SecTaskCopyValueForEntitlement(v2, v20, error);

  v48 = (uint64_t)v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  if (swift_dynamicCast())
    return v50;
  if (one-time initialization token for default != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v45(v18, a1, v10);
  v24 = v2;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    v43 = v26;
    v44 = v25;
    v27 = swift_slowAlloc();
    v42 = swift_slowAlloc();
    v50 = v42;
    *(_DWORD *)v27 = 136315650;
    v48 = (uint64_t)v24;
    type metadata accessor for SecTaskRef(0);
    v28 = v24;
    v29 = String.init<A>(reflecting:)();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v50);
    v41[1] = &v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    v31 = (void (*)(char *, char *, uint64_t))v45;
    v45(v9, (uint64_t)v18, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    outlined init with copy of Entitlement?((uint64_t)v9, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      v32 = 0xE300000000000000;
      v33 = 7104878;
    }
    else
    {
      v34 = v46;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v46, v7, v10);
      v31(v14, v34, v10);
      v33 = String.init<A>(reflecting:)();
      v32 = v35;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Entitlement?);
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    *(_WORD *)(v27 + 22) = 2080;
    swift_beginAccess();
    if (error[0])
    {
      v47 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
      v36 = String.init<A>(reflecting:)();
      v38 = v37;
    }
    else
    {
      v38 = 0xE300000000000000;
      v36 = 7104878;
    }
    v47 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v39 = v44;
    _os_log_impl(&dword_1A0DB3000, v44, (os_log_type_t)v43, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v27, 0x20u);
    v40 = v42;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v40, -1, -1);
    MEMORY[0x1A1B05CC4](v27, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  return 2;
}

uint64_t static Participants.only(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Participant() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A0F0EAB0;
  outlined init with copy of Participant(a1, v6 + v5);
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v6);
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  *a2 = v7;
  return result;
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for Participants(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Participants()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Participants(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Participants(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Participants()
{
  return &type metadata for Participants;
}

uint64_t getEnumTagSinglePayload for Participants(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Participants(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CPParticipants()
{
  return &type metadata for CPParticipants;
}

uint64_t GroupSessionMessenger.Messages.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionMessenger.Messages.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a2;
  v31 = a5;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v9 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Publishers.PrefetchStrategy();
  v13 = *(_QWORD *)(v12 - 8);
  v26 = v12;
  v27 = v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GroupSessionMessenger.MessageStream(255, a2, a3, a4);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionMessenger.MessageStream<A>, v16);
  v17 = type metadata accessor for Publishers.Buffer();
  v28 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v26 - v18;
  v33 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0C958B8], v12);
  v20 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v21 = v9;
  v22 = v29;
  v20(v11, *MEMORY[0x1E0C958E8], v29);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v26);
  swift_release();
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95AB8], v17);
  v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v17);
  v32 = v23;
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  v24 = type metadata accessor for AnyPublisher();
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95D90], v24);
  result = _PublisherElements.init(_:)((uint64_t)&v32, v24, (uint64_t)&v33);
  *v31 = v33;
  return result;
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  v2 = type metadata accessor for AnyPublisher();
  v3 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95D90], v2);
  v5 = type metadata accessor for _PublisherElements(0, v2, v3, v4);
  result = _PublisherElements.makeAsyncIterator()(v5, v6, v7, v8);
  *a1 = result;
  return result;
}

uint64_t GroupSessionMessenger.Messages.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionMessenger.Messages.Iterator.baseIterator.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*GroupSessionMessenger.Messages.Iterator.baseIterator.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionMessenger.Messages.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for AnyPublisher();
  v5 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95D90], v4);
  v7 = type metadata accessor for _PublisherElements.Iterator(0, v4, v5, v6);
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return _PublisherElements.Iterator.next()(a1, v7);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionMessenger.Messages<A>.Iterator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return GroupSessionMessenger.Messages.Iterator.next()(a1);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionMessenger.Messages<A>@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionMessenger.Messages.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t GroupSessionMessenger.send<A>(_:to:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = *a2;
  *(_QWORD *)(v4 + 16) = v4;
  *(_QWORD *)(v4 + 24) = GroupSessionMessenger.send<A>(_:to:);
  v8 = swift_continuation_init();
  closure #1 in GroupSessionMessenger.send<A>(_:to:)(v8, v3, a1, v7, a3);
  return swift_continuation_await();
}

uint64_t closure #1 in GroupSessionMessenger.send<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;

  v10 = a4;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  GroupSessionMessenger.send<A>(_:to:completion:)(a3, (uint64_t)&v10, (uint64_t)partial apply for closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:), v8, a5);
  return swift_release();
}

uint64_t GroupSessionMessenger.send(_:to:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *a3;
  *(_QWORD *)(v3 + 16) = v3;
  *(_QWORD *)(v3 + 24) = GroupSessionMessenger.send(_:to:);
  v7 = swift_continuation_init();
  v10 = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  GroupSessionMessenger.send(_:to:completion:)(a1, a2, &v10, (uint64_t)partial apply for closure #1 in closure #1 in GroupSessionMessenger.send(_:to:), v8);
  swift_release();
  return swift_continuation_await();
}

uint64_t GroupSessionMessenger.send(_:to:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:)(void *a1)
{
  _QWORD *v2;
  id v3;

  if (!a1)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v2 = a1;
  v3 = a1;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_1A0E91758()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupSessionMessenger.send(_:to:)(void *a1)
{
  return closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:)(a1);
}

uint64_t GroupSessionMessenger.messages<A>(of:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v9;

  GroupSessionMessenger.receive<A>(_:)(a1, a2, a3, &v9);
  return GroupSessionMessenger.Messages.init(_:)(&v9, a1, a2, a3, a4);
}

uint64_t GroupSessionMessenger.messages(of:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v19 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Publishers.PrefetchStrategy();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>>);
  v10 = *(_QWORD *)(v9 - 8);
  v17 = v9;
  v18 = v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSessionMessenger.receive(_:)(&v21);
  v20 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0C958B8], v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0C958E8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<Data>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageStream<Data> and conformance GroupSessionMessenger.MessageStream<A>, &demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<Data>, (uint64_t)&protocol conformance descriptor for GroupSessionMessenger.MessageStream<A>);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>>, MEMORY[0x1E0C95AB8]);
  v13 = v17;
  v14 = Publisher.eraseToAnyPublisher()();
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v13);
  *v19 = v14;
  return result;
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GroupSessionMessenger.Messages<A>()
{
  JUMPOUT(0x1A1B05BECLL);
}

uint64_t type metadata accessor for GroupSessionMessenger.Messages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSessionMessenger.Messages);
}

uint64_t type metadata accessor for GroupSessionMessenger.Messages.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSessionMessenger.Messages.Iterator);
}

uint64_t sub_1A0E91A0C()
{
  return swift_deallocObject();
}

void specialized Sequence.first(where:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v2 = v27;
    v25 = v28;
    v3 = v29;
    v4 = v30;
    v5 = v31;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v6;
    v8 = -v6;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = v7;
    v4 = 0;
  }
  v24 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_45;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v10 = v32;
  swift_unknownObjectRelease();
  v11 = v4;
  v12 = v5;
  if (!v32)
    goto LABEL_45;
  while (1)
  {
    v17 = objc_msgSend(v10, sel_pluginName);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

    if (a2)
    {
      if (a2 == 1)
        v21 = 0xD000000000000013;
      else
        v21 = 0xD000000000000010;
      if (a2 == 1)
        v22 = 0x80000001A0F18DB0;
      else
        v22 = 0x80000001A0F18DD0;
      if (v18 != v21)
        goto LABEL_41;
    }
    else
    {
      v22 = 0xE600000000000000;
      if (v18 != 0x627553627550)
        goto LABEL_41;
    }
    if (v20 == v22)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
LABEL_41:
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
      goto LABEL_45;

    v4 = v11;
    v5 = v12;
    if (v2 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v5)
      break;
    v12 = (v5 - 1) & v5;
    v13 = __clz(__rbit64(v5)) | (v4 << 6);
    v11 = v4;
LABEL_29:
    v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    if (!v10)
      goto LABEL_45;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v24)
    goto LABEL_45;
  v15 = *(_QWORD *)(v25 + 8 * v14);
  v11 = v4 + 1;
  if (v15)
    goto LABEL_28;
  v11 = v4 + 2;
  if (v4 + 2 >= v24)
    goto LABEL_45;
  v15 = *(_QWORD *)(v25 + 8 * v11);
  if (v15)
    goto LABEL_28;
  v11 = v4 + 3;
  if (v4 + 3 >= v24)
    goto LABEL_45;
  v15 = *(_QWORD *)(v25 + 8 * v11);
  if (v15)
    goto LABEL_28;
  v11 = v4 + 4;
  if (v4 + 4 >= v24)
    goto LABEL_45;
  v15 = *(_QWORD *)(v25 + 8 * v11);
  if (v15)
    goto LABEL_28;
  v11 = v4 + 5;
  if (v4 + 5 >= v24)
    goto LABEL_45;
  v15 = *(_QWORD *)(v25 + 8 * v11);
  if (v15)
  {
LABEL_28:
    v12 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_29;
  }
  v16 = v4 + 6;
  while (v24 != v16)
  {
    v15 = *(_QWORD *)(v25 + 8 * v16++);
    if (v15)
    {
      v11 = v16 - 1;
      goto LABEL_28;
    }
  }
LABEL_45:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = v24;
    v23 = v25;
    v2 = v26;
    v3 = v27;
    v4 = v28;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v6 = ~v5;
    v7 = -v5;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v4 = v8 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = v6;
    v3 = 0;
  }
  v21 = v2;
  v22 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_36;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v9 = v29;
  swift_unknownObjectRelease();
  v10 = v3;
  v11 = v4;
  if (!v29)
    goto LABEL_36;
  while (1)
  {
    v16 = objc_msgSend(v9, sel_pluginName, v21);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    if (v17 == 0x627553627550 && v19 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      goto LABEL_36;

    v3 = v10;
    v4 = v11;
    if (v1 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v4)
      break;
    v11 = (v4 - 1) & v4;
    v12 = __clz(__rbit64(v4)) | (v3 << 6);
    v10 = v3;
LABEL_29:
    v9 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    if (!v9)
      goto LABEL_36;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return;
  }
  if (v13 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v13);
  v10 = v3 + 1;
  if (v14)
    goto LABEL_28;
  v10 = v3 + 2;
  if (v3 + 2 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 3;
  if (v3 + 3 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 4;
  if (v3 + 4 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 5;
  if (v3 + 5 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
  {
LABEL_28:
    v11 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_29;
  }
  v15 = v3 + 6;
  while (v22 != v15)
  {
    v14 = *(_QWORD *)(v23 + 8 * v15++);
    if (v14)
    {
      v10 = v15 - 1;
      goto LABEL_28;
    }
  }
LABEL_36:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = v24;
    v23 = v25;
    v2 = v26;
    v3 = v27;
    v4 = v28;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v6 = ~v5;
    v7 = -v5;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v4 = v8 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = v6;
    v3 = 0;
  }
  v21 = v2;
  v22 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_36;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v9 = v29;
  swift_unknownObjectRelease();
  v10 = v3;
  v11 = v4;
  if (!v29)
    goto LABEL_36;
  while (1)
  {
    v16 = objc_msgSend(v9, sel_pluginName, v21);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    if (v17 == 0xD000000000000010 && v19 == 0x80000001A0F18DD0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      goto LABEL_36;

    v3 = v10;
    v4 = v11;
    if (v1 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v4)
      break;
    v11 = (v4 - 1) & v4;
    v12 = __clz(__rbit64(v4)) | (v3 << 6);
    v10 = v3;
LABEL_29:
    v9 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    if (!v9)
      goto LABEL_36;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return;
  }
  if (v13 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v13);
  v10 = v3 + 1;
  if (v14)
    goto LABEL_28;
  v10 = v3 + 2;
  if (v3 + 2 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 3;
  if (v3 + 3 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 4;
  if (v3 + 4 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
    goto LABEL_28;
  v10 = v3 + 5;
  if (v3 + 5 >= v22)
    goto LABEL_36;
  v14 = *(_QWORD *)(v23 + 8 * v10);
  if (v14)
  {
LABEL_28:
    v11 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_29;
  }
  v15 = v3 + 6;
  while (v22 != v15)
  {
    v14 = *(_QWORD *)(v23 + 8 * v15++);
    if (v14)
    {
      v10 = v15 - 1;
      goto LABEL_28;
    }
  }
LABEL_36:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

BOOL static TopicManager.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TopicManager.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int TopicManager.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t TopicManager.ServiceName.rawValue.getter(char a1)
{
  if (!a1)
    return 0x627553627550;
  if (a1 == 1)
    return 0xD000000000000013;
  return 0xD000000000000010;
}

uint64_t TopicManager.conversationClientsByGroupUUID.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TopicManager.ServiceName(_BYTE *a1, _BYTE *a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = 0xD000000000000010;
  v3 = *a1;
  if (v3 == 1)
    v4 = 0xD000000000000013;
  else
    v4 = 0xD000000000000010;
  if (v3 == 1)
    v5 = 0x80000001A0F18DB0;
  else
    v5 = 0x80000001A0F18DD0;
  if (*a1)
    v6 = v4;
  else
    v6 = 0x627553627550;
  if (v3)
    v7 = v5;
  else
    v7 = 0xE600000000000000;
  if (*a2 == 1)
  {
    v2 = 0xD000000000000013;
    v8 = 0x80000001A0F18DB0;
  }
  else
  {
    v8 = 0x80000001A0F18DD0;
  }
  if (*a2)
    v9 = v2;
  else
    v9 = 0x627553627550;
  if (*a2)
    v10 = v8;
  else
    v10 = 0xE600000000000000;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TopicManager.ServiceName()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TopicManager.ServiceName()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TopicManager.ServiceName()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TopicManager.ServiceName@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TopicManager.ServiceName.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TopicManager.ServiceName(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xD000000000000013;
  v5 = 0x80000001A0F18DB0;
  if (v2 != 1)
  {
    v4 = 0xD000000000000010;
    v5 = 0x80000001A0F18DD0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x627553627550;
  if (!v6)
    v3 = v5;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t TopicManager.lock.getter()
{
  return swift_retain();
}

uint64_t TopicManager.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a1);
}

uint64_t TopicManager.provider.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(a1, v3);
  return swift_endAccess();
}

uint64_t (*TopicManager.provider.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t TopicManager.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t TopicManager.__allocating_init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  ObjectType = swift_getObjectType();
  v9 = specialized TopicManager.__allocating_init(provider:featureFlags:)(v7, a2, v2, v5, ObjectType, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

uint64_t TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  ObjectType = swift_getObjectType();
  v12 = specialized TopicManager.init(provider:featureFlags:)((uint64_t)v9, a2, v2, v5, ObjectType, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v12;
}

uint64_t closure #1 in TopicManager.init(provider:featureFlags:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  uint64_t v6;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v5[2] = a2;
  v3 = specialized _NativeDictionary.filter(_:)(v6, (uint64_t (*)(char *, uint64_t))partial apply for closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:), (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  v6 = v3;
  swift_retain();
  return static Published.subscript.setter();
}

BOOL closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  char v6;
  id v7;
  id v8;
  _BOOL8 v9;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v5);
  v8 = objc_msgSend(v7, sel_state);
  v9 = v8 == (id)3;
  if (v8 == (id)3)
    (*(void (**)(id))(*(_QWORD *)a2 + 184))(v7);

  return v9;
}

_QWORD *TopicManager.conversationClient(groupUUID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(_QWORD *, _QWORD);
  uint64_t *v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.assertOwned()();
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v23 = a1;
  v11(v9, a1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v12 = v25[0];
  if (*(_QWORD *)(v25[0] + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v14 & 1) != 0))
  {
    v15 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_retain();
  }
  else
  {
    type metadata accessor for TopicManager.ConversationClient();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = MEMORY[0x1E0DEE9E0];
    v16 = (void *)objc_opt_self();
    swift_retain();
    v15[3] = objc_msgSend(v16, sel_weakObjectsHashTable);
    v15[4] = v10;
  }
  swift_bridgeObjectRelease();
  v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v9, v3);
  v11(v7, v23, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  v18 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify();
  v20 = v19;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = *v20;
  *v20 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *v20 = v24;
  swift_bridgeObjectRelease();
  v17(v7, v3);
  v18(v25, 0);
  swift_release();
  swift_release();
  return v15;
}

_QWORD *TopicManager.ConversationClient.__allocating_init(lock:)(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)swift_allocObject();
  v2[2] = MEMORY[0x1E0DEE9E0];
  v2[3] = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  v2[4] = a1;
  return v2;
}

uint64_t TopicManager.firstConversation(for:with:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v3 = v2;
  v19 = a2;
  v18 = a1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>);
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>>);
  v23 = *(_QWORD *)(v21 - 8);
  v9 = MEMORY[0x1E0C80A78](v21);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v2 + 192))(v25, v9);
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  v24 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(_BYTE *)(v13 + v12 + v6) = v19;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>, MEMORY[0x1E0C95708]);
  v14 = v20;
  Publisher.first()();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v14);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>> and conformance Publishers.First<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>>, MEMORY[0x1E0C95A38]);
  v15 = v21;
  v16 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v15);
  return v16;
}

uint64_t closure #1 in TopicManager.firstConversation(for:with:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  _QWORD *v61;
  _QWORD *v62;
  _BYTE v63[4];
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;

  LODWORD(v68) = a3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = &v63[-v14];
  MEMORY[0x1E0C80A78](v13);
  v17 = &v63[-v16];
  v18 = *(_QWORD *)(a1 + 16);
  v70 = a4;
  if (!v18 || (v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v20 & 1) == 0))
  {
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.topicManager);
    v23 = v9;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v17, a2, v8);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v69 = v4;
      v27 = (uint8_t *)v26;
      v28 = swift_slowAlloc();
      v68 = v23;
      v29 = v28;
      v72 = (_QWORD *)v28;
      *(_DWORD *)v27 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v17, v8);
      _os_log_impl(&dword_1A0DB3000, v24, v25, "No conversation exists for group=%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v29, -1, -1);
      MEMORY[0x1A1B05CC4](v27, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v17, v8);
    }

    v21 = 0;
    goto LABEL_20;
  }
  v21 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v19);
  if (objc_msgSend(v21, sel_state) != (id)3 || !objc_msgSend(v21, sel_localParticipantIdentifier))
  {
    v69 = v4;
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.topicManager);
    v33 = v9;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    v34 = v21;
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc();
      v68 = v33;
      v38 = v37;
      v66 = (_QWORD *)swift_slowAlloc();
      v67 = swift_slowAlloc();
      v72 = (_QWORD *)v67;
      *(_DWORD *)v38 = 136315394;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v39 = dispatch thunk of CustomStringConvertible.description.getter();
      v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v12, v8);
      *(_WORD *)(v38 + 12) = 2112;
      v71 = (uint64_t)v34;
      v41 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42 = v66;
      *v66 = v34;

      _os_log_impl(&dword_1A0DB3000, v35, v36, "Conversation for group=%s is not yet established: %@", (uint8_t *)v38, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v42, -1, -1);
      v43 = v67;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v43, -1, -1);
      MEMORY[0x1A1B05CC4](v38, -1, -1);

    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v12, v8);
    }
    v21 = 0;
LABEL_20:
    a4 = v70;
    goto LABEL_21;
  }
  if ((_BYTE)v68)
  {
    if (v68 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    v44 = a4;
    v45 = v4;
  }
  else
  {
    v44 = a4;
    v45 = v4;
  }
  v67 = (uint64_t)"supportsContinuationOnTV";
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
  {
    a4 = v44;
  }
  else
  {
    v47 = objc_msgSend(v21, sel_virtualParticipants);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    v48 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.first(where:)(v48, v68);
    v50 = v49;
    v69 = v45;
    swift_bridgeObjectRelease();

    if (v50)
    {
      a4 = v44;
    }
    else
    {
      a4 = v44;
      if (one-time initialization token for topicManager != -1)
        swift_once();
      v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Log.topicManager);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v15, a2, v8);
      v52 = v21;
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, (os_log_type_t)v54))
      {
        v64 = v54;
        v55 = swift_slowAlloc();
        v65 = (_QWORD *)swift_slowAlloc();
        v66 = (_QWORD *)swift_slowAlloc();
        v72 = v66;
        *(_DWORD *)v55 = 136315650;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v56 = dispatch thunk of CustomStringConvertible.description.getter();
        v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
        *(_WORD *)(v55 + 12) = 2080;
        if ((_BYTE)v68)
        {
          if (v68 == 1)
            v58 = 0xD000000000000013;
          else
            v58 = 0xD000000000000010;
          if (v68 == 1)
            v59 = v67 | 0x8000000000000000;
          else
            v59 = 0x80000001A0F18DD0;
        }
        else
        {
          v59 = 0xE600000000000000;
          v58 = 0x627553627550;
        }
        v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 22) = 2112;
        v71 = (uint64_t)v52;
        v60 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v61 = v65;
        *v65 = v52;

        _os_log_impl(&dword_1A0DB3000, v53, (os_log_type_t)v64, "Conversation for group=%s is not yet ready to establish a (%s) plugin connection: %@", (uint8_t *)v55, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v61, -1, -1);
        v62 = v66;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v62, -1, -1);
        MEMORY[0x1A1B05CC4](v55, -1, -1);

        v21 = 0;
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
        v21 = 0;
      }
    }
  }
LABEL_21:
  *a4 = v21;
}

uint64_t TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, a2, a3, MEMORY[0x1E0DF2290], "Creating AttachmentLedgerTopic, topic=%s", (void (*)(_QWORD))type metadata accessor for AttachmentLedgerTopic);
}

uint64_t closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v19 = a1;
  v23 = a4;
  v20 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v20 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v20);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = TopicManager.conversationClient(groupUUID:)(a1);
  v10 = swift_allocObject();
  v21 = v10;
  swift_weakInit();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a3;
  v12 = swift_allocObject();
  swift_weakInit();
  v13 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v20);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = v12;
  *((_QWORD *)v15 + 3) = a2;
  *((_QWORD *)v15 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], v9, v13);
  type metadata accessor for AttachmentLedgerTopic(0);
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  v16 = AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(a2, a3, (uint64_t)partial apply for closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:), (uint64_t)v11, (uint64_t)partial apply for closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:), (uint64_t)v15);
  swift_release();
  swift_release();
  result = swift_release();
  *v23 = v16;
  return result;
}

uint64_t closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong;
  uint64_t v6;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Strong + 216))(a2, a3);
  swift_release();
  return v6;
}

uint64_t closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t result;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v17 = Strong;
    if ((objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags), sel_sharePlayAttachmentLedgerEnabled) & 1) != 0)
    {
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 304))(a5, v34, a4, a1, *(_QWORD *)(a1 + 40));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic, Error>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic, Error>, MEMORY[0x1E0C95D90]);
      Publisher.map<A>(_:)();
      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider>, MEMORY[0x1E0C95950]);
      v18 = Publisher.eraseToAnyPublisher()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      if (one-time initialization token for topicManager != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1A0DB3000, v20, v21, "FeatureFlag is not enabled so we can't bootstrap a PluginAttachmentLedgerTopic", v22, 2u);
        MEMORY[0x1A1B05CC4](v22, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error>);
      swift_allocObject();
      v23 = PassthroughSubject.init()();
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      v24 = (void *)swift_allocError();
      *v25 = 0;
      v36 = (uint64_t)v24;
      PassthroughSubject.send(completion:)();

      v36 = v23;
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error>, MEMORY[0x1E0C95F48]);
      v18 = Publisher.eraseToAnyPublisher()();
      swift_release();
      swift_release();
    }
    return v18;
  }
  else
  {
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, v12);
    swift_bridgeObjectRetain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      v36 = v31;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a4, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      _os_log_impl(&dword_1A0DB3000, v28, v29, "TopicManager is no longer available, topic=%s, group=%s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v31, -1, -1);
      MEMORY[0x1A1B05CC4](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v3 = *a1;
  v4 = type metadata accessor for PluginAttachmentLedgerTopic();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D15058];
  a2[3] = v4;
  a2[4] = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic, v5, (uint64_t)&protocol conformance descriptor for PluginAttachmentLedgerTopic);
  *a2 = v3;
  return swift_retain();
}

uint64_t TopicManager.createTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, a2, a3, MEMORY[0x1E0DF2270], "Creating Topic, topic=%s", (void (*)(_QWORD))type metadata accessor for Topic);
}

uint64_t TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void), const char *a5, void (*a6)(_QWORD))
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;

  if (one-time initialization token for topicManager != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = a4();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v18 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v11, v12, a5, v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    MEMORY[0x1A1B05CC4](v13, -1, -1);

  }
  else
  {

    v15 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1E0C80A78](v15);
  a6(0);
  Lock.withLock<A>(_:)();
  return v18;
}

uint64_t closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t *v18;

  v17 = a2;
  v18 = a4;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = TopicManager.conversationClient(groupUUID:)(a1);
  v10 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v10;
  v13 = v17;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  type metadata accessor for Topic();
  v14 = swift_allocObject();
  swift_bridgeObjectRetain_n();
  v15 = specialized Topic.init(name:delegate:pubSubTopicGenerator:)(v13, a3, (uint64_t)v9, (uint64_t)partial apply for closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:), (uint64_t)v12, v14);
  result = swift_release();
  *v18 = v15;
  return result;
}

uint64_t closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[4];
  uint64_t v51;
  _QWORD v52[4];

  v45 = a4;
  v47 = a3;
  v43 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>>);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v44 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](v44);
  v11 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v42 - v12;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v15 = Strong;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)Strong + 192))(v52);
    __swift_project_boxed_opaque_existential_1(v52, v52[3]);
    v16 = v47;
    v17 = v45;
    v51 = dispatch thunk of ActivitySessionContainerProvider.topicCategory(groupUUID:name:)();
    v18 = a5;
    v19 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v18, v44);
    outlined init with copy of Topic.BootstrapPubSubTopicInfo(v43, (uint64_t)v50);
    v20 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v15;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v22 + v20, v11, v19);
    v23 = (uint64_t *)(v22 + v21);
    *v23 = v16;
    v23[1] = v17;
    v24 = (_OWORD *)(v22 + ((v21 + 23) & 0xFFFFFFFFFFFFFFF8));
    v25 = v50[3];
    v24[2] = v50[2];
    v24[3] = v25;
    v26 = v50[1];
    *v24 = v50[0];
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PubSubClient.TopicCategory, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>);
    v27 = MEMORY[0x1E0C95D90];
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PubSubClient.TopicCategory, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PubSubClient.TopicCategory, Never>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PubSubTopic, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>, v27);
    v28 = v46;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>>, MEMORY[0x1E0C95B78]);
    v29 = v49;
    v30 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v29);
    return v30;
  }
  else
  {
    v32 = v47;
    v49 = v8;
    v33 = v45;
    v34 = v44;
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v13, a5, v34);
    swift_bridgeObjectRetain_n();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      *(_QWORD *)&v50[0] = v39;
      *(_DWORD *)v38 = 136315394;
      swift_bridgeObjectRetain();
      v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v34);
      _os_log_impl(&dword_1A0DB3000, v36, v37, "TopicManager is no longer available, topic=%s group=%s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v39, -1, -1);
      MEMORY[0x1A1B05CC4](v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v34);
    }

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for topicManager != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v12 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v6, v7, "Creating UnreliableMessenger, topic=%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v9, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);

  }
  else
  {

    v10 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1E0C80A78](v10);
  type metadata accessor for UnreliableMessenger();
  Lock.withLock<A>(_:)();
  return v12;
}

uint64_t closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;

  v50 = a6;
  v51 = a8;
  v49 = a7;
  v44 = a4;
  v45 = a5;
  v42 = a2;
  v37 = a1;
  v52 = a9;
  v11 = type metadata accessor for UUID();
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = *(_QWORD *)(v46 + 64);
  MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UnreliableMessenger.Configuration();
  v14 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  v15 = v14;
  v43 = v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v18;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v34 - v19;
  v35 = TopicManager.conversationClient(groupUUID:)(a2);
  objc_msgSend(a3, sel_egressMessagePayloadMaxSizeBytes);
  objc_msgSend(a3, sel_channelStreamMaxQueueSize);
  objc_msgSend(a3, sel_channelStreamMaxTries);
  v36 = a3;
  objc_msgSend(a3, sel_channelStreamRetryIntervalMillis);
  objc_msgSend(a3, sel_seqNumBufferSize);
  v39 = v20;
  UnreliableMessenger.Configuration.init(datagramPayloadMaxSizeBytes:outgoingQueueMaxSize:channelStreamMaxTries:channelStreamRetryInterval:seqNumBufferSize:)();
  v41 = type metadata accessor for UnreliableMessenger();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v13);
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v21 = (_QWORD *)swift_allocObject();
  v23 = v44;
  v22 = v45;
  v21[2] = v35;
  v21[3] = v23;
  v21[4] = v22;
  v24 = swift_allocObject();
  swift_weakInit();
  v26 = v46;
  v25 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v56, v42, v47);
  v27 = (*(unsigned __int8 *)(v26 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v28 = (v48 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (char *)swift_allocObject();
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v23;
  *((_QWORD *)v29 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v29[v27], v56, v25);
  v30 = v36;
  *(_QWORD *)&v29[v28] = v36;
  swift_unknownObjectRetain();
  swift_retain();
  v31 = v30;
  swift_bridgeObjectRetain_n();
  v32 = UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v40);
  result = swift_release();
  *v52 = v32;
  return result;
}

uint64_t closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)Strong + 264))(a4, a2, a3, a5);
    swift_release();
    return v14;
  }
  else
  {
    v24 = a2;
    v25 = v10;
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, a4, v9);
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v27 = v20;
      *(_DWORD *)v19 = 136315394;
      swift_bridgeObjectRetain();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, a3, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 2080;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
      _os_log_impl(&dword_1A0DB3000, v17, v18, "Topic manager is no longer available, topic=%s group=%s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
    }

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _QWORD v59[6];

  v5 = v4;
  v47 = a4;
  v43 = a3;
  v42 = a2;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v48 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>>);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<UnreliableMessengerServiceProvider>);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v42 - v16;
  v54 = *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18(v17, a1, v11);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v19 = v55;
  if (!*(_QWORD *)(v55 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v58 = 0;
    v56 = 0u;
    v57 = 0u;
    goto LABEL_9;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  v23 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v22 + 152))(&v56, v23);
  swift_release();
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v56, &demangling cache variable for type metadata for UnreliableMessengerServiceProvider?);
    Lock.unlock()();
    v59[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 232))(a1, 1);
    v18(v15, a1, v11);
    v30 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v5;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v31 + v30, v15, v11);
    v32 = v47;
    *(_QWORD *)(v31 + ((v13 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = v47;
    swift_retain();
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnreliableMessengerServiceProvider);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>, MEMORY[0x1E0C95D90]);
    v34 = v48;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>, MEMORY[0x1E0C95708]);
    v36 = v50;
    v35 = v51;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v35);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>>, MEMORY[0x1E0C95A38]);
    v37 = v53;
    v38 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v37);
    goto LABEL_10;
  }
  outlined init with take of TypedPayloadDecoding(&v56, (uint64_t)v59);
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.topicManager);
  v25 = v43;
  swift_bridgeObjectRetain_n();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_QWORD *)&v56 = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain();
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v25, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v26, v27, "Re-using existing UnreliableMessengerServiceProvider for topic=%s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    MEMORY[0x1A1B05CC4](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v59, (uint64_t)&v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnreliableMessengerServiceProvider);
  v40 = v44;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<UnreliableMessengerServiceProvider> and conformance Just<A>, &demangling cache variable for type metadata for Just<UnreliableMessengerServiceProvider>, MEMORY[0x1E0C960B0]);
  v41 = v46;
  v38 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v41);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
LABEL_10:
  Lock.assertNotOwned()();
  return v38;
}

uint64_t closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnreliableMessengerServiceProvider?);
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE *v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a5;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v13 = v39;
  if (*(_QWORD *)(v39 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_retain();
    swift_bridgeObjectRelease();
    v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    MEMORY[0x1E0C80A78](v17);
    v36[-4] = a1;
    v36[-3] = a3;
    v36[-2] = a2;
    v36[-1] = a4;
    v18 = (void *)v36[1];
    (*(void (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v16 + 200))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:));
    if (!v18)
    {
      swift_release();
      return;
    }
    swift_release();
    v19 = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.topicManager);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1A0DB3000, v21, v22, "Can't create UnreliableMessenger yet because there's no ConversationClient object", v23, 2u);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    v19 = (void *)swift_allocError();
    *v24 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.topicManager);
  v26 = v19;
  v27 = v19;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v39 = v31;
    *(_DWORD *)v30 = 136315138;
    v38 = (uint64_t)v19;
    v32 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v33 = String.init<A>(reflecting:)();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v28, v29, "Failed to create UnreliableMessenger due to error: %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    MEMORY[0x1A1B05CC4](v30, -1, -1);

  }
  else
  {

  }
  v35 = (_OWORD *)v37;
  *(_QWORD *)(v37 + 32) = 0;
  *v35 = 0u;
  v35[1] = 0u;
}

uint64_t closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(v13, a3, a4);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_BYTE *)(a5 + 40) = 1;
  return result;
}

uint64_t TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98[3];

  v9 = v8;
  v95 = a8;
  v96 = a6;
  v93 = a7;
  v94 = a3;
  v88 = a4;
  v89 = a5;
  v92 = a2;
  v11 = type metadata accessor for PubSubClient.TopicCategory();
  v90 = *(_QWORD *)(v11 - 8);
  v91 = v11;
  MEMORY[0x1E0C80A78](v11);
  v80 = v12;
  v81 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>);
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>);
  v83 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v82 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>>);
  v86 = *(_QWORD *)(v15 - 8);
  v87 = v15;
  MEMORY[0x1E0C80A78](v15);
  v84 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  MEMORY[0x1E0C80A78](v17);
  v74 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubTopic.Configuration?);
  MEMORY[0x1E0C80A78](v19);
  v73 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  v24 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v72 - v26;
  v28 = *(_QWORD *)(v8 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v76 = a1;
  v29(v27, a1, v21);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v30 = *(_QWORD *)&v98[0];
  if (!*(_QWORD *)(*(_QWORD *)&v98[0] + 16)
    || (v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v27), (v32 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v21);
    goto LABEL_9;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31);
  swift_retain();
  swift_bridgeObjectRelease();
  v34 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, v21);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 160))(v34);
  swift_release();
  if (!v35)
  {
LABEL_9:
    v75 = v28;
    Lock.unlock()();
    v44 = v76;
    *(_QWORD *)&v98[0] = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 232))(v76, 0);
    v29(v25, v44, v21);
    v45 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v9;
    (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v46 + v45, v25, v21);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    type metadata accessor for PubSubClient();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>, MEMORY[0x1E0C95D90]);
    v47 = v77;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>, MEMORY[0x1E0C95708]);
    v48 = v82;
    v49 = v79;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v47, v49);
    v51 = v90;
    v50 = v91;
    v52 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v88, v91);
    outlined init with copy of AudioSessionAssertionManager(v89, (uint64_t)v98);
    v53 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v54 = (v80 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    v55 = (v54 + 47) & 0xFFFFFFFFFFFFFFF8;
    v56 = swift_allocObject();
    v57 = v94;
    *(_QWORD *)(v56 + 16) = v92;
    *(_QWORD *)(v56 + 24) = v57;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v56 + v53, v52, v50);
    outlined init with take of TypedPayloadDecoding(v98, v56 + v54);
    v58 = (_QWORD *)(v56 + v55);
    v59 = v95;
    v60 = v93;
    *v58 = v96;
    v58[1] = v60;
    *(_QWORD *)(v56 + ((v55 + 23) & 0xFFFFFFFFFFFFFFF8)) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubTopic, Error>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, MEMORY[0x1E0C95A38]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubTopic, Error>, MEMORY[0x1E0C96108]);
    v62 = v84;
    v61 = v85;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v61);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>>, MEMORY[0x1E0C95B78]);
    v63 = v87;
    v64 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v62, v63);
    goto LABEL_10;
  }
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Log.topicManager);
  v37 = v94;
  swift_bridgeObjectRetain_n();
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.default.getter();
  v40 = os_log_type_enabled(v38, v39);
  v41 = v92;
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    *(_QWORD *)&v98[0] = v43;
    *(_DWORD *)v42 = 136315138;
    swift_bridgeObjectRetain();
    v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v37, (uint64_t *)v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v38, v39, "Creating PubSubTopic, topic=%s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v43, -1, -1);
    MEMORY[0x1A1B05CC4](v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  v66 = type metadata accessor for PubSubTopic.Configuration();
  v67 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v73, 1, 1, v66);
  v69 = v90;
  v68 = v91;
  v70 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v74, v88, v91);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v68);
  outlined init with copy of AudioSessionAssertionManager(v89, (uint64_t)v98);
  v71 = dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v98, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v70, &demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v67, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  *(_QWORD *)&v98[0] = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubTopic, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubTopic, Error>, MEMORY[0x1E0C96108]);
  v64 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
LABEL_10:
  Lock.assertNotOwned()();
  return v64;
}

void closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a4;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v12 = v37;
  if (*(_QWORD *)(v37 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_retain();
    swift_bridgeObjectRelease();
    v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    MEMORY[0x1E0C80A78](v16);
    *(&v35 - 2) = a1;
    *(&v35 - 1) = a3;
    v17 = (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v15 + 192))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:));
    if (!v4)
    {
      v34 = v17;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
    v18 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1A0DB3000, v20, v21, "Can't create PubSubClient yet because there's no ConversationClient object", v22, 2u);
      MEMORY[0x1A1B05CC4](v22, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    v18 = (void *)swift_allocError();
    *v23 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.topicManager);
  v25 = v18;
  v26 = v18;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v37 = v30;
    *(_DWORD *)v29 = 136315138;
    v36 = (uint64_t)v18;
    v31 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v32 = String.init<A>(reflecting:)();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v27, v28, "Failed to create PubSubClient due to error: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    MEMORY[0x1A1B05CC4](v29, -1, -1);

  }
  else
  {

  }
  v34 = 0;
LABEL_17:
  *v35 = v34;
}

uint64_t closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[2];
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];

  v35 = a5;
  v33 = a4;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubTopic.Configuration?);
  MEMORY[0x1E0C80A78](v15);
  v34 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *a1;
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v30 = a7;
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v31 = a2;
    v22 = v21;
    v37[0] = v21;
    v29[1] = a6;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, a3, v37);
    a7 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v18, v19, "Creating PubSubTopic, topic=%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v22, -1, -1);
    MEMORY[0x1A1B05CC4](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = type metadata accessor for PubSubTopic.Configuration();
  v24 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v34, 1, 1, v23);
  v25 = type metadata accessor for PubSubClient.TopicCategory();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v14, v33, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v25);
  outlined init with copy of AudioSessionAssertionManager(v35, (uint64_t)v37);
  v27 = dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  result = outlined destroy of OS_dispatch_queue.SchedulerOptions?(v24, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  *a7 = v27;
  return result;
}

uint64_t TopicManager.createPubSubClient(from:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _BYTE *v29;
  _QWORD v31[2];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v31 - v9;
  v11 = objc_msgSend(a1, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v12);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    v15 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v16 = objc_msgSend(a1, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = objc_msgSend(a1, sel_localParticipantIdentifier);
    v18 = objc_msgSend(v14, sel_identifier);
    v31[1] = v2;
    v19 = v5;
    v20 = v18;
    v21 = objc_msgSend(a1, sel_virtualParticipantConfig);
    (*(void (**)(char *, char *, id, id, id))(*(_QWORD *)v1 + 288))(v10, v8, v17, v20, v21);
    v23 = v22;

    v24 = *(void (**)(char *, uint64_t))(v19 + 8);
    v24(v8, v4);
    v24(v10, v4);
    swift_release();
  }
  else
  {
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.topicManager);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.fault.getter();
    v23 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1A0DB3000, v26, (os_log_type_t)v23, "Tried to create PubSubClient on container without virtualParticipant", v28, 2u);
      MEMORY[0x1A1B05CC4](v28, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *v29 = 0;
    swift_willThrow();
  }
  return v23;
}

uint64_t TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, uint64_t);
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;

  v42 = a3;
  v41 = a4;
  v45 = a1;
  v7 = type metadata accessor for PluginClient.Configuration();
  v46 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v44 = (uint64_t)&v36 - v11;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.topicManager);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v40 = a2;
  v17(v15, a2, v12);
  v18 = a5;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v39 = v7;
    v22 = v21;
    v36 = (_QWORD *)swift_slowAlloc();
    v37 = swift_slowAlloc();
    v48[0] = v37;
    *(_DWORD *)v22 = 136315906;
    v38 = v10;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v23 = dispatch thunk of CustomStringConvertible.description.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *(_WORD *)(v22 + 12) = 2048;
    v25 = v42;
    v47 = (uint64_t)v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2048;
    v26 = v41;
    v47 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 32) = 2112;
    v47 = (uint64_t)v18;
    v27 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v28 = v36;
    *v36 = v18;

    v10 = v38;
    _os_log_impl(&dword_1A0DB3000, v19, v20, "Creating PubSubClient for groupUUID=%s, localParticipantID=%llu, virtualParticipantID=%llu, virtualParticipantConfig=%@", (uint8_t *)v22, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v28, -1, -1);
    v29 = v37;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    v30 = v22;
    v7 = v39;
    MEMORY[0x1A1B05CC4](v30, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    v26 = v41;
    v25 = v42;
  }
  v31 = v44;
  closure #1 in TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)(v26, v18, v25, v44);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 16))(v10, v31, v7);
  v33 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v43 + 192);
  v33(v48, v32);
  __swift_project_boxed_opaque_existential_1(v48, v49);
  dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter();
  UUID.uuidString.getter();
  type metadata accessor for PluginClient();
  swift_allocObject();
  v34 = PluginClient.init(config:queue:reporter:reporterTag:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  type metadata accessor for PubSubClient();
  swift_retain();
  objc_msgSend(v18, sel_rpcStreamMaxAttempts);
  objc_msgSend(v18, sel_rpcStreamRetryIntervalMillis);
  ((void (*)(uint64_t *__return_ptr))v33)(v48);
  __swift_project_boxed_opaque_existential_1(v48, v49);
  dispatch thunk of ActivitySessionContainerProvider.pubSubTopicReporter.getter();
  UUID.uuidString.getter();
  PubSubClient.__allocating_init(pluginClient:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v31, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  return v34;
}

uint64_t closure #1 in TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *v29;

  v27 = a3;
  v28 = a4;
  v6 = type metadata accessor for PluginEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v29 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v26 - v10);
  v12 = UUID.uuidString.getter();
  v14 = v13;
  v15 = objc_msgSend(a2, sel_idsAliasingSalt);
  if (v15)
  {
    v16 = v15;
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0xF000000000000000;
  }
  *v11 = v12;
  v11[1] = v14;
  v11[2] = a1;
  v11[3] = v17;
  v20 = (uint64_t)v27;
  v11[4] = v19;
  v11[5] = v20;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v11, *MEMORY[0x1E0D14BD0], v6);
  v27 = objc_msgSend(a2, sel_connectionRetryIntervalMillis);
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v29, v11, v6);
  objc_msgSend(a2, sel_connectionMaxAttempts);
  objc_msgSend(a2, sel_serverCertValidationEnabled);
  v21 = objc_msgSend(a2, sel_serverCertHostnameOverride);
  if (v21)
  {
    v22 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  v23 = objc_msgSend(a2, sel_serverCertLeafMarkerOIDOverride);
  if (v23)
  {
    v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v11, v6);
}

uint64_t TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for DatagramClient.Configuration();
  v38 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v37 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v32 - v9;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.topicManager);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v36 = a1;
  v16(v14, a1, v11);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v35 = a3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v33 = a2;
    v22 = v21;
    v40 = v21;
    v34 = v6;
    *(_DWORD *)v20 = 136315138;
    v32[1] = v20 + 4;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v23 = dispatch thunk of CustomStringConvertible.description.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v40);
    v6 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl(&dword_1A0DB3000, v17, v18, "Creating DatagramClient for groupUUID=%s", v20, 0xCu);
    swift_arrayDestroy();
    v25 = v22;
    a2 = v33;
    MEMORY[0x1A1B05CC4](v25, -1, -1);
    v26 = v20;
    a3 = v35;
    MEMORY[0x1A1B05CC4](v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  closure #1 in TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)(a2, (uint64_t)v10);
  v27 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v37, v10, v6);
  v28 = type metadata accessor for DatagramClient();
  swift_allocObject();
  v29 = DatagramClient.init(config:queue:)();
  v30 = MEMORY[0x1E0D14BC0];
  a3[3] = v28;
  a3[4] = v30;
  *a3 = v29;
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v6);
}

uint64_t closure #1 in TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];

  v19[1] = a2;
  v3 = type metadata accessor for DatagramEndpoint();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (_QWORD *)((char *)v19 - v8);
  v10 = UUID.uuidString.getter();
  v12 = v11;
  v13 = objc_msgSend(a1, sel_idsAliasingSalt);
  if (v13)
  {
    v14 = v13;
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xF000000000000000;
  }
  *v9 = v10;
  v9[1] = v12;
  v9[2] = v15;
  v9[3] = v17;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v4 + 104))(v9, *MEMORY[0x1E0D14C10], v3);
  (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 16))(v7, v9, v3);
  objc_msgSend(a1, sel_establishChannelMaxAttempts);
  objc_msgSend(a1, sel_establishChannelRetryIntervalMillis);
  objc_msgSend(a1, sel_egressMessagePayloadMaxSizeBytes);
  DatagramClient.Configuration.init(endpoint:establishChannelMaxAttempts:establishChannelRetryInterval:egressMessagePayloadMaxSizeBytes:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63[3];

  v6 = v5;
  v59 = a3;
  v60 = a5;
  v57 = a4;
  v58 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>);
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>>);
  v55 = *(_QWORD *)(v11 - 8);
  v56 = v11;
  MEMORY[0x1E0C80A78](v11);
  v53 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v47 - v18;
  v61 = *(_QWORD *)(v5 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20(v19, a1, v13);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v21 = *(_QWORD *)&v63[0];
  if (!*(_QWORD *)(*(_QWORD *)&v63[0] + 16)
    || (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
  swift_retain();
  swift_bridgeObjectRelease();
  v25 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 168))(v25);
  swift_release();
  if (!v26)
  {
LABEL_9:
    Lock.unlock()();
    *(_QWORD *)&v63[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 232))(a1, 2);
    v20(v17, a1, v13);
    v35 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v6;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v36 + v35, v17, v13);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    type metadata accessor for AttachmentLedgerClient();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>, MEMORY[0x1E0C95D90]);
    v37 = v48;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>, MEMORY[0x1E0C95708]);
    v38 = v50;
    v39 = v51;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v38);
    outlined init with copy of AudioSessionAssertionManager(v57, (uint64_t)v63);
    v40 = (_QWORD *)swift_allocObject();
    v41 = v59;
    v40[2] = v58;
    v40[3] = v41;
    outlined init with take of TypedPayloadDecoding(v63, (uint64_t)(v40 + 4));
    v40[9] = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, MEMORY[0x1E0C95A38]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>, MEMORY[0x1E0C96108]);
    v43 = v53;
    v42 = v54;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v42);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>>, MEMORY[0x1E0C95B78]);
    v44 = v56;
    v45 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v44);
    goto LABEL_10;
  }
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Log.topicManager);
  v28 = v59;
  swift_bridgeObjectRetain_n();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  v31 = os_log_type_enabled(v29, v30);
  v32 = v58;
  if (v31)
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    *(_QWORD *)&v63[0] = v34;
    *(_DWORD *)v33 = 136315138;
    swift_bridgeObjectRetain();
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v28, (uint64_t *)v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v29, v30, "Creating PluginAttachmentLedgerTopic, topic=%s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v34, -1, -1);
    MEMORY[0x1A1B05CC4](v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  *(_QWORD *)&v63[0] = dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>, MEMORY[0x1E0C96108]);
  v45 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
LABEL_10:
  Lock.assertNotOwned()();
  return v45;
}

uint64_t closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _BYTE *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a4;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v12 = v37;
  if (*(_QWORD *)(v37 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_retain();
    swift_bridgeObjectRelease();
    v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    MEMORY[0x1E0C80A78](v16);
    *(&v35 - 2) = a1;
    *(&v35 - 1) = a3;
    v17 = (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v15 + 208))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:));
    if (!v4)
    {
      v34 = v17;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
    v18 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1A0DB3000, v20, v21, "Can't create AttachmentLedgerClient yet because there's no ConversationClient object", v22, 2u);
      MEMORY[0x1A1B05CC4](v22, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    v18 = (void *)swift_allocError();
    *v23 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.topicManager);
  v25 = v18;
  v26 = v18;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v37 = v30;
    *(_DWORD *)v29 = 136315138;
    v36 = (uint64_t)v18;
    v31 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v32 = String.init<A>(reflecting:)();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v27, v28, "Failed to create AttachmentLedgerClient due to error: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    MEMORY[0x1A1B05CC4](v29, -1, -1);

  }
  else
  {

  }
  v34 = 0;
LABEL_17:
  *v35 = v34;
}

uint64_t closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;

  if (one-time initialization token for topicManager != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v13 = a3;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Creating PluginAttachmentLedgerTopic, topic=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    v11 = v9;
    a3 = v13;
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  result = dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)();
  *a3 = result;
  return result;
}

uint64_t TopicManager.createAttachmentLedgerClient(from:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD *__return_ptr, uint64_t);
  void *v41;
  id v42;
  char *v43;
  id v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _BYTE *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _BYTE *v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[4];
  unint64_t v68;

  v3 = v1;
  v5 = type metadata accessor for AttachmentLedgerClient.Config();
  MEMORY[0x1E0C80A78](v5);
  v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PluginClient.Configuration();
  v65 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v64 = (uint64_t)&v56 - v12;
  v13 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.topicManager);
  v18 = a1;
  v68 = v17;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v56 = v15;
    v22 = (uint8_t *)v21;
    v23 = (_QWORD *)swift_slowAlloc();
    v57 = v2;
    *(_DWORD *)v22 = 138412290;
    v67[0] = v18;
    v24 = v18;
    v58 = v3;
    v25 = v18;
    v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v25;

    v18 = v25;
    v3 = v58;
    _os_log_impl(&dword_1A0DB3000, v19, v20, "Creating AttachmentLedgerClient for container: %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    MEMORY[0x1A1B05CC4](v22, -1, -1);

  }
  else
  {

  }
  v27 = objc_msgSend(v18, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v28);
  v30 = v29;
  swift_bridgeObjectRelease();
  if (v30)
  {
    v31 = objc_msgSend(v18, sel_virtualParticipantConfig);
    v32 = objc_msgSend(v31, sel_idsAliasingSalt);

    if (v32)
    {
      v33 = (char *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v35 = v34;

      static String.Encoding.utf8.getter();
      v36 = String.init(data:encoding:)();
      if (v37)
      {
        v38 = v64;
        v57 = v37;
        v58 = v36;
        closure #2 in TopicManager.createAttachmentLedgerClient(from:)(v18, v30, v33, v35, v64);
        v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 16))(v60, v38, v66);
        v40 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 192);
        v68 = v35;
        v40(v67, v39);
        v41 = v18;
        __swift_project_boxed_opaque_existential_1(v67, v67[3]);
        dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter();
        v42 = objc_msgSend(v18, sel_UUID);
        v43 = v59;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
        type metadata accessor for PluginClient();
        swift_allocObject();
        v62 = PluginClient.init(config:queue:reporter:reporterTag:)();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
        type metadata accessor for AttachmentLedgerClient();
        v44 = objc_msgSend(v41, sel_virtualParticipantConfig);
        objc_msgSend(v44, sel_rpcStreamMaxAttempts);

        v45 = objc_msgSend(v41, sel_virtualParticipantConfig);
        objc_msgSend(v45, sel_rpcStreamRetryIntervalMillis);

        AttachmentLedgerClient.Config.init(participantIDSalt:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:)();
        objc_msgSend(v41, sel_localParticipantIdentifier);
        v46 = AttachmentLedgerClient.__allocating_init(client:config:localParticipantID:)();
        outlined consume of Data._Representation((uint64_t)v33, v68);

        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
        return v46;
      }
      outlined consume of Data._Representation((uint64_t)v33, v35);
    }
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.fault.getter();
    v46 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1A0DB3000, v51, (os_log_type_t)v46, "Failed to find aliasingSalt from virtualParticipantConfig. Can't create AttachmentLedgerClient without the salt.", v53, 2u);
      MEMORY[0x1A1B05CC4](v53, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *v54 = 2;
    swift_willThrow();

  }
  else
  {
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.fault.getter();
    v46 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1A0DB3000, v47, (os_log_type_t)v46, "Tried to create AttachmentLedgerClient on container without a corresponding virtualParticipant", v49, 2u);
      MEMORY[0x1A1B05CC4](v49, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *v50 = 0;
    swift_willThrow();
  }
  return v46;
}

uint64_t closure #2 in TopicManager.createAttachmentLedgerClient(from:)@<X0>(void *a1@<X0>, void *a2@<X1>, char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v36 = a5;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PluginEndpoint();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v33 - v15);
  v17 = objc_msgSend(a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = UUID.uuidString.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = objc_msgSend(v33, sel_identifier);
  v22 = objc_msgSend(a1, sel_localParticipantIdentifier);
  *v16 = v18;
  v16[1] = v20;
  v16[2] = (uint64_t)v21;
  v24 = (uint64_t)v34;
  v23 = v35;
  v16[3] = (uint64_t)v34;
  v16[4] = v23;
  v16[5] = (uint64_t)v22;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v11 + 104))(v16, *MEMORY[0x1E0D14BD0], v10);
  outlined copy of Data._Representation(v24, v23);
  v25 = objc_msgSend(a1, sel_virtualParticipantConfig);
  v33 = objc_msgSend(v25, sel_connectionRetryIntervalMillis);

  v34 = v14;
  v35 = v11;
  (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v14, v16, v10);
  v26 = objc_msgSend(a1, sel_virtualParticipantConfig);
  objc_msgSend(v26, sel_connectionMaxAttempts);

  v27 = objc_msgSend(a1, sel_virtualParticipantConfig);
  objc_msgSend(v27, sel_serverCertValidationEnabled);

  v28 = objc_msgSend(a1, sel_virtualParticipantConfig);
  v29 = objc_msgSend(v28, sel_serverCertHostnameOverride);

  if (v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  v30 = objc_msgSend(a1, sel_virtualParticipantConfig);
  v31 = objc_msgSend(v30, sel_serverCertLeafMarkerOIDOverride);

  if (v31)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 8))(v16, v10);
}

uint64_t TopicManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t TopicManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id TopicManager.ConversationClient.activeSubscriptions.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 24);
}

void TopicManager.ConversationClient.activeSubscriptions.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

uint64_t (*TopicManager.ConversationClient.activeSubscriptions.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t TopicManager.ConversationClient.lock.getter()
{
  return swift_retain();
}

uint64_t TopicManager.ConversationClient.unreliableMessagingService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  _BYTE v11[48];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v3 + 16))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    v10 = -1;
LABEL_9:
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1u);
  if ((v5 & 1) != 0)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(_QWORD *)(v3 + 56) + 48 * v4, (uint64_t)&v7);
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    v10 = -1;
  }
  swift_bridgeObjectRelease();
  if (v10 == 255)
    goto LABEL_9;
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v7, (uint64_t)v11);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v11, (uint64_t)&v7);
  if (v10 == 1)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v11);
    return outlined init with take of TypedPayloadDecoding(&v7, a1);
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v7);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.ConversationClient.pubSubClient.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v9[48];

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v1 + 16))
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v8 = -1;
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    return 0;
  }
  swift_bridgeObjectRetain();
  v2 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v3 & 1) != 0)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(_QWORD *)(v1 + 56) + 48 * v2, (uint64_t)&v5);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v8 = -1;
  }
  swift_bridgeObjectRelease();
  if (v8 == 255)
    goto LABEL_9;
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v5, (uint64_t)v9);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v9, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v5);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
    return v5;
  }
  return result;
}

uint64_t TopicManager.ConversationClient.attachmentLedgerClient.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v9[48];

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v1 + 16))
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v8 = -1;
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    return 0;
  }
  swift_bridgeObjectRetain();
  v2 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  if ((v3 & 1) != 0)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(_QWORD *)(v1 + 56) + 48 * v2, (uint64_t)&v5);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    v8 = -1;
  }
  swift_bridgeObjectRelease();
  if (v8 == 255)
    goto LABEL_9;
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v5, (uint64_t)v9);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v9, (uint64_t)&v5);
  if (v8 == 2)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
    return v5;
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v5);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

_QWORD *TopicManager.ConversationClient.init(lock:)(uint64_t a1)
{
  _QWORD *v1;

  v1[2] = MEMORY[0x1E0DEE9E0];
  v1[3] = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  v1[4] = a1;
  return v1;
}

id *TopicManager.ConversationClient.deinit()
{
  id *v0;

  if ((*((uint64_t (**)(void))*v0 + 20))())
  {
    dispatch thunk of PubSubClient.close()();
    swift_release();
  }
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t TopicManager.ConversationClient.__deallocating_deinit()
{
  id *v0;

  if ((*((uint64_t (**)(void))*v0 + 20))())
  {
    dispatch thunk of PubSubClient.close()();
    swift_release();
  }
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

void TopicManager.ConversationClient.update(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[7];

  v2 = v1;
  Lock.assertOwned()();
  v4 = objc_msgSend(a1, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    v5 = v44[1];
    v6 = v44[2];
    v7 = v44[3];
    v8 = v44[4];
    v9 = v44[5];
  }
  else
  {
    v8 = 0;
    v10 = -1 << *(_BYTE *)(v5 + 32);
    v6 = v5 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(v5 + 56);
  }
  v41 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_43;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = (id)v44[0];
    swift_unknownObjectRelease();
    v14 = v8;
    v43 = v9;
    if (!v15)
      goto LABEL_43;
LABEL_34:
    v42 = v14;
    v19 = objc_msgSend(v15, sel_pluginName);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TopicManager.ConversationClient.update(with:), v23);
    v25 = swift_bridgeObjectRelease();
    if (v24 == 2)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 168))(v25))
      {
        objc_msgSend(a1, sel_localParticipantIdentifier);
        dispatch thunk of AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)();
LABEL_10:
        swift_release();
      }
LABEL_11:

      goto LABEL_12;
    }
    if (!v24)
    {
      if ((*(uint64_t (**)(void))(*(_QWORD *)v2 + 160))())
      {
        objc_msgSend(a1, sel_localParticipantIdentifier);
        dispatch thunk of PubSubClient.updateVirtualParticipant(_:localParticipantID:)();
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    if (one-time initialization token for topicManager != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.topicManager);
    v27 = v15;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v44[0] = v40;
      *(_DWORD *)v39 = 136315138;
      v30 = v6;
      v31 = objc_msgSend(v27, sel_pluginName);
      v32 = v5;
      v33 = a1;
      v34 = v2;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

      v6 = v30;
      v38 = v35;
      v2 = v34;
      a1 = v33;
      v5 = v32;
      *(_QWORD *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, v44);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v28, v29, "Virtual participant pluginName: %s unknown", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v40, -1, -1);
      MEMORY[0x1A1B05CC4](v39, -1, -1);

    }
    else
    {

    }
LABEL_12:
    v8 = v42;
    v9 = v43;
  }
  if (v9)
  {
    v43 = (v9 - 1) & v9;
    v13 = __clz(__rbit64(v9)) | (v8 << 6);
    v14 = v8;
LABEL_33:
    v15 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v13);
    if (!v15)
      goto LABEL_43;
    goto LABEL_34;
  }
  v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v41)
      goto LABEL_43;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    v14 = v8 + 1;
    if (!v17)
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v41)
        goto LABEL_43;
      v17 = *(_QWORD *)(v6 + 8 * v14);
      if (!v17)
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v41)
          goto LABEL_43;
        v17 = *(_QWORD *)(v6 + 8 * v14);
        if (!v17)
        {
          v14 = v8 + 4;
          if (v8 + 4 >= v41)
            goto LABEL_43;
          v17 = *(_QWORD *)(v6 + 8 * v14);
          if (!v17)
          {
            v18 = v8 + 5;
            while (v41 != v18)
            {
              v17 = *(_QWORD *)(v6 + 8 * v18++);
              if (v17)
              {
                v14 = v18 - 1;
                goto LABEL_32;
              }
            }
LABEL_43:
            outlined consume of [AnyHashable : Any].Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_32:
    v43 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t TopicManager.ConversationClient.service(generator:)(void (*a1)(_QWORD *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  _QWORD v8[5];
  char v9;
  _QWORD v10[6];

  Lock.assertOwned()();
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 160))();
  if (v5)
    return v5;
  a1(v10);
  if (!v2)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
    if (v9)
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v8);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      *v6 = 0;
      swift_willThrow();
    }
    else
    {
      v3 = v8[0];
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v8, 0);
      swift_endAccess();
    }
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v10);
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  _QWORD v8[5];
  char v9;
  _QWORD v10[6];

  Lock.assertOwned()();
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))();
  if (v5)
    return v5;
  a1(v10);
  if (!v2)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
    if (v9 == 2)
    {
      v3 = v8[0];
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v8, 2);
      swift_endAccess();
    }
    else
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v8);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      *v6 = 0;
      swift_willThrow();
    }
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v10);
  }
  return v3;
}

_QWORD *TopicManager.ConversationClient.service(generator:)@<X0>(_QWORD *(*a1)(__int128 *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9[2];
  char v10;
  __int128 v11;
  uint64_t v12;

  Lock.assertOwned()();
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v2 + 152))(&v11);
  if (v12)
    return (_QWORD *)outlined init with take of TypedPayloadDecoding(&v11, a2);
  v7 = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v11, &demangling cache variable for type metadata for UnreliableMessengerServiceProvider?);
  result = a1(&v11, v7);
  if (!v3)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)&v11, (uint64_t)v9);
    if (v10 == 1)
    {
      outlined init with take of TypedPayloadDecoding(v9, a2);
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)&v11, (uint64_t)v9);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v9, 1);
      swift_endAccess();
    }
    else
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      *v8 = 0;
      swift_willThrow();
    }
    return (_QWORD *)outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v11);
  }
  return result;
}

uint64_t TopicManager.ConversationClient.subscription(for:)()
{
  uint64_t v1;

  type metadata accessor for TopicManager.Subscription();
  Lock.withLock<A>(_:)();
  return v1;
}

void closure #1 in TopicManager.ConversationClient.subscription(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  void *v11;

  type metadata accessor for TopicManager.Subscription();
  v8 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_weakAssign();
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128);
  v10 = swift_bridgeObjectRetain();
  v11 = (void *)v9(v10);
  objc_msgSend(v11, sel_addObject_, v8);

  *a4 = v8;
}

Swift::Void __swiftcall TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
  Lock.withLock<A>(_:)();
}

uint64_t closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()(_QWORD *a1)
{
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v2 = (void *)(*(uint64_t (**)(void))(*a1 + 128))();
  v3 = objc_msgSend(v2, sel_allObjects);

  type metadata accessor for TopicManager.Subscription();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = swift_bridgeObjectRelease();
  if (!v5)
  {
    if ((*(uint64_t (**)(uint64_t))(*a1 + 160))(result))
    {
      dispatch thunk of PubSubClient.close()();
      swift_release();
    }
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_beginAccess();
    a1[2] = v7;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for TopicDelegate.subscription(for:) in conformance TopicManager.ConversationClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t TopicManager.Subscription.topicName.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TopicManager.Subscription.topicName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TopicManager.Subscription.topicName.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t TopicManager.Subscription.deinit()
{
  uint64_t v0;
  uint64_t Strong;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 224))(Strong);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v0;
}

uint64_t TopicManager.Subscription.__deallocating_deinit()
{
  uint64_t Strong;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 224))(Strong);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t key path getter for TopicManager.conversationClientsByGroupUUID : TopicManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for TopicManager.conversationClientsByGroupUUID : TopicManager()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t specialized TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22[5];

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v22[3] = a4;
  v22[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v16 = a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  v17 = MEMORY[0x1E0DEE9D8];
  v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID : TopicManager.ConversationClient]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v16, v14, v11);
  if ((v17 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v18 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_cancellables) = v18;
  v19 = OBJC_IVAR____TtC15GroupActivities12TopicManager_lock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(a3 + v19) = Lock.init()();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v22, a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags) = a2;
  swift_unknownObjectRetain();
  v21 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
  return a3;
}

uint64_t specialized TopicManager.__allocating_init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TopicManager();
  v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  return specialized TopicManager.init(provider:featureFlags:)((uint64_t)v13, a2, v14, a4, a5, a6);
}

unint64_t specialized TopicManager.ServiceName.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TopicManager.ServiceName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1A0E9B024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TopicManager.firstConversation(for:with:)()
{
  type metadata accessor for UUID();
  return closure #1 in TopicManager.firstConversation(for:with:)();
}

uint64_t partial apply for closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TopicManager.createTopic(groupUUID:name:)(v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), a1);
}

uint64_t sub_1A0E9B15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  type metadata accessor for UUID();
  return closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)();
}

uint64_t partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1)
{
  return partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, &demangling cache variable for type metadata for PubSubClient?);
}

uint64_t sub_1A0E9B268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for PubSubClient.TopicCategory();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for PubSubClient.TopicCategory() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, v2 + v7, *(_QWORD *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8)), a2);
}

unint64_t lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject)
  {
    v1 = type metadata accessor for OS_dispatch_queue(255, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors;
  if (!lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TopicManager.Errors, &type metadata for TopicManager.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors;
  if (!lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TopicManager.Errors, &type metadata for TopicManager.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors);
  }
  return result;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t a1)
{
  return partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedgerClient?);
}

uint64_t partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_1A0E9B534()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined destroy of TopicManager.ConversationClient.Service(uint64_t a1)
{
  destroy for TopicManager.ConversationClient.Service(a1);
  return a1;
}

void partial apply for closure #1 in TopicManager.ConversationClient.subscription(for:)(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  closure #1 in TopicManager.ConversationClient.subscription(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t type metadata accessor for TopicManager.Subscription()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
  _QWORD *v0;

  return closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()(v0);
}

unint64_t lazy protocol witness table accessor for type TopicManager.ServiceName and conformance TopicManager.ServiceName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName;
  if (!lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TopicManager.ServiceName, &type metadata for TopicManager.ServiceName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName);
  }
  return result;
}

uint64_t sub_1A0E9B688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
}

uint64_t sub_1A0E9B6B0(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 200))(v4);
}

uint64_t sub_1A0E9B6F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E9B720(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t sub_1A0E9B750@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E9B780(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 104);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t dispatch thunk of TopicDelegate.subscription(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ObjC metadata update function for TopicManager()
{
  return type metadata accessor for TopicManager();
}

uint64_t type metadata accessor for TopicManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TopicManager;
  if (!type metadata singleton initialization cache for TopicManager)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TopicManager()
{
  unint64_t v0;

  type metadata accessor for Published<[UUID : TopicManager.ConversationClient]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for TopicManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TopicManager.provider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TopicManager.provider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of TopicManager.provider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TopicManager.__allocating_init(provider:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of TopicManager.firstConversation(for:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of TopicManager.createAttachmentLedgerTopic(groupUUID:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of TopicManager.createTopic(groupUUID:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of TopicManager.createPubSubClient(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of TopicManager.createAttachmentLedgerClient(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

ValueMetadata *type metadata accessor for TopicManager.Errors()
{
  return &type metadata for TopicManager.Errors;
}

uint64_t storeEnumTagSinglePayload for TopicManager.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E9BA44 + 4 * byte_1A0F13865[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E9BA78 + 4 * byte_1A0F13860[v4]))();
}

uint64_t sub_1A0E9BA78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E9BA80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E9BA88);
  return result;
}

uint64_t sub_1A0E9BA94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E9BA9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E9BAA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E9BAA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TopicManager.ServiceName()
{
  return &type metadata for TopicManager.ServiceName;
}

uint64_t type metadata accessor for TopicManager.ConversationClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for TopicManager.ConversationClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.unreliableMessagingService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.pubSubClient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.attachmentLedgerClient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.__allocating_init(lock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.update(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.service(generator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.subscription(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t destroy for TopicManager.ConversationClient.Service(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  else
    return swift_release();
}

uint64_t initializeWithCopy for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 2;
LABEL_8:
    swift_retain();
    return a1;
  }
  if (v3 != 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_8;
  }
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t assignWithCopy for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else
    {
      if (v5 == 1)
      {
        v6 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 1;
        return a1;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
    swift_retain();
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 2;
    }
    else if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TopicManager.ConversationClient.Service(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TopicManager.ConversationClient.Service(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TopicManager.ConversationClient.Service(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t destructiveInjectEnumTag for TopicManager.ConversationClient.Service(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TopicManager.ConversationClient.Service()
{
  return &type metadata for TopicManager.ConversationClient.Service;
}

uint64_t method lookup function for TopicManager.Subscription()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

BOOL partial apply for closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  _QWORD *v31;

  v25 = a2;
  v30 = a4;
  v26 = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v31 = (_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 64);
  v27 = 0;
  v28 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v29)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
    v21 = *(_QWORD *)(v28 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v29)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
      v21 = *(_QWORD *)(v28 + 8 * v10);
      if (!v21)
      {
        v10 = v20 + 2;
        if (v20 + 2 >= v29)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
        v21 = *(_QWORD *)(v28 + 8 * v10);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_5:
    v17 = v31;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v31[6] + *(_QWORD *)(v6 + 72) * v16, v5);
    v18 = *(_QWORD *)(v17[7] + 8 * v16);
    swift_retain();
    v19 = v30(v9, v18);
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)v26 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v29)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
  v21 = *(_QWORD *)(v28 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v29)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v31);
    v21 = *(_QWORD *)(v28 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, v6, a2);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }
  return a3;
}

void partial apply for closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 312))(*(_QWORD *)(v1 + 24));
  if (!v2)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 40) = 2;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 280))(*(_QWORD *)(v1 + 24));
  if (!v2)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 40) = 0;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1@<X8>)
{
  uint64_t *v1;

  closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t partial apply for closure #2 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 216))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1A0E9C42C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0E9C450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t specialized Topic.init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(a6 + 16) = 0;
  v33 = a4;
  v34 = a5;
  v31 = a2;
  v32 = a3;
  v29 = v14;
  v30 = a1;
  v27 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v13;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v16 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v16 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a6 + 40) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<Topic.State, Topic.Event>.Transition>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>.Transition);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1A0F13B10;
  LOBYTE(v35) = 3;
  v36 = 0;
  lazy protocol witness table accessor for type Topic.State and conformance Topic.State();
  lazy protocol witness table accessor for type Topic.Event and conformance Topic.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  v36 = 258;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  v36 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  v36 = 769;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 1;
  v36 = 513;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 1;
  v36 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 2;
  v36 = 770;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>);
  swift_allocObject();
  *(_QWORD *)(a6 + 48) = StateMachine.init(initialState:transitions:)();
  *(_QWORD *)(a6 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a6 + 72) = 0;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_QWORD *)(a6 + 144) = 0;
  v17 = a6 + OBJC_IVAR____TtC15GroupActivities5Topic__subscribedParticipants;
  v35 = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
  v18 = v27;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v17, v18, v29);
  v19 = (_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler);
  *v19 = 0;
  v19[1] = 0;
  v20 = (_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler);
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_seqNumWatermark) = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages) = MEMORY[0x1E0DEE9D8];
  v21 = OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessagesLock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(a6 + v21) = Lock.init()();
  v22 = v31;
  *(_QWORD *)(a6 + 80) = v30;
  *(_QWORD *)(a6 + 88) = v22;
  *(_QWORD *)(a6 + 64) = &protocol witness table for TopicManager.ConversationClient;
  swift_unknownObjectWeakAssign();
  v23 = v34;
  *(_QWORD *)(a6 + 24) = v33;
  *(_QWORD *)(a6 + 32) = v23;
  return a6;
}

unint64_t lazy protocol witness table accessor for type Topic.State and conformance Topic.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.State and conformance Topic.State;
  if (!lazy protocol witness table cache variable for type Topic.State and conformance Topic.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.State, &type metadata for Topic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.State and conformance Topic.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.State and conformance Topic.State;
  if (!lazy protocol witness table cache variable for type Topic.State and conformance Topic.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.State, &type metadata for Topic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.State and conformance Topic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Topic.Event and conformance Topic.Event()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event;
  if (!lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.Event, &type metadata for Topic.Event);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event;
  if (!lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.Event, &type metadata for Topic.Event);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event);
  }
  return result;
}

uint64_t outlined init with copy of Topic.BootstrapPubSubTopicInfo(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Topic.BootstrapPubSubTopicInfo(a2, a1);
  return a2;
}

uint64_t sub_1A0E9CA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = (*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 16) + 272))(v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), a1, v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 40), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 48), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 56));
  *a2 = result;
  return result;
}

uint64_t objectdestroy_26Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_36Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

void partial apply for closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in TopicManager.init(provider:featureFlags:)()
{
  return Lock.withLock<A>(_:)();
}

id SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)(uint64_t a1, char *a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  char v8;
  objc_super v10;

  v7 = objc_allocWithZone(v3);
  v8 = *a2;
  *(_QWORD *)&v7[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v7[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v8;
  *(_QWORD *)&v7[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SystemCoordinatorState.localParticipantState.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
}

void SystemCoordinatorState.groupImmersionStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
}

uint64_t SystemCoordinatorState.activeSpatialParticipantCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:)(char a1, char a2)
{
  objc_class *v2;
  _BYTE *v5;
  _QWORD *v6;
  objc_super v8;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v6 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:)(uint64_t a1, char *a2)
{
  objc_class *v2;
  _BYTE *v5;
  char v6;
  objc_super v8;

  v5 = objc_allocWithZone(v2);
  v6 = *a2;
  *(_QWORD *)&v5[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v6;
  *(_QWORD *)&v5[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorState.init(localParticipantState:groupImmersionStyle:)(uint64_t a1, char *a2)
{
  _BYTE *v2;
  char v3;
  objc_super v5;

  v3 = *a2;
  *(_QWORD *)&v2[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v3;
  *(_QWORD *)&v2[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SystemCoordinatorState();
  return objc_msgSendSuper2(&v5, sel_init);
}

id SystemCoordinatorState.init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)(uint64_t a1, char *a2, uint64_t a3)
{
  _BYTE *v3;
  char v4;
  objc_super v6;

  v4 = *a2;
  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v3[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v4;
  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SystemCoordinatorState();
  return objc_msgSendSuper2(&v6, sel_init);
}

BOOL SystemCoordinatorState.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  _BYTE v11[24];
  uint64_t v12;

  v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for SystemCoordinatorState();
    if ((swift_dynamicCast() & 1) != 0)
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v3 = *(id *)&v10[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
      v4 = static NSObject.== infix(_:_:)();

      if ((v4 & 1) != 0)
      {
        v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
        v6 = v10[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle];
        if (v5 == 3)
        {
          if (v6 != 3)
            goto LABEL_11;
        }
        else if (v6 == 3 || v5 != v6)
        {
          goto LABEL_11;
        }
        v7 = *(_QWORD *)(v2 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
        v8 = *(_QWORD *)&v10[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount];

        return v7 == v8;
      }
LABEL_11:

    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

Swift::Int SystemCoordinatorState.hash.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = v0;
  Hasher.init()();
  v2 = *(id *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
  NSObject.hash(into:)();

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
  if (v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount));
  return Hasher.finalize()();
}

uint64_t static SystemCoordinatorState.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorState.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
  v4 = (void *)MEMORY[0x1A1B048B4](0xD000000000000015, 0x80000001A0F19BD0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
  if (v5 != 3)
  {
    v6 = v5 + 1;
    v7 = (void *)MEMORY[0x1A1B048B4](0xD000000000000013, 0x80000001A0F1B700);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v6, v7);

  }
  v8 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
  v9 = (id)MEMORY[0x1A1B048B4](0xD00000000000001DLL, 0x80000001A0F1B6E0);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v8, v9);

}

uint64_t SystemCoordinatorState.GroupImmersionStyle.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

id SystemCoordinatorState.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SystemCoordinatorState.init(coder:)(a1);
}

id SystemCoordinatorState.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;
  unint64_t v7;
  unsigned int v8;
  void *v9;
  id v10;
  id v11;
  objc_super v13;

  type metadata accessor for SystemCoordinatorState.ParticipantState();
  v3 = v1;
  v4 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v4;
    v5 = v4;
    v6 = (void *)MEMORY[0x1A1B048B4](0xD000000000000013, 0x80000001A0F1B700);
    v7 = (unint64_t)objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

    v8 = 0x2010003u >> (8 * v7);
    if (v7 >= 4)
      LOBYTE(v8) = 3;
    v3[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v8;
    v9 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001DLL, 0x80000001A0F1B6E0);
    v10 = objc_msgSend(a1, sel_decodeIntegerForKey_, v9);

    *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = v10;
    v13.receiver = v3;
    v13.super_class = (Class)type metadata accessor for SystemCoordinatorState();
    v11 = objc_msgSendSuper2(&v13, sel_init);

  }
  else
  {

    type metadata accessor for SystemCoordinatorState();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v11;
}

GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional __swiftcall SystemCoordinatorState.GroupImmersionStyle.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4)
    LOBYTE(v2) = 3;
  *v1 = v2;
  return (GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional)rawValue;
}

uint64_t specialized String.init<A>(describing:in:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinatorState.Type);
  v3 = String.init<A>(describing:)();
  v5 = v4;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = a2;
  v7 = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String>);
  lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String>, &lazy protocol witness table cache variable for type [PartialKeyPath<SystemCoordinatorState>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [PartialKeyPath<SystemCoordinatorState>]);
  v8 = BidirectionalCollection<>.joined(separator:)();
  v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 40;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);

  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinatorState.ParticipantState.Type);
  v3 = String.init<A>(describing:)();
  v5 = v4;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = a2;
  v7 = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String>);
  lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String>, &lazy protocol witness table cache variable for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A], &demangling cache variable for type metadata for [PartialKeyPath<SystemCoordinatorState.ParticipantState>]);
  v8 = BidirectionalCollection<>.joined(separator:)();
  v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 40;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);

  return v3;
}

void SystemCoordinatorState.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SystemCoordinatorState.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorState);
}

uint64_t SystemCoordinatorState.ParticipantState.isSpatial.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial);
}

uint64_t SystemCoordinatorState.ParticipantState.isSpatialInitiator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator);
}

uint64_t SystemCoordinatorState.ParticipantState.roleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinatorState.ParticipantState.seat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD **)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat);
  if (v3)
  {
    v4 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x68);
    v5 = *((_OWORD *)v4 + 1);
    v6 = *((_QWORD *)v4 + 6);
    v7 = *((_QWORD *)v4 + 7);
    v8 = *((_OWORD *)v4 + 2);
    v9 = *((_QWORD *)v4 + 8);
    v12 = *(_OWORD *)(v4 + 72);
    *(_OWORD *)a1 = *(_OWORD *)v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = v6;
    result = swift_bridgeObjectRetain();
    v11 = v12;
  }
  else
  {
    v7 = 0;
    v9 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    v11 = xmmword_1A0F10770;
  }
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 72) = v11;
  return result;
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:)(char a1, char a2)
{
  _BYTE *v2;
  _QWORD *v3;
  objc_super v5;

  v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v3 = &v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SystemCoordinatorState()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  objc_class *v5;
  uint64_t v6;
  objc_class *v7;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  id v18;
  char *v19;
  _QWORD *v20;
  objc_super v22;
  _OWORD v23[5];
  uint64_t v24;

  v7 = v5;
  v13 = objc_allocWithZone(v7);
  v14 = a5[3];
  v23[2] = a5[2];
  v23[3] = v14;
  v23[4] = a5[4];
  v24 = *((_QWORD *)a5 + 10);
  v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v15 = *a5;
  v16 = a5[1];
  v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v23[0] = v15;
  v23[1] = v16;
  v17 = &v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v17 = a3;
  v17[1] = a4;
  v18 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
  v19 = v13;
  v20 = specialized XPCWrapper.init(_:)((uint64_t)v23);
  if (v6)
  {

    swift_bridgeObjectRelease();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)&v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v20;

    v22.receiver = v19;
    v22.super_class = v7;
    return objc_msgSendSuper2(&v22, sel_init);
  }
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  _BYTE *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  objc_super v14;
  _OWORD v15[5];
  uint64_t v16;

  v7 = a5[3];
  v15[2] = a5[2];
  v15[3] = v7;
  v15[4] = a5[4];
  v16 = *((_QWORD *)a5 + 10);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v8 = *a5;
  v9 = a5[1];
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v15[0] = v8;
  v15[1] = v9;
  v10 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v10 = a3;
  v10[1] = a4;
  objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
  v11 = v5;
  v12 = specialized XPCWrapper.init(_:)((uint64_t)v15);
  if (v6)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for SystemCoordinatorState.ParticipantState();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)&v11[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v12;

    v14.receiver = v11;
    v14.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
    return objc_msgSendSuper2(&v14, sel_init);
  }
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(a1, a2, a3, a4, a5);
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  id v18;
  char *v19;
  _QWORD *v20;
  objc_super v22;
  _QWORD v23[9];
  __int128 v24;

  v7 = *a5;
  v8 = a5[1];
  v9 = a5[2];
  v10 = a5[3];
  v11 = a5[4];
  v12 = a5[5];
  v13 = a5[6];
  v14 = a5[7];
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v15 = a5[8];
  v16 = *(_OWORD *)(a5 + 9);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v17 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v17 = a3;
  v17[1] = a4;
  if ((_QWORD)v16 == 1)
  {
    *(_QWORD *)&v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  }
  else
  {
    v23[2] = v9;
    v23[3] = v10;
    v23[0] = v7;
    v23[1] = v8;
    v23[6] = v13;
    v23[7] = v14;
    v23[4] = v11;
    v23[5] = v12;
    v23[8] = v15;
    v24 = v16;
    v18 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
    v19 = v5;
    v20 = specialized XPCWrapper.init(_:)((uint64_t)v23);
    if (v6)
    {

      swift_bridgeObjectRelease();
      type metadata accessor for SystemCoordinatorState.ParticipantState();
      return (id)swift_deallocPartialClassInstance();
    }
    *(_QWORD *)&v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v20;

  }
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v22, sel_init);
}

__n128 SystemCoordinatorState.ParticipantState.Seat.pose.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.roleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.number.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

__n128 SystemCoordinatorState.ParticipantState.Seat.init(pose:roleIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 48) = v7;
  *(_QWORD *)(a4 + 56) = v8;
  *(_OWORD *)(a4 + 32) = v6;
  *(_QWORD *)(a4 + 64) = a2;
  *(_QWORD *)(a4 + 72) = a3;
  *(_QWORD *)(a4 + 80) = -1;
  return result;
}

__n128 SystemCoordinatorState.ParticipantState.Seat.init(number:pose:roleIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 16) = v6;
  *(_QWORD *)(a5 + 48) = v8;
  *(_QWORD *)(a5 + 56) = v9;
  *(_OWORD *)(a5 + 32) = v7;
  *(_QWORD *)(a5 + 64) = a3;
  *(_QWORD *)(a5 + 72) = a4;
  *(_QWORD *)(a5 + 80) = a1;
  return result;
}

void SystemCoordinatorState.ParticipantState.Seat.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E656449656C6F72;
  if (*v0 != 1)
    v1 = 0x7265626D756ELL;
  if (*v0)
    return v1;
  else
    return 1702063984;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SystemCoordinatorState.ParticipantState.Seat.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorState.ParticipantState.Seat.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v14 = v1[1];
  v15 = v7;
  v16 = v1[2];
  v9 = *((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  v10 = *((_QWORD *)v1 + 8);
  v13[2] = *((_QWORD *)v1 + 9);
  v13[3] = v10;
  v13[1] = *((_QWORD *)v1 + 10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = v15;
  v19 = v14;
  v21 = v9;
  v22 = v8;
  v20 = v16;
  v23 = 0;
  type metadata accessor for SPPose3D(0);
  lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(&lazy protocol witness table cache variable for type SPPose3D and conformance SPPose3D, MEMORY[0x1E0DEFFA0]);
  v11 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int SystemCoordinatorState.ParticipantState.Seat.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorState.ParticipantState.Seat.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  type metadata accessor for SPPose3D(0);
  v37 = 0;
  lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(&lazy protocol witness table cache variable for type SPPose3D and conformance SPPose3D, MEMORY[0x1E0DEFFA8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v33;
  v23 = v29;
  v24 = v30;
  v27 = v36;
  v28 = v32;
  v10 = v34;
  v25 = v35;
  v26 = v31;
  LOBYTE(v29) = 1;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v21 = v9;
  v22 = v10;
  LOBYTE(v29) = 2;
  v12 = v11;
  swift_bridgeObjectRetain();
  v13 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v24;
  *a2 = v23;
  a2[1] = v14;
  v15 = v28;
  a2[2] = v26;
  a2[3] = v15;
  v16 = v22;
  a2[4] = v21;
  a2[5] = v16;
  v17 = v27;
  a2[6] = v25;
  a2[7] = v17;
  a2[8] = v20;
  a2[9] = v12;
  a2[10] = v13;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemCoordinatorState.ParticipantState.Seat@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SystemCoordinatorState.ParticipantState.Seat.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemCoordinatorState.ParticipantState.Seat(_QWORD *a1)
{
  return SystemCoordinatorState.ParticipantState.Seat.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t SystemCoordinatorState.ParticipantState.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  _BYTE v37[64];
  SPPose3D v38;
  SPPose3D v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  outlined init with copy of Any?(a1, (uint64_t)&v39);
  if (!*(_QWORD *)&v39.position.vector.f64[3])
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for SystemCoordinatorState.ParticipantState();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v2 = (_QWORD *)v58;
  if (*((unsigned __int8 *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial) != *(unsigned __int8 *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial)
    || *((unsigned __int8 *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator) != *(unsigned __int8 *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator))
  {
LABEL_5:

    return 0;
  }
  v4 = *(_QWORD *)((char *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8);
  v5 = *(_QWORD *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8);
  if (v4)
  {
    if (!v5)
      goto LABEL_5;
    v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier) == *(_QWORD *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier)
      && v4 == v5;
    if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_5;
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (*(_QWORD *(**)(__int128 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(&v58);
  *(_OWORD *)v37 = v58;
  *(_QWORD *)&v37[16] = v59;
  *(_QWORD *)&v37[24] = v60;
  *(_OWORD *)&v37[32] = v61;
  *(_QWORD *)&v37[48] = v62;
  *(_QWORD *)&v37[56] = v63;
  v9 = v65;
  v32 = v66;
  v33 = v64;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))((*v7 & *v2) + 0x70))(v54, v8);
  v10 = *(double *)&v54[1];
  v11 = v54[3];
  v13 = v54[4];
  v12 = v54[5];
  v14 = v54[6];
  v16 = v55;
  v15 = v56;
  v31 = v57;
  v35 = *(double *)&v54[2];
  v36 = v54[7];
  v34 = *(double *)v54;
  if (v9 == 1)
  {

    if (v15 == 1)
      return 1;
    goto LABEL_23;
  }
  if (v56 == 1)
  {

LABEL_23:
    v39 = *(SPPose3D *)v37;
    v40 = v33;
    v41 = v9;
    v42 = v32;
    v43 = v34;
    v44 = v10;
    v45 = v35;
    v46 = v11;
    v47 = v13;
    v48 = v12;
    v49 = v14;
    v50 = v36;
    v51 = v16;
    v52 = v15;
    v53 = v31;
    outlined release of (SystemCoordinatorState.ParticipantState.Seat?, SystemCoordinatorState.ParticipantState.Seat?)((uint64_t)&v39);
    return 0;
  }
  v30 = v55;
  swift_bridgeObjectRetain();
  v39 = *(SPPose3D *)v37;
  v38.position.z = v35;
  *(_QWORD *)&v38.position.vector.f64[3] = v11;
  v38.position.x = v34;
  v38.position.y = v10;
  *(_QWORD *)&v38.rotation.vector.f64[2] = v14;
  *(_QWORD *)&v38.rotation.vector.f64[3] = v36;
  *(_QWORD *)&v38.rotation.vector.f64[0] = v13;
  *(_QWORD *)&v38.rotation.vector.f64[1] = v12;
  if ((SPPose3DEqualToPose(&v39, &v38) & 1) == 0)
  {

    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v15);
LABEL_31:
    swift_bridgeObjectRelease();
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, v9);
    return 0;
  }
  if (!v9)
  {

    if (v15)
    {
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v15);
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, 0);
      return 0;
    }
    v17 = v31;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, 0);
    v9 = 0;
    v20 = *(_QWORD *)&v37[56];
    v19 = *(_QWORD *)&v37[48];
    v22 = *(_QWORD *)&v37[40];
    v21 = *(_QWORD *)&v37[32];
    v24 = *(_QWORD *)&v37[24];
    v23 = *(_QWORD *)&v37[16];
    v26 = *(_QWORD *)&v37[8];
    v25 = *(_QWORD *)v37;
    v18 = v33;
    goto LABEL_39;
  }
  if (!v15)
  {

    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, 0);
    goto LABEL_31;
  }
  if (v33 == v30 && v9 == v15)
  {

    v17 = v31;
    v18 = v33;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v33, v9);
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)&v37[56];
    v19 = *(_QWORD *)&v37[48];
    v22 = *(_QWORD *)&v37[40];
    v21 = *(_QWORD *)&v37[32];
    v24 = *(_QWORD *)&v37[24];
    v23 = *(_QWORD *)&v37[16];
    v26 = *(_QWORD *)&v37[8];
    v25 = *(_QWORD *)v37;
LABEL_39:
    v27 = v32;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v25, v26, v23, v24, v21, v22, v19, v20, v18, v9);
    return v27 == v17;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

  v28 = v15;
  v17 = v31;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v28);
  swift_bridgeObjectRelease();
  v27 = v32;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, v9);
  result = 0;
  if ((v29 & 1) != 0)
    return v27 == v17;
  return result;
}

uint64_t @objc SystemCoordinatorState.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

Swift::Int SystemCoordinatorState.ParticipantState.hash.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  Swift::UInt v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  Hasher.init()();
  Hasher._combine(_:)(*((_BYTE *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial));
  Hasher._combine(_:)(*((_BYTE *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator));
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v1 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v11, v1);
  v2 = v16;
  if (v16 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = v11;
    v4 = v12;
    v5 = v13;
    v6 = v14;
    v9 = v15;
    v10 = v17;
    Hasher._combine(_:)(1u);
    v24 = v4;
    v23 = v3;
    v26 = v6;
    v25 = v5;
    swift_bridgeObjectRetain();
    SPPose3D.hash(into:)();
    if (v2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v7 = *((_QWORD *)&v4 + 1);
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, *((uint64_t *)&v3 + 1), v4, *((uint64_t *)&v4 + 1), v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
    }
    else
    {
      Hasher._combine(_:)(0);
      v7 = *((_QWORD *)&v4 + 1);
    }
    Hasher._combine(_:)(v10);
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, v5, *((uint64_t *)&v3 + 1), v7, v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, v5, *((uint64_t *)&v3 + 1), v7, v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
  }
  v13 = v20;
  v14 = v21;
  v15 = v22;
  v11 = v18;
  v12 = v19;
  return Hasher.finalize()();
}

uint64_t static SystemCoordinatorState.ParticipantState.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorState.ParticipantState.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial);
  v4 = (void *)MEMORY[0x1A1B048B4](0x6169746170537369, 0xE90000000000006CLL);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator);
  v6 = (void *)MEMORY[0x1A1B048B4](0xD000000000000012, 0x80000001A0F1B750);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8))
    v7 = MEMORY[0x1A1B048B4](*(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier));
  else
    v7 = 0;
  v8 = (void *)MEMORY[0x1A1B048B4](0x6E656449656C6F72, 0xEE00726569666974);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  v9 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat);
  v10 = (id)MEMORY[0x1A1B048B4](1952540019, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

}

id SystemCoordinatorState.ParticipantState.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized SystemCoordinatorState.ParticipantState.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorState.ParticipantState.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized SystemCoordinatorState.ParticipantState.init(coder:)(a1);

  return v2;
}

double key path getter for SystemCoordinatorState.ParticipantState.seat : SystemCoordinatorState.ParticipantState@<D0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[4];
  __int128 v8;
  uint64_t v9;

  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))(v7);
  v3 = v9;
  v4 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v4;
  v5 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v5;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

id SystemCoordinatorState.ParticipantState.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SystemCoordinatorState.ParticipantState.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SystemCoordinatorState.ParticipantState.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorState.ParticipantState);
}

uint64_t SystemCoordinatorState.GroupImmersionStyle.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1819047270;
  if (*v0 != 1)
    v1 = 0x73736572676F7270;
  if (*v0)
    return v1;
  else
    return 0x646578696DLL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SystemCoordinatorState.GroupImmersionStyle(Swift::Int *a1)
{
  return SystemCoordinatorState.GroupImmersionStyle.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SystemCoordinatorState.GroupImmersionStyle(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t type metadata accessor for SystemCoordinatorState.ParticipantState()
{
  return objc_opt_self();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1819047270;
  if (*v0 != 1)
    v1 = 0x73736572676F7270;
  if (*v0)
    return v1;
  else
    return 0x646578696DLL;
}

uint64_t specialized closure #1 in String.init<A>(describing:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  __int128 v24[2];
  uint64_t v25;
  char v26[32];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = a4;
  *(_QWORD *)&v24[0] = AnyKeyPath.debugDescription.getter();
  *((_QWORD *)&v24[0] + 1) = v6;
  v27 = 92;
  v28 = 0xE100000000000000;
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v32[0] = 92;
  v32[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  Collection<>.trimmingPrefix<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v29;
  v9 = v30;
  swift_getAtPartialKeyPath();
  outlined init with copy of Any((uint64_t)v32, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding(v24, (uint64_t)&v27);
    v11 = v30;
    v12 = v31;
    __swift_project_boxed_opaque_existential_1(&v27, v30);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v15 = v14;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v27);
  }
  else
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v24, &demangling cache variable for type metadata for OptionalProtocol?);
    outlined init with copy of Any((uint64_t)v32, (uint64_t)&v27);
    v13 = String.init<A>(describing:)();
    v15 = v16;
  }
  v17 = MEMORY[0x1A1B04938](92, 0xE100000000000000, v10, v9);
  v19 = v18;
  swift_bridgeObjectRelease();
  v27 = v17;
  v28 = v19;
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v13;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = v27;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  return v22;
}

unint64_t specialized static SystemCoordinatorState.ParticipantState.Seat.== infix(_:_:)(uint64_t a1, double *a2)
{
  __int128 v2;
  __int128 v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  SPPose3D v19;
  SPPose3D v20;

  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(double *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_OWORD *)a2;
  v10 = *((_OWORD *)a2 + 1);
  v11 = *((_OWORD *)a2 + 2);
  v12 = a2[6];
  v13 = a2[7];
  v15 = *((_QWORD *)a2 + 8);
  v14 = *((_QWORD *)a2 + 9);
  v16 = *((_QWORD *)a2 + 10);
  *(_OWORD *)&v20.position.x = *(_OWORD *)a1;
  *(_OWORD *)&v20.position.vector.f64[2] = v2;
  v20.rotation.vector.f64[2] = v4;
  v20.rotation.vector.f64[3] = v5;
  *(_OWORD *)v20.rotation.vector.f64 = v3;
  *(_OWORD *)&v19.position.x = v9;
  *(_OWORD *)&v19.position.vector.f64[2] = v10;
  v19.rotation.vector.f64[2] = v12;
  v19.rotation.vector.f64[3] = v13;
  *(_OWORD *)v19.rotation.vector.f64 = v11;
  result = SPPose3DEqualToPose(&v20, &v19);
  if (!(_DWORD)result)
    return result;
  if (!v6)
  {
    if (!v14)
      return v8 == v16;
    return 0;
  }
  if (!v14)
    return 0;
  if (v7 == v15 && v6 == v14)
    return v8 == v16;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v18 & 1) != 0)
    return v8 == v16;
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys, &unk_1E44F3D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys, &unk_1E44F3D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys, &unk_1E44F3D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys, &unk_1E44F3D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for SPPose3D(255);
    result = MEMORY[0x1A1B05BEC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined release of (SystemCoordinatorState.ParticipantState.Seat?, SystemCoordinatorState.ParticipantState.Seat?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  v11 = *(_OWORD *)(a1 + 160);
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v2, v3, v4, v5, v6, v7, v8, v9, v11, *((uint64_t *)&v11 + 1));
  return a1;
}

uint64_t specialized SystemCoordinatorState.ParticipantState.Seat.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702063984 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656449656C6F72 && a2 == 0xEE00726569666974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265626D756ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id specialized SystemCoordinatorState.ParticipantState.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  objc_super v15;

  v3 = v1;
  v4 = (void *)MEMORY[0x1A1B048B4](0x6169746170537369, 0xE90000000000006CLL);
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = v5;
  v6 = (void *)MEMORY[0x1A1B048B4](0xD000000000000012, 0x80000001A0F1B750);
  v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

  v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = v7;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
  v8 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = (uint64_t *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v13 = v10;
  v13[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = NSCoder.decodeObject<A>(of:forKey:)();

  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v15, sel_init);
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.GroupImmersionStyle, &type metadata for SystemCoordinatorState.GroupImmersionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle);
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SystemCoordinatorState.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for SystemCoordinatorState.ParticipantState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.seat.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for SystemCoordinatorState.ParticipantState.Seat()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SystemCoordinatorState.ParticipantState.Seat(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *a1 = v4;
  a1[1] = v5;
  v8 = a2[4];
  v7 = a2[5];
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  a1[4] = v8;
  a1[5] = v7;
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorState.ParticipantState.Seat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinatorState.ParticipantState.Seat()
{
  return &type metadata for SystemCoordinatorState.ParticipantState.Seat;
}

ValueMetadata *type metadata accessor for SystemCoordinatorState.GroupImmersionStyle()
{
  return &type metadata for SystemCoordinatorState.GroupImmersionStyle;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorState.GroupImmersionStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0EA00D0 + 4 * byte_1A0F13B45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0EA0104 + 4 * byte_1A0F13B40[v4]))();
}

uint64_t sub_1A0EA0104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EA010C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EA0114);
  return result;
}

uint64_t sub_1A0EA0120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EA0128);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0EA012C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EA0134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  return &unk_1E44F3D38;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in String.init<A>(describing:in:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = specialized closure #1 in String.init<A>(describing:in:)(*a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = lazy protocol witness table accessor for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A](a3, a4);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEC850], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF20], v4);
    atomic_store(result, a1);
  }
  return result;
}

char **Signposts.MessengerEvents.messengerRecv.unsafeMutableAddressor()
{
  return &static Signposts.MessengerEvents.messengerRecv;
}

uint64_t Signposts.groupSession.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for groupSession != -1)
    swift_once();
  v0 = type metadata accessor for OSSignposter();
  return __swift_project_value_buffer(v0, (uint64_t)static Signposts.groupSession);
}

char **Signposts.GroupSessionEvents.groupSessionJoin.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionJoin;
}

char **Signposts.MessengerEvents.messengerSend.unsafeMutableAddressor()
{
  return &static Signposts.MessengerEvents.messengerSend;
}

char **Signposts.GroupSessionEvents.groupSessionReceived.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionReceived;
}

char **Signposts.GroupSessionEvents.groupSessionRequested.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionRequested;
}

const char *static Signposts.MessengerEvents.messengerSend.getter()
{
  return "group-session-messenger-send";
}

const char *static Signposts.MessengerEvents.messengerRecv.getter()
{
  return "group-session-messenger-receive";
}

const char *static Signposts.GroupSessionEvents.groupSessionRequested.getter()
{
  return "group-session-requested";
}

const char *static Signposts.GroupSessionEvents.groupSessionReceived.getter()
{
  return "group-session-received";
}

const char *static Signposts.GroupSessionEvents.groupSessionJoin.getter()
{
  return "group-session-join";
}

uint64_t one-time initialization function for groupSession()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposts.groupSession);
  __swift_project_value_buffer(v0, (uint64_t)static Signposts.groupSession);
  return OSSignposter.init(subsystem:category:)();
}

uint64_t static Signposts.groupSession.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for groupSession != -1)
    swift_once();
  v2 = type metadata accessor for OSSignposter();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Signposts.groupSession);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Signposts.GroupSessionEvents()
{
  return &type metadata for Signposts.GroupSessionEvents;
}

unint64_t UUID.uint64Value.getter()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;

  UUID.uuid.getter();
  v1 = v0;
  UUID.uuid.getter();
  v3 = (v2 >> 40) & 0xFF00 | v1;
  UUID.uuid.getter();
  v5 = (v4 >> 24) & 0xFF0000;
  UUID.uuid.getter();
  v7 = v3 | v5 | (v6 >> 8) & 0xFF000000;
  UUID.uuid.getter();
  v9 = v7 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v8 << 32);
  UUID.uuid.getter();
  v11 = v9 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v10 << 40);
  UUID.uuid.getter();
  v13 = v11 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v12 << 48);
  UUID.uuid.getter();
  return v13 | (v14 << 56);
}

uint64_t UUID.init(_:)()
{
  return UUID.init(uuid:)();
}

uint64_t AVAudioSessionAssertion.__allocating_init(id:manager:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = swift_allocObject();
  v5 = v4 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a2, v4 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  return v4;
}

uint64_t AVAudioSessionAssertionManager.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  v1 = Lock.init()();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t *AVAudioSessionAssertionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static AVAudioSessionAssertionManager.shared;
}

uint64_t static AVAudioSessionAssertionManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t AVAudioSessionAssertionManager.lock.getter()
{
  return swift_retain();
}

id implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset(void *a1)
{
  uint64_t v1;
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *MEMORY[0x1E0C89690];
  v4[0] = 0;
  if (objc_msgSend(a1, sel_setCategory_error_, v1, v4))
    return v4[0];
  v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset(void *a1, char a2)
{
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v4[0] = 0;
  if (objc_msgSend(a1, sel_setIsExpanseMediaSession_error_, a2 & 1, v4))
    return v4[0];
  v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t AVAudioSessionAssertionManager.groupSessions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void AVAudioSessionAssertionManager.groupSessions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  void *v5;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v5 = v4;
  if (v3)
  {
    MEMORY[0x1E0C80A78](v4);
    v4 = (id)tryLog<A>(_:_:function:line:)();
  }
  MEMORY[0x1E0C80A78](v4);
  tryLog<A>(_:_:function:line:)();

}

void (*AVAudioSessionAssertionManager.groupSessions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return AVAudioSessionAssertionManager.groupSessions.modify;
}

void AVAudioSessionAssertionManager.groupSessions.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  id v5;
  void *v6;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16);
    v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v6 = v5;
    if (v4)
    {
      MEMORY[0x1E0C80A78](v5);
      v5 = (id)tryLog<A>(_:_:function:line:)();
    }
    MEMORY[0x1E0C80A78](v5);
    tryLog<A>(_:_:function:line:)();

  }
}

uint64_t AVAudioSessionAssertionManager.addSession(id:)()
{
  return AVAudioSessionAssertionManager.addSession(id:)();
}

{
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in AVAudioSessionAssertionManager.addSession(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  _BYTE v13[32];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v13[-v9];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 112))(v13);
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  return v11(v13, 0);
}

uint64_t AVAudioSessionAssertionManager.removeSession(id:)()
{
  return AVAudioSessionAssertionManager.addSession(id:)();
}

uint64_t closure #1 in AVAudioSessionAssertionManager.removeSession(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 112))(v9);
  specialized Set._Variant.remove(_:)(a2, (uint64_t)v6);
  outlined destroy of UUID?((uint64_t)v6);
  return v7(v9, 0);
}

uint64_t AVAudioSessionAssertionManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AVAudioSessionAssertionManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t AVAudioSessionAssertionManager.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Lock();
  swift_allocObject();
  v1 = Lock.init()();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t protocol witness for AudioSessionAssertionManager.addSession(id:) in conformance AVAudioSessionAssertionManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for AudioSessionAssertionManager.removeSession(id:) in conformance AVAudioSessionAssertionManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t BackgroundAudioSessionAssertionManager.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *BackgroundAudioSessionAssertionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static BackgroundAudioSessionAssertionManager.shared;
}

uint64_t static BackgroundAudioSessionAssertionManager.shared.getter()
{
  type metadata accessor for BackgroundAudioSessionAssertionManager();
  return swift_initStaticObject();
}

uint64_t BackgroundAudioSessionAssertionManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t BackgroundAudioSessionAssertionManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t BackgroundAudioSessionAssertionManager.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for AudioSessionAssertionManager.addSession(id:) in conformance BackgroundAudioSessionAssertionManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t protocol witness for AudioSessionAssertionManager.removeSession(id:) in conformance BackgroundAudioSessionAssertionManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t AVAudioSessionAssertion.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AVAudioSessionAssertion.manager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager, a1);
}

uint64_t AVAudioSessionAssertion.init(id:manager:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  v6 = v2 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a2, v3 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
  v9 = a2[3];
  v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  return v3;
}

id partial apply for implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset()
{
  uint64_t v0;

  return implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

id partial apply for implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset()
{
  uint64_t v0;

  return implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in AVAudioSessionAssertionManager.addSession(id:)()
{
  uint64_t v0;

  return closure #1 in AVAudioSessionAssertionManager.addSession(id:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in AVAudioSessionAssertionManager.removeSession(id:)()
{
  uint64_t v0;

  return closure #1 in AVAudioSessionAssertionManager.removeSession(id:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for BackgroundAudioSessionAssertionManager()
{
  return objc_opt_self();
}

uint64_t AVAudioSessionAssertion.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager), v2);
  v4 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id, v2, v3);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return v0;
}

uint64_t AVAudioSessionAssertion.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager), v2);
  v4 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id, v2, v3);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_deallocClassInstance();
}

uint64_t sub_1A0EA13B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EA13E4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 104);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of AudioSessionAssertionManager.addSession(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AudioSessionAssertionManager.removeSession(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for AVAudioSessionAssertionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.addSession(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.removeSession(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t method lookup function for BackgroundAudioSessionAssertionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.addSession(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.removeSession(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ObjC metadata update function for AVAudioSessionAssertion()
{
  return type metadata accessor for AVAudioSessionAssertion();
}

uint64_t type metadata accessor for AVAudioSessionAssertion()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AVAudioSessionAssertion;
  if (!type metadata singleton initialization cache for AVAudioSessionAssertion)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AVAudioSessionAssertion()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AVAudioSessionAssertion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AVAudioSessionAssertion.__allocating_init(id:manager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, v11, MEMORY[0x1E0DF0358]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;

  v27 = type metadata accessor for Participant();
  v3 = *(_QWORD *)(v27 - 8);
  result = MEMORY[0x1E0C80A78](v27);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v25 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v26 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v3 + 72);
      do
      {
        v14 = v13;
        v15 = v13 * v10;
        outlined init with copy of Participant(*(_QWORD *)(v7 + 48) + v13 * v10, (uint64_t)v6);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v16 = v11;
        dispatch thunk of Hashable.hash(into:)();
        v17 = v27;
        String.hash(into:)();
        Hasher._combine(_:)(*(_QWORD *)&v6[*(int *)(v17 + 24)]);
        v18 = Hasher._finalize()();
        outlined destroy of Participant((uint64_t)v6);
        v19 = v18 & v16;
        v11 = v16;
        if (a1 >= (uint64_t)v26)
        {
          if (v19 < v26)
          {
            v13 = v14;
            goto LABEL_6;
          }
          v13 = v14;
          if (a1 < v19)
            goto LABEL_6;
        }
        else
        {
          v13 = v14;
          if (v19 < v26 && a1 < v19)
            goto LABEL_6;
        }
        v20 = v13 * a1;
        if (v13 * a1 < v15 || *(_QWORD *)(v7 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(v7 + 48) + v15 + v13))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v20 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v25;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v21 = *v1;
  v22 = *(_QWORD *)(*v1 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v6 = a2(0);
  v36 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v30 = v4;
    v14 = ~v12;
    swift_retain();
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v32 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v36 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v31(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(v34, v33, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
        v21 = v20 & v14;
        if (a1 >= (uint64_t)v32)
        {
          if (v21 >= v32 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v16 = v18;
            v24 = v18 * a1;
            if (v18 * a1 < v19
              || *(_QWORD *)(v10 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(v10 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v24 != v19)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v32 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v4 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*v4 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

uint64_t outlined destroy of Participant(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didsetpartial apply()
{
  return partial apply for implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset();
}

id implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didsetpartial apply()
{
  return partial apply for implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset();
}

__n128 GroupSession.Sessions.init(base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

uint64_t GroupSession.Sessions.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v2;
  swift_unknownObjectRetain();
  return swift_retain();
}

uint64_t GroupSession.Sessions.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSession.Sessions.Iterator.baseIterator.getter()
{
  return swift_retain();
}

uint64_t GroupSession.Sessions.Iterator.baseIterator.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*GroupSession.Sessions.Iterator.baseIterator.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSession.Sessions.Iterator.next()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSession<A>.Sessions.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSession<A>.Sessions.Iterator;
  return GroupSession.Sessions.Iterator.next()(a2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSession<A>.Sessions.Iterator(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v5;

  v3 = *(_QWORD **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GroupSession<A>.Sessions()
{
  JUMPOUT(0x1A1B05BECLL);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSession<A>.Sessions(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  id *v3;
  id v4;

  GroupSession.Sessions.makeAsyncIterator()(a1, a2, a3);
  v4 = *v3;
  swift_release();
  swift_unknownObjectRelease();

}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ()(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  return a3(*a1, a1[1], *a2);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t *))
{
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  v5 = a3;
  return a4(v6, &v5);
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNys6UInt32VG_AG14sequenceNumber_15GroupActivities21ReliableBroadcastLinkC13SenderContextV14PendingMessageVSg07pendingO0ts5NeverOTg504_s15g12Activities21ijk50C5flush33_76BCD4E2511F082E6B15E4876EEE7C9BLLyyAC13lm5VzFs6d11V14sequencef5_AG14nO22VSg07pendingU0tAIXEfU_ANTf1cn_n(unint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t result;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;

  v2 = a1;
  v18 = HIDWORD(a1);
  if (HIDWORD(a1) < a1)
    v3 = -(uint64_t)(a1 - HIDWORD(a1));
  else
    v3 = (HIDWORD(a1) - a1);
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = v3 + 1;
  if (v3 == -1)
    return v4;
  v21 = MEMORY[0x1E0DEE9D8];
  v6 = v5 & ~(v5 >> 63);
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  if (v3 >= -1)
  {
    v8 = 0;
    v4 = v21;
    while (v6)
    {
      if (v8)
        goto LABEL_25;
      v9 = *(_QWORD *)(a2 + 24);
      v20 = 0u;
      if (*(_QWORD *)(v9 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v10 & 1) != 0))
      {
        v11 = *(_QWORD *)(v9 + 56) + 32 * result;
        v12 = *(_QWORD *)v11;
        v20 = *(_OWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v11 + 24);
        swift_retain();
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v15 = *(_QWORD *)(v21 + 16);
      v14 = *(_QWORD *)(v21 + 24);
      if (v15 >= v14 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v21 + 16) = v15 + 1;
      v16 = v21 + 40 * v15;
      *(_DWORD *)(v16 + 32) = v2;
      *(_QWORD *)(v16 + 40) = v12;
      *(_OWORD *)(v16 + 48) = v20;
      *(_QWORD *)(v16 + 64) = v13;
      v8 = v2 == (_DWORD)v18;
      if (v2 == (_DWORD)v18)
      {
        v2 = 0;
      }
      else if (__CFADD__(v2++, 1))
      {
        goto LABEL_23;
      }
      --v6;
      if (!--v5)
        return v4;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t ReliableBroadcastLink.TransmissionBuffer.nextMessageNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = a2 + v2;
  if (__OFADD__(a2, v2))
  {
    __break(1u);
LABEL_6:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((result & 0x8000000000000000) != 0 || HIDWORD(result))
    goto LABEL_6;
  return result;
}

uint64_t static ReliableBroadcastLink.packetStrides(for:)(int64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (static ReliableBroadcastLink.maximumTransmissionUnit)
    return _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SnySiGs5NeverOTg587_s15GroupActivities21ReliableBroadcastLinkC13packetStrides3forSaySnySiGGSi_tFZAFSiXEfU_Si0H10Activities0jkL0CXDXMTTf1cn_nTf4nnd_n(0, a1, static ReliableBroadcastLink.maximumTransmissionUnit, a1);
  __break(1u);
  return result;
}

Swift::Void __swiftcall ReliableBroadcastLink.TransmissionBuffer.add(_:)(Swift::OpaquePointer a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v3[v5 + 4] = a1._rawValue;
  *v1 = v3;
}

uint64_t ReliableBroadcastLink.send(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReliableBroadcastPacket?);
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for ReliableBroadcastPacket(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v10[1] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v5);
  type metadata accessor for BinaryEncoder();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A0F0EDD0;
  ReliableBroadcastPacket.encode(to:)();
  swift_beginAccess();
  v7 = *(_QWORD *)(inited + 16);
  v8 = *(_QWORD *)(inited + 24);
  ReliableBroadcastLink._send(_:)(v7, v8);
  return outlined consume of Data._Representation(v7, v8);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t (*a1)(__int16 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  __int16 v18;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v18 = *(_WORD *)(*(_QWORD *)(a3 + 48) + 2 * v14);
    result = a1(&v18);
    if (v3)
      return swift_release();
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release();
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release();
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t static ReliableBroadcastLink.retransmissionRequestTimerDelay.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x321uLL) + 200;
  v2 = *MEMORY[0x1E0DEF490];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t one-time initialization function for retransmissionRequestRetryTimerDelay(uint64_t a1)
{
  return one-time initialization function for retransmissionRequestRetryTimerDelay(a1, static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay, 500);
}

uint64_t ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.unsafeMutableAddressor()
{
  return ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.unsafeMutableAddressor(&one-time initialization token for retransmissionRequestRetryTimerDelay, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay);
}

uint64_t static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.getter@<X0>(uint64_t a1@<X8>)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.getter(&one-time initialization token for retransmissionRequestRetryTimerDelay, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay, a1);
}

uint64_t static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.setter(uint64_t a1)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.setter(a1, &one-time initialization token for retransmissionRequestRetryTimerDelay, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay);
}

uint64_t (*static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.modify())()
{
  uint64_t v0;

  if (one-time initialization token for retransmissionRequestRetryTimerDelay != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_project_value_buffer(v0, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay);
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t one-time initialization function for proactiveRetransmissionRequestTimerDelay(uint64_t a1)
{
  return one-time initialization function for retransmissionRequestRetryTimerDelay(a1, static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay, 200);
}

uint64_t ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay.unsafeMutableAddressor()
{
  return ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.unsafeMutableAddressor(&one-time initialization token for proactiveRetransmissionRequestTimerDelay, (uint64_t)static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay);
}

uint64_t ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay.getter@<X0>(uint64_t a1@<X8>)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.getter(&one-time initialization token for proactiveRetransmissionRequestTimerDelay, (uint64_t)static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay, a1);
}

uint64_t static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = __swift_project_value_buffer(v5, a2);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay.setter(uint64_t a1)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.setter(a1, &one-time initialization token for proactiveRetransmissionRequestTimerDelay, (uint64_t)static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay);
}

uint64_t static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a2 != -1)
    swift_once();
  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = __swift_project_value_buffer(v5, a3);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v6, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
}

uint64_t (*static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay.modify())()
{
  uint64_t v0;

  if (one-time initialization token for proactiveRetransmissionRequestTimerDelay != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_project_value_buffer(v0, (uint64_t)static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay);
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t one-time initialization function for heartbeatTimerIntervalInSeconds(uint64_t a1)
{
  return one-time initialization function for retransmissionRequestRetryTimerDelay(a1, static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds, 3);
}

uint64_t one-time initialization function for retransmissionRequestRetryTimerDelay(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v5, a2);
  *(_QWORD *)__swift_project_value_buffer(v5, (uint64_t)a2) = a3;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v5 - 8) + 104))();
}

uint64_t ReliableBroadcastLink.heartbeatTimerIntervalInSeconds.unsafeMutableAddressor()
{
  return ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.unsafeMutableAddressor(&one-time initialization token for heartbeatTimerIntervalInSeconds, (uint64_t)static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds);
}

uint64_t static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds.getter@<X0>(uint64_t a1@<X8>)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.getter(&one-time initialization token for heartbeatTimerIntervalInSeconds, (uint64_t)static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds, a1);
}

uint64_t static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds.setter(uint64_t a1)
{
  return static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay.setter(a1, &one-time initialization token for heartbeatTimerIntervalInSeconds, (uint64_t)static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds);
}

uint64_t (*static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds.modify())()
{
  uint64_t v0;

  if (one-time initialization token for heartbeatTimerIntervalInSeconds != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_project_value_buffer(v0, (uint64_t)static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds);
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t *ReliableBroadcastLink.maximumTransmissionUnit.unsafeMutableAddressor()
{
  return &static ReliableBroadcastLink.maximumTransmissionUnit;
}

uint64_t static ReliableBroadcastLink.maximumTransmissionUnit.getter()
{
  swift_beginAccess();
  return static ReliableBroadcastLink.maximumTransmissionUnit;
}

uint64_t static ReliableBroadcastLink.maximumTransmissionUnit.setter(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ReliableBroadcastLink.maximumTransmissionUnit = a1;
  return result;
}

uint64_t (*static ReliableBroadcastLink.maximumTransmissionUnit.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t static ReliableBroadcastLink.numberOfPackets(for:)(int64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_beginAccess();
  if (static ReliableBroadcastLink.maximumTransmissionUnit)
  {
    v3 = *(_QWORD *)(_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SnySiGs5NeverOTg587_s15GroupActivities21ReliableBroadcastLinkC13packetStrides3forSaySnySiGGSi_tFZAFSiXEfU_Si0H10Activities0jkL0CXDXMTTf1cn_nTf4nnd_n(0, a1, static ReliableBroadcastLink.maximumTransmissionUnit, a1)+ 16);
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.negativeAcknowledgement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1, a1, type metadata accessor for ReliableBroadcastPacket);
}

uint64_t ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.negativeAcknowledgement.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(a1, v1, type metadata accessor for ReliableBroadcastPacket);
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.negativeAcknowledgement.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.timeoutWorkItem.getter()
{
  type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  return swift_retain();
}

uint64_t ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.timeoutWorkItem.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0) + 20);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.timeoutWorkItem.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest.init(negativeAcknowledgement:timeoutWorkItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  outlined init with take of Participant(a1, a3, type metadata accessor for ReliableBroadcastPacket);
  result = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.packets.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingMessage.packets.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.expectedMessageLength.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.expectedMessageLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingMessage.expectedMessageLength.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.expectedNumberOfPackets.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.expectedNumberOfPackets.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingMessage.expectedNumberOfPackets.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.retransmissionRequestTimeout.getter()
{
  return swift_retain();
}

uint64_t ReliableBroadcastLink.SenderContext.PendingMessage.retransmissionRequestTimeout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.PendingMessage.retransmissionRequestTimeout.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

BOOL ReliableBroadcastLink.SenderContext.PendingMessage.isFinished.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a1 + 16) == a3;
}

uint64_t default argument 0 of ReliableBroadcastLink.SenderContext.PendingMessage.init(packets:expectedMessageLength:expectedNumberOfPackets:retransmissionRequestTimeout:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t ReliableBroadcastLink.SenderContext.participantIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ReliableBroadcastLink.SenderContext.participantIdentifier.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.participantIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t ReliableBroadcastLink.SenderContext.lastReceivedContext.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

uint64_t ReliableBroadcastLink.SenderContext.lastReceivedContext.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result);
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.lastReceivedContext.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t ReliableBroadcastLink.SenderContext.lastDeliveredContext.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t ReliableBroadcastLink.SenderContext.lastDeliveredContext.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 20) = BYTE4(result);
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.lastDeliveredContext.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.pendingMessagesBySequenceNumber.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReliableBroadcastLink.SenderContext.pendingMessagesBySequenceNumber.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.pendingMessagesBySequenceNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.pendingRetransmissionRequests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReliableBroadcastLink.SenderContext.pendingRetransmissionRequests.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.pendingRetransmissionRequests.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastLink.SenderContext.negativeAcknowledgementResponseDelays.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReliableBroadcastLink.SenderContext.negativeAcknowledgementResponseDelays.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.SenderContext.negativeAcknowledgementResponseDelays.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

Swift::Bool __swiftcall ReliableBroadcastLink.SenderContext.hasMessageBeenDelivered(_:)(Swift::UInt32 a1)
{
  uint64_t v1;
  int v4;
  Swift::UInt32 v5;
  char v6;

  outlined init with take of ReliableBroadcastLink.SenderContext.LatestContext((int *)(v1 + 16), (uint64_t)&v4);
  outlined init with take of ReliableBroadcastLink.SenderContext.LatestContext(&v4, (uint64_t)&v5);
  if (!v6)
    return v5 > a1;
  if (v6 == 1)
    return v5 >= a1;
  return 0;
}

Swift::Void __swiftcall ReliableBroadcastLink.SenderContext.witness(_:)(Swift::UInt32 a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 12) == 1 && *(_DWORD *)(v1 + 8) > a1)
    a1 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = a1;
  *(_BYTE *)(v1 + 12) = 1;
}

uint64_t default argument 1 of ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)()
{
  return 0x200000000;
}

uint64_t default argument 2 of ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)()
{
  return 0x200000000;
}

unint64_t default argument 3 of ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

unint64_t default argument 4 of ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t default argument 5 of ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t ReliableBroadcastLink.SenderContext.init(participantIdentifier:lastReceivedContext:lastDeliveredContext:pendingMessagesBySequenceNumber:pendingRetransmissionRequests:negativeAcknowledgementResponseDelays:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_DWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 12) = BYTE4(a2);
  *(_DWORD *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 20) = BYTE4(a3);
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t ReliableBroadcastLink.TransmissionBuffer.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = result - a3;
  if (__OFSUB__(result, a3))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) != 0)
  {
    return MEMORY[0x1E0DEE9D8];
  }
  else if (v3 >= *(_QWORD *)(a2 + 16))
  {
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

GroupActivities::ReliableBroadcastLink::TransmissionBuffer __swiftcall ReliableBroadcastLink.TransmissionBuffer.init()()
{
  void *v0;
  Swift::Int v1;
  GroupActivities::ReliableBroadcastLink::TransmissionBuffer result;

  v0 = (void *)MEMORY[0x1E0DEE9D8];
  v1 = 0;
  result.offset = v1;
  result.storage._rawValue = v0;
  return result;
}

id ReliableBroadcastLink.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t ReliableBroadcastLink.transmissionBuffer.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ReliableBroadcastLink.transmissionBuffer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReliableBroadcastLink.transmissionBuffer.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t ReliableBroadcastLink.encryptionManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager;
  swift_beginAccess();
  return outlined init with copy of Participant(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
}

uint64_t ReliableBroadcastLink.encryptionManager.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager;
  swift_beginAccess();
  outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  return swift_endAccess();
}

uint64_t (*ReliableBroadcastLink.encryptionManager.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t ReliableBroadcastLink.participantIdentifierToContextMap.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ReliableBroadcastLink.participantIdentifierToContextMap.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReliableBroadcastLink.participantIdentifierToContextMap.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t ReliableBroadcastLink.participantIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ReliableBroadcastLink.participantIdentifier.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ReliableBroadcastLink.participantIdentifier.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for ReliableBroadcastLink.receivedDataHandler : ReliableBroadcastLink@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = _s10Foundation4DataVs6UInt64VIeggy_AcEytIegnnr_TRTA_0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for ReliableBroadcastLink.receivedDataHandler : ReliableBroadcastLink(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = _s10Foundation4DataVs6UInt64VytIegnnr_AcEIeggy_TRTA_0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t ReliableBroadcastLink.receivedDataHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t ReliableBroadcastLink.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*ReliableBroadcastLink.receivedDataHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t ReliableBroadcastLink.__allocating_init(connection:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ReliableBroadcastLink.init(connection:)(a1);
  return v2;
}

_QWORD *ReliableBroadcastLink.init(connection:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v24 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  v23 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v8, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D8], v3);
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[3] = 0;
  v10 = MEMORY[0x1E0DEE9D8];
  v1[5] = MEMORY[0x1E0DEE9D8];
  v1[6] = 0;
  ReliableBroadcastLink.EncryptionManager.init()((_QWORD *)((char *)v1
                                                          + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager));
  v11 = OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap;
  *(_QWORD *)((char *)v2 + v11) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  v12 = OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier;
  v26 = 0;
  MEMORY[0x1A1B05CDC](&v26, 8);
  *(_QWORD *)((char *)v2 + v12) = v26;
  v13 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  *v13 = 0;
  v13[1] = 0;
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.reliableBroadcast);
  v15 = v24;
  swift_unknownObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v25 = v15;
    v26 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OS_nw_connection);
    v20 = String.init<A>(reflecting:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v16, v17, "Starting broadcast link with connection: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v19, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  v2[4] = v15;
  return v2;
}

Swift::Void __swiftcall ReliableBroadcastLink.resume()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in ReliableBroadcastLink.resume();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = _sIg_Ieg_TRTA_0;
  v4[5] = v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_9;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

void closure #1 in ReliableBroadcastLink.resume()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.reliableBroadcast);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Starting reliable broadcast connection.", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }

  v6 = *(NSObject **)(a1 + 32);
  v7 = swift_allocObject();
  swift_weakInit();
  v9[4] = partial apply for closure #1 in closure #1 in ReliableBroadcastLink.resume();
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned nw_connection_state_t, @guaranteed OS_nw_error?) -> ();
  v9[3] = &block_descriptor_53;
  v8 = _Block_copy(v9);
  swift_release();
  nw_connection_set_state_changed_handler(v6, v8);
  _Block_release(v8);
  nw_connection_set_queue(v6, *(dispatch_queue_t *)(a1 + 16));
  nw_connection_start(v6);
}

uint64_t closure #1 in closure #1 in ReliableBroadcastLink.resume()(int a1, uint64_t a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    ReliableBroadcastLink.handle(stateUpdateEvent:error:)(a1, a2);
    return swift_release();
  }
  return result;
}

void ReliableBroadcastLink.handle(stateUpdateEvent:error:)(int a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.reliableBroadcast);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v19 = a2;
    v8 = swift_slowAlloc();
    v20 = v8;
    *(_DWORD *)v7 = 136315138;
    type metadata accessor for nw_connection_state_t(0);
    v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v5, v6, "State changed on connection to %s", v7, 0xCu);
    swift_arrayDestroy();
    v11 = v8;
    a2 = v19;
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }

  switch(a1)
  {
    case 5:
      ReliableBroadcastLink.handleDisconnect()();
      break;
    case 4:
      swift_unknownObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v20 = v15;
        *(_DWORD *)v14 = 136315138;
        if (a2)
        {
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_nw_error);
          v16 = String.init<A>(reflecting:)();
          v18 = v17;
        }
        else
        {
          v18 = 0xE300000000000000;
          v16 = 7104878;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v12, v13, "Broadcast connection failed: %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v15, -1, -1);
        MEMORY[0x1A1B05CC4](v14, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      break;
    case 3:
      ReliableBroadcastLink.handleConnect()();
      break;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned nw_connection_state_t, @guaranteed OS_nw_error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall ReliableBroadcastLink.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF738], v1);
  v6 = v5;
  v7 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in ReliableBroadcastLink.invalidate();
  *(_QWORD *)(v8 + 24) = v0;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_7;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

uint64_t ReliableBroadcastLink.handleDisconnect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 24))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    *(_QWORD *)(v1 + 24) = 0;
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ReliableBroadcastLink.handleConnect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t result;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t ObjectType;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[2];
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t aBlock;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v66 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  MEMORY[0x1E0C80A78](v2);
  v65 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  MEMORY[0x1E0C80A78](v4);
  v62 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval();
  v59 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v61 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v53 - v9;
  v60 = type metadata accessor for DispatchTime();
  v57 = *(_QWORD *)(v60 - 8);
  v11 = MEMORY[0x1E0C80A78](v60);
  v56 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v58 = (char *)v53 - v13;
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (_QWORD *)((char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v1 + 16);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0DEF740], v18);
  v55 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  if (*(_QWORD *)(v1 + 24))
    return result;
  v54 = v1;
  if (one-time initialization token for reliableBroadcast != -1)
    goto LABEL_13;
LABEL_4:
  v24 = type metadata accessor for Logger();
  v53[1] = __swift_project_value_buffer(v24, (uint64_t)static Log.reliableBroadcast);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1A0DB3000, v25, v26, "Creating timer to send heartbeats.", v27, 2u);
    MEMORY[0x1A1B05CC4](v27, -1, -1);
  }

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for OS_dispatch_source);
  aBlock = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v28 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v55 = (id)v28;
  ObjectType = swift_getObjectType();
  v30 = v56;
  static DispatchTime.now()();
  if (one-time initialization token for heartbeatTimerIntervalInSeconds != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v6, (uint64_t)static ReliableBroadcastLink.heartbeatTimerIntervalInSeconds);
  swift_beginAccess();
  v32 = v59;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  v33(v10, v31, v6);
  v34 = v58;
  MEMORY[0x1A1B046F8](v30, v10);
  v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v10, v6);
  v36 = *(void (**)(char *, uint64_t))(v57 + 8);
  v37 = v30;
  v38 = v60;
  v36(v37, v60);
  v33(v10, v31, v6);
  v39 = v61;
  *(_QWORD *)v61 = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v39, *MEMORY[0x1E0DEF480], v6);
  v40 = v55;
  MEMORY[0x1A1B04E0C](v34, v10, v39, ObjectType);
  v35(v39, v6);
  v35(v10, v6);
  v36(v34, v38);
  v41 = swift_allocObject();
  v42 = v54;
  swift_weakInit();
  v72 = partial apply for closure #1 in ReliableBroadcastLink.handleConnect();
  v73 = v41;
  v43 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v69 = 1107296256;
  v70 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v71 = &block_descriptor_57;
  v44 = _Block_copy(&aBlock);
  swift_retain();
  v45 = v62;
  static DispatchQoS.unspecified.getter();
  v46 = v65;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v67);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
  swift_release();
  swift_release();
  OS_dispatch_source.resume()();
  *(_QWORD *)(v42 + 24) = v40;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_1A0DB3000, v47, v48, "Scheduling receive of first message after connect.", v49, 2u);
    MEMORY[0x1A1B05CC4](v49, -1, -1);
  }

  v50 = *(NSObject **)(v42 + 32);
  v51 = swift_allocObject();
  swift_weakInit();
  v72 = partial apply for closure #1 in ReliableBroadcastLink.scheduleMessageReceive();
  v73 = v51;
  aBlock = v43;
  v69 = 1107296256;
  v70 = thunk for @escaping @callee_guaranteed (@guaranteed OS_dispatch_data?, @guaranteed OS_nw_content_context?, @unowned Bool, @guaranteed OS_nw_error?) -> ();
  v71 = &block_descriptor_61_0;
  v52 = _Block_copy(&aBlock);
  swift_release();
  nw_connection_receive_message(v50, v52);
  _Block_release(v52);
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in ReliableBroadcastLink.handleConnect()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    ReliableBroadcastLink.sendHeartbeat()();
    return swift_release();
  }
  return result;
}

uint64_t ReliableBroadcastLink.sendHeartbeat()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE v13[24];

  v1 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for ReliableBroadcastPacket(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10))
    goto LABEL_8;
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier);
    swift_beginAccess();
    v12 = *v11;
    *v3 = v10 - 1;
    swift_storeEnumTagMultiPayload();
    *v6 = v12;
    outlined init with take of Participant((uint64_t)v3, (uint64_t)v6 + *(int *)(v4 + 20), type metadata accessor for ReliableBroadcastPacket.PacketType);
    ReliableBroadcastLink.send(_:)();
    return outlined destroy of Participant((uint64_t)v6, type metadata accessor for ReliableBroadcastPacket);
  }
  return result;
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void closure #1 in ReliableBroadcastLink.scheduleMessageReceive()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33[6];
  uint64_t v34;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v8 = Strong;
    if (!a1)
    {
      if (one-time initialization token for reliableBroadcast != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Log.reliableBroadcast);
      swift_unknownObjectRetain_n();
      v17 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v21))
      {

        swift_release();
        swift_unknownObjectRelease_n();
        return;
      }
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v33[0] = v23;
      *(_DWORD *)v22 = 136315138;
      if (a4)
      {
        v34 = a4;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_nw_error);
        v24 = String.init<A>(reflecting:)();
        v26 = v25;
      }
      else
      {
        v26 = 0xE300000000000000;
        v24 = 7104878;
      }
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v21, "Error reading content from connection: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v23, -1, -1);
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      goto LABEL_27;
    }
    v9 = a1;
    v10 = NWCreateNSDataFromDispatchData();
    if (v10)
    {
      v11 = (void *)v10;
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      ReliableBroadcastLink._receive(_:)(v12, v14);
      if (!a2)
      {
LABEL_7:
        if (one-time initialization token for reliableBroadcast != -1)
          swift_once();
        v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Log.reliableBroadcast);
        v17 = Logger.logObject.getter();
        v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_1A0DB3000, v17, v18, "Not scheduling message receive because context is final.", v19, 2u);
          MEMORY[0x1A1B05CC4](v19, -1, -1);
          outlined consume of Data._Representation(v12, v14);

        }
        else
        {

          outlined consume of Data._Representation(v12, v14);
        }
        goto LABEL_27;
      }
      v15 = swift_unknownObjectRetain();
      if (nw_content_context_get_is_final(v15))
      {
        swift_unknownObjectRelease();
        goto LABEL_7;
      }
      v30 = *(NSObject **)(v8 + 32);
      v31 = swift_allocObject();
      swift_weakInit();
      v33[4] = (uint64_t)partial apply for closure #1 in ReliableBroadcastLink.scheduleMessageReceive();
      v33[5] = v31;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 1107296256;
      v33[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed OS_dispatch_data?, @guaranteed OS_nw_content_context?, @unowned Bool, @guaranteed OS_nw_error?) -> ();
      v33[3] = (uint64_t)&block_descriptor_66;
      v32 = _Block_copy(v33);
      swift_release();
      nw_connection_receive_message(v30, v32);
      _Block_release(v32);
      swift_unknownObjectRelease();
      outlined consume of Data._Representation(v12, v14);
    }
    else
    {
      if (one-time initialization token for reliableBroadcast != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.reliableBroadcast);
      v17 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_1A0DB3000, v17, v28, "Error creating data from dispatch data.", v29, 2u);
        MEMORY[0x1A1B05CC4](v29, -1, -1);

LABEL_27:
        swift_release();
        return;
      }

    }
    swift_release();

  }
}

uint64_t ReliableBroadcastLink._receive(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(v3 + 16);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v3;
  aBlock[4] = partial apply for closure #1 in ReliableBroadcastLink._receive(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_72;
  v15 = _Block_copy(aBlock);
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed OS_dispatch_data?, @guaranteed OS_nw_content_context?, @unowned Bool, @guaranteed OS_nw_error?) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(void *, uint64_t, uint64_t, uint64_t);
  id v10;

  v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v10 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

void ReliableBroadcastLink._send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  NSObject *v11;
  Class isa;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (_QWORD *)((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v11 = *(NSObject **)(v2 + 32);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v13 = NWCreateDispatchDataFromNSData();

    v14 = *MEMORY[0x1E0CCECE8];
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    aBlock[4] = partial apply for closure #1 in ReliableBroadcastLink._send(_:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_error?) -> ();
    aBlock[3] = &block_descriptor_78;
    v16 = _Block_copy(aBlock);
    outlined copy of Data._Representation(a1, a2);
    swift_release();
    nw_connection_send(v11, v13, v14, 1, v16);
    _Block_release(v16);

  }
  else
  {
    __break(1u);
  }
}

void closure #1 in ReliableBroadcastLink._send(_:)(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *oslog;
  uint64_t v25;

  if (a1)
  {
    v12 = one-time initialization token for reliableBroadcast;
    swift_unknownObjectRetain();
    if (v12 != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.reliableBroadcast);
    swift_unknownObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_nw_error);
      v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v14, v15, "Error sending data: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      MEMORY[0x1A1B05CC4](v16, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for reliableBroadcast != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.reliableBroadcast);
    outlined copy of Data._Representation(a2, a3);
    oslog = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      __asm { BR              X10 }
    }
    outlined consume of Data._Representation(a2, a3);

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_error?) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in ReliableBroadcastLink._receive(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *inited;
  uint64_t v12;

  v4 = type metadata accessor for ReliableBroadcastPacket(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.reliableBroadcast);
  outlined copy of Data._Representation(a1, a2);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    *(_DWORD *)swift_slowAlloc() = 134217984;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(a1, a2);

  type metadata accessor for BinaryDecoder();
  inited = (_QWORD *)swift_initStackObject();
  inited[2] = a1;
  inited[3] = a2;
  inited[4] = 0;
  outlined copy of Data._Representation(a1, a2);
  ReliableBroadcastPacket.init(from:)(v6);
  ReliableBroadcastLink.receive(_:)((uint64_t)v6);
  return outlined destroy of Participant((uint64_t)v6, type metadata accessor for ReliableBroadcastPacket);
}

void ReliableBroadcastLink.receive(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = type metadata accessor for DispatchPredicate();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReliableBroadcastPacket(0);
  outlined init with copy of Participant(a1 + *(int *)(v7 + 20), (uint64_t)v6, type metadata accessor for ReliableBroadcastPacket.PacketType);
  v8 = (char *)&loc_1A0EA6568 + dword_1A0EA669C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A0EA6578()
{
  uint64_t *v0;
  unsigned int *v1;

  return ReliableBroadcastLink.receive(_:from:)(*v1, *v0);
}

uint64_t ReliableBroadcastLink.context(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
  swift_beginAccess();
  v6 = *v5;
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(v6 + 56) + 48 * v7;
    a1 = *(_QWORD *)v9;
    v10 = *(_DWORD *)(v9 + 8);
    v11 = *(_BYTE *)(v9 + 12);
    v12 = *(_DWORD *)(v9 + 16);
    v13 = *(_BYTE *)(v9 + 20);
    v14 = *(_QWORD *)(v9 + 24);
    v15 = *(_QWORD *)(v9 + 32);
    v16 = *(_QWORD *)(v9 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
    v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v15 = specialized Dictionary.init(dictionaryLiteral:)(v16);
    v10 = 0;
    v12 = 0;
    v11 = 2;
    v13 = 2;
  }
  result = swift_endAccess();
  *(_QWORD *)a2 = a1;
  *(_DWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 20) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v16;
  return result;
}

uint64_t specialized ReliableBroadcastLink.withMutableContext<A>(for:mutator:)(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _OWORD v10[3];
  _OWORD v11[3];

  ReliableBroadcastLink.context(for:)(a1, (uint64_t)v10);
  a2(v10);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v11[0] = v10[0];
    v11[1] = v10[1];
    v11[2] = v10[2];
    v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v7;
    *v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a1, isUniquelyReferenced_nonNull_native);
    *v7 = v9;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
}

uint64_t ReliableBroadcastLink.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(v3 + 16);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for closure #1 in ReliableBroadcastLink.send(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_13_0;
  v15 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  static DispatchQoS.unspecified.getter();
  v19 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t ReliableBroadcastLink.receive(_:from:)(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];

  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    ReliableBroadcastLink.context(for:)(a2, (uint64_t)&v20);
    v17 = v20;
    v18 = v21;
    v19 = v22;
    closure #1 in ReliableBroadcastLink.receive(_:from:)((uint64_t)&v17, a2, a1, v2);
    v23[0] = v17;
    v23[1] = v18;
    v23[2] = v19;
    v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v11;
    *v11 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, a2, isUniquelyReferenced_nonNull_native);
    *v11 = v15;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    __break(1u);
    *(_QWORD *)&v23[0] = *((_QWORD *)&v22 + 1);
    v16[0] = *((_QWORD *)&v21 + 1);
    outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v16);
    swift_bridgeObjectRelease();
    result = outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v23);
    __break(1u);
  }
  return result;
}

uint64_t ReliableBroadcastLink.receive(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(uint64_t, unint64_t, uint64_t);
  uint64_t result;
  void (*v17)(uint64_t, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = v3;
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.reliableBroadcast);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    v19 = a1;
    *(_DWORD *)v11 = 136315138;
    v20 = a2;
    outlined copy of Data._Representation(a1, a2);
    v13 = String.init<A>(describing:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_1A0DB3000, v9, v10, "RECV UNRELIABLE %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
  }

  v15 = (void (**)(uint64_t, unint64_t, uint64_t))(v4
                                                                 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
  result = swift_beginAccess();
  v17 = *v15;
  if (*v15)
  {
    swift_retain();
    v17(a1, a2, a3);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v17);
  }
  return result;
}

void ReliableBroadcastLink.receive(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[3];

  v4 = v3;
  v8 = *v3;
  v9 = type metadata accessor for ReliableBroadcastPacket(0);
  v50 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (unint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)v4[2];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_14;
  }
  v18 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier);
  swift_beginAccess();
  if (*v18 != a1)
  {
    ReliableBroadcastLink.context(for:)(a1, (uint64_t)&v56);
    v53 = v56;
    v54 = v57;
    v55 = v58;
    closure #1 in ReliableBroadcastLink.receive(_:from:)((uint64_t)&v53, a1, a2 & 0xFFFFFFFFFFFFLL, (uint64_t)v4);
    v59[0] = v53;
    v59[1] = v54;
    v59[2] = v55;
    v28 = (_QWORD *)((char *)v4
                   + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = *v28;
    *v28 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, a1, isUniquelyReferenced_nonNull_native);
    *v28 = v51;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return;
  }
  swift_beginAccess();
  v19 = v4[6];
  v20 = __OFSUB__(a2, v19);
  v21 = a2 - v19;
  if (v20)
    goto LABEL_32;
  if ((v21 & 0x8000000000000000) != 0 || (v22 = v4[5], v21 >= *(_QWORD *)(v22 + 16)))
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v8 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v15 = *(_QWORD **)(v22 + 8 * v21 + 32);
    swift_bridgeObjectRetain();
    v8 = v15[2];
    if (!v8)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      if (one-time initialization token for reliableBroadcast != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Log.reliableBroadcast);
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v24, v25))
        goto LABEL_27;
      v26 = swift_slowAlloc();
      *(_DWORD *)v26 = 134218240;
      *(_QWORD *)&v56 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 1024;
      LODWORD(v56) = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1A0DB3000, v24, v25, "Received a NACK from %llu but we no longer have the message with messageSequenceNumber %u in our buffer.", (uint8_t *)v26, 0x12u);
      v27 = v26;
LABEL_26:
      MEMORY[0x1A1B05CC4](v27, -1, -1);
LABEL_27:

      return;
    }
  }
  if (one-time initialization token for reliableBroadcast != -1)
    goto LABEL_33;
LABEL_14:
  v30 = type metadata accessor for Logger();
  v48 = __swift_project_value_buffer(v30, (uint64_t)static Log.reliableBroadcast);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  v33 = HIDWORD(a2);
  if (os_log_type_enabled(v31, v32))
  {
    v34 = swift_slowAlloc();
    v46 = v8;
    v35 = (uint8_t *)v34;
    v36 = swift_slowAlloc();
    v49 = HIDWORD(a2);
    v33 = v36;
    v47 = v15;
    *(_DWORD *)v35 = 136315138;
    *(_QWORD *)&v53 = v36;
    *(_QWORD *)&v56 = a1;
    DWORD2(v56) = a2;
    WORD6(v56) = v49;
    v37 = String.init<A>(describing:)();
    *(_QWORD *)&v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v53);
    v15 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v31, v32, "RECV NACK (%s)", v35, 0xCu);
    swift_arrayDestroy();
    v39 = v33;
    LOWORD(v33) = v49;
    MEMORY[0x1A1B05CC4](v39, -1, -1);
    v40 = v35;
    v8 = v46;
    MEMORY[0x1A1B05CC4](v40, -1, -1);
  }

  if ((_WORD)v33 == 0xFFFF)
  {
    v41 = v15[2];
    if (!v41)
    {
      swift_bridgeObjectRelease();
      return;
    }
    v42 = (uint64_t)v15 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v43 = *(_QWORD *)(v50 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Participant(v42, (uint64_t)v11, type metadata accessor for ReliableBroadcastPacket);
      ReliableBroadcastLink.send(_:)();
      outlined destroy of Participant((uint64_t)v11, type metadata accessor for ReliableBroadcastPacket);
      v42 += v43;
      --v41;
    }
    while (v41);
    swift_release();
LABEL_29:
    swift_bridgeObjectRelease_n();
    return;
  }
  if (WORD2(a2) >= v8)
  {
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v44))
    {
      v45 = swift_slowAlloc();
      *(_DWORD *)v45 = 33554944;
      LOWORD(v56) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 6) = 2048;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v56 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v24, v44, "Could not find requested packet number %hu in the requested\nmessage with count %ld.", (uint8_t *)v45, 0x10u);
      v27 = v45;
      goto LABEL_26;
    }

    goto LABEL_29;
  }
  if ((unint64_t)WORD2(a2) >= v15[2])
  {
    __break(1u);
    *(_QWORD *)&v59[0] = *((_QWORD *)&v58 + 1);
    v52[0] = *((_QWORD *)&v57 + 1);
    outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v52);
    swift_bridgeObjectRelease();
    outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v59);
    __break(1u);
  }
  else
  {
    outlined init with copy of Participant((uint64_t)v15+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * WORD2(a2), (uint64_t)v11, type metadata accessor for ReliableBroadcastPacket);
    swift_bridgeObjectRelease();
    ReliableBroadcastLink.send(_:)();
    outlined destroy of Participant((uint64_t)v11, type metadata accessor for ReliableBroadcastPacket);
  }
}

uint64_t ReliableBroadcastLink.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Participant(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler));
  return v0;
}

uint64_t ReliableBroadcastLink.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Participant(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler));
  return swift_deallocClassInstance();
}

void closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  void (*v20)(_QWORD *, uint64_t, uint64_t);
  BOOL v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v29 = a4;
  v9 = type metadata accessor for DispatchTimeInterval();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(a1 + 12) == 1)
  {
    v28 = v4;
    v13 = *(_DWORD *)(a1 + 8);
    if (v13 < a3)
    {
      LODWORD(a2) = v13 + 1;
      if (one-time initialization token for reliableBroadcast != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.reliableBroadcast);
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.debug.getter();
      v17 = v16;
      if (os_log_type_enabled(v15, v16))
      {
        v18 = (_DWORD *)swift_slowAlloc();
        v27 = v17;
        v19 = v18;
        *v18 = 67109376;
        LODWORD(v30) = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *((_WORD *)v19 + 4) = 1024;
        LODWORD(v30) = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1A0DB3000, v15, (os_log_type_t)v27, "RECV HEARTBEAT %u...%u.", (uint8_t *)v19, 0xEu);
        MEMORY[0x1A1B05CC4](v19, -1, -1);
      }

      v5 = *MEMORY[0x1E0DEF4A0];
      v20 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 104);
      while (1)
      {
        *v12 = 0;
        v20(v12, v5, v9);
        ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)((uint64_t *)a1, a2, 0xFFFFu);
        (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
        if (a3 == (_DWORD)a2)
          break;
        v21 = __CFADD__((_DWORD)a2, 1);
        a2 = (a2 + 1);
        if (v21)
        {
          __break(1u);
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
LABEL_12:
    if (one-time initialization token for reliableBroadcast != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.reliableBroadcast);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v28 = v5;
      v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v25 = 134217984;
      v30 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1A0DB3000, v23, v24, "Received a heartbeat from %llu but we are not tracking this participant, so no retransmission requests were sent.", v25, 0xCu);
      MEMORY[0x1A1B05CC4](v25, -1, -1);

    }
    else
    {

    }
  }
}

unint64_t closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(_QWORD *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[9];

  v61 = a4;
  v52 = a2;
  v59 = type metadata accessor for DispatchTimeInterval();
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v58 = (uint64_t *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for DispatchTime();
  v54 = *(_QWORD *)(v60 - 8);
  v8 = MEMORY[0x1E0C80A78](v60);
  v53 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v48 - v11;
  MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v48 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v16);
  v17 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v18);
  v62 = (uint64_t)&v48 - v23;
  v24 = *(_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 20))
  {
    if (*(_BYTE *)(a1 + 20) == 1 && v24 >= a3)
      return result;
  }
  else if (v24 > a3)
  {
    return result;
  }
  v25 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v25 + 16))
  {
    v50 = a3 & 0xFFFFFFFFFFFFLL;
    v51 = v22;
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3 & 0xFFFFFFFFFFFFLL);
    if ((v26 & 1) != 0)
    {
      v48 = v4;
      outlined init with copy of Participant(*(_QWORD *)(v25 + 56) + *(_QWORD *)(v51 + 72) * result, (uint64_t)v20, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      v27 = v62;
      outlined init with take of Participant((uint64_t)v20, v62, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      if (one-time initialization token for reliableBroadcast != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.reliableBroadcast);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      v31 = os_log_type_enabled(v29, v30);
      v49 = HIDWORD(a3);
      if (v31)
      {
        v32 = swift_slowAlloc();
        *(_DWORD *)v32 = 67109376;
        LODWORD(aBlock[0]) = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 8) = 512;
        LOWORD(aBlock[0]) = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1A0DB3000, v29, v30, "NACK SUPRESSION (%u, %hu)", (uint8_t *)v32, 0xCu);
        v33 = v32;
        v27 = v62;
        MEMORY[0x1A1B05CC4](v33, -1, -1);
      }

      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
      v34 = swift_allocObject();
      v35 = v52;
      *(_QWORD *)(v34 + 16) = v61;
      *(_QWORD *)(v34 + 24) = v35;
      *(_DWORD *)(v34 + 32) = a3;
      LOWORD(v35) = v49;
      *(_WORD *)(v34 + 36) = v49;
      *(_DWORD *)(v34 + 40) = a3;
      *(_WORD *)(v34 + 44) = v35;
      aBlock[4] = partial apply for closure #1 in closure #1 in ReliableBroadcastLink.receive(_:from:);
      aBlock[5] = v34;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_47;
      v52 = (uint64_t)_Block_copy(aBlock);
      aBlock[8] = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      v36 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      outlined init with copy of Participant(v27, (uint64_t)v15, type metadata accessor for ReliableBroadcastPacket);
      *(_QWORD *)&v15[*(int *)(v17 + 20)] = v36;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v15, 0, 1, v17);
      v52 = v36;
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)v15, v50);
      v37 = v53;
      static DispatchTime.now()();
      v38 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x321uLL);
      v40 = v57;
      v39 = v58;
      *v58 = v38 + 200;
      v41 = v59;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v40 + 104))(v39, *MEMORY[0x1E0DEF490], v59);
      v42 = v55;
      MEMORY[0x1A1B046F8](v37, v39);
      v43 = *(void (**)(_QWORD *, uint64_t))(v40 + 8);
      v43(v39, v41);
      v44 = *(void (**)(char *, uint64_t))(v54 + 8);
      v45 = v60;
      v44(v37, v60);
      if (one-time initialization token for retransmissionRequestRetryTimerDelay != -1)
        swift_once();
      v46 = __swift_project_value_buffer(v41, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay);
      swift_beginAccess();
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v40 + 16))(v39, v46, v41);
      v47 = v56;
      MEMORY[0x1A1B046F8](v42, v39);
      v43(v39, v41);
      v44(v42, v45);
      MEMORY[0x1A1B04D28](v47, v52);
      swift_release();
      v44(v47, v45);
      return outlined destroy of Participant(v62, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    }
  }
  return result;
}

uint64_t ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + 16);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    ReliableBroadcastLink.context(for:)(a1, (uint64_t)&v22);
    v19 = v22;
    v20 = v23;
    v21 = v24;
    closure #1 in ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)((uint64_t)&v19, a2 & 0xFFFFFFFFFFFFLL, a3, v3, a1);
    v25[0] = v19;
    v25[1] = v20;
    v25[2] = v21;
    v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifierToContextMap);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v13;
    *v13 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, a1, isUniquelyReferenced_nonNull_native);
    *v13 = v17;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    __break(1u);
    *(_QWORD *)&v25[0] = *((_QWORD *)&v24 + 1);
    v18[0] = *((_QWORD *)&v23 + 1);
    outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v18);
    swift_bridgeObjectRelease();
    result = outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)v25);
    __break(1u);
  }
  return result;
}

uint64_t ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)(uint64_t *a1, unsigned int a2, unsigned __int16 a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  id v58;
  char *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchTimeInterval();
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  MEMORY[0x1E0C80A78](v7);
  v62 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = type metadata accessor for DispatchTime();
  v60 = *(_QWORD *)(v65 - 8);
  v9 = MEMORY[0x1E0C80A78](v65);
  v59 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v61 = (char *)&v51 - v11;
  v56 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v56);
  v57 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ReliableBroadcastPacket(0);
  MEMORY[0x1E0C80A78](v54);
  v55 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v51 - v18;
  v20 = type metadata accessor for DispatchPredicate();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (uint64_t *)((char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(void **)(v3 + 16);
  *v23 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E0DEF740], v20);
  v58 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) != 0)
  {
    v53 = v17;
    v26 = v3;
    v27 = a1[4];
    if (*(_QWORD *)(v27 + 16)
      && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(a2 | ((unint64_t)a3 << 32)), (v29 & 1) != 0))
    {
      v30 = v28;
      v31 = *(_QWORD *)(v27 + 56);
      v32 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
      v33 = *(_QWORD *)(v32 - 8);
      outlined init with copy of Participant(v31 + *(_QWORD *)(v33 + 72) * v30, (uint64_t)v19, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v32);
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
    }
    else
    {
      v34 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
      v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
      v52(v19, 1, 1, v34);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
      v35 = *a1;
      v36 = (uint64_t *)(v26 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier);
      swift_beginAccess();
      v37 = *v36;
      v38 = v55;
      v39 = &v55[*(int *)(v54 + 20)];
      *(_QWORD *)v39 = v35;
      *((_DWORD *)v39 + 2) = a2;
      *((_WORD *)v39 + 6) = a3;
      type metadata accessor for ReliableBroadcastPacket.PacketType(0);
      swift_storeEnumTagMultiPayload();
      *v38 = v37;
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v26;
      *(_QWORD *)(v40 + 24) = v35;
      *(_DWORD *)(v40 + 32) = a2;
      *(_WORD *)(v40 + 36) = a3;
      aBlock[4] = partial apply for closure #1 in ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:);
      aBlock[5] = v40;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_32;
      _Block_copy(aBlock);
      v66 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      v41 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      v42 = (uint64_t)v53;
      outlined init with copy of Participant((uint64_t)v38, (uint64_t)v53, type metadata accessor for ReliableBroadcastPacket);
      *(_QWORD *)(v42 + *(int *)(v34 + 20)) = v41;
      v52((char *)v42, 0, 1, v34);
      swift_retain();
      specialized Dictionary.subscript.setter(v42, a2 | ((unint64_t)a3 << 32));
      v43 = v59;
      static DispatchTime.now()();
      v44 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x321uLL);
      v46 = v62;
      v45 = v63;
      *v62 = v44 + 200;
      v47 = v64;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v45 + 104))(v46, *MEMORY[0x1E0DEF490], v64);
      v48 = v61;
      MEMORY[0x1A1B046F8](v43, v46);
      (*(void (**)(_QWORD *, uint64_t))(v45 + 8))(v46, v47);
      v49 = *(void (**)(char *, uint64_t))(v60 + 8);
      v50 = v65;
      v49(v43, v65);
      MEMORY[0x1A1B04D28](v48, v41);
      swift_release();
      v49(v48, v50);
      return outlined destroy of Participant((uint64_t)v38, type metadata accessor for ReliableBroadcastPacket);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  unint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t aBlock[7];
  uint64_t v67;

  v65 = a3;
  v54 = a5;
  v57 = a4;
  v7 = type metadata accessor for DispatchTimeInterval();
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  MEMORY[0x1E0C80A78](v7);
  v61 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchTime();
  v59 = *(_QWORD *)(v64 - 8);
  v9 = MEMORY[0x1E0C80A78](v64);
  v58 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v52 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v15);
  v55 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v16 = *(_QWORD *)(v55 - 8);
  v17 = MEMORY[0x1E0C80A78](v55);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v52 - v20;
  v22 = *(_QWORD *)(a1 + 32);
  v56 = a1 + 32;
  if (*(_QWORD *)(v22 + 16)
    && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0xFFFFFFFFFFFFLL), (v24 & 1) != 0))
  {
    v52 = v16;
    v53 = a2 & 0xFFFFFFFFFFFFLL;
    outlined init with copy of Participant(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v16 + 72) * v23, (uint64_t)v19, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    outlined init with take of Participant((uint64_t)v19, (uint64_t)v21, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    if (one-time initialization token for reliableBroadcast != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.reliableBroadcast);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    v28 = a2;
    v29 = HIDWORD(a2);
    if (os_log_type_enabled(v26, v27))
    {
      v30 = swift_slowAlloc();
      *(_DWORD *)v30 = 67109632;
      LODWORD(aBlock[0]) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 8) = 512;
      LOWORD(aBlock[0]) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2048;
      aBlock[0] = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1A0DB3000, v26, v27, "NACK TIMER FIRED (%u, %hu) - %lu", (uint8_t *)v30, 0x16u);
      MEMORY[0x1A1B05CC4](v30, -1, -1);
    }

    v31 = v57;
    ReliableBroadcastLink.send(_:)();
    v32 = swift_allocObject();
    v33 = v54;
    *(_QWORD *)(v32 + 16) = v31;
    *(_QWORD *)(v32 + 24) = v33;
    *(_DWORD *)(v32 + 32) = v28;
    *(_WORD *)(v32 + 36) = v29;
    *(_QWORD *)(v32 + 40) = v65;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:);
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_26_0;
    _Block_copy(aBlock);
    v67 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    v34 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    outlined init with copy of Participant((uint64_t)v21, (uint64_t)v14, type metadata accessor for ReliableBroadcastPacket);
    *(_QWORD *)&v14[*(int *)(v55 + 20)] = v34;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 56))(v14, 0, 1);
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v14, v53);
    v35 = v58;
    static DispatchTime.now()();
    if (one-time initialization token for retransmissionRequestRetryTimerDelay != -1)
      swift_once();
    v36 = v63;
    v37 = __swift_project_value_buffer(v63, (uint64_t)static ReliableBroadcastLink.retransmissionRequestRetryTimerDelay);
    swift_beginAccess();
    v39 = v61;
    v38 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v37, v36);
    v40 = v60;
    MEMORY[0x1A1B046F8](v35, v39);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
    v41 = *(void (**)(char *, uint64_t))(v59 + 8);
    v42 = v64;
    v41(v35, v64);
    MEMORY[0x1A1B04D28](v40, v34);
    swift_release();
    v41(v40, v42);
    outlined destroy of Participant((uint64_t)v21, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
  }
  else
  {
    if (one-time initialization token for reliableBroadcast != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Log.reliableBroadcast);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = a2;
      v47 = HIDWORD(a2);
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136315138;
      LODWORD(v67) = v46;
      WORD2(v67) = v47;
      v50 = String.init<A>(describing:)();
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v44, v45, "Internal inconsistency: retransmission request timed out but we're no longer tracking a request for %s.", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v49, -1, -1);
      MEMORY[0x1A1B05CC4](v48, -1, -1);
    }

  }
}

Swift::Void __swiftcall ReliableBroadcastLink.SenderContext.cancelRetransmissionRequests(messageSequenceNumber:packetNumber:)(Swift::UInt32 messageSequenceNumber, Swift::UInt16 packetNumber)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v28 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - v12;
  v14 = (uint64_t *)(v2 + 32);
  v15 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v15 + 16)
    && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(messageSequenceNumber | ((unint64_t)packetNumber << 32)),
        (v17 & 1) != 0))
  {
    v18 = v16;
    v19 = *(_QWORD *)(v15 + 56);
    v20 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
    v21 = *(_QWORD *)(v20 - 8);
    outlined init with copy of Participant(v19 + *(_QWORD *)(v21 + 72) * v18, (uint64_t)v13, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, v20);
  }
  else
  {
    v20 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
  }
  type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v22 = *(_QWORD **)(v20 - 8);
  v23 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[6];
  if (v23(v13, 1, v20))
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  }
  else
  {
    swift_retain();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v24 = *v14;
  if (*(_QWORD *)(*v14 + 16)
    && (v25 = specialized __RawDictionaryStorage.find<A>(_:)(messageSequenceNumber | 0xFFFF00000000), (v26 & 1) != 0))
  {
    outlined init with copy of Participant(*(_QWORD *)(v24 + 56) + v22[9] * v25, (uint64_t)v11, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    v27 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22[7];
    v27(v11, 0, 1, v20);
  }
  else
  {
    v27 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22[7];
    v27(v11, 1, 1, v20);
  }
  if (v23(v11, 1, v20))
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  }
  else
  {
    swift_retain();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v27(v8, 1, 1, v20);
  specialized Dictionary.subscript.setter((uint64_t)v8, messageSequenceNumber | ((unint64_t)packetNumber << 32));
  v27(v8, 1, 1, v20);
  specialized Dictionary.subscript.setter((uint64_t)v8, messageSequenceNumber | 0xFFFF00000000);
}

uint64_t ReliableBroadcastLink.flush(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;

  v3 = type metadata accessor for DispatchPredicate();
  v80 = *(_QWORD *)(v3 - 8);
  v81 = v3;
  MEMORY[0x1E0C80A78](v3);
  v79 = (_QWORD *)((char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = type metadata accessor for DispatchTimeInterval();
  v84 = *(_QWORD *)(v87 - 8);
  result = MEMORY[0x1E0C80A78](v87);
  v82 = (_QWORD *)((char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 12);
  if (*(_BYTE *)(a1 + 20))
  {
    if (*(_BYTE *)(a1 + 20) != 1 || v9 != 1)
      goto LABEL_62;
    if (__CFADD__(v7++, 1))
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v8 >= v7)
    {
LABEL_12:
      v85 = (uint64_t *)a1;
      result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNys6UInt32VG_AG14sequenceNumber_15GroupActivities21ReliableBroadcastLinkC13SenderContextV14PendingMessageVSg07pendingO0ts5NeverOTg504_s15g12Activities21ijk50C5flush33_76BCD4E2511F082E6B15E4876EEE7C9BLLyyAC13lm5VzFs6d11V14sequencef5_AG14nO22VSg07pendingU0tAIXEfU_ANTf1cn_n(v7 | (unint64_t)(v8 << 32), a1);
      v12 = result;
      v13 = 0;
      v14 = *(_QWORD *)(result + 16);
      v15 = v1;
      v83 = v1;
      v76 = 0;
      if (v14)
      {
        v16 = 0;
        v17 = (_QWORD *)(result + 56);
        while (1)
        {
          v18 = *(v17 - 2);
          if (!v18 || *(_QWORD *)(v18 + 16) != *v17)
            break;
          ++v16;
          v17 += 5;
          if (v14 == v16)
          {
            v16 = v14;
            goto LABEL_19;
          }
        }
        if (v14 < v16)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
LABEL_19:
        swift_bridgeObjectRetain();
        v19 = (_QWORD *)(v12 + 64);
        v20 = MEMORY[0x1E0DEE9D8];
        do
        {
          if (!*(v19 - 3))
          {
            v24 = *((_DWORD *)v19 - 8);
            v86 = *((_OWORD *)v19 - 1);
            v25 = *v19;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v89 = v20;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
              v20 = v89;
            }
            v22 = *(_QWORD *)(v20 + 16);
            v21 = *(_QWORD *)(v20 + 24);
            if (v22 >= v21 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
              v20 = v89;
            }
            *(_QWORD *)(v20 + 16) = v22 + 1;
            v23 = v20 + 40 * v22;
            *(_DWORD *)(v23 + 32) = v24;
            *(_QWORD *)(v23 + 40) = 0;
            *(_OWORD *)(v23 + 48) = v86;
            *(_QWORD *)(v23 + 64) = v25;
            v15 = v83;
          }
          v19 += 5;
          --v14;
        }
        while (v14);
        *(_QWORD *)&v86 = v16;
        swift_bridgeObjectRelease();
        v13 = v76;
      }
      else
      {
        *(_QWORD *)&v86 = 0;
        v20 = MEMORY[0x1E0DEE9D8];
      }
      v27 = *(_QWORD *)(v20 + 16);
      v75 = v12;
      if (v27)
      {
        LODWORD(v78) = *MEMORY[0x1E0DEF4A0];
        swift_retain();
        v74[1] = v20;
        v28 = v20 + 64;
        *(_QWORD *)&v29 = 67109120;
        v77 = v29;
        do
        {
          v34 = *(_DWORD *)(v28 - 32);
          v35 = *(_QWORD *)(v28 - 24);
          outlined copy of ReliableBroadcastLink.SenderContext.PendingMessage?(v35);
          if (one-time initialization token for reliableBroadcast != -1)
            swift_once();
          v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)static Log.reliableBroadcast);
          v37 = Logger.logObject.getter();
          v38 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = swift_slowAlloc();
            *(_DWORD *)v39 = v77;
            *(_DWORD *)(v39 + 4) = v34;
            _os_log_impl(&dword_1A0DB3000, v37, v38, "SEND NACK GAP (%u)", (uint8_t *)v39, 8u);
            MEMORY[0x1A1B05CC4](v39, -1, -1);
          }
          v28 += 40;

          v30 = v34;
          v31 = v82;
          *v82 = 0;
          v32 = v84;
          v33 = v87;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v31, v78, v87);
          ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)(v85, v30, 0xFFFFu);
          (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v31, v33);
          outlined consume of ReliableBroadcastLink.SenderContext.PendingMessage?(v35);
          --v27;
        }
        while (v27);
        swift_release();
        v15 = v83;
        v12 = v75;
        v13 = v76;
      }
      swift_release();
      v40 = v86;
      if (!(_QWORD)v86)
        return swift_bridgeObjectRelease();
      LODWORD(v82) = *MEMORY[0x1E0DEF740];
      result = swift_bridgeObjectRetain();
      v41 = v12 + 64;
      *(_QWORD *)&v42 = 136315138;
      v78 = v42;
      *(_QWORD *)&v77 = MEMORY[0x1E0DEE9B8] + 8;
      v43 = v85;
      v44 = v15;
      while (1)
      {
        *(_QWORD *)&v86 = v40;
        v45 = *(_QWORD *)(v41 - 24);
        if (!v45)
          goto LABEL_61;
        v46 = *(_QWORD *)(v41 - 16);
        v47 = *(_QWORD *)(v41 - 8);
        v48 = *(_DWORD *)(v41 - 32);
        *((_DWORD *)v43 + 4) = v48;
        *((_BYTE *)v43 + 20) = 1;
        v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48);
        v51 = v50;
        v87 = v46;
        v84 = v47;
        outlined copy of ReliableBroadcastLink.SenderContext.PendingMessage?(v45);
        swift_retain();
        v52 = v13;
        if ((v51 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v53 = swift_isUniquelyReferenced_nonNull_native();
          v54 = v43[3];
          v89 = v54;
          v43[3] = 0x8000000000000000;
          if ((v53 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v54 = v89;
          }
          specialized _NativeDictionary._delete(at:)(v49, v54);
          v43[3] = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v55 = *v43;
        v56 = *(void **)(v44 + 16);
        v58 = v79;
        v57 = v80;
        *v79 = v56;
        v59 = v81;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v57 + 104))(v58, v82, v81);
        v60 = v56;
        LOBYTE(v56) = _dispatchPreconditionTest(_:)();
        result = (*(uint64_t (**)(_QWORD *, uint64_t))(v57 + 8))(v58, v59);
        if ((v56 & 1) == 0)
        {
          __break(1u);
          goto LABEL_58;
        }
        specialized ReliableBroadcastLink._decryptAndDeliver(_:from:)(v45, v87, v55);
        v13 = v52;
        if (v52)
        {
          if (one-time initialization token for reliableBroadcast != -1)
            swift_once();
          v61 = type metadata accessor for Logger();
          __swift_project_value_buffer(v61, (uint64_t)static Log.reliableBroadcast);
          v62 = v52;
          v63 = v52;
          v64 = Logger.logObject.getter();
          v65 = static os_log_type_t.error.getter();
          v66 = os_log_type_enabled(v64, v65);
          v43 = v85;
          if (v66)
          {
            v67 = swift_slowAlloc();
            v68 = swift_slowAlloc();
            v88 = v52;
            v89 = v68;
            *(_DWORD *)v67 = v78;
            v69 = v52;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            v70 = String.init<A>(describing:)();
            *(_QWORD *)(v67 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &v89);
            v72 = v83;
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1A0DB3000, v64, v65, "Error delivering message: %s", (uint8_t *)v67, 0xCu);
            swift_arrayDestroy();
            v73 = v68;
            v44 = v72;
            MEMORY[0x1A1B05CC4](v73, -1, -1);
            MEMORY[0x1A1B05CC4](v67, -1, -1);

            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          v13 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          v43 = v85;
        }
        v41 += 40;
        swift_release();
        result = outlined consume of ReliableBroadcastLink.SenderContext.PendingMessage?(v45);
        v40 = v86 - 1;
        if ((_QWORD)v86 == 1)
          return swift_bridgeObjectRelease_n();
      }
    }
    __break(1u);
  }
  if (v9 == 1)
  {
    if (v8 >= v7)
      goto LABEL_12;
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
  }
LABEL_62:
  __break(1u);
  return result;
}

void closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t a1, uint64_t a2, int64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt32 v30;
  Swift::UInt32 v31;
  Swift::UInt32 v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  Swift::UInt8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  Swift::UInt8 *v113;
  int *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD aBlock[6];
  uint64_t v118;

  v5 = v4;
  v96 = a4;
  v102 = type metadata accessor for DispatchTimeInterval();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v100 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DispatchTime();
  v10 = *(_QWORD *)(v103 - 8);
  v11 = MEMORY[0x1E0C80A78](v103);
  v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v99 = (char *)&v93 - v14;
  v97 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v97);
  v98 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v112 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v113 = (Swift::UInt8 *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v115 = (unint64_t)&v93 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v93 - v22;
  v95 = v24;
  v25 = MEMORY[0x1E0C80A78](v21);
  v27 = (unint64_t)&v93 - v26;
  v29 = *(int *)(v25 + 24);
  v28 = *(int *)(v25 + 28);
  v114 = (int *)v25;
  v107 = v29;
  v30 = *(_DWORD *)(a2 + v29);
  v109 = a2;
  ReliableBroadcastLink.SenderContext.cancelRetransmissionRequests(messageSequenceNumber:packetNumber:)(v30, *(_WORD *)(a2 + v28));
  v31 = v30;
  if (*(_BYTE *)(a1 + 12) == 1)
  {
    v31 = *(_DWORD *)(a1 + 8);
    if (v30 > v31)
      v31 = v30;
  }
  *(_DWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 12) = 1;
  v32 = *(_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 20))
  {
    if (*(_BYTE *)(a1 + 20) == 1 && v32 >= v30)
      return;
  }
  else if (v30 < v32)
  {
    return;
  }
  v94 = v10;
  if (one-time initialization token for reliableBroadcast != -1)
    goto LABEL_48;
  while (1)
  {
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.reliableBroadcast);
    v34 = v109;
    outlined init with copy of Participant(v109, v27, type metadata accessor for ReliableBroadcastPacket.Message);
    outlined init with copy of Participant(v34, (uint64_t)v23, type metadata accessor for ReliableBroadcastPacket.Message);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.debug.getter();
    v37 = os_log_type_enabled(v35, v36);
    v105 = a3;
    v106 = a1;
    v111 = v13;
    if (v37)
    {
      v38 = swift_slowAlloc();
      *(_DWORD *)v38 = 67109376;
      v39 = v5;
      v40 = v114;
      v41 = *(_DWORD *)(v27 + v114[6]);
      outlined destroy of Participant(v27, type metadata accessor for ReliableBroadcastPacket.Message);
      LODWORD(aBlock[0]) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 8) = 512;
      v42 = v40[7];
      v5 = v39;
      v43 = *(_WORD *)&v23[v42];
      v13 = v111;
      outlined destroy of Participant((uint64_t)v23, type metadata accessor for ReliableBroadcastPacket.Message);
      LOWORD(aBlock[0]) = v43;
      a1 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1A0DB3000, v35, v36, "RECV MESSAGE (%u, %hu)", (uint8_t *)v38, 0xCu);
      MEMORY[0x1A1B05CC4](v38, -1, -1);
    }
    else
    {
      outlined destroy of Participant((uint64_t)v23, type metadata accessor for ReliableBroadcastPacket.Message);
      outlined destroy of Participant(v27, type metadata accessor for ReliableBroadcastPacket.Message);
    }

    v44 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v44 + 16)
      && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v109 + v107)), (v46 & 1) != 0))
    {
      v47 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 32 * v45);
      v49 = *v47;
      v48 = v47[1];
      v51 = v47[2];
      v50 = v47[3];
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v48 = *(unsigned __int16 *)(v109 + v114[8]);
      swift_beginAccess();
      if (!static ReliableBroadcastLink.maximumTransmissionUnit)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        swift_once();
        goto LABEL_39;
      }
      v51 = *(_QWORD *)(_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SnySiGs5NeverOTg587_s15GroupActivities21ReliableBroadcastLinkC13packetStrides3forSaySnySiGGSi_tFZAFSiXEfU_Si0H10Activities0jkL0CXDXMTTf1cn_nTf4nnd_n(0, v48, static ReliableBroadcastLink.maximumTransmissionUnit, v48)+ 16);
      swift_bridgeObjectRelease();
      v50 = 0;
      v49 = MEMORY[0x1E0DEE9E8];
    }
    v52 = (_QWORD *)swift_allocObject();
    v52[2] = v49;
    v52[3] = v48;
    v52[4] = v51;
    v52[5] = v50;
    v53 = v113;
    outlined init with copy of Participant(v109, (uint64_t)v113, type metadata accessor for ReliableBroadcastPacket.Message);
    v27 = v115;
    v104 = v52 + 2;
    specialized Set._Variant.insert(_:)(v115, v53);
    outlined destroy of Participant(v27, type metadata accessor for ReliableBroadcastPacket.Message);
    v108 = v52;
    if (v52[5])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    v23 = (char *)v108[2];
    a3 = *((_QWORD *)v23 + 2);
    if (a3 == v108[4])
      goto LABEL_40;
    v54 = MEMORY[0x1E0DEE9D8];
    if (!a3)
      break;
    v93 = v5;
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3, 0);
    v5 = specialized Set.startIndex.getter(v23);
    v56 = v55;
    a1 = v57 & 1;
    v110 = v23 + 56;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v23[32])
    {
      if (((*(_QWORD *)&v110[((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8] >> v5) & 1) == 0)
        goto LABEL_46;
      if (*((_DWORD *)v23 + 9) != (_DWORD)v56)
        goto LABEL_47;
      v58 = v115;
      outlined init with copy of Participant(*((_QWORD *)v23 + 6) + *(_QWORD *)(v112 + 72) * v5, v115, type metadata accessor for ReliableBroadcastPacket.Message);
      v59 = v58;
      v60 = (uint64_t)v113;
      outlined init with take of Participant(v59, (uint64_t)v113, type metadata accessor for ReliableBroadcastPacket.Message);
      v61 = *(_WORD *)(v60 + v114[7]);
      outlined destroy of Participant(v60, type metadata accessor for ReliableBroadcastPacket.Message);
      v54 = aBlock[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1);
        v54 = aBlock[0];
      }
      v27 = *(_QWORD *)(v54 + 16);
      v62 = *(_QWORD *)(v54 + 24);
      if (v27 >= v62 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v27 + 1, 1);
        v54 = aBlock[0];
      }
      *(_QWORD *)(v54 + 16) = v27 + 1;
      *(_WORD *)(v54 + 2 * v27 + 32) = v61;
      v63 = specialized _NativeSet.index(after:)(v5, v56, a1 & 1, v23);
      v5 = v63;
      v56 = v64;
      a1 = v65 & 1;
      --a3;
      v13 = v111;
      if (!a3)
      {
        outlined consume of Set<Participant>.Index._Variant(v63, v64, v65 & 1);
        swift_bridgeObjectRelease();
        a1 = v106;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
  }
LABEL_33:
  v66 = specialized Sequence<>.max()(v54);
  if ((v66 & 0x10000) != 0)
    v67 = 0;
  else
    v67 = v66;
  v68 = specialized Set.init<A>(_:)((v67 << 16));
  v48 = specialized _NativeSet.subtracting<A>(_:)(v54, v68);
  v69 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v69);
  v70 = v105;
  *(&v93 - 4) = v109;
  *(&v93 - 3) = v70;
  *(&v93 - 2) = a1;
  specialized Sequence.forEach(_:)((uint64_t (*)(__int16 *))partial apply for closure #2 in closure #1 in ReliableBroadcastLink.receive(_:from:), (uint64_t)(&v93 - 6), v48);
  swift_release();
  v71 = v108[4];
  v72 = __OFSUB__(v71, 1);
  v73 = v71 - 1;
  if (v72)
    goto LABEL_50;
  if (v73 <= (unsigned __int16)v67)
    goto LABEL_40;
  v74 = v115;
  outlined init with copy of Participant(v109, v115, type metadata accessor for ReliableBroadcastPacket.Message);
  v75 = (*(unsigned __int8 *)(v112 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
  v76 = swift_allocObject();
  v77 = v108;
  *(_QWORD *)(v76 + 16) = v108;
  *(_WORD *)(v76 + 24) = v67;
  v78 = v96;
  *(_QWORD *)(v76 + 32) = v70;
  *(_QWORD *)(v76 + 40) = v78;
  outlined init with take of Participant(v74, v76 + v75, type metadata accessor for ReliableBroadcastPacket.Message);
  aBlock[4] = partial apply for closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:);
  aBlock[5] = v76;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_41_0;
  _Block_copy(aBlock);
  v116 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v48 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_beginAccess();
  v77[5] = v48;
  swift_retain();
  swift_release();
  static DispatchTime.now()();
  if (one-time initialization token for proactiveRetransmissionRequestTimerDelay != -1)
    goto LABEL_51;
LABEL_39:
  v79 = v102;
  v80 = __swift_project_value_buffer(v102, (uint64_t)static ReliableBroadcastLink.proactiveRetransmissionRequestTimerDelay);
  swift_beginAccess();
  v81 = v101;
  v82 = v100;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v80, v79);
  v83 = v99;
  MEMORY[0x1A1B046F8](v13, v82);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v79);
  v84 = *(void (**)(char *, uint64_t))(v94 + 8);
  v85 = v103;
  v84(v13, v103);
  MEMORY[0x1A1B04D28](v83, v48);
  swift_release();
  v84(v83, v85);
LABEL_40:
  v86 = *(_DWORD *)(v109 + v107);
  swift_beginAccess();
  v87 = v108[2];
  v88 = v108[3];
  v89 = v108[4];
  v90 = v108[5];
  swift_retain();
  v91 = v106;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v118 = *(_QWORD *)(v91 + 24);
  *(_QWORD *)(v91 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v87, v88, v89, v90, v86, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v91 + 24) = v118;
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v91 + 20) == 2 && !*(_DWORD *)(v91 + 16))
  {
    *(_DWORD *)(v91 + 16) = *(_DWORD *)(v109 + v107);
    *(_BYTE *)(v91 + 20) = 0;
  }
  ReliableBroadcastLink.flush(_:)(v91);
  swift_release();
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint16x8_t v5;
  uint16x8_t *v6;
  unint64_t v7;
  uint16x8_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  __int16 v11;
  unsigned int v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    LOWORD(v2) = 0;
    return (unsigned __int16)v2 | ((v1 == 0) << 16);
  }
  v2 = *(unsigned __int16 *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 0x11)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFF0 | 1;
      v5 = (uint16x8_t)vdupq_n_s16(v2);
      v6 = (uint16x8_t *)(a1 + 50);
      v7 = v3 & 0xFFFFFFFFFFFFFFF0;
      v8 = v5;
      do
      {
        v5 = vmaxq_u16(v5, v6[-1]);
        v8 = vmaxq_u16(v8, *v6);
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
      LOWORD(v2) = vmaxvq_u16(vmaxq_u16(v5, v8));
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFF0))
        return (unsigned __int16)v2 | ((v1 == 0) << 16);
    }
    else
    {
      v4 = 1;
    }
    v9 = v1 - v4;
    v10 = (unsigned __int16 *)(a1 + 2 * v4 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      if ((unsigned __int16)v2 <= v12)
        LOWORD(v2) = v11;
      --v9;
    }
    while (v9);
  }
  return (unsigned __int16)v2 | ((v1 == 0) << 16);
}

uint64_t closure #2 in closure #1 in ReliableBroadcastLink.receive(_:from:)(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  unsigned __int16 v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;

  v27 = type metadata accessor for DispatchTimeInterval();
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v10 = (_QWORD *)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *a1;
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.reliableBroadcast);
  v29 = a2;
  outlined init with copy of Participant(a2, (uint64_t)v13, type metadata accessor for ReliableBroadcastPacket.Message);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (_DWORD *)swift_slowAlloc();
    v26 = a3;
    v18 = v17;
    *v17 = 67109376;
    v24[1] = v17 + 1;
    v25 = a4;
    v19 = *(_DWORD *)&v13[*(int *)(v11 + 24)];
    outlined destroy of Participant((uint64_t)v13, type metadata accessor for ReliableBroadcastPacket.Message);
    v31 = v19;
    a4 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v18 + 4) = 512;
    v20 = v28;
    v30 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v15, v16, "SEND NACK (%u, %hu)", (uint8_t *)v18, 0xCu);
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    outlined destroy of Participant((uint64_t)v13, type metadata accessor for ReliableBroadcastPacket.Message);
    v20 = v28;
  }

  v21 = *(_DWORD *)(v29 + *(int *)(v11 + 24));
  *v10 = 0;
  v22 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF4A0], v27);
  ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)(a4, v21, v20);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v22);
}

uint64_t closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.reliableBroadcast);
  swift_retain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v7, v8))
  {

    v11 = swift_release();
    goto LABEL_7;
  }
  v9 = swift_slowAlloc();
  *(_DWORD *)v9 = 134218240;
  swift_beginAccess();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_release();
  *(_WORD *)(v9 + 12) = 512;
  if (((a2 + 1) & 0x10000) == 0)
  {
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "TIMEOUT (expectedNumberOfPackets: %ld) NACK (%hu)", (uint8_t *)v9, 0x10u);
    MEMORY[0x1A1B05CC4](v9, -1, -1);

LABEL_7:
    MEMORY[0x1E0C80A78](v11);
    return specialized ReliableBroadcastLink.withMutableContext<A>(for:mutator:)(a4, (void (*)(_OWORD *))partial apply for closure #1 in closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:));
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v6 = a4;
  v7 = type metadata accessor for DispatchTimeInterval();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v12 = v6 + 1;
  if ((v12 & 0x10000) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_DWORD *)(a3 + *(int *)(result + 24));
    *v10 = 0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF4A0], v7);
    ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)(a1, v13, v12);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkManager.Attachment>, type metadata accessor for LinkManager.Attachment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncThrowingStream<CKShare, Error>.Continuation>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionJournal.Attachment>, type metadata accessor for GroupSessionJournal.Attachment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<[GroupSessionJournal.Attachment]?, Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<[GroupSessionAttachmentManager.Attachment]?, Never>>);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[ReliableBroadcastPacket]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Topic.PendingMessage>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_34:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_37;
    if (v15 >= a2)
      goto LABEL_34;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_34;
      v16 = v29[v11];
      if (!v16)
        break;
    }
LABEL_21:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    v18 = *(_QWORD *)(v9 + 40);
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v23) = v19;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5)
      goto LABEL_34;
  }
  v17 = v15 + 2;
  if (v17 >= a2)
    goto LABEL_34;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_34;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt16>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v14);
    result = MEMORY[0x1A1B053D0](*(_QWORD *)(v9 + 40), v18, 2);
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_WORD *)(*(_QWORD *)(v9 + 48) + 2 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x1A1B05CDC](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x1A1B05CDC](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v2 = a2;
  v21[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
  {
    v21[0] = a1;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = 0;
      v6 = a2 + 56;
      v7 = *(_QWORD *)(a2 + 40);
      v20 = -1 << *(_BYTE *)(a2 + 32);
      v8 = ~v20;
      while (1)
      {
        v9 = *(unsigned __int16 *)(a1 + 32 + 2 * v5++);
        v10 = MEMORY[0x1A1B053D0](v7, v9, 2);
        v11 = v10 & v8;
        if (((*(_QWORD *)(v6 + (((v10 & (unint64_t)v8) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v10 & v8)) & 1) != 0)
          break;
LABEL_4:
        if (v5 == v4)
          return v2;
      }
      while (*(unsigned __int16 *)(*(_QWORD *)(v2 + 48) + 2 * v11) != (_DWORD)v9)
      {
        v11 = (v11 + 1) & v8;
        if (((*(_QWORD *)(v6 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          goto LABEL_4;
      }
      v21[1] = v5;
      v12 = (unint64_t)(63 - v20) >> 6;
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v12 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v15 = (char *)&v19 - v14;
        memcpy((char *)&v19 - v14, (const void *)(v2 + 56), 8 * v12);
        v16 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v15, v12, v2, v11, v21);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = (void *)swift_slowAlloc();
        memcpy(v17, (const void *)(v2 + 56), 8 * v12);
        v16 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v17, v12, v2, v11, v21);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x1A1B05CC4](v17, -1, -1);
      }
      return v16;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = (unint64_t *)result;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v10 = *a5;
  v9 = a5[1];
  v11 = *(_QWORD *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v6, a2, v8, a3);
  }
  else
  {
    v13 = a3 + 56;
    v14 = ~(-1 << *(_BYTE *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1))
        goto LABEL_19;
      v15 = *(unsigned __int16 *)(v10 + 32 + 2 * v9);
      a5[1] = v9 + 1;
      result = MEMORY[0x1A1B053D0](*(_QWORD *)(a3 + 40), v15, 2);
      v16 = result & v14;
      v17 = (result & (unint64_t)v14) >> 6;
      v18 = 1 << (result & v14);
      if ((v18 & *(_QWORD *)(v13 + 8 * v17)) != 0)
      {
        v19 = *(_QWORD *)(a3 + 48);
        if (*(unsigned __int16 *)(v19 + 2 * v16) == (_DWORD)v15)
        {
LABEL_14:
          v22 = v17;
          v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1))
              goto LABEL_20;
            if (!v8)
              return MEMORY[0x1E0DEE9E8];
          }
        }
        else
        {
          for (i = v16 + 1; ; i = v21 + 1)
          {
            v21 = i & v14;
            if (((*(_QWORD *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(unsigned __int16 *)(v19 + 2 * v21) == (_DWORD)v15)
            {
              v17 = v21 >> 6;
              v18 = 1 << v21;
              goto LABEL_14;
            }
          }
        }
      }
      v9 = a5[1];
      v11 = *(_QWORD *)(v10 + 16);
      if (v9 == v11)
        goto LABEL_2;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SnySiGs5NeverOTg587_s15GroupActivities21ReliableBroadcastLinkC13packetStrides3forSaySnySiGGSi_tFZAFSiXEfU_Si0H10Activities0jkL0CXDXMTTf1cn_nTf4nnd_n(int64_t a1, int64_t a2, uint64_t a3, int64_t a4)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t result;
  uint64_t *v12;
  int64_t v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;

  v6 = a1;
  v7 = 0;
  v8 = a1;
  while (1)
  {
    v9 = v8 <= a2;
    if (a3 > 0)
      v9 = v8 >= a2;
    if (v9)
      break;
    v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10)
      v8 = (v8 >> 63) ^ 0x8000000000000000;
    v10 = __OFADD__(v7++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  v30 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  if (v7)
  {
    result = swift_beginAccess();
    v12 = &lazy protocol witness table cache variable for type String and conformance String;
    v13 = a2;
    while (1)
    {
      v14 = v6 <= v13;
      if (a3 > 0)
        v14 = v6 >= v13;
      if (v14)
        break;
      if (__OFADD__(v6, a3))
        v15 = ((v6 + a3) >> 63) ^ 0x8000000000000000;
      else
        v15 = v6 + a3;
      v16 = v12[16];
      v10 = __OFADD__(v6, v16);
      v17 = v6 + v16;
      if (v10)
        goto LABEL_45;
      if (v17 >= a4)
        v18 = a4;
      else
        v18 = v17;
      v20 = *(_QWORD *)(v30 + 16);
      v19 = *(_QWORD *)(v30 + 24);
      if (v20 >= v19 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v12 = &lazy protocol witness table cache variable for type String and conformance String;
        v13 = a2;
      }
      *(_QWORD *)(v30 + 16) = v20 + 1;
      v21 = v30 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v6;
      *(_QWORD *)(v21 + 40) = v18;
      v6 = v15;
      if (!--v7)
        goto LABEL_27;
    }
    __break(1u);
LABEL_45:
    __break(1u);
  }
  else
  {
    v15 = v6;
    v13 = a2;
LABEL_27:
    v22 = v15 <= v13;
    if (a3 > 0)
      v22 = v15 >= v13;
    if (v22)
      return v30;
    while (1)
    {
      v23 = __OFADD__(v15, a3) ? ((v15 + a3) >> 63) ^ 0x8000000000000000 : v15 + a3;
      result = swift_beginAccess();
      if (__OFADD__(v15, static ReliableBroadcastLink.maximumTransmissionUnit))
        break;
      if (v15 + static ReliableBroadcastLink.maximumTransmissionUnit >= a4)
        v24 = a4;
      else
        v24 = v15 + static ReliableBroadcastLink.maximumTransmissionUnit;
      v26 = *(_QWORD *)(v30 + 16);
      v25 = *(_QWORD *)(v30 + 24);
      if (v26 >= v25 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      *(_QWORD *)(v30 + 16) = v26 + 1;
      v27 = v30 + 16 * v26;
      *(_QWORD *)(v27 + 32) = v15;
      *(_QWORD *)(v27 + 40) = v24;
      v28 = v23 <= a2;
      if (a3 > 0)
        v28 = v23 >= a2;
      v15 = v23;
      if (v28)
        return v30;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of ReliableBroadcastPacket?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReliableBroadcastPacket?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, type metadata singleton initialization cache for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
}

uint64_t outlined init with take of ReliableBroadcastLink.SenderContext.LatestContext(int *a1, uint64_t a2)
{
  int v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 4) = *((_BYTE *)a1 + 4);
  *(_DWORD *)a2 = v2;
  return a2;
}

void partial apply for closure #1 in ReliableBroadcastLink.resume()()
{
  uint64_t v0;

  closure #1 in ReliableBroadcastLink.resume()(v0);
}

uint64_t sub_1A0EABD6C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in ReliableBroadcastLink.invalidate()()
{
  uint64_t v0;

  nw_connection_force_cancel(*(nw_connection_t *)(v0 + 32));
  return ReliableBroadcastLink.handleDisconnect()();
}

uint64_t sub_1A0EABDAC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in ReliableBroadcastLink.receive(_:from:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1A0EABDD8()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

void partial apply for closure #1 in ReliableBroadcastLink.send(_:)()
{
  uint64_t v0;

  ReliableBroadcastLink.encryptAndSend(_:)(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t ObjC metadata update function for ReliableBroadcastLink()
{
  return type metadata accessor for ReliableBroadcastLink(0);
}

uint64_t type metadata accessor for ReliableBroadcastLink(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, type metadata singleton initialization cache for ReliableBroadcastLink);
}

uint64_t type metadata completion function for ReliableBroadcastLink()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReliableBroadcastLink.EncryptionManager();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ReliableBroadcastLink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReliableBroadcastLink.__allocating_init(connection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t destroy for ReliableBroadcastLink.SenderContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReliableBroadcastLink.SenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReliableBroadcastLink.SenderContext(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  v5 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ReliableBroadcastLink.SenderContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReliableBroadcastLink.SenderContext()
{
  return &type metadata for ReliableBroadcastLink.SenderContext;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastLink.SenderContext.LatestContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastLink.SenderContext.LatestContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ReliableBroadcastLink.SenderContext.LatestContext(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ReliableBroadcastLink.SenderContext.LatestContext(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastLink.SenderContext.LatestContext()
{
  return &type metadata for ReliableBroadcastLink.SenderContext.LatestContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20);
    v8 = (uint64_t *)((char *)v4 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v29 = *v9;
      v28 = v9[1];
      outlined copy of Data._Representation(v29, v28);
      *v8 = v29;
      v8[1] = v28;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)v8 = *(_BYTE *)v9;
      v12 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v13 = v12[5];
      v14 = (char *)v8 + v13;
      v15 = (char *)v9 + v13;
      v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v18 = (uint64_t *)&v14[v17];
      v19 = (uint64_t *)&v15[v17];
      v20 = *v19;
      v21 = v19[1];
      outlined copy of Data._Representation(*v19, v21);
      *v18 = v20;
      v18[1] = v21;
      *(_DWORD *)((char *)v8 + v12[6]) = *(_DWORD *)((char *)v9 + v12[6]);
      *(_WORD *)((char *)v8 + v12[7]) = *(_WORD *)((char *)v9 + v12[7]);
      *(_WORD *)((char *)v8 + v12[8]) = *(_WORD *)((char *)v9 + v12[8]);
      v22 = v12[9];
      v23 = (uint64_t *)((char *)v8 + v22);
      v24 = (uint64_t *)((char *)v9 + v22);
      v25 = *v24;
      v26 = v24[1];
      outlined copy of Data._Representation(*v24, v26);
      *v23 = v25;
      v23[1] = v26;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(uint64_t a1)
{
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1 + *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20);
  type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
    goto LABEL_4;
  if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for ReliableBroadcastPacket.Message(0);
    v4 = v1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(v6 + 20)), *(_QWORD *)(v4 + *(int *)(v6 + 20) + 8));
    v1 += *(int *)(v3 + 36);
LABEL_4:
    outlined consume of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  }
  return swift_release();
}

_QWORD *initializeWithCopy for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v27 = *v8;
    v26 = v8[1];
    outlined copy of Data._Representation(v27, v26);
    *v7 = v27;
    v7[1] = v26;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)v7 = *(_BYTE *)v8;
    v11 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v12 = v11[5];
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v15 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
    v17 = (uint64_t *)&v13[v16];
    v18 = (uint64_t *)&v14[v16];
    v19 = *v18;
    v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    *(_DWORD *)((char *)v7 + v11[6]) = *(_DWORD *)((char *)v8 + v11[6]);
    *(_WORD *)((char *)v7 + v11[7]) = *(_WORD *)((char *)v8 + v11[7]);
    *(_WORD *)((char *)v7 + v11[8]) = *(_WORD *)((char *)v8 + v11[8]);
    v21 = v11[9];
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)v8 + v21);
    v24 = *v23;
    v25 = v23[1];
    outlined copy of Data._Representation(*v23, v25);
    *v22 = v24;
    v22[1] = v25;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = type metadata accessor for ReliableBroadcastPacket(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 20);
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    outlined destroy of Participant((uint64_t)a1 + v7, type metadata accessor for ReliableBroadcastPacket.PacketType);
    v10 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v28 = *v9;
      v27 = v9[1];
      outlined copy of Data._Representation(v28, v27);
      *v8 = v28;
      v8[1] = v27;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)v8 = *(_BYTE *)v9;
      v12 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v13 = v12[5];
      v14 = (char *)v8 + v13;
      v15 = (char *)v9 + v13;
      v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v18 = (uint64_t *)&v14[v17];
      v19 = (uint64_t *)&v15[v17];
      v20 = *v19;
      v21 = v19[1];
      outlined copy of Data._Representation(*v19, v21);
      *v18 = v20;
      v18[1] = v21;
      *(_DWORD *)((char *)v8 + v12[6]) = *(_DWORD *)((char *)v9 + v12[6]);
      *(_WORD *)((char *)v8 + v12[7]) = *(_WORD *)((char *)v9 + v12[7]);
      *(_WORD *)((char *)v8 + v12[8]) = *(_WORD *)((char *)v9 + v12[8]);
      v22 = v12[9];
      v23 = (uint64_t *)((char *)v8 + v22);
      v24 = (uint64_t *)((char *)v9 + v22);
      v25 = *v24;
      v26 = v24[1];
      outlined copy of Data._Representation(*v24, v26);
      *v23 = v25;
      v23[1] = v26;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v7 = *v8;
    v10 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v11 = v10[5];
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    *(_OWORD *)&v12[*(int *)(v15 + 20)] = *(_OWORD *)&v13[*(int *)(v15 + 20)];
    *(_DWORD *)&v7[v10[6]] = *(_DWORD *)&v8[v10[6]];
    *(_WORD *)&v7[v10[7]] = *(_WORD *)&v8[v10[7]];
    *(_WORD *)&v7[v10[8]] = *(_WORD *)&v8[v10[8]];
    *(_OWORD *)&v7[v10[9]] = *(_OWORD *)&v8[v10[9]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = type metadata accessor for ReliableBroadcastPacket(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of Participant((uint64_t)a1 + v7, type metadata accessor for ReliableBroadcastPacket.PacketType);
    v10 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v8 = *v9;
      v11 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v12 = v11[5];
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
      *(_OWORD *)&v13[*(int *)(v16 + 20)] = *(_OWORD *)&v14[*(int *)(v16 + 20)];
      *(_DWORD *)&v8[v11[6]] = *(_DWORD *)&v9[v11[6]];
      *(_WORD *)&v8[v11[7]] = *(_WORD *)&v9[v11[7]];
      *(_WORD *)&v8[v11[8]] = *(_WORD *)&v9[v11[8]];
      *(_OWORD *)&v8[v11[9]] = *(_OWORD *)&v9[v11[9]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EACA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ReliableBroadcastPacket(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EACAC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ReliableBroadcastPacket(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReliableBroadcastPacket(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ReliableBroadcastLink.SenderContext.PendingMessage()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ReliableBroadcastLink.SenderContext.PendingMessage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ReliableBroadcastLink.SenderContext.PendingMessage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReliableBroadcastLink.SenderContext.PendingMessage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ReliableBroadcastLink.SenderContext.PendingMessage()
{
  return &type metadata for ReliableBroadcastLink.SenderContext.PendingMessage;
}

_QWORD *initializeBufferWithCopyOfBuffer for ReliableBroadcastLink.TransmissionBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReliableBroadcastLink.TransmissionBuffer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for ReliableBroadcastLink.TransmissionBuffer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ReliableBroadcastLink.TransmissionBuffer()
{
  return &type metadata for ReliableBroadcastLink.TransmissionBuffer;
}

uint64_t sub_1A0EACDAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s10Foundation4DataVs6UInt64VytIegnnr_AcEIeggy_TRTA_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD v7[2];

  v4 = *(uint64_t (**)(_QWORD *, uint64_t *))(v3 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v6 = a3;
  return v4(v7, &v6);
}

uint64_t _s10Foundation4DataVs6UInt64VIeggy_AcEytIegnnr_TRTA_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], *a2);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReliableBroadcastPacket]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1A0EAD350()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 != -1)
    return ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)(*(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32), v1 + 1);
  __break(1u);
  return result;
}

uint64_t sub_1A0EAD3B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReliableBroadcastLink.requestRetransmission(from:for:packetNumber:delay:)()
{
  uint64_t v0;

  return ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)(*(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32), 0);
}

uint64_t sub_1A0EAD408()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ReliableBroadcastLink.receive(_:from:)(unsigned __int16 *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in ReliableBroadcastLink.receive(_:from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_1A0EAD450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  swift_release();
  swift_release();
  v4 = v0 + v3;
  v5 = v0 + v3 + *(int *)(v1 + 20);
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  outlined consume of Data._Representation(*(_QWORD *)(v5 + *(int *)(v7 + 20)), *(_QWORD *)(v5 + *(int *)(v7 + 20) + 8));
  outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(v1 + 36)), *(_QWORD *)(v4 + *(int *)(v1 + 36) + 8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)()
{
  uint64_t v0;

  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)(*(_QWORD *)(v0 + 16), *(_WORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #3 in closure #1 in ReliableBroadcastLink.receive(_:from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_WORD *)(v1 + 32));
}

uint64_t outlined copy of ReliableBroadcastLink.SenderContext.PendingMessage?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ReliableBroadcastLink.SenderContext.PendingMessage?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A0EAD5BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ReliableBroadcastLink.receive(_:from:)()
{
  uint64_t v0;

  return ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)(*(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int16 *)(v0 + 44) << 32), 0);
}

uint64_t sub_1A0EAD614()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ReliableBroadcastLink.resume()(int a1, uint64_t a2)
{
  return closure #1 in closure #1 in ReliableBroadcastLink.resume()(a1, a2);
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ReliableBroadcastLink.handleConnect()()
{
  return closure #1 in ReliableBroadcastLink.handleConnect()();
}

void partial apply for closure #1 in ReliableBroadcastLink.scheduleMessageReceive()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in ReliableBroadcastLink.scheduleMessageReceive()(a1, a2, a3, a4);
}

uint64_t sub_1A0EAD690()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReliableBroadcastLink._receive(_:)()
{
  uint64_t v0;

  return closure #1 in ReliableBroadcastLink._receive(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A0EAD6C8()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

void partial apply for closure #1 in ReliableBroadcastLink._send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, NSObject *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  closure #1 in ReliableBroadcastLink._send(_:)(a1, *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

id LinkManager.__allocating_init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  objc_class *v7;
  char *v15;

  v15 = (char *)objc_allocWithZone(v7);
  swift_getObjectType();
  return specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, v15);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int16 v5;
  uint64_t v6;

  v6 = Set.init(minimumCapacity:)();
  v2 = a1;
  while (1)
  {
    v3 = (unsigned __int16)v2;
    specialized Set._Variant.insert(_:)(&v5, v2);
    if (v3 == WORD1(a1))
      break;
    v2 = (v3 + 1);
    if ((v2 & 0x10000) != 0)
    {
      __break(1u);
      return v6;
    }
  }
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = type metadata accessor for Participant();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v28 = (uint64_t)&v28 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v28 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Participant and conformance Participant, v12, (uint64_t)&protocol conformance descriptor for Participant);
  v32 = v2;
  v13 = Set.init(minimumCapacity:)();
  v30 = v11;
  if (v11)
  {
    v14 = 0;
    v29 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = *(_QWORD *)(v3 + 72);
    do
    {
      v31 = v14;
      outlined init with copy of Participant(v29 + v15 * v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      v18 = v32;
      v19 = &v10[*(int *)(v32 + 20)];
      String.hash(into:)();
      v20 = *(int *)(v18 + 24);
      Hasher._combine(_:)(*(_QWORD *)&v10[v20]);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v13 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = ~v22;
        while (1)
        {
          outlined init with copy of Participant(*(_QWORD *)(v13 + 48) + v23 * v15, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          if ((static UUID.== infix(_:_:)() & 1) != 0)
          {
            v25 = &v6[*(int *)(v32 + 20)];
            v26 = *(_QWORD *)v25 == *(_QWORD *)v19 && *((_QWORD *)v25 + 1) == *((_QWORD *)v19 + 1);
            if ((v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && *(_QWORD *)&v6[*(int *)(v32 + 24)] == *(_QWORD *)&v10[v20])
            {
              break;
            }
          }
          outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v23 = (v23 + 1) & v24;
          if (((*(_QWORD *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_3;
        }
        outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = v28;
        outlined init with copy of Participant((uint64_t)v10, v28, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v33 = v13;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v17, v23, isUniquelyReferenced_nonNull_native);
        v13 = v33;
      }
      swift_bridgeObjectRelease();
      v14 = v31 + 1;
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    }
    while (v14 != v30);
  }
  return v13;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v3, MEMORY[0x1E0CB09C8]);
  v19 = Set.init(minimumCapacity:)();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v28 = (uint64_t)&v28 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v28 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type PresenceSessionInfo.Participant and conformance PresenceSessionInfo.Participant, v12, (uint64_t)&protocol conformance descriptor for PresenceSessionInfo.Participant);
  v32 = v2;
  v13 = Set.init(minimumCapacity:)();
  v30 = v11;
  if (v11)
  {
    v14 = 0;
    v29 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = *(_QWORD *)(v3 + 72);
    do
    {
      v31 = v14;
      outlined init with copy of Participant(v29 + v15 * v14, (uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      v18 = v32;
      v19 = &v10[*(int *)(v32 + 20)];
      String.hash(into:)();
      v20 = *(int *)(v18 + 24);
      Hasher._combine(_:)(v10[v20]);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v13 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = ~v22;
        while (1)
        {
          outlined init with copy of Participant(*(_QWORD *)(v13 + 48) + v23 * v15, (uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
          if ((static UUID.== infix(_:_:)() & 1) != 0)
          {
            v25 = &v6[*(int *)(v32 + 20)];
            v26 = *(_QWORD *)v25 == *(_QWORD *)v19 && *((_QWORD *)v25 + 1) == *((_QWORD *)v19 + 1);
            if ((v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v6[*(int *)(v32 + 24)] == v10[v20])
              break;
          }
          outlined destroy of Participant((uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
          v23 = (v23 + 1) & v24;
          if (((*(_QWORD *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_3;
        }
        outlined destroy of Participant((uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = v28;
        outlined init with copy of Participant((uint64_t)v10, v28, type metadata accessor for PresenceSessionInfo.Participant);
        v33 = v13;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v17, v23, isUniquelyReferenced_nonNull_native);
        v13 = v33;
      }
      swift_bridgeObjectRelease();
      v14 = v31 + 1;
      outlined destroy of Participant((uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
    }
    while (v14 != v30);
  }
  return v13;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, v10, MEMORY[0x1E0DF0358]);
  result = Set.init(minimumCapacity:)();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

void LinkManager.sendData(_:to:reliability:completion:)(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class v31;
  void *v32;
  id v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Class isa;
  void *v53;
  id v54;
  int64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v69 = a1;
  v12 = type metadata accessor for Participant();
  v74 = *(_QWORD *)(v12 - 8);
  v75 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v72 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v73 = (uint64_t)&v65 - v15;
  v16 = *a3;
  v17 = *a4;
  if ((TUSimulatedModeEnabled() & 1) != 0)
  {
    ((void (*)(_QWORD))a5)(0);
    return;
  }
  if (v16)
  {
    v71 = v16;
    if ((v17 & 1) == 0)
    {
      v67 = a2;
      v68 = v6;
      v38 = *(_QWORD *)(v16 + 16);
      v39 = MEMORY[0x1E0DEE9D8];
      if (v38)
      {
        v65 = a5;
        v66 = a6;
        v76 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        a5 = specialized Set.startIndex.getter(v16);
        v41 = v40;
        v43 = v42 & 1;
        v70 = v16 + 56;
        v44 = v75;
        while ((a5 & 0x8000000000000000) == 0 && a5 < 1 << *(_BYTE *)(v16 + 32))
        {
          if (((*(_QWORD *)(v70 + (((unint64_t)a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
            goto LABEL_34;
          if (*(_DWORD *)(v16 + 36) != v41)
            goto LABEL_35;
          v45 = v73;
          outlined init with copy of Participant(*(_QWORD *)(v16 + 48) + *(_QWORD *)(v74 + 72) * a5, v73, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v46 = v45;
          v47 = v72;
          outlined init with take of Participant(v46, v72, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v48 = (uint64_t *)(v47 + *(int *)(v44 + 20));
          v50 = *v48;
          v49 = v48[1];
          v51 = objc_allocWithZone(MEMORY[0x1E0D15360]);
          swift_bridgeObjectRetain();
          isa = UUID._bridgeToObjectiveC()().super.isa;
          v53 = (void *)MEMORY[0x1A1B048B4](v50, v49);
          swift_bridgeObjectRelease();
          v54 = objc_msgSend(v51, sel_initWithUUID_accountIdentifier_, isa, v53);

          objc_msgSend(v54, sel__setParticipantIdentifier_, *(_QWORD *)(v47 + *(int *)(v44 + 24)));
          outlined destroy of Participant(v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v16 = v71;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v55 = specialized _NativeSet.index(after:)(a5, v41, v43 & 1, v16);
          a5 = v55;
          v41 = v56;
          v43 = v57 & 1;
          if (!--v38)
          {
            outlined consume of Set<Participant>.Index._Variant(v55, v56, v57 & 1);
            v39 = v76;
            a5 = v65;
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_26:
      v58 = specialized Set.init<A>(_:)(v39, &lazy cache variable for type metadata for CPParticipant, 0x1E0D15360, &lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
      swift_bridgeObjectRelease();
      LinkManager.sendDataReliably(_:to:completion:)(v69, v67, v58, (void (*)(void))a5);
LABEL_27:
      swift_bridgeObjectRelease();
      return;
    }
    if ((objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled) & 1) != 0)
    {
      v67 = a2;
      v68 = v6;
      v18 = *(_QWORD *)(v16 + 16);
      v19 = MEMORY[0x1E0DEE9D8];
      if (v18)
      {
        v65 = a5;
        v66 = a6;
        v76 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v20 = specialized Set.startIndex.getter(v16);
        a5 = v21;
        v23 = v22 & 1;
        v70 = v16 + 56;
        v24 = v72;
        v25 = v75;
        while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << *(_BYTE *)(v16 + 32))
        {
          if (((*(_QWORD *)(v70 + (((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
            goto LABEL_37;
          if (*(_DWORD *)(v16 + 36) != (_DWORD)a5)
            goto LABEL_38;
          v26 = v73;
          outlined init with copy of Participant(*(_QWORD *)(v16 + 48) + *(_QWORD *)(v74 + 72) * v20, v73, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          outlined init with take of Participant(v26, v24, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v27 = (uint64_t *)(v24 + *(int *)(v25 + 20));
          v28 = *v27;
          v29 = v27[1];
          v30 = objc_allocWithZone(MEMORY[0x1E0D15360]);
          swift_bridgeObjectRetain();
          v31 = UUID._bridgeToObjectiveC()().super.isa;
          v32 = (void *)MEMORY[0x1A1B048B4](v28, v29);
          swift_bridgeObjectRelease();
          v33 = objc_msgSend(v30, sel_initWithUUID_accountIdentifier_, v31, v32);

          objc_msgSend(v33, sel__setParticipantIdentifier_, *(_QWORD *)(v24 + *(int *)(v25 + 24)));
          outlined destroy of Participant(v24, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v16 = v71;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v34 = specialized _NativeSet.index(after:)(v20, a5, v23 & 1, v16);
          v20 = v34;
          a5 = v35;
          v23 = v36 & 1;
          if (!--v18)
          {
            outlined consume of Set<Participant>.Index._Variant(v34, v35, v36 & 1);
            v19 = v76;
            a5 = v65;
            goto LABEL_14;
          }
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_14:
      v37 = specialized Set.init<A>(_:)(v19, &lazy cache variable for type metadata for CPParticipant, 0x1E0D15360, &lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
      swift_bridgeObjectRelease();
      LinkManager.sendDataUnreliably(_:to:completion:)(v69, v67, v37, (void (*)(void))a5);
      goto LABEL_27;
    }
  }
  else
  {
    if ((v17 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6
                                                                                       + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                                                         + 608))(v69, a2, 0, a5, a6);
      return;
    }
    if ((objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled) & 1) != 0)
    {
      LinkManager.sendDataUnreliably(_:to:completion:)(v69, a2, 0, (void (*)(void))a5);
      return;
    }
  }
  if (one-time initialization token for default != -1)
LABEL_39:
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Log.default);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_1A0DB3000, v60, v61, "Dropping message since unreliable messaging is disabled", v62, 2u);
    MEMORY[0x1A1B05CC4](v62, -1, -1);
  }

  lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
  v63 = (void *)swift_allocError();
  *v64 = 1;
  ((void (*)(void))a5)();

}

uint64_t LinkManager.removeAttachment(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LinkManager.removeAttachment(id:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 32)) + 0xF8))();
  *(_QWORD *)(v0 + 64) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = LinkManager.removeAttachment(id:);
    return AttachmentLedgerTopic.remove(id:)(*(_QWORD *)(v0 + 24));
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 40);
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    v11 = os_log_type_enabled(v9, v10);
    v13 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 40);
    if (v11)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20 = v19;
      *(_DWORD *)v15 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl(&dword_1A0DB3000, v9, v10, "Dropping removal request %s due to not having a topic yet.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v19, -1, -1);
      MEMORY[0x1A1B05CC4](v15, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkManager.uploadAttachment(id:file:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  v5[24] = swift_task_alloc();
  v6 = type metadata accessor for LinkManager.Attachment(0);
  v5[25] = v6;
  v5[26] = *(_QWORD *)(v6 - 8);
  v5[27] = swift_task_alloc();
  v7 = type metadata accessor for Date();
  v5[28] = v7;
  v5[29] = *(_QWORD *)(v7 - 8);
  v5[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[31] = swift_task_alloc();
  v8 = type metadata accessor for TaskPriority();
  v5[32] = v8;
  v5[33] = *(_QWORD *)(v8 - 8);
  v5[34] = swift_task_alloc();
  v9 = type metadata accessor for URL();
  v5[35] = v9;
  v5[36] = *(_QWORD *)(v9 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  v5[39] = v10;
  v5[40] = *(_QWORD *)(v10 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LinkManager.uploadAttachment(id:file:developerMetadata:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t type;
  NSObject *log;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = v0[19];
  v2 = v0[44];
  v3 = v0[39];
  v4 = v0[40];
  v41 = v0[38];
  v6 = v0[35];
  v5 = v0[36];
  v7 = v0[20];
  v8 = type metadata accessor for Logger();
  v0[45] = __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[46] = v9;
  v9(v2, v1, v3);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[47] = v10;
  v10(v41, v7, v6);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[44];
  v16 = v0[39];
  v15 = v0[40];
  v17 = v0[38];
  v19 = v0[35];
  v18 = v0[36];
  if (v13)
  {
    v37 = v0[33];
    v35 = v0[34];
    v36 = v0[32];
    log = v11;
    v20 = swift_slowAlloc();
    v40 = swift_slowAlloc();
    v42 = v40;
    *(_DWORD *)v20 = 136315650;
    type = v12;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v23(v14, v16);
    *(_WORD *)(v20 + 12) = 2080;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v20 + 22) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, log, type, "Received upload request: %s, file: %s. Waiting for topic with priority: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v40, -1, -1);
    MEMORY[0x1A1B05CC4](v20, -1, -1);

  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v23(v0[44], v0[39]);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);

  }
  v0[48] = v23;
  v29 = v0[31];
  v30 = (void *)v0[23];
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0[33] + 56))(v29, 1, 1, v0[32]);
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = v30;
  v32 = v30;
  v0[49] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(v29, (uint64_t)&async function pointer to partial apply for closure #1 in LinkManager.fetchAttachmentLedgerTopic(), (uint64_t)v31);
  v33 = (_QWORD *)swift_task_alloc();
  v0[50] = v33;
  type metadata accessor for AttachmentLedgerTopic(0);
  v0[51] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v33 = v0;
  v33[1] = LinkManager.uploadAttachment(id:file:developerMetadata:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(_QWORD *);
  void (*v27)(_QWORD *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  v2 = v0[43];
  v3 = v0[39];
  v4 = v0[19];
  v39 = v0[12];
  v0[53] = v39;
  v1(v2, v4, v3);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v41 = (void (*)(uint64_t, uint64_t))v0[48];
    v7 = v0[43];
    v8 = v0[39];
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v43 = v10;
    *(_DWORD *)v9 = 136315138;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v7, v8);
    _os_log_impl(&dword_1A0DB3000, v5, v6, "Got topic for upload request: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    ((void (*)(_QWORD, _QWORD))v0[48])(v0[43], v0[39]);
  }

  v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[47];
  v15 = v0[39];
  v38 = v0[37];
  v16 = v0[35];
  v17 = v0[27];
  v36 = v0[42];
  v37 = v0[26];
  v18 = (int *)v0[25];
  v35 = v0[24];
  v32 = (_QWORD *)v0[23];
  v42 = v0[22];
  v19 = v0[20];
  v40 = v0[21];
  v20 = v0[19];
  v33 = v20;
  static Date.now.getter();
  v13(v17, v20, v15);
  v21 = v13;
  v34 = v13;
  Date.timeIntervalSince1970.getter();
  v23 = v22;
  v14(v17 + v18[7], v19, v16);
  *(_QWORD *)(v17 + v18[5]) = v23;
  v24 = v17 + v18[6];
  *(_QWORD *)v24 = v40;
  *(_QWORD *)(v24 + 8) = v42;
  *(_BYTE *)(v24 + 16) = 1;
  *(_QWORD *)(v17 + v18[8]) = 2;
  v25 = *(void **)((char *)v32 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  v0[54] = v25;
  outlined copy of Data?(v40, v42);
  objc_msgSend(v25, sel_lock);
  v21(v36, v33, v15);
  outlined init with copy of Participant(v17, v35, type metadata accessor for LinkManager.Attachment);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v37 + 56))(v35, 0, 1, v18);
  v26 = *(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v32) + 0x128);
  v0[55] = v26;
  v27 = (void (*)(_QWORD *, _QWORD))v26(v0 + 6);
  specialized Dictionary.subscript.setter(v35, v36);
  v27(v0 + 6, 0);
  objc_msgSend(v25, sel_unlock);
  v14(v38, v19, v16);
  v34(v36, v33, v15);
  type metadata accessor for AssetManager();
  outlined copy of Data?(v40, v42);
  swift_retain();
  v28 = static AssetManager.shared.getter();
  type metadata accessor for AttachmentUploadTask();
  v29 = swift_allocObject();
  v0[56] = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(v39, v38, v40, v42, v36, v28, v29);
  swift_release();
  v30 = (_QWORD *)swift_task_alloc();
  v0[57] = v30;
  *v30 = v0;
  v30[1] = LinkManager.uploadAttachment(id:file:developerMetadata:);
  return AttachmentUploadTask.start()();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Participant(v4, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD);
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v1 = *(void **)(v0 + 464);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = v1;
  if (swift_dynamicCast() && *(_BYTE *)(v0 + 472) == 1)
  {
    v3 = *(_QWORD *)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 224);

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v7 = 1;
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    outlined destroy of Participant(v6, type metadata accessor for LinkManager.Attachment);

  }
  else
  {
    v8 = *(void **)(v0 + 464);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
    v10 = *(_QWORD *)(v0 + 328);
    v11 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 152);

    v9(v10, v12, v11);
    v13 = v8;
    v14 = v8;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(void **)(v0 + 464);
    v39 = v0 + 16;
    if (v17)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
      v19 = *(_QWORD *)(v0 + 328);
      v20 = *(_QWORD *)(v0 + 312);
      v21 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v40[0] = v36;
      *(_DWORD *)v21 = 136315394;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v33(v19, v20);
      *(_WORD *)(v21 + 12) = 2080;
      *(_QWORD *)(v0 + 112) = v18;
      v24 = v18;
      v25 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v15, v16, "Failed to upload attachment %s, error: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v36, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));

    }
    v27 = *(uint64_t (**)(uint64_t))(v0 + 440);
    v28 = *(void **)(v0 + 432);
    v34 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(v0 + 224);
    v37 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 216);
    v29 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 152);
    objc_msgSend(v28, sel_lock);
    v31 = (void (*)(uint64_t, _QWORD))v27(v39);
    specialized Dictionary._Variant.removeValue(forKey:)(v30, v29);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v29, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    v31(v39, 0);
    objc_msgSend(v28, sel_unlock);
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v35);
    outlined destroy of Participant(v38, type metadata accessor for LinkManager.Attachment);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LinkManager.fetchAttachment(attachmentID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 40)) + 0xF8))();
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    v2 = v1;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = LinkManager.fetchAttachment(attachmentID:);
    return LinkManager.fetchAttachment(attachmentID:generator:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)&async function pointer to partial apply for closure #1 in LinkManager.fetchAttachment(attachmentID:), v2);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    v12 = os_log_type_enabled(v10, v11);
    v14 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 48);
    if (v12)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Dropping downloadRequest %s due to not having a topic yet.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      MEMORY[0x1A1B05CC4](v16, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v20 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(double))(v0 + 8))(*(double *)(v0 + 96));
}

{
  uint64_t v0;

  swift_release_n();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkManager.fetchAttachment(attachmentID:)(double a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(double *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t LinkManager.fetchAttachmentMetadata(attachmentID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for UUID();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v4 = type metadata accessor for Attachment.Metadata();
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v5 = type metadata accessor for LinkManager.Attachment(0);
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LinkManager.fetchAttachmentMetadata(attachmentID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51[2];

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 56)) + 0xF8))();
  *(_QWORD *)(v0 + 176) = v1;
  if (!v1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 48);
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v9, v8);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    if (v13)
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v51[0] = v18;
      *(_DWORD *)v17 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl(&dword_1A0DB3000, v11, v12, "Dropping downloadRequest %s due to not having a topic yet.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v18, -1, -1);
      MEMORY[0x1A1B05CC4](v17, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v15 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v40 = 0;
    swift_willThrow();
    goto LABEL_16;
  }
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD **)(v0 + 56);
  v5 = *(void **)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v5, sel_lock);
  closure #1 in LinkManager.fetchAttachmentMetadata(attachmentID:)(v4, v3, v2);
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 128);
  objc_msgSend(v5, sel_unlock);
  v23 = v21 + *(int *)(v22 + 24);
  v24 = *(_QWORD *)v23;
  *(_QWORD *)(v0 + 184) = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v0 + 192) = v25;
  if ((*(_BYTE *)(v23 + 16) & 1) != 0)
  {
    if (v25 >> 60 == 15)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v27 = *(_QWORD *)(v0 + 160);
      v26 = *(_QWORD *)(v0 + 168);
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      outlined init with copy of Participant(v26, v27, type metadata accessor for LinkManager.Attachment);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      v31 = os_log_type_enabled(v29, v30);
      v32 = *(_QWORD *)(v0 + 160);
      if (v31)
      {
        v34 = *(_QWORD *)(v0 + 128);
        v33 = *(_QWORD *)(v0 + 136);
        v35 = *(_QWORD *)(v0 + 88);
        v36 = *(_QWORD *)(v0 + 96);
        v37 = (uint8_t *)swift_slowAlloc();
        v50 = swift_slowAlloc();
        v51[0] = v50;
        *(_DWORD *)v37 = 136315138;
        outlined init with copy of Participant(v32, v36, type metadata accessor for LinkManager.Attachment);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v34);
        outlined init with copy of LinkManager.Attachment?(v36, v35);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v35, 1, v34) == 1)
        {
          v38 = 0xE300000000000000;
          v39 = 7104878;
        }
        else
        {
          v45 = *(_QWORD *)(v0 + 144);
          v44 = *(_QWORD *)(v0 + 152);
          outlined init with take of Participant(*(_QWORD *)(v0 + 88), v44, type metadata accessor for LinkManager.Attachment);
          outlined init with copy of Participant(v44, v45, type metadata accessor for LinkManager.Attachment);
          v39 = String.init<A>(reflecting:)();
          v38 = v46;
          outlined destroy of Participant(v44, type metadata accessor for LinkManager.Attachment);
        }
        v47 = *(_QWORD *)(v0 + 160);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 96), (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
        *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of Participant(v47, type metadata accessor for LinkManager.Attachment);
        _os_log_impl(&dword_1A0DB3000, v29, v30, "Requested to fetch metadata but local attachment %s doesn't have any", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v50, -1, -1);
        MEMORY[0x1A1B05CC4](v37, -1, -1);
      }
      else
      {
        outlined destroy of Participant(*(_QWORD *)(v0 + 160), type metadata accessor for LinkManager.Attachment);
      }

      v48 = *(_QWORD *)(v0 + 168);
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      swift_allocError();
      *v49 = 3;
      swift_willThrow();
      swift_release();
      outlined destroy of Participant(v48, type metadata accessor for LinkManager.Attachment);
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v43 = *(_QWORD *)(v0 + 168);
    outlined copy of Data?(v24, v25);
    outlined copy of Data._Representation(v24, v25);
    outlined destroy of Participant(v43, type metadata accessor for LinkManager.Attachment);
    swift_release();
    outlined consume of LinkManager.Attachment.Source(v24, v25, 1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v24, v25);
  }
  else
  {
    swift_retain();
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v42;
    *v42 = v0;
    v42[1] = LinkManager.fetchAttachmentMetadata(attachmentID:);
    return Attachment.metadata.getter();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = Attachment.Metadata.developerMetadata.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    swift_retain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    if (v10)
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v24 = v14;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)(v0 + 32) = v12;
      type metadata accessor for Attachment();
      swift_retain();
      v15 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
      _os_log_impl(&dword_1A0DB3000, v8, v9, "Requested to fetch metadata but attachment %s doesn't have any", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v14, -1, -1);
      MEMORY[0x1A1B05CC4](v13, -1, -1);
    }
    else
    {
      outlined consume of LinkManager.Attachment.Source(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), 0);
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
    }

    v21 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 168);
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *v23 = 3;
    swift_willThrow();
    swift_release();
    outlined consume of LinkManager.Attachment.Source(v21, v20, 0);
    outlined destroy of Participant(v22, type metadata accessor for LinkManager.Attachment);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 192);
    outlined destroy of Participant(*(_QWORD *)(v0 + 168), type metadata accessor for LinkManager.Attachment);
    outlined consume of LinkManager.Attachment.Source(v18, v17, 0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v4, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  outlined consume of LinkManager.Attachment.Source(v1, v2, 0);
  outlined destroy of Participant(v3, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  type metadata accessor for AttachmentLedgerTopic(0);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities35PluginAttachmentLedgerTopicProvider_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LinkManager.Attachment(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  }
  else
  {
    outlined init with take of Participant(a1, (uint64_t)v11, type metadata accessor for LinkManager.Attachment);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0xFFFFFFFFFFFFLL);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v2;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      outlined init with take of Participant(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest?);
  }
  else
  {
    outlined init with take of Participant(a1, (uint64_t)v12, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2 & 0xFFFFFFFFFFFFLL, v19);
    *v2 = v22;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  BOOL v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  if (*a1)
    v4 = 0;
  else
    v4 = a1[1] == 1;
  if (v4)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)a1, (uint64_t *)&demangling cache variable for type metadata for GroupSessionTable.Storage?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v10);
    v8 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for GroupSessionTable.Storage?);
  }
  else
  {
    outlined init with take of GroupSessionTable.Storage((uint64_t)a1, (uint64_t)v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v10, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v9;
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _BYTE v7[48];

  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
  }
  else
  {
    outlined init with take of TopicManager.ConversationClient.Service(a1, (uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (void (*)(unint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

void LinkManager.attachmentLedgerTopic.willset(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain_n();
  v8 = v1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v20 = v4;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v23[0] = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0xF8))();
    v21 = v3;
    if (v13)
    {
      v22 = v13;
      type metadata accessor for AttachmentLedgerTopic(0);
      v14 = String.init<A>(reflecting:)();
      v16 = v15;
    }
    else
    {
      v16 = 0xE300000000000000;
      v14 = 7104878;
    }
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2080;
    if (a1)
    {
      v22 = a1;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      v17 = String.init<A>(reflecting:)();
      v19 = v18;
    }
    else
    {
      v19 = 0xE300000000000000;
      v17 = 7104878;
    }
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Updating AttachmentLedgerTopic from %s to: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

    v4 = v20;
    v3 = v21;
    if (a1)
      goto LABEL_13;
  }
  else
  {

    swift_release_n();
    if (a1)
    {
LABEL_13:
      v23[0] = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 392))();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>, MEMORY[0x1E0C95FB8]);
      Publisher.compactMap<A>(_:)();
      swift_release();
      swift_release();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]>, MEMORY[0x1E0C95708]);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
  }
}

void closure #1 in LinkManager.attachmentLedgerTopic.willset(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess();
  v6 = (void *)MEMORY[0x1A1B05DC0](v5);
  if (v6)
  {
    v7 = v6;
    v8 = specialized Sequence.compactMap<A>(_:)(v4, v7);

  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = type metadata accessor for Attachment();
      v15 = swift_bridgeObjectRetain();
      v16 = MEMORY[0x1A1B049D4](v15, v14);
      v18 = v17;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Learned about new attachments: %s but lost reference to self. Can't indicate an update to clients", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v13, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v8 = MEMORY[0x1E0DEE9D8];
  }
  *a3 = v8;
}

uint64_t closure #1 in closure #1 in LinkManager.attachmentLedgerTopic.willset@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  unsigned int (*v39)(uint64_t, uint64_t, int *);
  uint64_t v40;
  void (*v41)(_BYTE *, _QWORD);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  _BYTE v83[40];

  v79 = a3;
  v5 = type metadata accessor for Date();
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  MEMORY[0x1E0C80A78](v5);
  v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for URL();
  v69 = *(_QWORD *)(v71 - 8);
  v9 = MEMORY[0x1E0C80A78](v71);
  v66 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)&v65 - v11;
  v82 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v75 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v77 = (uint64_t)&v65 - v18;
  v78 = type metadata accessor for LinkManager.Attachment(0);
  v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 - 8);
  v19 = MEMORY[0x1E0C80A78](v78);
  v65 = (uint64_t)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v65 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v74 = (uint64_t)&v65 - v25;
  v26 = *a1;
  v27 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x130);
  v76 = a2;
  v80 = v27(v24);
  v28 = *(_QWORD *)(v80 + 16);
  if (v28)
  {
    v29 = v80 + ((*((unsigned __int8 *)v81 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v81 + 80));
    v30 = *((_QWORD *)v81 + 9);
    while (1)
    {
      outlined init with copy of Participant(v29, (uint64_t)v23, type metadata accessor for LinkManager.Attachment);
      Attachment.id.getter();
      v31 = static UUID.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v82);
      if ((v31 & 1) != 0)
        break;
      outlined destroy of Participant((uint64_t)v23, type metadata accessor for LinkManager.Attachment);
      v29 += v30;
      if (!--v28)
        goto LABEL_5;
    }
    v37 = (uint64_t)v23;
    v34 = v77;
    outlined init with take of Participant(v37, v77, type metadata accessor for LinkManager.Attachment);
    v32 = v81;
    v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v81 + 7);
    v35 = v34;
    v36 = 0;
  }
  else
  {
LABEL_5:
    v32 = v81;
    v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v81 + 7);
    v34 = v77;
    v35 = v77;
    v36 = 1;
  }
  v38 = (int *)v78;
  v33(v35, v36, 1, v78);
  swift_bridgeObjectRelease();
  v39 = (unsigned int (*)(uint64_t, uint64_t, int *))*((_QWORD *)v32 + 6);
  if (v39(v34, 1, v38) == 1)
  {
    v40 = v26;
    v81 = v33;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v34, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    Attachment.id.getter();
    v41 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *v76)
                                                                                   + 0x128))(v83);
    v42 = v75;
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v14, v75);
    v43 = v42;
    v44 = *(void (**)(char *, uint64_t))(v12 + 8);
    v45 = v82;
    v44(v14, v82);
    v41(v83, 0);
    if (v39(v43, 1, v38) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v43, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
      UUID.init()();
      v80 = v12;
      UUID.uuidString.getter();
      v44(v14, v45);
      v78 = v40;
      v46 = (uint64_t)v67;
      static URL.temporaryDirectory.getter();
      v47 = v69;
      v48 = v71;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v46, 0, 1, v71);
      v49 = v66;
      URL.init(fileURLWithPath:relativeTo:)();
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v46, &demangling cache variable for type metadata for URL?);
      v50 = v68;
      URL.absoluteURL.getter();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
      v51 = v70;
      static Date.now.getter();
      v52 = v78;
      Attachment.id.getter();
      Date.timeIntervalSince1970.getter();
      v54 = v53;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v73);
      v55 = v79;
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v79, v14, v82);
      *(_QWORD *)(v55 + v38[5]) = v54;
      v56 = v55 + v38[6];
      *(_QWORD *)v56 = v52;
      *(_QWORD *)(v56 + 8) = 0;
      *(_BYTE *)(v56 + 16) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v55 + v38[7], v50, v48);
      *(_QWORD *)(v55 + v38[8]) = 0;
      v81(v55, 0, 1, (uint64_t)v38);
      return swift_retain();
    }
    else
    {
      v61 = v43;
      v62 = v65;
      outlined init with take of Participant(v61, v65, type metadata accessor for LinkManager.Attachment);
      v63 = v62;
      v64 = v79;
      outlined init with take of Participant(v63, v79, type metadata accessor for LinkManager.Attachment);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, int *))v81)(v64, 0, 1, v38);
    }
  }
  else
  {
    v58 = v74;
    outlined init with take of Participant(v34, v74, type metadata accessor for LinkManager.Attachment);
    v59 = v58;
    v60 = v79;
    outlined init with take of Participant(v59, v79, type metadata accessor for LinkManager.Attachment);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, int *))v33)(v60, 0, 1, v38);
  }
}

uint64_t LinkManager.Attachment.init(id:sentTime:source:file:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a7, a1, v16);
  v17 = (int *)type metadata accessor for LinkManager.Attachment(0);
  *(double *)(a7 + v17[5]) = a8;
  v18 = a7 + v17[6];
  *(_QWORD *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  *(_BYTE *)(v18 + 16) = a4 & 1;
  v19 = a7 + v17[7];
  v20 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a5, v20);
  *(_QWORD *)(a7 + v17[8]) = a6;
  return result;
}

void closure #2 in LinkManager.attachmentLedgerTopic.willset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1A1B05DC0](v2);
  if (v3)
  {
    v4 = (_QWORD *)v3;
    v5 = *(id *)(v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
    objc_msgSend(v5, sel_lock);
    v6 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x138);
    v7 = swift_bridgeObjectRetain();
    v6(v7);
    objc_msgSend(v5, sel_unlock);

  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v18 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = type metadata accessor for LinkManager.Attachment(0);
      v14 = swift_bridgeObjectRetain();
      v15 = MEMORY[0x1A1B049D4](v14, v13);
      v17 = v16;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v9, v10, "Learned about new attachments: %s but lost reference to self. Can't indicate an update to clients", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v12, -1, -1);
      MEMORY[0x1A1B05CC4](v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
}

uint64_t LinkManager.attachmentLedgerTopic.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t LinkManager.attachmentLedgerTopic.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LinkManager.attachmentLedgerTopic.willset(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*LinkManager.attachmentLedgerTopic.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(void);
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v3[5] = v4;
  v5 = *(_QWORD **)(v4 - 8);
  v6 = malloc(v5[8]);
  v7 = OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic;
  v3[6] = v6;
  v3[7] = v7;
  v8 = (void (*)(void))v5[2];
  v3[8] = v8;
  v8();
  CurrentSubject.wrappedValue.getter();
  v9 = (void (*)(void *, uint64_t))v5[1];
  v3[9] = v9;
  v9(v6, v4);
  *v3 = v3[1];
  return LinkManager.attachmentLedgerTopic.modify;
}

void LinkManager.attachmentLedgerTopic.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(void *, uint64_t);
  void (*v5)(void *, uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = **a1;
  v5 = (void (*)(void *, uint64_t, uint64_t))(*a1)[8];
  v4 = (void (*)(void *, uint64_t))(*a1)[9];
  v6 = (void *)(*a1)[6];
  v7 = (*a1)[5];
  v8 = (*a1)[4] + (*a1)[7];
  if ((a2 & 1) != 0)
  {
    v9 = swift_retain();
    LinkManager.attachmentLedgerTopic.willset(v9);
    v5(v6, v8, v7);
    v2[2] = v3;
    CurrentSubject.wrappedValue.setter();
    v4(v6, v7);
    swift_release();
  }
  else
  {
    LinkManager.attachmentLedgerTopic.willset(v3);
    v5(v6, v8, v7);
    v2[3] = v3;
    CurrentSubject.wrappedValue.setter();
    v4(v6, v7);
  }
  free(v6);
  free(v2);
}

uint64_t LinkManager.$attachmentLedgerTopic.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>, &OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic);
}

uint64_t LinkManager.pendingLocalAttachments.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t LinkManager.pendingLocalAttachments.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*LinkManager.pendingLocalAttachments.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t LinkManager.attachments.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t LinkManager.attachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*LinkManager.attachments.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = malloc(*(_QWORD *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return AttachmentLedgerTopic.attachments.modify;
}

uint64_t LinkManager.$attachments.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>, &OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments);
}

uint64_t LinkManager.topic.getter()
{
  return swift_retain();
}

uint64_t LinkManager.dataCryptor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 392))();
}

uint64_t LinkManager.dataCryptor.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[3];
  uint64_t v12;

  v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)((char *)v1
                                                       + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                         + 400);
  v4 = swift_unknownObjectRetain();
  result = v3(v4);
  if (!*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
    return swift_unknownObjectRelease();
  if (a1)
  {
    ObjectType = swift_getObjectType();
    v12 = ObjectType;
    v11[0] = a1;
    swift_unknownObjectRetain_n();
    swift_retain();
    UnreliableMessenger.refreshDataCryptorProvider(with:)();
    v7 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF8))(v7);
    if (v8)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 344))(v11);
      swift_release();
      if (v12)
      {
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v11, (uint64_t)v10);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for TopicCryptorProvider?);
        __swift_project_boxed_opaque_existential_1(v10, v10[3]);
        v9[3] = ObjectType;
        v9[0] = a1;
        dispatch thunk of TopicCryptorProvider.refresh(with:)();
        swift_unknownObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
      }
      else
      {
        swift_release();
        swift_unknownObjectRelease_n();
        return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for TopicCryptorProvider?);
      }
    }
    else
    {
      swift_release();
      return swift_unknownObjectRelease_n();
    }
  }
  return result;
}

uint64_t (*LinkManager.dataCryptor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (*(uint64_t (**)(void))(**(_QWORD **)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 392))();
  return LinkManager.dataCryptor.modify;
}

uint64_t LinkManager.dataCryptor.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return LinkManager.dataCryptor.setter(*a1);
  v2 = swift_unknownObjectRetain();
  LinkManager.dataCryptor.setter(v2);
  return swift_unknownObjectRelease();
}

uint64_t LinkManager.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier, a1);
}

uint64_t LinkManager.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID, a1);
}

uint64_t LinkManager.localParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

id LinkManager.unreliableMessengerConfig.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig);
}

uint64_t LinkManager.hasConnectedOnce.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce);
  swift_beginAccess();
  return *v1;
}

uint64_t LinkManager.hasConnectedOnce.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*LinkManager.hasConnectedOnce.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path getter for LinkManager.receivedDataHandler : LinkManager@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *, uint64_t);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1B0))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @in_guaranteed SendReliability) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.receivedDataHandler : LinkManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed SendReliability) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1B8);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.receivedDataHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t (*LinkManager.receivedDataHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.onFirstConnectedHandler : LinkManager@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1C8))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for LinkManager.onFirstConnectedHandler : LinkManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1D0);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.onFirstConnectedHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t LinkManager.onFirstConnectedHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t (*LinkManager.onFirstConnectedHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.invalidationHandler : LinkManager@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1E0))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t key path setter for LinkManager.invalidationHandler : LinkManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1E8);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.invalidationHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.invalidationHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t (*LinkManager.invalidationHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.catchupNeededHandler : LinkManager@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1F8))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t key path setter for LinkManager.catchupNeededHandler : LinkManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x200);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.catchupNeededHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 368))();
}

uint64_t LinkManager.catchupNeededHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 376))();
}

uint64_t (*LinkManager.catchupNeededHandler.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic);
  a1[2] = v3;
  *a1 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 368))();
  a1[1] = v4;
  return LinkManager.catchupNeededHandler.modify;
}

uint64_t LinkManager.catchupNeededHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = a1[1];
  v3 = *a1;
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 376);
  if ((a2 & 1) == 0)
    return v4(*a1, v2);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*a1);
  v4(v3, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
}

uint64_t key path getter for LinkManager.requestEncryptionKeysHandler : LinkManager@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x210))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.requestEncryptionKeysHandler : LinkManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x218);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.requestEncryptionKeysHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.getter(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t LinkManager.requestEncryptionKeysHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.setter(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*LinkManager.requestEncryptionKeysHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

id LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  char *v7;

  swift_getObjectType();
  return specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, v7);
}

void closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char v21;

  v11 = a5 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x1A1B05DC0](v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    v14 = type metadata accessor for Participant();
    if (a4 && (v14 = specialized Sequence<>.contains(_:)(*(_QWORD *)(a6 + *(int *)(v14 + 24)), a4), (v14 & 1) == 0))
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.default);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1A0DB3000, v18, v19, "Ignoring topic record due to not being in the destination list", v20, 2u);
        MEMORY[0x1A1B05CC4](v20, -1, -1);
      }

    }
    else
    {
      v15 = (void (*)(uint64_t, uint64_t, uint64_t, char *))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x1B0))(v14);
      if (v15)
      {
        v16 = (uint64_t)v15;
        v21 = 0;
        v15(a1, a2, a3, &v21);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v16);
      }
    }

  }
}

uint64_t closure #2 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
  v4 = MEMORY[0x1E0C80A78](v54);
  v53 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t *)((char *)&v44 - v7);
  v8 = MEMORY[0x1E0C80A78](v6);
  v51 = (uint64_t *)((char *)&v44 - v9);
  result = MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v44 - v11;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (!v13)
  {
LABEL_26:
    *a2 = v14;
    return result;
  }
  v45 = a2;
  v57 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  result = specialized Dictionary.startIndex.getter(v12);
  v16 = result;
  v17 = 0;
  v18 = v12 + 64;
  v19 = *(_BYTE *)(v12 + 32);
  v44 = v12 + 88;
  v48 = v12 + 64;
  v49 = v12;
  v46 = v13;
  v47 = v15;
  v20 = v54;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << v19)
  {
    v23 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(v12 + 36) != (_DWORD)v15)
      goto LABEL_29;
    v55 = v17;
    v56 = 1 << v16;
    v24 = v50;
    v25 = &v50[*(int *)(v20 + 48)];
    v26 = *(_QWORD *)(v12 + 56);
    v27 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v16);
    v28 = type metadata accessor for PubSubTopic.Participant();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v30(v25, v26 + *(_QWORD *)(v29 + 72) * v16, v28);
    *v24 = v27;
    v31 = (uint64_t)v51;
    *v51 = v27;
    v30((char *)(v31 + *(int *)(v20 + 48)), (uint64_t)v25, v28);
    v32 = v52;
    outlined init with take of (key: UInt64, value: PubSubTopic.Participant)(v31, (uint64_t)v52);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
    v33 = *(int *)(v20 + 48);
    v34 = (char *)v53;
    v35 = (char *)v53 + v33;
    v36 = *v32;
    *v53 = *v32;
    v30(&v34[v33], (uint64_t)v32 + v33, v28);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
    v14 = v57;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v14 = v57;
    }
    v38 = *(_QWORD *)(v14 + 16);
    v37 = *(_QWORD *)(v14 + 24);
    v12 = v49;
    if (v38 >= v37 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      v14 = v57;
    }
    *(_QWORD *)(v14 + 16) = v38 + 1;
    *(_QWORD *)(v14 + 8 * v38 + 32) = v36;
    v19 = *(_BYTE *)(v12 + 32);
    v21 = 1 << v19;
    if (v16 >= 1 << v19)
      goto LABEL_30;
    v18 = v48;
    v39 = *(_QWORD *)(v48 + 8 * v23);
    if ((v39 & v56) == 0)
      goto LABEL_31;
    LODWORD(v15) = v47;
    if (*(_DWORD *)(v12 + 36) != (_DWORD)v47)
      goto LABEL_32;
    v40 = v39 & (-2 << (v16 & 0x3F));
    if (v40)
    {
      v21 = __clz(__rbit64(v40)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v22 = v46;
    }
    else
    {
      v41 = v23 + 1;
      v42 = (v21 + 63) >> 6;
      v22 = v46;
      if (v23 + 1 < v42)
      {
        v43 = *(_QWORD *)(v48 + 8 * v41);
        if (!v43)
        {
          v41 = v23 + 2;
          if (v23 + 2 >= v42)
            goto LABEL_4;
          v43 = *(_QWORD *)(v48 + 8 * v41);
          if (!v43)
          {
            while (v42 - 3 != v23)
            {
              v43 = *(_QWORD *)(v44 + 8 * v23++);
              if (v43)
              {
                v41 = v23 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v21 = __clz(__rbit64(v43)) + (v41 << 6);
      }
    }
LABEL_4:
    v17 = v55 + 1;
    v16 = v21;
    if (v55 + 1 == v22)
    {
      a2 = v45;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for PubSubTopic.State();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v8 = MEMORY[0x1A1B05DC0](a3 + 16);
  if (v8)
  {
    v9 = (_QWORD *)v8;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D14A28], v4);
    v10 = static PubSubTopic.State.== infix(_:_:)();
    v11 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v10 & 1) != 0
      && (v12 = (_QWORD *)MEMORY[0x1E0DEEDD8],
          ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x198))(v11) & 1) == 0)
      && (v13 = (*(uint64_t (**)(uint64_t))((*v12 & *v9) + 0x1A0))(1),
          (v14 = (void (*)(void))(*(uint64_t (**)(uint64_t))((*v12 & *v9) + 0x1C8))(v13)) != 0))
    {
      v15 = (uint64_t)v14;
      v14();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v15);
    }
    else
    {

    }
  }
}

id LinkManager.__deallocating_deinit()
{
  _QWORD *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkManager(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

NSObject *LinkManager.resume()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD);
  void (*v25)(char *, uint64_t);
  id v26;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  _BYTE *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  _BYTE *v38;
  _QWORD v39[3];
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v39 - v6;
  v8 = *(Class *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  v9 = objc_msgSend(v8, sel_lock);
  v10 = OBJC_IVAR____TtC15GroupActivities11LinkManager_state;
  if ((*((_BYTE *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_state) & 1) == 0)
  {
    (*(void (**)(id))(**(_QWORD **)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                               + 592))(v9);
    *((_BYTE *)&v0->isa + v10) = 1;
    if (objc_msgSend(*(id *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled))
    {
      v13 = *(uint64_t *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger);
      if (!v13)
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Log.default);
        v0 = Logger.logObject.getter();
        v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v0, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v30 = 0;
          _os_log_impl(&dword_1A0DB3000, v0, v29, "No UnreliableMessenger to start", v30, 2u);
          MEMORY[0x1A1B05CC4](v30, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        v12 = 3;
        goto LABEL_3;
      }
      v14 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v0->isa) + 0x168);
      v15 = swift_retain();
      if (v14(v15))
      {
        v16 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v0->isa) + 0x210))();
        if (v16)
        {
          v40 = v8;
          v42 = v13;
          v18 = v16;
          v44 = v17;
          v41 = UUID.uuidString.getter();
          v39[2] = v19;
          v43 = type metadata accessor for GroupSessionDataCryptorProvider();
          v39[1] = swift_allocObject();
          swift_unknownObjectRetain();
          outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v18);
          v41 = v18;
          v20 = GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)();
          v21 = static Date.now.getter();
          v22 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v0->isa) + 0xF8))(v21);
          v23 = MEMORY[0x1E0D15120];
          if (v22)
          {
            v47 = v43;
            v48 = MEMORY[0x1E0D15120];
            v46[0] = v20;
            v24 = *(void (**)(_QWORD *, _QWORD))(*(_QWORD *)v22 + 432);
            swift_retain();
            v24(v46, MEMORY[0x1E0DEE9D8]);
            swift_release();
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v46, &demangling cache variable for type metadata for TopicCryptorProvider?);
          }
          static Date.now.getter();
          Date.timeIntervalSince1970.getter();
          Date.timeIntervalSince1970.getter();
          v47 = v43;
          v48 = v23;
          v46[0] = v20;
          swift_retain();
          UnreliableMessenger.start(dataCryptorProvider:)();
          swift_release();
          swift_release();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v41);
          swift_unknownObjectRelease();
          v25 = *(void (**)(char *, uint64_t))(v2 + 8);
          v25(v5, v1);
          v25(v7, v1);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
          v8 = v40;
          goto LABEL_12;
        }
        if (one-time initialization token for default != -1)
          swift_once();
        v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)static Log.default);
        v0 = Logger.logObject.getter();
        v36 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v0, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v37 = 0;
          _os_log_impl(&dword_1A0DB3000, v0, v36, "Missing requestEncryptionKeysHandler for UnreliableMessenger", v37, 2u);
          MEMORY[0x1A1B05CC4](v37, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        *v38 = 5;
        swift_willThrow();
        swift_unknownObjectRelease();
      }
      else
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Log.default);
        v0 = Logger.logObject.getter();
        v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v0, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v33 = 0;
          _os_log_impl(&dword_1A0DB3000, v0, v32, "Missing dataCryptor, unable to start UnreliableMessenger", v33, 2u);
          MEMORY[0x1A1B05CC4](v33, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        *v34 = 4;
        swift_willThrow();
      }
      swift_release();
      goto LABEL_4;
    }
LABEL_12:
    v26 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    v0 = AttachmentDataReport.init(isSubscribe:responseTime:)();
    objc_msgSend(v8, sel_unlock);
    return v0;
  }
  lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
  swift_allocError();
  v12 = 2;
LABEL_3:
  *v11 = v12;
  swift_willThrow();
LABEL_4:
  objc_msgSend(v8, sel_unlock);
  return v0;
}

uint64_t LinkManager.close()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _BYTE *v18;
  void (*v19)(char *, uint64_t);
  _QWORD v21[2];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v21 - v9;
  v11 = *(void **)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  v12 = objc_msgSend(v11, sel_lock);
  v13 = OBJC_IVAR____TtC15GroupActivities11LinkManager_state;
  if (*((_BYTE *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_state) == 1)
  {
    v21[0] = v5;
    v21[1] = v1;
    (*(void (**)(id))(**(_QWORD **)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 600))(v12);
    v14 = static Date.now.getter();
    v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xF8))(v14);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 448))(v15);
      swift_release();
    }
    static Date.now.getter();
    Date.timeIntervalSince1970.getter();
    Date.timeIntervalSince1970.getter();
    v16 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    v2 = AttachmentDataReport.init(isSubscribe:responseTime:)();
    v17 = OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger;
    if (*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
    {
      swift_retain();
      UnreliableMessenger.close()();
      swift_release();
    }
    *(_QWORD *)((char *)v3 + v17) = 0;
    swift_release();
    v19 = *(void (**)(char *, uint64_t))(v21[0] + 8);
    v19(v8, v4);
    v19(v10, v4);
    *((_BYTE *)v3 + v13) = 0;
    objc_msgSend(v11, sel_unlock);
  }
  else
  {
    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v18 = 2;
    swift_willThrow();
    objc_msgSend(v11, sel_unlock);
  }
  return v2;
}

id LinkManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LinkManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void LinkManager.sendDataReliably(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  _BYTE *v13;
  char v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  char v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47[4];
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  if (a3)
  {
    v43 = a1;
    v44 = a2;
    v6 = a3 & 0xC000000000000001;
    if ((a3 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      if (__CocoaSet.count.getter())
      {
        v7 = __CocoaSet.count.getter();
        if (!v7)
        {
          v42 = v4;
          v7 = MEMORY[0x1E0DEE9D8];
          v8 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_25:
          swift_bridgeObjectRetain();
          if (v8 == __CocoaSet.count.getter())
          {
LABEL_26:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_32:
            a1 = v43;
            a2 = v44;
            v4 = v42;
            goto LABEL_33;
          }
          goto LABEL_28;
        }
LABEL_8:
        v42 = v4;
        v51 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
        if (v6)
        {
          v9 = __CocoaSet.startIndex.getter();
          v11 = 1;
        }
        else
        {
          v9 = specialized _NativeSet.startIndex.getter(a3);
          v11 = v14 & 1;
        }
        v48 = v9;
        v49 = v10;
        v50 = v11;
        if (v7 < 0)
        {
          __break(1u);
LABEL_35:
          swift_once();
LABEL_29:
          v31 = type metadata accessor for Logger();
          __swift_project_value_buffer(v31, (uint64_t)static Log.default);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v32 = Logger.logObject.getter();
          v33 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v32, v33))
          {
            v34 = swift_slowAlloc();
            v46 = swift_slowAlloc();
            v47[0] = v46;
            *(_DWORD *)v34 = 136315394;
            v35 = swift_bridgeObjectRetain();
            v36 = MEMORY[0x1A1B049D4](v35, MEMORY[0x1E0DEE190]);
            v38 = v37;
            swift_bridgeObjectRelease();
            v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v47);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v34 + 12) = 2080;
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
            lazy protocol witness table accessor for type CPParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, &lazy cache variable for type metadata for CPParticipant);
            swift_bridgeObjectRetain();
            v39 = Set.description.getter();
            v41 = v40;
            swift_bridgeObjectRelease();
            v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v47);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A0DB3000, v32, v33, "Not able to resolve all participants' identifiers, sending only to destinations %s instead of %s", (uint8_t *)v34, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v46, -1, -1);
            MEMORY[0x1A1B05CC4](v34, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          goto LABEL_32;
        }
        do
        {
          while (1)
          {
            v21 = v48;
            v20 = v49;
            v22 = v50;
            specialized Set.subscript.getter(v48, v49, v50, a3);
            v24 = v23;
            v25 = objc_msgSend(v23, sel_participantIdentifier);

            v26 = v51;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
              v26 = v51;
            }
            v28 = *(_QWORD *)(v26 + 16);
            v27 = *(_QWORD *)(v26 + 24);
            if (v28 >= v27 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
              v26 = v51;
            }
            *(_QWORD *)(v26 + 16) = v28 + 1;
            *(_QWORD *)(v26 + 8 * v28 + 32) = v25;
            if (v6)
              break;
            v15 = specialized _NativeSet.index(after:)(v21, v20, v22, a3);
            v17 = v16;
            v19 = v18;
            outlined consume of Set<Participant>.Index._Variant(v21, v20, v22);
            v48 = v15;
            v49 = v17;
            v50 = v19 & 1;
            if (!--v7)
              goto LABEL_24;
          }
          if ((v22 & 1) == 0)
          {
            __break(1u);
            return;
          }
          if (__CocoaSet.Index.handleBitPattern.getter())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CPParticipant>.Index);
          v29 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v29(v47, 0);
          --v7;
        }
        while (v7);
LABEL_24:
        outlined consume of Set<Participant>.Index._Variant(v48, v49, v50);
        v7 = v51;
        v8 = *(_QWORD *)(v51 + 16);
        if (v6)
          goto LABEL_25;
        v30 = *(_QWORD *)(a3 + 16);
        swift_bridgeObjectRetain();
        if (v8 == v30)
          goto LABEL_26;
LABEL_28:
        if (one-time initialization token for default == -1)
          goto LABEL_29;
        goto LABEL_35;
      }
    }
    else
    {
      v7 = *(_QWORD *)(a3 + 16);
      swift_bridgeObjectRetain();
      if (v7)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    v12 = (void *)swift_allocError();
    *v13 = 0;
    a4();

    return;
  }
  v7 = 0;
LABEL_33:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4
                                                                  + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                                    + 608))(a1, a2, v7);
  swift_bridgeObjectRelease();
}

void LinkManager.sendDataUnreliably(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  char v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50[4];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1A0DB3000, v11, v12, "Unexpected, unreliableMessenger instance not found", v13, 2u);
      MEMORY[0x1A1B05CC4](v13, -1, -1);
    }

    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    v14 = (void *)swift_allocError();
    *v15 = 1;
    a4();
    goto LABEL_17;
  }
  if (a3)
  {
    v7 = a3 & 0xC000000000000001;
    if ((a3 & 0xC000000000000001) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if (__CocoaSet.count.getter())
      {
        v8 = __CocoaSet.count.getter();
        if (!v8)
        {
          v9 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_32:
          swift_bridgeObjectRetain();
          v36 = __CocoaSet.count.getter();
          goto LABEL_34;
        }
LABEL_14:
        v54 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
        if (v7)
        {
          v16 = __CocoaSet.startIndex.getter();
          v18 = 1;
        }
        else
        {
          v16 = specialized _NativeSet.startIndex.getter(a3);
          v18 = v20 & 1;
        }
        v51 = v16;
        v52 = v17;
        v53 = v18;
        if (v8 < 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v27 = v51;
            v26 = v52;
            v28 = v53;
            specialized Set.subscript.getter(v51, v52, v53, a3);
            v30 = v29;
            v31 = objc_msgSend(v29, sel_participantIdentifier);

            v32 = v54;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
              v32 = v54;
            }
            v34 = *(_QWORD *)(v32 + 16);
            v33 = *(_QWORD *)(v32 + 24);
            if (v34 >= v33 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
              v32 = v54;
            }
            *(_QWORD *)(v32 + 16) = v34 + 1;
            *(_QWORD *)(v32 + 8 * v34 + 32) = v31;
            if (v7)
              break;
            v21 = specialized _NativeSet.index(after:)(v27, v26, v28, a3);
            v23 = v22;
            v25 = v24;
            outlined consume of Set<Participant>.Index._Variant(v27, v26, v28);
            v51 = v21;
            v52 = v23;
            v53 = v25 & 1;
            if (!--v8)
              goto LABEL_31;
          }
          if ((v28 & 1) == 0)
          {
            __break(1u);
            return;
          }
          if (__CocoaSet.Index.handleBitPattern.getter())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CPParticipant>.Index);
          v35 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v35(v50, 0);
          --v8;
        }
        while (v8);
LABEL_31:
        outlined consume of Set<Participant>.Index._Variant(v51, v52, v53);
        v9 = *(_QWORD *)(v54 + 16);
        if (v7)
          goto LABEL_32;
        v36 = *(_QWORD *)(a3 + 16);
        swift_bridgeObjectRetain();
LABEL_34:
        if (v9 == v36)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        if (one-time initialization token for default == -1)
        {
LABEL_37:
          v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Log.default);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v38 = Logger.logObject.getter();
          v39 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = swift_slowAlloc();
            v49 = swift_slowAlloc();
            v50[0] = v49;
            *(_DWORD *)v40 = 136315394;
            v41 = swift_bridgeObjectRetain();
            v42 = MEMORY[0x1A1B049D4](v41, MEMORY[0x1E0DEE190]);
            v44 = v43;
            swift_bridgeObjectRelease();
            v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v40 + 12) = 2080;
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
            lazy protocol witness table accessor for type CPParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, &lazy cache variable for type metadata for CPParticipant);
            swift_bridgeObjectRetain();
            v45 = Set.description.getter();
            v47 = v46;
            swift_bridgeObjectRelease();
            v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A0DB3000, v38, v39, "Not able to resolve all participants' identifiers, sending only to destinations %s instead of %s", (uint8_t *)v40, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v49, -1, -1);
            MEMORY[0x1A1B05CC4](v40, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          goto LABEL_40;
        }
LABEL_42:
        swift_once();
        goto LABEL_37;
      }
    }
    else
    {
      v8 = *(_QWORD *)(a3 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v8)
        goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    v14 = (void *)swift_allocError();
    *v19 = 0;
    a4();
    swift_release();
LABEL_17:

    return;
  }
  swift_retain();
LABEL_40:
  UnreliableMessenger.send(_:to:completion:)();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t LinkManager.fetchAttachmentLedgerTopic()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v1 + 32) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;

  v2 = (void *)v0[3];
  v1 = v0[4];
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v2;
  v5 = v2;
  v0[5] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(v1, (uint64_t)&closure #1 in LinkManager.fetchAttachmentLedgerTopic()partial apply, (uint64_t)v4);
  v6 = (_QWORD *)swift_task_alloc();
  v0[6] = v6;
  type metadata accessor for AttachmentLedgerTopic(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v6 = v0;
  v6[1] = LinkManager.fetchAttachmentLedgerTopic();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LinkManager.fetchAttachmentLedgerTopic()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a1;
  v4[6] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>);
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator);
  v4[10] = v6;
  v4[11] = *(_QWORD *)(v6 - 8);
  v4[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LinkManager.fetchAttachmentLedgerTopic()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 48)) + 0x110))();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<AttachmentLedgerTopic?, Never>);
  v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<AttachmentLedgerTopic?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<AttachmentLedgerTopic?, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1A1B04650](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v6;
  *v6 = v0;
  v6[1] = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);
  _QWORD *v5;

  v1 = v0[15];
  if (v1 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (!v1)
    {
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator, MEMORY[0x1E0C95E78]);
      v2 = (_QWORD *)swift_task_alloc();
      v0[13] = v2;
      *v2 = v0;
      v2[1] = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    v5 = (_QWORD *)v0[5];
    (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
    *v5 = v1;
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t closure #1 in LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v5 = type metadata accessor for URL();
  v4[28] = v5;
  v4[29] = *(_QWORD *)(v5 - 8);
  v4[30] = swift_task_alloc();
  v6 = type metadata accessor for TaskPriority();
  v4[31] = v6;
  v4[32] = *(_QWORD *)(v6 - 8);
  v4[33] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v4[34] = v7;
  v4[35] = *(_QWORD *)(v7 - 8);
  v4[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LinkManager.fetchAttachment(attachmentID:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t type;
  uint64_t v31;
  uint64_t v32;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 296) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 288);
    v27 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 272);
    v28 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 256);
    v7 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v7 = 136315394;
    type = v3;
    Attachment.id.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v4, v6);
    *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v5, v28);
    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, type, "Received request to generate new AttachmentDownloadTask for attachment: %s with priority: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v15 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 208);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(_QWORD *)(v0 + 304) = v20;
  v20(v14, v18, v17);
  v21 = type metadata accessor for AssetManager();
  swift_retain();
  swift_retain();
  v22 = static AssetManager.shared.getter();
  *(_QWORD *)(v0 + 40) = v21;
  *(_QWORD *)(v0 + 48) = &protocol witness table for AssetManager;
  *(_QWORD *)(v0 + 16) = v22;
  *(_QWORD *)(v0 + 80) = type metadata accessor for AttachmentLedgerTopic(0);
  *(_QWORD *)(v0 + 88) = &protocol witness table for AttachmentLedgerTopic;
  *(_QWORD *)(v0 + 56) = v16;
  v23 = type metadata accessor for Attachment();
  *(_QWORD *)(v0 + 312) = v23;
  *(_QWORD *)(v0 + 120) = v23;
  *(_QWORD *)(v0 + 128) = &protocol witness table for Attachment;
  *(_QWORD *)(v0 + 96) = v19;
  type metadata accessor for AttachmentDownloadTask();
  v24 = swift_allocObject();
  *(_QWORD *)(v0 + 320) = v24;
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v24 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v24 + 112);
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 96), v24 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v24 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v14, v17);
  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 16), v24 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_release();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v25;
  *v25 = v0;
  v25[1] = closure #1 in LinkManager.fetchAttachment(attachmentID:);
  return AttachmentDownloadTask.start()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  swift_release();
  v1(v4, v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20[2];

  v1 = *(void **)(v0 + 336);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast() && *(_BYTE *)(v0 + 344) == 1)
  {

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *v3 = 1;
    swift_willThrow();
    swift_release();

  }
  else
  {
    v4 = *(void **)(v0 + 336);

    swift_retain();
    v5 = v4;
    swift_retain();
    v6 = v4;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void **)(v0 + 336);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 200);
      v12 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20[0] = v19;
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v0 + 144) = v11;
      swift_retain();
      v13 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v12 + 12) = 2080;
      *(_QWORD *)(v0 + 160) = v10;
      v15 = v10;
      v16 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v7, v8, "Failed to download attachment %s, error: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v19, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_willThrow();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[14] = swift_task_alloc();
  v6 = type metadata accessor for LinkManager.Attachment(0);
  v5[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[16] = v7;
  v5[17] = *(_QWORD *)(v7 + 64);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v8 = type metadata accessor for TaskPriority();
  v5[21] = v8;
  v5[22] = *(_QWORD *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v5[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[25] = v10;
  v5[26] = *(_QWORD *)(v10 + 64);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LinkManager.fetchAttachment(attachmentID:generator:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(void);
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t (*v40)(void);
  uint64_t result;
  void (*v42)(_QWORD *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85[2];

  v83 = v0 + 7;
  v1 = *(void **)(v0[13] + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v1, sel_lock);
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = v0[30];
  v3 = v0[24];
  v4 = v0[25];
  v5 = v0[10];
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v81(v2, v5, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[30];
  v11 = v0[24];
  v12 = v0[25];
  v84 = v1;
  if (v9)
  {
    type = v8;
    v13 = v0[23];
    v72 = v0[21];
    v74 = v0[22];
    v14 = swift_slowAlloc();
    v78 = swift_slowAlloc();
    v85[0] = v78;
    *(_DWORD *)v14 = 136315394;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v11);
    *(_WORD *)(v14 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v13, v72);
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v7, type, "Received request to fetch attachment: %s with priority: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v78, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v11);
  }

  v21 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0[13]) + 0x130);
  v22 = v21();
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v81(v0[27], v0[10], v0[24]);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = v0[27];
    v34 = v0[24];
    if (v32)
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v85[0] = v36;
      *(_DWORD *)v35 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v17(v33, v34);
      _os_log_impl(&dword_1A0DB3000, v30, v31, "Failed to find attachment with attachmentID %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v36, -1, -1);
      MEMORY[0x1A1B05CC4](v35, -1, -1);
    }
    else
    {
      v17(v0[27], v0[24]);
    }

    objc_msgSend(v84, sel_unlock);
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *v39 = 3;
    swift_willThrow();
    goto LABEL_14;
  }
  v24 = 0;
  v25 = (unint64_t)(v0 + 2);
  v26 = v0[16];
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = *(_QWORD *)(v26 + 72);
  while ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    ++v24;
    v28 += v29;
    if (v23 == v24)
      goto LABEL_10;
  }
  v42 = (void (*)(_QWORD *, _QWORD))v0[13];
  v43 = swift_bridgeObjectRelease();
  v44 = ((uint64_t (*)(uint64_t))v21)(v43);
  if (v24 >= *(_QWORD *)(v44 + 16))
  {
    __break(1u);
LABEL_29:
    result = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
    v22 = result;
    *(_QWORD *)v27 = result;
    goto LABEL_23;
  }
  v45 = v0[20];
  v46 = v0[15];
  outlined init with copy of Participant(v44 + v28, v45, type metadata accessor for LinkManager.Attachment);
  swift_bridgeObjectRelease();
  v47 = *(int *)(v46 + 32);
  v21 = *(uint64_t (**)(void))(v45 + v47);
  if ((unint64_t)v21 - 1 < 2)
  {
    v17 = 0;
LABEL_25:
    v0[31] = v17;
    outlined copy of LinkManager.Attachment.State((unint64_t)v21);
    objc_msgSend(v84, sel_unlock);
    if (v17)
    {
      swift_retain();
      v58 = (_QWORD *)swift_task_alloc();
      v0[32] = v58;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *v58 = v0;
      v58[1] = LinkManager.fetchAttachment(attachmentID:generator:);
      return Task.value.getter();
    }
    v59 = v0[20];
    v60 = v0[9];
    v61 = v59 + *(int *)(v0[15] + 28);
    v62 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    outlined destroy of Participant(v59, type metadata accessor for LinkManager.Attachment);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  v83 = v0 + 2;
  v17 = *(void (**)(uint64_t, uint64_t))(v45 + v47);
  if (v21)
    goto LABEL_25;
  v48 = v0[20];
  v49 = v48 + *(int *)(v0[15] + 24);
  if ((*(_BYTE *)(v49 + 16) & 1) != 0)
  {
    objc_msgSend(v84, sel_unlock);
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *v50 = 4;
    swift_willThrow();
    outlined destroy of Participant(v48, type metadata accessor for LinkManager.Attachment);
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  v51 = v0[29];
  v65 = v0[25];
  v70 = *(_QWORD *)v49;
  v71 = v0[24];
  v63 = v0[19];
  v73 = v0[18];
  v66 = v0[17];
  v68 = *(_QWORD *)(v49 + 8);
  v69 = v0[14];
  v75 = (_QWORD *)v0[13];
  *(_QWORD *)typea = v0[28];
  v80 = v0[12];
  v52 = v0[10];
  v67 = v0[11];
  (*(void (**)(void))(v0[22] + 56))();
  v81(v51, v52, v71);
  outlined init with copy of Participant(v48, v63, type metadata accessor for LinkManager.Attachment);
  v82 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with take of Participant(v63, v73, type metadata accessor for LinkManager.Attachment);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 32);
  v64(*(char **)typea, v51, v71);
  v53 = (v27 + 56) & ~v27;
  v79 = (v53 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = (v79 + *(unsigned __int8 *)(v65 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v55 = (char *)swift_allocObject();
  *((_QWORD *)v55 + 2) = 0;
  *((_QWORD *)v55 + 3) = 0;
  *((_QWORD *)v55 + 4) = v67;
  *((_QWORD *)v55 + 5) = v80;
  *((_QWORD *)v55 + 6) = v70;
  outlined init with take of Participant(v73, (uint64_t)&v55[v53], type metadata accessor for LinkManager.Attachment);
  *(_QWORD *)&v55[v79] = v82;
  v64(&v55[v54], *(_QWORD *)typea, v71);
  outlined copy of LinkManager.Attachment.Source(v70, v68, 0);
  v25 = v68;
  outlined copy of LinkManager.Attachment.Source(v70, v68, 0);
  swift_retain();
  v17 = (void (*)(uint64_t, uint64_t))_sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v69, (uint64_t)&async function pointer to partial apply for closure #2 in LinkManager.fetchAttachment(attachmentID:generator:), (uint64_t)v55);
  v56 = *(_QWORD *)(v45 + v47);
  swift_retain();
  outlined consume of LinkManager.Attachment.State(v56);
  *(_QWORD *)(v45 + v47) = v17;
  v42 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v75)
                                                                                   + 0x140))(v83);
  v27 = (unint64_t)v57;
  v22 = *v57;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v27 = v22;
  if ((result & 1) == 0)
    goto LABEL_29;
LABEL_23:
  if (v24 < *(_QWORD *)(v22 + 16))
  {
    outlined assign with copy of LinkManager.Attachment(v0[20], v22 + v28);
    v42(v83, 0);
    outlined consume of LinkManager.Attachment.Source(v70, v25, 0);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  swift_release_n();
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = v1 + *(int *)(v2 + 28);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  v6 = *(double *)(v1 + *(int *)(v2 + 20));
  outlined destroy of Participant(v1, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(double))(v0 + 8))(v6);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release_n();
  outlined destroy of Participant(v1, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;

  v8[10] = a8;
  v8[11] = v20;
  v12 = type metadata accessor for LinkManager.Attachment(0);
  v8[12] = v12;
  v8[13] = *(_QWORD *)(v12 - 8);
  v8[14] = swift_task_alloc();
  v13 = type metadata accessor for UUID();
  v8[15] = v13;
  v8[16] = *(_QWORD *)(v13 - 8);
  v8[17] = swift_task_alloc();
  v14 = type metadata accessor for URL();
  v8[18] = v14;
  v8[19] = *(_QWORD *)(v14 - 8);
  v15 = swift_task_alloc();
  v8[20] = v15;
  v16 = a7 + *(int *)(v12 + 28);
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a4 + *a4);
  v17 = (_QWORD *)swift_task_alloc();
  v8[21] = v17;
  *v17 = v8;
  v17[1] = closure #2 in LinkManager.fetchAttachment(attachmentID:generator:);
  return v19(v15, a6, v16);
}

uint64_t closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v7)(id);
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0 + 80;
  v2 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1A1B05DC0](v2);
  if (!v3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = (_QWORD *)v3;
  v40 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
  v5 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock), sel_lock);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x130);
  v8 = *(_QWORD *)(v7(v5) + 16);
  if (!v8)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 88);
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 120);
    if (v20)
    {
      v38 = *(_QWORD *)(v0 + 128);
      v23 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v41 = v39;
      *(_DWORD *)v23 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v21, v22);
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Failed to find attachment with attachmentID %s when trying to update the state", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v39, -1, -1);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

    goto LABEL_17;
  }
  v9 = 0;
  v10 = *(_QWORD *)(v0 + 104);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 72);
  while ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    ++v9;
    v11 += v12;
    if (v8 == v9)
      goto LABEL_6;
  }
  v26 = swift_bridgeObjectRelease();
  v27 = (void (*)(uint64_t, _QWORD))v4;
  v28 = v7((id)v26);
  if (v9 >= *(_QWORD *)(v28 + 16))
  {
    __break(1u);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    outlined init with copy of Participant(v28 + v11, v29, type metadata accessor for LinkManager.Attachment);
    swift_bridgeObjectRelease();
    v31 = *(int *)(v30 + 32);
    outlined consume of LinkManager.Attachment.State(*(_QWORD *)(v29 + v31));
    *(_QWORD *)(v29 + v31) = 2;
    v12 = v0 + 16;
    v27 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v6 & *v4) + 0x140))(v0 + 16);
    v6 = v32;
    v1 = *v32;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v1;
    if ((result & 1) != 0)
      goto LABEL_15;
  }
  result = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v1 = result;
  *v6 = result;
LABEL_15:
  if (v9 < *(_QWORD *)(v1 + 16))
  {
    v34 = *(_QWORD *)(v0 + 112);
    outlined assign with copy of LinkManager.Attachment(v34, v1 + v11);
    v27(v12, 0);
    outlined destroy of Participant(v34, type metadata accessor for LinkManager.Attachment);
LABEL_17:
    v36 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 160);
    v37 = *(_QWORD *)(v0 + 144);
    objc_msgSend(*(id *)((char *)v4 + v40), sel_unlock);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);

    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LinkManager.fetchAttachmentMetadata(attachmentID:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v7 = type metadata accessor for TaskPriority();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v58 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v46 - v14;
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v56(v15, a1, v10);
  v57 = v17;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  v52 = v19;
  v20 = os_log_type_enabled(v18, v19);
  v50 = a3;
  v51 = v3;
  if (v20)
  {
    v21 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v60 = v48;
    *(_DWORD *)v21 = 136315394;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v47 = v18;
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v60);
    v49 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v55 = *(void (**)(char *, uint64_t))(v11 + 8);
    v55(v15, v10);
    *(_WORD *)(v21 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v24 = v54;
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v24);
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v60);
    a2 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18 = v47;
    _os_log_impl(&dword_1A0DB3000, v47, (os_log_type_t)v52, "Received request to fetch attachmentMetadata: %s with priority: %s", (uint8_t *)v21, 0x16u);
    v28 = v48;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v28, -1, -1);
    MEMORY[0x1A1B05CC4](v21, -1, -1);
  }
  else
  {
    v55 = *(void (**)(char *, uint64_t))(v11 + 8);
    v55(v15, v10);
  }

  v29 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x130);
  v30 = *(_QWORD *)(v29() + 16);
  v31 = v58;
  if (v30)
  {
    v32 = 0;
    v33 = *(_QWORD *)(type metadata accessor for LinkManager.Attachment(0) - 8);
    v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v35 = *(_QWORD *)(v33 + 72);
    while ((static UUID.== infix(_:_:)() & 1) == 0)
    {
      ++v32;
      v34 += v35;
      if (v30 == v32)
      {
        swift_bridgeObjectRelease();
        v31 = v58;
        goto LABEL_12;
      }
    }
    v45 = swift_bridgeObjectRelease();
    result = ((uint64_t (*)(uint64_t))v29)(v45);
    if (v32 >= *(_QWORD *)(result + 16))
    {
      __break(1u);
    }
    else
    {
      outlined init with copy of Participant(result + v34, v50, type metadata accessor for LinkManager.Attachment);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
    v56(v31, a1, v10);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = v31;
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v60 = v40;
      *(_DWORD *)v39 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v41 = dispatch thunk of CustomStringConvertible.description.getter();
      v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v55(v38, v10);
      _os_log_impl(&dword_1A0DB3000, v36, v37, "Failed to find attachment with attachmentID %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v40, -1, -1);
      MEMORY[0x1A1B05CC4](v39, -1, -1);
    }
    else
    {
      v55(v31, v10);
    }

    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *v43 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t LinkManager.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t LinkManager.Attachment.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*LinkManager.Attachment.id.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

double LinkManager.Attachment.sentTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 20));
}

uint64_t LinkManager.Attachment.sentTime.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for LinkManager.Attachment(0);
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*LinkManager.Attachment.sentTime.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for LinkManager.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.Attachment.source.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of LinkManager.Attachment.Source(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t LinkManager.Attachment.source.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = v3 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 24);
  result = outlined consume of LinkManager.Attachment.Source(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = a3 & 1;
  return result;
}

uint64_t (*LinkManager.Attachment.source.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for LinkManager.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.Attachment.file.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 28);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t LinkManager.Attachment.file.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 28);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LinkManager.Attachment.file.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for LinkManager.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t LinkManager.Attachment.state.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 32));
  outlined copy of LinkManager.Attachment.State(v1);
  return v1;
}

unint64_t LinkManager.Attachment.state.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;

  v3 = *(int *)(type metadata accessor for LinkManager.Attachment(0) + 32);
  result = outlined consume of LinkManager.Attachment.State(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*LinkManager.Attachment.state.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for LinkManager.Attachment(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.messageReceived(messenger:message:)()
{
  _QWORD *v0;
  uint64_t result;
  void (*v2)(uint64_t, unint64_t, uint64_t, char *);
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  if (result)
  {
    v2 = (void (*)(uint64_t, unint64_t, uint64_t, char *))result;
    v3 = UnreliableMessenger.Message.data.getter();
    v5 = v4;
    v6 = UnreliableMessenger.Message.fromParticipantID.getter();
    v7 = 1;
    v2(v3, v5, v6, &v7);
    outlined consume of Data._Representation(v3, v5);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
  return result;
}

void LinkManager.messengerClosed(_:reason:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(void);
  void *v3;
  _BYTE *v4;

  if ((static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0
    || (static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0)
  {
    v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
    if (v1)
    {
      v2 = (void (*)(void))v1;
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      v3 = (void *)swift_allocError();
      *v4 = 2;
      v2();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);

    }
  }
}

uint64_t protocol witness for UnreliableMessengerDelegate.messageReceived(messenger:message:) in conformance LinkManager()
{
  _QWORD *v0;
  uint64_t result;
  void (*v2)(uint64_t, unint64_t, uint64_t, char *);
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  if (result)
  {
    v2 = (void (*)(uint64_t, unint64_t, uint64_t, char *))result;
    v3 = UnreliableMessenger.Message.data.getter();
    v5 = v4;
    v6 = UnreliableMessenger.Message.fromParticipantID.getter();
    v7 = 1;
    v2(v3, v5, v6, &v7);
    outlined consume of Data._Representation(v3, v5);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
  return result;
}

void protocol witness for UnreliableMessengerDelegate.messengerClosed(_:reason:) in conformance LinkManager()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(void);
  void *v3;
  _BYTE *v4;

  if ((static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0
    || (static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0)
  {
    v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
    if (v1)
    {
      v2 = (void (*)(void))v1;
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      v3 = (void *)swift_allocError();
      *v4 = 2;
      v2();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);

    }
  }
}

BOOL static LinkManager.LinkError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LinkManager.LinkError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t LinkManager.isResumed.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v1, sel_lock);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_state);
  objc_msgSend(v1, sel_unlock);
  return v2;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v9 = v14;
  }
  v10 = *(_QWORD *)(v9 + 48);
  v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for LinkManager.Attachment(0);
    v14 = *(_QWORD *)(v13 - 8);
    outlined init with take of Participant(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for LinkManager.Attachment);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for LinkManager.Attachment(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of GroupSessionTable.Storage(*(_QWORD *)(v9 + 56) + 24 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = xmmword_1A0F0FA70;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  double result;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v10 = v12;
    }
    outlined init with take of TopicManager.ConversationClient.Service(*(_QWORD *)(v10 + 56) + 48 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v10);
    *v3 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 40) = -1;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v12 = v16;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 16 * v8;
    v14 = *(_QWORD *)v13;
    v15 = *(_BYTE *)(v13 + 8);
    LOBYTE(v13) = *(_BYTE *)(v13 + 9);
    *(_QWORD *)a3 = v14;
    *(_BYTE *)(a3 + 8) = v15;
    *(_BYTE *)(a3 + 9) = v13;
    specialized _NativeDictionary._delete(at:)(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_WORD *)(a3 + 8) = 1280;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  double result;
  uint64_t v17;

  v8 = v5;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v8;
    v17 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v17;
    }
    swift_bridgeObjectRelease();
    a3(*(_QWORD *)(v15 + 56) + 40 * v12, a5);
    specialized _NativeDictionary._delete(at:)(v12, v15);
    *v8 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID();
  v37 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v10 * v12;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v10 * v12, v4);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (a1 * v15 < v16
              || *(_QWORD *)(a2 + 48) + a1 * v15 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a1 * v15 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LinkManager.Attachment(0) - 8) + 72);
            v24 = v23 * a1;
            result = v22 + v23 * a1;
            v25 = v23 * v10;
            v26 = v22 + v23 * v10 + v23;
            if (v24 < v25 || result >= v26)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v24 != v25)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for CodingUserInfoKey();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (result + 1) & v11;
      v12 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v31(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            result = v22 + 24 * a1;
            if (a1 < (uint64_t)v10 || result >= v22 + 24 * v10 + 24)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v12 = v15;
              v13 = v17;
            }
            else
            {
              v23 = a1 == v10;
              a1 = v10;
              v12 = v15;
              v13 = v17;
              if (!v23)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                v12 = v15;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = v16 + 24 * v3;
            v18 = (__int128 *)(v16 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 24))
            {
              v9 = *v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (__int128 *)(v15 + 48 * v3);
          v17 = (__int128 *)(v15 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v16 >= v17 + 3 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            v10 = v17[2];
            v16[1] = v17[1];
            v16[2] = v10;
            *v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt32 v11;
  Swift::UInt16 v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = 8 * v6;
        v10 = *(_QWORD *)(a2 + 48) + 8 * v6;
        v11 = *(_DWORD *)v10;
        v12 = *(_WORD *)(v10 + 4);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        result = Hasher._finalize()();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_QWORD *)(v14 + 8 * v3);
        v16 = (_QWORD *)(v14 + v9);
        if (8 * v3 != v9 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0)
                                    - 8)
                        + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_DWORD *)(v10 + 4 * v6);
        result = MEMORY[0x1A1B053D0](*(_QWORD *)(a2 + 40), *v11, 4);
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_DWORD *)(v10 + 4 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation)
                                    - 8)
                        + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unint64_t lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError;
  if (!lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LinkManager.LinkError, &type metadata for LinkManager.LinkError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError;
  if (!lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LinkManager.LinkError, &type metadata for LinkManager.LinkError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError);
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors;
  if (!lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LinkManager.Errors, &type metadata for LinkManager.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors;
  if (!lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LinkManager.Errors, &type metadata for LinkManager.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors);
  }
  return result;
}

uint64_t type metadata accessor for LinkManager.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, type metadata singleton initialization cache for LinkManager.Attachment);
}

uint64_t partial apply for closure #1 in LinkManager.fetchAttachmentLedgerTopic()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in LinkManager.fetchAttachmentLedgerTopic()(a1, v4, v5, v6);
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E0DBD2F8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;

  v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OS_dispatch_queue(0, a2);
  lazy protocol witness table accessor for type CPParticipant and conformance NSObject(a4, a2);
  result = Set.init(minimumCapacity:)();
  v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v11)
      return v17;
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
      return v17;
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = MEMORY[0x1A1B05010](i, a1);
        a5(&v16, v13);

      }
    }
    else
    {
      v14 = (void **)(a1 + 32);
      do
      {
        v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for LinkManager.Attachment(0);
  v8 = *(_QWORD *)(v27 - 8);
  v9 = MEMORY[0x1E0C80A78](v27);
  v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v23 = (uint64_t)&v22 - v11;
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_3;
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_3:
      v13 = MEMORY[0x1E0DEE9D8];
      v24 = a1;
      v25 = a1 & 0xC000000000000001;
      v14 = 4;
      v22 = a2;
      while (1)
      {
        v15 = v14 - 4;
        if (v25)
        {
          a1 = MEMORY[0x1A1B05010](v14 - 4, a1);
          v16 = __OFADD__(v15, 1);
          v17 = v14 - 3;
          if (v16)
            goto LABEL_20;
        }
        else
        {
          a1 = *(_QWORD *)(a1 + 8 * v14);
          swift_retain();
          v16 = __OFADD__(v15, 1);
          v17 = v14 - 3;
          if (v16)
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        v28 = a1;
        closure #1 in closure #1 in LinkManager.attachmentLedgerTopic.willset((uint64_t *)&v28, a2, (uint64_t)v7);
        if (v2)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v13;
        }
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v27) == 1)
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
        }
        else
        {
          v18 = v23;
          outlined init with take of Participant((uint64_t)v7, v23, type metadata accessor for LinkManager.Attachment);
          outlined init with take of Participant(v18, v26, type metadata accessor for LinkManager.Attachment);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
          v20 = *(_QWORD *)(v13 + 16);
          v19 = *(_QWORD *)(v13 + 24);
          if (v20 >= v19 >> 1)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v13);
          *(_QWORD *)(v13 + 16) = v20 + 1;
          outlined init with take of Participant(v26, v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20, type metadata accessor for LinkManager.Attachment);
          a2 = v22;
        }
        ++v14;
        a1 = v24;
        if (v17 == v12)
        {
          swift_bridgeObjectRelease();
          return v13;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  _UNKNOWN **v53;

  v45 = a4;
  v46 = a5;
  v43 = a2;
  v44 = a3;
  v39 = a1;
  v9 = type metadata accessor for Asset.Protector();
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x1E0C80A78](v11);
  v36 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SymmetricKey();
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  MEMORY[0x1E0C80A78](v13);
  v35 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v32 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for AssetManager();
  v53 = &protocol witness table for AssetManager;
  *(_QWORD *)&v51 = a6;
  swift_defaultActor_initialize();
  v31 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition>);
  v29 = 8
      * *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition)
                              - 8)
                  + 72);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1A0F14320;
  LOBYTE(v47) = 0;
  v50 = 1;
  v49 = 0;
  lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State();
  lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 1;
  v50 = 2;
  v49 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  v50 = 5;
  v49 = 3;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  v50 = 2;
  v49 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  v50 = 2;
  v49 = 7;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  v50 = 5;
  v49 = 5;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 3;
  v50 = 3;
  v49 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  v50 = 3;
  v49 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 1;
  v50 = 5;
  v49 = 1;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>);
  swift_allocObject();
  *(_QWORD *)(a7 + v31) = StateMachine.init(initialState:transitions:)();
  *(_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask) = 0;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler) = 0;
  v16 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  LOBYTE(v47) = 0;
  v17 = v32;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v16, v17, v34);
  *(_QWORD *)(a7 + 112) = v39;
  swift_retain();
  static SymmetricKeySize.bits256.getter();
  v18 = v35;
  SymmetricKey.init(size:)();
  v20 = v37;
  v19 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, v18, v38);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  outlined copy of Data._Representation(v47, v48);
  v21 = v40;
  Asset.Protector.init(securityKey:privacyKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector, v21, v42);
  outlined init with take of TypedPayloadDecoding(&v51, a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  v22 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, v43, v23);
  v24 = (_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  v25 = v45;
  *v24 = v44;
  v24[1] = v25;
  v26 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  v27 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, v46, v27);
  return a7;
}

uint64_t partial apply for closure #1 in LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in LinkManager.fetchAttachment(attachmentID:)(a1, a2, a3, v3);
}

uint64_t outlined init with copy of LinkManager.Attachment?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of LinkManager.Attachment.Source(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined consume of Data?(a1, a2);
  else
    return swift_release();
}

uint64_t type metadata accessor for LinkManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for LinkManager);
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

unint64_t outlined copy of LinkManager.Attachment.State(unint64_t result)
{
  if (result >= 3)
    return swift_retain();
  return result;
}

uint64_t sub_1A0EBC1E8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0EBC20C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = (int *)type metadata accessor for LinkManager.Attachment(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v11 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v7 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v7(v0 + v3, v4);
  outlined consume of LinkManager.Attachment.Source(*(_QWORD *)(v0 + v3 + v1[6]), *(_QWORD *)(v0 + v3 + v1[6] + 8), *(_BYTE *)(v0 + v3 + v1[6] + 16));
  v8 = v0 + v3 + v1[7];
  v9 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  if (*(_QWORD *)(v0 + v3 + v1[8]) >= 3uLL)
    swift_release();
  swift_release();
  v7(v0 + ((((v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for LinkManager.Attachment(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for UUID();
  v7 = v1[2];
  v8 = v1[3];
  v9 = (int *)v1[4];
  v10 = v1[5];
  v11 = v1[6];
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(a1, v7, v8, v9, v10, v11, (uint64_t)v1 + v5, v12);
}

uint64_t outlined copy of LinkManager.Attachment.Source(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined copy of Data?(a1, a2);
  else
    return swift_retain();
}

unint64_t outlined consume of LinkManager.Attachment.State(unint64_t result)
{
  if (result >= 3)
    return swift_release();
  return result;
}

uint64_t outlined assign with copy of LinkManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A0EBC524@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EBC564(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x100);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0EBC5A4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EBC5E4(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x120);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0EBC624@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x130))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EBC664(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x138);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0EBC6A4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EBC6E4(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x170);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0EBC724@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x198))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A0EBC768(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1A0))(*a1);
}

uint64_t ObjC metadata update function for LinkManager()
{
  return type metadata accessor for LinkManager(0);
}

void type metadata completion function for LinkManager()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>, &demangling cache variable for type metadata for AttachmentLedgerTopic?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>, &demangling cache variable for type metadata for [LinkManager.Attachment]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UUID();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Participant();
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for LinkManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of LinkManager.$attachmentLedgerTopic.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of LinkManager.attachments.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of LinkManager.attachments.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of LinkManager.attachments.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of LinkManager.$attachments.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of LinkManager.__allocating_init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t dispatch thunk of LinkManager.resume()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of LinkManager.close()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t getEnumTagSinglePayload for LinkManager.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkManager.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A0EBCDE0 + 4 * byte_1A0F14335[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A0EBCE14 + 4 * byte_1A0F14330[v4]))();
}

uint64_t sub_1A0EBCE14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBCE1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EBCE24);
  return result;
}

uint64_t sub_1A0EBCE30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EBCE38);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A0EBCE3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBCE44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Errors()
{
  return &type metadata for LinkManager.Errors;
}

_QWORD *initializeBufferWithCopyOfBuffer for LinkManager.Attachment(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
LABEL_6:
    swift_retain();
    return a1;
  }
  v7 = type metadata accessor for UUID();
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v9 = (char *)a1 + v8;
  v10 = *(_QWORD *)((char *)a2 + v8);
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  v12 = *((_BYTE *)a2 + v8 + 16);
  outlined copy of LinkManager.Attachment.Source(v10, v11, v12);
  *(_QWORD *)v9 = v10;
  *((_QWORD *)v9 + 1) = v11;
  v9[16] = v12;
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[8];
  v18 = *(_QWORD *)((char *)a2 + v17);
  if (v18 >= 3)
  {
    *(_QWORD *)((char *)a1 + v17) = v18;
    goto LABEL_6;
  }
  *(_QWORD *)((char *)a1 + v17) = v18;
  return a1;
}

unint64_t destroy for LinkManager.Attachment(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  outlined consume of LinkManager.Attachment.Source(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8), *(_BYTE *)(a1 + a2[6] + 16));
  v5 = a1 + a2[7];
  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  result = *(_QWORD *)(a1 + a2[8]);
  if (result >= 3)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_BYTE *)(a2 + v7 + 16);
  outlined copy of LinkManager.Attachment.Source(v9, v10, v11);
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 16) = v11;
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = *(_QWORD *)(a2 + v16);
  if (v17 >= 3)
    v17 = swift_retain();
  *(_QWORD *)(a1 + v16) = v17;
  return a1;
}

uint64_t assignWithCopy for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  outlined copy of LinkManager.Attachment.Source(*(_QWORD *)v9, v11, v12);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  v15 = *(_BYTE *)(v8 + 16);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  outlined consume of LinkManager.Attachment.Source(v13, v14, v15);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[8];
  v21 = (unint64_t *)(a1 + v20);
  v22 = *(_QWORD *)(a2 + v20);
  if (*(_QWORD *)(a1 + v20) >= 3uLL)
  {
    if (v22 >= 3)
    {
      *v21 = v22;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1 + v20, (uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
      *v21 = *(_QWORD *)(a2 + v20);
    }
  }
  else
  {
    *v21 = v22;
    if (v22 >= 3)
      swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  outlined consume of LinkManager.Attachment.Source(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[8];
  v19 = (unint64_t *)(a1 + v18);
  v20 = *(_QWORD *)(a2 + v18);
  if (*(_QWORD *)(a1 + v18) >= 3uLL)
  {
    if (v20 >= 3)
    {
      *v19 = v20;
      swift_release();
      return a1;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1 + v18, (uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
    v20 = *(_QWORD *)(a2 + v18);
  }
  *v19 = v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EBD3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 3;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EBD48C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for URL();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 + 2);
  return result;
}

uint64_t type metadata completion function for LinkManager.Attachment()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LinkManager.Attachment.Source(uint64_t a1)
{
  return outlined consume of LinkManager.Attachment.Source(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LinkManager.Attachment.Source(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LinkManager.Attachment.Source(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of LinkManager.Attachment.Source(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of LinkManager.Attachment.Source(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment.Source(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for LinkManager.Attachment.Source(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for LinkManager.Attachment.Source(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Attachment.Source()
{
  return &type metadata for LinkManager.Attachment.Source;
}

uint64_t *initializeBufferWithCopyOfBuffer for LinkManager.Attachment.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for LinkManager.Attachment.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for LinkManager.Attachment.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for LinkManager.Attachment.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Attachment.State()
{
  return &type metadata for LinkManager.Attachment.State;
}

uint64_t storeEnumTagSinglePayload for LinkManager.LinkError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0EBD9C8 + 4 * byte_1A0F1433F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0EBD9FC + 4 * byte_1A0F1433A[v4]))();
}

uint64_t sub_1A0EBD9FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBDA04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EBDA0CLL);
  return result;
}

uint64_t sub_1A0EBDA18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EBDA20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0EBDA24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBDA2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.LinkError()
{
  return &type metadata for LinkManager.LinkError;
}

uint64_t storeEnumTagSinglePayload for LinkManager.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EBDA94 + 4 * byte_1A0F14349[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EBDAC8 + 4 * byte_1A0F14344[v4]))();
}

uint64_t sub_1A0EBDAC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBDAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EBDAD8);
  return result;
}

uint64_t sub_1A0EBDAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EBDAECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EBDAF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EBDAF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LinkManager.State()
{
  return &unk_1E44F7B10;
}

unint64_t lazy protocol witness table accessor for type LinkManager.State and conformance LinkManager.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State;
  if (!lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LinkManager.State, &unk_1E44F7B10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State);
  }
  return result;
}

uint64_t sub_1A0EBDB5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ())(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed Error) -> (@out ())(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed SendReliability) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t *, uint64_t);
  uint64_t v7;
  _QWORD v8[2];

  v5 = *(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  return v5(v8, &v7, a4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @in_guaranteed SendReliability) -> ()(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v3 + 16))(*a1, a1[1], *a2, a3);
}

void partial apply for closure #1 in LinkManager.attachmentLedgerTopic.willset(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in LinkManager.attachmentLedgerTopic.willset(a1, v2, a2);
}

void partial apply for closure #2 in LinkManager.attachmentLedgerTopic.willset(uint64_t a1)
{
  uint64_t v1;

  closure #2 in LinkManager.attachmentLedgerTopic.willset(a1, v1);
}

uint64_t lazy protocol witness table accessor for type CPParticipant and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for OS_dispatch_queue(255, a2);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.State, &type metadata for AttachmentUploadTask.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.State, &type metadata for AttachmentUploadTask.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.Event, &type metadata for AttachmentUploadTask.Event);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.Event, &type metadata for AttachmentUploadTask.Event);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event);
  }
  return result;
}

uint64_t sub_1A0EBDCE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Participant() - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of (key: UInt64, value: PubSubTopic.Participant)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AttachmentUploadTask.__allocating_init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = swift_allocObject();
  v13 = *(_QWORD *)(a6 + 24);
  v14 = *(_QWORD *)(a6 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(a1, a2, a3, a4, a5, (uint64_t)v17, v12, v13, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

BOOL static AttachmentUploadTask.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AttachmentUploadTask.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AttachmentUploadTask.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL static AttachmentUploadTask.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AttachmentUploadTask.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int AttachmentUploadTask.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t AttachmentUploadTask.topic.getter()
{
  return swift_retain();
}

uint64_t AttachmentUploadTask.file.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8], a1);
}

uint64_t AttachmentUploadTask.developerMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8));
  return v1;
}

uint64_t AttachmentUploadTask.id.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], a1);
}

uint64_t AttachmentUploadTask.key.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA93C8], a1);
}

uint64_t AttachmentUploadTask.file.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t key path getter for AttachmentUploadTask.protector : AttachmentUploadTask@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  v4 = type metadata accessor for Asset.Protector();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for AttachmentUploadTask.protector : AttachmentUploadTask(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Asset.Protector();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.protector.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  v4 = type metadata accessor for Asset.Protector();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AttachmentUploadTask.protector.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  v4 = type metadata accessor for Asset.Protector();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*AttachmentUploadTask.protector.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path setter for AttachmentUploadTask.assetManager : AttachmentUploadTask(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[2];

  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v5);
  v3 = *a2 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(v5, v3);
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.assetManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a1);
}

uint64_t AttachmentUploadTask.assetManager.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(a1, v3);
  return swift_endAccess();
}

uint64_t (*AttachmentUploadTask.assetManager.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t AttachmentUploadTask.topicUploadTask.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t AttachmentUploadTask.topicUploadTask.setter(uint64_t a1)
{
  return AttachmentUploadTask.topicUploadTask.setter(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask);
}

uint64_t (*AttachmentUploadTask.topicUploadTask.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t AttachmentUploadTask.signalHandler.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t AttachmentUploadTask.signalHandler.setter(uint64_t a1)
{
  return AttachmentUploadTask.topicUploadTask.setter(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
}

uint64_t AttachmentUploadTask.topicUploadTask.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_release();
}

uint64_t (*AttachmentUploadTask.signalHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for AttachmentUploadTask.state : AttachmentUploadTask@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for AttachmentUploadTask.state : AttachmentUploadTask()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t AttachmentUploadTask.state.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AttachmentUploadTask.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*AttachmentUploadTask.state.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t key path getter for AttachmentUploadTask.$state : AttachmentUploadTask()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for AttachmentUploadTask.$state : AttachmentUploadTask(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t AttachmentUploadTask.$state.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.$state.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*AttachmentUploadTask.$state.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return SystemCoordinatorHostManager.$configurations.modify;
}

uint64_t AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v13 = *(_QWORD *)(a6 + 24);
  v14 = *(_QWORD *)(a6 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(a1, a2, a3, a4, a5, (uint64_t)v17, v6, v13, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

uint64_t AttachmentUploadTask.start()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[68] = v0;
  v2 = type metadata accessor for SimultaneousTransferError();
  v1[69] = v2;
  v1[70] = *(_QWORD *)(v2 - 8);
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v3 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v1[73] = v3;
  v1[74] = *(_QWORD *)(v3 - 8);
  v1[75] = swift_task_alloc();
  v4 = type metadata accessor for Asset();
  v1[76] = v4;
  v1[77] = *(_QWORD *)(v4 - 8);
  v1[78] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[79] = swift_task_alloc();
  v5 = *(_QWORD *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) - 8);
  v1[80] = v5;
  v1[81] = *(_QWORD *)(v5 + 64);
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  v6 = type metadata accessor for AssetSkeleton();
  v1[86] = v6;
  v1[87] = *(_QWORD *)(v6 - 8);
  v1[88] = swift_task_alloc();
  v1[89] = swift_task_alloc();
  v1[90] = swift_task_alloc();
  v1[91] = swift_task_alloc();
  v7 = type metadata accessor for UploadToken();
  v1[92] = v7;
  v1[93] = *(_QWORD *)(v7 - 8);
  v1[94] = swift_task_alloc();
  v8 = type metadata accessor for TaskPriority();
  v1[95] = v8;
  v1[96] = *(_QWORD *)(v8 - 8);
  v1[97] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for uploadTask != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[98] = __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[97];
    v15 = v0[96];
    v14 = v0[95];
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = AttachmentUploadTask.description.getter();
    v0[64] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, v14);
    v0[56] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Received request to start with priority: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[99] = v12;
  *v12 = v0;
  v12[1] = AttachmentUploadTask.start();
  return AttachmentUploadTask.requestUploadToken()(v0[94]);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  _QWORD *v4;

  v2 = *v1;
  v2[100] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[101] = (uint64_t)v4;
  *v4 = v2;
  v4[1] = AttachmentUploadTask.start();
  return AttachmentUploadTask.createAssetUploadCoordinator(_:)((uint64_t)(v2 + 7), v2[94]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 816) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t);
  uint64_t v16;

  outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v0 + 16);
  outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 176);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v14 = v2;
    v3 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v16 = v13;
    *(_DWORD *)v3 = 136315394;
    v4 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 256);
    outlined init with copy of URL?(v0 + 256, v0 + 296, &demangling cache variable for type metadata for AssetUploadCoordinator?);
    if (*(_QWORD *)(v0 + 320))
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 296), v0 + 136);
      outlined init with copy of AudioSessionAssertionManager(v0 + 136, v0 + 96);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetUploadCoordinator);
      v6 = String.init<A>(reflecting:)();
      v8 = v7;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
    }
    else
    {
      v8 = 0xE300000000000000;
      v6 = 7104878;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 256, &demangling cache variable for type metadata for AssetUploadCoordinator?);
    *(_QWORD *)(v0 + 520) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    _os_log_impl(&dword_1A0DB3000, v1, v14, "%s Attempting to fetch skeleton from coordinator %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
  }
  else
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  }

  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v9);
  v15 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v10 + 8) + *(_QWORD *)(v10 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 824) = v11;
  *v11 = v0;
  v11[1] = AttachmentUploadTask.start();
  return v15(*(_QWORD *)(v0 + 728), v9, v10);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  NSObject *log;
  uint64_t (*v55)(_QWORD, uint64_t, uint64_t);
  uint64_t v56[2];

  v1 = v0 + 16;
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 696) + 16);
  v2(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 688));
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v53 = v4;
    log = v3;
    v49 = *(_QWORD *)(v0 + 720);
    v50 = *(_QWORD *)(v0 + 696);
    v5 = *(_QWORD *)(v0 + 688);
    v6 = *(_QWORD *)(v0 + 680);
    v51 = *(_QWORD *)(v0 + 672);
    v7 = swift_slowAlloc();
    v52 = swift_slowAlloc();
    v56[0] = v52;
    *(_DWORD *)v7 = 136315394;
    v8 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v2(v6, v49, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v6, 0, 1, v5);
    outlined init with copy of URL?(v6, v51, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v5) == 1)
    {
      v10 = 0xE300000000000000;
      v11 = 7104878;
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 712);
      v17 = *(_QWORD *)(v0 + 704);
      v18 = *(_QWORD *)(v0 + 696);
      v19 = *(_QWORD *)(v0 + 688);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 32))(v16, *(_QWORD *)(v0 + 672), v19);
      v2(v17, v16, v19);
      v11 = String.init<A>(reflecting:)();
      v10 = v20;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
    }
    v21 = *(_QWORD *)(v0 + 720);
    v22 = *(_QWORD *)(v0 + 696);
    v23 = *(_QWORD *)(v0 + 688);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 680), &demangling cache variable for type metadata for AssetSkeleton?);
    *(_QWORD *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v15(v21, v23);
    _os_log_impl(&dword_1A0DB3000, log, v53, "%s Fetched skeleton: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v52, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);

    v1 = v0 + 16;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 720);
    v13 = *(_QWORD *)(v0 + 696);
    v14 = *(_QWORD *)(v0 + 688);
    swift_release_n();
    v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v15(v12, v14);

  }
  *(_QWORD *)(v0 + 832) = v15;
  v24 = *(_QWORD *)(v0 + 816);
  v25 = *(_QWORD *)(v0 + 664);
  v26 = *(_QWORD *)(v0 + 544);
  v27 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  *(_QWORD *)(v0 + 840) = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  AssetSkeleton.uploadRequest(id:key:developerMetadata:)(v26 + v27, v26 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, *(_QWORD *)(v26 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata), *(_QWORD *)(v26 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8), v25);
  if (v24)
  {
    v28 = *(_QWORD *)(v0 + 752);
    v29 = *(_QWORD *)(v0 + 744);
    v30 = *(_QWORD *)(v0 + 736);
    v15(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 688));
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 664);
    v33 = *(_QWORD *)(v0 + 656);
    v34 = *(_QWORD *)(v0 + 648);
    v35 = *(_QWORD *)(v0 + 640);
    v36 = *(_QWORD *)(v0 + 632);
    v37 = *(_QWORD *)(v0 + 544);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 768) + 56))(v36, 1, 1, *(_QWORD *)(v0 + 760));
    outlined init with copy of AttachmentLedgerTopic.UploadRequest(v32, v33);
    outlined init with copy of AudioSessionAssertionManager(v1, v0 + 216);
    v38 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AttachmentUploadTask and conformance AttachmentUploadTask, (uint64_t (*)(uint64_t))type metadata accessor for AttachmentUploadTask, (uint64_t)&protocol conformance descriptor for AttachmentUploadTask);
    v39 = (*(unsigned __int8 *)(v35 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v40 = (_QWORD *)v1;
    v41 = (v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (_QWORD *)swift_allocObject();
    v42[2] = v37;
    v42[3] = v38;
    v42[4] = v37;
    outlined init with take of AttachmentLedgerTopic.UploadRequest(v33, (uint64_t)v42 + v39);
    outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 216), (uint64_t)v42 + v41);
    swift_retain_n();
    v43 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentUploadTask.start(), (uint64_t)v42);
    v44 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask;
    *(_QWORD *)(v0 + 848) = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask;
    v45 = (uint64_t *)(v37 + v44);
    swift_beginAccess();
    *v45 = v43;
    swift_release();
    v46 = *(_QWORD *)(v0 + 40);
    v47 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1(v40, v46);
    v55 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v47 + 24) + *(_QWORD *)(v47 + 24));
    v48 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 856) = v48;
    *v48 = v0;
    v48[1] = AttachmentUploadTask.start();
    return v55(*(_QWORD *)(v0 + 624), v46, v47);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 864) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[77] + 8))(v2[78], v2[76]);
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _BYTE *v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50[2];

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v50[0] = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s finished upload", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_BYTE *)(v0 + 961) = 4;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 544);
    v8 = *(_QWORD *)(v7 + *(_QWORD *)(v0 + 848));
    *(_QWORD *)(v0 + 872) = v8;
    if (v8)
    {
      swift_retain();
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 880) = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *v9 = v0;
      v9[1] = AttachmentUploadTask.start();
      return Task.value.getter();
    }
    v38 = (uint64_t *)(v7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    v39 = *v38;
    if (v39)
    {
      swift_retain();
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A1B04B54](v39, MEMORY[0x1E0DEE9C0] + 8, v40, MEMORY[0x1E0DEDB38]);
      swift_release();
    }
    v41 = *(_QWORD *)(v0 + 840);
    v42 = *(_QWORD *)(v0 + 544);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 592) + 104))(*(_QWORD *)(v0 + 600), *MEMORY[0x1E0D14900], *(_QWORD *)(v0 + 584));
    v43 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 896) = v43;
    *v43 = v0;
    v43[1] = AttachmentUploadTask.start();
    return AttachmentLedgerTopic.updateProgress(on:with:)(v42 + v41, *(_QWORD *)(v0 + 600));
  }
  else
  {
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    v10 = (void *)swift_allocError();
    *v11 = 0;
    swift_willThrow();
    *(_QWORD *)(v0 + 912) = v10;
    swift_retain();
    v12 = v10;
    swift_retain();
    v13 = v10;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v50[0] = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      *(_QWORD *)(v0 + 432) = v10;
      v20 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v21 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v14, v15, "%s Failed to upload, reason: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      MEMORY[0x1A1B05CC4](v16, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    *(_BYTE *)(v0 + 960) = 5;
    if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
    {
      v23 = *(_QWORD *)(v0 + 848);
      v24 = *(_QWORD *)(v0 + 544);
      v25 = *(_QWORD *)(v24 + v23);
      if (v25)
      {
        swift_retain();
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        MEMORY[0x1A1B04B54](v25, MEMORY[0x1E0DEE9C0] + 8, v26, MEMORY[0x1E0DEDB38]);
        swift_release();
        v27 = *(_QWORD *)(v24 + v23);
        *(_QWORD *)(v0 + 920) = v27;
        if (v27)
        {
          swift_retain();
          v28 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 928) = v28;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          *v28 = v0;
          v28[1] = AttachmentUploadTask.start();
          return Task.value.getter();
        }
        v24 = *(_QWORD *)(v0 + 544);
      }
      v44 = (uint64_t *)(v24 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
      swift_beginAccess();
      v45 = *v44;
      if (v45)
      {
        swift_retain();
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        MEMORY[0x1A1B04B54](v45, MEMORY[0x1E0DEE9C0] + 8, v46, MEMORY[0x1E0DEDB38]);
        swift_release();
      }
      v47 = *(_QWORD *)(v0 + 840);
      v48 = *(_QWORD *)(v0 + 544);
      v49 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 944) = v49;
      *v49 = v0;
      v49[1] = AttachmentUploadTask.start();
      return AttachmentLedgerTopic.remove(id:)(v48 + v47);
    }
    else
    {
      v30 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
      v31 = *(_QWORD *)(v0 + 752);
      v32 = *(_QWORD *)(v0 + 744);
      v33 = *(_QWORD *)(v0 + 736);
      v34 = *(_QWORD *)(v0 + 728);
      v35 = *(_QWORD *)(v0 + 688);
      v36 = *(_QWORD *)(v0 + 664);
      swift_allocError();
      *v37 = 0;
      swift_willThrow();

      outlined destroy of AttachmentLedgerTopic.UploadRequest(v36);
      v30(v34, v35);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 888) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  swift_release();
  v1 = (uint64_t *)(v0[68] + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    swift_retain();
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A1B04B54](v2, MEMORY[0x1E0DEE9C0] + 8, v3, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  v4 = v0[105];
  v5 = v0[68];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[74] + 104))(v0[75], *MEMORY[0x1E0D14900], v0[73]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[112] = v6;
  *v6 = v0;
  v6[1] = AttachmentUploadTask.start();
  return AttachmentLedgerTopic.updateProgress(on:with:)(v5 + v4, v0[75]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 904) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[74] + 8))(v2[75], v2[73]);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 744);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 688);
  outlined destroy of AttachmentLedgerTopic.UploadRequest(*(_QWORD *)(v0 + 664));
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;

  v1 = *(void **)(v0 + 816);
  *(_QWORD *)(v0 + 536) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 552));
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v18 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 528) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v6, -1, -1);
      MEMORY[0x1A1B05CC4](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v12 = *(void **)(v0 + 816);
    v13 = *(_QWORD *)(v0 + 752);
    v14 = *(_QWORD *)(v0 + 744);
    v15 = *(_QWORD *)(v0 + 736);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v16 = 1;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 752);
    v10 = *(_QWORD *)(v0 + 744);
    v11 = *(_QWORD *)(v0 + 736);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 936) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  swift_release();
  v1 = (uint64_t *)(v0[68] + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    swift_retain();
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A1B04B54](v2, MEMORY[0x1E0DEE9C0] + 8, v3, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  v4 = v0[105];
  v5 = v0[68];
  v6 = (_QWORD *)swift_task_alloc();
  v0[118] = v6;
  *v6 = v0;
  v6[1] = AttachmentUploadTask.start();
  return AttachmentLedgerTopic.remove(id:)(v5 + v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 952) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 912);
  *(_QWORD *)(v0 + 504) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v27 = v0 + 16;
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 552));
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v28 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v6, -1, -1);
      MEMORY[0x1A1B05CC4](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v17 = *(void **)(v0 + 912);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v19 = *(_QWORD *)(v0 + 752);
    v20 = *(_QWORD *)(v0 + 744);
    v21 = *(_QWORD *)(v0 + 736);
    v22 = *(_QWORD *)(v0 + 728);
    v23 = *(_QWORD *)(v0 + 688);
    v24 = *(_QWORD *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v25 = 1;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v24);
    v18(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v10 = *(_QWORD *)(v0 + 752);
    v11 = *(_QWORD *)(v0 + 744);
    v12 = *(_QWORD *)(v0 + 736);
    v13 = *(_QWORD *)(v0 + 728);
    v14 = *(_QWORD *)(v0 + 688);
    v15 = *(_QWORD *)(v0 + 664);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v15);
    v9(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34[2];

  v1 = *(void **)(v0 + 864);
  *(_QWORD *)(v0 + 912) = v1;
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34[0] = v33;
    *(_DWORD *)v6 = 136315394;
    v7 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 432) = v1;
    v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Failed to upload, reason: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v33, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  *(_BYTE *)(v0 + 960) = 5;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v12 = *(_QWORD *)(v0 + 848);
    v13 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v13 + v12);
    if (v14)
    {
      swift_retain();
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A1B04B54](v14, MEMORY[0x1E0DEE9C0] + 8, v15, MEMORY[0x1E0DEDB38]);
      swift_release();
      v16 = *(_QWORD *)(v13 + v12);
      *(_QWORD *)(v0 + 920) = v16;
      if (v16)
      {
        swift_retain();
        v17 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 928) = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        *v17 = v0;
        v17[1] = AttachmentUploadTask.start();
        return Task.value.getter();
      }
      v13 = *(_QWORD *)(v0 + 544);
    }
    v27 = (uint64_t *)(v13 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    v28 = *v27;
    if (v28)
    {
      swift_retain();
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A1B04B54](v28, MEMORY[0x1E0DEE9C0] + 8, v29, MEMORY[0x1E0DEDB38]);
      swift_release();
    }
    v30 = *(_QWORD *)(v0 + 840);
    v31 = *(_QWORD *)(v0 + 544);
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 944) = v32;
    *v32 = v0;
    v32[1] = AttachmentUploadTask.start();
    return AttachmentLedgerTopic.remove(id:)(v31 + v30);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v20 = *(_QWORD *)(v0 + 752);
    v21 = *(_QWORD *)(v0 + 744);
    v22 = *(_QWORD *)(v0 + 736);
    v23 = *(_QWORD *)(v0 + 728);
    v24 = *(_QWORD *)(v0 + 688);
    v25 = *(_QWORD *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v26 = 0;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v25);
    v19(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34[2];

  v1 = *(void **)(v0 + 888);
  *(_QWORD *)(v0 + 912) = v1;
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34[0] = v33;
    *(_DWORD *)v6 = 136315394;
    v7 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 432) = v1;
    v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Failed to upload, reason: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v33, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  *(_BYTE *)(v0 + 960) = 5;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v12 = *(_QWORD *)(v0 + 848);
    v13 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v13 + v12);
    if (v14)
    {
      swift_retain();
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A1B04B54](v14, MEMORY[0x1E0DEE9C0] + 8, v15, MEMORY[0x1E0DEDB38]);
      swift_release();
      v16 = *(_QWORD *)(v13 + v12);
      *(_QWORD *)(v0 + 920) = v16;
      if (v16)
      {
        swift_retain();
        v17 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 928) = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        *v17 = v0;
        v17[1] = AttachmentUploadTask.start();
        return Task.value.getter();
      }
      v13 = *(_QWORD *)(v0 + 544);
    }
    v27 = (uint64_t *)(v13 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    v28 = *v27;
    if (v28)
    {
      swift_retain();
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A1B04B54](v28, MEMORY[0x1E0DEE9C0] + 8, v29, MEMORY[0x1E0DEDB38]);
      swift_release();
    }
    v30 = *(_QWORD *)(v0 + 840);
    v31 = *(_QWORD *)(v0 + 544);
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 944) = v32;
    *v32 = v0;
    v32[1] = AttachmentUploadTask.start();
    return AttachmentLedgerTopic.remove(id:)(v31 + v30);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v20 = *(_QWORD *)(v0 + 752);
    v21 = *(_QWORD *)(v0 + 744);
    v22 = *(_QWORD *)(v0 + 736);
    v23 = *(_QWORD *)(v0 + 728);
    v24 = *(_QWORD *)(v0 + 688);
    v25 = *(_QWORD *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v26 = 0;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v25);
    v19(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v19 = *(_QWORD *)(v0 + 744);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v21 = *(_QWORD *)(v0 + 736);
    v22 = *(_QWORD *)(v0 + 752);
    v17 = *(_QWORD *)(v0 + 688);
    v18 = *(_QWORD *)(v0 + 728);
    v15 = *(id *)(v0 + 904);
    v16 = *(_QWORD *)(v0 + 664);
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v23 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v16);
    v20(v18, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
  }
  else
  {
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v8 = *(_QWORD *)(v0 + 752);
    v9 = *(_QWORD *)(v0 + 744);
    v10 = *(_QWORD *)(v0 + 736);
    v11 = *(_QWORD *)(v0 + 728);
    v12 = *(_QWORD *)(v0 + 688);
    v13 = *(_QWORD *)(v0 + 664);

    swift_release_n();
    outlined destroy of AttachmentLedgerTopic.UploadRequest(v13);
    v7(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 744);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 688);
  v7 = *(_QWORD *)(v0 + 664);

  outlined destroy of AttachmentLedgerTopic.UploadRequest(v7);
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  void *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void *v37;
  uint64_t v38;
  uint64_t v39[2];

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.fault.getter();
  v38 = v0 + 16;
  if (os_log_type_enabled(v1, v2))
  {
    v37 = *(void **)(v0 + 952);
    v3 = swift_slowAlloc();
    v4 = swift_slowAlloc();
    v39[0] = v4;
    *(_DWORD *)v3 = 136315394;
    v5 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "%s Failed to remove attachment %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
    v9 = v37;
  }
  else
  {
    v10 = *(void **)(v0 + 952);
    swift_release_n();
    v9 = v10;
  }

  v11 = *(void **)(v0 + 912);
  *(_QWORD *)(v0 + 504) = v11;
  v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 552));
    swift_retain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v39[0] = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v13, v14, "%s caught SimultaneousTransferError", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v16, -1, -1);
      MEMORY[0x1A1B05CC4](v15, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v27 = *(void **)(v0 + 912);
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v29 = *(_QWORD *)(v0 + 752);
    v30 = *(_QWORD *)(v0 + 744);
    v31 = *(_QWORD *)(v0 + 736);
    v32 = *(_QWORD *)(v0 + 728);
    v33 = *(_QWORD *)(v0 + 688);
    v34 = *(_QWORD *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v35 = 1;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v34);
    v28(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v26 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    v20 = *(_QWORD *)(v0 + 752);
    v21 = *(_QWORD *)(v0 + 744);
    v22 = *(_QWORD *)(v0 + 736);
    v23 = *(_QWORD *)(v0 + 728);
    v24 = *(_QWORD *)(v0 + 688);
    v25 = *(_QWORD *)(v0 + 664);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v25);
    v19(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v26 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v26();
}

uint64_t AttachmentUploadTask.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(69);
  v0._object = (void *)0x80000001A0F1BD60;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A6369706F74202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  swift_retain();
  v2._countAndFlagsBits = AttachmentLedgerTopic.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  v3._countAndFlagsBits = 0x203A656C6966202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A6469202CLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A6574617473202CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  dispatch thunk of StateMachine.currentState.getter();
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t AssetSkeleton.uploadRequest(id:key:developerMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a5;
  v58 = a4;
  v60 = a3;
  v64 = a2;
  v63 = a1;
  v5 = type metadata accessor for URL();
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  MEMORY[0x1E0C80A78](v5);
  v59 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Asset.ID();
  v51 = *(_QWORD *)(v54 - 8);
  v7 = MEMORY[0x1E0C80A78](v54);
  v53 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v47 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for SymmetricKey();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v62 = v17;
  v21(v20, v63, v17);
  v63 = v14;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23 = v64;
  v64 = v13;
  v22(v16, v23, v13);
  type metadata accessor for AssetSkeleton();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AssetSkeleton and conformance AssetSkeleton, (uint64_t (*)(uint64_t))MEMORY[0x1E0D109A0], MEMORY[0x1E0D109B0]);
  v24 = v61;
  v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v24)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v64);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v62);
  }
  else
  {
    v49 = v26;
    v50 = v25;
    v48 = v16;
    outlined copy of Data?(v60, v58);
    v61 = 0;
    AssetSkeleton.assetID.getter();
    Asset.ID.storageLocation.getter();
    v28 = v57;
    v29 = *(void (**)(char *, uint64_t))(v51 + 8);
    v30 = v12;
    v31 = v54;
    v29(v30, v54);
    v32 = v52;
    AssetSkeleton.assetID.getter();
    v51 = Asset.ID.signature.getter();
    v47 = v33;
    v29(v32, v31);
    v34 = v53;
    AssetSkeleton.assetID.getter();
    v35 = Asset.ID.referenceSignature.getter();
    v37 = v36;
    swift_release();
    v29(v34, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v28, v20, v62);
    v38 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v28 + v38[5], v48, v64);
    v39 = (uint64_t *)(v28 + v38[6]);
    v40 = v49;
    *v39 = v50;
    v39[1] = v40;
    v41 = (_QWORD *)(v28 + v38[7]);
    v42 = v59;
    v43 = v58;
    *v41 = v60;
    v41[1] = v43;
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v55 + 32))(v28 + v38[8], v42, v56);
    v44 = (uint64_t *)(v28 + v38[9]);
    v45 = v47;
    *v44 = v51;
    v44[1] = v45;
    v46 = (uint64_t *)(v28 + v38[10]);
    *v46 = v35;
    v46[1] = v37;
  }
  return result;
}

uint64_t closure #1 in AttachmentUploadTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AttachmentUploadTask.start()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v1;
  *v1 = v0;
  v1[1] = closure #1 in AttachmentUploadTask.start();
  return AttachmentLedgerTopic.upload(request:)(*(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for uploadTask != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A0DB3000, v2, v3, "UploadTask was cancelled after upload was successful.", v4, 2u);
      MEMORY[0x1A1B05CC4](v4, -1, -1);
    }

  }
  else
  {
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    v9 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of AudioSessionAssertionManager(v6, v0 + 16);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 16), (uint64_t)(v10 + 4));
    v10[9] = v9;
    v11 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in AttachmentUploadTask.start(), (uint64_t)v10);
    v12 = (uint64_t *)(v7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    *v12 = v11;
    swift_release();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AttachmentUploadTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[8] = a4;
  v5[9] = a5;
  v6 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v7 = type metadata accessor for UUID();
  v5[13] = v7;
  v5[14] = *(_QWORD *)(v7 - 8);
  v5[15] = swift_task_alloc();
  v8 = type metadata accessor for Signal();
  v5[16] = v8;
  v5[17] = *(_QWORD *)(v8 - 8);
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Signal?);
  v5[19] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>);
  v5[20] = v9;
  v5[21] = *(_QWORD *)(v9 - 8);
  v5[22] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Iterator);
  v5[23] = v10;
  v5[24] = *(_QWORD *)(v10 - 8);
  v5[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AttachmentUploadTask.start()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[8];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v0[26] = JSONEncoder.init()();
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v0[27] = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  return v6(v0[22], v2, v3);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[21];
  v1 = v0[22];
  v3 = v0[20];
  MEMORY[0x1A1B04BE4](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v4 = (_QWORD *)swift_task_alloc();
  v0[28] = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
  {
    *(_DWORD *)(v2 + 304) = *MEMORY[0x1E0D148F8];
    *(_QWORD *)(v2 + 232) = 0;
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[19];
  v2 = v0[16];
  v3 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[24] + 8))(v0[25], v0[23]);
    swift_release();
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v0[18], v1, v2);
  Strong = swift_weakLoadStrong();
  v0[30] = Strong;
  if (!Strong)
  {
    v13 = v0[25];
    v14 = v0[23];
    v15 = v0[24];
    v17 = v0[17];
    v16 = v0[18];
    v18 = v0[16];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    goto LABEL_7;
  }
  v5 = v0[29];
  static Task<>.checkCancellation()();
  v0[31] = v5;
  if (v5)
  {
    v6 = v0[25];
    v7 = v0[23];
    v8 = v0[24];
    v10 = v0[17];
    v9 = v0[18];
    v11 = v0[16];
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  v0[32] = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[33] = *(_QWORD *)(v0[30] + v0[32]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v0 + 308) = 7;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
    return swift_task_switch();
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 112);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  v1 = *(void **)(v0 + 248);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 240) + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id, *(_QWORD *)(v0 + 104));
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Signal and conformance Signal, (uint64_t (*)(uint64_t))MEMORY[0x1E0D109F0], MEMORY[0x1E0D10A00]);
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    if (one-time initialization token for uploadTask != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.uploadTask);
    swift_retain();
    v3 = v1;
    swift_retain();
    v4 = v1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 128);
    if (v7)
    {
      v27 = *(_QWORD *)(v0 + 144);
      v26 = *(_QWORD *)(v0 + 136);
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v28[0] = v13;
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v0 + 48) = v8;
      type metadata accessor for AttachmentUploadTask();
      swift_retain();
      v14 = String.init<A>(reflecting:)();
      *(_QWORD *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v28);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      *(_QWORD *)(v0 + 56) = v1;
      v16 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v17 = String.init<A>(reflecting:)();
      *(_QWORD *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v28);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v5, v6, "%s failed to update progress blob, error: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v13, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v11);
    }
    else
    {

      swift_release_n();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v25;
    *v25 = v0;
    v25[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
  else
  {
    v19 = *(unsigned int *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 80);
    Attachment.UpdatingBlob.init(data:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104))(v20, v19, v22);
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v23;
    *v23 = v0;
    v23[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
    return AttachmentLedgerTopic.updateProgress(on:with:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc();
  v4 = v2[14];
  v3 = v2[15];
  v5 = v2[13];
  (*(void (**)(_QWORD, _QWORD))(v2[11] + 8))(v2[12], v2[10]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[37] = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    *(_QWORD *)(v2 + 232) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (void *)v0[36];
  if (one-time initialization token for uploadTask != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.uploadTask);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[30];
  v10 = v0[17];
  v9 = v0[18];
  v11 = v0[16];
  if (v7)
  {
    v22 = v0[18];
    v21 = v0[17];
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v23 = v13;
    *(_DWORD *)v12 = 136315394;
    v0[6] = v8;
    type metadata accessor for AttachmentUploadTask();
    swift_retain();
    v14 = String.init<A>(reflecting:)();
    *(_QWORD *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[7] = v1;
    v16 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(reflecting:)();
    *(_QWORD *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "%s failed to update progress blob, error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v11);
  }
  else
  {

    swift_release_n();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  v19 = (_QWORD *)swift_task_alloc();
  v0[37] = v19;
  *v19 = v0;
  v19[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t AttachmentUploadTask.requestUploadToken()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for TaskPriority();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentUploadTask.requestUploadToken()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];

  if (one-time initialization token for uploadTask != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 88) = __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315394;
    v23[0] = v6;
    v7 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v4, v21);
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Requesting upload token with priority: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine);
  *(_BYTE *)(v0 + 120) = 0;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v12;
    *v12 = v0;
    v12[1] = AttachmentUploadTask.requestUploadToken();
    return AttachmentLedgerTopic.requestUploadToken()(*(_QWORD *)(v0 + 48));
  }
  else
  {
    swift_retain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v23[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v14, v15, "%s Can't execute state change for .fetchToken event", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      MEMORY[0x1A1B05CC4](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *v20 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v1 = *(void **)(v0 + 112);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 112);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to fetch uploadToken for reason: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v11 = *(void **)(v0 + 112);

  }
  *(_BYTE *)(v0 + 121) = 1;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1A0DB3000, v12, v13, "Failed to transition to a failure state from fetchTokenFailure", v14, 2u);
      MEMORY[0x1A1B05CC4](v14, -1, -1);
    }

  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentUploadTask.createAssetUploadCoordinator(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  v4 = type metadata accessor for Date();
  v3[21] = v4;
  v3[22] = *(_QWORD *)(v4 - 8);
  v3[23] = swift_task_alloc();
  type metadata accessor for Credential();
  v3[24] = swift_task_alloc();
  v5 = type metadata accessor for Asset.Protector();
  v3[25] = v5;
  v3[26] = *(_QWORD *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v3[28] = v6;
  v3[29] = *(_QWORD *)(v6 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v7 = type metadata accessor for AssetUploadRequest();
  v3[32] = v7;
  v3[33] = *(_QWORD *)(v7 - 8);
  v3[34] = swift_task_alloc();
  v8 = type metadata accessor for TaskPriority();
  v3[35] = v8;
  v3[36] = *(_QWORD *)(v8 - 8);
  v3[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UploadToken?);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v9 = type metadata accessor for UploadToken();
  v3[40] = v9;
  v3[41] = *(_QWORD *)(v9 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentUploadTask.createAssetUploadCoordinator(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  _BYTE *v49;
  id v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  NSObject *log;
  uint64_t v76;
  uint64_t (*v77)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v78[2];

  if (one-time initialization token for uploadTask != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 360) = __swift_project_value_buffer(v5, (uint64_t)static Log.uploadTask);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  if (v9)
  {
    v73 = v8;
    log = v7;
    v64 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 304);
    v14 = swift_slowAlloc();
    v71 = swift_slowAlloc();
    v78[0] = v71;
    *(_DWORD *)v14 = 136315650;
    v15 = AttachmentUploadTask.description.getter();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v78);
    v17 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v6(v13, v64, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
    outlined init with copy of URL?(v13, v66, &demangling cache variable for type metadata for UploadToken?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v66, 1, v11) == 1)
    {
      v18 = 0xE300000000000000;
      v19 = 7104878;
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 336);
      v21 = *(_QWORD *)(v0 + 344);
      v22 = *(_QWORD *)(v0 + 320);
      v23 = *(_QWORD *)(v0 + 328);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 32))(v21, *(_QWORD *)(v0 + 304), v22);
      v17(v20, v21, v22);
      v19 = String.init<A>(reflecting:)();
      v18 = v24;
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    v25 = *(_QWORD *)(v0 + 352);
    v27 = *(_QWORD *)(v0 + 320);
    v26 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 296);
    v68 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 280);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 312), &demangling cache variable for type metadata for UploadToken?);
    *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    *(_WORD *)(v14 + 22) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v28, v29);
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, log, v73, "%s Creating AssetUploadCoordinator for uploadToken: %s with priority: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v71, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);

  }
  *(_QWORD *)(v0 + 368) = *(_QWORD *)(*(_QWORD *)(v0 + 160)
                                    + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine);
  *(_BYTE *)(v0 + 393) = 2;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v33 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 232);
    v65 = *(_QWORD *)(v0 + 216);
    v63 = *(_QWORD *)(v0 + 208);
    v67 = *(_QWORD *)(v0 + 200);
    v36 = *(_QWORD *)(v0 + 160);
    v37 = v36 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
    v69 = *(_QWORD *)(v0 + 184);
    v70 = *(_QWORD *)(v0 + 176);
    v72 = *(_QWORD *)(v0 + 168);
    swift_beginAccess();
    outlined init with copy of AudioSessionAssertionManager(v37, v0 + 16);
    v76 = *(_QWORD *)(v0 + 40);
    v74 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v76);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v36 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file, v35);
    UploadToken.storageLocation.getter();
    v38 = v36 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v65, v38, v67);
    dispatch thunk of Token.accountID.getter();
    dispatch thunk of Token.token.getter();
    type metadata accessor for Credential.Builder();
    swift_allocObject();
    Credential.Builder.init(tenantName:requestorID:accessToken:)();
    dispatch thunk of Token.expirationDate.getter();
    Credential.Builder.setExpirationDate(_:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v72);
    Credential.Builder.build()();
    swift_release();
    AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)();
    v77 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v74 + 16) + *(_QWORD *)(v74 + 16));
    v39 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v39;
    *v39 = v0;
    v39[1] = AttachmentUploadTask.createAssetUploadCoordinator(_:);
    return v77(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 272), v76, v74);
  }
  else
  {
    v41 = (uint64_t *)(v0 + 112);
    swift_retain_n();
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v78[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = AttachmentUploadTask.description.getter();
      *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v78);
      v41 = (uint64_t *)(v0 + 112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v42, v43, "%s Can't execute state change for .creatingAsset event", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v45, -1, -1);
      MEMORY[0x1A1B05CC4](v44, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    v48 = (void *)swift_allocError();
    *v49 = 0;
    swift_willThrow();
    v50 = v48;
    v51 = v48;
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc();
      v55 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v54 = 138412290;
      v56 = v48;
      v57 = _swift_stdlib_bridgeErrorToNSError();
      v58 = v41;
      v59 = v57;
      *v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v55 = v59;

      _os_log_impl(&dword_1A0DB3000, v52, v53, "Failed to create assetUploadCoordinator for reason: %@", v54, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v55, -1, -1);
      MEMORY[0x1A1B05CC4](v54, -1, -1);
    }
    else
    {

    }
    *(_BYTE *)(v0 + 392) = 3;
    if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
    {
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl(&dword_1A0DB3000, v60, v61, "Failed to transition to a failure state from createAssetFailure", v62, 2u);
        MEMORY[0x1A1B05CC4](v62, -1, -1);
      }

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  v1 = *(void **)(v0 + 384);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v1;
    v9 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 112) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v9;

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to create assetUploadCoordinator for reason: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {

  }
  *(_BYTE *)(v0 + 392) = 3;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Failed to transition to a failure state from createAssetFailure", v12, 2u);
      MEMORY[0x1A1B05CC4](v12, -1, -1);
    }

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentUploadTask.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata), *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8));
  v3 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  v5 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key;
  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  v8 = type metadata accessor for Asset.Protector();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  swift_release();
  swift_release();
  v9 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AttachmentUploadTask.__deallocating_deinit()
{
  AttachmentUploadTask.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t AttachmentUploadTask.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v49 = a4;
  v50 = a5;
  v47 = a2;
  v48 = a3;
  v43 = a1;
  v12 = type metadata accessor for Asset.Protector();
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x1E0C80A78](v14);
  v40 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SymmetricKey();
  v41 = *(_QWORD *)(v16 - 8);
  v42 = v16;
  MEMORY[0x1E0C80A78](v16);
  v39 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v36 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a8;
  v57 = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(boxed_opaque_existential_1, a6, a8);
  swift_defaultActor_initialize();
  v35 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition>);
  v33 = 8
      * *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition)
                              - 8)
                  + 72);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1A0F14320;
  LOBYTE(v51) = 0;
  v54 = 1;
  v53 = 0;
  lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State();
  lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 1;
  v54 = 2;
  v53 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  v54 = 5;
  v53 = 3;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  v54 = 2;
  v53 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  v54 = 2;
  v53 = 7;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  v54 = 5;
  v53 = 5;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 3;
  v54 = 3;
  v53 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  v54 = 3;
  v53 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 1;
  v54 = 5;
  v53 = 1;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>);
  swift_allocObject();
  *(_QWORD *)(a7 + v35) = StateMachine.init(initialState:transitions:)();
  *(_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask) = 0;
  *(_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler) = 0;
  v20 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  LOBYTE(v51) = 0;
  v21 = v36;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v20, v21, v38);
  *(_QWORD *)(a7 + 112) = v43;
  swift_retain();
  static SymmetricKeySize.bits256.getter();
  v22 = v39;
  SymmetricKey.init(size:)();
  v24 = v41;
  v23 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, v22, v42);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  outlined copy of Data._Representation(v51, v52);
  v25 = v44;
  Asset.Protector.init(securityKey:privacyKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector, v25, v46);
  outlined init with take of TypedPayloadDecoding(&v55, a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  v26 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, v47, v27);
  v28 = (_QWORD *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  v29 = v49;
  *v28 = v48;
  v28[1] = v29;
  v30 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  v31 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v30, v50, v31);
  return a7;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.Errors, &type metadata for AttachmentUploadTask.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentUploadTask.Errors, &type metadata for AttachmentUploadTask.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors);
  }
  return result;
}

uint64_t outlined init with copy of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AttachmentUploadTask()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AttachmentUploadTask;
  if (!type metadata singleton initialization cache for AttachmentUploadTask)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A0EC5DD8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease();
  swift_release();
  v5 = v0 + v3;
  v6 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  v7 = v0 + v3 + v1[5];
  v8 = type metadata accessor for SymmetricKey();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  outlined consume of Data._Representation(*(_QWORD *)(v5 + v1[6]), *(_QWORD *)(v5 + v1[6] + 8));
  v9 = (uint64_t *)(v0 + v3 + v1[7]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    outlined consume of Data._Representation(*v9, v10);
  v11 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v5 + v1[8];
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  outlined consume of Data._Representation(*(_QWORD *)(v5 + v1[9]), *(_QWORD *)(v5 + v1[9] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + v1[10]), *(_QWORD *)(v5 + v1[10] + 8));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v11);
  return swift_deallocObject();
}

uint64_t outlined init with take of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AttachmentUploadTask.start()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentUploadTask.start()(a1, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of AttachmentLedgerTopic.UploadRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A0EC60DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a2);
}

uint64_t sub_1A0EC6134@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_17Tm(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask, a2);
}

uint64_t sub_1A0EC6140(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask);
}

uint64_t sub_1A0EC615C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_17Tm(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler, a2);
}

uint64_t keypath_get_17Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_retain();
}

uint64_t sub_1A0EC61B8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
}

uint64_t ObjC metadata update function for AttachmentUploadTask()
{
  return type metadata accessor for AttachmentUploadTask();
}

void type metadata completion function for AttachmentUploadTask()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SymmetricKey();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Asset.Protector();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<AttachmentUploadTask.State>();
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for AttachmentUploadTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of AttachmentUploadTask.__allocating_init(topic:file:developerMetadata:id:manager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of AttachmentUploadTask.start()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 328) + *(_QWORD *)(*(_QWORD *)v0 + 328));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

void type metadata accessor for Published<AttachmentUploadTask.State>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<AttachmentUploadTask.State>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<AttachmentUploadTask.State>);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentUploadTask.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A0EC64D8 + 4 * byte_1A0F14645[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A0EC650C + 4 * byte_1A0F14640[v4]))();
}

uint64_t sub_1A0EC650C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC6514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EC651CLL);
  return result;
}

uint64_t sub_1A0EC6528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EC6530);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A0EC6534(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC653C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.State()
{
  return &type metadata for AttachmentUploadTask.State;
}

uint64_t storeEnumTagSinglePayload for AttachmentUploadTask.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EC65A4 + 4 * byte_1A0F1464F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EC65D8 + 4 * byte_1A0F1464A[v4]))();
}

uint64_t sub_1A0EC65D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC65E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EC65E8);
  return result;
}

uint64_t sub_1A0EC65F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EC65FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EC6600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC6608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.Errors()
{
  return &type metadata for AttachmentUploadTask.Errors;
}

uint64_t getEnumTagSinglePayload for AttachmentUploadTask.Event(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentUploadTask.Event(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A0EC6700 + 4 * byte_1A0F14659[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A0EC6734 + 4 * byte_1A0F14654[v4]))();
}

uint64_t sub_1A0EC6734(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC673C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EC6744);
  return result;
}

uint64_t sub_1A0EC6750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EC6758);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A0EC675C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC6764(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.Event()
{
  return &type metadata for AttachmentUploadTask.Event;
}

uint64_t sub_1A0EC67C8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0EC67EC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentUploadTask.start()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in AttachmentUploadTask.start()(a1, v4, v5, v6, v7);
}

uint64_t SceneAssociationBehavior.shouldAssociateScene.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SceneAssociationBehavior.contentIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneAssociationBehavior.preferredSceneSessionRole.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneAssociationBehavior.preferredSceneSessionRole.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SceneAssociationBehavior.preferredSceneSessionRole.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void __swiftcall SceneAssociationBehavior.init(shouldAssociateScene:contentIdentifier:preferredSceneSessionRole:)(GroupActivities::SceneAssociationBehavior *__return_ptr retstr, Swift::Bool shouldAssociateScene, Swift::String_optional contentIdentifier, Swift::String_optional preferredSceneSessionRole)
{
  retstr->shouldAssociateScene = shouldAssociateScene;
  retstr->contentIdentifier = contentIdentifier;
  retstr->preferredSceneSessionRole = preferredSceneSessionRole;
}

double one-time initialization function for default()
{
  double result;

  static SceneAssociationBehavior.default = 1;
  result = 0.0;
  *(_OWORD *)&qword_1ED0B5BF8 = 0u;
  *(__int128 *)((char *)&xmmword_1ED0B5C00 + 8) = 0u;
  return result;
}

uint64_t static SceneAssociationBehavior.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = qword_1ED0B5BF8;
  v3 = qword_1ED0B5C10;
  *(_BYTE *)a1 = static SceneAssociationBehavior.default;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static SceneAssociationBehavior.content(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

double one-time initialization function for none()
{
  double result;

  static SceneAssociationBehavior.none = 0;
  result = 0.0;
  *(_OWORD *)&qword_1EE5D94E8 = 0u;
  *(__int128 *)((char *)&xmmword_1EE5D94F0 + 8) = 0u;
  return result;
}

uint64_t static SceneAssociationBehavior.none.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for none != -1)
    swift_once();
  v2 = qword_1EE5D94E8;
  v3 = qword_1EE5D9500;
  *(_BYTE *)a1 = static SceneAssociationBehavior.none;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_1EE5D94F0;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void SceneAssociationBehavior.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = objc_msgSend(a1, sel_shouldAssociateScene);
  v5 = objc_msgSend(a1, sel_targetContentIdentifier);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  swift_bridgeObjectRetain();
  v10 = objc_msgSend(a1, sel_preferredSceneSessionRole);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();

    v12 = 0;
    v14 = 0;
  }
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = v14;
}

id SceneAssociationBehavior.tuSceneAssociationBehavior.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v1 = *(unsigned __int8 *)v0;
  v3 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  if (!v3)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    if (v4)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v5 = v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x1A1B048B4](v5, v3);
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v7 = (void *)MEMORY[0x1A1B048B4](v2, v4);
  swift_bridgeObjectRelease();
LABEL_6:
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD270]), sel_initWithTargetContentIdentifier_shouldAssociateScene_preferredSceneSessionRole_, v6, v1, v7);

  return v8;
}

BOOL specialized static SceneAssociationBehavior.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  if (!v4)
  {
    if (v7)
      return 0;
    goto LABEL_13;
  }
  if (!v7)
    return 0;
  v10 = a1[1] == a2[1] && v4 == v7;
  if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
LABEL_13:
    if (v6)
      return v9 && (v5 == v8 && v6 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    return !v9;
  }
  return result;
}

uint64_t destroy for SceneAssociationBehavior()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneAssociationBehavior(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneAssociationBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneAssociationBehavior()
{
  return &type metadata for SceneAssociationBehavior;
}

BOOL static AuthorizationPromptOptions.PromptCondition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AuthorizationPromptOptions.PromptCondition.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AuthorizationPromptOptions.PromptCondition.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AuthorizationPromptOptions.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.startForEveryone.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.startForMe.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void AuthorizationPromptOptions.promptCondition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

uint64_t AuthorizationPromptOptions.confirmReplacement.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

void __swiftcall AuthorizationPromptOptions.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(GroupActivities::AuthorizationPromptOptions *__return_ptr retstr, Swift::String_optional title, Swift::String_optional message, Swift::String_optional startForEveryone, Swift::String_optional startForMe, GroupActivities::AuthorizationPromptOptions::PromptCondition promptCondition, Swift::Bool confirmReplacement)
{
  GroupActivities::AuthorizationPromptOptions::PromptCondition v7;
  Swift::Bool v8;

  v7 = *(_BYTE *)promptCondition;
  retstr->title = title;
  retstr->message = message;
  retstr->startForEveryone = startForEveryone;
  retstr->startForMe = startForMe;
  retstr->promptCondition = v7;
  retstr->confirmReplacement = v8;
}

void __swiftcall AuthorizationPromptOptions.init(title:message:startForEveryone:startForMe:alwaysPrompt:confirmReplacement:)(GroupActivities::AuthorizationPromptOptions *__return_ptr retstr, Swift::String_optional title, Swift::String_optional message, Swift::String_optional startForEveryone, Swift::String_optional startForMe, Swift::Bool alwaysPrompt, Swift::Bool confirmReplacement)
{
  retstr->title = title;
  retstr->message = message;
  retstr->startForEveryone = startForEveryone;
  retstr->startForMe = startForMe;
  retstr->promptCondition = alwaysPrompt;
  retstr->confirmReplacement = confirmReplacement;
}

uint64_t AuthorizationPromptOptions.overrides.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v12[4];

  v1 = type metadata accessor for AuthorizationRequestOverrides.PromptCondition();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - v6;
  v8 = *v0;
  v12[2] = v0[2];
  v12[3] = v8;
  v9 = v0[4];
  v12[0] = v0[6];
  v12[1] = v9;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, **((unsigned int **)&unk_1E44FFF38 + *((char *)v0 + 64)), v1);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v1);
  v10 = objc_allocWithZone((Class)type metadata accessor for AuthorizationRequestOverrides());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)();
}

unint64_t lazy protocol witness table accessor for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition;
  if (!lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AuthorizationPromptOptions.PromptCondition, &type metadata for AuthorizationPromptOptions.PromptCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition);
  }
  return result;
}

uint64_t destroy for AuthorizationPromptOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorizationPromptOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthorizationPromptOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationPromptOptions()
{
  return &type metadata for AuthorizationPromptOptions;
}

uint64_t storeEnumTagSinglePayload for AuthorizationPromptOptions.PromptCondition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0EC7548 + 4 * byte_1A0F14965[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0EC757C + 4 * asc_1A0F14960[v4]))();
}

uint64_t sub_1A0EC757C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC7584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EC758CLL);
  return result;
}

uint64_t sub_1A0EC7598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EC75A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0EC75A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EC75AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationPromptOptions.PromptCondition()
{
  return &type metadata for AuthorizationPromptOptions.PromptCondition;
}

uint64_t SystemCoordinator.__allocating_init(clientProvider:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_allocObject();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = SystemCoordinatorTable.systemCoordinator(for:);
  return SystemCoordinator.init(clientProvider:)(a1);
}

void specialized _Streamed.yield(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.YieldResult);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 40));
  if (*(_QWORD *)(v13 + 32) == a1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 40));
    return;
  }
  *(_QWORD *)(v13 + 32) = a1;
  v14 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 40));
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 64);
    v26 = v14 + 64;
    v16 = 1 << *(_BYTE *)(v14 + 32);
    v17 = -1;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    v18 = v17 & v15;
    v27 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v19 = 0;
    while (1)
    {
      if (v18)
      {
        v20 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v21 = v20 | (v19 << 6);
      }
      else
      {
        v22 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v22 >= v27)
          goto LABEL_26;
        v23 = *(_QWORD *)(v26 + 8 * v22);
        ++v19;
        if (!v23)
        {
          v19 = v22 + 1;
          if (v22 + 1 >= v27)
            goto LABEL_26;
          v23 = *(_QWORD *)(v26 + 8 * v19);
          if (!v23)
          {
            v19 = v22 + 2;
            if (v22 + 2 >= v27)
              goto LABEL_26;
            v23 = *(_QWORD *)(v26 + 8 * v19);
            if (!v23)
            {
              v19 = v22 + 3;
              if (v22 + 3 >= v27)
                goto LABEL_26;
              v23 = *(_QWORD *)(v26 + 8 * v19);
              if (!v23)
              {
                v24 = v22 + 4;
                if (v24 >= v27)
                {
LABEL_26:
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  return;
                }
                v23 = *(_QWORD *)(v26 + 8 * v24);
                if (!v23)
                {
                  while (1)
                  {
                    v19 = v24 + 1;
                    if (__OFADD__(v24, 1))
                      break;
                    if (v19 >= v27)
                      goto LABEL_26;
                    v23 = *(_QWORD *)(v26 + 8 * v19);
                    ++v24;
                    if (v23)
                      goto LABEL_25;
                  }
LABEL_29:
                  __break(1u);
                  return;
                }
                v19 = v24;
              }
            }
          }
        }
LABEL_25:
        v18 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v19 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(v14 + 56) + *(_QWORD *)(v7 + 72) * v21, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
      v30 = a1;
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
}

void specialized _Streamed.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 40));
  v6 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = MEMORY[0x1E0DEE9E0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 40));
  v7 = 0;
  v8 = v6 + 64;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v12)
      goto LABEL_23;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_23;
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_23;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
        {
          v7 = v15 + 3;
          if (v15 + 3 >= v12)
            goto LABEL_23;
          v16 = *(_QWORD *)(v8 + 8 * v7);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v6 + 56) + *(_QWORD *)(v2 + 72) * v14, v1);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v17 = v15 + 4;
  if (v17 >= v12)
  {
LABEL_23:
    swift_release();
    return;
  }
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_23;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized _Streamed.projectedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.YieldResult);
  v24 = *(_QWORD *)(v1 - 8);
  v25 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.BufferingPolicy);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v23 - v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF07B8], v4);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v12, v8);
  v15 = *(os_unfair_lock_s **)(v0 + 16);
  v16 = (uint64_t *)&v15[4];
  v17 = v15 + 10;
  os_unfair_lock_lock(v15 + 10);
  specialized closure #1 in _Streamed.projectedValue.getter(v16, (uint64_t)v14, v26);
  os_unfair_lock_unlock(v17);
  v18 = v26[0];
  v19 = v26[1];
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = v18;
  AsyncStream.Continuation.onTermination.setter();
  v26[0] = v19;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t specialized closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  os_unfair_lock_s *v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = *(os_unfair_lock_s **)(result + 16);
    swift_retain();
    swift_release();
    os_unfair_lock_lock(v5 + 10);
    specialized closure #1 in closure #2 in _Streamed.projectedValue.getter((uint64_t)&v5[4], a3);
    os_unfair_lock_unlock(v5 + 10);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v8 & 1) != 0)
  {
    v9 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(a1 + 8);
    v18 = v11;
    *(_QWORD *)(a1 + 8) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v11 = v18;
    }
    v12 = *(_QWORD *)(v11 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 32))(v6, v12 + *(_QWORD *)(v14 + 72) * v9, v13);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *(_QWORD *)(a1 + 8) = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
}

uint64_t GroupSession.systemCoordinator.getter()
{
  _QWORD *v0;
  _QWORD *v1;

  v1[3] = v0;
  v1[4] = *v0;
  v1[5] = *v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v7;
  id v8;
  uint64_t v9;

  GroupSession.state.getter();
  v8 = v7;
  v9 = 0;
  v1 = static GroupSession.State.== infix(_:_:)(&v8, (void **)&v9);
  outlined consume of GroupSession<A>.State<A>(v7);
  if ((v1 & 1) == 0)
  {
    GroupSession.state.getter();
    v8 = v7;
    v9 = 1;
    v2 = static GroupSession.State.== infix(_:_:)(&v8, (void **)&v9);
    outlined consume of GroupSession<A>.State<A>(v7);
    if ((v2 & 1) == 0)
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 24);
  v3 = static SystemCoordinatorTable.shared;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:)
                                                                  + async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = GroupSession.systemCoordinator.getter;
  return v6(v0 + 16, v3, *(_QWORD *)(v0 + 32), (uint64_t)&protocol witness table for GroupSession<A>);
}

uint64_t GroupSession.systemCoordinator.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t SystemCoordinator.lock.getter()
{
  return swift_retain();
}

void SystemCoordinator.localParticipantState.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantState(v1 + 32, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t SystemCoordinator.localParticipantStates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantStates?(v9, (uint64_t)v8);
  v10 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return outlined init with take of SystemCoordinator.ParticipantStates((uint64_t)v8, a1);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  closure #1 in SystemCoordinator.localParticipantStates.getter(v1);
  outlined init with copy of SystemCoordinator.ParticipantStates(a1, (uint64_t)v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantStates?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t key path setter for SystemCoordinator.localParticipantStates : SystemCoordinator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemCoordinator.ParticipantStates(a1, (uint64_t)v10);
  v11 = *a2;
  outlined init with take of SystemCoordinator.ParticipantStates((uint64_t)v10, (uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v12 = v11 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantStates?((uint64_t)v6, v12);
  return swift_endAccess();
}

uint64_t closure #1 in SystemCoordinator.localParticipantStates.getter(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v5[21];

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 16) + 16);
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantState(a1 + 32, (uint64_t)v5);
  os_unfair_lock_unlock(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinator.ParticipantState, Never>);
  swift_allocObject();
  v3 = CurrentValueSubject.init(_:)();
  *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher) = v3;
  swift_retain();
  swift_release();
  v5[0] = v3;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<SystemCoordinator.ParticipantState, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinator.ParticipantState, Never>, MEMORY[0x1E0C95FB8]);
  swift_retain();
  Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>, MEMORY[0x1E0C95D90]);
  AsyncPublisher.init(_:)();
  return swift_release_n();
}

uint64_t SystemCoordinator.activeSpatialParticipantCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount)
                 + 16);
  v2 = (os_unfair_lock_s *)(v1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 40));
  v3 = *(_QWORD *)(v1 + 32);
  os_unfair_lock_unlock(v2);
  swift_release();
  return v3;
}

uint64_t key path getter for SystemCoordinator.activeSpatialParticipantCount : SystemCoordinator@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(*a1
                                        + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount)
                            + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 10;
  swift_retain();
  os_unfair_lock_lock(v5);
  specialized closure #1 in _Streamed.wrappedValue.getter(v4, &v8);
  os_unfair_lock_unlock(v5);
  v6 = v8;
  result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t key path setter for SystemCoordinator.activeSpatialParticipantCount : SystemCoordinator(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_retain();
  specialized _Streamed.yield(_:)(v1);
  return swift_release();
}

uint64_t SystemCoordinator.$activeSpatialParticipantCount.getter()
{
  swift_retain();
  specialized _Streamed.projectedValue.getter();
  return swift_release();
}

void SystemCoordinator.Configuration.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t SystemCoordinator.Configuration.spatialTemplatePreference.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 9) = v3;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.spatialTemplatePreference.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.Configuration.supportsGroupImmersiveSpace.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t SystemCoordinator.Configuration.supportsGroupImmersiveSpace.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = result;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.supportsGroupImmersiveSpace.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.Configuration.faceAppTowardsEachParticipant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t SystemCoordinator.Configuration.faceAppTowardsEachParticipant.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 11) = result;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.faceAppTowardsEachParticipant.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void SystemCoordinator.Configuration.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 9) = 0;
  *(_BYTE *)(a1 + 11) = 0;
}

void SystemCoordinator.configuration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  char v4;
  char v5;
  char v6;
  char v7;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
  v7 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  *(_BYTE *)(a1 + 10) = v6;
  *(_BYTE *)(a1 + 11) = v7;
  os_unfair_lock_unlock(v3);
}

void key path getter for SystemCoordinator.configuration : SystemCoordinator(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  os_unfair_lock_lock(v3);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v3);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = v6;
  *(_BYTE *)(a2 + 10) = v7;
  *(_BYTE *)(a2 + 11) = v8;
}

void SystemCoordinator.configuration.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  os_unfair_lock_s *v7;
  uint64_t *v8;
  double v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *((_BYTE *)a1 + 9);
  v5 = *((_BYTE *)a1 + 10);
  v6 = *((_BYTE *)a1 + 11);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  v9 = *(double *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  v10 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  *v8 = v2;
  *((_BYTE *)v8 + 8) = v3;
  *((_BYTE *)v8 + 9) = v4;
  *((_BYTE *)v8 + 10) = v5;
  *((_BYTE *)v8 + 11) = v6;
  SystemCoordinator.refreshConfiguration()();
  v12 = *((_BYTE *)v8 + 8);
  v13 = *((unsigned __int8 *)v8 + 9);
  if (v11 != v13)
    goto LABEL_9;
  if ((v10 & 1) != 0)
  {
    if ((v8[1] & 1) != 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = v9 == *(double *)v8 ? *((_BYTE *)v8 + 8) : 1;
  if ((v14 & 1) != 0)
  {
LABEL_9:
    v15 = *v8;
    v16 = v12;
    v17 = v13;
    SystemCoordinator.recomputeLocalParticipantState(withNewSpatialTemplatePreference:)((uint64_t)&v15);
  }
LABEL_10:
  os_unfair_lock_unlock(v7);
}

void SystemCoordinator.refreshConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38[3];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41[2];
  uint64_t v42;
  char v43;
  char v44;

  v1 = v0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v0 + 16) + 16));
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
  swift_beginAccess();
  v3 = *v2;
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128);
    v5 = swift_retain();
    v6 = v4(v5);
    swift_release();
    if (one-time initialization token for systemCoordinator != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.systemCoordinator);
    swift_retain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    v10 = &lazy protocol witness table cache variable for type String and conformance String;
    if (os_log_type_enabled(v8, v9))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v38[0] = v12;
      *(_DWORD *)v11 = 136315650;
      v13 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
      v14 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
      v15 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
      v16 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
      v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
      LOBYTE(v40) = v13;
      BYTE1(v40) = v14;
      BYTE2(v40) = v15;
      BYTE3(v40) = v16;
      v17 = String.init<A>(reflecting:)();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      LOBYTE(v39) = v6 > 0;
      v19 = String.init<A>(reflecting:)();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2080;
      v21 = *(_QWORD *)(v1
                      + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest
                      + 8);
      v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
      v40 = v21;
      outlined copy of SystemCoordinatorParticipantRoleRequest(v39, v21);
      v22 = String.init<A>(reflecting:)();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v10 = &lazy protocol witness table cache variable for type String and conformance String;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v8, v9, "SystemCoordinator: Setting configuration %s, isObservingGroupImmersionStyle %s, localParticipantRoleAssignmentRequest: %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v12, -1, -1);
      MEMORY[0x1A1B05CC4](v11, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v24 = v6 > 0;
    v25 = v1 + v10[168];
    v26 = *(_BYTE *)(v25 + 8);
    v27 = *(_BYTE *)(v25 + 9);
    v42 = *(_QWORD *)v25;
    v43 = v26;
    v44 = v27;
    v28 = *(_BYTE *)(v25 + 10);
    v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8);
    v41[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
    v29 = v41[0];
    v41[1] = v30;
    v31 = *(_BYTE *)(v25 + 11);
    v32 = (uint64_t *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences);
    swift_beginAccess();
    v33 = *v32;
    swift_beginAccess();
    outlined copy of SystemCoordinatorParticipantRoleRequest(v29, v30);
    swift_bridgeObjectRetain();
    v34 = swift_bridgeObjectRetain();
    v35 = specialized _NativeDictionary.mapValues<A>(_:)(v34);
    swift_bridgeObjectRelease();
    v36 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorConfiguration());
    v37 = SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(&v42, v28, v24, v41, v31, v33, v35);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client), sel_setConfiguration_, v37);

  }
  else
  {
    __break(1u);
  }
}

void SystemCoordinator.recomputeLocalParticipantState(withNewSpatialTemplatePreference:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  const os_unfair_lock *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned __int8 v16[160];

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 9);
  v5 = (const os_unfair_lock *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_assert_owner(v5);
  v6 = *(char **)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState);
  if (v6)
  {
    v7 = *(char **)&v6[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
    if (*(_QWORD *)&v7[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8])
    {
      v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
      v9 = *(_QWORD *)(v1
                     + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest
                     + 8);
      *(_OWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest) = xmmword_1A0F0FA70;
      v12 = v6;
      outlined consume of SystemCoordinatorParticipantRoleRequest(v8, v9);
      os_unfair_lock_assert_owner(v5);
      SystemCoordinator.refreshConfiguration()();

    }
    else
    {
      v13 = v2;
      v14 = v3;
      v15 = v4;
      v10 = v6;
      SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v7, &v13, (uint64_t)v16);
      swift_beginAccess();
      outlined init with copy of SystemCoordinator.ParticipantState(v1 + 32, (uint64_t)&v13);
      v11 = specialized static SystemCoordinator.ParticipantState.== infix(_:_:)((unsigned __int8 *)&v13, v16);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v13);
      if ((v11 & 1) != 0)
      {
        outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v16);

      }
      else
      {
        outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v16, (uint64_t)&v13);
        if (*(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
        {
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
        }
        swift_beginAccess();
        outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)&v13, v1 + 32);
        swift_endAccess();

        outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v16);
      }
    }
  }
}

void (*SystemCoordinator.configuration.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  char v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
  v7 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  *(_BYTE *)(a1 + 10) = v6;
  *(_BYTE *)(a1 + 11) = v7;
  os_unfair_lock_unlock(v3);
  return SystemCoordinator.configuration.modify;
}

void SystemCoordinator.configuration.modify(uint64_t a1)
{
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 9);
  v3 = *(_BYTE *)(a1 + 10);
  v4 = *(_BYTE *)(a1 + 11);
  v5 = *(_QWORD *)a1;
  v6 = v1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  SystemCoordinator.configuration.setter(&v5);
}

void SystemCoordinator.assignRole<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  unsigned __int8 v19;
  _OWORD v20[3];

  SystemCoordinator._roleAssignmentDiagnostic<A>(for:)();
  if (v19 == 255)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for SystemCoordinator.RoleAssignmentDiagnostic?);
  }
  else
  {
    outlined init with take of SystemCoordinator.RoleAssignmentDiagnostic(v18, v20);
    if (one-time initialization token for runtimeIssues != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.runtimeIssues);
    outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v20, (uint64_t)v18);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v16 = a3;
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v17 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = SystemCoordinator.RoleAssignmentDiagnostic.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v18);
      _os_log_impl(&dword_1A0DB3000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v11, -1, -1);
      v14 = v10;
      a3 = v16;
      MEMORY[0x1A1B05CC4](v14, -1, -1);

    }
    else
    {

      outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v18);
    }
    outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v20);
  }
  v15 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 16) + 16);
  os_unfair_lock_lock(v15);
  closure #1 in SystemCoordinator.assignRole<A>(_:)(v3, a1, a2, a3);
  os_unfair_lock_unlock(v15);
}

void SystemCoordinator._roleAssignmentDiagnostic<A>(for:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  os_unfair_lock_unlock(v1);
  __asm { BR              X9 }
}

void sub_1A0EC9388()
{
  uint64_t v0;

  *(_QWORD *)v0 = 1701736302;
  *(_QWORD *)(v0 + 8) = 0xE400000000000000;
  *(_BYTE *)(v0 + 40) = 1;
}

void closure #1 in SystemCoordinator.assignRole<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8);
  *v6 = v5;
  v6[1] = v9;
  outlined consume of SystemCoordinatorParticipantRoleRequest(v7, v8);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

unint64_t SystemCoordinator.RoleAssignmentDiagnostic.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;
  __int128 v11[2];
  char v12;

  outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic(v0, (uint64_t)v11);
  if (v12)
  {
    if (v12 == 1)
    {
      v2 = (void *)*((_QWORD *)&v11[0] + 1);
      v1 = *(_QWORD *)&v11[0];
      _StringGuts.grow(_:)(54);
      v3._countAndFlagsBits = 39;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      v4._countAndFlagsBits = v1;
      v4._object = v2;
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._object = (void *)0x80000001A0F1BE60;
      v5._countAndFlagsBits = 0xD000000000000033;
      String.append(_:)(v5);
      return 0;
    }
    else
    {
      return 0xD00000000000005CLL;
    }
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(v11, (uint64_t)&v10);
    _StringGuts.grow(_:)(84);
    v7._countAndFlagsBits = 0xD000000000000051;
    v7._object = (void *)0x80000001A0F1BEA0;
    String.append(_:)(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 39;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v6 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
  }
  return v6;
}

uint64_t SystemCoordinator._customTemplateDiagnostic<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  unint64_t v6;
  uint64_t v7;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  v6 = *(_QWORD *)(v5(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v6 > 4)
    return 0;
  v7 = *(_QWORD *)(v5(a2, a3) + 16);
  swift_bridgeObjectRelease();
  swift_getDynamicType();
  return v7;
}

uint64_t SystemCoordinator.SpatialTemplateDiagnostic.description.getter(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v23;

  if (a1 >= 1)
  {
    if (a1 == 1)
    {
      v2 = 0xD00000000000002CLL;
      v3 = (void *)0x80000001A0F1C140;
    }
    else
    {
      _StringGuts.grow(_:)(42);
      v2 = Int.spelledOut.getter();
      v3 = v6;
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 0xD000000000000028;
      v7._object = (void *)0x80000001A0F1C000;
      String.append(_:)(v7);
      if (a1 == 4)
      {
        _StringGuts.grow(_:)(18);
        v8 = Int.spelledOut.getter();
        v10 = v9;
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = v8;
        v23._object = v10;
        v11 = 0xD000000000000010;
        v12 = " additional seat";
LABEL_8:
        v16 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        String.append(_:)(*(Swift::String *)&v11);
        _StringGuts.grow(_:)(222);
        v17._countAndFlagsBits = 0xD000000000000049;
        v17._object = (void *)0x80000001A0F1C050;
        String.append(_:)(v17);
        v18._countAndFlagsBits = v2;
        v18._object = v3;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0xD000000000000071;
        v19._object = (void *)0x80000001A0F1C0A0;
        String.append(_:)(v19);
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v4 = 0x27206F7420;
        v5 = 0xE500000000000000;
        goto LABEL_9;
      }
    }
    _StringGuts.grow(_:)(19);
    v13 = Int.spelledOut.getter();
    v15 = v14;
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v13;
    v23._object = v15;
    v11 = 0xD000000000000011;
    v12 = " additional seats";
    goto LABEL_8;
  }
  _StringGuts.grow(_:)(245);
  v4 = 0xD0000000000000DALL;
  v5 = 0x80000001A0F1BF00;
LABEL_9:
  String.append(_:)(*(Swift::String *)&v4);
  v20._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001A0F1BFE0;
  v21._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v21);
  return 0;
}

uint64_t Int.spelledOut.getter()
{
  id v0;
  Class isa;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  objc_msgSend(v0, sel_setNumberStyle_, 5);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v2 = objc_msgSend(v0, sel_stringFromNumber_, isa);

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v3 = BinaryInteger.description.getter();

  }
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinator.SpatialTemplateDiagnostic()
{
  uint64_t *v0;

  return SystemCoordinator.SpatialTemplateDiagnostic.description.getter(*v0);
}

Swift::Void __swiftcall SystemCoordinator.resignRole()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  closure #1 in SystemCoordinator.resignRole()(v0);
  os_unfair_lock_unlock(v1);
}

void closure #1 in SystemCoordinator.resignRole()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  v4 = *(_QWORD *)(v2 + 8);
  *(_OWORD *)v2 = xmmword_1A0F0FA70;
  outlined consume of SystemCoordinatorParticipantRoleRequest(v3, v4);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

uint64_t key path getter for SystemCoordinator.spatialCatchupNeededHandler : SystemCoordinator@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(unsigned __int8 *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for SystemCoordinator.spatialCatchupNeededHandler : SystemCoordinator(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t SystemCoordinator.spatialCatchupNeededHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t SystemCoordinator.spatialCatchupNeededHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*SystemCoordinator.spatialCatchupNeededHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t SystemCoordinator._groupImmersionStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>, MEMORY[0x1E0C95FB8]);
  lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?();
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>>, MEMORY[0x1E0C958E0]);
  v5 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t SystemCoordinator.groupImmersionStyleAssertionManager.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t SystemCoordinator.groupImmersionStyleAssertionManager.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*SystemCoordinator.groupImmersionStyleAssertionManager.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t SystemCoordinator.client.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SystemCoordinator.subscriptions.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinator.subscriptions.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_subscriptions);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SystemCoordinator.subscriptions.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinator.defaultSpatialTemplatePreferences.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

void SystemCoordinator.defaultSpatialTemplatePreferences.setter(uint64_t a1)
{
  SystemCoordinator.defaultSpatialTemplatePreferences.setter(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences);
}

uint64_t (*SystemCoordinator.defaultSpatialTemplatePreferences.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemCoordinator.defaultSpatialTemplatePreferences.modify;
}

uint64_t SystemCoordinator.defaultSpatialTemplateRoles.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

void key path setter for SystemCoordinator.defaultSpatialTemplatePreferences : SystemCoordinator(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *a1;
  v6 = *a2;
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v6 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

void SystemCoordinator.defaultSpatialTemplateRoles.setter(uint64_t a1)
{
  SystemCoordinator.defaultSpatialTemplatePreferences.setter(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles);
}

void SystemCoordinator.defaultSpatialTemplatePreferences.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  swift_bridgeObjectRelease();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v2 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

uint64_t (*SystemCoordinator.defaultSpatialTemplateRoles.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemCoordinator.defaultSpatialTemplatePreferences.modify;
}

void SystemCoordinator.defaultSpatialTemplatePreferences.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16));
    SystemCoordinator.refreshConfiguration()();
  }
}

uint64_t SystemCoordinator.init(clientProvider:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2[12] = a1;
  v2[13] = v1;
  v2[14] = *v1;
  v3 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  v2[15] = v3;
  v2[16] = *(_QWORD *)(v3 - 8);
  v2[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SystemCoordinator.init(clientProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 1;
  *(_BYTE *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  v6 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v4 + v6, 1, 1, v1);
  v7 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount;
  *(_QWORD *)(v0 + 152) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _Streamed<Int>);
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<_Streamed<Int>.State, os_unfair_lock_s>);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 40) = 0;
  v10 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v4 + v7) = v8;
  v11 = v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_WORD *)(v11 + 9) = 0;
  *(_BYTE *)(v11 + 11) = 0;
  v12 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler;
  *(_QWORD *)(v0 + 160) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler;
  v13 = (_QWORD *)(v4 + v12);
  *v13 = 0;
  v13[1] = 0;
  v14 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject;
  *(_QWORD *)(v0 + 168) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject;
  *(_BYTE *)(v0 + 192) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>);
  swift_allocObject();
  *(_QWORD *)(v4 + v14) = CurrentValueSubject.init(_:)();
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_subscriptions) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher) = 0;
  v15 = (_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences) = v10;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles) = v10;
  v16 = v3[3];
  v17 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v16);
  v20 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v17 + 8) + *(_QWORD *)(v17 + 8));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v18;
  *v18 = v0;
  v18[1] = SystemCoordinator.init(clientProvider:);
  return v20(v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 184);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD **)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 104);
    v5 = v4[3];
    v6 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v5);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_canBeInitialSpatialDriver) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6) & 1;
    v7 = (_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client);
    *v7 = v1;
    v7[1] = v2;
    v8 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for AssertionManager();
    v9 = (_QWORD *)swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    swift_unknownObjectRetain();
    v9[4] = Lock.init()();
    v9[5] = 0;
    v9[2] = partial apply for closure #1 in SystemCoordinator.init(clientProvider:);
    v9[3] = v8;
    v10 = (_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
    swift_beginAccess();
    *v10 = v9;
    swift_release();
    v11 = v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client;
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
    ObjectType = swift_getObjectType();
    v14 = swift_allocObject();
    swift_weakInit();
    v15 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 16);
    swift_unknownObjectRetain();
    swift_retain();
    v15(partial apply for closure #2 in SystemCoordinator.init(clientProvider:), v14, ObjectType, v12);
    swift_release();
    swift_unknownObjectRelease();
    v16 = *(_QWORD *)(v11 + 8);
    v17 = swift_getObjectType();
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = *(void (**)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v16 + 40);
    swift_unknownObjectRetain();
    swift_retain();
    v19(partial apply for closure #3 in SystemCoordinator.init(clientProvider:), v18, v17, v16);
    swift_release();
    swift_unknownObjectRelease();
    v20 = v4[3];
    v21 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v20);
    *(_QWORD *)(v0 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>, MEMORY[0x1E0C95D90]);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    SystemCoordinator.localParticipantStates.getter(v26);
    swift_unknownObjectRelease();
    outlined destroy of SystemCoordinator.ParticipantStates(v26);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 104);
    v23 = (uint64_t *)(v22 + *(_QWORD *)(v0 + 160));
    v24 = v22 + *(_QWORD *)(v0 + 144);
    swift_release();
    outlined destroy of SystemCoordinator.ParticipantState(v22 + 32);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v24, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v23);
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of SystemCoordinatorParticipantRoleRequest(*(_QWORD *)(v22 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest), *(_QWORD *)(v22 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    v3 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(*(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t SystemCoordinator.init(clientProvider:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[8] = v2;
  v3[9] = a1;
  v3[10] = a2;
  v3[23] = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in SystemCoordinator.init(clientProvider:)()
{
  uint64_t result;
  os_unfair_lock_s *v1;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(os_unfair_lock_s **)(result + 16);
    swift_retain();
    os_unfair_lock_lock(v1 + 4);
    SystemCoordinator.refreshConfiguration()();
    os_unfair_lock_unlock(v1 + 4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in SystemCoordinator.init(clientProvider:)()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for systemCoordinator != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.systemCoordinator);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A0DB3000, v2, v3, "Server disconnected", v4, 2u);
      MEMORY[0x1A1B05CC4](v4, -1, -1);
    }

    SystemCoordinator.resetPublishedProperties()();
    return swift_release();
  }
  return result;
}

uint64_t SystemCoordinator.resetPublishedProperties()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t ObjectType;

  v1 = v0;
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Resetting published properties", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }

  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v6);
  closure #1 in SystemCoordinator.resetPublishedProperties()(v1);
  os_unfair_lock_unlock(v6);
  CurrentValueSubject.send(_:)();
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);
}

uint64_t closure #3 in SystemCoordinator.init(clientProvider:)(void *a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    SystemCoordinator.update(with:isInitial:)(a1, 0);
    return swift_release();
  }
  return result;
}

uint64_t SystemCoordinator.update(with:isInitial:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  os_unfair_lock_s *v16;
  _BYTE *v17;
  void *v18;
  char v19;
  char v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  void (**v25)(BOOL);
  void (*v26)(BOOL);
  char *v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  _BYTE v32[160];
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36[22];

  v3 = v2;
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
  v7 = a1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v36[0] = v11;
    *(_DWORD *)v10 = 136315138;
    type metadata accessor for SystemCoordinatorState();
    v12 = v7;
    v13 = String.init<A>(reflecting:)();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v8, v9, "Updating with state=%s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);

  }
  else
  {

  }
  v15 = *(void **)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState) = v7;

  v16 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 16) + 16);
  v17 = v7;
  os_unfair_lock_lock(v16);
  v18 = *(void **)&v17[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
  v19 = *(_BYTE *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  v20 = *(_BYTE *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  v34 = v19;
  v35 = v20;
  v21 = v18;
  SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v21, &v33, (uint64_t)v36);
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantState(v3 + 32, (uint64_t)&v33);
  v22 = specialized static SystemCoordinator.ParticipantState.== infix(_:_:)((unsigned __int8 *)&v33, (unsigned __int8 *)v36);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v33);
  if ((v22 & 1) != 0)
  {
    os_unfair_lock_unlock(v16);
  }
  else
  {
    v23 = *(_BYTE *)(v3 + 32);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v36, (uint64_t)&v33);
    v24 = (v23 ^ 1) & v33;
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v33);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v36, (uint64_t)v32);
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
    {
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
    }
    swift_beginAccess();
    outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)v32, v3 + 32);
    swift_endAccess();
    os_unfair_lock_unlock(v16);
    if ((v24 & 1) != 0)
    {
      v25 = (void (**)(BOOL))(v3
                                       + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
      swift_beginAccess();
      v26 = *v25;
      if (*v25)
      {
        if ((a2 & 1) != 0)
          v27 = (char *)v3;
        else
          v27 = v21;
        v28 = &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_canBeInitialSpatialDriver;
        if ((a2 & 1) == 0)
          v28 = &OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator;
        v29 = v27[*v28];
        swift_retain();
        v26((v29 & 1) == 0);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v26);
      }
    }
  }
  v30 = *(_QWORD *)&v17[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount];
  swift_retain();
  specialized _Streamed.yield(_:)(v30);
  swift_release();
  LOBYTE(v33) = v17[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle];
  CurrentValueSubject.send(_:)();
  return outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v36);
}

uint64_t closure #4 in SystemCoordinator.init(clientProvider:)(unsigned __int8 *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (v1)
      SystemCoordinator.fetchInitialState()();
    else
      SystemCoordinator.finishPublishedProperties()();
    return swift_release();
  }
  return result;
}

void SystemCoordinator.fetchInitialState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  void *v7;
  _QWORD v8[6];

  v1 = v0;
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Fetching initial state", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }

  v6 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client);
  v8[4] = partial apply for closure #1 in SystemCoordinator.fetchInitialState();
  v8[5] = v1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ();
  v8[3] = &block_descriptor_10;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestCurrentState_, v7);
  _Block_release(v7);
}

uint64_t SystemCoordinator.finishPublishedProperties()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t ObjectType;

  v1 = v0;
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Finishing published properties", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
  {
    swift_retain();
    CurrentValueSubject.send(completion:)();
    swift_release();
  }
  CurrentValueSubject.send(completion:)();
  swift_retain();
  specialized _Streamed.finish()();
  swift_release();
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(ObjectType, v6);
}

uint64_t closure #1 in SystemCoordinator.resetPublishedProperties()(uint64_t a1)
{
  _BYTE v3[16];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v4 = 0u;
  v9 = 0;
  v10 = 1;
  v3[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
  {
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)v3, a1 + 32);
  return swift_endAccess();
}

uint64_t SystemCoordinator.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of SystemCoordinator.ParticipantState(v0 + 32);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler));
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of SystemCoordinatorParticipantRoleRequest(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest), *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SystemCoordinator.__deallocating_deinit()
{
  SystemCoordinator.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantStates?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SystemCoordinator.ParticipantStates?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in _Streamed.wrappedValue.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 16);
  return result;
}

_OWORD *outlined init with take of SystemCoordinator.RoleAssignmentDiagnostic(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SystemCoordinator.RoleAssignmentDiagnostic(a2, a1);
  return a2;
}

uint64_t outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1)
{
  destroy for SystemCoordinator.RoleAssignmentDiagnostic(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SystemCoordinatorState.GroupImmersionStyle?);
    v2 = lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle();
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEE998], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_1A0ECB9B4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemCoordinator.init(clientProvider:)()
{
  return closure #1 in SystemCoordinator.init(clientProvider:)();
}

uint64_t partial apply for closure #2 in SystemCoordinator.init(clientProvider:)()
{
  return closure #2 in SystemCoordinator.init(clientProvider:)();
}

uint64_t partial apply for closure #3 in SystemCoordinator.init(clientProvider:)(void *a1)
{
  return closure #3 in SystemCoordinator.init(clientProvider:)(a1);
}

uint64_t partial apply for closure #4 in SystemCoordinator.init(clientProvider:)(unsigned __int8 *a1)
{
  return closure #4 in SystemCoordinator.init(clientProvider:)(a1);
}

uint64_t sub_1A0ECB9F8@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.localParticipantStates.getter(a1);
}

void sub_1A0ECBA28(uint64_t a1)
{
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 9);
  v3 = *(_BYTE *)(a1 + 10);
  v4 = *(_BYTE *)(a1 + 11);
  v5 = *(_QWORD *)a1;
  v6 = v1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  SystemCoordinator.configuration.setter(&v5);
}

uint64_t sub_1A0ECBA84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_20Tm(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences, a2);
}

void sub_1A0ECBA90(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  key path setter for SystemCoordinator.defaultSpatialTemplatePreferences : SystemCoordinator(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences);
}

uint64_t sub_1A0ECBAAC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_20Tm(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles, a2);
}

uint64_t keypath_get_20Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

void sub_1A0ECBB08(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  key path setter for SystemCoordinator.defaultSpatialTemplatePreferences : SystemCoordinator(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles);
}

uint64_t ObjC metadata update function for SystemCoordinator()
{
  return type metadata accessor for SystemCoordinator();
}

uint64_t type metadata accessor for SystemCoordinator()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemCoordinator;
  if (!type metadata singleton initialization cache for SystemCoordinator)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SystemCoordinator()
{
  unint64_t v0;

  type metadata accessor for SystemCoordinator.ParticipantStates?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SystemCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinator.__allocating_init(clientProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(v1 + 208) + *(_QWORD *)(v1 + 208));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:);
  return v6(a1);
}

void type metadata accessor for SystemCoordinator.ParticipantStates?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SystemCoordinator.ParticipantStates?)
  {
    type metadata accessor for SystemCoordinator.ParticipantStates(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  }
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.Configuration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 10);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.Configuration()
{
  return &type metadata for SystemCoordinator.Configuration;
}

uint64_t destroy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return swift_bridgeObjectRelease();
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1Tm(result);
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 40) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_BYTE *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v5)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTag for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.RoleAssignmentDiagnostic()
{
  return &type metadata for SystemCoordinator.RoleAssignmentDiagnostic;
}

ValueMetadata *type metadata accessor for SystemCoordinator.SpatialTemplateDiagnostic()
{
  return &type metadata for SystemCoordinator.SpatialTemplateDiagnostic;
}

uint64_t sub_1A0ECC06C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void closure #1 in SystemCoordinator.configuration.getterpartial apply(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_BYTE *)(a1 + 10) = v4;
  *(_BYTE *)(a1 + 11) = v5;
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in SystemCoordinator.fetchInitialState()(void *a1)
{
  return SystemCoordinator.update(with:isInitial:)(a1, 1);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t specialized closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  result = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    result = specialized Dictionary.subscript.setter((uint64_t)v9, v10);
    v13 = a1[2];
    *a3 = v10;
    a3[1] = v13;
  }
  return result;
}

uint64_t outlined assign with take of SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  assignWithTake for SystemCoordinator.ParticipantState(a2, a1);
  return a2;
}

uint64_t sub_1A0ECC2C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in _Streamed.projectedValue.getter(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #2 in _Streamed.projectedValue.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t GroupSession.createClient()()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[2] = 0xD00000000000002CLL;
  v0[3] = 0x80000001A0F1AB70;
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = GroupSession.createClient();
  return GroupSession.requestEndpoint(with:)(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  _UNKNOWN **v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (*(_QWORD *)(v0 + 56))
  {
    type metadata accessor for SystemCoordinatorClientConnection();
    v1 = XPCClient.__allocating_init(listenerEndpoint:)();
    v2 = &protocol witness table for SystemCoordinatorClientConnection;
  }
  else
  {
    if (one-time initialization token for systemCoordinator != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.systemCoordinator);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1A0DB3000, v4, v5, "No available endpoint for coordinator", v6, 2u);
      MEMORY[0x1A1B05CC4](v6, -1, -1);
    }

    v1 = 0;
    v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8))(v1, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v1 = *(void **)(v0 + 64);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 64);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 32) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed getting endpoint for coordinator: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t GroupSession.createClient()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupSession.isClientValidPublisher.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v22 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v23 = v5;
  type metadata accessor for GroupSession.State(255, v5, v22, a4);
  v6 = type metadata accessor for Published.Publisher();
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - v7;
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C96190], v6);
  v9 = type metadata accessor for Publishers.Map();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - v10;
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95950], v9);
  v12 = type metadata accessor for Publishers.RemoveDuplicates();
  v20 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v19 - v13;
  GroupSession.$state.getter();
  v15 = swift_allocObject();
  v16 = v22;
  *(_QWORD *)(v15 + 16) = v23;
  *(_QWORD *)(v15 + 24) = v16;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C958E0], v12);
  v17 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
  return v17;
}

uint64_t closure #1 in GroupSession.isClientValidPublisher.getter@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  id v7;

  v3 = *a1;
  v4 = 1;
  v6 = 1;
  v7 = v3;
  result = static GroupSession.State.== infix(_:_:)(&v7, (void **)&v6);
  if ((result & 1) == 0)
  {
    v6 = 0;
    v7 = v3;
    result = static GroupSession.State.== infix(_:_:)(&v7, (void **)&v6);
    v4 = result;
  }
  *a2 = v4 & 1;
  return result;
}

uint64_t GroupSession.canBeInitialSpatialDriver.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  if (*(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)) != 1)
    return 0;
  v1 = (unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_beginAccess();
  return *v1;
}

uint64_t protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>;
  return GroupSession.createClient()();
}

uint64_t protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t protocol witness for SystemCoordinatorClientProvider.isClientValidPublisher.getter in conformance GroupSession<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GroupSession.isClientValidPublisher.getter(a1, a2, a3, a4);
}

uint64_t protocol witness for SystemCoordinatorClientProvider.canBeInitialSpatialDriver.getter in conformance GroupSession<A>()
{
  return GroupSession.canBeInitialSpatialDriver.getter() & 1;
}

uint64_t SystemCoordinatorClientConnection.requestCurrentState(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[6];

  v5 = XPCClient.queue.getter();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = _sIg_Ieg_TRTA_0;
  v12[5] = v7;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor_11;
  v8 = _Block_copy(v12);
  v9 = v2;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);

  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  _QWORD v5[6];

  v3 = *a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ();
  v5[3] = &block_descriptor_25;
  v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_requestCurrentState_, v4);
  _Block_release(v4);
}

uint64_t @objc SystemCoordinatorClientConnection.requestCurrentState(_:)(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = a1;
  SystemCoordinatorClientConnection.requestCurrentState(_:)((uint64_t)_s15GroupActivities22SystemCoordinatorStateCIeyBy_ACIegg_TRTA_0, v5);

  return swift_release();
}

uint64_t SystemCoordinatorClientConnection.setConfiguration(_:)(void *a1)
{
  void *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[6];

  v3 = XPCClient.queue.getter();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:);
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_17_0;
  v6 = _Block_copy(v11);
  v7 = v1;
  v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void @objc SystemCoordinatorClientConnection.setConfiguration(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SystemCoordinatorClientConnection.setConfiguration(_:)(v4);

}

uint64_t sub_1A0ECCF08()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.isClientValidPublisher.getter@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  return closure #1 in GroupSession.isClientValidPublisher.getter(a1, a2);
}

uint64_t sub_1A0ECCF20()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)()
{
  return XPCClient.withSynchronousHost<A>(body:errorHandler:)();
}

uint64_t sub_1A0ECCFB0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t sub_1A0ECCFD8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:)()
{
  return XPCClient.withSynchronousHost<A>(body:errorHandler:)();
}

uint64_t sub_1A0ECD064()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.createClient()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SystemCoordinatorClientProvider.createClient();
  return v7(a1, a2);
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.isClientValidPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.canBeInitialSpatialDriver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.destroyConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_1A0ECD130()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _s15GroupActivities22SystemCoordinatorStateCIeyBy_ACIegg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

id partial apply for closure #1 in closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:)(id *a1)
{
  uint64_t v1;

  return objc_msgSend(*a1, sel_setConfiguration_, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *BackgroundGroupSessionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static BackgroundGroupSessionManager.shared;
}

BOOL static BackgroundGroupSessionManagerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BackgroundGroupSessionManagerError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundGroupSessionManagerError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *one-time initialization function for shared()
{
  id v0;
  _QWORD *v1;
  _QWORD *result;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerClient()), sel_init);
  type metadata accessor for BackgroundGroupSessionManager();
  v1 = (_QWORD *)swift_allocObject();
  result = specialized BackgroundGroupSessionManager.init(client:)(v0, v1);
  static BackgroundGroupSessionManager.shared = (uint64_t)result;
  return result;
}

_QWORD *BackgroundGroupSessionManager.__allocating_init(client:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t ObjectType;

  v4 = (_QWORD *)swift_allocObject();
  ObjectType = swift_getObjectType();
  return specialized BackgroundGroupSessionManager.init(client:)(a1, v4, ObjectType, a2);
}

uint64_t static BackgroundGroupSessionManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.client.getter()
{
  return swift_unknownObjectRetain();
}

void key path setter for BackgroundGroupSessionManager.presenceProviderObservers : BackgroundGroupSessionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 128) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
}

void BackgroundGroupSessionManager.presenceProviderObservers.didset()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : PresenceGroupSessionProviderObserver]);
    v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "presenceSessions updated to: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void BackgroundGroupSessionManager.presenceProviderObservers.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
}

uint64_t (*BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundGroupSessionManager.presenceProviderObservers.modify;
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1, char a2)
{
  return BackgroundGroupSessionManager.presenceProviderObservers.modify(a1, a2, (uint64_t (*)(uint64_t))BackgroundGroupSessionManager.presenceProviderObservers.didset);
}

void key path setter for BackgroundGroupSessionManager.providerObservers : BackgroundGroupSessionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 136) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.providerObservers.didset();
}

void BackgroundGroupSessionManager.providerObservers.didset()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : GroupSessionProviderObserver]);
    v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "providerObservers updated to %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t BackgroundGroupSessionManager.providerObservers.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void BackgroundGroupSessionManager.providerObservers.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 136) = a1;
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.providerObservers.didset();
}

uint64_t (*BackgroundGroupSessionManager.providerObservers.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundGroupSessionManager.providerObservers.modify;
}

uint64_t BackgroundGroupSessionManager.providerObservers.modify(uint64_t a1, char a2)
{
  return BackgroundGroupSessionManager.presenceProviderObservers.modify(a1, a2, (uint64_t (*)(uint64_t))BackgroundGroupSessionManager.providerObservers.didset);
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return a3(result);
  return result;
}

_QWORD *BackgroundGroupSessionManager.init(client:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized BackgroundGroupSessionManager.init(client:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in BackgroundGroupSessionManager.init(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[11] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator);
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>?);
  v4[15] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v4[16] = v6;
  v4[17] = *(_QWORD *)(v6 - 8);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundGroupSessionManager.init(client:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(Strong + 192);
    swift_retain();
    swift_release();
    *(_QWORD *)(v0 + 64) = v5;
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
    v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95FB8]);
    MEMORY[0x1A1B04650](v6, v7);
    swift_release();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
      AsyncPublisher.makeAsyncIterator()();
      swift_beginAccess();
      *(_QWORD *)(v0 + 152) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator, MEMORY[0x1E0C95E78]);
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v8;
      *v8 = v0;
      v8[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 128));
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 72);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (*(_QWORD *)(v0 + 168))
  {
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 176) = Strong;
    if (Strong)
    {
      return swift_task_switch();
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v6;
      *v6 = v0;
      v6[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  Swift::OpaquePointer *v0;
  _QWORD *v1;

  BackgroundGroupSessionManager.updateProviders(for:)(v0[21]);
  swift_release();
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  v0[24]._rawValue = v1;
  *v1 = v0;
  v1[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.topicManager.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v2 = objc_allocWithZone(MEMORY[0x1E0D15358]);
    swift_retain();
    v3 = objc_msgSend(v2, sel_init);
    type metadata accessor for TopicManager();
    v4 = swift_allocObject();
    v1 = specialized TopicManager.init(provider:featureFlags:)(v0, v3, v4);
    *(_QWORD *)(v0 + 144) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t BackgroundGroupSessionManager.topicManager.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*BackgroundGroupSessionManager.topicManager.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = BackgroundGroupSessionManager.topicManager.getter();
  return BackgroundGroupSessionManager.topicManager.modify;
}

uint64_t BackgroundGroupSessionManager.topicManager.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 144) = *a1;
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.audioSessionAssertionManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1 + 152, a1);
}

uint64_t BackgroundGroupSessionManager._activitySessions.getter()
{
  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.onActivitySessionsChanged.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t BackgroundGroupSessionManager.activitySessions.getter()
{
  uint64_t v1;

  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t BackgroundGroupSessionManager.topicCategory(groupUUID:name:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for PubSubClient.TopicCategory();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D14AE0], v0);
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<PubSubClient.TopicCategory> and conformance Just<A>, &demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>, MEMORY[0x1E0C960B0]);
  v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t BackgroundGroupSessionManager.pluginClientReporter.getter()
{
  return 0;
}

uint64_t BackgroundGroupSessionManager.pubSubTopicReporter.getter()
{
  return 0;
}

uint64_t BackgroundGroupSessionManager._groupSessions.getter()
{
  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.groupSessions.getter()
{
  uint64_t v1;

  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t BackgroundGroupSessionManager.groupSessionsPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD *)(v0 + 208);
  }
  else
  {
    type metadata accessor for GroupSessionTable();
    v1 = swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    *(_QWORD *)(v1 + 16) = Lock.init()();
    *(_QWORD *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v0 + 208) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = a1;
  return swift_release();
}

uint64_t (*BackgroundGroupSessionManager.groupSessionTable.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = BackgroundGroupSessionManager.groupSessionTable.getter();
  return BackgroundGroupSessionManager.groupSessionTable.modify;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 208) = *a1;
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.prepareForActivation(options:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.prepareForActivation(options:)()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.start(presenceSession:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for UUID();
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v3[21] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.start(presenceSession:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  _BYTE *v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v39 = v0;
    v40[0] = swift_slowAlloc();
    v5 = v40[0];
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    v6 = v0 + 10;
    v7 = PresenceSession.description.getter();
    v9 = v8;
    swift_release();
    *v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Start request for presence session: %s", v4, 0xCu);
    swift_arrayDestroy();
    v0 = v39;
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = (*(uint64_t (**)(void))(*(_QWORD *)v0[11] + 304))();
  v0[15] = v10;
  if (v10)
  {
    v12 = v11;
    ObjectType = swift_getObjectType();
    v14 = (_QWORD *)swift_task_alloc();
    v0[16] = v14;
    v15 = *(_QWORD *)(v12 + 8);
    *v14 = v0;
    v14[1] = BackgroundGroupSessionManager.start(presenceSession:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(ObjectType, v15);
  }
  else
  {
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v40[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_retain();
      v21 = PresenceSession.description.getter();
      v23 = v22;
      swift_release();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "Failed to find provider on presenceSession: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
    v24 = (void *)swift_allocError();
    *v25 = 8;
    swift_willThrow();
    swift_retain();
    v26 = v24;
    swift_retain();
    v27 = v24;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = v0;
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v40[0] = v32;
      *(_DWORD *)v31 = 136315394;
      swift_retain();
      v33 = PresenceSession.description.getter();
      v35 = v34;
      swift_release();
      v30[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      v30[6] = v24;
      v36 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v0 = v30;
      v37 = String.init<A>(reflecting:)();
      v30[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v28, v29, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v32, -1, -1);
      MEMORY[0x1A1B05CC4](v31, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_willThrow();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
}

{
  uint64_t v0;
  id v1;
  _QWORD *v2;

  swift_unknownObjectRelease();
  BackgroundSessionCreationRequest.id.getter();
  BackgroundSessionCreationRequest.isCrossAccount.getter();
  v1 = objc_allocWithZone((Class)type metadata accessor for PresenceSessionCreationRequest());
  *(_QWORD *)(v0 + 152) = PresenceSessionCreationRequest.init(id:isCrossAccount:)();
  swift_getObjectType();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v2;
  *v2 = v0;
  v2[1] = BackgroundGroupSessionManager.start(presenceSession:);
  return BackgroundSessionManagerXPCClient.createPresenceSession(with:)();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v12;
  void *v13;
  uint64_t v14;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v12 = *(void **)(v0 + 152);
    v13 = *(void **)(v0 + 136);
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v14 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_retain();
    v5 = PresenceSession.description.getter();
    v7 = v6;
    swift_release();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Successfully created remote session for presenceSession: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {
    v8 = *(void **)(v0 + 152);
    v9 = *(void **)(v0 + 136);
    swift_release_n();

  }
  v10 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15[2];

  swift_unknownObjectRelease();
  v1 = *(void **)(v0 + 144);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15[0] = v14;
    *(_DWORD *)v6 = 136315394;
    swift_retain();
    v7 = PresenceSession.description.getter();
    v9 = v8;
    swift_release();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 48) = v1;
    v10 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 136);

  v2 = *(void **)(v0 + 168);
  swift_retain();
  v3 = v2;
  swift_retain();
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16[0] = v15;
    *(_DWORD *)v7 = 136315394;
    swift_retain();
    v8 = PresenceSession.description.getter();
    v10 = v9;
    swift_release();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 48) = v2;
    v11 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.start(presenceProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  v4 = type metadata accessor for UUID();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.start(presenceProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  _QWORD *v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v51;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t typea;
  os_log_type_t type[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 312) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_unknownObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 304);
    v56 = *(_QWORD *)(v0 + 272);
    v57 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 256);
    v7 = swift_slowAlloc();
    v61 = swift_slowAlloc();
    v65[0] = v61;
    *(_DWORD *)v7 = 136315394;
    typea = v3;
    *(_QWORD *)(v0 + 160) = v5;
    *(_QWORD *)(v0 + 168) = v6;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    v8 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    ObjectType = swift_getObjectType();
    v11 = *(_QWORD *)(v6 + 8);
    GroupSessionProvider.uuid.getter(ObjectType, v11, v4);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v4, v56);
    *(_QWORD *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v11;
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, typea, "Start request for presenceProvider: %s, id: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v61, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);

  }
  else
  {
    v16 = *(_QWORD *)(v0 + 256);

    swift_unknownObjectRelease_n();
    v15 = *(_QWORD *)(v16 + 8);
  }
  *(_QWORD *)(v0 + 320) = v15;
  v17 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 264);
  v19 = swift_getObjectType();
  *(_QWORD *)(v0 + 328) = v19;
  GroupSessionProvider.uuid.getter(v19, v15, v17);
  v20 = (uint64_t *)(v18 + 128);
  swift_beginAccess();
  v62 = v19;
  v63 = v15;
  if (!*(_QWORD *)(*(_QWORD *)(v18 + 128) + 16))
    goto LABEL_13;
  v21 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v21);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    v42 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 304);
    v60 = *(_QWORD *)(v0 + 272);
    v44 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 264);
    v46 = *(_QWORD *)(v0 + 248);
    v47 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 280) + 8);
    *(_QWORD *)(v0 + 336) = v47;
    v47(v42);
    type metadata accessor for PresenceGroupSessionProviderObserver();
    v48 = (_QWORD *)swift_allocObject();
    *(_QWORD *)(v0 + 344) = v48;
    v48[3] = 0;
    swift_unknownObjectWeakInit();
    v48[7] = MEMORY[0x1E0DEE9E8];
    v48[4] = v46;
    v48[5] = v44;
    swift_beginAccess();
    v48[3] = &protocol witness table for BackgroundGroupSessionManager;
    swift_unknownObjectWeakAssign();
    type metadata accessor for PresenceSession(0);
    v49 = swift_allocObject();
    swift_unknownObjectRetain_n();
    swift_retain();
    v48[6] = specialized PresenceSession.init(provider:serviceProvider:)(v46, v44, v45, v49);
    GroupSessionProvider.uuid.getter(v62, v63, v43);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65[0] = *v20;
    *v20 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v48, v43, isUniquelyReferenced_nonNull_native);
    *v20 = v65[0];
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v47)(v43, v60);
    swift_endAccess();
    BackgroundGroupSessionManager.presenceProviderObservers.didset();
    v51 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 352) = v51;
    *v51 = v0;
    v51[1] = BackgroundGroupSessionManager.start(presenceProvider:);
    return PresenceGroupSessionProviderObserver.join()();
  }
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 280);
  swift_retain();
  swift_bridgeObjectRelease();
  v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v26(v23, v24);
  swift_release();
  swift_unknownObjectRetain_n();
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = *(_QWORD *)(v0 + 288);
    v30 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v65[0] = v31;
    *(_DWORD *)v30 = 136315394;
    GroupSessionProvider.uuid.getter(v62, v63, v29);
    v32 = *v20;
    *(_QWORD *)type = v31;
    if (*(_QWORD *)(*v20 + 16))
    {
      v33 = *(_QWORD *)(v0 + 288);
      swift_bridgeObjectRetain();
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v0 + 288);
        v37 = *(_QWORD *)(v0 + 272);
        v38 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
        v26(v36, v37);
        *(_QWORD *)(v0 + 224) = v38;
        type metadata accessor for PresenceGroupSessionProviderObserver();
        v39 = String.init<A>(reflecting:)();
        v41 = v40;
LABEL_17:
        v64 = *(_OWORD *)(v0 + 248);
        *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2080;
        *(_OWORD *)(v0 + 144) = v64;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
        v53 = String.init<A>(reflecting:)();
        *(_QWORD *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v27, v28, "Tried to start PresenceGroupSessionProvider with the same identifier as one that is already tracked. Existing: %s new: %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](*(_QWORD *)type, -1, -1);
        MEMORY[0x1A1B05CC4](v30, -1, -1);

        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
    }
    v26(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    v41 = 0xE300000000000000;
    v39 = 7104878;
    goto LABEL_17;
  }

  swift_unknownObjectRelease_n();
  swift_release_n();
LABEL_18:
  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *v55 = 7;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  swift_unknownObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v8 = *(_OWORD *)(v0 + 248);
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315138;
    v9 = v4;
    *(_OWORD *)(v0 + 128) = v8;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    v5 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Successfully started PresenceSession for provider: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease_n();

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20[2];

  v1 = *(void **)(v0 + 360);
  swift_unknownObjectRetain();
  v2 = v1;
  swift_unknownObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 360);
    v19 = *(_OWORD *)(v0 + 248);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v20[0] = v8;
    *(_DWORD *)v7 = 136315394;
    *(_OWORD *)(v0 + 112) = v19;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    v9 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 184) = v6;
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to join PresenceSession for provider: %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 360);
    swift_unknownObjectRelease_n();

  }
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v16 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 272);
  GroupSessionProvider.uuid.getter(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 320), v16);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v15(v16, v17);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.start(provider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[36] = a2;
  v3[37] = v2;
  v3[35] = a1;
  v4 = type metadata accessor for OSSignpostID();
  v3[38] = v4;
  v3[39] = *(_QWORD *)(v4 - 8);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v5 = type metadata accessor for OSSignposter();
  v3[42] = v5;
  v3[43] = *(_QWORD *)(v5 - 8);
  v3[44] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v3[45] = v6;
  v3[46] = *(_QWORD *)(v6 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.start(provider:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v48;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  __int128 v58;
  uint64_t v59[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 408) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_unknownObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 400);
    v53 = *(_QWORD *)(v0 + 360);
    v54 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 288);
    v7 = swift_slowAlloc();
    v56 = swift_slowAlloc();
    v59[0] = v56;
    *(_DWORD *)v7 = 136315394;
    *(_QWORD *)(v0 + 112) = v6;
    *(_QWORD *)(v0 + 120) = v5;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    v8 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    ObjectType = swift_getObjectType();
    GroupSessionProvider.uuid.getter(ObjectType, v5, v4);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v4, v53);
    *(_QWORD *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Start request for provider: %s id: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v56, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  v14 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 280);
  type metadata accessor for GroupSessionProviderObserver();
  v18 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 416) = v18;
  v18[3] = 0;
  swift_unknownObjectWeakInit();
  v19 = MEMORY[0x1E0DEE9E8];
  v18[6] = 0;
  v18[7] = v19;
  v18[4] = v17;
  v18[5] = v16;
  swift_beginAccess();
  v18[3] = &protocol witness table for BackgroundGroupSessionManager;
  swift_unknownObjectWeakAssign();
  v20 = swift_getObjectType();
  *(_QWORD *)(v0 + 424) = v20;
  swift_unknownObjectRetain();
  GroupSessionProvider.uuid.getter(v20, v16, v14);
  v21 = (uint64_t *)(v15 + 136);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v15 + 136) + 16))
    goto LABEL_13;
  v22 = *(_QWORD *)(v0 + 392);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v22);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    v42 = *(_QWORD *)(v0 + 392);
    v43 = *(_QWORD *)(v0 + 400);
    v44 = *(_QWORD *)(v0 + 360);
    v45 = *(_QWORD *)(v0 + 288);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8);
    *(_QWORD *)(v0 + 432) = v46;
    v46(v42, v44);
    GroupSessionProvider.uuid.getter(v20, v45, v43);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59[0] = *v21;
    *v21 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v43, isUniquelyReferenced_nonNull_native);
    *v21 = v59[0];
    swift_bridgeObjectRelease();
    v46(v43, v44);
    swift_endAccess();
    BackgroundGroupSessionManager.providerObservers.didset();
    v48 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 440) = v48;
    *v48 = v0;
    v48[1] = BackgroundGroupSessionManager.start(provider:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(v20, *(_QWORD *)(v0 + 288));
  }
  v24 = *(_QWORD *)(v0 + 392);
  v25 = *(_QWORD *)(v0 + 360);
  v26 = *(_QWORD *)(v0 + 368);
  swift_retain();
  swift_bridgeObjectRelease();
  v57 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v57(v24, v25);
  swift_release();
  swift_unknownObjectRetain_n();
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = *(_QWORD *)(v0 + 376);
    v30 = *(_QWORD *)(v0 + 288);
    v31 = swift_slowAlloc();
    v55 = swift_slowAlloc();
    v59[0] = v55;
    *(_DWORD *)v31 = 136315394;
    GroupSessionProvider.uuid.getter(v20, v30, v29);
    v32 = *v21;
    if (*(_QWORD *)(*v21 + 16))
    {
      v33 = *(_QWORD *)(v0 + 376);
      swift_bridgeObjectRetain();
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v0 + 376);
        v37 = *(_QWORD *)(v0 + 360);
        v38 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
        v57(v36, v37);
        *(_QWORD *)(v0 + 248) = v38;
        v39 = String.init<A>(reflecting:)();
        v41 = v40;
LABEL_17:
        v58 = *(_OWORD *)(v0 + 280);
        *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2080;
        *(_OWORD *)(v0 + 128) = v58;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
        v50 = String.init<A>(reflecting:)();
        *(_QWORD *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v27, v28, "Tried to start provider with same identifier as already tracked item. Existing: %s new: %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v55, -1, -1);
        MEMORY[0x1A1B05CC4](v31, -1, -1);

        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
    }
    v57(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 360));
    v41 = 0xE300000000000000;
    v39 = 7104878;
    goto LABEL_17;
  }

  swift_unknownObjectRelease_n();
  swift_release_n();
LABEL_18:
  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *v52 = 7;
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_signpost_type_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_signpost_id_t v33;
  void (*v34)(uint64_t, uint64_t);
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _BYTE *v48;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  os_signpost_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63[2];

  v1 = *(_QWORD *)(v0 + 296);
  GroupSessionProvider.uuid.getter(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 384));
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 136) + 16))
  {
LABEL_8:
    (*(void (**)(_QWORD, _QWORD))(v0 + 432))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360));
    swift_unknownObjectRetain_n();
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v61 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      v57 = *(_QWORD *)(v0 + 424);
      v37 = *(_QWORD *)(v0 + 400);
      v38 = *(_QWORD *)(v0 + 360);
      v39 = *(_QWORD *)(v0 + 280);
      v40 = *(_QWORD *)(v0 + 288);
      v41 = swift_slowAlloc();
      v59 = swift_slowAlloc();
      v63[0] = v59;
      *(_DWORD *)v41 = 136315394;
      *(_QWORD *)(v0 + 144) = v39;
      *(_QWORD *)(v0 + 152) = v40;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
      v42 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      *(_WORD *)(v41 + 12) = 2080;
      GroupSessionProvider.uuid.getter(v57, v40, v37);
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v44 = dispatch thunk of CustomStringConvertible.description.getter();
      v46 = v45;
      v61(v37, v38);
      *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v35, v36, "provider: %s id: %s was cancelled while fetching the creationRequest object.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v59, -1, -1);
      MEMORY[0x1A1B05CC4](v41, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    v47 = *(void **)(v0 + 448);
    lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
    swift_allocError();
    *v48 = 9;
    swift_willThrow();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 360);
  swift_retain();
  swift_bridgeObjectRelease();
  v4(v5, v6);
  swift_release();
  if (one-time initialization token for groupSession != -1)
    swift_once();
  v7 = *(void **)(v0 + 448);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
  v9 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = __swift_project_value_buffer(v12, (uint64_t)static Signposts.groupSession);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v14, v12);
  v15 = (void *)BackgroundSessionCreationRequest.activitySessionRequest.getter();
  v16 = objc_msgSend(v15, sel_UUID);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.uint64Value.getter();
  v8(v9, v11);
  OSSignpostID.init(_:)();
  v17 = v7;
  v18 = OSSignposter.logHandle.getter();
  v19 = static os_signpost_type_t.event.getter();
  v20 = OS_os_log.signpostsEnabled.getter();
  v21 = *(void **)(v0 + 448);
  v23 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 352);
  v25 = *(_QWORD *)(v0 + 328);
  v24 = *(_QWORD *)(v0 + 336);
  if ((v20 & 1) != 0)
  {
    v54 = *(_QWORD *)(v0 + 320);
    v58 = *(_QWORD *)(v0 + 304);
    v60 = *(_QWORD *)(v0 + 312);
    (*(void (**)(void))(v60 + 16))();
    v62 = v22;
    v26 = (uint8_t *)swift_slowAlloc();
    v53 = v19;
    v27 = swift_slowAlloc();
    v63[0] = v27;
    *(_DWORD *)v26 = 136315138;
    v56 = v24;
    v28 = (void *)BackgroundSessionCreationRequest.activitySessionRequest.getter();
    v55 = v23;
    v29 = objc_msgSend(v28, sel_activityIdentifier);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    *(_QWORD *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v18, v53, v33, "group-session-requested", "%s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v27, -1, -1);
    MEMORY[0x1A1B05CC4](v26, -1, -1);

    v34 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v34(v25, v58);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v62, v56);
    v34(v54, v58);
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 312);

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v25, v50);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  swift_getObjectType();
  v52 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 464) = v52;
  *v52 = v0;
  v52[1] = BackgroundGroupSessionManager.start(provider:);
  return BackgroundSessionManagerXPCClient.begin(request:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v13;

  v1 = *(id *)(v0 + 448);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(void **)(v0 + 448);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v13 = v6;
    *(_QWORD *)(v0 + 200) = v4;
    type metadata accessor for BackgroundSessionCreationRequest();
    v7 = v4;
    v8 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully started provider for request: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }
  else
  {
    v10 = *(void **)(v0 + 448);

  }
  v11 = *(void **)(v0 + 448);
  GroupSessionProviderObserver.start()();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  void *v20;
  uint64_t v21[2];

  v1 = *(void **)(v0 + 472);
  swift_unknownObjectRetain();
  v2 = v1;
  swift_unknownObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 472);
    v19 = *(_OWORD *)(v0 + 280);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v21[0] = v8;
    *(_DWORD *)v7 = 136315394;
    *(_OWORD *)(v0 + 160) = v19;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    v9 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 184) = v6;
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to issue begin request for provider: %s error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 472);
    swift_unknownObjectRelease_n();

  }
  v20 = *(void **)(v0 + 448);
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
  v16 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 360);
  GroupSessionProvider.uuid.getter(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 288), v16);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v15(v16, v17);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.start(provider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 448) = a1;
  *(_QWORD *)(v3 + 456) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for UUID();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.leave(identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = v0[9];
  v3 = v0[12];
  v2 = v0[13];
  v4 = v0[11];
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = v0[12];
  v9 = v0[13];
  v11 = v0[11];
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A0DB3000, v6, v7, "Leave request for providerID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(v0[13], v0[11]);
  }

  v16 = v0[9];
  v15 = v0[10];
  swift_beginAccess();
  v17 = specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v0[14] = v17;
  swift_endAccess();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
  swift_beginAccess();
  v18 = specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v0[15] = v18;
  swift_endAccess();
  BackgroundGroupSessionManager.providerObservers.didset();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, v19, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager, (uint64_t)&protocol conformance descriptor for BackgroundGroupSessionManager);
  v20 = (_QWORD *)swift_task_alloc();
  v0[16] = v20;
  v20[2] = v17;
  v20[3] = v18;
  v20[4] = v15;
  v20[5] = v16;
  v21 = (_QWORD *)swift_task_alloc();
  v0[17] = v21;
  *v21 = v0;
  v21[1] = BackgroundGroupSessionManager.leave(identifier:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[7] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2[8];
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    v4 = swift_task_alloc();
    v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = 0;
    v6[3] = 0;
    v6[4] = v3;
    swift_retain();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), (uint64_t)v6);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v4, &demangling cache variable for type metadata for TaskPriority?);
    swift_task_dealloc();
  }
  v7 = v2[9];
  if (v7)
  {
    v8 = v2[10];
    v9 = v2[11];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    v10 = swift_task_alloc();
    v11 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = type metadata accessor for UUID();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v9, v12);
    v15 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v16 = (char *)swift_allocObject();
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *((_QWORD *)v16 + 4) = v7;
    *((_QWORD *)v16 + 5) = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&v16[v15], v14, v12);
    swift_task_dealloc();
    swift_retain();
    swift_retain();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), (uint64_t)v16);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v10, &demangling cache variable for type metadata for TaskPriority?);
    swift_task_dealloc();
  }
  v17 = v2[10];
  v2[12] = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, a2, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager, (uint64_t)&protocol conformance descriptor for BackgroundGroupSessionManager);
  if (v17)
  {
    swift_getObjectType();
    v18 = dispatch thunk of Actor.unownedExecutor.getter();
    v20 = v19;
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v2[13] = v18;
  v2[14] = v20;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int isPlatformVersionAtLeast;
  _QWORD *v5;

  v1 = **(_QWORD **)(v0 + 56);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(_QWORD *)(v0 + 120) = v2;
  if ((MEMORY[0x1A1B04BA8](v1, MEMORY[0x1E0DEE9C0] + 8, v2, MEMORY[0x1E0DEDB38]) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  isPlatformVersionAtLeast = __isPlatformVersionAtLeast(2, 18, 0, 0);
  *(_DWORD *)(v0 + 152) = isPlatformVersionAtLeast;
  *(_QWORD *)(v0 + 128) = 0;
  if (!isPlatformVersionAtLeast)
    return swift_taskGroup_wait_next_throwing();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  *v5 = v0;
  v5[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  if (v0)
    *(_QWORD *)(v1 + 144) = v0;
  else
    *(_BYTE *)(v1 + 159) = *(_BYTE *)(v1 + 157);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 144) = v0;
  else
    *(_BYTE *)(v2 + 158) = *(_BYTE *)(v2 + 156);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if ((*(_BYTE *)(v0 + 158) & 1) == 0)
    goto LABEL_7;
  v1 = *(_QWORD *)(v0 + 128);
  if ((MEMORY[0x1A1B04BA8](**(_QWORD **)(v0 + 56), MEMORY[0x1E0DEE9C0] + 8, *(_QWORD *)(v0 + 120), MEMORY[0x1E0DEDB38]) & 1) == 0)
  {
    *(_QWORD *)(v0 + 128) = v1;
LABEL_7:
    if (!*(_DWORD *)(v0 + 152))
      return swift_taskGroup_wait_next_throwing();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *v3 = v0;
    v3[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
    return ThrowingTaskGroup.next(isolation:)();
  }
  if (v1)
    swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if ((*(_BYTE *)(v0 + 159) & 1) == 0)
    goto LABEL_7;
  v1 = *(_QWORD *)(v0 + 128);
  if ((MEMORY[0x1A1B04BA8](**(_QWORD **)(v0 + 56), MEMORY[0x1E0DEE9C0] + 8, *(_QWORD *)(v0 + 120), MEMORY[0x1E0DEDB38]) & 1) == 0)
  {
    *(_QWORD *)(v0 + 128) = v1;
LABEL_7:
    if (!*(_DWORD *)(v0 + 152))
      return swift_taskGroup_wait_next_throwing();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *v3 = v0;
    v3[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
    return ThrowingTaskGroup.next(isolation:)();
  }
  if (v1)
    swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v3;

  v1 = *(void **)(v0 + 144);
  if (*(_QWORD *)(v0 + 128))
  {

    v1 = *(void **)(v0 + 128);
  }
  if ((MEMORY[0x1A1B04BA8](**(_QWORD **)(v0 + 56), MEMORY[0x1E0DEE9C0] + 8, *(_QWORD *)(v0 + 120), MEMORY[0x1E0DEDB38]) & 1) != 0)
  {
    if (v1)
      swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 128) = v1;
    if (*(_DWORD *)(v0 + 152))
    {
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
      *v3 = v0;
      v3[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
      return ThrowingTaskGroup.next(isolation:)();
    }
    else
    {
      return swift_taskGroup_wait_next_throwing();
    }
  }
}

uint64_t closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 32) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[4];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[2] = v5;
    type metadata accessor for PresenceGroupSessionProviderObserver();
    swift_retain();
    v8 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Leaving presence providerObserver %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = *(int **)(*(_QWORD *)v0[4] + 176);
  v13 = (uint64_t (*)(void))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  v0[6] = v11;
  *v11 = v0;
  v11[1] = closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  return v13();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Failed to leave the PresenceSession.", v3, 2u);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

