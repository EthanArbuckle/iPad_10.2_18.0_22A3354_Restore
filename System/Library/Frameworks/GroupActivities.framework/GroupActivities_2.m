uint64_t closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v7 = type metadata accessor for UUID();
  v6[10] = v7;
  v6[11] = *(_QWORD *)(v7 - 8);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[13] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[7];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[5] = v5;
    type metadata accessor for GroupSessionProviderObserver();
    swift_retain();
    v8 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Leaving providerObserver: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v1;
  *v1 = v0;
  v1[1] = closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  return BackgroundSessionManagerXPCClient.leave(identifier:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v1 = *(void **)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19[0] = v18;
    *(_DWORD *)v9 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v6;
    v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to leave identifier: %s error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));

  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = type metadata accessor for UUID();
  v3[18] = v4;
  v3[19] = *(_QWORD *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.updateMembers(identifier:members:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v35)(void);
  _QWORD *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = v0[15];
  v2 = v0[22];
  v3 = v0[18];
  v4 = v0[19];
  v5 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[24] = v6;
  v6(v2, v1, v3);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[22];
  v11 = v0[18];
  v12 = v0[19];
  v13 = v0[16];
  if (v9)
  {
    v14 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v50[0] = v49;
    *(_DWORD *)v14 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v11);
    *(_WORD *)(v14 + 12) = 2080;
    v0[13] = v13;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
    v18 = String.init<A>(reflecting:)();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Update member request for identifier: %s with members: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v49, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v0[22], v0[18]);
    swift_bridgeObjectRelease_n();

  }
  v0[25] = v17;
  v20 = v0[17];
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v20 + 136) + 16)
    || (v21 = v0[15],
        swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v21),
        LOBYTE(v21) = v22,
        swift_bridgeObjectRelease(),
        (v21 & 1) == 0))
  {
    v6(v0[21], v0[15], v0[18]);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.fault.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = v0[21];
    v30 = v0[18];
    if (v28)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v50[0] = v32;
      *(_DWORD *)v31 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v33 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v17(v29, v30);
      _os_log_impl(&dword_1A0DB3000, v26, v27, "updateMembers called for unknown providerID: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v32, -1, -1);
      MEMORY[0x1A1B05CC4](v31, -1, -1);
    }
    else
    {
      v17(v0[21], v0[18]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  specialized Sequence.compactMap<A>(_:)(v0[16]);
  v24 = specialized Set.init<A>(_:)(v23);
  v0[26] = v24;
  swift_bridgeObjectRelease();
  if ((v24 & 0xC000000000000001) != 0)
    v25 = __CocoaSet.count.getter();
  else
    v25 = *(_QWORD *)(v24 + 16);
  if (v25 != *(_QWORD *)(v0[16] + 16))
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc();
      v41 = swift_slowAlloc();
      v50[0] = v41;
      *(_DWORD *)v40 = 136315394;
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      swift_bridgeObjectRetain();
      v42 = Set.description.getter();
      v44 = v43;
      swift_bridgeObjectRelease();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v40 + 12) = 2080;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      lazy protocol witness table accessor for type TUHandle and conformance NSObject();
      swift_bridgeObjectRetain();
      v45 = Set.description.getter();
      v47 = v46;
      swift_bridgeObjectRelease();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v38, v39, "Failed to convert members types: %s vs convertedMembers: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v41, -1, -1);
      MEMORY[0x1A1B05CC4](v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
    swift_allocError();
    *v48 = 8;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  swift_getObjectType();
  v37 = (_QWORD *)swift_task_alloc();
  v0[27] = v37;
  *v37 = v0;
  v37[1] = BackgroundGroupSessionManager.updateMembers(identifier:members:);
  return BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void (*v20)(uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23[2];

  v1 = *(void **)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 224);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    type = v5;
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23[0] = v22;
    *(_DWORD *)v9 = 136315650;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
    swift_bridgeObjectRetain();
    v12 = Set.description.getter();
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2080;
    *(_QWORD *)(v0 + 80) = v6;
    v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v16 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, type, "Failed to update members on identifier: %s with members: %s error: %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v22, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    v18 = *(void **)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD))(v0 + 200))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    swift_bridgeObjectRelease_n();

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.begin(activity:request:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *v1 = 5;
  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t BackgroundGroupSessionManager.end(activity:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *v1 = 5;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.updateShare(_:activityID:)()
{
  return specialized BackgroundGroupSessionManager.updateShare(_:activityID:)();
}

void BackgroundGroupSessionManager.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  _BYTE *v9;

  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A0DB3000, v5, v6, "Updating CKShare", v7, 2u);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  v8 = (void *)swift_allocError();
  *v9 = 5;
  a3();

}

Swift::Void __swiftcall BackgroundGroupSessionManager.updateProviders(for:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16[0] = v15;
    *(_DWORD *)v5 = 136315394;
    swift_beginAccess();
    type metadata accessor for UUID();
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for GroupSessionProviderObserver();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, v6, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v7 = Dictionary.description.getter();
    v9 = v8;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    swift_bridgeObjectRetain();
    v10 = Dictionary.description.getter();
    v12 = v11;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Updating providers %s for containers: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  v14 = specialized _NativeDictionary.filter(_:)(v13, (uint64_t)a1._rawValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v14, (void (*)(char *, uint64_t))partial apply for closure #2 in BackgroundGroupSessionManager.updateProviders(for:));
  swift_release();
}

uint64_t closure #2 in BackgroundGroupSessionManager.updateProviders(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v23 = a1;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v27[0] = v15;
    v24 = a3;
    v25 = a2;
    *(_DWORD *)v14 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_1A0DB3000, v11, v12, "Removing providerObserver %s due to it not being present in containers", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    v18 = v14;
    a1 = v23;
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  v19 = *(_QWORD *)(a2 + 40);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  v27[0] = 0;
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t BackgroundGroupSessionManager.__deallocating_deinit()
{
  BackgroundGroupSessionManager.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t BackgroundGroupSessionManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for ActivitySessionContainerProvider.onActivitySessionsChanged.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for ActivitySessionContainerProvider.activitySessions.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v1;

  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t protocol witness for ActivitySessionContainerProvider.pluginClientReporter.getter in conformance BackgroundGroupSessionManager()
{
  return 0;
}

uint64_t protocol witness for ActivitySessionContainerProvider.topicCategory(groupUUID:name:) in conformance BackgroundGroupSessionManager()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for PubSubClient.TopicCategory();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D14AE0], v0);
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<PubSubClient.TopicCategory> and conformance Just<A>, &demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>, MEMORY[0x1E0C960B0]);
  v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t protocol witness for GroupSessionServiceProvider.start(provider:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.start(provider:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.start(presenceProvider:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.start(presenceProvider:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.leave(identifier:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.leave(identifier:)(a1);
}

uint64_t protocol witness for GroupSessionServiceProvider.updateMembers(identifier:members:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.updateMembers(identifier:members:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.start(presenceSession:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity;
  return BackgroundGroupSessionManager.start(presenceSession:)(a1);
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessions.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v1;

  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessionsPublisher.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>>);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for InternalGroupSessionProvider.audioSessionAssertionManager.getter in conformance BackgroundGroupSessionManager@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1 + 152, a1);
}

uint64_t protocol witness for InternalGroupSessionProvider.prepareForActivation(options:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance BackgroundGroupSessionManager()
{
  return swift_task_switch();
}

uint64_t protocol witness for InternalGroupSessionProvider.end(activity:) in conformance BackgroundGroupSessionManager()
{
  return swift_task_switch();
}

uint64_t BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                             + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v3();
}

void invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v28 = a2;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    v27 = a1;
    v14 = v13;
    v30[0] = v13;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Invalidating provider for ID: %s", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    a1 = v27;
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    v18 = v12;
    a2 = v28;
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  swift_beginAccess();
  v19 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v22 + 40);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v23 + 64))(ObjectType, v23);
      lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
      v25 = (void *)swift_allocError();
      *v26 = 6;
      v29 = (uint64_t)v25;
      CurrentValueSubject.send(_:)();
      swift_release();
      swift_release();

    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
}

uint64_t BackgroundGroupSessionManager.didDisconnect(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.didDisconnect(client:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                             + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v3();
}

uint64_t BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(a3);
}

uint64_t BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](v7);
  v34 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v29 - v11;
  if (one-time initialization token for default != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.default);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v33(v12, a1, v7);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v32 = v1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v31 = v6;
    v19 = v18;
    v36 = v18;
    v30 = a1;
    *(_DWORD *)v17 = 136315138;
    v29 = v17 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v36);
    a1 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl(&dword_1A0DB3000, v14, v15, "BackgroundGroupSessionManager received indication that session %s rejected a keyRecoveryRequest", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    v6 = v31;
    MEMORY[0x1A1B05CC4](v22, -1, -1);
    v23 = v17;
    v2 = v32;
    MEMORY[0x1A1B05CC4](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
  v25 = v34;
  v33(v34, a1, v7);
  v26 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v27 = (char *)swift_allocObject();
  *((_QWORD *)v27 + 2) = 0;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v27[v26], v25, v7);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:), (uint64_t)v27);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[20] = a4;
  v5[21] = a5;
  v6 = type metadata accessor for UUID();
  v5[22] = v6;
  v5[23] = *(_QWORD *)(v6 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = v0[25];
  v2 = v0[22];
  v3 = v0[21];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[23] + 16);
  v0[26] = v4;
  v4(v1, v3, v2);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_beginAccess();
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 216) + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 200)), (v2 & 1) != 0))
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 216) + 56) + 8 * v1);
    *(_QWORD *)(v0 + 224) = v6;
    swift_retain();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v6 + 32);
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 16), v0 + 56);
      v7 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v7);
      v29 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v8 + 8) + *(_QWORD *)(v8 + 8));
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 232) = v9;
      *v9 = v0;
      v9[1] = closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:);
      return v29(v7, v8);
    }
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_release();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider?);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v14(v11, v12);
    if (one-time initialization token for default != -1)
      swift_once();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v16 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 176);
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.default);
    v15(v16, v18, v17);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 176);
    if (v22)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v30 = v26;
      *(_DWORD *)v25 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14(v23, v24);
      _os_log_impl(&dword_1A0DB3000, v20, v21, "Couldn't find observer for %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v26, -1, -1);
      MEMORY[0x1A1B05CC4](v25, -1, -1);
    }
    else
    {
      v14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    }

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Fetched updated membership list", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(void **)(v0 + 240);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 240);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 144) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to fetch membership update: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v9);
  v41 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v14 = &v34[-v13];
  if (one-time initialization token for default != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  v40 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v40(v14, a1, v9);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc();
    v38 = v8;
    v20 = v19;
    v36 = swift_slowAlloc();
    v43 = v36;
    *(_DWORD *)v20 = 136315394;
    v39 = v3;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v35 = v18;
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v37 = a1;
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v14, v9);
    *(_WORD *)(v20 + 12) = 2080;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    v23 = Set.description.getter();
    v25 = v24;
    swift_bridgeObjectRelease();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v43);
    a1 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v3 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v16, (os_log_type_t)v35, "BackgroundGroupSessionManager received indication that session %s received an updated unknown participant list %s", (uint8_t *)v20, 0x16u);
    v26 = v36;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v26, -1, -1);
    v27 = v20;
    v8 = v38;
    MEMORY[0x1A1B05CC4](v27, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v14, v9);
    swift_bridgeObjectRelease_n();
  }

  v28 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
  v29 = v41;
  v40(v41, a1, v9);
  v30 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v31 = (v11 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (char *)swift_allocObject();
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = v3;
  (*(void (**)(char *, _BYTE *, uint64_t))(v10 + 32))(&v32[v30], v29, v9);
  *(_QWORD *)&v32[v31] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:), (uint64_t)v32);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  v7 = type metadata accessor for UUID();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[13];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
  v0[19] = v4;
  v4(v1, v3, v2);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, _QWORD);
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 144)), (v2 & 1) != 0))
  {
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 160) + 56) + 8 * v1);
    *(_QWORD *)(v0 + 168) = v7;
    v53 = v7;
    swift_retain();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v54 = v6 & 0xC000000000000001;
    if ((v6 & 0xC000000000000001) != 0)
      v8 = __CocoaSet.count.getter();
    else
      v8 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 16);
    v28 = MEMORY[0x1E0DEE9D8];
    if (!v8)
    {
LABEL_31:
      v51 = specialized Set.init<A>(_:)(v28);
      *(_QWORD *)(v0 + 176) = v51;
      swift_bridgeObjectRelease();
      v55 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v53 + 200) + *(_QWORD *)(*(_QWORD *)v53 + 200));
      v52 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v52;
      *v52 = v0;
      v52[1] = closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:);
      return v55(v51);
    }
    v56 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v54)
    {
      result = __CocoaSet.startIndex.getter();
      v30 = 1;
    }
    else
    {
      result = specialized _NativeSet.startIndex.getter(*(_QWORD *)(v0 + 112));
      v30 = v31 & 1;
    }
    v57 = result;
    v58 = v29;
    v59 = v30;
    if ((v8 & 0x8000000000000000) == 0)
    {
      do
      {
        while (1)
        {
          v37 = v57;
          v38 = v58;
          v39 = v59;
          specialized Set.subscript.getter(v57, v58, v59, *(_QWORD *)(v0 + 112), (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          v41 = v40;
          v42 = objc_msgSend(v40, sel_normalizedValue);
          if (!v42)
            v42 = objc_msgSend(v41, sel_value);
          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v45 = v44;

          v46 = v56;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v56 + 16) + 1, 1);
            v46 = v56;
          }
          v48 = *(_QWORD *)(v46 + 16);
          v47 = *(_QWORD *)(v46 + 24);
          if (v48 >= v47 >> 1)
          {
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
            v46 = v56;
          }
          *(_QWORD *)(v46 + 16) = v48 + 1;
          v49 = v46 + 16 * v48;
          *(_QWORD *)(v49 + 32) = v43;
          *(_QWORD *)(v49 + 40) = v45;
          if (v54)
            break;
          v32 = specialized _NativeSet.index(after:)(v37, v38, v39, *(_QWORD *)(v0 + 112));
          v34 = v33;
          v36 = v35;
          outlined consume of Set<Participant>.Index._Variant(v37, v38, v39);
          v57 = v32;
          v58 = v34;
          v59 = v36 & 1;
          if (!--v8)
            goto LABEL_30;
        }
        if ((v39 & 1) == 0)
          goto LABEL_33;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        v50 = (void (*)(uint64_t, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v50(v0 + 16, 0);
        --v8;
      }
      while (v8);
LABEL_30:
      outlined consume of Set<Participant>.Index._Variant(v57, v58, v59);
      v28 = v56;
      goto LABEL_31;
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    swift_bridgeObjectRelease();
    v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    if (one-time initialization token for default != -1)
      swift_once();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    v13(v14, v16, v15);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 120);
    if (v20)
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v57 = v24;
      *(_DWORD *)v23 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v25 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v12(v21, v22);
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Couldn't find observer for %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v24, -1, -1);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }
    else
    {
      v12(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    v6 = Set.description.getter();
    v8 = v7;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Handled unknown participant list: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void **)(v0 + 192);
  if (v4)
  {
    v12 = *(id *)(v0 + 192);
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    v8 = Set.description.getter();
    v10 = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Failed to handle unknown participant list: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    swift_release();

  }
  else
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for BackGroundSessionManagerClientDelegate.didDisconnect(client:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)partial apply, (uint64_t)v9);
  return swift_release();
}

uint64_t protocol witness for BackGroundSessionManagerClientDelegate.didUpdateContainers(client:containers:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(a3);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v47 - 8);
  v10 = MEMORY[0x1E0C80A78](v47);
  v46 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v38 - v12;
  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  result = static _DictionaryStorage.allocate(capacity:)();
  v14 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  v41 = a4;
  v18 = v47;
  while (1)
  {
    if (v15)
    {
      v44 = (v15 - 1) & v15;
      v45 = v16;
      v19 = __clz(__rbit64(v15)) | (v16 << 6);
    }
    else
    {
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v20 >= v40)
        return v14;
      v21 = v39[v20];
      v22 = v16 + 1;
      if (!v21)
      {
        v22 = v16 + 2;
        if (v16 + 2 >= v40)
          return v14;
        v21 = v39[v22];
        if (!v21)
        {
          v22 = v16 + 3;
          if (v16 + 3 >= v40)
            return v14;
          v21 = v39[v22];
          if (!v21)
          {
            v23 = v16 + 4;
            if (v16 + 4 >= v40)
              return v14;
            v21 = v39[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v40)
                  return v14;
                v21 = v39[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v16 + 4;
          }
        }
      }
LABEL_24:
      v44 = (v21 - 1) & v21;
      v45 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = v43;
    v26 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v26 * v19, v18);
    v27 = *(_QWORD *)(a4[7] + 8 * v19);
    v28 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v28(v46, v24, v18);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v14 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(*(_QWORD *)(v14 + 48) + v32 * v26, v46, v47);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v32) = v27;
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    v15 = v44;
    v16 = v45;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for TUConversationParticipant);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for CPParticipant);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for OS_dispatch_queue(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = static NSObject.== infix(_:_:)();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = static NSObject.== infix(_:_:)();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1A1B04F68](a1, a2, v8);
  type metadata accessor for OS_dispatch_queue(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v5 = *(_QWORD *)(a3 + 48);
    v6 = v5
       + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReliableBroadcastPacket.Message(0) - 8) + 72) * result;
    return outlined init with copy of ReliableBroadcastPacket.Message(v6, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *specialized BackgroundGroupSessionManager.init(client:)(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v7 = MEMORY[0x1E0DEE9E0];
  a2[16] = MEMORY[0x1E0DEE9E0];
  a2[17] = v7;
  a2[18] = 0;
  v8 = type metadata accessor for BackgroundAudioSessionAssertionManager();
  inited = swift_initStaticObject();
  a2[22] = v8;
  a2[23] = &protocol witness table for BackgroundAudioSessionAssertionManager;
  a2[19] = inited;
  v10 = MEMORY[0x1E0DEE9D8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
  swift_allocObject();
  a2[24] = CurrentValueSubject.init(_:)();
  v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>);
  swift_allocObject();
  a2[25] = CurrentValueSubject.init(_:)();
  a2[26] = 0;
  v11 = MEMORY[0x1E0D15090];
  a2[14] = a1;
  a2[15] = v11;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, v12, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager, (uint64_t)&protocol conformance descriptor for BackgroundGroupSessionManager);
  type metadata accessor for BackgroundSessionManagerClient();
  swift_unknownObjectRetain();
  v13 = a1;
  swift_retain();
  dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.setter();

  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in BackgroundGroupSessionManager.init(client:)partial apply, (uint64_t)v16);
  swift_release();

  return a2;
}

_QWORD *specialized BackgroundGroupSessionManager.init(client:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v10 = MEMORY[0x1E0DEE9E0];
  a2[16] = MEMORY[0x1E0DEE9E0];
  a2[17] = v10;
  a2[18] = 0;
  v11 = type metadata accessor for BackgroundAudioSessionAssertionManager();
  inited = swift_initStaticObject();
  a2[22] = v11;
  a2[23] = &protocol witness table for BackgroundAudioSessionAssertionManager;
  a2[19] = inited;
  v13 = MEMORY[0x1E0DEE9D8];
  v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
  swift_allocObject();
  a2[24] = CurrentValueSubject.init(_:)();
  v20 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>);
  swift_allocObject();
  a2[25] = CurrentValueSubject.init(_:)();
  a2[26] = 0;
  a2[14] = a1;
  a2[15] = a4;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, v14, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager, (uint64_t)&protocol conformance descriptor for BackgroundGroupSessionManager);
  swift_unknownObjectRetain_n();
  swift_retain();
  dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.setter();
  swift_unknownObjectRelease();
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  v16 = swift_allocObject();
  swift_weakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v16;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.init(client:), (uint64_t)v17);
  swift_unknownObjectRelease();
  swift_release();
  return a2;
}

uint64_t specialized PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a3;
  v43 = a1;
  v44 = a2;
  v5 = type metadata accessor for UUID();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x1E0C80A78](v5);
  v42 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state;
  LOBYTE(v49) = 0;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v23, v22, v19);
  v24 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants) = MEMORY[0x1E0DEE9E8];
  v25 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members;
  v49 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v25, v18, v15);
  v26 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo;
  v49 = v24;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v26, v14, v38);
  v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 1, 1, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, *MEMORY[0x1E0DF07B8], v41);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_observers) = v24;
  v28 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection) = 0;
  ObjectType = swift_getObjectType();
  v30 = v44;
  v31 = *(_QWORD *)(v44 + 8);
  v32 = v42;
  GroupSessionProvider.uuid.getter(ObjectType, v31, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id, v32, v46);
  swift_beginAccess();
  *(_QWORD *)(v28 + 8) = v30;
  swift_unknownObjectWeakAssign();
  v33 = (_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_serviceProvider);
  *v33 = v47;
  v33[1] = &protocol witness table for BackgroundGroupSessionManager;
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 72);
  swift_unknownObjectRetain();
  v48 = v34(ObjectType, v31);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>, MEMORY[0x1E0C95FB8]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return a4;
}

uint64_t specialized TopicManager.init(provider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v19;
  _QWORD v20[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v20[3] = type metadata accessor for BackgroundGroupSessionManager();
  v20[4] = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, v10, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager, (uint64_t)&protocol conformance descriptor for BackgroundGroupSessionManager);
  v20[0] = a1;
  v11 = a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  v12 = MEMORY[0x1E0DEE9D8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID : TopicManager.ConversationClient]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v11, v9, v6);
  if ((v12 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v13 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v13 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_cancellables) = v13;
  v14 = OBJC_IVAR____TtC15GroupActivities12TopicManager_lock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(a3 + v14) = Lock.init()();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v20, a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags) = a2;
  v15 = *(_QWORD *)(a1 + 192);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v19 = v16;
  v17 = a2;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  return a3;
}

uint64_t type metadata accessor for BackgroundGroupSessionManager()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v7 + 80) = v8;
  *(_QWORD *)(v7 + 64) = v5;
  *(_QWORD *)(v7 + 72) = v6;
  *(_QWORD *)(v7 + 56) = a2;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type TUHandle and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TUHandle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUHandle and conformance NSObject)
  {
    v1 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject);
  }
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A1B05010](i - 4, a1) : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = specialized InternalGroupSessionProvider.groupSessions(for:)(v4);

      specialized Array.append<A>(contentsOf:)(v7);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized BackgroundGroupSessionManager.updateShare(_:activityID:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  _BYTE *v4;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Updating CKShare", v3, 2u);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
  }

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *v4 = 5;
  return swift_willThrow();
}

uint64_t partial apply for closure #2 in BackgroundGroupSessionManager.updateProviders(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in BackgroundGroupSessionManager.updateProviders(for:)(a1, a2, v2);
}

uint64_t specialized BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[7] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v1[10] = swift_task_alloc();
  v2 = type metadata accessor for UUID();
  v1[11] = v2;
  v1[12] = *(_QWORD *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver)?);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, unint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t ObjectType;
  _QWORD *v42;
  int64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Disconnected", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 56);

  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 136);
  *(_QWORD *)(v0 + 200) = v6;
  v7 = *(_BYTE *)(v6 + 32);
  *(_BYTE *)(v0 + 352) = v7;
  v8 = -1;
  v9 = -1 << v7;
  if (-(-1 << v7) < 64)
    v8 = ~(-1 << -(char)(-1 << v7));
  v10 = v8 & *(_QWORD *)(v6 + 64);
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 208) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 216) = v11;
  swift_bridgeObjectRetain();
  if (!v10)
  {
    v18 = 63 - v9;
    if ((unint64_t)(63 - v9) <= 0x7F)
    {
      v12 = 0;
    }
    else
    {
      v19 = *(_QWORD *)(v6 + 72);
      if (v19)
      {
        v12 = 1;
LABEL_13:
        v14 = (v19 - 1) & v19;
        v13 = __clz(__rbit64(v19)) + (v12 << 6);
        goto LABEL_9;
      }
      if (v18 < 0xC0)
      {
        v12 = 1;
      }
      else
      {
        v19 = *(_QWORD *)(v6 + 80);
        if (v19)
        {
          v12 = 2;
          goto LABEL_13;
        }
        if (v18 < 0x100)
        {
          v12 = 2;
        }
        else
        {
          v19 = *(_QWORD *)(v6 + 88);
          if (v19)
          {
            v12 = 3;
            goto LABEL_13;
          }
          if (v18 < 0x140)
          {
LABEL_75:
            v12 = 3;
          }
          else
          {
            v19 = *(_QWORD *)(v6 + 96);
            if (v19)
            {
              v12 = 4;
              goto LABEL_13;
            }
            v103 = 0;
            v104 = v18 >> 6;
            v105 = 5;
            if (v104 > 5)
              v105 = v104;
            v106 = v105 - 5;
            while (v106 != v103)
            {
              v19 = *(_QWORD *)(v6 + 104 + 8 * v103++);
              if (v19)
              {
                v12 = v103 + 4;
                goto LABEL_13;
              }
            }
            v12 = v104 - 1;
          }
        }
      }
    }
    v20 = *(_QWORD *)(v0 + 176);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    v14 = 0;
    goto LABEL_16;
  }
  v12 = 0;
  v13 = __clz(__rbit64(v10));
  v14 = (v10 - 1) & v10;
LABEL_9:
  v15 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v15, *(_QWORD *)(v6 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v13, *(_QWORD *)(v0 + 88));
  v16 = *(_QWORD *)(v6 + 56);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  *(_QWORD *)(v15 + *(int *)(v17 + 48)) = *(_QWORD *)(v16 + 8 * v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
  swift_retain();
LABEL_16:
  *(_QWORD *)(v0 + 224) = v12;
  *(_QWORD *)(v0 + 232) = v14;
  v22 = *(_QWORD *)(v0 + 184);
  outlined init with take of Date?(*(_QWORD *)(v0 + 176), v22, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver)?);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23) != 1)
  {
    v34 = *(_QWORD *)(v0 + 160);
    v33 = *(_QWORD *)(v0 + 168);
    v35 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 96);
    v37 = *(_QWORD *)(*(_QWORD *)(v0 + 184) + *(int *)(v23 + 48));
    *(_QWORD *)(v0 + 240) = v37;
    v38 = *(void (**)(uint64_t))(v36 + 32);
    *(_QWORD *)(v0 + 248) = v38;
    v38(v33);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    *(_QWORD *)(v0 + 256) = v39;
    v39(v34, v33, v35);
    v40 = *(_QWORD *)(v37 + 40);
    ObjectType = swift_getObjectType();
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v42;
    *v42 = v0;
    v42[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(ObjectType, v40);
  }
  swift_release();
  v24 = *(_QWORD *)(v11 + 16);
  v25 = *(_QWORD *)(v0 + 96);
  if (v24)
  {
    v26 = v11 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    v109 = *(_QWORD *)(v25 + 72);
    v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v28 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 88);
      v27(v28, v26, v11);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
      v29(v28, 0, 1, v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v28, 1, v11) == 1)
        break;
      v11 = *(_QWORD *)(v0 + 152);
      v30 = *(_QWORD *)(v0 + 88);
      v31 = *(_QWORD *)(v0 + 96);
      v32 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 32))(v11, *(_QWORD *)(v0 + 80), v30);
      invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(v11, v32);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v11, v30);
      v26 += v109;
      if (!--v24)
        goto LABEL_24;
    }
  }
  else
  {
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
    swift_bridgeObjectRetain();
LABEL_24:
    v29(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 88));
  }
  swift_bridgeObjectRelease_n();
  v44 = 0;
  v45 = MEMORY[0x1E0DEE9E0];
  v46 = *(_BYTE *)(MEMORY[0x1E0DEE9E0] + 32);
  *(_BYTE *)(v0 + 353) = v46;
  v47 = 1 << v46;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  else
    v48 = -1;
  v49 = v48 & *(_QWORD *)(v45 + 64);
  while (1)
  {
    if (v49)
    {
      v52 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      v53 = v52 | (v44 << 6);
      v54 = *(_QWORD *)(v0 + 208);
LABEL_33:
      v55 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v55, *(_QWORD *)(v54 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v53, *(_QWORD *)(v0 + 88));
      v56 = *(_QWORD *)(v54 + 56);
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
      v58 = *(void **)(v56 + 8 * v53);
      *(_QWORD *)(v55 + *(int *)(v57 + 48)) = v58;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v55, 0, 1, v57);
      v59 = v58;
      goto LABEL_40;
    }
    v60 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    v61 = (unint64_t)((1 << *(_BYTE *)(v0 + 353)) + 63) >> 6;
    if (v60 >= v61)
    {
      v64 = v44;
    }
    else
    {
      v54 = *(_QWORD *)(v0 + 208);
      v62 = v54 + 64;
      v63 = *(_QWORD *)(v54 + 64 + 8 * v60);
      if (v63)
        goto LABEL_37;
      v64 = v44 + 1;
      if (v44 + 2 < v61)
      {
        v63 = *(_QWORD *)(v62 + 8 * (v44 + 2));
        if (v63)
        {
          v60 = v44 + 2;
LABEL_37:
          v49 = (v63 - 1) & v63;
          v53 = __clz(__rbit64(v63)) + (v60 << 6);
          v44 = v60;
          goto LABEL_33;
        }
        v64 = v44 + 2;
        if (v44 + 3 < v61)
        {
          v63 = *(_QWORD *)(v62 + 8 * (v44 + 3));
          if (v63)
          {
            v60 = v44 + 3;
            goto LABEL_37;
          }
          v60 = v44 + 4;
          v64 = v44 + 3;
          if (v44 + 4 < v61)
          {
            v63 = *(_QWORD *)(v62 + 8 * v60);
            if (v63)
              goto LABEL_37;
            v64 = v61 - 1;
            v85 = v61 - 5;
            while (v85 != v44)
            {
              v63 = *(_QWORD *)(v54 + 104 + 8 * v44++);
              if (v63)
              {
                v60 = v44 + 4;
                goto LABEL_37;
              }
            }
          }
        }
      }
    }
    v65 = *(_QWORD *)(v0 + 64);
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
    v49 = 0;
    v44 = v64;
LABEL_40:
    *(_QWORD *)(v0 + 288) = v44;
    *(_QWORD *)(v0 + 296) = v49;
    v67 = *(_QWORD *)(v0 + 72);
    outlined init with take of Date?(*(_QWORD *)(v0 + 64), v67, &demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
    v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v67, 1, v68) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v69 = *(_QWORD *)(v0 + 144);
    v70 = *(_QWORD *)(v0 + 96);
    v71 = *(_QWORD *)(v0 + 56);
    v72 = *(void **)(*(_QWORD *)(v0 + 72) + *(int *)(v68 + 48));
    *(_QWORD *)(v0 + 304) = v72;
    (*(void (**)(uint64_t))(v70 + 32))(v69);
    if (*(_QWORD *)(*(_QWORD *)(v71 + 136) + 16))
      break;
LABEL_44:
    v108 = v72;
    v110 = v44;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.default.getter();
    v77 = os_log_type_enabled(v75, v76);
    v78 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 120);
    v80 = *(_QWORD *)(v0 + 88);
    v79 = *(_QWORD *)(v0 + 96);
    if (v77)
    {
      v107 = *(_QWORD *)(v0 + 144);
      v81 = swift_slowAlloc();
      v82 = swift_slowAlloc();
      v111 = v82;
      *(_DWORD *)v81 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v83 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v81 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v111);
      swift_bridgeObjectRelease();
      v50 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
      v50(v11, v80);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v82, -1, -1);
      MEMORY[0x1A1B05CC4](v81, -1, -1);

      v51 = v107;
    }
    else
    {

      v50 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
      v50(v11, v80);
      v51 = v78;
    }
    v50(v51, v80);
    v44 = v110;
  }
  v73 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v73);
  if ((v74 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v87 = *(_QWORD *)(v0 + 136);
  v86 = *(_QWORD *)(v0 + 144);
  v89 = *(_QWORD *)(v0 + 88);
  v88 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
  *(_QWORD *)(v0 + 312) = v90;
  v90(v87, v86, v89);
  v91 = Logger.logObject.getter();
  v92 = static os_log_type_t.default.getter();
  v93 = os_log_type_enabled(v91, v92);
  v94 = *(_QWORD *)(v0 + 136);
  v96 = *(_QWORD *)(v0 + 88);
  v95 = *(_QWORD *)(v0 + 96);
  if (v93)
  {
    v97 = swift_slowAlloc();
    v98 = swift_slowAlloc();
    v111 = v98;
    *(_DWORD *)v97 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v99 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v97 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v111);
    swift_bridgeObjectRelease();
    v101 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v101(v94, v96);
    _os_log_impl(&dword_1A0DB3000, v91, v92, "Attempting to recover providerID: %s", (uint8_t *)v97, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v98, -1, -1);
    MEMORY[0x1A1B05CC4](v97, -1, -1);
  }
  else
  {
    v101 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v101(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 320) = v101;
  swift_getObjectType();
  v102 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v102;
  *v102 = v0;
  v102[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
  return BackgroundSessionManagerXPCClient.begin(request:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t ObjectType;
  _QWORD *v51;
  int64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v116 = v2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, v3, isUniquelyReferenced_nonNull_native);
  v7 = v2;
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v3, v4);
  v9 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 88);
  swift_release();
  result = ((uint64_t (*)(uint64_t, uint64_t))v8)(v10, v11);
  v14 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 208) = v7;
  *(_QWORD *)(v0 + 216) = v9;
  if (!v13)
  {
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      return result;
    }
    v22 = (unint64_t)((1 << *(_BYTE *)(v0 + 352)) + 63) >> 6;
    if (v21 < v22)
    {
      v17 = *(_QWORD *)(v0 + 200);
      v23 = v17 + 64;
      v24 = *(_QWORD *)(v17 + 64 + 8 * v21);
      if (v24)
      {
LABEL_7:
        v15 = (v24 - 1) & v24;
        v16 = __clz(__rbit64(v24)) + (v21 << 6);
        v14 = v21;
        goto LABEL_3;
      }
      v25 = v14 + 2;
      ++v14;
      if (v21 + 1 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * v25);
        if (v24)
        {
LABEL_10:
          v21 = v25;
          goto LABEL_7;
        }
        v14 = v21 + 1;
        if (v21 + 2 < v22)
        {
          v24 = *(_QWORD *)(v23 + 8 * (v21 + 2));
          if (v24)
          {
            v21 += 2;
            goto LABEL_7;
          }
          v25 = v21 + 3;
          v14 = v21 + 2;
          if (v21 + 3 < v22)
          {
            v24 = *(_QWORD *)(v23 + 8 * v25);
            if (v24)
              goto LABEL_10;
            while (1)
            {
              v21 = v25 + 1;
              if (__OFADD__(v25, 1))
                goto LABEL_71;
              if (v21 >= v22)
                break;
              v24 = *(_QWORD *)(v23 + 8 * v21);
              ++v25;
              if (v24)
                goto LABEL_7;
            }
            v14 = v22 - 1;
          }
        }
      }
    }
    v26 = *(_QWORD *)(v0 + 176);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    v15 = 0;
    goto LABEL_22;
  }
  v15 = (v13 - 1) & v13;
  v16 = __clz(__rbit64(v13)) | (v14 << 6);
  v17 = *(_QWORD *)(v0 + 200);
LABEL_3:
  v18 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v18, *(_QWORD *)(v17 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v16, *(_QWORD *)(v0 + 88));
  v19 = *(_QWORD *)(v17 + 56);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  *(_QWORD *)(v18 + *(int *)(v20 + 48)) = *(_QWORD *)(v19 + 8 * v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  swift_retain();
LABEL_22:
  *(_QWORD *)(v0 + 224) = v14;
  *(_QWORD *)(v0 + 232) = v15;
  v28 = *(_QWORD *)(v0 + 184);
  outlined init with take of Date?(*(_QWORD *)(v0 + 176), v28, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver)?);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) != 1)
  {
    v43 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(*(_QWORD *)(v0 + 184) + *(int *)(v29 + 48));
    *(_QWORD *)(v0 + 240) = v46;
    v47 = *(void (**)(uint64_t))(v45 + 32);
    *(_QWORD *)(v0 + 248) = v47;
    v47(v42);
    v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
    *(_QWORD *)(v0 + 256) = v48;
    v48(v43, v42, v44);
    v49 = *(_QWORD *)(v46 + 40);
    ObjectType = swift_getObjectType();
    v51 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v51;
    *v51 = v0;
    v51[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(ObjectType, v49);
  }
  v112 = v7;
  swift_release();
  v30 = *(_QWORD *)(v9 + 16);
  v31 = v9;
  v32 = *(_QWORD *)(v0 + 96);
  if (v30)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    v114 = *(_QWORD *)(v32 + 72);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v36 = *(_QWORD *)(v0 + 80);
      v35 = *(_QWORD *)(v0 + 88);
      v34(v36, v33, v35);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
      v37(v36, 0, 1, v35);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v36, 1, v35) == 1)
        break;
      v38 = *(_QWORD *)(v0 + 152);
      v39 = *(_QWORD *)(v0 + 88);
      v40 = *(_QWORD *)(v0 + 96);
      v41 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 32))(v38, *(_QWORD *)(v0 + 80), v39);
      invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(v38, v41);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      v33 += v114;
      if (!--v30)
        goto LABEL_30;
    }
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    swift_bridgeObjectRetain();
LABEL_30:
    v37(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 88));
  }
  result = swift_bridgeObjectRelease_n();
  v52 = 0;
  v53 = *(_BYTE *)(v112 + 32);
  *(_BYTE *)(v0 + 353) = v53;
  v54 = 1 << v53;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  else
    v55 = -1;
  v56 = v55 & *(_QWORD *)(v112 + 64);
  while (1)
  {
    if (v56)
    {
      v59 = __clz(__rbit64(v56));
      v56 &= v56 - 1;
      v60 = v59 | (v52 << 6);
      v61 = *(_QWORD *)(v0 + 208);
LABEL_39:
      v62 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v62, *(_QWORD *)(v61 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v60, *(_QWORD *)(v0 + 88));
      v63 = *(_QWORD *)(v61 + 56);
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
      v65 = *(void **)(v63 + 8 * v60);
      *(_QWORD *)(v62 + *(int *)(v64 + 48)) = v65;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 0, 1, v64);
      v66 = v65;
      goto LABEL_46;
    }
    v67 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_70;
    }
    v68 = (unint64_t)((1 << *(_BYTE *)(v0 + 353)) + 63) >> 6;
    if (v67 >= v68)
    {
      v71 = v52;
    }
    else
    {
      v61 = *(_QWORD *)(v0 + 208);
      v69 = v61 + 64;
      v70 = *(_QWORD *)(v61 + 64 + 8 * v67);
      if (v70)
        goto LABEL_43;
      v71 = v52 + 1;
      if (v52 + 2 < v68)
      {
        v70 = *(_QWORD *)(v69 + 8 * (v52 + 2));
        if (v70)
        {
          v67 = v52 + 2;
LABEL_43:
          v56 = (v70 - 1) & v70;
          v60 = __clz(__rbit64(v70)) + (v67 << 6);
          v52 = v67;
          goto LABEL_39;
        }
        v71 = v52 + 2;
        if (v52 + 3 < v68)
        {
          v70 = *(_QWORD *)(v69 + 8 * (v52 + 3));
          if (v70)
          {
            v67 = v52 + 3;
            goto LABEL_43;
          }
          v67 = v52 + 4;
          v71 = v52 + 3;
          if (v52 + 4 < v68)
          {
            v70 = *(_QWORD *)(v69 + 8 * v67);
            if (v70)
              goto LABEL_43;
            v71 = v68 - 1;
            v93 = v68 - 5;
            while (v93 != v52)
            {
              v70 = *(_QWORD *)(v61 + 104 + 8 * v52++);
              if (v70)
              {
                v67 = v52 + 4;
                goto LABEL_43;
              }
            }
          }
        }
      }
    }
    v72 = *(_QWORD *)(v0 + 64);
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
    v56 = 0;
    v52 = v71;
LABEL_46:
    *(_QWORD *)(v0 + 288) = v52;
    *(_QWORD *)(v0 + 296) = v56;
    v74 = *(_QWORD *)(v0 + 72);
    outlined init with take of Date?(*(_QWORD *)(v0 + 64), v74, &demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v74, 1, v75) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v76 = *(_QWORD *)(v0 + 144);
    v77 = *(_QWORD *)(v0 + 96);
    v78 = *(_QWORD *)(v0 + 56);
    v79 = *(void **)(*(_QWORD *)(v0 + 72) + *(int *)(v75 + 48));
    *(_QWORD *)(v0 + 304) = v79;
    (*(void (**)(uint64_t))(v77 + 32))(v76);
    if (*(_QWORD *)(*(_QWORD *)(v78 + 136) + 16))
      break;
LABEL_50:
    v113 = v79;
    v115 = v52;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.default.getter();
    v84 = os_log_type_enabled(v82, v83);
    v85 = *(_QWORD *)(v0 + 144);
    v86 = *(_QWORD *)(v0 + 120);
    v88 = *(_QWORD *)(v0 + 88);
    v87 = *(_QWORD *)(v0 + 96);
    if (v84)
    {
      v111 = *(_QWORD *)(v0 + 144);
      v89 = swift_slowAlloc();
      v90 = swift_slowAlloc();
      v116 = v90;
      *(_DWORD *)v89 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v91 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v89 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v116);
      swift_bridgeObjectRelease();
      v57 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      v57(v86, v88);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v90, -1, -1);
      MEMORY[0x1A1B05CC4](v89, -1, -1);

      v58 = v111;
    }
    else
    {

      v57 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
      v57(v86, v88);
      v58 = v85;
    }
    result = ((uint64_t (*)(uint64_t, uint64_t))v57)(v58, v88);
    v52 = v115;
  }
  v80 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v80);
  if ((v81 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  v95 = *(_QWORD *)(v0 + 136);
  v94 = *(_QWORD *)(v0 + 144);
  v97 = *(_QWORD *)(v0 + 88);
  v96 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
  *(_QWORD *)(v0 + 312) = v98;
  v98(v95, v94, v97);
  v99 = Logger.logObject.getter();
  v100 = static os_log_type_t.default.getter();
  v101 = os_log_type_enabled(v99, v100);
  v102 = *(_QWORD *)(v0 + 136);
  v104 = *(_QWORD *)(v0 + 88);
  v103 = *(_QWORD *)(v0 + 96);
  if (v101)
  {
    v105 = swift_slowAlloc();
    v106 = swift_slowAlloc();
    v116 = v106;
    *(_DWORD *)v105 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v107 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v105 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, &v116);
    swift_bridgeObjectRelease();
    v109 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    v109(v102, v104);
    _os_log_impl(&dword_1A0DB3000, v99, v100, "Attempting to recover providerID: %s", (uint8_t *)v105, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v106, -1, -1);
    MEMORY[0x1A1B05CC4](v105, -1, -1);
  }
  else
  {
    v109 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    v109(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 320) = v109;
  swift_getObjectType();
  v110 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v110;
  *v110 = v0;
  v110[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
  return BackgroundSessionManagerXPCClient.begin(request:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t ObjectType;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  NSObject *v106;
  os_log_type_t v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 240);
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v123 = v5;
    *(_DWORD *)v4 = 136315138;
    *(_QWORD *)(v0 + 48) = v3;
    type metadata accessor for GroupSessionProviderObserver();
    swift_retain();
    v6 = String.init<A>(reflecting:)();
    *(_QWORD *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v123);
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Failed to re-create TUConversationActivityCreateSessionRequest for providerManager: %s", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 88));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v0 + 216);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_76:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
  v12 = *(void **)(v0 + 272);
  v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 248);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v9 + 16) = v11 + 1;
  v13(v9+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v11, v14, v15);

  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 344);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 88);
  swift_release();
  result = v17(v19, v20);
  v23 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 208) = v18;
  *(_QWORD *)(v0 + 216) = v9;
  if (!v22)
  {
    v30 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_78:
      __break(1u);
      return result;
    }
    v31 = (unint64_t)((1 << *(_BYTE *)(v0 + 352)) + 63) >> 6;
    if (v30 < v31)
    {
      v26 = *(_QWORD *)(v0 + 200);
      v32 = v26 + 64;
      v33 = *(_QWORD *)(v26 + 64 + 8 * v30);
      if (v33)
      {
LABEL_13:
        v24 = (v33 - 1) & v33;
        v25 = __clz(__rbit64(v33)) + (v30 << 6);
        v23 = v30;
        goto LABEL_9;
      }
      v34 = v23 + 2;
      ++v23;
      if (v30 + 1 < v31)
      {
        v33 = *(_QWORD *)(v32 + 8 * v34);
        if (v33)
        {
LABEL_16:
          v30 = v34;
          goto LABEL_13;
        }
        v23 = v30 + 1;
        if (v30 + 2 < v31)
        {
          v33 = *(_QWORD *)(v32 + 8 * (v30 + 2));
          if (v33)
          {
            v30 += 2;
            goto LABEL_13;
          }
          v34 = v30 + 3;
          v23 = v30 + 2;
          if (v30 + 3 < v31)
          {
            v33 = *(_QWORD *)(v32 + 8 * v34);
            if (v33)
              goto LABEL_16;
            while (1)
            {
              v30 = v34 + 1;
              if (__OFADD__(v34, 1))
                goto LABEL_78;
              if (v30 >= v31)
                break;
              v33 = *(_QWORD *)(v32 + 8 * v30);
              ++v34;
              if (v33)
                goto LABEL_13;
            }
            v23 = v31 - 1;
          }
        }
      }
    }
    v35 = *(_QWORD *)(v0 + 176);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    v24 = 0;
    goto LABEL_28;
  }
  v24 = (v22 - 1) & v22;
  v25 = __clz(__rbit64(v22)) | (v23 << 6);
  v26 = *(_QWORD *)(v0 + 200);
LABEL_9:
  v27 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v27, *(_QWORD *)(v26 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v25, *(_QWORD *)(v0 + 88));
  v28 = *(_QWORD *)(v26 + 56);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  *(_QWORD *)(v27 + *(int *)(v29 + 48)) = *(_QWORD *)(v28 + 8 * v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 0, 1, v29);
  swift_retain();
LABEL_28:
  *(_QWORD *)(v0 + 224) = v23;
  *(_QWORD *)(v0 + 232) = v24;
  v37 = *(_QWORD *)(v0 + 184);
  outlined init with take of Date?(*(_QWORD *)(v0 + 176), v37, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver)?);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) != 1)
  {
    v51 = *(_QWORD *)(v0 + 160);
    v50 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 88);
    v53 = *(_QWORD *)(v0 + 96);
    v54 = *(_QWORD *)(*(_QWORD *)(v0 + 184) + *(int *)(v38 + 48));
    *(_QWORD *)(v0 + 240) = v54;
    v55 = *(void (**)(uint64_t))(v53 + 32);
    *(_QWORD *)(v0 + 248) = v55;
    v55(v50);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    *(_QWORD *)(v0 + 256) = v56;
    v56(v51, v50, v52);
    v57 = *(_QWORD *)(v54 + 40);
    ObjectType = swift_getObjectType();
    v59 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v59;
    *v59 = v0;
    v59[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(ObjectType, v57);
  }
  v118 = v18;
  swift_release();
  v39 = *(_QWORD *)(v9 + 16);
  v40 = *(_QWORD *)(v0 + 96);
  if (v39)
  {
    v41 = v9 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v121 = *(_QWORD *)(v40 + 72);
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v44 = *(_QWORD *)(v0 + 80);
      v43 = *(_QWORD *)(v0 + 88);
      v42(v44, v41, v43);
      v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v45(v44, 0, 1, v43);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v44, 1, v43) == 1)
        break;
      v46 = *(_QWORD *)(v0 + 152);
      v47 = *(_QWORD *)(v0 + 88);
      v48 = *(_QWORD *)(v0 + 96);
      v49 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 32))(v46, *(_QWORD *)(v0 + 80), v47);
      invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(v46, v49);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
      v41 += v121;
      if (!--v39)
        goto LABEL_36;
    }
  }
  else
  {
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    swift_bridgeObjectRetain();
LABEL_36:
    v45(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 88));
  }
  swift_bridgeObjectRelease_n();
  v9 = 0;
  v60 = *(_BYTE *)(v118 + 32);
  *(_BYTE *)(v0 + 353) = v60;
  v61 = 1 << v60;
  if (v61 < 64)
    v62 = ~(-1 << v61);
  else
    v62 = -1;
  v63 = v62 & *(_QWORD *)(v118 + 64);
  while (1)
  {
    if (v63)
    {
      v66 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v67 = v66 | (v9 << 6);
      v68 = *(_QWORD *)(v0 + 208);
LABEL_45:
      v69 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v69, *(_QWORD *)(v68 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v67, *(_QWORD *)(v0 + 88));
      v70 = *(_QWORD *)(v68 + 56);
      v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
      v72 = *(void **)(v70 + 8 * v67);
      *(_QWORD *)(v69 + *(int *)(v71 + 48)) = v72;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v69, 0, 1, v71);
      v73 = v72;
      goto LABEL_52;
    }
    v74 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_76;
    }
    v75 = (unint64_t)((1 << *(_BYTE *)(v0 + 353)) + 63) >> 6;
    if (v74 >= v75)
    {
      v78 = v9;
    }
    else
    {
      v68 = *(_QWORD *)(v0 + 208);
      v76 = v68 + 64;
      v77 = *(_QWORD *)(v68 + 64 + 8 * v74);
      if (v77)
        goto LABEL_49;
      v78 = v9 + 1;
      if ((uint64_t)(v9 + 2) < v75)
      {
        v77 = *(_QWORD *)(v76 + 8 * (v9 + 2));
        if (v77)
        {
          v74 = v9 + 2;
LABEL_49:
          v63 = (v77 - 1) & v77;
          v67 = __clz(__rbit64(v77)) + (v74 << 6);
          v9 = v74;
          goto LABEL_45;
        }
        v78 = v9 + 2;
        if ((uint64_t)(v9 + 3) < v75)
        {
          v77 = *(_QWORD *)(v76 + 8 * (v9 + 3));
          if (v77)
          {
            v74 = v9 + 3;
            goto LABEL_49;
          }
          v74 = v9 + 4;
          v78 = v9 + 3;
          if ((uint64_t)(v9 + 4) < v75)
          {
            v77 = *(_QWORD *)(v76 + 8 * v74);
            if (v77)
              goto LABEL_49;
            v78 = v75 - 1;
            v100 = v75 - 5;
            while (v100 != v9)
            {
              v77 = *(_QWORD *)(v68 + 104 + 8 * v9++);
              if (v77)
              {
                v74 = v9 + 4;
                goto LABEL_49;
              }
            }
          }
        }
      }
    }
    v79 = *(_QWORD *)(v0 + 64);
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 1, 1, v80);
    v63 = 0;
    v9 = v78;
LABEL_52:
    *(_QWORD *)(v0 + 288) = v9;
    *(_QWORD *)(v0 + 296) = v63;
    v81 = *(_QWORD *)(v0 + 72);
    outlined init with take of Date?(*(_QWORD *)(v0 + 64), v81, &demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
    v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v81, 1, v82) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v83 = *(_QWORD *)(v0 + 144);
    v84 = *(_QWORD *)(v0 + 96);
    v85 = *(_QWORD *)(v0 + 56);
    v86 = *(void **)(*(_QWORD *)(v0 + 72) + *(int *)(v82 + 48));
    *(_QWORD *)(v0 + 304) = v86;
    (*(void (**)(uint64_t))(v84 + 32))(v83);
    if (*(_QWORD *)(*(_QWORD *)(v85 + 136) + 16))
      break;
LABEL_56:
    v120 = v86;
    v122 = v9;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.default.getter();
    v91 = os_log_type_enabled(v89, v90);
    v92 = *(_QWORD *)(v0 + 144);
    v93 = *(_QWORD *)(v0 + 120);
    v95 = *(_QWORD *)(v0 + 88);
    v94 = *(_QWORD *)(v0 + 96);
    if (v91)
    {
      v119 = *(_QWORD *)(v0 + 144);
      v96 = swift_slowAlloc();
      v97 = swift_slowAlloc();
      v123 = v97;
      *(_DWORD *)v96 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v98 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v96 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, &v123);
      swift_bridgeObjectRelease();
      v64 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v64(v93, v95);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v97, -1, -1);
      MEMORY[0x1A1B05CC4](v96, -1, -1);

      v65 = v119;
    }
    else
    {

      v64 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v64(v93, v95);
      v65 = v92;
    }
    v64(v65, v95);
    v9 = v122;
  }
  v87 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v87);
  if ((v88 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  v102 = *(_QWORD *)(v0 + 136);
  v101 = *(_QWORD *)(v0 + 144);
  v104 = *(_QWORD *)(v0 + 88);
  v103 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16);
  *(_QWORD *)(v0 + 312) = v105;
  v105(v102, v101, v104);
  v106 = Logger.logObject.getter();
  v107 = static os_log_type_t.default.getter();
  v108 = os_log_type_enabled(v106, v107);
  v109 = *(_QWORD *)(v0 + 136);
  v111 = *(_QWORD *)(v0 + 88);
  v110 = *(_QWORD *)(v0 + 96);
  if (v108)
  {
    v112 = swift_slowAlloc();
    v113 = swift_slowAlloc();
    v123 = v113;
    *(_DWORD *)v112 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v114 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v112 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, &v123);
    swift_bridgeObjectRelease();
    v116 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v116(v109, v111);
    _os_log_impl(&dword_1A0DB3000, v106, v107, "Attempting to recover providerID: %s", (uint8_t *)v112, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v113, -1, -1);
    MEMORY[0x1A1B05CC4](v112, -1, -1);
  }
  else
  {
    v116 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v116(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 320) = v116;
  swift_getObjectType();
  v117 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v117;
  *v117 = v0;
  v117[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
  return BackgroundSessionManagerXPCClient.begin(request:)();
}

uint64_t specialized BackgroundGroupSessionManager.didDisconnect(client:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 272) = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = v4[20];
    v6 = v4[11];
    v7 = *(void (**)(uint64_t, uint64_t))(v4[12] + 8);
    v4[43] = v7;
    v7(v5, v6);
  }
  else
  {
    v4[35] = a1;
  }
  return swift_task_switch();
}

void specialized BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void (*v4)(uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  _QWORD *v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 312))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v5 = *(void **)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = &loc_1A0F0D000;
  if (v3)
  {
    v74 = *(_QWORD *)(v0 + 144);
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v76 = v11;
    *(_DWORD *)v10 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v76);
    v9 = (_QWORD *)&loc_1A0F0D000;
    swift_bridgeObjectRelease();
    v4(v7, v8);
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Recovered providerID: %s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);

    v14 = v74;
  }
  else
  {

    v4(v7, v8);
    v14 = v6;
  }
  v4(v14, v8);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 296);
  v71 = v9[142];
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v19 = (v16 - 1) & v16;
      v20 = v18 | (v15 << 6);
      v21 = *(_QWORD *)(v0 + 208);
LABEL_9:
      v22 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v22, *(_QWORD *)(v21 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v20, *(_QWORD *)(v0 + 88));
      v23 = *(_QWORD *)(v21 + 56);
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
      v25 = *(void **)(v23 + 8 * v20);
      *(_QWORD *)(v22 + *(int *)(v24 + 48)) = v25;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v22, 0, 1, v24);
      v26 = v25;
      goto LABEL_16;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      return;
    }
    v28 = (unint64_t)((1 << *(_BYTE *)(v0 + 353)) + 63) >> 6;
    if (v27 >= v28)
    {
      v31 = v15;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 208);
      v29 = v21 + 64;
      v30 = *(_QWORD *)(v21 + 64 + 8 * v27);
      if (v30)
        goto LABEL_13;
      v31 = v15 + 1;
      if (v15 + 2 < v28)
      {
        v30 = *(_QWORD *)(v29 + 8 * (v15 + 2));
        if (v30)
        {
          v27 = v15 + 2;
LABEL_13:
          v19 = (v30 - 1) & v30;
          v20 = __clz(__rbit64(v30)) + (v27 << 6);
          v15 = v27;
          goto LABEL_9;
        }
        v31 = v15 + 2;
        if (v15 + 3 < v28)
        {
          v30 = *(_QWORD *)(v29 + 8 * (v15 + 3));
          if (v30)
          {
            v27 = v15 + 3;
            goto LABEL_13;
          }
          v27 = v15 + 4;
          v31 = v15 + 3;
          if (v15 + 4 < v28)
          {
            v30 = *(_QWORD *)(v29 + 8 * v27);
            if (v30)
              goto LABEL_13;
            v31 = v28 - 1;
            v53 = v28 - 5;
            while (v53 != v15)
            {
              v30 = *(_QWORD *)(v21 + 104 + 8 * v15++);
              if (v30)
              {
                v27 = v15 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    v32 = *(_QWORD *)(v0 + 64);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
    v19 = 0;
    v15 = v31;
LABEL_16:
    *(_QWORD *)(v0 + 288) = v15;
    *(_QWORD *)(v0 + 296) = v19;
    v34 = *(_QWORD *)(v0 + 72);
    outlined init with take of Date?(*(_QWORD *)(v0 + 64), v34, &demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v36 = *(_QWORD *)(v0 + 144);
    v37 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 56);
    v39 = *(void **)(*(_QWORD *)(v0 + 72) + *(int *)(v35 + 48));
    *(_QWORD *)(v0 + 304) = v39;
    (*(void (**)(uint64_t))(v37 + 32))(v36);
    if (*(_QWORD *)(*(_QWORD *)(v38 + 136) + 16))
      break;
LABEL_20:
    v72 = v19;
    v73 = v39;
    v75 = v15;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.default.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(_QWORD *)(v0 + 144);
    v46 = *(_QWORD *)(v0 + 120);
    v48 = *(_QWORD *)(v0 + 88);
    v47 = *(_QWORD *)(v0 + 96);
    if (v44)
    {
      v49 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v76 = v50;
      *(_DWORD *)v49 = v71;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v49 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v76);
      swift_bridgeObjectRelease();
      v17 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v17(v46, v48);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v50, -1, -1);
      MEMORY[0x1A1B05CC4](v49, -1, -1);

    }
    else
    {

      v17 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v17(v46, v48);
    }
    v17(v45, v48);
    v15 = v75;
    v16 = v72;
  }
  v40 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v40);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v55 = *(_QWORD *)(v0 + 136);
  v54 = *(_QWORD *)(v0 + 144);
  v57 = *(_QWORD *)(v0 + 88);
  v56 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  *(_QWORD *)(v0 + 312) = v58;
  v58(v55, v54, v57);
  v59 = Logger.logObject.getter();
  v60 = static os_log_type_t.default.getter();
  v61 = os_log_type_enabled(v59, v60);
  v62 = *(_QWORD *)(v0 + 136);
  v64 = *(_QWORD *)(v0 + 88);
  v63 = *(_QWORD *)(v0 + 96);
  if (v61)
  {
    v65 = swift_slowAlloc();
    v66 = swift_slowAlloc();
    v76 = v66;
    *(_DWORD *)v65 = v71;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v67 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v65 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v76);
    swift_bridgeObjectRelease();
    v69 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v69(v62, v64);
    _os_log_impl(&dword_1A0DB3000, v59, v60, "Attempting to recover providerID: %s", (uint8_t *)v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v66, -1, -1);
    MEMORY[0x1A1B05CC4](v65, -1, -1);
  }
  else
  {
    v69 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v69(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 320) = v69;
  swift_getObjectType();
  v70 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v70;
  *v70 = v0;
  v70[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
  BackgroundSessionManagerXPCClient.begin(request:)();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t i;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  _QWORD *v77;
  unint64_t v78;
  void *v79;
  void (*v80)(uint64_t, uint64_t);
  int64_t v81;
  uint64_t v82;

  v1 = *(void **)(v0 + 336);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 312))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 336);
    v80 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 88);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v82 = v10;
    *(_DWORD *)v9 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v82);
    swift_bridgeObjectRelease();
    v80(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 40) = v6;
    v13 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v14 = String.init<A>(reflecting:)();
    *(_QWORD *)(v9 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v82);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "Failed to recover providerID: %s, error: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    v16 = *(void **)(v0 + 336);
    (*(void (**)(_QWORD, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));

  }
  v17 = *(void **)(v0 + 336);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v19 = *(void **)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 88);
  invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(v20, *(_QWORD *)(v0 + 56));

  v18(v20, v21);
  v22 = *(_QWORD *)(v0 + 288);
  for (i = *(_QWORD *)(v0 + 296); ; i = v78)
  {
    if (i)
    {
      v25 = __clz(__rbit64(i));
      v26 = (i - 1) & i;
      v27 = v25 | (v22 << 6);
      v28 = *(_QWORD *)(v0 + 208);
LABEL_9:
      v29 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v29, *(_QWORD *)(v28 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72) * v27, *(_QWORD *)(v0 + 88));
      v30 = *(_QWORD *)(v28 + 56);
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
      v32 = *(void **)(v30 + 8 * v27);
      *(_QWORD *)(v29 + *(int *)(v31 + 48)) = v32;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, 0, 1, v31);
      v33 = v32;
      goto LABEL_16;
    }
    v34 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      return;
    }
    v35 = (unint64_t)((1 << *(_BYTE *)(v0 + 353)) + 63) >> 6;
    if (v34 >= v35)
    {
      v38 = v22;
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 208);
      v36 = v28 + 64;
      v37 = *(_QWORD *)(v28 + 64 + 8 * v34);
      if (v37)
        goto LABEL_13;
      v38 = v22 + 1;
      if (v22 + 2 < v35)
      {
        v37 = *(_QWORD *)(v36 + 8 * (v22 + 2));
        if (v37)
        {
          v34 = v22 + 2;
LABEL_13:
          v26 = (v37 - 1) & v37;
          v27 = __clz(__rbit64(v37)) + (v34 << 6);
          v22 = v34;
          goto LABEL_9;
        }
        v38 = v22 + 2;
        if (v22 + 3 < v35)
        {
          v37 = *(_QWORD *)(v36 + 8 * (v22 + 3));
          if (v37)
          {
            v34 = v22 + 3;
            goto LABEL_13;
          }
          v34 = v22 + 4;
          v38 = v22 + 3;
          if (v22 + 4 < v35)
          {
            v37 = *(_QWORD *)(v36 + 8 * v34);
            if (v37)
              goto LABEL_13;
            v38 = v35 - 1;
            v60 = v35 - 5;
            while (v60 != v22)
            {
              v37 = *(_QWORD *)(v28 + 104 + 8 * v22++);
              if (v37)
              {
                v34 = v22 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    v39 = *(_QWORD *)(v0 + 64);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
    v26 = 0;
    v22 = v38;
LABEL_16:
    *(_QWORD *)(v0 + 288) = v22;
    *(_QWORD *)(v0 + 296) = v26;
    v41 = *(_QWORD *)(v0 + 72);
    outlined init with take of Date?(*(_QWORD *)(v0 + 64), v41, &demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest)?);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: BackgroundSessionCreationRequest));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v41, 1, v42) == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v43 = *(_QWORD *)(v0 + 144);
    v44 = *(_QWORD *)(v0 + 96);
    v45 = *(_QWORD *)(v0 + 56);
    v46 = *(void **)(*(_QWORD *)(v0 + 72) + *(int *)(v42 + 48));
    *(_QWORD *)(v0 + 304) = v46;
    (*(void (**)(uint64_t))(v44 + 32))(v43);
    if (*(_QWORD *)(*(_QWORD *)(v45 + 136) + 16))
      break;
LABEL_20:
    v78 = v26;
    v79 = v46;
    v81 = v22;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 88));
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.default.getter();
    v51 = os_log_type_enabled(v49, v50);
    v52 = *(_QWORD *)(v0 + 144);
    v53 = *(_QWORD *)(v0 + 120);
    v55 = *(_QWORD *)(v0 + 88);
    v54 = *(_QWORD *)(v0 + 96);
    if (v51)
    {
      v56 = swift_slowAlloc();
      v57 = swift_slowAlloc();
      v82 = v57;
      *(_DWORD *)v56 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v58 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v82);
      swift_bridgeObjectRelease();
      v24 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v24(v53, v55);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v57, -1, -1);
      MEMORY[0x1A1B05CC4](v56, -1, -1);

    }
    else
    {

      v24 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v24(v53, v55);
    }
    v24(v52, v55);
    v22 = v81;
  }
  v47 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v48 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v62 = *(_QWORD *)(v0 + 136);
  v61 = *(_QWORD *)(v0 + 144);
  v64 = *(_QWORD *)(v0 + 88);
  v63 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  *(_QWORD *)(v0 + 312) = v65;
  v65(v62, v61, v64);
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.default.getter();
  v68 = os_log_type_enabled(v66, v67);
  v69 = *(_QWORD *)(v0 + 136);
  v71 = *(_QWORD *)(v0 + 88);
  v70 = *(_QWORD *)(v0 + 96);
  if (v68)
  {
    v72 = swift_slowAlloc();
    v73 = swift_slowAlloc();
    v82 = v73;
    *(_DWORD *)v72 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v74 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v72 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v82);
    swift_bridgeObjectRelease();
    v76 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v76(v69, v71);
    _os_log_impl(&dword_1A0DB3000, v66, v67, "Attempting to recover providerID: %s", (uint8_t *)v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v73, -1, -1);
    MEMORY[0x1A1B05CC4](v72, -1, -1);
  }
  else
  {
    v76 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v76(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 320) = v76;
  swift_getObjectType();
  v77 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v77;
  *v77 = v0;
  v77[1] = specialized BackgroundGroupSessionManager.didDisconnect(client:);
  BackgroundSessionManagerXPCClient.begin(request:)();
}

uint64_t partial apply for closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v4 = (uint64_t (*)(void))((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                         + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t specialized BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  int isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t result;
  _QWORD v39[2];
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    goto LABEL_28;
  while (1)
  {
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    v10 = os_log_type_enabled(v8, v9);
    v42 = a1;
    if (v10)
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v46 = (_QWORD *)v12;
      *(_DWORD *)v11 = 136315138;
      v45 = a1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUConversationActivitySessionContainer]);
      v13 = String.init<A>(reflecting:)();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a1 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v8, v9, "BackgroundGroupSessionManager received updated containers: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v12, -1, -1);
      MEMORY[0x1A1B05CC4](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v39[1] = *(_QWORD *)(v2 + 192);
    v15 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if (!(a1 >> 62))
    {
      v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v40 = v2;
      if (!v16)
        break;
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    v40 = v2;
    if (!v16)
      break;
LABEL_7:
    v41 = a1 & 0xC000000000000001;
    v2 = 4;
    while (1)
    {
      v18 = v41 ? (id)MEMORY[0x1A1B05010](v2 - 4, a1) : *(id *)(a1 + 8 * v2);
      a1 = (unint64_t)v18;
      v19 = v2 - 3;
      if (__OFADD__(v2 - 4, 1))
        break;
      v20 = objc_msgSend(v18, sel_groupUUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46 = v15;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
      v24 = v15[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_26;
      v27 = v22;
      if (v15[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v15 = v46;
          if ((v22 & 1) != 0)
            goto LABEL_8;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v15 = v46;
          if ((v27 & 1) != 0)
            goto LABEL_8;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_44;
        v23 = v28;
        v15 = v46;
        if ((v27 & 1) != 0)
        {
LABEL_8:
          v17 = v15[7];

          *(_QWORD *)(v17 + 8 * v23) = a1;
          goto LABEL_9;
        }
      }
      v15[(v23 >> 6) + 8] |= 1 << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v15[6] + *(_QWORD *)(v43 + 72) * v23, v6, v44);
      *(_QWORD *)(v15[7] + 8 * v23) = a1;
      v30 = v15[2];
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        goto LABEL_27;
      v15[2] = v32;
LABEL_9:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v44);
      ++v2;
      a1 = v42;
      if (v19 == v16)
        goto LABEL_30;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
  }
LABEL_30:
  swift_bridgeObjectRelease();
  v46 = v15;
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  v33 = MEMORY[0x1E0DEE9D8];
  v46 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v16)
    goto LABEL_42;
  if (v16 < 1)
  {
    __break(1u);
LABEL_44:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v16; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v35 = (id)MEMORY[0x1A1B05010](i, a1);
      else
        v35 = *(id *)(a1 + 8 * i + 32);
      v36 = v35;
      if (objc_msgSend(v35, sel_state) == (id)3 && objc_msgSend(v36, sel_localParticipantIdentifier))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v33 = (unint64_t)v46;
LABEL_42:
    swift_retain();
    v37 = specialized Sequence.flatMap<A>(_:)(v33);
    swift_release();
    swift_release();
    v46 = (_QWORD *)v37;
    CurrentValueSubject.send(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A0EDB998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1A0EDBAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1A0EDBC34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 128);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A0EDBC80@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 136);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A0EDBCCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = BackgroundGroupSessionManager.topicManager.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0EDBCF4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 144) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A0EDBD24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = BackgroundGroupSessionManager.groupSessionTable.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0EDBD4C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 208) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t getEnumTagSinglePayload for BackgroundGroupSessionManagerError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundGroupSessionManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A0EDBE58 + 4 * byte_1A0F14C55[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A0EDBE8C + 4 * asc_1A0F14C50[v4]))();
}

uint64_t sub_1A0EDBE8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EDBE94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EDBE9CLL);
  return result;
}

uint64_t sub_1A0EDBEA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EDBEB0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A0EDBEB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EDBEBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundGroupSessionManagerError()
{
  return &type metadata for BackgroundGroupSessionManagerError;
}

uint64_t method lookup function for BackgroundGroupSessionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.presenceProviderObservers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.presenceProviderObservers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.presenceProviderObservers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.providerObservers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.providerObservers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.providerObservers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.__allocating_init(client:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.topicManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.topicManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.topicManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.onActivitySessionsChanged.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.activitySessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.topicCategory(groupUUID:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.pluginClientReporter.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.pubSubTopicReporter.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.groupSessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.groupSessionsPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.groupSessionTable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.groupSessionTable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.groupSessionTable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.prepareForActivation(options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 312) + *(_QWORD *)(*(_QWORD *)v2 + 312));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.start(presenceSession:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 320) + *(_QWORD *)(*(_QWORD *)v1 + 320));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v6(a1);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.start(presenceProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 328) + *(_QWORD *)(*(_QWORD *)v2 + 328));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.start(provider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 336) + *(_QWORD *)(*(_QWORD *)v2 + 336));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 344) + *(_QWORD *)(*(_QWORD *)v1 + 344));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 352) + *(_QWORD *)(*(_QWORD *)v2 + 352));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.begin(activity:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 360) + *(_QWORD *)(*(_QWORD *)v2 + 360));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.end(activity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 368) + *(_QWORD *)(*(_QWORD *)v1 + 368));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.updateShare(_:activityID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.updateShare(_:activityID:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of BackgroundGroupSessionManager.updateProviders(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t objectdestroyTm_5()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)partial apply()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v4 = (uint64_t (*)(void))((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                         + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t sub_1A0EDC41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v3[4] = v2;
  return swift_task_switch();
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A0EDC5E4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t _s15GroupActivities12TopicManagerC8provider12featureFlagsAC14CopresenceCore32ActivitySessionContainerProvider_p_So09CPFeatureG0_ptcfcySDy10Foundation4UUIDVSo014TUConversationjkL0CGcfU_TA_0()
{
  return closure #1 in TopicManager.init(provider:featureFlags:)();
}

uint64_t partial apply for closure #1 in BackgroundGroupSessionManager.init(client:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in BackgroundGroupSessionManager.init(client:)(a1, v4, v5, v6);
}

uint64_t outlined init with copy of ReliableBroadcastPacket.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_66Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void SystemCoordinatorParticipantRoleRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  if (!v1)
  {
    v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorParticipantRoleRequest.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574736575716572;
  if (*v0 != 1)
    v1 = 0x64656E6769736572;
  if (*v0)
    return v1;
  else
    return 1701736302;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorParticipantRoleRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SystemCoordinatorParticipantRoleRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorParticipantRoleRequest.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorParticipantRoleRequest.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys()
{
  return 0x6E656449656C6F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E656449656C6F72 && a2 == 0xEE00726569666974)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SystemCoordinatorParticipantRoleRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;

  v2 = v1;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys>);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v20 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys>);
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorParticipantRoleRequest.NoneCodingKeys>);
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorParticipantRoleRequest.CodingKeys>);
  v25 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  v14 = v2[1];
  v18[1] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v14)
  {
    v26 = 0;
    lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  }
  if (v14 == 1)
  {
    v28 = 2;
    lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys();
    v15 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  }
  v27 = 1;
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v17 = v23;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

Swift::Int SystemCoordinatorParticipantRoleRequest.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t SystemCoordinatorParticipantRoleRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;

  v39 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  v37 = v4;
  MEMORY[0x1E0C80A78](v3);
  v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys>);
  v38 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorParticipantRoleRequest.NoneCodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorParticipantRoleRequest.CodingKeys>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys();
  v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v34 = v7;
    v17 = v40;
    v18 = v41;
    v43 = v12;
    v19 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if (*(_BYTE *)(v19 + 32))
      {
        if (*(_BYTE *)(v19 + 32) == 1)
        {
          v45 = 1;
          lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys();
          v20 = v17;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v21 = v11;
          v22 = v35;
          v23 = KeyedDecodingContainer.decode(_:forKey:)();
          v24 = v20;
          v25 = v43;
          v30 = v23;
          v32 = v31;
          (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v21);
        }
        else
        {
          v46 = 2;
          lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
          v30 = 0;
          v32 = 1;
        }
      }
      else
      {
        v44 = 0;
        lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
        v30 = 0;
        v32 = 0;
      }
      v33 = v39;
      *v39 = v30;
      v33[1] = v32;
    }
    else
    {
      v26 = type metadata accessor for DecodingError();
      swift_allocError();
      v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v28 = &type metadata for SystemCoordinatorParticipantRoleRequest;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC450], v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemCoordinatorParticipantRoleRequest@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SystemCoordinatorParticipantRoleRequest.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemCoordinatorParticipantRoleRequest(_QWORD *a1)
{
  return SystemCoordinatorParticipantRoleRequest.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemCoordinatorParticipantRoleRequest()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemCoordinatorParticipantRoleRequest()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  if (!v1)
  {
    v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinatorParticipantRoleRequest()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t specialized static SystemCoordinatorParticipantRoleRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (!v3)
  {
    if (!v5)
    {
      v3 = 0;
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != 1)
  {
    if (v5 >= 2)
    {
      if (v2 == v4 && v3 == v5)
        v6 = 1;
      else
        v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_9;
    }
LABEL_8:
    v6 = 0;
LABEL_9:
    outlined copy of SystemCoordinatorParticipantRoleRequest(v4, v5);
    outlined copy of SystemCoordinatorParticipantRoleRequest(v2, v3);
    goto LABEL_10;
  }
  if (v5 != 1)
    goto LABEL_8;
  v3 = 1;
  v6 = 1;
LABEL_10:
  outlined consume of SystemCoordinatorParticipantRoleRequest(v2, v3);
  outlined consume of SystemCoordinatorParticipantRoleRequest(v4, v5);
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.CodingKeys, &unk_1E44F5990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.CodingKeys, &unk_1E44F5990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.CodingKeys, &unk_1E44F5990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.CodingKeys, &unk_1E44F5990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.CodingKeys and conformance SystemCoordinatorParticipantRoleRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys, &unk_1E44F58E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys, &unk_1E44F58E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys, &unk_1E44F58E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys, &unk_1E44F5900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys, &unk_1E44F5900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys, &unk_1E44F5900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys, &unk_1E44F5900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.NoneCodingKeys, &unk_1E44F5A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.NoneCodingKeys, &unk_1E44F5A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest.NoneCodingKeys, &unk_1E44F5A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest.NoneCodingKeys and conformance SystemCoordinatorParticipantRoleRequest.NoneCodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorParticipantRoleRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorParticipantRoleRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinatorParticipantRoleRequest()
{
  return &type metadata for SystemCoordinatorParticipantRoleRequest;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorParticipantRoleRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0EDD6C0 + 4 * byte_1A0F14EB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0EDD6F4 + 4 * byte_1A0F14EB0[v4]))();
}

uint64_t sub_1A0EDD6F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EDD6FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EDD704);
  return result;
}

uint64_t sub_1A0EDD710(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EDD718);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0EDD71C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EDD724(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SystemCoordinatorParticipantRoleRequest.CodingKeys()
{
  return &unk_1E44F5990;
}

void *type metadata accessor for SystemCoordinatorParticipantRoleRequest.NoneCodingKeys()
{
  return &unk_1E44F5A20;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0EDD790 + 4 * byte_1A0F14EBA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0EDD7B0 + 4 * byte_1A0F14EBF[v4]))();
}

_BYTE *sub_1A0EDD790(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0EDD7B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EDD7B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EDD7C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EDD7C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EDD7D0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for SystemCoordinatorParticipantRoleRequest.RequestedRoleCodingKeys()
{
  return &unk_1E44F5900;
}

void *type metadata accessor for SystemCoordinatorParticipantRoleRequest.ResignedRoleCodingKeys()
{
  return &unk_1E44F58E0;
}

uint64_t specialized SystemCoordinatorParticipantRoleRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574736575716572 && a2 == 0xED0000656C6F5264
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656E6769736572 && a2 == 0xEC000000656C6F52)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t PluginAttachmentLedgerTopic.participantsPublisher.getter()
{
  return PluginAttachmentLedgerTopic.participantsPublisher.getter(MEMORY[0x1E0D14F58], &demangling cache variable for type metadata for CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never> and conformance CurrentValueSubject<A, B>);
}

uint64_t PluginAttachmentLedgerTopic.statePublisher.getter()
{
  return PluginAttachmentLedgerTopic.participantsPublisher.getter(MEMORY[0x1E0D15030], &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never> and conformance CurrentValueSubject<A, B>);
}

uint64_t PluginAttachmentLedgerTopic.participantsPublisher.getter(void (*a1)(void), uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;

  a1();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never> and conformance CurrentValueSubject<A, B>(a3, a2);
  v5 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v5;
}

uint64_t PluginAttachmentLedgerTopic.attachmentsPublisher.getter()
{
  return PluginAttachmentLedgerTopic.participantsPublisher.getter(MEMORY[0x1E0D14F40], &demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>);
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.participantsPublisher.getter in conformance PluginAttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  return protocol witness for PluginAttachmentLedgerTopicProvider.participantsPublisher.getter in conformance PluginAttachmentLedgerTopic(a1, a2, MEMORY[0x1E0D14F58], &demangling cache variable for type metadata for CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never> and conformance CurrentValueSubject<A, B>);
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.statePublisher.getter in conformance PluginAttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  return protocol witness for PluginAttachmentLedgerTopicProvider.participantsPublisher.getter in conformance PluginAttachmentLedgerTopic(a1, a2, MEMORY[0x1E0D15030], &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never> and conformance CurrentValueSubject<A, B>);
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.participantsPublisher.getter in conformance PluginAttachmentLedgerTopic(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4, unint64_t *a5)
{
  uint64_t v7;

  a3();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  lazy protocol witness table accessor for type CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never> and conformance CurrentValueSubject<A, B>(a5, a4);
  v7 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v7;
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.attachmentsPublisher.getter in conformance PluginAttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  return protocol witness for PluginAttachmentLedgerTopicProvider.participantsPublisher.getter in conformance PluginAttachmentLedgerTopic(a1, a2, MEMORY[0x1E0D14F40], &demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>, &lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>);
}

void protocol witness for PluginAttachmentLedgerTopicProvider.unsubscribe() in conformance PluginAttachmentLedgerTopic()
{
  PluginAttachmentLedgerTopic.unsubscribe()();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.requestUploadToken() in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.requestUploadToken()();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.refreshUploadToken() in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.refreshUploadToken()();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.requestDownloadToken(for:) in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.requestDownloadToken(for:)();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:) in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.updateStatus(id:status:) in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.updateStatus(id:status:)();
}

uint64_t protocol witness for PluginAttachmentLedgerTopicProvider.remove(id:) in conformance PluginAttachmentLedgerTopic()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return PluginAttachmentLedgerTopic.remove(id:)();
}

unint64_t instantiation function for generic protocol witness table for PluginAttachmentLedgerTopic(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic)
  {
    v1 = type metadata accessor for PluginAttachmentLedgerTopic();
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0D15068], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic);
  }
  return result;
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.participantsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.statePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.attachmentsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.unsubscribe()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.requestUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 48) + *(_QWORD *)(a3 + 48));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.refreshUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 56) + *(_QWORD *)(a3 + 56));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.requestDownloadToken(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 64) + *(_QWORD *)(a4 + 64));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a13 + 72) + *(_QWORD *)(a13 + 72));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v18;
  *v18 = v13;
  v18[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.updateStatus(id:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 80) + *(_QWORD *)(a4 + 80));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopicProvider.remove(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 88) + *(_QWORD *)(a3 + 88));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)(a1, a2, a3, a4, a5, a6, specialized Topic.__allocating_init(name:delegate:pubSubTopicGenerator:));
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Error) -> (@out ())(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = a1;
  return a2(&v3);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

BOOL static Topic.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Topic.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t Topic.BootstrapPubSubTopicInfo.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

uint64_t Topic.BootstrapPubSubTopicInfo.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Topic.BootstrapPubSubTopicInfo.seqNumWatermark.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Topic.BootstrapPubSubTopicInfo.init(dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = outlined init with take of TypedPayloadDecoding(a1, (uint64_t)a5);
  a5[5] = a2;
  a5[6] = a3;
  a5[7] = a4;
  return result;
}

uint64_t Topic.topic.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t Topic.state.getter()
{
  unsigned __int8 v1;

  dispatch thunk of StateMachine.currentState.getter();
  return v1;
}

uint64_t Topic.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Topic.receivedDataHandler : Topic@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *, _QWORD *);

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @guaranteed [UInt64]?) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for Topic.receivedDataHandler : Topic(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(_QWORD **)a2 + 328);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t Topic.receivedDataHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 96);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t Topic.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*Topic.receivedDataHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for Topic.pubSubStateChangedHandler : Topic@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for Topic.pubSubStateChangedHandler : Topic(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 352);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t Topic.pubSubStateChangedHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t Topic.pubSubStateChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*Topic.pubSubStateChangedHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for Topic.catchupNeededHandler : Topic@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()partial apply;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for Topic.catchupNeededHandler : Topic(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(_QWORD **)a2 + 376);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t Topic.catchupNeededHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 128);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t Topic.catchupNeededHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*Topic.catchupNeededHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t Topic.dataCryptor.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12[7];

  v1 = v0;
  if (one-time initialization token for topic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.topic);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = v1[10];
    v8 = v1[11];
    swift_bridgeObjectRetain();
    v12[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Updating PubSubTopic dataCryptorProvider, topic=%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    v9 = swift_release();
  }
  result = (*(uint64_t (**)(uint64_t))(*v1 + 216))(v9);
  if (result)
  {
    swift_beginAccess();
    v11 = v1[18];
    if (v11)
    {
      v12[3] = swift_getObjectType();
      v12[0] = v11;
      swift_unknownObjectRetain_n();
      PubSubTopic.refreshDataCryptorProvider(with:)();
      swift_unknownObjectRelease();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t Topic.dataCryptor.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t Topic.dataCryptor.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  Topic.dataCryptor.didset();
  return swift_unknownObjectRelease();
}

uint64_t (*Topic.dataCryptor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return Topic.dataCryptor.modify;
}

uint64_t Topic.dataCryptor.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return Topic.dataCryptor.didset();
  return result;
}

uint64_t key path getter for Topic.subscribedParticipants : Topic@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t key path setter for Topic.subscribedParticipants : Topic(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 424);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t Topic.subscribedParticipants.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t Topic.subscribedParticipants.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*Topic.subscribedParticipants.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t key path setter for Topic.$subscribedParticipants : Topic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 448))(v6);
}

uint64_t Topic.$subscribedParticipants.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t Topic.$subscribedParticipants.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Topic.$subscribedParticipants.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC15GroupActivities5Topic__subscribedParticipants;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return SystemCoordinatorHostManager.$configurations.modify;
}

uint64_t key path getter for Topic.invalidationHandler : Topic@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 464))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()partial apply;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for Topic.invalidationHandler : Topic(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(_QWORD **)a2 + 472);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t Topic.invalidationHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t Topic.invalidationHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t (*Topic.invalidationHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for Topic.requestEncryptionKeysHandler : Topic@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 488))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()partial apply;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for Topic.requestEncryptionKeysHandler : Topic(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ())partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 496);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t Topic.requestEncryptionKeysHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t Topic.requestEncryptionKeysHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t (*Topic.requestEncryptionKeysHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t Topic.seqNumWatermark.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t Topic.seqNumWatermark.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities5Topic_seqNumWatermark);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Topic.seqNumWatermark.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t Topic.init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)(a1, a2, a3, a4, a5, a6, specialized Topic.init(name:delegate:pubSubTopicGenerator:));
}

uint64_t Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v16;

  ObjectType = swift_getObjectType();
  v16 = a7(a1, a2, a3, a5, a6, v7, ObjectType, a4);
  swift_unknownObjectRelease();
  return v16;
}

Swift::Void __swiftcall Topic.subscribe()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t v37[8];

  v1 = v0;
  LOBYTE(v37[0]) = 0;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    if ((*(uint64_t (**)(void))(*v0 + 392))())
    {
      if (one-time initialization token for topic != -1)
        swift_once();
      v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Log.topic);
      swift_retain();
      v3 = Logger.logObject.getter();
      v4 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v3, v4))
      {
        v5 = (uint8_t *)swift_slowAlloc();
        v6 = swift_slowAlloc();
        v37[0] = v6;
        *(_DWORD *)v5 = 136315138;
        v7 = v1[10];
        v8 = v1[11];
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1A0DB3000, v3, v4, "Subscribing, topic=%s", v5, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v6, -1, -1);
        MEMORY[0x1A1B05CC4](v5, -1, -1);
      }
      else
      {
        swift_release();
      }

      v16 = v1[10];
      v17 = v1[11];
      v18 = *(uint64_t (**)(uint64_t))(*v1 + 488);
      swift_retain();
      v19 = swift_bridgeObjectRetain();
      v20 = v18(v19);
      if (v20)
      {
        v22 = v20;
        v23 = v21;
        v24 = swift_allocObject();
        *(_QWORD *)(v24 + 16) = v22;
        *(_QWORD *)(v24 + 24) = v23;
        v25 = thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()partial apply;
      }
      else
      {
        v24 = swift_allocObject();
        *(_QWORD *)(v24 + 16) = partial apply for closure #1 in Topic.subscribe();
        *(_QWORD *)(v24 + 24) = v1;
        swift_retain();
        v25 = (uint64_t (*)())partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
      }
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = v24;
      v27 = type metadata accessor for GroupSessionDataCryptorProvider();
      swift_allocObject();
      swift_unknownObjectRetain();
      v28 = GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)();
      if (MEMORY[0x1A1B05DC0](v1 + 7))
      {
        v29 = v1[8];
        ObjectType = swift_getObjectType();
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8))(v16, v17, ObjectType, v29);
        swift_unknownObjectRelease();
      }
      else
      {
        v31 = 0;
      }
      v1[9] = v31;
      swift_release();
      v37[3] = v27;
      v37[4] = MEMORY[0x1E0D15120];
      v37[0] = v28;
      v32 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Topic and conformance Topic, (uint64_t (*)(uint64_t))type metadata accessor for Topic, (uint64_t)&protocol conformance descriptor for Topic);
      v33 = *(uint64_t (**)(uint64_t))(*v1 + 512);
      v34 = swift_retain();
      v35 = v33(v34);
      v37[5] = (uint64_t)v1;
      v37[6] = v32;
      v37[7] = v35;
      v36 = (void (*)(uint64_t *))v1[3];
      swift_retain();
      v36(v37);
      swift_allocObject();
      swift_weakInit();
      swift_allocObject();
      swift_weakInit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PubSubTopic, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>, MEMORY[0x1E0C95D90]);
      Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release();
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      outlined destroy of Topic.BootstrapPubSubTopicInfo((uint64_t)v37);
    }
    else
    {
      if (one-time initialization token for topic != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.topic);
      swift_retain();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v37[0] = v13;
        *(_DWORD *)v12 = 136315138;
        v14 = v1[10];
        v15 = v1[11];
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1A0DB3000, v10, v11, "No data cryptor is available for topic=%s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v13, -1, -1);
        MEMORY[0x1A1B05CC4](v12, -1, -1);
      }
      else
      {
        swift_release();
      }

    }
  }
}

void closure #1 in Topic.subscribe()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (one-time initialization token for topic != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.topic);
  swift_retain();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v4, v5, "Topic missing 'requestEncryptionKeysHandler', ignoring request, topic=%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);

  }
  else
  {

    swift_release();
  }
}

void closure #2 in Topic.subscribe()(void **a1)
{
  void *v1;
  uint64_t Strong;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *);
  void *v20;
  _BYTE *v21;
  uint64_t v22[2];

  v1 = *a1;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    if (v1)
    {
      v4 = v1;
      if (one-time initialization token for topic != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Log.topic);
      v6 = v1;
      swift_retain();
      v7 = v1;
      swift_retain();
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc();
        v11 = swift_slowAlloc();
        v22[0] = v11;
        *(_DWORD *)v10 = 136315394;
        v12 = v1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v13 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v10 + 12) = 2080;
        v15 = v3[10];
        v16 = v3[11];
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A0DB3000, v8, v9, "Failed to subscribe, error=%s topic=%s", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v11, -1, -1);
        MEMORY[0x1A1B05CC4](v10, -1, -1);
      }
      else
      {

        swift_release_n();
      }

      LOBYTE(v22[0]) = 3;
      dispatch thunk of StateMachine.execute(_:)();
      v3[9] = 0;
      swift_release();
      swift_retain();
      Lock.withLock<A>(_:)();
      v17 = swift_release();
      v18 = (*(uint64_t (**)(uint64_t))(*v3 + 464))(v17);
      if (v18)
      {
        v19 = (void (*)(void *))v18;
        lazy protocol witness table accessor for type Topic.Errors and conformance Topic.Errors();
        v20 = (void *)swift_allocError();
        *v21 = 1;
        v19(v20);

        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v19);
        swift_release();

        return;
      }

    }
    swift_release();
  }
}

uint64_t closure #1 in closure #2 in Topic.subscribe()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  _BYTE *v15;
  uint64_t *v17;
  NSObject *log;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v17 = v1;
    v4 = one-time initialization token for topic;
    swift_bridgeObjectRetain();
    if (v4 != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    v5 = (unint64_t *)(v2 + 40);
    while (1)
    {
      v21 = v3;
      v7 = *(v5 - 1);
      v6 = *v5;
      v8 = (void (*)(void))v5[4];
      __swift_project_value_buffer(v20, (uint64_t)static Log.topic);
      outlined copy of Data._Representation(v7, v6);
      swift_bridgeObjectRetain();
      outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
      outlined copy of Data._Representation(v7, v6);
      swift_bridgeObjectRetain();
      outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
        break;
      outlined consume of Data._Representation(v7, v6);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
      outlined consume of Data._Representation(v7, v6);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);

      if (v8)
        goto LABEL_10;
LABEL_5:
      v5 += 7;
      v3 = v21 - 1;
      if (v21 == 1)
      {
        swift_bridgeObjectRelease();
        v1 = v17;
        goto LABEL_12;
      }
    }
    log = v9;
    v11 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v22 = v19;
    *(_DWORD *)v11 = 136315138;
    outlined copy of Data._Representation(v7, v6);
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v11 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v22);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v7, v6);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
    outlined consume of Data._Representation(v7, v6);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v8);
    _os_log_impl(&dword_1A0DB3000, log, v10, "Dropping pending message due to error in subscribing: %s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v19, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

    if (!v8)
      goto LABEL_5;
LABEL_10:
    lazy protocol witness table accessor for type Topic.Errors and conformance Topic.Errors();
    v14 = (void *)swift_allocError();
    *v15 = 0;
    v8();

    goto LABEL_5;
  }
LABEL_12:
  *v1 = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in Topic.subscribe()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  void (*v17)(uint64_t *, _QWORD);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[3];
  void *ObjectType;
  uint64_t (*v48)();
  _QWORD *v49;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v44 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v43 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v16 = (_QWORD *)result;
    v39 = v2;
    swift_beginAccess();
    v16[2] = v14;
    swift_retain_n();
    swift_release();
    if (v16[2])
    {
      swift_retain();
      PubSubTopic.$subscribers.getter();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
      lazy protocol witness table accessor for type [UInt64 : PubSubTopic.Participant] and conformance <> [A : B]();
      Publisher<>.removeDuplicates()();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v17 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*v16 + 456))(aBlock);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher> and conformance Publishers.RemoveDuplicates<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>, MEMORY[0x1E0C958E0]);
      Publisher<>.assign(to:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v17(aBlock, 0);
      swift_release();
    }
    swift_release();
    if (one-time initialization token for topic != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.topic);
    swift_retain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      aBlock[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = v16[10];
      v24 = v16[11];
      swift_bridgeObjectRetain();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v19, v20, "Successfully subscribed, topic=%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    LOBYTE(aBlock[0]) = 2;
    if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
    {
      v25 = (*(uint64_t (**)(void))(*v16 + 392))();
      if (v25)
      {
        v26 = v25;
        if ((*(uint64_t (**)(void))(*v16 + 216))())
        {
          ObjectType = (void *)swift_getObjectType();
          aBlock[0] = v26;
          swift_unknownObjectRetain();
          PubSubTopic.refreshDataCryptorProvider(with:)();
          swift_release();
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)aBlock);
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      swift_retain();
      Lock.withLock<A>(_:)();
      swift_release();
      (*(void (**)(_QWORD))(*v16 + 520))(0);
    }
    else
    {
      swift_retain();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        aBlock[0] = v30;
        *(_DWORD *)v29 = 136315138;
        v31 = v16[10];
        v32 = v16[11];
        swift_bridgeObjectRetain();
        v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1A0DB3000, v27, v28, "Unsubscribed while subscribing, topic=%s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v30, -1, -1);
        MEMORY[0x1A1B05CC4](v29, -1, -1);
      }
      else
      {
        swift_release();
      }

      if ((*(uint64_t (**)(void))(*v16 + 216))())
      {
        v33 = (void *)PubSubTopic.queue.getter();
        swift_release();
        v48 = partial apply for closure #1 in closure #3 in Topic.subscribe();
        v49 = v16;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
        ObjectType = &block_descriptor_79_0;
        v34 = _Block_copy(aBlock);
        swift_retain();
        v35 = v40;
        static DispatchQoS.unspecified.getter();
        v45 = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        v36 = v43;
        v37 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1A1B04D7C](0, v35, v36, v34);
        _Block_release(v34);

        swift_release();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v37);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v42);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #3 in Topic.subscribe()(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 216))();
  if (result)
  {
    PubSubTopic.unsubscribe(force:)(0);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #3 in Topic.subscribe()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v34 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = a1;
  v6 = a1 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages;
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v7)
  {
    v32 = v6;
    v33 = v1;
    v40 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 216);
    v31 = swift_bridgeObjectRetain();
    v8 = v31 + 40;
    do
    {
      v11 = *(_QWORD *)(v8 - 8);
      v10 = *(_QWORD *)v8;
      v12 = *(_QWORD *)(v8 + 8);
      v47 = *(_QWORD *)(v8 + 16);
      LODWORD(v46) = *(unsigned __int8 *)(v8 + 24);
      v14 = *(_QWORD *)(v8 + 32);
      v13 = *(_QWORD *)(v8 + 40);
      v15 = v10;
      outlined copy of Data._Representation(v11, v10);
      v16 = v12;
      swift_bridgeObjectRetain();
      v17 = v13;
      v18 = outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v14);
      v19 = v40(v18);
      if (v19)
      {
        v20 = v19;
        v45 = PubSubTopic.queue.getter();
        v21 = swift_allocObject();
        swift_weakInit();
        v22 = swift_allocObject();
        *(_QWORD *)(v22 + 16) = v20;
        *(_QWORD *)(v22 + 24) = v21;
        v41 = v21;
        v42 = v15;
        *(_QWORD *)(v22 + 32) = v11;
        *(_QWORD *)(v22 + 40) = v15;
        v43 = v16;
        v44 = v17;
        v23 = v47;
        *(_QWORD *)(v22 + 48) = v16;
        *(_QWORD *)(v22 + 56) = v23;
        *(_BYTE *)(v22 + 64) = (_BYTE)v46;
        *(_QWORD *)(v22 + 72) = v14;
        *(_QWORD *)(v22 + 80) = v17;
        aBlock[4] = partial apply for closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:);
        aBlock[5] = v22;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        aBlock[3] = &block_descriptor_87;
        v46 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        outlined copy of Data._Representation(v11, v15);
        swift_bridgeObjectRetain();
        outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v14);
        v47 = v14;
        v24 = v34;
        static DispatchQoS.unspecified.getter();
        v49 = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        v25 = v37;
        v26 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        v28 = (void *)v45;
        v27 = v46;
        MEMORY[0x1A1B04D7C](0, v24, v25, v46);
        _Block_release(v27);

        swift_release();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v26);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v36);
        swift_release();
        swift_release();
        outlined consume of Data._Representation(v11, v42);
        swift_bridgeObjectRelease();
        v9 = v47;
      }
      else
      {
        outlined consume of Data._Representation(v11, v15);
        swift_bridgeObjectRelease();
        v9 = v14;
      }
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v9);
      v8 += 56;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v6 = v32;
  }
  *(_QWORD *)v6 = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Topic.unsubscribe()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void *v41;
  void (*v42)();
  uint64_t v43;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(aBlock) = 1;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v35 = v6;
    if (one-time initialization token for topic != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.topic);
    swift_retain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v34 = v2;
      v13 = (uint8_t *)v12;
      v14 = swift_slowAlloc();
      aBlock = v14;
      *(_DWORD *)v13 = 136315138;
      v32 = v3;
      v33 = v5;
      v15 = v1[10];
      v16 = v1[11];
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &aBlock);
      v3 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      v5 = v33;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Unsubscribing, topic=%s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v14, -1, -1);
      v17 = v13;
      v2 = v34;
      MEMORY[0x1A1B05CC4](v17, -1, -1);

    }
    else
    {

      v18 = swift_release();
    }
    v19 = (*(uint64_t (**)(uint64_t))(*v1 + 216))(v18);
    if (v19)
    {
      v20 = v19;
      v21 = (void *)PubSubTopic.queue.getter();
      v42 = partial apply for closure #1 in Topic.unsubscribe();
      v43 = v20;
      aBlock = MEMORY[0x1E0C809B0];
      v39 = 1107296256;
      v40 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v41 = &block_descriptor_12;
      v22 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v37 = MEMORY[0x1E0DEE9D8];
      v23 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v33 = (char *)v24;
      v34 = v23;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1A1B04D7C](0, v8, v5, v22);
      _Block_release(v22);

      v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v5, v2);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v8, v36);
      swift_release();
      v27 = PubSubTopic.reporter.getter();
      if (v27)
      {
        v28 = v27;
        v35 = PubSubTopicReporter.queue.getter();
        v29 = swift_allocObject();
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = v20;
        v42 = partial apply for closure #2 in Topic.unsubscribe();
        v43 = v29;
        aBlock = MEMORY[0x1E0C809B0];
        v39 = 1107296256;
        v40 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v41 = &block_descriptor_19;
        v30 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        v37 = MEMORY[0x1E0DEE9D8];
        dispatch thunk of SetAlgebra.init<A>(_:)();
        v31 = (void *)v35;
        MEMORY[0x1A1B04D7C](0, v8, v5, v30);
        _Block_release(v30);
        swift_release();
        swift_release();

        v25(v5, v2);
        v26(v8, v36);
      }
      swift_release();
    }
  }
}

void closure #2 in Topic.unsubscribe()()
{
  char v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  PubSubTopic.reporterTag.getter();
  v0 = dispatch thunk of PubSubTopicReporter.emitAndRemoveReport(forTag:)();
  swift_bridgeObjectRelease();
  if ((v0 & 1) == 0)
  {
    if (one-time initialization token for topic != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.topic);
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v8 = v5;
      *(_DWORD *)v4 = 136315138;
      v6 = PubSubTopic.reporterTag.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v2, v3, "Could not find or remove the report with tag=%s", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v5, -1, -1);
      MEMORY[0x1A1B05CC4](v4, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

void Topic.sendData(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v11)(void);
  uint64_t v12;
  void *v13;
  _BYTE *v14;

  v11 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 312);
  if (v11() == 1)
  {
    Topic._sendData(_:to:previousSeqNumUnacked:completion:)(a1, a2, a3, 0, 1, (uint64_t)a4, a5);
  }
  else
  {
    v12 = v11();
    if ((_BYTE)v12)
    {
      lazy protocol witness table accessor for type Topic.Errors and conformance Topic.Errors();
      v13 = (void *)swift_allocError();
      *v14 = 0;
      a4();

    }
    else
    {
      MEMORY[0x1E0C80A78](v12);
      swift_retain();
      Lock.withLock<A>(_:)();
      swift_release();
    }
  }
}

uint64_t closure #1 in Topic.sendData(_:to:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD **v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v11 = (_QWORD **)(a1 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages);
  swift_beginAccess();
  v12 = *v11;
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v11 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *v11 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
    *v11 = v12;
  }
  v12[2] = v15 + 1;
  v16 = &v12[7 * v15];
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  v16[7] = 0;
  *((_BYTE *)v16 + 64) = 1;
  v16[9] = a5;
  v16[10] = a6;
  return swift_endAccess();
}

uint64_t Topic._sendData(_:to:previousSeqNumUnacked:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v35 = a6;
  v36 = a7;
  LODWORD(v34) = a5;
  v33 = a4;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v37 = *(_QWORD *)(v15 - 8);
  v38 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 216))(v16);
  if (result)
  {
    v20 = result;
    v31 = PubSubTopic.queue.getter();
    v21 = swift_allocObject();
    v32 = v12;
    v22 = v21;
    swift_weakInit();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v22;
    v30 = v22;
    *(_QWORD *)(v23 + 32) = a1;
    *(_QWORD *)(v23 + 40) = a2;
    v24 = v33;
    *(_QWORD *)(v23 + 48) = a3;
    *(_QWORD *)(v23 + 56) = v24;
    *(_BYTE *)(v23 + 64) = v34 & 1;
    v25 = v14;
    v26 = v35;
    v27 = v36;
    *(_QWORD *)(v23 + 72) = v35;
    *(_QWORD *)(v23 + 80) = v27;
    aBlock[4] = partial apply for closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:);
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_76;
    v34 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    outlined copy of Data._Representation(a1, a2);
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v26);
    static DispatchQoS.unspecified.getter();
    v39 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v28 = v34;
    v29 = (void *)v31;
    MEMORY[0x1A1B04D7C](0, v18, v25, v34);
    _Block_release(v28);

    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v11);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD))
{
  uint64_t result;

  if ((PubSubTopic.isAvailableUnsafe.getter() & 1) != 0)
  {
    result = PubSubTopic.publish(message:to:previousSeqNumUnacked:)();
    if (a8)
      return a8(0);
  }
  else
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      MEMORY[0x1E0C80A78](result);
      swift_retain();
      Lock.withLock<A>(_:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v13 = (_QWORD **)(a1 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages);
  swift_beginAccess();
  v14 = *v13;
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v13 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    *v13 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *v13 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[7 * v17];
  v18[4] = a2;
  v18[5] = a3;
  v18[6] = a4;
  v18[7] = a5;
  *((_BYTE *)v18 + 64) = a6 & 1;
  v18[9] = a7;
  v18[10] = a8;
  return swift_endAccess();
}

uint64_t *Topic.deinit()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)(v0 + 7));
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[12]);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[14]);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[16]);
  swift_unknownObjectRelease();
  v1 = (char *)v0 + OBJC_IVAR____TtC15GroupActivities5Topic__subscribedParticipants;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t Topic.__deallocating_deinit()
{
  Topic.deinit();
  return swift_deallocClassInstance();
}

uint64_t Topic.onRecordReceive(topic:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;

  while (1)
  {
    PubSubTopic.retrieveNextMessage()();
    if (!v11)
      break;
    v1 = outlined init with take of TypedPayloadDecoding(&v10, (uint64_t)v12);
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 320))(v1);
    if (v2)
    {
      v3 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v2;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      v4 = dispatch thunk of PubSubTopicRecord.data.getter();
      v6 = v5;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      v7 = dispatch thunk of PubSubTopicRecord.publisherID.getter();
      __swift_project_boxed_opaque_existential_1(v12, v13);
      v8 = dispatch thunk of PubSubTopicRecord.toParticipantIDs.getter();
      v3(v4, v6, v7, v8);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v3);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v4, v6);
    }
    __swift_project_boxed_opaque_existential_1(v12, v13);
    dispatch thunk of PubSubTopicRecord.acknowledge()();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v10, &demangling cache variable for type metadata for PubSubTopicRecord?);
}

uint64_t Topic.topicClosed(topic:reason:unackedMessages:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized Topic.topicClosed(topic:reason:unackedMessages:)(a2, a3, a4);
}

uint64_t closure #1 in Topic.topicClosed(topic:reason:unackedMessages:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = type metadata accessor for PubSubTopic.Message();
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v27 = a2;
    v28 = v2;
    v35 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v10 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v30 = v11;
    v31 = v5;
    do
    {
      v12 = v32;
      v29(v7, v10, v32);
      v13 = PubSubTopic.Message.data.getter();
      v33 = v14;
      v34 = v13;
      v15 = PubSubTopic.Message.participants.getter();
      v16 = PubSubTopic.Message.seqNum.getter();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
      v9 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v35;
      }
      v20 = *(_QWORD *)(v9 + 16);
      v19 = *(_QWORD *)(v9 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v9 = v35;
      }
      *(_QWORD *)(v9 + 16) = v20 + 1;
      v21 = v9 + 56 * v20;
      v22 = v33;
      *(_QWORD *)(v21 + 32) = v34;
      *(_QWORD *)(v21 + 40) = v22;
      *(_QWORD *)(v21 + 48) = v15;
      *(_QWORD *)(v21 + 56) = v16;
      *(_BYTE *)(v21 + 64) = v18 & 1;
      *(_QWORD *)(v21 + 72) = 0;
      *(_QWORD *)(v21 + 80) = 0;
      v5 = v31;
      v10 += v30;
      --v8;
    }
    while (v8);
    a2 = v27;
  }
  v36 = v9;
  v23 = (_QWORD *)(a2 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages);
  swift_beginAccess();
  v24 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v24);
  *v23 = v36;
  return swift_bridgeObjectRelease();
}

void (*Topic.catchupNeeded(topic:catchupSender:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD)))(uint64_t)
{
  return specialized Topic.catchupNeeded(topic:catchupSender:completion:)(a2, a3);
}

void (*Topic.onStateUpdated(topic:oldState:newState:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t, uint64_t)
{
  uint64_t v3;
  void (*result)(uint64_t, uint64_t);
  uint64_t v7;

  result = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(void))(*(_QWORD *)v3 + 344))();
  if (result)
  {
    v7 = (uint64_t)result;
    result(a2, a3);
    return (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v7);
  }
  return result;
}

void (*protocol witness for PubSubTopicDelegate.onStateUpdated(topic:oldState:newState:) in conformance Topic(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t, uint64_t)
{
  uint64_t v3;
  void (*result)(uint64_t, uint64_t);
  uint64_t v7;

  result = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(void))(*(_QWORD *)v3 + 344))();
  if (result)
  {
    v7 = (uint64_t)result;
    result(a2, a3);
    return (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v7);
  }
  return result;
}

void (*protocol witness for PubSubTopicDelegate.catchupNeeded(topic:catchupSender:completion:) in conformance Topic(uint64_t a1, uint64_t a2, void (*a3)(_QWORD)))(uint64_t)
{
  return specialized Topic.catchupNeeded(topic:catchupSender:completion:)(a2, a3);
}

uint64_t protocol witness for PubSubTopicDelegate.topicClosed(topic:reason:unackedMessages:) in conformance Topic(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized Topic.topicClosed(topic:reason:unackedMessages:)(a2, a3, a4);
}

uint64_t specialized Topic.init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(a6 + 16) = 0;
  v36 = a4;
  v37 = a5;
  v34 = a3;
  v35 = a8;
  v32 = a1;
  v33 = a2;
  v30 = v16;
  v31 = v17;
  v29 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v19 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v19 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a6 + 40) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<Topic.State, Topic.Event>.Transition>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>.Transition);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1A0F13B10;
  LOBYTE(v38) = 3;
  v39 = 0;
  lazy protocol witness table accessor for type Topic.State and conformance Topic.State();
  lazy protocol witness table accessor for type Topic.Event and conformance Topic.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 0;
  v39 = 258;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 0;
  v39 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 0;
  v39 = 769;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 1;
  v39 = 513;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 1;
  v39 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 2;
  v39 = 770;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v38) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>);
  swift_allocObject();
  *(_QWORD *)(a6 + 48) = StateMachine.init(initialState:transitions:)();
  *(_QWORD *)(a6 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a6 + 72) = 0;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_QWORD *)(a6 + 144) = 0;
  v20 = a6 + OBJC_IVAR____TtC15GroupActivities5Topic__subscribedParticipants;
  v38 = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
  v21 = v29;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v20, v21, v31);
  v22 = (_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler);
  *v22 = 0;
  v22[1] = 0;
  v23 = (_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler);
  *v23 = 0;
  v23[1] = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_seqNumWatermark) = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages) = MEMORY[0x1E0DEE9D8];
  v24 = OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessagesLock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(a6 + v24) = Lock.init()();
  v25 = v33;
  *(_QWORD *)(a6 + 80) = v32;
  *(_QWORD *)(a6 + 88) = v25;
  *(_QWORD *)(a6 + 64) = v35;
  swift_unknownObjectWeakAssign();
  v26 = v37;
  *(_QWORD *)(a6 + 24) = v36;
  *(_QWORD *)(a6 + 32) = v26;
  return a6;
}

uint64_t specialized Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;

  type metadata accessor for Topic();
  v15 = swift_allocObject();
  return specialized Topic.init(name:delegate:pubSubTopicGenerator:)(a1, a2, a3, a4, a5, v15, a7, a8);
}

uint64_t sub_1A0EE297C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EE29AC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 424);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void partial apply for closure #1 in Topic.subscribe()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Topic.subscribe()(a1, v1);
}

uint64_t sub_1A0EE29E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for Topic()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Topic;
  if (!type metadata singleton initialization cache for Topic)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A0EE2A44()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in Topic.subscribe()(void **a1)
{
  closure #2 in Topic.subscribe()(a1);
}

uint64_t partial apply for closure #3 in Topic.subscribe()(uint64_t *a1)
{
  return closure #3 in Topic.subscribe()(a1);
}

uint64_t outlined destroy of Topic.BootstrapPubSubTopicInfo(uint64_t a1)
{
  destroy for Topic.BootstrapPubSubTopicInfo(a1);
  return a1;
}

void partial apply for closure #1 in Topic.unsubscribe()()
{
  PubSubTopic.unsubscribe(force:)(0);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_1A0EE2AC4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in Topic.unsubscribe()()
{
  closure #2 in Topic.unsubscribe()();
}

unint64_t lazy protocol witness table accessor for type Topic.Errors and conformance Topic.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors;
  if (!lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.Errors, &type metadata for Topic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors;
  if (!lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Topic.Errors, &type metadata for Topic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Errors and conformance Topic.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in Topic.sendData(_:to:completion:)()
{
  uint64_t v0;

  return closure #1 in Topic.sendData(_:to:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t specialized Topic.topic.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  void (*v13)(_BYTE *, _QWORD);
  _BYTE v15[32];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess();
  v2[2] = a1;
  swift_retain();
  result = swift_release();
  if (v2[2])
  {
    swift_retain();
    PubSubTopic.$subscribers.getter();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
    lazy protocol witness table accessor for type [UInt64 : PubSubTopic.Participant] and conformance <> [A : B]();
    Publisher<>.removeDuplicates()();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v13 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*v2 + 456))(v15);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher> and conformance Publishers.RemoveDuplicates<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>, MEMORY[0x1E0C958E0]);
    Publisher<>.assign(to:)();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    v13(v15, 0);
    return swift_release();
  }
  return result;
}

uint64_t specialized Topic.topicClosed(topic:reason:unackedMessages:)(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(uint64_t *, _QWORD);
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53[5];
  uint64_t v54;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v52 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a2 != 1)
    {
      v39 = (char *)&loc_1A0EE30C4 + 4 * word_1A0F153B0[a1];
      v50 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      __asm { BR              X9 }
    }
    v14 = one-time initialization token for topic;
    swift_bridgeObjectRetain();
    if (v14 != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.topic);
    swift_retain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v48 = a3;
      v18 = swift_slowAlloc();
      v50 = v13;
      v19 = (uint8_t *)v18;
      v20 = swift_slowAlloc();
      v49 = v8;
      v21 = v20;
      v53[0] = v20;
      v46 = a1;
      v47 = v11;
      *(_DWORD *)v19 = 136315138;
      v22 = v10;
      v23 = v4[10];
      v24 = v4[11];
      swift_bridgeObjectRetain();
      v25 = v23;
      v10 = v22;
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v53);
      a3 = v48;
      a1 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v11 = v47;
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v16, v17, "[Topic Closed] Server bouncing, topic=%s", v19, 0xCu);
      swift_arrayDestroy();
      v26 = v21;
      v8 = v49;
      MEMORY[0x1A1B05CC4](v26, -1, -1);
      v27 = v19;
      v13 = v50;
LABEL_11:
      MEMORY[0x1A1B05CC4](v27, -1, -1);
      goto LABEL_14;
    }
  }
  else
  {
    v28 = one-time initialization token for topic;
    swift_bridgeObjectRetain();
    if (v28 != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.topic);
    swift_retain();
    v16 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v30))
    {
      v48 = a3;
      v31 = swift_slowAlloc();
      v46 = a1;
      v32 = (uint8_t *)v31;
      v33 = swift_slowAlloc();
      v49 = v8;
      v34 = v33;
      v53[0] = v33;
      v50 = v13;
      *(_DWORD *)v32 = 136315138;
      v47 = v11;
      v35 = v4[10];
      v36 = v4[11];
      swift_bridgeObjectRetain();
      v37 = v35;
      a3 = v48;
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, v53);
      v13 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v11 = v47;
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v16, v30, "[Topic Closed] Disconnected, topic=%s", v32, 0xCu);
      swift_arrayDestroy();
      v38 = v34;
      v8 = v49;
      MEMORY[0x1A1B05CC4](v38, -1, -1);
      v27 = v32;
      a1 = v46;
      goto LABEL_11;
    }
  }
  swift_release();
LABEL_14:

  LOBYTE(v53[0]) = 3;
  dispatch thunk of StateMachine.execute(_:)();
  (*(void (**)(uint64_t))(*v4 + 520))(a1);
  swift_beginAccess();
  v4[2] = 0;
  v40 = swift_release();
  if (v4[2])
  {
    swift_retain();
    v41 = v51;
    PubSubTopic.$subscribers.getter();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
    lazy protocol witness table accessor for type [UInt64 : PubSubTopic.Participant] and conformance <> [A : B]();
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v8);
    v42 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*v4 + 456))(v53);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher> and conformance Publishers.RemoveDuplicates<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Published<[UInt64 : PubSubTopic.Participant]>.Publisher>, MEMORY[0x1E0C958E0]);
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v42(v53, 0);
    v40 = swift_release();
  }
  MEMORY[0x1E0C80A78](v40);
  *(&v45 - 2) = a3;
  *(&v45 - 1) = (uint64_t)v4;
  swift_retain();
  Lock.withLock<A>(_:)();
  v43 = swift_release();
  return (*(uint64_t (**)(uint64_t))(*v4 + 592))(v43);
}

void (*specialized Topic.catchupNeeded(topic:catchupSender:completion:)(uint64_t a1, void (*a2)(_QWORD)))(uint64_t)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  void (*result)(uint64_t);
  uint64_t v20;
  _QWORD v21[2];
  void (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), TopicCatchupError>);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topic != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.topic);
  swift_retain();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v22 = a2;
    v12 = swift_slowAlloc();
    v23 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v25 = v14;
    *(_DWORD *)v13 = 136315138;
    v21[0] = v13 + 4;
    v21[1] = v6;
    v15 = v3[10];
    v16 = v3[11];
    swift_bridgeObjectRetain();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
    a2 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v10, v11, "Catchup is needed, topic=%s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    v17 = v13;
    a1 = v23;
    MEMORY[0x1A1B05CC4](v17, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_storeEnumTagMultiPayload();
  a2(v8);
  v18 = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for Result<(), TopicCatchupError>);
  result = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*v3 + 368))(v18);
  if (result)
  {
    v20 = (uint64_t)result;
    result(a1);
    return (void (*)(uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v20);
  }
  return result;
}

uint64_t sub_1A0EE3FB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EE3FE0()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized Topic.topic.setter(v0);
  return swift_release();
}

uint64_t sub_1A0EE4028@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EE4058(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 400);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0EE4088(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 440))();
}

uint64_t sub_1A0EE40C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 512))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EE40F4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 520);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for Topic()
{
  return type metadata accessor for Topic();
}

void type metadata completion function for Topic()
{
  unint64_t v0;

  type metadata accessor for Published<[UInt64 : PubSubTopic.Participant]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for Topic()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Topic.topic.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Topic.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of Topic.receivedDataHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of Topic.receivedDataHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of Topic.receivedDataHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of Topic.pubSubStateChangedHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of Topic.pubSubStateChangedHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of Topic.pubSubStateChangedHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of Topic.catchupNeededHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of Topic.catchupNeededHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of Topic.catchupNeededHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of Topic.dataCryptor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of Topic.dataCryptor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of Topic.dataCryptor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of Topic.subscribedParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of Topic.subscribedParticipants.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of Topic.subscribedParticipants.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of Topic.$subscribedParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of Topic.$subscribedParticipants.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of Topic.$subscribedParticipants.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of Topic.invalidationHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of Topic.invalidationHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of Topic.invalidationHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of Topic.requestEncryptionKeysHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of Topic.requestEncryptionKeysHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of Topic.requestEncryptionKeysHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of Topic.seqNumWatermark.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of Topic.seqNumWatermark.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of Topic.seqNumWatermark.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of Topic.__allocating_init(name:delegate:pubSubTopicGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 584))();
}

uint64_t dispatch thunk of Topic.subscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of Topic.unsubscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of Topic.sendData(_:to:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

ValueMetadata *type metadata accessor for Topic.State()
{
  return &type metadata for Topic.State;
}

uint64_t storeEnumTagSinglePayload for Topic.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0EE4458 + 4 * byte_1A0F153C1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0EE448C + 4 * byte_1A0F153BC[v4]))();
}

uint64_t sub_1A0EE448C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EE4494(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EE449CLL);
  return result;
}

uint64_t sub_1A0EE44A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EE44B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0EE44B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EE44BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Topic.Errors()
{
  return &type metadata for Topic.Errors;
}

uint64_t destroy for Topic.BootstrapPubSubTopicInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Topic.BootstrapPubSubTopicInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for Topic.BootstrapPubSubTopicInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[6];
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[6] = v4;
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Topic.BootstrapPubSubTopicInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Topic.BootstrapPubSubTopicInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Topic.BootstrapPubSubTopicInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Topic.BootstrapPubSubTopicInfo()
{
  return &type metadata for Topic.BootstrapPubSubTopicInfo;
}

uint64_t destroy for Topic.PendingMessage(uint64_t *a1)
{
  uint64_t result;

  outlined consume of Data._Representation(*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  if (a1[5])
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Topic.PendingMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

uint64_t assignWithCopy for Topic.PendingMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  if (!v9)
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v12;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Topic.PendingMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (!v7)
  {
    if (v6)
    {
      v9 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = v9;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Topic.PendingMessage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Topic.PendingMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Topic.PendingMessage()
{
  return &type metadata for Topic.PendingMessage;
}

uint64_t storeEnumTagSinglePayload for Topic.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A0EE4A3C + 4 * byte_1A0F153CB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A0EE4A70 + 4 * byte_1A0F153C6[v4]))();
}

uint64_t sub_1A0EE4A70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EE4A78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EE4A80);
  return result;
}

uint64_t sub_1A0EE4A8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EE4A94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A0EE4A98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EE4AA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Topic.Event()
{
  return &type metadata for Topic.Event;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed [UInt64]?) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t *, uint64_t *);
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v5 = *(uint64_t (**)(_QWORD *, uint64_t *, uint64_t *))(v4 + 16);
  v9[0] = a1;
  v9[1] = a2;
  v7 = a4;
  v8 = a3;
  return v5(v9, &v8, &v7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @guaranteed [UInt64]?) -> ()(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v3 + 16))(*a1, a1[1], *a2, *a3);
}

uint64_t partial apply for closure #2 in Topic.topicClosed(topic:reason:unackedMessages:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages);
  swift_beginAccess();
  *v1 = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in Topic.topicClosed(topic:reason:unackedMessages:)()
{
  uint64_t v0;

  return closure #1 in Topic.topicClosed(topic:reason:unackedMessages:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t partial apply for closure #1 in closure #3 in Topic.subscribe()()
{
  uint64_t v0;

  return closure #1 in closure #3 in Topic.subscribe()(v0);
}

uint64_t partial apply for closure #2 in closure #3 in Topic.subscribe()()
{
  uint64_t v0;

  return closure #2 in closure #3 in Topic.subscribe()(v0);
}

uint64_t objectdestroy_72Tm()
{
  _QWORD *v0;

  swift_release();
  swift_release();
  outlined consume of Data._Representation(v0[4], v0[5]);
  swift_bridgeObjectRelease();
  if (v0[9])
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)()
{
  uint64_t v0;

  return closure #1 in Topic._sendData(_:to:previousSeqNumUnacked:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(uint64_t (**)(_QWORD))(v0 + 72));
}

uint64_t partial apply for closure #1 in closure #2 in Topic.subscribe()()
{
  uint64_t v0;

  return closure #1 in closure #2 in Topic.subscribe()(v0);
}

GroupActivities::AbsoluteSpatialTemplateOutput::Role __swiftcall AbsoluteSpatialTemplateOutput.Role.init(identifier:)(GroupActivities::AbsoluteSpatialTemplateOutput::Role identifier)
{
  GroupActivities::AbsoluteSpatialTemplateOutput::Role *v1;

  *v1 = identifier;
  return identifier;
}

GroupActivities::AbsoluteSpatialTemplateOutput __swiftcall AbsoluteSpatialTemplateOutput.init(elements:defaultInitiatorRole:)(Swift::OpaquePointer elements, GroupActivities::AbsoluteSpatialTemplateOutput::Role_optional defaultInitiatorRole)
{
  uint64_t v2;
  GroupActivities::AbsoluteSpatialTemplateOutput result;

  *(Swift::OpaquePointer *)v2 = elements;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)defaultInitiatorRole.value.identifier._countAndFlagsBits;
  result.defaultInitiatorRole = defaultInitiatorRole;
  result.elements = elements;
  return result;
}

uint64_t SpatialTemplatePreferenceOutput.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = qword_1A0F17968[*(char *)(result + 9)];
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 40) = 2;
  return result;
}

GroupActivities::PresentationTemplateOutput __swiftcall PresentationTemplateOutput.init(assignInitiatorToPresenterRole:)(GroupActivities::PresentationTemplateOutput assignInitiatorToPresenterRole)
{
  GroupActivities::PresentationTemplateOutput *v1;

  v1->assignInitiatorToPresenterRole = assignInitiatorToPresenterRole.assignInitiatorToPresenterRole;
  return assignInitiatorToPresenterRole;
}

__n128 AbsoluteSpatialTemplateOutput.Element.Seat.init(role:position:direction:)@<Q0>(__int128 *a1@<X0>, __int128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  __int128 v8;
  __n128 result;
  __n128 v10;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 3);
  v6 = a3->n128_u64[0];
  v7 = a3[3].n128_i8[0];
  v8 = *a1;
  *(_QWORD *)(a4 + 32) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a4 + 40) = v5;
  *(_OWORD *)a4 = v8;
  *(_OWORD *)(a4 + 16) = v4;
  *(_QWORD *)(a4 + 48) = v6;
  result = a3[1];
  v10 = a3[2];
  *(__n128 *)(a4 + 64) = result;
  *(__n128 *)(a4 + 80) = v10;
  *(_BYTE *)(a4 + 96) = v7;
  return result;
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.init(anchor:rotation:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BOOL8 v6;
  BOOL v7;
  __int128 v8;

  v3 = *(_QWORD *)result;
  v4 = *(unsigned __int8 *)(result + 32);
  if (v4 == 1)
  {
    v5 = 0;
    v6 = (_DWORD)v3 == 2;
    v7 = (_DWORD)v3 == 4;
    v3 = 2;
    if (!v7)
      v3 = v6;
    v8 = 0uLL;
  }
  else
  {
    v5 = *(_QWORD *)(result + 24);
    v8 = *(_OWORD *)(result + 8);
  }
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = v4;
  return result;
}

_BYTE *AbsoluteSpatialTemplateOutput.Element.Direction.Anchor.init(alignedWith:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 4;
  if (!*result)
    v2 = 1;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void AbsoluteSpatialTemplateOutput.Element.Direction.anchor.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 48);
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    v2 = qword_1A0F17990[(char)v2];
    v5 = 0uLL;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 40);
    v5 = *(_OWORD *)(v1 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v3;
}

void AbsoluteSpatialTemplateOutput.Element.Position.init(anchor:offset:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

BOOL static AbsoluteSpatialTemplateOutput.Element.Position.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL4 v2;

  v2 = *a1 == *a2;
  if (a1[1] != a2[1])
    v2 = 0;
  return a1[2] == a2[2] && v2;
}

uint64_t SpatialTemplatePreferenceOutput.contentExtent.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SpatialTemplatePreferenceOutput.template.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 24) = v5;
  return outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v2, v3, v4, v5);
}

void SpatialTemplatePreferenceOutput.SpatialTemplate.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  Swift::UInt v10;

  v2 = v1;
  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(unsigned __int8 *)(v2 + 24);
  if (v7)
  {
    if (v7 == 1)
    {
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(v4 & 1);
    }
    else
    {
      v8 = v6 | v5;
      if (v6 | v5 | v4)
      {
        if (v4 == 1 && v8 == 0)
        {
          v10 = 2;
        }
        else if (v4 != 2 || v8)
        {
          v10 = 4;
        }
        else
        {
          v10 = 3;
        }
      }
      else
      {
        v10 = 1;
      }
      Hasher._combine(_:)(v10);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v4);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
}

BOOL static PresentationTemplateOutput.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A0EE50A8 + 4 * byte_1A0F15720[*v0]))(0x62416D6F74737563, 0xEE006574756C6F73);
}

uint64_t sub_1A0EE50A8()
{
  return 0x61737265766E6F63;
}

uint64_t sub_1A0EE50CC()
{
  return 0x6953794265646973;
}

uint64_t sub_1A0EE50E8()
{
  return 0x646E756F72727573;
}

uint64_t sub_1A0EE5100()
{
  return 1701736302;
}

uint64_t sub_1A0EE5110()
{
  return 0x61746E6573657270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SpatialTemplatePreferenceOutput.SpatialTemplate.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys>);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys>);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys>);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys>);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x1E0C80A78](v9);
  v41 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys>);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  MEMORY[0x1E0C80A78](v11);
  v44 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys>);
  v51 = *(_QWORD *)(v17 - 8);
  v52 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = v1[1];
  v56 = *v1;
  v50 = v1[2];
  v20 = *((unsigned __int8 *)v1 + 24);
  v21 = a1[3];
  v22 = a1;
  v23 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v22, v21);
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v20)
  {
    if (v20 == 1)
    {
      LOBYTE(v53) = 5;
      lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys();
      v24 = v47;
      v25 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v53) = v56 & 1;
      lazy protocol witness table accessor for type PresentationTemplateOutput and conformance PresentationTemplateOutput();
      v26 = v49;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v23, v25);
    }
    else
    {
      v29 = v50 | v19;
      if (v50 | v19 | v56)
      {
        if (v56 != 1 || v29)
        {
          if (v56 != 2 || v29)
          {
            LOBYTE(v53) = 4;
            lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys();
            v30 = v38;
            v31 = v52;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            v33 = v39;
            v32 = v40;
          }
          else
          {
            LOBYTE(v53) = 3;
            lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys();
            v30 = v35;
            v31 = v52;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            v33 = v36;
            v32 = v37;
          }
        }
        else
        {
          LOBYTE(v53) = 2;
          lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys();
          v30 = v41;
          v31 = v52;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          v33 = v42;
          v32 = v43;
        }
      }
      else
      {
        LOBYTE(v53) = 1;
        lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys();
        v30 = v44;
        v31 = v52;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v33 = v45;
        v32 = v46;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v23, v31);
    }
  }
  else
  {
    LOBYTE(v53) = 0;
    lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys();
    v28 = v52;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v53 = v56;
    v54 = v19;
    v55 = v50;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v23, v28);
  }
}

Swift::Int SpatialTemplatePreferenceOutput.SpatialTemplate.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  char v7;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v5 = *v0;
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  SpatialTemplatePreferenceOutput.SpatialTemplate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t SpatialTemplatePreferenceOutput.SpatialTemplate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  v29 = v4;
  MEMORY[0x1E0C80A78](v3);
  v35 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys>);
  v26[3] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v34 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys>);
  v26[6] = *(_QWORD *)(v7 - 8);
  v26[7] = v7;
  MEMORY[0x1E0C80A78](v7);
  v33 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys>);
  v26[4] = *(_QWORD *)(v9 - 8);
  v26[5] = v9;
  MEMORY[0x1E0C80A78](v9);
  v31 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys>);
  v26[1] = *(_QWORD *)(v11 - 8);
  v26[2] = v11;
  MEMORY[0x1E0C80A78](v11);
  v30 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys();
  v20 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    v26[0] = v14;
    v37 = v13;
    v21 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = &type metadata for SpatialTemplatePreferenceOutput.SpatialTemplate;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC450], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpatialTemplatePreferenceOutput.SpatialTemplate.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate(_QWORD *a1)
{
  return SpatialTemplatePreferenceOutput.SpatialTemplate.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialTemplatePreferenceOutput.SpatialTemplate()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  char v7;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v5 = *v0;
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  SpatialTemplatePreferenceOutput.SpatialTemplate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  char v7;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_BYTE *)v0 + 24);
  v5 = *v0;
  v6 = v1;
  v7 = v2;
  Hasher.init(_seed:)();
  SpatialTemplatePreferenceOutput.SpatialTemplate.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

__n128 SpatialTemplatePreferenceOutput.init(template:contentExtent:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;

  v4 = a1[1].n128_u64[0];
  v5 = a1[1].n128_u8[8];
  a4->n128_u64[0] = a2;
  a4->n128_u8[8] = a3 & 1;
  result = *a1;
  a4[1] = *a1;
  a4[2].n128_u64[0] = v4;
  a4[2].n128_u8[8] = v5;
  return result;
}

void SpatialTemplatePreferenceOutput.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(unsigned __int8 *)(v2 + 40);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v7)
      goto LABEL_3;
LABEL_9:
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v4);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v10 = v4;
      v11 = v5;
      v12 = v6;
    }
    else
    {
      Hasher._combine(_:)(0);
      v10 = v4;
      v11 = v5;
      v12 = 0;
    }
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v10, v11, v12, 0);
    return;
  }
  v8 = *(_QWORD *)v2;
  Hasher._combine(_:)(1u);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v8;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if (!v7)
    goto LABEL_9;
LABEL_3:
  if (v7 == 1)
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v4 & 1);
  }
  else
  {
    v13 = v6 | v5;
    if (v6 | v5 | v4)
    {
      if (v4 != 1 || v13)
      {
        if (v4 != 2 || v13)
          v14 = 4;
        else
          v14 = 3;
      }
      else
      {
        v14 = 2;
      }
    }
    else
    {
      v14 = 1;
    }
    Hasher._combine(_:)(v14);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpatialTemplatePreferenceOutput.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574616C706D6574;
  else
    return 0x45746E65746E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpatialTemplatePreferenceOutput.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SpatialTemplatePreferenceOutput.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreferenceOutput.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialTemplatePreferenceOutput.CodingKeys()
{
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SpatialTemplatePreferenceOutput.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialTemplatePreferenceOutput.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 8);
  v9 = v1[2];
  v13 = v1[3];
  v14 = v9;
  v12 = v1[4];
  v20 = *((unsigned __int8 *)v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v7;
  LOBYTE(v17) = v8;
  v21 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  v10 = v15;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v10)
  {
    v16 = v14;
    v17 = v13;
    v18 = v12;
    v19 = v20;
    v21 = 1;
    lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int SpatialTemplatePreferenceOutput.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Swift::UInt64 v7;
  uint64_t v8;
  Swift::UInt v9;
  _BYTE v11[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v6)
      goto LABEL_3;
LABEL_9:
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v11, v3);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  if (v6 == 1)
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v3 & 1);
  }
  else
  {
    v8 = v5 | v4;
    if (v5 | v4 | v3)
    {
      if (v3 != 1 || v8)
      {
        if (v3 != 2 || v8)
          v9 = 4;
        else
          v9 = 3;
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
    Hasher._combine(_:)(v9);
  }
  return Hasher._finalize()();
}

uint64_t SpatialTemplatePreferenceOutput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialTemplatePreferenceOutput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v18 = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v9 = v15;
    v10 = BYTE8(v15);
    v18 = 1;
    lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v16;
    v12 = v17;
    v13 = v15;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 40) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpatialTemplatePreferenceOutput@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SpatialTemplatePreferenceOutput.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpatialTemplatePreferenceOutput(_QWORD *a1)
{
  return SpatialTemplatePreferenceOutput.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance SpatialTemplatePreferenceOutput(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt v11;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(unsigned __int8 *)(v2 + 40);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v7)
      goto LABEL_3;
LABEL_9:
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v4);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return;
  }
  v8 = *(_QWORD *)v2;
  Hasher._combine(_:)(1u);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v8;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if (!v7)
    goto LABEL_9;
LABEL_3:
  if (v7 == 1)
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v4 & 1);
  }
  else
  {
    v10 = v6 | v5;
    if (v6 | v5 | v4)
    {
      if (v4 != 1 || v10)
      {
        if (v4 != 2 || v10)
          v11 = 4;
        else
          v11 = 3;
      }
      else
      {
        v11 = 2;
      }
    }
    else
    {
      v11 = 1;
    }
    Hasher._combine(_:)(v11);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplatePreferenceOutput()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  Swift::UInt64 v7;
  uint64_t v8;
  Swift::UInt v9;
  _BYTE v11[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v6)
      goto LABEL_3;
LABEL_9:
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v11, v3);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  if (v6 == 1)
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v3 & 1);
  }
  else
  {
    v8 = v5 | v4;
    if (v5 | v4 | v3)
    {
      if (v3 != 1 || v8)
      {
        if (v3 != 2 || v8)
          v9 = 4;
        else
          v9 = 3;
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
    Hasher._combine(_:)(v9);
  }
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AbsoluteSpatialTemplateOutput.defaultInitiatorRole.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void AbsoluteSpatialTemplateOutput.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char v23;
  char v24;
  uint64_t result;
  double v26;
  double v27;
  double v28;
  double v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 112)
  {
    v6 = *(_QWORD *)(a1 + i + 40);
    v8 = *(double *)(a1 + i + 48);
    v7 = *(double *)(a1 + i + 56);
    v9 = *(double *)(a1 + i + 64);
    v10 = *(double *)(a1 + i + 80);
    v11 = *(double *)(a1 + i + 96);
    v13 = *(double *)(a1 + i + 104);
    v12 = *(double *)(a1 + i + 112);
    v14 = *(_BYTE *)(a1 + i + 128);
    v15 = *(_QWORD *)(a2 + i + 40);
    v17 = *(double *)(a2 + i + 48);
    v16 = *(double *)(a2 + i + 56);
    v18 = *(double *)(a2 + i + 64);
    v19 = *(double *)(a2 + i + 80);
    v20 = *(double *)(a2 + i + 96);
    v22 = *(double *)(a2 + i + 104);
    v21 = *(double *)(a2 + i + 112);
    v23 = *(_BYTE *)(a2 + i + 128);
    if (v6)
      break;
    if (v15)
      goto LABEL_28;
LABEL_13:
    result = 0;
    if (v8 != v17 || v7 != v16 || v9 != v18 || v10 != v19)
      return result;
    if ((v14 & 1) != 0)
    {
      if ((v23 & 1) == 0 || LOBYTE(v20) != LOBYTE(v11))
        return 0;
    }
    else
    {
      result = 0;
      if ((v23 & 1) != 0 || v11 != v20 || v13 != v22 || v12 != v21)
        return result;
    }
    if (!--v2)
      return 1;
  }
  if (v15)
  {
    if (*(_QWORD *)(a1 + i + 32) != *(_QWORD *)(a2 + i + 32) || v6 != v15)
    {
      v28 = *(double *)(a2 + i + 112);
      v29 = *(double *)(a1 + i + 112);
      v26 = *(double *)(a1 + i + 64);
      v27 = *(double *)(a1 + i + 80);
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v9 = v26;
      v10 = v27;
      v21 = v28;
      v12 = v29;
      if ((v24 & 1) == 0)
        return 0;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
LABEL_28:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x73746E656D656C65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11 = v1[2];
  v12 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v9;
  v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AbsoluteSpatialTemplateOutput.Element]);
  lazy protocol witness table accessor for type [AbsoluteSpatialTemplateOutput.Element] and conformance <A> [A](&lazy protocol witness table cache variable for type [AbsoluteSpatialTemplateOutput.Element] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v12;
    v14 = v11;
    v15 = 1;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AbsoluteSpatialTemplateOutput.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AbsoluteSpatialTemplateOutput.Element]);
  v14 = 0;
  lazy protocol witness table accessor for type [AbsoluteSpatialTemplateOutput.Element] and conformance <A> [A](&lazy protocol witness table cache variable for type [AbsoluteSpatialTemplateOutput.Element] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element, MEMORY[0x1E0DEAF40]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v13[0];
  v14 = 1;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v13[0];
  v11 = v13[1];
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AbsoluteSpatialTemplateOutput()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AbsoluteSpatialTemplateOutput()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *v0;
  v2 = v0[2];
  v3 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = v1 + 64;
    do
    {
      v5 = *(_QWORD *)(v4 - 24);
      v6 = *(_QWORD *)(v4 + 32);
      v7 = *(_BYTE *)(v4 + 64);
      Hasher._combine(_:)(0);
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(0);
      SPVector3D.hash(into:)();
      SPAngle.hash(into:)();
      if ((v7 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(0);
        SPVector3D.hash(into:)();
      }
      swift_bridgeObjectRelease();
      v4 += 112;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AbsoluteSpatialTemplateOutput()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t PresentationTemplateOutput.assignInitiatorToPresenterRole.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void PresentationTemplateOutput.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PresentationTemplateOutput.CodingKeys()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresentationTemplateOutput.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PresentationTemplateOutput.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationTemplateOutput.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresentationTemplateOutput.CodingKeys()
{
  lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PresentationTemplateOutput.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationTemplateOutput.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int PresentationTemplateOutput.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PresentationTemplateOutput.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationTemplateOutput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PresentationTemplateOutput@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return PresentationTemplateOutput.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresentationTemplateOutput(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationTemplateOutput.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationTemplateOutput()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresentationTemplateOutput()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationTemplateOutput()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AbsoluteSpatialTemplateOutput.Element.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher._combine(_:)(0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

uint64_t static AbsoluteSpatialTemplateOutput.Element.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v2 = *((_QWORD *)a1 + 5);
  v3 = *((_QWORD *)a1 + 6);
  v4 = *((_BYTE *)a1 + 96);
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_BYTE *)a2 + 96);
  v10 = *a1;
  v9 = a1[1];
  v24 = *((_QWORD *)a1 + 4);
  v25 = v2;
  v23[0] = v10;
  v23[1] = v9;
  v26 = v3;
  v11 = a1[5];
  v27 = a1[4];
  v28 = v11;
  v29 = v4;
  v13 = *a2;
  v12 = a2[1];
  v17 = v5;
  v18 = v6;
  v16[0] = v13;
  v16[1] = v12;
  v19 = v7;
  v14 = a2[5];
  v20 = a2[4];
  v21 = v14;
  v22 = v8;
  return specialized static AbsoluteSpatialTemplateOutput.Element.Seat.== infix(_:_:)((uint64_t)v23, (uint64_t)v16) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys()
{
  return 1952540019;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1952540019 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[12];
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys>);
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.CodingKeys>);
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *v1;
  v19 = v1[1];
  v20 = v9;
  v10 = *((_QWORD *)v1 + 5);
  v18 = *((_QWORD *)v1 + 4);
  v11 = *((_QWORD *)v1 + 6);
  v17 = v1[4];
  v16 = *((_QWORD *)v1 + 10);
  v15 = *((_QWORD *)v1 + 11);
  v14 = *((unsigned __int8 *)v1 + 96);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v25 = v18;
  v26 = v10;
  v23 = v20;
  v24 = v19;
  v27 = v11;
  v28 = v17;
  v29 = v16;
  v30 = v15;
  v31 = v14;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v5, v3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8))(v8, v6);
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v30 = a2;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys>);
  v3 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.CodingKeys>);
  v6 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys();
  v9 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v9)
    goto LABEL_5;
  v28 = v3;
  v29 = a1;
  v11 = v31;
  v10 = v32;
  v41 = v6;
  if (*(_QWORD *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    v13 = v10;
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v16 = &type metadata for AbsoluteSpatialTemplateOutput.Element;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v13);
    a1 = v29;
LABEL_5:
    v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v25);
  }
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v12 = v41;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v10);
  v18 = v36;
  v19 = v37;
  v20 = v40;
  v22 = v33;
  v21 = v34;
  v23 = v38;
  v24 = v39;
  v25 = (uint64_t)v29;
  v26 = v30;
  *(_QWORD *)(v30 + 32) = v35;
  *(_QWORD *)(v26 + 40) = v18;
  *(_OWORD *)v26 = v22;
  *(_OWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 48) = v19;
  *(_OWORD *)(v26 + 64) = v23;
  *(_OWORD *)(v26 + 80) = v24;
  *(_BYTE *)(v26 + 96) = v20;
  return __swift_destroy_boxed_opaque_existential_1Tm(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Element.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance AbsoluteSpatialTemplateOutput.Element()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher._combine(_:)(0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AbsoluteSpatialTemplateOutput.Element()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AbsoluteSpatialTemplateOutput.Element(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;

  v2 = *((_QWORD *)a1 + 5);
  v3 = *((_QWORD *)a1 + 6);
  v4 = *((_BYTE *)a1 + 96);
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_BYTE *)a2 + 96);
  v10 = *a1;
  v9 = a1[1];
  v24 = *((_QWORD *)a1 + 4);
  v25 = v2;
  v23[0] = v10;
  v23[1] = v9;
  v26 = v3;
  v11 = a1[5];
  v27 = a1[4];
  v28 = v11;
  v29 = v4;
  v13 = *a2;
  v12 = a2[1];
  v17 = v5;
  v18 = v6;
  v16[0] = v13;
  v16[1] = v12;
  v19 = v7;
  v14 = a2[5];
  v20 = a2[4];
  v21 = v14;
  v22 = v8;
  return specialized static AbsoluteSpatialTemplateOutput.Element.Seat.== infix(_:_:)((uint64_t)v23, (uint64_t)v16) & 1;
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Seat.role.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

__n128 AbsoluteSpatialTemplateOutput.Element.Seat.position.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;

  result = v1[1];
  v3 = v1[2].n128_u64[1];
  a1[1].n128_u64[0] = v1[2].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 AbsoluteSpatialTemplateOutput.Element.Seat.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  result = *(__n128 *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

void AbsoluteSpatialTemplateOutput.Element.Seat.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_BYTE *)(v0 + 96);
  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697469736F70;
  if (*v0 != 1)
    v1 = 0x6F69746365726964;
  if (*v0)
    return v1;
  else
    return 1701605234;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Seat.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[5];
  v32 = v1[4];
  v33 = v10;
  v11 = v1[3];
  v30 = v1[2];
  v31 = v11;
  v12 = v1[6];
  v13 = v1[8];
  v28 = v1[9];
  v29 = v13;
  v14 = v1[10];
  v26 = v1[11];
  v27 = v14;
  v25 = *((unsigned __int8 *)v1 + 96);
  v15 = a1[3];
  v16 = a1;
  v18 = v17;
  __swift_project_boxed_opaque_existential_1(v16, v15);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v34 = v9;
  v35 = v8;
  v41 = 0;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v20 = v26;
    v19 = v27;
    v22 = v28;
    v21 = v29;
    v34 = v30;
    v35 = v31;
    v36 = v32;
    v37 = v33;
    v41 = 1;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v34 = v12;
    v36 = v21;
    v37 = v22;
    v38 = v19;
    v39 = v20;
    v40 = v25;
    v41 = 2;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v18);
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.Seat.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Seat.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v26 = 0;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v10 = v21;
  v9 = v22;
  v26 = 1;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v20 = v23;
  v18 = v21;
  v19 = v22;
  v26 = 2;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v21;
  v13 = v25;
  v14 = v23;
  v15 = v24;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  v16 = v19;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v16;
  v17 = *((_QWORD *)&v20 + 1);
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_BYTE *)(a2 + 96) = v13;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Seat@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Element.Seat.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Seat(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.Seat.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance AbsoluteSpatialTemplateOutput.Element.Seat()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_BYTE *)(v0 + 96);
  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AbsoluteSpatialTemplateOutput.Element.Seat()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 96);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  SPAngle.hash(into:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

__n128 AbsoluteSpatialTemplateOutput.Element.position.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;

  result = v1[1];
  v3 = v1[2].n128_u64[1];
  a1[1].n128_u64[0] = v1[2].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 AbsoluteSpatialTemplateOutput.Element.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  result = *(__n128 *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t AbsoluteSpatialTemplateOutput.Element.role.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t AbsoluteSpatialTemplateOutput.Role.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AbsoluteSpatialTemplateOutput.Role.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static AbsoluteSpatialTemplateOutput.Role.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys()
{
  return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Role.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Role.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int AbsoluteSpatialTemplateOutput.Role.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Role.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Role.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Role@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Role.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Role(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Role.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

double AbsoluteSpatialTemplateOutput.Element.Position.offset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t static AbsoluteSpatialTemplateOutput.Element.Position.Anchor.== infix(_:_:)()
{
  return 1;
}

void AbsoluteSpatialTemplateOutput.Element.Position.Anchor.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys()
{
  return 0x65746E6543707061;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65746E6543707061 && a2 == 0xE900000000000072)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Position.Anchor.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.Position.Anchor.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Position.Anchor.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys>);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys();
  v8 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(KeyedDecodingContainer.allKeys.getter() + 16) != 1)
  {
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v16 = &type metadata for AbsoluteSpatialTemplateOutput.Element.Position.Anchor;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC450], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v13);
  }
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys();
  v11 = v4;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1Tm(v13);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.Position.Anchor.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Position.hash(into:)()
{
  Hasher._combine(_:)(0);
  return SPVector3D.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x74657366666FLL;
  else
    return 0x726F68636E61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Position.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[3];
  v9 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v15 = v12;
    v16 = v9;
    v17 = v13;
    v18 = v14;
    v19 = 1;
    type metadata accessor for SPVector3D(0);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type SPVector3D and conformance SPVector3D, (uint64_t (*)(uint64_t))type metadata accessor for SPVector3D, MEMORY[0x1E0DEFF70]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.Position.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Position.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v12) = 0;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    type metadata accessor for SPVector3D(0);
    v15 = 1;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type SPVector3D and conformance SPVector3D, (uint64_t (*)(uint64_t))type metadata accessor for SPVector3D, MEMORY[0x1E0DEFF78]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v12;
    v10 = v14;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v10;
    *(_OWORD *)a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Position@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Element.Position.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Position(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.Position.encode(to:)(a1);
}

double AbsoluteSpatialTemplateOutput.Element.Direction.rotation.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void AbsoluteSpatialTemplateOutput.Element.Direction.Anchor.hash(into:)()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)v0);
  }
  else
  {
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

BOOL static AbsoluteSpatialTemplateOutput.Element.Direction.Anchor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v4 = LODWORD(v2) == LODWORD(v3);
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && v4;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v6 = v2 == v3;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v6 = 0;
    return *(double *)(a1 + 16) == *(double *)(a2 + 16) && v6;
  }
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.Direction.Anchor.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)v0);
  }
  else
  {
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v4 = LODWORD(v2) == LODWORD(v3);
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && v4;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v6 = v2 == v3;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v6 = 0;
    return *(double *)(a1 + 16) == *(double *)(a2 + 16) && v6;
  }
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  char v27;

  v24 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys>);
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3);
  v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys>);
  v18 = *(_QWORD *)(v5 - 8);
  v19 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys>);
  v23 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      v26 = 1;
      lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v19);
    }
    else
    {
      v27 = 2;
      lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys();
      v15 = v20;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v22);
    }
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v14, v12);
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys>);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys>);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys>);
  v26 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v1;
  v12 = v1[1];
  v19 = v1[2];
  v20 = v12;
  v18 = v1[3];
  v13 = *((_BYTE *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    LOBYTE(v27) = 1;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v27) = v25;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis();
    v14 = v24;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v14);
  }
  else
  {
    LOBYTE(v27) = 0;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v29 = v19;
    v30 = v18;
    v27 = v25;
    v28 = v20;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position();
    v15 = v22;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, v9);
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  _QWORD *v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  v34 = v4;
  MEMORY[0x1E0C80A78](v3);
  v35 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys();
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v31 = v7;
    v16 = v35;
    v41 = v11;
    v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v30 = *(unsigned __int8 *)(v17 + 32);
      if ((v30 & 1) != 0)
      {
        LOBYTE(v37) = 1;
        lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis();
        v18 = v33;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v16, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v13, v10);
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = v37;
      }
      else
      {
        LOBYTE(v37) = 0;
        lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v27 = v41;
        (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v9, v6);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v13, v10);
        v22 = v37;
        v19 = v38;
        v20 = v39;
        v21 = v40;
      }
      v28 = v32;
      *v32 = v22;
      v28[1] = v19;
      v28[2] = v20;
      v28[3] = v21;
      *((_BYTE *)v28 + 32) = v30;
    }
    else
    {
      v23 = type metadata accessor for DecodingError();
      swift_allocError();
      v25 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v25 = &unk_1E44F4F48;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v13, v10);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys()
{
  unsigned __int8 *v0;

  return *v0 + 120;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.init(from:)(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis(_QWORD *a1)
{
  unsigned __int8 *v1;

  return AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.encode(to:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys()
{
  return 0x73697841707061;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73697841707061 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x5764656E67696C61;
  else
    return 0x6E6F697469736F70;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if ((v0[4] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

void AbsoluteSpatialTemplateOutput.Element.Direction.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F68636E615FLL;
  else
    return 0x6E6F697461746F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys()
{
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10 = v1[2];
  v9 = v1[3];
  v14 = v1[4];
  v15 = v9;
  v13 = v1[5];
  HIDWORD(v12) = *((unsigned __int8 *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v8;
  v21 = 0;
  type metadata accessor for SPAngle(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type SPAngle and conformance SPAngle, (uint64_t (*)(uint64_t))type metadata accessor for SPAngle, MEMORY[0x1E0DEFF88]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v16 = v10;
    v17 = v15;
    v18 = v14;
    v19 = v13;
    v20 = BYTE4(v12);
    v21 = 1;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AbsoluteSpatialTemplateOutput.Element.Direction.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t AbsoluteSpatialTemplateOutput.Element.Direction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for SPAngle(0);
    v16 = 0;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type SPAngle and conformance SPAngle, (uint64_t (*)(uint64_t))type metadata accessor for SPAngle, MEMORY[0x1E0DEFF90]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = *(_QWORD *)&v14[0];
    v16 = 1;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v15;
    v11 = v14[0];
    v12 = v14[1];
    *(_QWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 48) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AbsoluteSpatialTemplateOutput.Element.Direction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AbsoluteSpatialTemplateOutput.Element.Direction(_QWORD *a1)
{
  return AbsoluteSpatialTemplateOutput.Element.Direction.encode(to:)(a1);
}

uint64_t specialized static AbsoluteSpatialTemplateOutput.Element.Seat.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  char v21;
  uint64_t result;
  double v23;
  double v24;
  double v25;
  double v26;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v3 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 64);
  v9 = *(double *)(a1 + 72);
  v8 = *(double *)(a1 + 80);
  v10 = *(_BYTE *)(a1 + 96);
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v14 = *(double *)(a2 + 32);
  v15 = *(double *)(a2 + 48);
  v16 = *(double *)(a2 + 64);
  v18 = *(double *)(a2 + 72);
  v17 = *(double *)(a2 + 80);
  v19 = *(_BYTE *)(a2 + 96);
  if (v2)
  {
    if (v11)
    {
      if (*(_QWORD *)a1 != *(_QWORD *)a2 || v2 != v11)
      {
        v25 = *(double *)(a2 + 80);
        v26 = *(double *)(a1 + 80);
        v23 = *(double *)(a2 + 48);
        v24 = *(double *)(a1 + 48);
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v15 = v23;
        v6 = v24;
        v17 = v25;
        v8 = v26;
        v21 = v20;
        result = 0;
        if ((v21 & 1) == 0)
          return result;
      }
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v11)
    goto LABEL_17;
LABEL_8:
  result = 0;
  if (v4 == v13 && v3 == v12 && v5 == v14)
  {
    if (v6 == v15)
    {
      if ((v10 & 1) != 0)
      {
        if ((v19 & 1) != 0 && LOBYTE(v16) == LOBYTE(v7))
          return 1;
      }
      else if ((v19 & 1) == 0 && v7 == v16 && v9 == v18 && v8 == v17)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL specialized static AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v4 = (LOBYTE(v3) ^ LOBYTE(v2)) == 0;
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && v4;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v6 = v2 == v3;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v6 = 0;
    return *(double *)(a1 + 16) == *(double *)(a2 + 16) && v6;
  }
}

uint64_t specialized static AbsoluteSpatialTemplateOutput.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  if (!v3)
  {
    if (!v5)
      return 1;
    goto LABEL_11;
  }
  if (!v5)
  {
    swift_bridgeObjectRetain();
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v2 == v4 && v3 == v5)
    return 1;
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v6 & 1) != 0)
    return 1;
  return result;
}

uint64_t specialized static SpatialTemplatePreferenceOutput.SpatialTemplate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v15[3];
  uint64_t v16[3];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      v16[0] = *(_QWORD *)a1;
      v16[1] = v2;
      v16[2] = v4;
      v15[0] = v6;
      v15[1] = v7;
      v15[2] = v8;
      outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, 0);
      outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v2, v4, 0);
      outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v2, v4, 0);
      outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, 0);
      v9 = specialized static AbsoluteSpatialTemplateOutput.== infix(_:_:)(v16, v15);
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v2, v4, 0);
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, 0);
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, 0);
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v2, v4, 0);
      return v9 & 1;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if (v5 != 1)
  {
    v10 = v4 | v2;
    if (!(v4 | v2 | v3))
    {
      if (v9 != 2 || (v8 | v7 | v6) != 0)
        goto LABEL_34;
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(0, 0, 0, 2);
      v12 = 0;
      goto LABEL_33;
    }
    if (v3 != 1 || v10 != 0)
    {
      if (v3 != 2 || v10)
      {
        if (v9 != 2 || v6 != 3 || v8 | v7)
          goto LABEL_34;
        outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(3, 0, 0, 2);
        v12 = 3;
      }
      else
      {
        if (v9 != 2 || v6 != 2 || v8 | v7)
          goto LABEL_34;
        outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(2, 0, 0, 2);
        v12 = 2;
      }
LABEL_33:
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v12, 0, 0, 2);
      LOBYTE(v9) = 1;
      return v9 & 1;
    }
    if (v9 == 2 && v6 == 1 && !(v8 | v7))
    {
      LOBYTE(v9) = 1;
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(1, 0, 0, 2);
      outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(1, 0, 0, 2);
      return v9 & 1;
    }
LABEL_34:
    outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, v9);
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v2, v4, v5);
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, v9);
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  if (v9 != 1)
    goto LABEL_34;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)a1, v2, v4, 1);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, 1);
  LOBYTE(v9) = ((v3 & 1) == 0) ^ v6;
  return v9 & 1;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys, &unk_1E44F54B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys, &unk_1E44F54B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys, &unk_1E44F54B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys, &unk_1E44F54B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys, &unk_1E44F5580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys, &unk_1E44F5580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys, &unk_1E44F5580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys, &unk_1E44F5580);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationTemplateOutput and conformance PresentationTemplateOutput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput, &type metadata for PresentationTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput, &type metadata for PresentationTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput, &type metadata for PresentationTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput and conformance PresentationTemplateOutput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys, &unk_1E44F5540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys, &unk_1E44F5540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys, &unk_1E44F5540);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys, &unk_1E44F5560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys, &unk_1E44F5560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys, &unk_1E44F5560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys, &unk_1E44F5490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys, &unk_1E44F5490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys, &unk_1E44F5490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys, &unk_1E44F5610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys, &unk_1E44F5610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys, &unk_1E44F5610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys, &unk_1E44F5630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys, &unk_1E44F5630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys, &unk_1E44F5630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys, &unk_1E44F5630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys and conformance SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput, &type metadata for AbsoluteSpatialTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput, &type metadata for AbsoluteSpatialTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput, &type metadata for AbsoluteSpatialTemplateOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput and conformance AbsoluteSpatialTemplateOutput);
  }
  return result;
}

uint64_t specialized static SpatialTemplatePreferenceOutput.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if (*(double *)a1 != *(double *)a2)
      v4 = 1;
    if ((v4 & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v13 = *(_OWORD *)(a1 + 16);
    v14 = v2;
    v15 = v3;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v8 = specialized static SpatialTemplatePreferenceOutput.SpatialTemplate.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10);
    return v8 & 1;
  }
  if (*(_BYTE *)(a2 + 8))
    goto LABEL_7;
LABEL_3:
  v8 = 0;
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.CodingKeys, &unk_1E44F5750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.CodingKeys, &unk_1E44F5750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.CodingKeys, &unk_1E44F5750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.CodingKeys, &unk_1E44F5750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.CodingKeys and conformance SpatialTemplatePreferenceOutput.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate, &type metadata for SpatialTemplatePreferenceOutput.SpatialTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate, &type metadata for SpatialTemplatePreferenceOutput.SpatialTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput.SpatialTemplate, &type metadata for SpatialTemplatePreferenceOutput.SpatialTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput.SpatialTemplate and conformance SpatialTemplatePreferenceOutput.SpatialTemplate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.CodingKeys, &unk_1E44F4560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.CodingKeys, &unk_1E44F4560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.CodingKeys, &unk_1E44F4560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.CodingKeys, &unk_1E44F4560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.CodingKeys and conformance AbsoluteSpatialTemplateOutput.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element, &type metadata for AbsoluteSpatialTemplateOutput.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element, &type metadata for AbsoluteSpatialTemplateOutput.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element, &type metadata for AbsoluteSpatialTemplateOutput.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element and conformance AbsoluteSpatialTemplateOutput.Element);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role, &type metadata for AbsoluteSpatialTemplateOutput.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role, &type metadata for AbsoluteSpatialTemplateOutput.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role, &type metadata for AbsoluteSpatialTemplateOutput.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role and conformance AbsoluteSpatialTemplateOutput.Role);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AbsoluteSpatialTemplateOutput.Element] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AbsoluteSpatialTemplateOutput.Element]);
    v8 = a2();
    result = MEMORY[0x1A1B05BEC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput.CodingKeys, &unk_1E44F3F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput.CodingKeys, &unk_1E44F3F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput.CodingKeys, &unk_1E44F3F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresentationTemplateOutput.CodingKeys, &unk_1E44F3F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationTemplateOutput.CodingKeys and conformance PresentationTemplateOutput.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.CodingKeys, &unk_1E44F4700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.CodingKeys, &unk_1E44F4700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.CodingKeys, &unk_1E44F4700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.CodingKeys, &unk_1E44F4700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys, &unk_1E44F4790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys, &unk_1E44F4790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys, &unk_1E44F4790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys, &unk_1E44F4790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat, &type metadata for AbsoluteSpatialTemplateOutput.Element.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat, &type metadata for AbsoluteSpatialTemplateOutput.Element.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat, &type metadata for AbsoluteSpatialTemplateOutput.Element.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat and conformance AbsoluteSpatialTemplateOutput.Element.Seat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys, &unk_1E44F4820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys, &unk_1E44F4820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys, &unk_1E44F4820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys, &unk_1E44F4820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position and conformance AbsoluteSpatialTemplateOutput.Element.Position);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction, &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction, &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction, &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction and conformance AbsoluteSpatialTemplateOutput.Element.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role.CodingKeys, &unk_1E44F45F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role.CodingKeys, &unk_1E44F45F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role.CodingKeys, &unk_1E44F45F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Role.CodingKeys, &unk_1E44F45F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Role.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Role.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys, &unk_1E44F49C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys, &unk_1E44F49C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys, &unk_1E44F49C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys, &unk_1E44F49C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys, &unk_1E44F4A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys, &unk_1E44F4A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys, &unk_1E44F4A58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys, &unk_1E44F4938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys, &unk_1E44F4938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys, &unk_1E44F4938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys, &unk_1E44F4938);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor, &type metadata for AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Position.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Position.Anchor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys, &unk_1E44F4B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys, &unk_1E44F4B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys, &unk_1E44F4B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys, &unk_1E44F4B88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor, &unk_1E44F4F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor, &unk_1E44F4F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor, &unk_1E44F4F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor, &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.Anchor and conformance AbsoluteSpatialTemplateOutput.Element.Direction.Anchor);
  }
  return result;
}

uint64_t destroy for SpatialTemplatePreferenceOutput(uint64_t a1)
{
  return outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for SpatialTemplatePreferenceOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for SpatialTemplatePreferenceOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = *((_BYTE *)a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v4, v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v8, v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for SpatialTemplatePreferenceOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  v8 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplatePreferenceOutput(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplatePreferenceOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreferenceOutput()
{
  return &type metadata for SpatialTemplatePreferenceOutput;
}

uint64_t destroy for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1)
{
  return outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate()
{
  return &type metadata for SpatialTemplatePreferenceOutput.SpatialTemplate;
}

uint64_t destroy for AbsoluteSpatialTemplateOutput()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for AbsoluteSpatialTemplateOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AbsoluteSpatialTemplateOutput(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AbsoluteSpatialTemplateOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AbsoluteSpatialTemplateOutput(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AbsoluteSpatialTemplateOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput()
{
  return &type metadata for AbsoluteSpatialTemplateOutput;
}

uint64_t getEnumTagSinglePayload for PresentationTemplateOutput(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationTemplateOutput(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EED074 + 4 * byte_1A0F15731[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EED0A8 + 4 * byte_1A0F1572C[v4]))();
}

uint64_t sub_1A0EED0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EED0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EED0B8);
  return result;
}

uint64_t sub_1A0EED0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EED0CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EED0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EED0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationTemplateOutput()
{
  return &type metadata for PresentationTemplateOutput;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Seat()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element.Seat;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Role()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Role;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Position()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element.Position;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element.Position.Anchor;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction;
}

__n128 __swift_memcpy33_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor()
{
  return &type metadata for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor;
}

uint64_t getEnumTagSinglePayload for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AbsoluteSpatialTemplateOutput.Element.Direction.Anchor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor()
{
  return &unk_1E44F4F48;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys()
{
  return &unk_1E44F4B88;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys()
{
  return &unk_1E44F4938;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.CodingKeys()
{
  return &unk_1E44F49C8;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Position.Anchor.AppCenterCodingKeys()
{
  return &unk_1E44F4A58;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Role.CodingKeys()
{
  return &unk_1E44F45F0;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys()
{
  return &unk_1E44F4820;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.CodingKeys()
{
  return &unk_1E44F4700;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.SeatCodingKeys()
{
  return &unk_1E44F4790;
}

void *type metadata accessor for PresentationTemplateOutput.CodingKeys()
{
  return &unk_1E44F3F78;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.CodingKeys()
{
  return &unk_1E44F4560;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.CodingKeys()
{
  return &unk_1E44F5750;
}

uint64_t storeEnumTagSinglePayload for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A0EED354 + 4 * byte_1A0F1573B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A0EED388 + 4 * byte_1A0F15736[v4]))();
}

uint64_t sub_1A0EED388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EED390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EED398);
  return result;
}

uint64_t sub_1A0EED3A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EED3ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A0EED3B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EED3B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys()
{
  return &unk_1E44F54B0;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.CustomAbsoluteCodingKeys()
{
  return &unk_1E44F5630;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.ConversationalCodingKeys()
{
  return &unk_1E44F5610;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.SideBySideCodingKeys()
{
  return &unk_1E44F5490;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.SurroundCodingKeys()
{
  return &unk_1E44F5560;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.NoneCodingKeys()
{
  return &unk_1E44F5540;
}

void *type metadata accessor for SpatialTemplatePreferenceOutput.SpatialTemplate.PresentationCodingKeys()
{
  return &unk_1E44F5580;
}

uint64_t specialized SpatialTemplatePreferenceOutput.SpatialTemplate.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x62416D6F74737563 && a2 == 0xEE006574756C6F73;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61737265766E6F63 && a2 == 0xEE006C616E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6953794265646973 && a2 == 0xEA00000000006564
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646E756F72727573 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized SpatialTemplatePreferenceOutput.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x45746E65746E6F63 && a2 == 0xED0000746E657478;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized AbsoluteSpatialTemplateOutput.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A0F1C550)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized PresentationTemplateOutput.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD00000000000001ELL && a2 == 0x80000001A0F1C570)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701605234 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized AbsoluteSpatialTemplateOutput.Element.Position.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F68636E61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 120 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 122 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  char v31;
  char v32;
  char v33;

  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys>);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys>);
  v23 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys>);
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys();
  v11 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_7;
  v21 = v4;
  v22 = v8;
  v12 = v29;
  v30 = a1;
  v13 = v10;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v10 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v10 = &unk_1E44F4D08;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v10, *MEMORY[0x1E0DEC450], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v13, v7);
    a1 = v30;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v14 + 32);
  if (*(_BYTE *)(v14 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v32 = 1;
      lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys();
      v16 = v28;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v17 = v22;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v26);
    }
    else
    {
      v33 = 2;
      lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v17 = v22;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v27);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v13, v15);
  }
  else
  {
    v31 = 0;
    lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v13, v7);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
  return v10;
}

uint64_t specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5764656E67696C61 && a2 == 0xEB00000000687469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F68636E615FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys, &unk_1E44F4D98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys, &unk_1E44F4D98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys, &unk_1E44F4D98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys, &unk_1E44F4D98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys, &unk_1E44F4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys, &unk_1E44F4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys, &unk_1E44F4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys, &unk_1E44F4EB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis, &unk_1E44F4D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis, &unk_1E44F4D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis, &unk_1E44F4D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys, &unk_1E44F4E28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys, &unk_1E44F4E28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys, &unk_1E44F4E28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys, &unk_1E44F4E28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AbsoluteSpatialTemplateOutput.Element.Direction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EEF248 + 4 * byte_1A0F15745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EEF27C + 4 * byte_1A0F15740[v4]))();
}

uint64_t sub_1A0EEF27C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EEF284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EEF28CLL);
  return result;
}

uint64_t sub_1A0EEF298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EEF2A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EEF2A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EEF2AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodingKeys()
{
  return &unk_1E44F4D98;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.PositionCodingKeys()
{
  return &unk_1E44F4E28;
}

uint64_t storeEnumTagSinglePayload for AbsoluteSpatialTemplateOutput.Element.Position.Anchor(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0EEF318 + 4 * byte_1A0F1574A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0EEF338 + 4 * byte_1A0F1574F[v4]))();
}

_BYTE *sub_1A0EEF318(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0EEF338(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EEF340(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EEF348(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EEF350(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EEF358(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.AlignedWithCodingKeys()
{
  return &unk_1E44F4EB8;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis()
{
  return &unk_1E44F4D08;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys, &unk_1E44F4C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys, &unk_1E44F4C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys, &unk_1E44F4C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys, &unk_1E44F4C18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys, &unk_1E44F4CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys, &unk_1E44F4CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys, &unk_1E44F4CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys, &unk_1E44F4CC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys, &unk_1E44F4CC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys, &unk_1E44F4CC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys, &unk_1E44F4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys, &unk_1E44F4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys;
  if (!lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys, &unk_1E44F4CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys and conformance AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AbsoluteSpatialTemplateOutput.Element.Seat.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0EEF7B0 + 4 * byte_1A0F15759[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0EEF7E4 + 4 * byte_1A0F15754[v4]))();
}

uint64_t sub_1A0EEF7E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EEF7EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EEF7F4);
  return result;
}

uint64_t sub_1A0EEF800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EEF808);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0EEF80C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EEF814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.CodingKeys()
{
  return &unk_1E44F4C18;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.XCodingKeys()
{
  return &unk_1E44F4CA8;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.YCodingKeys()
{
  return &unk_1E44F4CC8;
}

void *type metadata accessor for AbsoluteSpatialTemplateOutput.Element.Direction.CodableAnchor.CodableAxis.ZCodingKeys()
{
  return &unk_1E44F4CE8;
}

uint64_t StaticGroupActivity.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

GroupActivities::StaticGroupActivity __swiftcall StaticGroupActivity.init(id:)(GroupActivities::StaticGroupActivity id)
{
  GroupActivities::StaticGroupActivity *v1;

  *v1 = id;
  return id;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StaticGroupActivity.CodingKeys()
{
  return 25705;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StaticGroupActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticGroupActivity.CodingKeys()
{
  lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticGroupActivity.CodingKeys()
{
  lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t StaticGroupActivity.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticGroupActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity.CodingKeys, &unk_1E44F67A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity.CodingKeys, &unk_1E44F67A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity.CodingKeys, &unk_1E44F67A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity.CodingKeys, &unk_1E44F67A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys);
  }
  return result;
}

uint64_t StaticGroupActivity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StaticGroupActivity.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

void protocol witness for static GroupActivity.activityIdentifier.getter in conformance StaticGroupActivity()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static StaticGroupActivity.activityIdentifier.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance StaticGroupActivity(uint64_t a1)
{
  uint64_t v1;

  StaticGroupActivity.metadata.getter(a1);
  return protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t StaticGroupActivity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t result;

  if (one-time initialization token for generic != -1)
    swift_once();
  v2 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v3, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
  v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v5 = (_QWORD *)(a1 + v4[5]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + v4[6]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + v4[7]) = 0;
  v7 = a1 + v4[8];
  v8 = type metadata accessor for URL();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  *(_QWORD *)(a1 + v4[9]) = 0;
  *(_BYTE *)(a1 + v4[10]) = dyld_program_sdk_at_least() ^ 1;
  v9(a1 + v4[11], 1, 1, v8);
  v10 = v4[12];
  if (one-time initialization token for default != -1)
    swift_once();
  *(_BYTE *)(a1 + v4[13]) = 0;
  *(_QWORD *)(a1 + v4[14]) = 2;
  v11 = one-time initialization token for none;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = a1 + v10;
  v13 = static SceneAssociationBehavior.none;
  v14 = qword_1EE5D94E8;
  v16 = xmmword_1EE5D94F0;
  v15 = qword_1EE5D9500;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)v12 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  *(_OWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 32) = v15;
  return result;
}

uint64_t protocol witness for static GroupActivity._identifiable(by:) in conformance StaticGroupActivity(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)static StaticGroupActivityRegistry.shared + 128))(a1, a2) & 1;
}

uint64_t static StaticGroupActivity._identifiable(by:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)static StaticGroupActivityRegistry.shared + 128))(a1, a2) & 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance StaticGroupActivity@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return StaticGroupActivity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StaticGroupActivity(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticGroupActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticGroupActivity.CodingKeys and conformance StaticGroupActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t *StaticGroupActivityRegistry.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static StaticGroupActivityRegistry.shared;
}

Swift::Void __swiftcall StaticGroupActivity.register()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *v0;
  v2 = v0[1];
  if (one-time initialization token for shared != -1)
    swift_once();
  v3[0] = v1;
  v3[1] = v2;
  (*(void (**)(_QWORD *))(*(_QWORD *)static StaticGroupActivityRegistry.shared + 120))(v3);
}

uint64_t StaticGroupActivity.eraseToAnyGroupActivity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33[0] = a1;
  v34 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1E0C80A78](v34);
  v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v1;
  v4 = v1[1];
  v6 = one-time initialization token for generic;
  swift_bridgeObjectRetain_n();
  if (v6 != -1)
    swift_once();
  v7 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v8 = __swift_project_value_buffer(v7, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v8, (uint64_t)v3, type metadata accessor for GroupActivityMetadata.ActivityType);
  v9 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v10 = &v3[v9[5]];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v3[v9[6]];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v3[v9[7]] = 0;
  v12 = &v3[v9[8]];
  v13 = type metadata accessor for URL();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  *(_QWORD *)&v3[v9[9]] = 0;
  v3[v9[10]] = dyld_program_sdk_at_least() ^ 1;
  v14(&v3[v9[11]], 1, 1, v13);
  v15 = &v3[v9[12]];
  if (one-time initialization token for default != -1)
    swift_once();
  v38 = v5;
  v16 = xmmword_1ED0B5C00;
  v3[v9[13]] = 0;
  *(_QWORD *)&v3[v9[14]] = 2;
  v17 = one-time initialization token for none;
  v33[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17 != -1)
    swift_once();
  v18 = static SceneAssociationBehavior.none;
  v19 = qword_1EE5D94E8;
  v21 = xmmword_1EE5D94F0;
  v20 = qword_1EE5D9500;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v15 = v18;
  *((_QWORD *)v15 + 1) = v19;
  *((_OWORD *)v15 + 1) = v21;
  *((_QWORD *)v15 + 4) = v20;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v22 = v38;
  v36 = v38;
  v37 = v4;
  lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity();
  v23 = v35;
  v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v23)
  {
    outlined destroy of Participant((uint64_t)v3, type metadata accessor for AnyGroupActivity.MetadataProvider);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v24;
    v28 = v25;
    swift_release();
    v29 = (int *)type metadata accessor for AnyGroupActivity(0);
    v30 = (_QWORD *)v33[0];
    swift_bridgeObjectRetain();
    specialized IdentifiableGroupActivity.uuid.getter();
    swift_bridgeObjectRelease();
    *v30 = v22;
    v30[1] = v4;
    outlined init with take of Participant((uint64_t)v3, (uint64_t)v30 + v29[5], type metadata accessor for AnyGroupActivity.MetadataProvider);
    v31 = (_QWORD *)((char *)v30 + v29[6]);
    *v31 = v27;
    v31[1] = v28;
    v32 = (_QWORD *)((char *)v30 + v29[8]);
    *v32 = v22;
    v32[1] = v4;
    return swift_bridgeObjectRetain();
  }
}

uint64_t StaticGroupActivityRegistry.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(v0 + 24) = Lock.init()();
  return v0;
}

uint64_t static StaticGroupActivityRegistry.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t StaticGroupActivityRegistry.subscriptions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t StaticGroupActivityRegistry.subscriptions.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*StaticGroupActivityRegistry.subscriptions.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

Swift::Void __swiftcall StaticGroupActivityRegistry.register(activity:)(GroupActivities::StaticGroupActivity activity)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD);
  uint64_t *v28;
  uint64_t *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v2 = v1;
  countAndFlagsBits = (uint64_t *)activity.id._countAndFlagsBits;
  v35 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>);
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>);
  v36 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *countAndFlagsBits;
  v10 = countAndFlagsBits[1];
  v12 = v1[3];
  Lock.lock()();
  v13 = *(uint64_t (**)(uint64_t))(*v1 + 96);
  v14 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(v13(v14) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v11, v10), (v15 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = v7;
    v33 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = one-time initialization token for conversationManagerClient;
    swift_bridgeObjectRetain();
    if (v16 != -1)
      swift_once();
    swift_beginAccess();
    v17 = qword_1EE5EB2E0;
    v18 = __swift_project_boxed_opaque_existential_1(&static StaticGroupActivityRegistry.conversationManagerClient, qword_1EE5EB2E0);
    v31 = (uint64_t)&v31;
    v19 = *(_QWORD *)(v17 - 8);
    MEMORY[0x1E0C80A78](v18);
    v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v19 + 16))(v21);
    v22 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v17);
    v38[0] = v22;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v11;
    *(_QWORD *)(v23 + 24) = v10;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUConversationActivitySessionContainer?);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>, MEMORY[0x1E0C95950]);
    Publisher.removeDuplicates(by:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v11;
    v24[3] = v10;
    v24[4] = v35;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer?>>, MEMORY[0x1E0C958E0]);
    swift_bridgeObjectRetain();
    v25 = v32;
    v26 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v25);
    v27 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v2 + 112))(v38);
    v29 = v28;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37 = *v29;
    *v29 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v11, v10, isUniquelyReferenced_nonNull_native);
    *v29 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27(v38, 0);
  }
  Lock.unlock()();
}

uint64_t *StaticGroupActivityRegistry.conversationManagerClient.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationManagerClient != -1)
    swift_once();
  return &static StaticGroupActivityRegistry.conversationManagerClient;
}

uint64_t closure #1 in StaticGroupActivityRegistry.register(activity:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v6, a1, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t closure #2 in StaticGroupActivityRegistry.register(activity:)(void **a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  char v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  char *v34;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v33 - v17;
  v19 = *a1;
  v20 = *a2;
  if (v19)
  {
    v21 = objc_msgSend(v19, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v18, 0, 1, v4);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22((char *)&v33 - v17, 1, 1, v4);
  }
  if (v20)
  {
    v23 = objc_msgSend(v20, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v22(v16, v24, 1, v4);
  v25 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of UUID?((uint64_t)v16, v25);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v9, 1, v4) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    v27 = v26(v25, 1, v4);
    if (v27 == 1)
      v28 = &demangling cache variable for type metadata for UUID?;
    else
      v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    if (v27 == 1)
      v29 = -1;
    else
      v29 = 0;
  }
  else
  {
    outlined init with copy of UUID?((uint64_t)v9, (uint64_t)v13);
    if (v26(v25, 1, v4) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v29 = 0;
      v28 = &demangling cache variable for type metadata for (UUID?, UUID?);
    }
    else
    {
      v30 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v25, v4);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v30, v4);
      v28 = &demangling cache variable for type metadata for UUID?;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
      v31(v13, v4);
    }
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, v28);
  return v29 & 1;
}

uint64_t closure #3 in StaticGroupActivityRegistry.register(activity:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  int v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AnyGroupActivity(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x1E0C80A78](v17);
  result = MEMORY[0x1E0C80A78](v20);
  if (*a1)
  {
    v62 = v23;
    v63 = v10;
    v67 = (uint64_t)&v57 - v22;
    v64 = a4;
    MEMORY[0x1E0C80A78](result);
    v61 = a2;
    v24 = a3;
    v26 = v25;
    tryLog<A>(_:_:function:line:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {

      return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnyGroupActivity?);
    }
    else
    {
      outlined init with take of Participant((uint64_t)v16, v67, type metadata accessor for AnyGroupActivity);
      if (one-time initialization token for default != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.default);
      v28 = v26;
      swift_bridgeObjectRetain_n();
      v29 = v28;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.default.getter();
      v32 = v31;
      v33 = os_log_type_enabled(v30, v31);
      v34 = (uint64_t)v63;
      if (v33)
      {
        v35 = v24;
        v36 = swift_slowAlloc();
        v60 = swift_slowAlloc();
        v70 = v60;
        *(_DWORD *)v36 = 136315394;
        v37 = objc_msgSend(v29, sel_UUID, v36 + 4);
        v59 = v30;
        v38 = v37;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v39 = v66;
        v40 = dispatch thunk of CustomStringConvertible.description.getter();
        v58 = v32;
        v42 = v41;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v39);
        v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2080;
        v68 = v61;
        v69 = v35;
        swift_bridgeObjectRetain();
        v43 = String.init<A>(reflecting:)();
        v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v45 = v59;
        _os_log_impl(&dword_1A0DB3000, v59, (os_log_type_t)v58, "Beginning static activity on conversation %s: %s.", (uint8_t *)v36, 0x16u);
        v46 = v60;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v46, -1, -1);
        MEMORY[0x1A1B05CC4](v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v47 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v34, 1, 1, v47);
      v48 = v67;
      v49 = v62;
      outlined init with copy of Participant(v67, v62, type metadata accessor for AnyGroupActivity);
      v50 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v51 = v19 + v50 + 7;
      v52 = v34;
      v53 = v51 & 0xFFFFFFFFFFFFFFF8;
      v54 = ((v51 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = 0;
      *(_QWORD *)(v55 + 24) = 0;
      outlined init with take of Participant(v49, v55 + v50, type metadata accessor for AnyGroupActivity);
      *(_QWORD *)(v55 + v53) = v29;
      *(_QWORD *)(v55 + v54) = v64;
      v56 = v29;
      _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:), v55);

      swift_release();
      return outlined destroy of Participant(v48, type metadata accessor for AnyGroupActivity);
    }
  }
  return result;
}

uint64_t implicit closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v33[0] = a3;
  v34 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1E0C80A78](v34);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = one-time initialization token for generic;
  swift_bridgeObjectRetain_n();
  if (v6 != -1)
    swift_once();
  v7 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v8 = __swift_project_value_buffer(v7, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v8, (uint64_t)v5, type metadata accessor for GroupActivityMetadata.ActivityType);
  v9 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v10 = &v5[v9[5]];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v5[v9[6]];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v5[v9[7]] = 0;
  v12 = &v5[v9[8]];
  v13 = type metadata accessor for URL();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  *(_QWORD *)&v5[v9[9]] = 0;
  v5[v9[10]] = dyld_program_sdk_at_least() ^ 1;
  v14(&v5[v9[11]], 1, 1, v13);
  v15 = &v5[v9[12]];
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = xmmword_1ED0B5C00;
  v5[v9[13]] = 0;
  *(_QWORD *)&v5[v9[14]] = 2;
  v17 = one-time initialization token for none;
  v33[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17 != -1)
    swift_once();
  v18 = static SceneAssociationBehavior.none;
  v19 = qword_1EE5D94E8;
  v21 = xmmword_1EE5D94F0;
  v20 = qword_1EE5D9500;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v15 = v18;
  *((_QWORD *)v15 + 1) = v19;
  *((_OWORD *)v15 + 1) = v21;
  *((_QWORD *)v15 + 4) = v20;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v22 = v38;
  v36 = v38;
  v37 = a2;
  lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity();
  v23 = v35;
  v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v23)
  {
    outlined destroy of Participant((uint64_t)v5, type metadata accessor for AnyGroupActivity.MetadataProvider);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v24;
    v28 = v25;
    swift_release();
    v29 = (int *)type metadata accessor for AnyGroupActivity(0);
    v30 = (_QWORD *)v33[0];
    swift_bridgeObjectRetain();
    specialized IdentifiableGroupActivity.uuid.getter();
    swift_bridgeObjectRelease();
    *v30 = v22;
    v30[1] = a2;
    outlined init with take of Participant((uint64_t)v5, (uint64_t)v30 + v29[5], type metadata accessor for AnyGroupActivity.MetadataProvider);
    v31 = (_QWORD *)((char *)v30 + v29[6]);
    *v31 = v27;
    v31[1] = v28;
    v32 = (_QWORD *)((char *)v30 + v29[8]);
    *v32 = v22;
    v32[1] = a2;
    return swift_bridgeObjectRetain();
  }
}

uint64_t closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[10] = a5;
  v6 = type metadata accessor for UUID();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v7 = (_QWORD *)swift_task_alloc();
  v5[14] = v7;
  *v7 = v5;
  v7[1] = closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:);
  return AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter();
}

uint64_t closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;

  if (one-time initialization token for conversationManagerClient != -1)
    swift_once();
  v1 = (void *)v0[10];
  swift_beginAccess();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)&static StaticGroupActivityRegistry.conversationManagerClient, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v2 = objc_msgSend(v1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = (_QWORD *)swift_task_alloc();
  v0[16] = v3;
  *v3 = v0;
  v3[1] = closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:);
  return dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall StaticGroupActivityRegistry.isStaticActivity(activityIdentifier:)(Swift::String activityIdentifier)
{
  Swift::Bool v2;

  Lock.withLock<A>(_:)();
  return v2;
}

uint64_t closure #1 in StaticGroupActivityRegistry.isStaticActivity(activityIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96);
  v8 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(v7(v8) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v9 & 1) != 0))
  {
    swift_retain();
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  *a4 = v10;
  return result;
}

uint64_t one-time initialization function for conversationManagerClient()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for ConversationManagerClient();
  result = static ConversationManagerClient.shared.getter();
  qword_1EE5EB2E0 = v0;
  unk_1EE5EB2E8 = MEMORY[0x1E0D14EC8];
  static StaticGroupActivityRegistry.conversationManagerClient = result;
  return result;
}

uint64_t static StaticGroupActivityRegistry.conversationManagerClient.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for conversationManagerClient != -1)
    swift_once();
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager((uint64_t)&static StaticGroupActivityRegistry.conversationManagerClient, a1);
}

uint64_t static StaticGroupActivityRegistry.conversationManagerClient.setter(uint64_t *a1)
{
  if (one-time initialization token for conversationManagerClient != -1)
    swift_once();
  swift_beginAccess();
  __swift_assign_boxed_opaque_existential_1(&static StaticGroupActivityRegistry.conversationManagerClient, a1);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t (*static StaticGroupActivityRegistry.conversationManagerClient.modify())()
{
  if (one-time initialization token for conversationManagerClient != -1)
    swift_once();
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t StaticGroupActivityRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t StaticGroupActivityRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t StaticGroupActivityRegistry.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(v0 + 24) = Lock.init()();
  return v0;
}

unint64_t lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity, &type metadata for StaticGroupActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity, &type metadata for StaticGroupActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity, &type metadata for StaticGroupActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity, &type metadata for StaticGroupActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity;
  if (!lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for StaticGroupActivity, &type metadata for StaticGroupActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticGroupActivity and conformance StaticGroupActivity);
  }
  return result;
}

uint64_t sub_1A0EF1FE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StaticGroupActivityRegistry.register(activity:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in StaticGroupActivityRegistry.register(activity:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1A0EF2010()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in StaticGroupActivityRegistry.register(activity:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #3 in StaticGroupActivityRegistry.register(activity:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in StaticGroupActivityRegistry.isStaticActivity(activityIdentifier:)@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in StaticGroupActivityRegistry.isStaticActivity(activityIdentifier:)(v1[2], v1[3], v1[4], a1);
}

unint64_t instantiation function for generic protocol witness table for StaticGroupActivity(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for StaticGroupActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for StaticGroupActivity(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity);
}

{
  return instantiation function for generic protocol witness table for StaticGroupActivity(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticGroupActivity and conformance StaticGroupActivity);
}

uint64_t instantiation function for generic protocol witness table for StaticGroupActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A0EF21E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EF2218(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 104);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

ValueMetadata *type metadata accessor for StaticGroupActivity()
{
  return &type metadata for StaticGroupActivity;
}

uint64_t type metadata accessor for StaticGroupActivityRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for StaticGroupActivityRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.subscriptions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.subscriptions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.subscriptions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.register(activity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.isStaticActivity(activityIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StaticGroupActivityRegistry.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t storeEnumTagSinglePayload for StaticGroupActivity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0EF2308 + 4 * byte_1A0F179B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0EF2328 + 4 * byte_1A0F179B5[v4]))();
}

_BYTE *sub_1A0EF2308(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0EF2328(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EF2330(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EF2338(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EF2340(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EF2348(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for StaticGroupActivity.CodingKeys()
{
  return &unk_1E44F67A0;
}

uint64_t partial apply for implicit closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1A0EF2454()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease();
  v6 = v0 + v4;
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v19 = v5;
    v8 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    v9 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v10 = v7 + v9[8];
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v13(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v14 = v7 + v9[11];
    if (!v13(v14, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v19;
    v4 = (v3 + 32) & ~v3;
  }
  v15 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Data._Representation(*(_QWORD *)(v6 + v1[6]), *(_QWORD *)(v6 + v1[6] + 8));
  v16 = v6 + v1[7];
  v17 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for AnyGroupActivity(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #3 in StaticGroupActivityRegistry.register(activity:)(a1, v6, v7, v8, v9);
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivitySession();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
    result = Set.Iterator.init(_cocoa:)();
    v3 = v30;
    v27 = v31;
    v5 = v32;
    v6 = v33;
    v7 = v34;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v6 = 0;
  }
  v26 = (unint64_t)(v5 + 64) >> 6;
  while (1)
  {
    v12 = v6;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_36;
    type metadata accessor for TUConversationActivitySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = v35;
    swift_unknownObjectRelease();
    if (!v35)
      goto LABEL_36;
LABEL_32:
    v19 = v3;
    v20 = objc_msgSend(v15, sel_activity);
    v21 = objc_msgSend(v20, sel_activityIdentifier);

    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    if (v22 == a2 && v24 == a3)
    {

      swift_bridgeObjectRelease();
      v25 = 1;
      goto LABEL_37;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

    result = swift_bridgeObjectRelease();
    v3 = v19;
    if ((v11 & 1) != 0)
    {
      v25 = 1;
      goto LABEL_37;
    }
  }
  if (v7)
  {
    v13 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v14 = v13 | (v6 << 6);
LABEL_31:
    v15 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    if (!v15)
      goto LABEL_36;
    goto LABEL_32;
  }
  v16 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v16 >= v26)
      goto LABEL_36;
    v17 = *(_QWORD *)(v27 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v12 + 2;
      if (v12 + 2 >= v26)
        goto LABEL_36;
      v17 = *(_QWORD *)(v27 + 8 * v6);
      if (!v17)
      {
        v6 = v12 + 3;
        if (v12 + 3 >= v26)
          goto LABEL_36;
        v17 = *(_QWORD *)(v27 + 8 * v6);
        if (!v17)
        {
          v6 = v12 + 4;
          if (v12 + 4 >= v26)
            goto LABEL_36;
          v17 = *(_QWORD *)(v27 + 8 * v6);
          if (!v17)
          {
            v6 = v12 + 5;
            if (v12 + 5 >= v26)
              goto LABEL_36;
            v17 = *(_QWORD *)(v27 + 8 * v6);
            if (!v17)
            {
              v18 = v12 + 6;
              while (v26 != v18)
              {
                v17 = *(_QWORD *)(v27 + 8 * v18++);
                if (v17)
                {
                  v6 = v18 - 1;
                  goto LABEL_30;
                }
              }
LABEL_36:
              v25 = 0;
LABEL_37:
              outlined consume of [AnyHashable : Any].Iterator._Variant();
              return v25;
            }
          }
        }
      }
    }
LABEL_30:
    v7 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v19;
  int64_t v20;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v20 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v8 << 6);
LABEL_18:
    v14 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    if (objc_msgSend(v14, sel_state) == (id)3)
    {
      v15 = objc_msgSend(v14, sel_activitySessions);
      type metadata accessor for TUConversationActivitySession();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
      v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      LOBYTE(v15) = specialized Sequence.contains(where:)(v16, a2, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
LABEL_20:
        swift_release();
        return;
      }
    }

  }
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 >= v20)
    goto LABEL_20;
  v12 = *(_QWORD *)(v19 + 8 * v8);
  if (v12)
  {
LABEL_17:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_18;
  }
  v13 = v8 + 1;
  if (v8 + 1 >= v20)
    goto LABEL_20;
  v12 = *(_QWORD *)(v19 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 2;
  if (v8 + 2 >= v20)
    goto LABEL_20;
  v12 = *(_QWORD *)(v19 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 3;
  if (v8 + 3 >= v20)
    goto LABEL_20;
  v12 = *(_QWORD *)(v19 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v8 = v13;
    goto LABEL_17;
  }
  v17 = v8 + 4;
  if (v8 + 4 >= v20)
    goto LABEL_20;
  v12 = *(_QWORD *)(v19 + 8 * v17);
  v8 += 4;
  if (v12)
    goto LABEL_17;
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v20)
      goto LABEL_20;
    v12 = *(_QWORD *)(v19 + 8 * v8);
    ++v17;
    if (v12)
      goto LABEL_17;
  }
LABEL_29:
  __break(1u);
}

void ReliableBroadcastPacket.EncryptionInfo.init(keyIndex:tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1A0EF2D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  if (BYTE6(v0) != 16)
  {
    __break(1u);
    JUMPOUT(0x1A0EF2DACLL);
  }
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v2, v3, v4);
  result = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  v6 = (_QWORD *)(v2 + *(int *)(result + 20));
  *v6 = v1;
  v6[1] = v0;
  return result;
}

uint64_t type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for ReliableBroadcastPacket.EncryptionInfo);
}

uint64_t ReliableBroadcastPacket.Message.init(kind:encryptionInfo:messageSequenceNumber:packetNumber:messageLength:data:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  int *v15;
  uint64_t result;
  _QWORD *v17;

  *a8 = a1 & 1;
  v15 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  *(_DWORD *)&a8[v15[6]] = a3;
  *(_WORD *)&a8[v15[7]] = a4;
  *(_WORD *)&a8[v15[8]] = a5;
  result = outlined init with take of Participant(a2, (uint64_t)&a8[v15[5]], type metadata accessor for ReliableBroadcastPacket.EncryptionInfo);
  v17 = &a8[v15[9]];
  *v17 = a6;
  v17[1] = a7;
  return result;
}

uint64_t type metadata accessor for ReliableBroadcastPacket.Message(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for ReliableBroadcastPacket.Message);
}

uint64_t ReliableBroadcastPacket.init(participantIdentifier:packet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = a1;
  v5 = type metadata accessor for ReliableBroadcastPacket(0);
  return outlined init with take of Participant(a2, (uint64_t)a3 + *(int *)(v5 + 20), type metadata accessor for ReliableBroadcastPacket.PacketType);
}

uint64_t type metadata accessor for ReliableBroadcastPacket(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for ReliableBroadcastPacket);
}

uint64_t type metadata accessor for ReliableBroadcastPacket.PacketType(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for ReliableBroadcastPacket.PacketType);
}

void specialized BinaryDecoder.decode<A>(_:)()
{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 32), 8))
  {
    swift_beginAccess();
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1A0EF3228);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 32), 4))
  {
    swift_beginAccess();
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1A0EF35A8);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 32), 2))
  {
    swift_beginAccess();
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1A0EF3928);
}

{
  uint64_t v0;

  if (!__OFADD__(*(_QWORD *)(v0 + 32), 1))
  {
    swift_beginAccess();
    __asm { BR              X13 }
  }
  __break(1u);
  JUMPOUT(0x1A0EF3CA8);
}

{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  specialized BinaryDecoder.decode<A>(_:)();
  if (!v0 && v1 > 1u)
  {
    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    _StringGuts.grow(_:)(81);
    v5._countAndFlagsBits = 0xD000000000000034;
    v5._object = (void *)0x80000001A0F1B2D0;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 1684957515;
    v6._object = (void *)0xE400000000000000;
    String.append(_:)(v6);
    v7._object = (void *)0x80000001A0F1B310;
    v7._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v7);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC458], v2);
    swift_willThrow();
  }
}

uint64_t specialized BinaryDecoder.decode<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  specialized BinaryDecoder.decode<A>(_:)();
  v2 = v1;
  if (!v0 && v1 > 3u)
  {
    v3 = type metadata accessor for DecodingError();
    swift_allocError();
    v5 = v4;
    _StringGuts.grow(_:)(81);
    v6._countAndFlagsBits = 0xD000000000000034;
    v6._object = (void *)0x80000001A0F1B2D0;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 0xD000000000000032;
    v7._object = (void *)0x80000001A0F1C700;
    String.append(_:)(v7);
    v8._object = (void *)0x80000001A0F1B310;
    v8._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v8);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, *MEMORY[0x1E0DEC458], v3);
    swift_willThrow();
  }
  return v2;
}

unint64_t ReliableBroadcastPacket.PacketIdentifier.init(messageSequenceNumber:packetNumber:)(unsigned int a1, unsigned __int16 a2)
{
  return a1 | ((unint64_t)a2 << 32);
}

uint64_t ReliableBroadcastPacket.participantIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ReliableBroadcastPacket.participantIdentifier.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.participantIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.packet.getter@<X0>(uint64_t a1@<X8>)
{
  return ReliableBroadcastPacket.packet.getter(type metadata accessor for ReliableBroadcastPacket, type metadata accessor for ReliableBroadcastPacket.PacketType, a1);
}

uint64_t ReliableBroadcastPacket.packet.setter(uint64_t a1)
{
  return ReliableBroadcastPacket.packet.setter(a1, type metadata accessor for ReliableBroadcastPacket, type metadata accessor for ReliableBroadcastPacket.PacketType);
}

uint64_t (*ReliableBroadcastPacket.packet.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Nonce.participantIdentifier.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Nonce.participantIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Nonce.messageSequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReliableBroadcastPacket.Nonce.messageSequenceNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Nonce.messageSequenceNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void ReliableBroadcastPacket.Nonce.init(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ReliableBroadcastPacket.Nonce.encode(to:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v4 = specialized Data.init<A>(_:)((uint64_t)&v11, (uint64_t)v12);
  v6 = v5;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v4, v6);
  LODWORD(v11) = a3;
  v7 = specialized Data.init<A>(_:)((uint64_t)&v11, (uint64_t)&v11 + 4);
  v9 = v8;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v7, v9);
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.Nonce(uint64_t a1)
{
  uint64_t v1;

  return ReliableBroadcastPacket.Nonce.encode(to:)(a1, *(_QWORD *)v1, *(_DWORD *)(v1 + 8));
}

void protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.Nonce()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.keyIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.keyIndex.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ReliableBroadcastPacket.EncryptionInfo.keyIndex.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.tag.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.tag.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*ReliableBroadcastPacket.EncryptionInfo.tag.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.encode(to:)()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v12 = UUID.uuid.getter();
  v13 = v0;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v8 = specialized Data.init<A>(_:)((uint64_t)&v12, (uint64_t)v21);
  v10 = v9;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v8, v10);
  type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BinaryDecoder.decode(_:)();
  if (v1)
    return swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v6, v3);
  specialized BinaryDecoder.decode(_:length:)(16);
  v9 = v8;
  v11 = v10;
  swift_release();
  result = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  v12 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v12 = v9;
  v12[1] = v11;
  return result;
}

uint64_t ReliableBroadcastPacket.EncryptionInfo.hash(into:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20));
  v2 = *v1;
  v3 = v1[1];
  outlined copy of Data._Representation(*v1, v3);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v2, v3);
}

void static ReliableBroadcastPacket.EncryptionInfo.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2;

  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v2 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
    specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + v2), *(_QWORD *)(a1 + v2 + 8));
  }
}

Swift::Int ReliableBroadcastPacket.EncryptionInfo.hashValue.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20));
  v2 = *v1;
  v3 = v1[1];
  outlined copy of Data._Representation(*v1, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.EncryptionInfo()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v12 = UUID.uuid.getter();
  v13 = v0;
  v14 = v1;
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v8 = specialized Data.init<A>(_:)((uint64_t)&v12, (uint64_t)v21);
  v10 = v9;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v8, v10);
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.EncryptionInfo@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BinaryDecoder.decode(_:)();
  if (v2)
    return swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  specialized BinaryDecoder.decode(_:length:)(16);
  v11 = v10;
  v13 = v12;
  result = swift_release();
  v14 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v14 = v11;
  v14[1] = v13;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReliableBroadcastPacket.EncryptionInfo(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v3 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  v4 = *v3;
  v5 = v3[1];
  outlined copy of Data._Representation(*v3, v5);
  Data.hash(into:)();
  outlined consume of Data._Representation(v4, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(*v4, v6);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v5, v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(*v4, v6);
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v6);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0)
    specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
}

uint64_t ReliableBroadcastPacket.Heartbeat.lastBroadcastedMessageNumber.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Heartbeat.lastBroadcastedMessageNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Heartbeat.init(from:)()
{
  uint64_t v0;
  uint64_t v1;

  specialized BinaryDecoder.decode<A>(_:)();
  v1 = v0;
  swift_release();
  return v1;
}

uint64_t ReliableBroadcastPacket.Heartbeat.encode(to:)(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  _BYTE v7[28];

  *(_QWORD *)&v7[20] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v2 = specialized Data.init<A>(_:)((uint64_t)&v6, (uint64_t)v7);
  v4 = v3;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v2, v4);
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.Heartbeat()
{
  int *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v5;
  _BYTE v6[28];

  *(_QWORD *)&v6[20] = *MEMORY[0x1E0C80C00];
  v5 = *v0;
  v1 = specialized Data.init<A>(_:)((uint64_t)&v5, (uint64_t)v6);
  v3 = v2;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v1, v3);
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.Heartbeat@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t result;

  specialized BinaryDecoder.decode<A>(_:)();
  v4 = v3;
  result = swift_release();
  if (!v1)
    *a1 = v4;
  return result;
}

GroupActivities::ReliableBroadcastPacket::Message::Kind_optional __swiftcall ReliableBroadcastPacket.Message.Kind.init(rawValue:)(Swift::UInt8 rawValue)
{
  GroupActivities::ReliableBroadcastPacket::Message::Kind_optional v1;

  if (rawValue == 1)
    v1.value = GroupActivities_ReliableBroadcastPacket_Message_Kind_forwardErrorCorrection;
  else
    v1.value = GroupActivities_ReliableBroadcastPacket_Message_Kind_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t ReliableBroadcastPacket.Message.Kind.rawValue.getter(char a1)
{
  return a1 & 1;
}

_BYTE *protocol witness for RawRepresentable.init(rawValue:) in conformance ReliableBroadcastPacket.Message.Kind@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ReliableBroadcastPacket.Message.Kind(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t ReliableBroadcastPacket.Message.kind.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ReliableBroadcastPacket.Message.kind.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Message.kind.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.encryptionInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return ReliableBroadcastPacket.packet.getter(type metadata accessor for ReliableBroadcastPacket.Message, type metadata accessor for ReliableBroadcastPacket.EncryptionInfo, a1);
}

uint64_t ReliableBroadcastPacket.packet.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a1(0);
  return outlined init with copy of Participant(v3 + *(int *)(v6 + 20), a3, a2);
}

uint64_t ReliableBroadcastPacket.Message.encryptionInfo.setter(uint64_t a1)
{
  return ReliableBroadcastPacket.packet.setter(a1, type metadata accessor for ReliableBroadcastPacket.Message, type metadata accessor for ReliableBroadcastPacket.EncryptionInfo);
}

uint64_t ReliableBroadcastPacket.packet.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;

  v6 = a2(0);
  return outlined assign with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(a1, v3 + *(int *)(v6 + 20), a3);
}

uint64_t (*ReliableBroadcastPacket.Message.encryptionInfo.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.messageSequenceNumber.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.Message(0) + 24));
}

uint64_t ReliableBroadcastPacket.Message.messageSequenceNumber.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReliableBroadcastPacket.Message(0);
  *(_DWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Message.messageSequenceNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.packetNumber.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.Message(0) + 28));
}

uint64_t ReliableBroadcastPacket.Message.packetNumber.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReliableBroadcastPacket.Message(0);
  *(_WORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Message.packetNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.messageLength.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.Message(0) + 32));
}

uint64_t ReliableBroadcastPacket.Message.messageLength.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReliableBroadcastPacket.Message(0);
  *(_WORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Message.messageLength.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket.Message(0) + 36);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t ReliableBroadcastPacket.Message.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for ReliableBroadcastPacket.Message(0) + 36);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*ReliableBroadcastPacket.Message.data.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ReliableBroadcastPacket.Message(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.Message.init(from:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[2];

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v29 - v11;
  specialized BinaryDecoder.decode<A>(_:)();
  if (v1)
    return swift_release();
  *a1 = v13 & 1;
  swift_retain();
  BinaryDecoder.decode(_:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
  specialized BinaryDecoder.decode(_:length:)(16);
  v16 = v15;
  v18 = v17;
  swift_release();
  v19 = &v10[*(int *)(v7 + 20)];
  *(_QWORD *)v19 = v16;
  *((_QWORD *)v19 + 1) = v18;
  outlined init with take of Participant((uint64_t)v10, (uint64_t)v12, type metadata accessor for ReliableBroadcastPacket.EncryptionInfo);
  v20 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  outlined init with take of Participant((uint64_t)v12, (uint64_t)&a1[v20[5]], type metadata accessor for ReliableBroadcastPacket.EncryptionInfo);
  specialized BinaryDecoder.decode<A>(_:)();
  *(_DWORD *)&a1[v20[6]] = v21;
  specialized BinaryDecoder.decode<A>(_:)();
  *(_WORD *)&a1[v20[7]] = v22;
  specialized BinaryDecoder.decode<A>(_:)();
  *(_WORD *)&a1[v20[8]] = v23;
  BinaryDecoder.decodeRemainder()();
  v25 = v24;
  v27 = v26;
  result = swift_release();
  v28 = &a1[v20[9]];
  *v28 = v25;
  v28[1] = v27;
  return result;
}

uint64_t ReliableBroadcastPacket.Message.encode(to:)()
{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v27;
  _BYTE v28[12];
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  LOBYTE(v27) = *v0;
  v1 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)&v27 + 1);
  v3 = v2;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v1, v3);
  v4 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  v5 = UUID.uuid.getter();
  LOWORD(v27) = v5;
  BYTE2(v27) = BYTE2(v5);
  HIBYTE(v27) = BYTE3(v5);
  v28[0] = BYTE4(v5);
  v28[1] = BYTE5(v5);
  v28[2] = BYTE6(v5);
  v28[3] = HIBYTE(v5);
  v28[4] = v6;
  v28[5] = v7;
  v28[6] = v8;
  v28[7] = v9;
  v28[8] = v10;
  v28[9] = v11;
  v28[10] = v12;
  v28[11] = v13;
  v14 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)v29);
  v16 = v15;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v14, v16);
  type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  v27 = *(_DWORD *)&v0[v4[6]];
  v17 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)v28);
  v19 = v18;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v17, v19);
  LOWORD(v27) = *(_WORD *)&v0[v4[7]];
  v20 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)&v27 + 2);
  v22 = v21;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v20, v22);
  LOWORD(v27) = *(_WORD *)&v0[v4[8]];
  v23 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)&v27 + 2);
  v25 = v24;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v23, v25);
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t ReliableBroadcastPacket.Message.hash(into:)()
{
  Swift::UInt8 *v0;
  Swift::UInt8 *v1;
  int *v2;
  Swift::UInt8 *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v1 = v0;
  Hasher._combine(_:)(*v0);
  v2 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  v3 = &v0[v2[5]];
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (uint64_t *)&v3[*(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20)];
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(*v4, v6);
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v6);
  Hasher._combine(_:)(*(_DWORD *)&v1[v2[6]]);
  Hasher._combine(_:)(*(_WORD *)&v1[v2[7]]);
  Hasher._combine(_:)(*(_WORD *)&v1[v2[8]]);
  v7 = (uint64_t *)&v1[v2[9]];
  v8 = *v7;
  v9 = v7[1];
  outlined copy of Data._Representation(*v7, v9);
  Data.hash(into:)();
  return outlined consume of Data._Representation(v8, v9);
}

Swift::Int ReliableBroadcastPacket.Message.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 *v1;
  int *v2;
  Swift::UInt8 *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  v2 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  v3 = &v0[v2[5]];
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (uint64_t *)&v3[*(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20)];
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(*v4, v6);
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v6);
  Hasher._combine(_:)(*(_DWORD *)&v1[v2[6]]);
  Hasher._combine(_:)(*(_WORD *)&v1[v2[7]]);
  Hasher._combine(_:)(*(_WORD *)&v1[v2[8]]);
  v7 = (uint64_t *)&v1[v2[9]];
  v8 = *v7;
  v9 = v7[1];
  outlined copy of Data._Representation(*v7, v9);
  Data.hash(into:)();
  outlined consume of Data._Representation(v8, v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.Message()
{
  return ReliableBroadcastPacket.Message.encode(to:)();
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.Message@<X0>(_BYTE *a1@<X8>)
{
  return ReliableBroadcastPacket.Message.init(from:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReliableBroadcastPacket.Message(uint64_t a1, int *a2)
{
  Swift::UInt8 *v2;
  Swift::UInt8 *v4;
  Swift::UInt8 *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v4 = v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  v5 = &v2[a2[5]];
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v6 = (uint64_t *)&v5[*(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20)];
  v7 = *v6;
  v8 = v6[1];
  outlined copy of Data._Representation(*v6, v8);
  Data.hash(into:)();
  outlined consume of Data._Representation(v7, v8);
  Hasher._combine(_:)(*(_DWORD *)&v4[a2[6]]);
  Hasher._combine(_:)(*(_WORD *)&v4[a2[7]]);
  Hasher._combine(_:)(*(_WORD *)&v4[a2[8]]);
  v9 = (uint64_t *)&v4[a2[9]];
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  Data.hash(into:)();
  outlined consume of Data._Representation(v10, v11);
  return Hasher._finalize()();
}

uint64_t ReliableBroadcastPacket.UnreliableMessage.data.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t ReliableBroadcastPacket.UnreliableMessage.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*ReliableBroadcastPacket.UnreliableMessage.data.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.UnreliableMessage.init(from:)()
{
  uint64_t v0;
  uint64_t v1;

  BinaryDecoder.decodeRemainder()();
  v1 = v0;
  swift_release();
  return v1;
}

uint64_t ReliableBroadcastPacket.UnreliableMessage.encode(to:)()
{
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.UnreliableMessage()
{
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.UnreliableMessage@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  BinaryDecoder.decodeRemainder()();
  v3 = v2;
  v5 = v4;
  result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.sourceIdentifier.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.NegativeAcknowledgement.sourceIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.messageSequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.messageSequenceNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.NegativeAcknowledgement.messageSequenceNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t ReliableBroadcastPacket.NegativeAcknowledgement.packetNumber.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.packetNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.NegativeAcknowledgement.packetNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized BinaryDecoder.decode<A>(_:)();
  if (!v0)
  {
    v1 = v2;
    specialized BinaryDecoder.decode<A>(_:)();
    specialized BinaryDecoder.decode<A>(_:)();
  }
  swift_release();
  return v1;
}

uint64_t ReliableBroadcastPacket.NegativeAcknowledgement.encode(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD v16[3];

  v3 = a3;
  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = HIDWORD(a3);
  v15 = a2;
  v5 = specialized Data.init<A>(_:)((uint64_t)&v15, (uint64_t)v16);
  v7 = v6;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v5, v7);
  LODWORD(v15) = v3;
  v8 = specialized Data.init<A>(_:)((uint64_t)&v15, (uint64_t)&v15 + 4);
  v10 = v9;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v8, v10);
  LOWORD(v15) = v4;
  v11 = specialized Data.init<A>(_:)((uint64_t)&v15, (uint64_t)&v15 + 2);
  v13 = v12;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v11, v13);
}

uint64_t protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket.NegativeAcknowledgement(uint64_t a1)
{
  uint64_t v1;

  return ReliableBroadcastPacket.NegativeAcknowledgement.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket.NegativeAcknowledgement@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  __int16 v8;
  uint64_t result;

  specialized BinaryDecoder.decode<A>(_:)();
  if (v1)
    return swift_release();
  v4 = v3;
  specialized BinaryDecoder.decode<A>(_:)();
  v6 = v5;
  specialized BinaryDecoder.decode<A>(_:)();
  v8 = v7;
  result = swift_release();
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 12) = v8;
  return result;
}

uint64_t ReliableBroadcastPacket.init(from:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;

  v3 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  specialized BinaryDecoder.decode<A>(_:)();
  if (!v1)
  {
    *a1 = v6;
    v8 = (char *)sub_1A0EF6070 + 4 * byte_1A0F17C40[specialized BinaryDecoder.decode<A>(_:)()];
    __asm { BR              X10 }
  }
  return swift_release();
}

void sub_1A0EF6070()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;

  swift_retain();
  specialized BinaryDecoder.decode<A>(_:)();
  v4 = v3;
  swift_release_n();
  if (!v0)
  {
    *v2 = v4;
    swift_storeEnumTagMultiPayload();
    v5 = v1 + *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20);
    outlined init with take of Participant((uint64_t)v2, v5, type metadata accessor for ReliableBroadcastPacket.PacketType);
  }
  JUMPOUT(0x1A0EF6034);
}

void sub_1A0EF6118()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for ReliableBroadcastPacket(0) + 20));
  swift_retain();
  BinaryDecoder.decodeRemainder()();
  v3 = v2;
  v5 = v4;
  swift_release_n();
  *v1 = v3;
  v1[1] = v5;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A0EF6034);
}

void sub_1A0EF6160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;

  swift_retain();
  specialized BinaryDecoder.decode<A>(_:)();
  if (!v0)
  {
    v3 = v2;
    specialized BinaryDecoder.decode<A>(_:)();
    v5 = v4;
    specialized BinaryDecoder.decode<A>(_:)();
    v7 = v6;
    swift_release_n();
    *(_QWORD *)v1 = v3;
    *(_DWORD *)(v1 + 8) = v5;
    *(_WORD *)(v1 + 12) = v7;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ReliableBroadcastPacket(0);
    JUMPOUT(0x1A0EF6110);
  }
  swift_release();
  JUMPOUT(0x1A0EF602CLL);
}

void ReliableBroadcastPacket.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v0;
  v5 = specialized Data.init<A>(_:)((uint64_t)&v11, (uint64_t)v12);
  v7 = v6;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v5, v7);
  v8 = type metadata accessor for ReliableBroadcastPacket(0);
  outlined init with copy of Participant((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, type metadata accessor for ReliableBroadcastPacket.PacketType);
  v9 = (char *)sub_1A0EF6344 + 4 * byte_1A0F17C44[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A0EF6344()
{
  int *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *v0;
  *(_BYTE *)(v1 - 112) = 0;
  v3 = specialized Data.init<A>(_:)(v1 - 112, v1 - 111);
  v5 = v4;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  outlined consume of Data._Representation(v3, v5);
  *(_DWORD *)(v1 - 112) = v2;
  v6 = specialized Data.init<A>(_:)(v1 - 112, v1 - 108);
  v8 = v7;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v6, v8);
}

void protocol witness for BinaryEncodable.encode(to:) in conformance ReliableBroadcastPacket()
{
  ReliableBroadcastPacket.encode(to:)();
}

uint64_t protocol witness for BinaryDecodable.init(from:) in conformance ReliableBroadcastPacket@<X0>(_QWORD *a1@<X8>)
{
  return ReliableBroadcastPacket.init(from:)(a1);
}

uint64_t ReliableBroadcastPacket.PacketIdentifier.messageSequenceNumber.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.PacketIdentifier.messageSequenceNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t ReliableBroadcastPacket.PacketIdentifier.packetNumber.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t ReliableBroadcastPacket.PacketIdentifier.packetNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*ReliableBroadcastPacket.PacketIdentifier.packetNumber.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void ReliableBroadcastPacket.PacketIdentifier.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2;

  v2 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static ReliableBroadcastPacket.PacketIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (a1 & 0xFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFLL);
}

Swift::Int ReliableBroadcastPacket.PacketIdentifier.hashValue.getter(unint64_t a1)
{
  Swift::UInt32 v1;
  unint64_t v2;

  v1 = a1;
  v2 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReliableBroadcastPacket.PacketIdentifier()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt16 v2;

  v1 = *(_DWORD *)v0;
  v2 = *(_WORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ReliableBroadcastPacket.PacketIdentifier()
{
  uint64_t v0;
  Swift::UInt16 v1;

  v1 = *(_WORD *)(v0 + 4);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReliableBroadcastPacket.PacketIdentifier()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt16 v2;

  v1 = *(_DWORD *)v0;
  v2 = *(_WORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReliableBroadcastPacket.PacketIdentifier(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1A0EF6808(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1A0EF69ECLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A0EF6A6C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  outlined consume of Data._Representation(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1A0EF6D2C()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1A0EF6D60 + *((int *)qword_1A0EF6E20 + (v0 >> 62))))();
}

uint64_t sub_1A0EF6D70@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      outlined copy of Data._Representation(v2, v1);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void specialized static ReliableBroadcastPacket.Message.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char v7;

  if (*a1 == *a2)
  {
    v4 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v5 = &a1[v4[5]];
    if ((static UUID.== infix(_:_:)() & 1) != 0)
    {
      v6 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
      specialized static Data.== infix(_:_:)(*(_QWORD *)&v5[*(int *)(v6 + 20)], *(_QWORD *)&v5[*(int *)(v6 + 20) + 8]);
      if ((v7 & 1) != 0
        && *(_DWORD *)&a1[v4[6]] == *(_DWORD *)&a2[v4[6]]
        && *(unsigned __int16 *)&a1[v4[7]] == *(unsigned __int16 *)&a2[v4[7]]
        && *(unsigned __int16 *)&a1[v4[8]] == *(unsigned __int16 *)&a2[v4[8]])
      {
        specialized static Data.== infix(_:_:)(*(_QWORD *)&a1[v4[9]], *(_QWORD *)&a1[v4[9] + 8]);
      }
    }
  }
}

uint64_t base witness table accessor for Equatable in ReliableBroadcastPacket.EncryptionInfo()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type ReliableBroadcastPacket.EncryptionInfo and conformance ReliableBroadcastPacket.EncryptionInfo, type metadata accessor for ReliableBroadcastPacket.EncryptionInfo, (uint64_t)&protocol conformance descriptor for ReliableBroadcastPacket.EncryptionInfo);
}

unint64_t lazy protocol witness table accessor for type ReliableBroadcastPacket.Message.Kind and conformance ReliableBroadcastPacket.Message.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReliableBroadcastPacket.Message.Kind and conformance ReliableBroadcastPacket.Message.Kind;
  if (!lazy protocol witness table cache variable for type ReliableBroadcastPacket.Message.Kind and conformance ReliableBroadcastPacket.Message.Kind)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for ReliableBroadcastPacket.Message.Kind, &type metadata for ReliableBroadcastPacket.Message.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReliableBroadcastPacket.Message.Kind and conformance ReliableBroadcastPacket.Message.Kind);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ReliableBroadcastPacket.Message()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type ReliableBroadcastPacket.Message and conformance ReliableBroadcastPacket.Message, type metadata accessor for ReliableBroadcastPacket.Message, (uint64_t)&protocol conformance descriptor for ReliableBroadcastPacket.Message);
}

unint64_t lazy protocol witness table accessor for type ReliableBroadcastPacket.PacketIdentifier and conformance ReliableBroadcastPacket.PacketIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReliableBroadcastPacket.PacketIdentifier and conformance ReliableBroadcastPacket.PacketIdentifier;
  if (!lazy protocol witness table cache variable for type ReliableBroadcastPacket.PacketIdentifier and conformance ReliableBroadcastPacket.PacketIdentifier)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for ReliableBroadcastPacket.PacketIdentifier, &type metadata for ReliableBroadcastPacket.PacketIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReliableBroadcastPacket.PacketIdentifier and conformance ReliableBroadcastPacket.PacketIdentifier);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastPacket(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v25 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v27 = *v7;
      v26 = v7[1];
      outlined copy of Data._Representation(v27, v26);
      *v6 = v27;
      v6[1] = v26;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)v6 = *(_BYTE *)v7;
      v10 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v11 = v10[5];
      v12 = (char *)v6 + v11;
      v13 = (char *)v7 + v11;
      v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v16 = (uint64_t *)&v12[v15];
      v17 = (uint64_t *)&v13[v15];
      v18 = *v17;
      v19 = v17[1];
      outlined copy of Data._Representation(*v17, v19);
      *v16 = v18;
      v16[1] = v19;
      *(_DWORD *)((char *)v6 + v10[6]) = *(_DWORD *)((char *)v7 + v10[6]);
      *(_WORD *)((char *)v6 + v10[7]) = *(_WORD *)((char *)v7 + v10[7]);
      *(_WORD *)((char *)v6 + v10[8]) = *(_WORD *)((char *)v7 + v10[8]);
      v20 = v10[9];
      v21 = (uint64_t *)((char *)v6 + v20);
      v22 = (uint64_t *)((char *)v7 + v20);
      v23 = *v22;
      v24 = v22[1];
      outlined copy of Data._Representation(*v22, v24);
      *v21 = v23;
      v21[1] = v24;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
  }
  return v3;
}

uint64_t destroy for ReliableBroadcastPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result != 1)
      return result;
    v4 = type metadata accessor for ReliableBroadcastPacket.Message(0);
    v5 = v2 + *(int *)(v4 + 20);
    v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    outlined consume of Data._Representation(*(_QWORD *)(v5 + *(int *)(v7 + 20)), *(_QWORD *)(v5 + *(int *)(v7 + 20) + 8));
    v2 += *(int *)(v4 + 36);
  }
  return outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
}

_QWORD *initializeWithCopy for ReliableBroadcastPacket(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v25 = *v6;
    v24 = v6[1];
    outlined copy of Data._Representation(v25, v24);
    *v5 = v25;
    v5[1] = v24;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)v5 = *(_BYTE *)v6;
    v9 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v10 = v9[5];
    v11 = (char *)v5 + v10;
    v12 = (char *)v6 + v10;
    v13 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
    v15 = (uint64_t *)&v11[v14];
    v16 = (uint64_t *)&v12[v14];
    v17 = *v16;
    v18 = v16[1];
    outlined copy of Data._Representation(*v16, v18);
    *v15 = v17;
    v15[1] = v18;
    *(_DWORD *)((char *)v5 + v9[6]) = *(_DWORD *)((char *)v6 + v9[6]);
    *(_WORD *)((char *)v5 + v9[7]) = *(_WORD *)((char *)v6 + v9[7]);
    *(_WORD *)((char *)v5 + v9[8]) = *(_WORD *)((char *)v6 + v9[8]);
    v19 = v9[9];
    v20 = (uint64_t *)((char *)v5 + v19);
    v21 = (uint64_t *)((char *)v6 + v19);
    v22 = *v21;
    v23 = v21[1];
    outlined copy of Data._Representation(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithCopy for ReliableBroadcastPacket(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (_QWORD *)((char *)a1 + v4);
    v6 = (_QWORD *)((char *)a2 + v4);
    outlined destroy of Participant((uint64_t)a1 + v4, type metadata accessor for ReliableBroadcastPacket.PacketType);
    v7 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *v6;
      v24 = v6[1];
      outlined copy of Data._Representation(v25, v24);
      *v5 = v25;
      v5[1] = v24;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)v5 = *(_BYTE *)v6;
      v9 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v10 = v9[5];
      v11 = (char *)v5 + v10;
      v12 = (char *)v6 + v10;
      v13 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      v14 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v15 = (uint64_t *)&v11[v14];
      v16 = (uint64_t *)&v12[v14];
      v17 = *v16;
      v18 = v16[1];
      outlined copy of Data._Representation(*v16, v18);
      *v15 = v17;
      v15[1] = v18;
      *(_DWORD *)((char *)v5 + v9[6]) = *(_DWORD *)((char *)v6 + v9[6]);
      *(_WORD *)((char *)v5 + v9[7]) = *(_WORD *)((char *)v6 + v9[7]);
      *(_WORD *)((char *)v5 + v9[8]) = *(_WORD *)((char *)v6 + v9[8]);
      v19 = v9[9];
      v20 = (uint64_t *)((char *)v5 + v19);
      v21 = (uint64_t *)((char *)v6 + v19);
      v22 = *v21;
      v23 = v21[1];
      outlined copy of Data._Representation(*v21, v23);
      *v20 = v22;
      v20[1] = v23;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

_QWORD *initializeWithTake for ReliableBroadcastPacket(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v5 = *v6;
    v8 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v9 = v8[5];
    v10 = &v5[v9];
    v11 = &v6[v9];
    v12 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v13 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    *(_OWORD *)&v10[*(int *)(v13 + 20)] = *(_OWORD *)&v11[*(int *)(v13 + 20)];
    *(_DWORD *)&v5[v8[6]] = *(_DWORD *)&v6[v8[6]];
    *(_WORD *)&v5[v8[7]] = *(_WORD *)&v6[v8[7]];
    *(_WORD *)&v5[v8[8]] = *(_WORD *)&v6[v8[8]];
    *(_OWORD *)&v5[v8[9]] = *(_OWORD *)&v6[v8[9]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for ReliableBroadcastPacket(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    outlined destroy of Participant((uint64_t)a1 + v4, type metadata accessor for ReliableBroadcastPacket.PacketType);
    v7 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v5 = *v6;
      v8 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v9 = v8[5];
      v10 = &v5[v9];
      v11 = &v6[v9];
      v12 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
      *(_OWORD *)&v10[*(int *)(v13 + 20)] = *(_OWORD *)&v11[*(int *)(v13 + 20)];
      *(_DWORD *)&v5[v8[6]] = *(_DWORD *)&v6[v8[6]];
      *(_WORD *)&v5[v8[7]] = *(_WORD *)&v6[v8[7]];
      *(_WORD *)&v5[v8[8]] = *(_WORD *)&v6[v8[8]];
      *(_OWORD *)&v5[v8[9]] = *(_OWORD *)&v6[v8[9]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EF77A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EF77F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for ReliableBroadcastPacket()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReliableBroadcastPacket.PacketType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastPacket.PacketType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *a2;
      v24 = a2[1];
      outlined copy of Data._Representation(v25, v24);
      *a1 = v25;
      a1[1] = v24;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v9 = v8[5];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v14 = (uint64_t *)&v10[v13];
      v15 = (uint64_t *)&v11[v13];
      v16 = *v15;
      v17 = v15[1];
      outlined copy of Data._Representation(*v15, v17);
      *v14 = v16;
      v14[1] = v17;
      *(_DWORD *)((char *)a1 + v8[6]) = *(_DWORD *)((char *)a2 + v8[6]);
      *(_WORD *)((char *)a1 + v8[7]) = *(_WORD *)((char *)a2 + v8[7]);
      *(_WORD *)((char *)a1 + v8[8]) = *(_WORD *)((char *)a2 + v8[8]);
      v18 = v8[9];
      v19 = (uint64_t *)((char *)a1 + v18);
      v20 = (uint64_t *)((char *)a2 + v18);
      v21 = *v20;
      v22 = v20[1];
      outlined copy of Data._Representation(*v20, v22);
      *v19 = v21;
      v19[1] = v22;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ReliableBroadcastPacket.PacketType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result != 1)
      return result;
    v3 = type metadata accessor for ReliableBroadcastPacket.Message(0);
    v4 = a1 + *(int *)(v3 + 20);
    v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(v6 + 20)), *(_QWORD *)(v4 + *(int *)(v6 + 20) + 8));
    a1 += *(int *)(v3 + 36);
  }
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *initializeWithCopy for ReliableBroadcastPacket.PacketType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v23 = *a2;
    v22 = a2[1];
    outlined copy of Data._Representation(v23, v22);
    *a1 = v23;
    a1[1] = v22;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
    v13 = (uint64_t *)&v9[v12];
    v14 = (uint64_t *)&v10[v12];
    v15 = *v14;
    v16 = v14[1];
    outlined copy of Data._Representation(*v14, v16);
    *v13 = v15;
    v13[1] = v16;
    *(_DWORD *)((char *)a1 + v7[6]) = *(_DWORD *)((char *)a2 + v7[6]);
    *(_WORD *)((char *)a1 + v7[7]) = *(_WORD *)((char *)a2 + v7[7]);
    *(_WORD *)((char *)a1 + v7[8]) = *(_WORD *)((char *)a2 + v7[8]);
    v17 = v7[9];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = *v19;
    v21 = v19[1];
    outlined copy of Data._Representation(*v19, v21);
    *v18 = v20;
    v18[1] = v21;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t *assignWithCopy for ReliableBroadcastPacket.PacketType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for ReliableBroadcastPacket.PacketType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v23 = *a2;
      v22 = a2[1];
      outlined copy of Data._Representation(v23, v22);
      *a1 = v23;
      a1[1] = v22;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
      v13 = (uint64_t *)&v9[v12];
      v14 = (uint64_t *)&v10[v12];
      v15 = *v14;
      v16 = v14[1];
      outlined copy of Data._Representation(*v14, v16);
      *v13 = v15;
      v13[1] = v16;
      *(_DWORD *)((char *)a1 + v7[6]) = *(_DWORD *)((char *)a2 + v7[6]);
      *(_WORD *)((char *)a1 + v7[7]) = *(_WORD *)((char *)a2 + v7[7]);
      *(_WORD *)((char *)a1 + v7[8]) = *(_WORD *)((char *)a2 + v7[8]);
      v17 = v7[9];
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = *v19;
      v21 = v19[1];
      outlined copy of Data._Representation(*v19, v21);
      *v18 = v20;
      v18[1] = v21;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for ReliableBroadcastPacket.PacketType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
    v7 = v6[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    v11 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    *(_OWORD *)&v8[*(int *)(v11 + 20)] = *(_OWORD *)&v9[*(int *)(v11 + 20)];
    *(_DWORD *)&a1[v6[6]] = *(_DWORD *)&a2[v6[6]];
    *(_WORD *)&a1[v6[7]] = *(_WORD *)&a2[v6[7]];
    *(_WORD *)&a1[v6[8]] = *(_WORD *)&a2[v6[8]];
    *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for ReliableBroadcastPacket.PacketType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for ReliableBroadcastPacket.PacketType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
      v7 = v6[5];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      v11 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
      *(_OWORD *)&v8[*(int *)(v11 + 20)] = *(_OWORD *)&v9[*(int *)(v11 + 20)];
      *(_DWORD *)&a1[v6[6]] = *(_DWORD *)&a2[v6[6]];
      *(_WORD *)&a1[v6[7]] = *(_WORD *)&a2[v6[7]];
      *(_WORD *)&a1[v6[8]] = *(_WORD *)&a2[v6[8]];
      *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ReliableBroadcastPacket.PacketType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReliableBroadcastPacket.Message(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.Nonce(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.Nonce(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.Nonce()
{
  return &type metadata for ReliableBroadcastPacket.Nonce;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastPacket.EncryptionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  return a1;
}

uint64_t initializeWithTake for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ReliableBroadcastPacket.EncryptionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.EncryptionInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EF8318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.EncryptionInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EF83B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t type metadata completion function for ReliableBroadcastPacket.EncryptionInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.Heartbeat()
{
  return &type metadata for ReliableBroadcastPacket.Heartbeat;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastPacket.Message(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
    v12 = (uint64_t *)&v8[v11];
    v13 = (uint64_t *)&v9[v11];
    v14 = *v13;
    v15 = v13[1];
    outlined copy of Data._Representation(*v13, v15);
    *v12 = v14;
    v12[1] = v15;
    v16 = a3[7];
    *(_DWORD *)((char *)v4 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    *(_WORD *)((char *)v4 + v16) = *(_WORD *)((char *)a2 + v16);
    v17 = a3[9];
    *(_WORD *)((char *)v4 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (char *)a2 + v17;
    v20 = *(uint64_t *)((char *)a2 + v17);
    v21 = *((_QWORD *)v19 + 1);
    outlined copy of Data._Representation(v20, v21);
    *v18 = v20;
    v18[1] = v21;
  }
  return v4;
}

uint64_t destroy for ReliableBroadcastPacket.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(v6 + 20)), *(_QWORD *)(v4 + *(int *)(v6 + 20) + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 36)), *(_QWORD *)(a1 + *(int *)(a2 + 36) + 8));
}

_BYTE *initializeWithCopy for ReliableBroadcastPacket.Message(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
  v11 = (uint64_t *)&v7[v10];
  v12 = (uint64_t *)&v8[v10];
  v13 = *v12;
  v14 = v12[1];
  outlined copy of Data._Representation(*v12, v14);
  *v11 = v13;
  v11[1] = v14;
  v15 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  *(_WORD *)&a1[v15] = *(_WORD *)&a2[v15];
  v16 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  v17 = (uint64_t *)&a1[v16];
  v18 = *(_QWORD *)&a2[v16];
  v19 = *(_QWORD *)&a2[v16 + 8];
  outlined copy of Data._Representation(v18, v19);
  *v17 = v18;
  v17[1] = v19;
  return a1;
}

_BYTE *assignWithCopy for ReliableBroadcastPacket.Message(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
  v11 = (uint64_t *)&v7[v10];
  v12 = (uint64_t *)&v8[v10];
  v13 = *v12;
  v14 = v12[1];
  outlined copy of Data._Representation(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  outlined consume of Data._Representation(v15, v16);
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  *(_WORD *)&a1[a3[7]] = *(_WORD *)&a2[a3[7]];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  v17 = a3[9];
  v18 = (uint64_t *)&a1[v17];
  v19 = (uint64_t *)&a2[v17];
  v20 = *v19;
  v21 = v19[1];
  outlined copy of Data._Representation(*v19, v21);
  v22 = *v18;
  v23 = v18[1];
  *v18 = v20;
  v18[1] = v21;
  outlined consume of Data._Representation(v22, v23);
  return a1;
}

_BYTE *initializeWithTake for ReliableBroadcastPacket.Message(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  *(_OWORD *)&v7[*(int *)(v10 + 20)] = *(_OWORD *)&v8[*(int *)(v10 + 20)];
  v11 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  *(_WORD *)&a1[v11] = *(_WORD *)&a2[v11];
  v12 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

_BYTE *assignWithTake for ReliableBroadcastPacket.Message(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20);
  v11 = *(_QWORD *)&v7[v10];
  v12 = *(_QWORD *)&v7[v10 + 8];
  *(_OWORD *)&v7[v10] = *(_OWORD *)&v8[v10];
  outlined consume of Data._Representation(v11, v12);
  v13 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  *(_WORD *)&a1[v13] = *(_WORD *)&a2[v13];
  v14 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  v15 = *(_QWORD *)&a1[v14];
  v16 = *(_QWORD *)&a1[v14 + 8];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  outlined consume of Data._Representation(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.Message()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EF8954(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.Message()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1A0EF89D4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ReliableBroadcastPacket.Message()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.Message.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EF8B2C + 4 * byte_1A0F17C4D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EF8B60 + 4 * byte_1A0F17C48[v4]))();
}

uint64_t sub_1A0EF8B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EF8B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EF8B70);
  return result;
}

uint64_t sub_1A0EF8B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EF8B84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EF8B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EF8B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.Message.Kind()
{
  return &type metadata for ReliableBroadcastPacket.Message.Kind;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastPacket.UnreliableMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ReliableBroadcastPacket.UnreliableMessage(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for ReliableBroadcastPacket.UnreliableMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ReliableBroadcastPacket.UnreliableMessage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.UnreliableMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.UnreliableMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.UnreliableMessage()
{
  return &type metadata for ReliableBroadcastPacket.UnreliableMessage;
}

_QWORD *__swift_memcpy14_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.NegativeAcknowledgement(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 14))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.NegativeAcknowledgement(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 14) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.NegativeAcknowledgement()
{
  return &type metadata for ReliableBroadcastPacket.NegativeAcknowledgement;
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastPacket.PacketIdentifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastPacket.PacketIdentifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 6) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReliableBroadcastPacket.PacketIdentifier()
{
  return &type metadata for ReliableBroadcastPacket.PacketIdentifier;
}

void AVPlaybackCoordinator.coordinateWithSession<A>(_:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = *a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for playback != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v44[2] = __swift_project_value_buffer(v12, (uint64_t)static Logger.playback);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A0DB3000, v13, v14, "coordinateWithSession called", v15, 2u);
    MEMORY[0x1A1B05CC4](v15, -1, -1);
  }

  v16 = (uint64_t *)((char *)a1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  if (!*v16)
  {
    type metadata accessor for GroupSessionMessenger();
    v18 = swift_retain();
    v19 = GroupSessionMessenger.__allocating_init<A>(session:)(v18);
    v20 = (uint64_t *)((char *)a1 + direct field offset for GroupSession.playbackSyncMessenger);
    swift_beginAccess();
    *v20 = v19;
    swift_retain();
    swift_release();
    v44[1] = type metadata accessor for PlaybackSyncer(0);
    v21 = *(void **)((char *)a1 + *(_QWORD *)(*a1 + 288));
    GroupSession.localParticipant.getter((uint64_t)v11);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    v22 = v2;
    v23 = v21;
    outlined destroy of Participant((uint64_t)v11);
    PlaybackSyncer.__allocating_init(coordinator:serialQueue:localParticipantUUID:)(v22, v23, (uint64_t)v8);
    v24 = *(_QWORD *)(v4 + 88);
    v46 = *(_QWORD *)(v4 + 80);
    v47 = v46;
    v48 = v24;
    v49 = v24;
    type metadata accessor for GroupSession.GroupSessionPlaybackSyncerLink();
  }
  v17 = *(_QWORD *)(*v16 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer);
  GroupSession.localParticipant.getter((uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  swift_retain();
  outlined destroy of Participant((uint64_t)v11);
  (*(void (**)(void *, char *))(*(_QWORD *)v17 + 496))(v2, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  objc_opt_self();
  v25 = swift_dynamicCastObjCClass();
  if (v25)
  {
    v26 = (void *)v25;
    v27 = v2;
    v28 = objc_msgSend(v26, sel_player);
    if (v28)
    {
      v29 = v28;
      v30 = UUID.uuidString.getter();
      v31 = (void *)MEMORY[0x1A1B048B4](v30);
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_setBackgroundPIPAuthorizationToken_, v31);

    }
    swift_retain_n();
    v32 = v27;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v45 = v36;
      *(_DWORD *)v35 = 136315394;
      v46 = UUID.uuidString.getter();
      v47 = v37;
      v38 = String.init<A>(reflecting:)();
      v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      v40 = objc_msgSend(v26, sel_player);
      if (v40)
      {
        v46 = (uint64_t)v40;
        type metadata accessor for AVPlayer();
        v41 = String.init<A>(reflecting:)();
        v43 = v42;
      }
      else
      {
        v43 = 0xE300000000000000;
        v41 = 7104878;
      }
      v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v33, v34, "Setting session identifier %s on %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v36, -1, -1);
      MEMORY[0x1A1B05CC4](v35, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

unint64_t type metadata accessor for AVPlayer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AVPlayer;
  if (!lazy cache variable for type metadata for AVPlayer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AVPlayer);
  }
  return result;
}

id AppCapabilities.task.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___GPAppCapabilities_task);
}

id AppCapabilities.managedConfigurationObserver.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver;
  v2 = *(void **)(v0 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CPManagedConfigurationObserver()), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void AppCapabilities.managedConfigurationObserver.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver);
  *(_QWORD *)(v1 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver) = a1;

}

void (*AppCapabilities.managedConfigurationObserver.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = AppCapabilities.managedConfigurationObserver.getter();
  return AppCapabilities.managedConfigurationObserver.modify;
}

void AppCapabilities.managedConfigurationObserver.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver);
  *(_QWORD *)(v1 + OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver) = v2;

}

uint64_t AppCapabilities.supportsSharePlay.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for Entitlement();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsSharePlay;
  v7 = *(unsigned __int8 *)(v0 + OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsSharePlay);
  if (v7 != 2)
    return v7 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0D149A0], v2);
  v8 = specialized SecTaskRef.value<A>(_:forEntitlement:)((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = v8 & 1;
  *(_BYTE *)(v1 + v6) = v8 & 1;
  return result;
}

uint64_t AppCapabilities.supportsStartFromApp.getter()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char v6;

  v1 = OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsStartFromApp;
  v2 = *((unsigned __int8 *)v0 + OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsStartFromApp);
  if (v2 == 2)
  {
    v3 = v0;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))() & 1) != 0)
    {
      v5 = (void *)(*(uint64_t (**)(void))((*v4 & *v0) + 0x70))();
      v6 = dispatch thunk of CPManagedConfigurationObserver.allowed.getter();

    }
    else
    {
      v6 = 0;
    }
    *((_BYTE *)v3 + v1) = v6 & 1;
  }
  else
  {
    v6 = v2 & 1;
  }
  return v6 & 1;
}

id AppCapabilities.__allocating_init(auditToken:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return AppCapabilities.init(auditToken:)(a1, a2, a3, a4);
}

id AppCapabilities.init(auditToken:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  SecTaskRef v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  objc_super v30;
  uint64_t v31;
  audit_token_t token;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = HIDWORD(a1);
  v29 = HIDWORD(a2);
  v10 = HIDWORD(a3);
  v11 = HIDWORD(a4);
  v12 = OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver;
  *(_QWORD *)&v4[OBJC_IVAR___GPAppCapabilities____lazy_storage___managedConfigurationObserver] = 0;
  v4[OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsSharePlay] = 2;
  v4[OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsStartFromApp] = 2;
  v13 = v4;
  token.val[0] = v8;
  token.val[1] = v9;
  token.val[2] = v7;
  token.val[3] = v29;
  token.val[4] = v6;
  token.val[5] = v10;
  token.val[6] = v5;
  token.val[7] = v11;
  v14 = SecTaskCreateWithAuditToken(0, &token);
  if (v14)
  {
    *(_QWORD *)&v13[OBJC_IVAR___GPAppCapabilities_task] = v14;

    v30.receiver = v13;
    v30.super_class = (Class)type metadata accessor for AppCapabilities();
    return objc_msgSendSuper2(&v30, sel_init);
  }
  else
  {
    v26 = v5;
    v27 = v4;
    v25 = v6;
    v28 = v12;
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    v19 = v13;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v31 = v21;
      *(_DWORD *)v20 = 136315138;
      token.val[0] = v8;
      token.val[1] = v9;
      token.val[2] = v7;
      token.val[3] = v29;
      token.val[4] = v25;
      token.val[5] = v10;
      token.val[6] = v26;
      token.val[7] = v11;
      type metadata accessor for audit_token_t(0);
      v22 = String.init<A>(reflecting:)();
      *(_QWORD *)token.val = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "Failed to create SecTask with auditToken %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v21, -1, -1);
      MEMORY[0x1A1B05CC4](v20, -1, -1);

    }
    else
    {

    }
    v24 = *(void **)&v27[v28];

    type metadata accessor for AppCapabilities();
    swift_deallocPartialClassInstance();
    return 0;
  }
}

id AppCapabilities.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AppCapabilities.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AppCapabilities.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppCapabilities();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AppCapabilities()
{
  return objc_opt_self();
}

uint64_t sub_1A0EF9AD8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EF9B18(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x78))(*a1);
}

uint64_t sub_1A0EF9B58@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x88))();
  *a2 = result & 1;
  return result;
}

_BYTE *sub_1A0EF9B9C(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsSharePlay) = *result;
  return result;
}

uint64_t sub_1A0EF9BB4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
  *a2 = result & 1;
  return result;
}

_BYTE *sub_1A0EF9BF8(_BYTE *result, _QWORD *a2)
{
  *(_BYTE *)(*a2 + OBJC_IVAR___GPAppCapabilities____lazy_storage___supportsStartFromApp) = *result;
  return result;
}

uint64_t method lookup function for AppCapabilities()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppCapabilities.managedConfigurationObserver.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AppCapabilities.managedConfigurationObserver.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AppCapabilities.managedConfigurationObserver.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AppCapabilities.supportsSharePlay.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AppCapabilities.supportsStartFromApp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AppCapabilities.__allocating_init(auditToken:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t Conversation.__allocating_init(sessionContainer:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v3 = type metadata accessor for UUID();
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v13 - v7;
  v9 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = objc_msgSend(a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = (*(uint64_t (**)(char *, char *))(v1 + 368))(v8, v6);
  swift_retain();
  Conversation.update(with:)(a1);
  swift_release();

  return v11;
}

Swift::Int specialized InternalGroupSessionProvider.groupSessions(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivitySession();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x1E0DEE9E8];
    v24 = MEMORY[0x1E0DEE9E8];
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      v22 = v2;
      do
      {
        swift_dynamicCast();
        if (objc_msgSend(v23, sel_state) && objc_msgSend(v23, sel_state) != (id)1)
        {

        }
        else
        {
          v7 = v24;
          v8 = *(_QWORD *)(v24 + 16);
          if (*(_QWORD *)(v24 + 24) <= v8)
          {
            specialized _NativeSet.resize(capacity:)(v8 + 1);
            v7 = v24;
          }
          result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
          v10 = v7 + 56;
          v11 = -1 << *(_BYTE *)(v7 + 32);
          v12 = result & ~v11;
          v13 = v12 >> 6;
          if (((-1 << v12) & ~*(_QWORD *)(v7 + 56 + 8 * (v12 >> 6))) != 0)
          {
            v14 = __clz(__rbit64((-1 << v12) & ~*(_QWORD *)(v7 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v15 = 0;
            v16 = (unint64_t)(63 - v11) >> 6;
            do
            {
              if (++v13 == v16 && (v15 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v17 = v13 == v16;
              if (v13 == v16)
                v13 = 0;
              v15 |= v17;
              v18 = *(_QWORD *)(v10 + 8 * v13);
            }
            while (v18 == -1);
            v14 = __clz(__rbit64(~v18)) + (v13 << 6);
          }
          *(_QWORD *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v23;
          ++*(_QWORD *)(v7 + 16);
        }
      }
      while (__CocoaSet.Iterator.next()());
      v6 = v24;
      v2 = v22;
    }
    swift_release();
  }
  else
  {
    v6 = specialized _NativeSet.filter(_:)(v5);
  }
  v19 = a1;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v6, v19, v2);
  v21 = v20;
  swift_release();

  swift_release();
  return v21;
}

{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivitySession();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x1E0DEE9E8];
    v24 = MEMORY[0x1E0DEE9E8];
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      v22 = v2;
      do
      {
        swift_dynamicCast();
        if (objc_msgSend(v23, sel_state) && objc_msgSend(v23, sel_state) != (id)1)
        {

        }
        else
        {
          v7 = v24;
          v8 = *(_QWORD *)(v24 + 16);
          if (*(_QWORD *)(v24 + 24) <= v8)
          {
            specialized _NativeSet.resize(capacity:)(v8 + 1);
            v7 = v24;
          }
          result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
          v10 = v7 + 56;
          v11 = -1 << *(_BYTE *)(v7 + 32);
          v12 = result & ~v11;
          v13 = v12 >> 6;
          if (((-1 << v12) & ~*(_QWORD *)(v7 + 56 + 8 * (v12 >> 6))) != 0)
          {
            v14 = __clz(__rbit64((-1 << v12) & ~*(_QWORD *)(v7 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v15 = 0;
            v16 = (unint64_t)(63 - v11) >> 6;
            do
            {
              if (++v13 == v16 && (v15 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v17 = v13 == v16;
              if (v13 == v16)
                v13 = 0;
              v15 |= v17;
              v18 = *(_QWORD *)(v10 + 8 * v13);
            }
            while (v18 == -1);
            v14 = __clz(__rbit64(~v18)) + (v13 << 6);
          }
          *(_QWORD *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v23;
          ++*(_QWORD *)(v7 + 16);
        }
      }
      while (__CocoaSet.Iterator.next()());
      v6 = v24;
      v2 = v22;
    }
    swift_release();
  }
  else
  {
    v6 = specialized _NativeSet.filter(_:)(v5);
  }
  v19 = a1;
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v6, v19, v2);
  v21 = v20;
  swift_release();

  swift_release();
  return v21;
}

BOOL static Conversation.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Conversation.State.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Conversation.State.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Conversation.id.getter@<X0>(uint64_t a1@<X8>)
{
  return Conversation.id.getter(&OBJC_IVAR____TtC15GroupActivities12Conversation_id, a1);
}

_QWORD *key path getter for Conversation.state : Conversation@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for Conversation.state : Conversation()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t Conversation.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t Conversation.$state.getter()
{
  return Conversation.$state.getter((uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__state, &demangling cache variable for type metadata for Published<Conversation.State>);
}

uint64_t key path setter for Conversation.id : Conversation(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = *a2 + *a5;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v12, v11, v8);
  return swift_endAccess();
}

uint64_t Conversation.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return Conversation.id.getter(&OBJC_IVAR____TtC15GroupActivities12Conversation_groupUUID, a1);
}

uint64_t Conversation.id.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  swift_beginAccess();
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t key path getter for Conversation.activeParticipants : Conversation@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t key path setter for Conversation.activeParticipants : Conversation()
{
  return key path setter for Conversation.activeParticipants : Conversation();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t Conversation.activeParticipants.getter()
{
  return Conversation.activeParticipants.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t Conversation.$activeParticipants.getter()
{
  return Conversation.$state.getter((uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__activeParticipants, &demangling cache variable for type metadata for Published<Set<Participant>>);
}

uint64_t key path getter for Conversation.localParticipantIdentifier : Conversation@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t key path setter for Conversation.localParticipantIdentifier : Conversation()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t Conversation.localParticipantIdentifier.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t Conversation.$localParticipantIdentifier.getter()
{
  return Conversation.$state.getter((uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__localParticipantIdentifier, &demangling cache variable for type metadata for Published<UInt64>);
}

uint64_t key path setter for Conversation.activitySessions : Conversation()
{
  return key path setter for Conversation.activeParticipants : Conversation();
}

uint64_t Conversation.activitySessions.getter()
{
  return Conversation.activeParticipants.getter();
}

uint64_t key path setter for Conversation.$state : Conversation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v18 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v18 - v14, a1, v9);
  v16(v13, (uint64_t)v15, v9);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t Conversation.$activitySessions.getter()
{
  return Conversation.$state.getter((uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__activitySessions, &demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>);
}

uint64_t Conversation.$state.getter(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t Conversation.__allocating_init(identifier:groupUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  Conversation.init(identifier:groupUUID:)(a1, a2);
  return v4;
}

uint64_t Conversation.init(identifier:groupUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a1;
  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64>);
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Conversation.State>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v2 + OBJC_IVAR____TtC15GroupActivities12Conversation__state;
  LOBYTE(v32) = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  v18 = v2 + OBJC_IVAR____TtC15GroupActivities12Conversation__activeParticipants;
  v32 = MEMORY[0x1E0DEE9E8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18, v12, v9);
  v19 = v2 + OBJC_IVAR____TtC15GroupActivities12Conversation__localParticipantIdentifier;
  v32 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v19, v8, v27);
  v20 = v2 + OBJC_IVAR____TtC15GroupActivities12Conversation__activitySessions;
  v32 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v20, v5, v29);
  v21 = v2 + OBJC_IVAR____TtC15GroupActivities12Conversation_id;
  v22 = type metadata accessor for UUID();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v23(v21, v30, v22);
  v23(v2 + OBJC_IVAR____TtC15GroupActivities12Conversation_groupUUID, v31, v22);
  return v2;
}

uint64_t Conversation.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation_id;
  v2 = type metadata accessor for UUID();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v4 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__state;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Conversation.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v3(v0 + OBJC_IVAR____TtC15GroupActivities12Conversation_groupUUID, v2);
  v6 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__activeParticipants;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__localParticipantIdentifier;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__activitySessions;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return v0;
}

uint64_t Conversation.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation_id;
  v2 = type metadata accessor for UUID();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v4 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__state;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Conversation.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v3(v0 + OBJC_IVAR____TtC15GroupActivities12Conversation_groupUUID, v2);
  v6 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__activeParticipants;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__localParticipantIdentifier;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC15GroupActivities12Conversation__activitySessions;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance Conversation()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t Conversation.addActivitySession(newSession:)()
{
  void (*v0)(uint64_t *, _QWORD);
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  v0 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
  v2 = v1;
  MEMORY[0x1A1B049B0]();
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v0(&v4, 0);
  swift_release();
  return swift_release();
}

unint64_t Conversation.State.init(tuConversationState:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  if (result >= 5)
    v2 = 0;
  else
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t Conversation.update(with:)(void *a1)
{
  objc_msgSend(a1, sel_state);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  objc_msgSend(a1, sel_localParticipantIdentifier);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  if (one-time initialization token for shared != -1)
    swift_once();
  specialized InternalGroupSessionProvider.groupSessions(for:)(a1);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

_QWORD *sub_1A0EFB158@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A0EFB19C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EFB1D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0EFB204@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Conversation.State and conformance Conversation.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Conversation.State and conformance Conversation.State;
  if (!lazy protocol witness table cache variable for type Conversation.State and conformance Conversation.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Conversation.State, &type metadata for Conversation.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Conversation.State and conformance Conversation.State);
  }
  return result;
}

uint64_t sub_1A0EFB280(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
}

uint64_t sub_1A0EFB2A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.id : Conversation(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities12Conversation_id);
}

uint64_t sub_1A0EFB2C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
}

uint64_t sub_1A0EFB2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.$state : Conversation(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Conversation.State>.Publisher, (uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__state, &demangling cache variable for type metadata for Published<Conversation.State>);
}

uint64_t sub_1A0EFB318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
}

uint64_t sub_1A0EFB340(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.id : Conversation(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities12Conversation_groupUUID);
}

uint64_t sub_1A0EFB35C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
}

uint64_t sub_1A0EFB384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.$state : Conversation(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, (uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__activeParticipants, &demangling cache variable for type metadata for Published<Set<Participant>>);
}

uint64_t sub_1A0EFB3B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
}

uint64_t sub_1A0EFB3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.$state : Conversation(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<UInt64>.Publisher, (uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__localParticipantIdentifier, &demangling cache variable for type metadata for Published<UInt64>);
}

uint64_t sub_1A0EFB404(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
}

uint64_t sub_1A0EFB42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Conversation.$state : Conversation(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>.Publisher, (uint64_t)&OBJC_IVAR____TtC15GroupActivities12Conversation__activitySessions, &demangling cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>);
}

uint64_t ObjC metadata update function for Conversation()
{
  return type metadata accessor for Conversation();
}

uint64_t method lookup function for Conversation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Conversation.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Conversation.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Conversation.$state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of Conversation.groupUUID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Conversation.activeParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Conversation.$activeParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of Conversation.localParticipantIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of Conversation.$localParticipantIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of Conversation.activitySessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of Conversation.$activitySessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of Conversation.__allocating_init(identifier:groupUUID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t storeEnumTagSinglePayload for Conversation.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0EFB538 + 4 * byte_1A0F1809D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0EFB56C + 4 * byte_1A0F18098[v4]))();
}

uint64_t sub_1A0EFB56C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFB574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EFB57CLL);
  return result;
}

uint64_t sub_1A0EFB588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EFB590);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0EFB594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFB59C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Conversation.State()
{
  return &type metadata for Conversation.State;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t);
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t, uint64_t);
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[11];
  uint64_t v59;

  v4 = v3;
  v51 = a3;
  v7 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v7);
  v56 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivitySession();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    a1 = v58[5];
    v49 = v58[6];
    v9 = v58[7];
    v10 = v58[8];
    v11 = v58[9];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 56);
    v49 = a1 + 56;
    v14 = ~v12;
    v15 = -v12;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v11 = v16 & v13;
    swift_bridgeObjectRetain();
    v9 = v14;
    v10 = 0;
  }
  v47 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v45 = v9;
  v48 = (unint64_t)(v9 + 64) >> 6;
  v46 = MEMORY[0x1E0DEE9B0] + 8;
  v50 = a1;
  while (a1 < 0)
  {
    v20 = __CocoaSet.Iterator.next()();
    if (!v20)
      goto LABEL_44;
    v57 = v20;
    type metadata accessor for TUConversationActivitySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v21 = (id)v58[0];
    swift_unknownObjectRelease();
    v19 = v10;
    v17 = v11;
    if (!v21)
      goto LABEL_44;
LABEL_28:
    v24 = objc_msgSend(a2, sel_groupUUID, v45, v46, v47);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v25 = objc_msgSend(a2, sel_initiator);
    if (v25)
    {
      v26 = v25;
      v27 = objc_msgSend(v25, sel_value);

      v28 = (void (*)(char *, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v29;
      v53 = v28;

    }
    else
    {
      v52 = (void (*)(char *, uint64_t, uint64_t))0xE000000000000000;
      v53 = 0;
    }
    v30 = objc_msgSend(a2, sel_localParticipantIdentifier);
    v31 = objc_msgSend(a2, sel_localMember);
    v54 = v17;
    v55 = v19;
    if (v31)
    {
      v32 = v31;
      v33 = v4;
      v34 = objc_msgSend(v31, sel_handle);

      v35 = objc_msgSend(v34, sel_value);
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v37;

    }
    else
    {
      v33 = v4;
      v36 = 0;
      v38 = 0xE000000000000000;
    }
    v39 = a2;
    v40 = objc_msgSend(a2, sel_unreliableMessengerConfig);
    v41 = v51;
    v42 = (*(uint64_t (**)(void))(*(_QWORD *)v51 + 280))();
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v41 + 304))(v58);
    v43 = v21;
    specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(v43, v56, v53, v52, (uint64_t)v30, v36, v38, v40, v42, (uint64_t)v58);
    v4 = v33;
    if (v33)
    {

      v4 = 0;
    }
    else
    {

      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v11 = v54;
    v10 = v55;
    a1 = v50;
    a2 = v39;
  }
  if (v11)
  {
    v17 = (v11 - 1) & v11;
    v18 = __clz(__rbit64(v11)) | (v10 << 6);
    v19 = v10;
LABEL_27:
    v21 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
    if (!v21)
      goto LABEL_44;
    goto LABEL_28;
  }
  v19 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v19 >= v48)
      goto LABEL_44;
    v22 = *(_QWORD *)(v49 + 8 * v19);
    if (!v22)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v48)
        goto LABEL_44;
      v22 = *(_QWORD *)(v49 + 8 * v23);
      if (v22)
        goto LABEL_25;
      v23 = v10 + 3;
      if (v10 + 3 >= v48)
        goto LABEL_44;
      v22 = *(_QWORD *)(v49 + 8 * v23);
      if (v22)
        goto LABEL_25;
      v23 = v10 + 4;
      if (v10 + 4 >= v48)
        goto LABEL_44;
      v22 = *(_QWORD *)(v49 + 8 * v23);
      if (v22)
      {
LABEL_25:
        v19 = v23;
      }
      else
      {
        v19 = v10 + 5;
        if (v10 + 5 >= v48)
          goto LABEL_44;
        v22 = *(_QWORD *)(v49 + 8 * v19);
        if (!v22)
        {
          v44 = v10 + 6;
          while (v48 != v44)
          {
            v22 = *(_QWORD *)(v49 + 8 * v44++);
            if (v22)
            {
              v19 = v44 - 1;
              goto LABEL_26;
            }
          }
LABEL_44:
          outlined consume of [AnyHashable : Any].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    v17 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v19 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t);
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  _QWORD v58[11];
  uint64_t v59;

  v4 = v3;
  v52 = a3;
  v56 = a2;
  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6);
  v55 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivitySession();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    a1 = v58[5];
    v49 = v58[6];
    v8 = v58[7];
    v9 = v58[8];
    v10 = v58[9];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    v49 = a1 + 56;
    v13 = ~v11;
    v14 = -v11;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v10 = v15 & v12;
    swift_bridgeObjectRetain();
    v8 = v13;
    v9 = 0;
  }
  v47 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v45 = v8;
  v48 = (unint64_t)(v8 + 64) >> 6;
  v51 = v52 + 152;
  v46 = MEMORY[0x1E0DEE9B0] + 8;
  v50 = a1;
  while (a1 < 0)
  {
    v19 = __CocoaSet.Iterator.next()();
    if (!v19)
      goto LABEL_44;
    v57 = v19;
    type metadata accessor for TUConversationActivitySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v20 = (id)v58[0];
    swift_unknownObjectRelease();
    v18 = v9;
    v16 = v10;
    if (!v20)
      goto LABEL_44;
LABEL_28:
    v23 = v20;
    v24 = v56;
    v25 = objc_msgSend(v56, sel_groupUUID, v45, v46, v47);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = objc_msgSend(v24, sel_initiator);
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, sel_value);

      v29 = (void (*)(char *, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = (void (*)(char *, uint64_t, uint64_t))0xE000000000000000;
    }
    v32 = v56;
    v33 = objc_msgSend(v56, sel_localParticipantIdentifier);
    v34 = objc_msgSend(v32, sel_localMember);
    v53 = v16;
    v54 = v18;
    if (v34)
    {
      v35 = v34;
      v36 = v4;
      v37 = objc_msgSend(v34, sel_handle);

      v38 = objc_msgSend(v37, sel_value);
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v40;

    }
    else
    {
      v36 = v4;
      v39 = 0;
      v41 = 0xE000000000000000;
    }
    v42 = objc_msgSend(v56, sel_unreliableMessengerConfig);
    v43 = BackgroundGroupSessionManager.topicManager.getter();
    outlined init with copy of AudioSessionAssertionManager(v51, (uint64_t)v58);
    specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(v23, v55, v29, v31, (uint64_t)v33, v39, v41, v42, v43, (uint64_t)v58);
    v4 = v36;
    if (v36)
    {

      v4 = 0;
    }
    else
    {

      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v10 = v53;
    v9 = v54;
    a1 = v50;
  }
  if (v10)
  {
    v16 = (v10 - 1) & v10;
    v17 = __clz(__rbit64(v10)) | (v9 << 6);
    v18 = v9;
LABEL_27:
    v20 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
    if (!v20)
      goto LABEL_44;
    goto LABEL_28;
  }
  v18 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v18 >= v48)
      goto LABEL_44;
    v21 = *(_QWORD *)(v49 + 8 * v18);
    if (!v21)
    {
      v22 = v9 + 2;
      if (v9 + 2 >= v48)
        goto LABEL_44;
      v21 = *(_QWORD *)(v49 + 8 * v22);
      if (v21)
        goto LABEL_25;
      v22 = v9 + 3;
      if (v9 + 3 >= v48)
        goto LABEL_44;
      v21 = *(_QWORD *)(v49 + 8 * v22);
      if (v21)
        goto LABEL_25;
      v22 = v9 + 4;
      if (v9 + 4 >= v48)
        goto LABEL_44;
      v21 = *(_QWORD *)(v49 + 8 * v22);
      if (v21)
      {
LABEL_25:
        v18 = v22;
      }
      else
      {
        v18 = v9 + 5;
        if (v9 + 5 >= v48)
          goto LABEL_44;
        v21 = *(_QWORD *)(v49 + 8 * v18);
        if (!v21)
        {
          v44 = v9 + 6;
          while (v48 != v44)
          {
            v21 = *(_QWORD *)(v49 + 8 * v44++);
            if (v21)
            {
              v18 = v44 - 1;
              goto LABEL_26;
            }
          }
LABEL_44:
          outlined consume of [AnyHashable : Any].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    v16 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v18 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

unint64_t static URLActivity.activityIdentifier.getter()
{
  return 0xD000000000000028;
}

uint64_t URLActivity.webpageURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t URLActivity.webpageURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*URLActivity.webpageURL.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t URLActivity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for generic != -1)
    swift_once();
  v3 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v4 = __swift_project_value_buffer(v3, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v4, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
  v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v6 = (_QWORD *)(a1 + v5[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a1 + v5[6]);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)(a1 + v5[7]) = 0;
  v8 = a1 + v5[8];
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v8, 1, 1, v9);
  *(_QWORD *)(a1 + v5[9]) = 0;
  *(_BYTE *)(a1 + v5[10]) = dyld_program_sdk_at_least() ^ 1;
  v16(a1 + v5[11], 1, 1, v9);
  v11 = v5[12];
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = a1 + v11;
  v13 = qword_1ED0B5BF8;
  v14 = qword_1ED0B5C10;
  *(_BYTE *)v12 = static SceneAssociationBehavior.default;
  *(_QWORD *)(v12 + 8) = v13;
  *(_OWORD *)(v12 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(v12 + 32) = v14;
  *(_BYTE *)(a1 + v5[13]) = 0;
  *(_QWORD *)(a1 + v5[14]) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of URL?(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v1, v9);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v16)(v8, 0, 1, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLActivity.CodingKeys()
{
  return 0x5565676170626577;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x5565676170626577 && a2 == 0xEA00000000004C52)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLActivity.CodingKeys()
{
  lazy protocol witness table accessor for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLActivity.CodingKeys()
{
  lazy protocol witness table accessor for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t URLActivity.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t URLActivity.init(webpageURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

unint64_t protocol witness for static GroupActivity.activityIdentifier.getter in conformance URLActivity()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance URLActivity(uint64_t a1)
{
  uint64_t v1;

  URLActivity.metadata.getter(a1);
  return protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t static URLActivity._identifiable(by:)()
{
  return 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance URLActivity(_QWORD *a1)
{
  return URLActivity.init(from:)(a1);
}

uint64_t URLActivity.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for DecodingError();
  swift_allocError();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v4 = type metadata accessor for URLActivity();
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1A1B05460](v5, v6);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLActivity(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t URLActivity.init(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(type metadata accessor for AnyGroupActivity(0) + 20);
  v28 = a1;
  outlined init with copy of Participant(a1 + v16, (uint64_t)v12, type metadata accessor for AnyGroupActivity.MetadataProvider);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of Participant((uint64_t)v12, type metadata accessor for AnyGroupActivity.MetadataProvider);
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v19 = v13;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
    swift_willThrow();
    v20 = type metadata accessor for AnyGroupActivity;
    v21 = v28;
    return outlined destroy of Participant(v21, v20);
  }
  outlined init with take of GroupActivityMetadata((uint64_t)v12, (uint64_t)v15);
  outlined init with copy of URL?((uint64_t)&v15[*(int *)(v13 + 32)], (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of URL?((uint64_t)v5);
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v24 = v6;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC460], v22);
    swift_willThrow();
    outlined destroy of Participant(v28, type metadata accessor for AnyGroupActivity);
    v20 = type metadata accessor for GroupActivityMetadata;
    v21 = (uint64_t)v15;
    return outlined destroy of Participant(v21, v20);
  }
  outlined destroy of Participant(v28, type metadata accessor for AnyGroupActivity);
  outlined destroy of Participant((uint64_t)v15, type metadata accessor for GroupActivityMetadata);
  v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v26(v9, v5, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v27, v9, v6);
}

uint64_t protocol witness for CustomGroupActivityDecodable.init(activity:) in conformance URLActivity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return URLActivity.init(activity:)(a1, a2);
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for URLActivity.CodingKeys, &unk_1E44F7C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for URLActivity.CodingKeys, &unk_1E44F7C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for URLActivity.CodingKeys, &unk_1E44F7C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for URLActivity.CodingKeys, &unk_1E44F7C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLActivity.CodingKeys and conformance URLActivity.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for URLActivity()
{
  uint64_t result;

  result = type metadata singleton initialization cache for URLActivity;
  if (!type metadata singleton initialization cache for URLActivity)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t instantiation function for generic protocol witness table for URLActivity(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URLActivity and conformance URLActivity, (uint64_t (*)(uint64_t))type metadata accessor for URLActivity, (uint64_t)&protocol conformance descriptor for URLActivity);
  result = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URLActivity and conformance URLActivity, (uint64_t (*)(uint64_t))type metadata accessor for URLActivity, (uint64_t)&protocol conformance descriptor for URLActivity);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for URLActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for URLActivity(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for URLActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for URLActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for URLActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for URLActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLActivity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EFCDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for URLActivity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0EFCE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for URLActivity()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for URLActivity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0EFCF04 + 4 * byte_1A0F182AC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0EFCF24 + 4 * byte_1A0F182B1[v4]))();
}

_BYTE *sub_1A0EFCF04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0EFCF24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EFCF2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EFCF34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0EFCF3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0EFCF44(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for URLActivity.CodingKeys()
{
  return &unk_1E44F7C10;
}

uint64_t Log.systemCoordinator.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for systemCoordinator, (uint64_t)static Log.systemCoordinator);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[4];
  _QWORD v5[2];

  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEA968], v2, (uint64_t)v5);
  if (v5[1])
    return v5[0];
  else
    return 7104878;
}

uint64_t Log.default.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for default, (uint64_t)static Log.default);
}

uint64_t Log.systemCoordinator.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t Logger.runtimeIssues.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for runtimeIssues, (uint64_t)static Logger.runtimeIssues);
}

uint64_t Logger.client.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for client, (uint64_t)static Logger.client);
}

uint64_t Logger.playback.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for playback, (uint64_t)static Logger.playback);
}

uint64_t Log.groupSessionProviderObserver.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for groupSessionProviderObserver, (uint64_t)static Log.groupSessionProviderObserver);
}

uint64_t Log.reliableBroadcast.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for reliableBroadcast, (uint64_t)static Log.reliableBroadcast);
}

uint64_t Log.groupSessionProvider.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for groupSessionProvider, (uint64_t)static Log.groupSessionProvider);
}

uint64_t Log.personalGroupSessionProvider.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for personalGroupSessionProvider, (uint64_t)static Log.personalGroupSessionProvider);
}

uint64_t Log.attachmentLedgerTopic.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for attachmentLedgerTopic, (uint64_t)static Log.attachmentLedgerTopic);
}

uint64_t Log.ledger.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for ledger, (uint64_t)static Log.ledger);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t Log.presenceSession.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for presenceSession, (uint64_t)static Log.presenceSession);
}

uint64_t Log.ckShareGroupSessionProvider.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for ckShareGroupSessionProvider, (uint64_t)static Log.ckShareGroupSessionProvider);
}

uint64_t Log.shareChangeObserver.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for shareChangeObserver, (uint64_t)static Log.shareChangeObserver);
}

uint64_t Log.downloadTask.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for downloadTask, (uint64_t)static Log.downloadTask);
}

uint64_t Log.topicManager.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for topicManager, (uint64_t)static Log.topicManager);
}

uint64_t String.init<A>(describing:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1);
  v28 = v8;
  *(_QWORD *)&v33 = swift_getDynamicType();
  swift_getMetatypeMetadata();
  v9 = String.init<A>(describing:)();
  v27 = v10;
  *(_QWORD *)&v33 = a1;
  type metadata accessor for PartialKeyPath();
  v11 = type metadata accessor for Array();
  v12 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF38], v11);
  MEMORY[0x1A1B04974](&v30, v11, v12);
  swift_bridgeObjectRelease();
  v32 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  v13 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = v9;
  v15 = v27;
  *((_QWORD *)v14 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  v16 = type metadata accessor for LazySequence();
  swift_bridgeObjectRetain();
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEC330], v16);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v26 = v33;
  v30 = v33;
  v31 = v34;
  v17 = type metadata accessor for LazyMapSequence();
  v29 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF20], v11);
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEC850], v17, &v29);
  v18 = BidirectionalCollection<>.joined(separator:)();
  v20 = v19;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v15;
  v21._countAndFlagsBits = 40;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v18;
  v22._object = v20;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v33;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v28, a3);
  return v24;
}

uint64_t Log.uploadTask.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for uploadTask, (uint64_t)static Log.uploadTask);
}

uint64_t Log.runtimeIssues.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for runtimeIssues, (uint64_t)static Log.runtimeIssues);
}

uint64_t Log.topic.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for topic, (uint64_t)static Log.topic);
}

GroupActivities::Subsystem_optional __swiftcall Subsystem.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  GroupActivities::Subsystem_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subsystem.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = GroupActivities_Subsystem_runtimeIssues;
  else
    v4.value = GroupActivities_Subsystem_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

unint64_t Subsystem.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000018;
  else
    return 0xD00000000000001ALL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subsystem(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Subsystem()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subsystem()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Subsystem()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subsystem@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subsystem.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Subsystem(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD00000000000001ALL;
  v3 = 0x80000001A0F18DF0;
  if (*v1)
    v3 = 0x80000001A0F18E10;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t one-time initialization function for sessionUI()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.sessionUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.sessionUI);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.init<A>(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  Logger.init(subsystem:category:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t Logger.sessionUI.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for sessionUI, (uint64_t)static Logger.sessionUI);
}

uint64_t static Logger.sessionUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for sessionUI, (uint64_t)static Logger.sessionUI, a1);
}

uint64_t one-time initialization function for copmanager()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.copmanager);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.copmanager);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.copmanager.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for copmanager, (uint64_t)static Logger.copmanager);
}

uint64_t static Logger.copmanager.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for copmanager, (uint64_t)static Logger.copmanager, a1);
}

uint64_t static Logger.sessionUI.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for modelsync()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.modelsync);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.modelsync);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.modelsync.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(one-time initialization token for modelsync, (uint64_t)static Logger.modelsync);
}

uint64_t static Logger.modelsync.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(one-time initialization token for modelsync, (uint64_t)static Logger.modelsync, a1);
}

uint64_t static Logger.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for client, (uint64_t)static Logger.client, a1);
}

uint64_t one-time initialization function for playback()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.playback);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.playback);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.playback.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for playback, (uint64_t)static Logger.playback, a1);
}

uint64_t one-time initialization function for runtimeIssues(uint64_t a1)
{
  return one-time initialization function for runtimeIssues(a1, static Logger.runtimeIssues);
}

{
  return one-time initialization function for runtimeIssues(a1, static Log.runtimeIssues);
}

uint64_t static Logger.runtimeIssues.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for runtimeIssues, (uint64_t)static Logger.runtimeIssues, a1);
}

uint64_t one-time initialization function for extensionController()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.extensionController);
  __swift_project_value_buffer(v0, (uint64_t)static Log.extensionController);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.extensionController.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(one-time initialization token for extensionController, (uint64_t)static Log.extensionController);
}

uint64_t static Log.extensionController.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(one-time initialization token for extensionController, (uint64_t)static Log.extensionController, a1);
}

uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for default, (uint64_t)static Log.default, a1);
}

uint64_t one-time initialization function for groupSessionProviderObserver()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.groupSessionProviderObserver);
  __swift_project_value_buffer(v0, (uint64_t)static Log.groupSessionProviderObserver);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.groupSessionProviderObserver.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for groupSessionProviderObserver, (uint64_t)static Log.groupSessionProviderObserver, a1);
}

uint64_t one-time initialization function for groupSessionProvider()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.groupSessionProvider);
  __swift_project_value_buffer(v0, (uint64_t)static Log.groupSessionProvider);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.groupSessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for groupSessionProvider, (uint64_t)static Log.groupSessionProvider, a1);
}

uint64_t one-time initialization function for ckShareGroupSessionProvider()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.ckShareGroupSessionProvider);
  __swift_project_value_buffer(v0, (uint64_t)static Log.ckShareGroupSessionProvider);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.ckShareGroupSessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for ckShareGroupSessionProvider, (uint64_t)static Log.ckShareGroupSessionProvider, a1);
}

uint64_t one-time initialization function for personalGroupSessionProvider()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.personalGroupSessionProvider);
  __swift_project_value_buffer(v0, (uint64_t)static Log.personalGroupSessionProvider);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.personalGroupSessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for personalGroupSessionProvider, (uint64_t)static Log.personalGroupSessionProvider, a1);
}

uint64_t one-time initialization function for shareChangeObserver()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.shareChangeObserver);
  __swift_project_value_buffer(v0, (uint64_t)static Log.shareChangeObserver);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.shareChangeObserver.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for shareChangeObserver, (uint64_t)static Log.shareChangeObserver, a1);
}

uint64_t one-time initialization function for reliableBroadcast()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.reliableBroadcast);
  __swift_project_value_buffer(v0, (uint64_t)static Log.reliableBroadcast);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.reliableBroadcast.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for reliableBroadcast, (uint64_t)static Log.reliableBroadcast, a1);
}

uint64_t one-time initialization function for topic(uint64_t a1)
{
  return one-time initialization function for topic(a1, static Log.topic);
}

uint64_t static Log.topic.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for topic, (uint64_t)static Log.topic, a1);
}

uint64_t one-time initialization function for attachmentLedgerTopic(uint64_t a1)
{
  return one-time initialization function for topic(a1, static Log.attachmentLedgerTopic);
}

uint64_t static Log.attachmentLedgerTopic.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for attachmentLedgerTopic, (uint64_t)static Log.attachmentLedgerTopic, a1);
}

uint64_t one-time initialization function for topicManager(uint64_t a1)
{
  return one-time initialization function for topic(a1, static Log.topicManager);
}

uint64_t one-time initialization function for topic(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.topicManager.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for topicManager, (uint64_t)static Log.topicManager, a1);
}

uint64_t one-time initialization function for ledger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.ledger);
  __swift_project_value_buffer(v0, (uint64_t)static Log.ledger);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.ledger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for ledger, (uint64_t)static Log.ledger, a1);
}

uint64_t one-time initialization function for previews()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.previews);
  __swift_project_value_buffer(v0, (uint64_t)static Log.previews);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.previews.unsafeMutableAddressor()
{
  return Log.systemCoordinator.unsafeMutableAddressor(&one-time initialization token for previews, (uint64_t)static Log.previews);
}

uint64_t static Log.previews.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for previews, (uint64_t)static Log.previews, a1);
}

uint64_t one-time initialization function for runtimeIssues(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.runtimeIssues.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for runtimeIssues, (uint64_t)static Log.runtimeIssues, a1);
}

uint64_t one-time initialization function for uploadTask()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.uploadTask);
  __swift_project_value_buffer(v0, (uint64_t)static Log.uploadTask);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.uploadTask.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for uploadTask, (uint64_t)static Log.uploadTask, a1);
}

uint64_t one-time initialization function for downloadTask()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.downloadTask);
  __swift_project_value_buffer(v0, (uint64_t)static Log.downloadTask);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.downloadTask.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for downloadTask, (uint64_t)static Log.downloadTask, a1);
}

uint64_t one-time initialization function for presenceSession()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.presenceSession);
  __swift_project_value_buffer(v0, (uint64_t)static Log.presenceSession);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.presenceSession.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for presenceSession, (uint64_t)static Log.presenceSession, a1);
}

uint64_t one-time initialization function for systemCoordinator()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.systemCoordinator);
  __swift_project_value_buffer(v0, (uint64_t)static Log.systemCoordinator);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.systemCoordinator.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.sessionUI.getter(&one-time initialization token for systemCoordinator, (uint64_t)static Log.systemCoordinator, a1);
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[4];
  uint64_t v8;
  unint64_t v9;

  v7[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:), (uint64_t)v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEA968], v2, (uint64_t)&v8);
  if (v9)
    v3 = v8;
  else
    v3 = 7104878;
  if (v9)
    v4 = v9;
  else
    v4 = 0xE300000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t Optional.descriptionOfWrappedValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v14 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
    return 7104878;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v10, v1);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
  v12 = String.init<A>(describing:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
  return v12;
}

uint64_t closure #1 in String.init<A>(describing:in:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  __int128 v25[2];
  uint64_t v26;
  char v27[32];
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];

  *(_QWORD *)&v25[0] = AnyKeyPath.debugDescription.getter();
  *((_QWORD *)&v25[0] + 1) = v6;
  v28 = 92;
  v29 = 0xE100000000000000;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v33[0] = 92;
  v33[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  Collection<>.trimmingPrefix<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v30;
  v9 = v31;
  swift_getAtPartialKeyPath();
  outlined init with copy of Any((uint64_t)v33, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalProtocol);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of TypedPayloadDecoding(v25, (uint64_t)&v28);
    v11 = v31;
    v12 = v32;
    __swift_project_boxed_opaque_existential_1(&v28, v31);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v15 = v14;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v28);
  }
  else
  {
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    outlined destroy of OptionalProtocol?((uint64_t)v25);
    outlined init with copy of Any((uint64_t)v33, (uint64_t)&v28);
    v13 = String.init<A>(describing:)();
    v15 = v16;
  }
  v17 = MEMORY[0x1A1B04938](92, 0xE100000000000000, v10, v9);
  v19 = v18;
  swift_bridgeObjectRelease();
  v28 = v17;
  v29 = v19;
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v13;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = v28;
  v23 = v29;
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  *a3 = v22;
  a3[1] = v23;
  return result;
}

uint64_t sub_1A0EFEB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in String.init<A>(describing:in:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in String.init<A>(describing:in:)(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type Subsystem and conformance Subsystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subsystem and conformance Subsystem;
  if (!lazy protocol witness table cache variable for type Subsystem and conformance Subsystem)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Subsystem, &type metadata for Subsystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subsystem and conformance Subsystem);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Subsystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EFECB0 + 4 * byte_1A0F18465[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EFECE4 + 4 * byte_1A0F18460[v4]))();
}

uint64_t sub_1A0EFECE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFECEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EFECF4);
  return result;
}

uint64_t sub_1A0EFED00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EFED08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EFED0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFED14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Subsystem()
{
  return &type metadata for Subsystem;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t outlined destroy of OptionalProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in >> prefix<A>(_:)(a1, a2);
}

void closure #1 in NSItemProvider.loadGroupActivity()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  if (one-time initialization token for _groupActivity != -1)
    swift_once();
  v7 = type metadata accessor for UTType();
  __swift_project_value_buffer(v7, (uint64_t)static UTType._groupActivity);
  v8 = UTType.identifier.getter();
  v9 = (void *)MEMORY[0x1A1B048B4](v8);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in NSItemProvider.loadGroupActivity();
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CPDataCryptor?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_13;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_loadItemForTypeIdentifier_options_completionHandler_, v9, 0, v12);
  _Block_release(v12);

}

uint64_t closure #1 in closure #1 in NSItemProvider.loadGroupActivity()(uint64_t a1, id a2)
{
  unint64_t v2;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  _BYTE *v12;
  id v13;
  uint64_t v15;
  id v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  id v21;
  _BYTE *v22;
  unint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    swift_unknownObjectRetain_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSSecureCoding);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = v26[0];
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v4 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (one-time initialization token for default != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Log.default);
      v16 = v4;
      v7 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        v24 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v18 = 138412290;
        if (v4)
        {
          v23 = v26;
          v19 = v16;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v24 = v4;

        _os_log_impl(&dword_1A0DB3000, v7, v17, "Unarchiving activity from item provider data: %@", v18, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v24, -1, -1);
        MEMORY[0x1A1B05CC4](v18, -1, -1);
        outlined consume of Data._Representation(v25, v2);
        goto LABEL_26;
      }

      outlined consume of Data._Representation(v25, v26[0]);
      if (!v4)
        goto LABEL_29;
    }
    else
    {
      objc_opt_self();
      v4 = (void *)swift_dynamicCastObjCClass();
      if (v4)
        swift_unknownObjectRetain();
      if (one-time initialization token for default != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Log.default);
      v6 = v4;
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        v10 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v9 = 138412290;
        if (v4)
          v11 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v10 = v4;

        _os_log_impl(&dword_1A0DB3000, v7, v8, "Received activity object from item provider: %@", v9, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v10, -1, -1);
        MEMORY[0x1A1B05CC4](v9, -1, -1);
LABEL_26:

        if (!v4)
          goto LABEL_29;
        goto LABEL_27;
      }

      if (!v4)
        goto LABEL_29;
    }
LABEL_27:
    v20 = objc_msgSend(v4, sel_sanitizedCopy, v23);
    if (v20)
    {
      v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
      CheckedContinuation.resume(returning:)();

      return swift_unknownObjectRelease();
    }
LABEL_29:
    lazy protocol witness table accessor for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError();
    swift_allocError();
    *v22 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
    CheckedContinuation.resume(throwing:)();

    return swift_unknownObjectRelease();
  }
  if (!a2)
  {
    lazy protocol witness table accessor for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError();
    swift_allocError();
    *v12 = 1;
  }
  v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1A0EFF60C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.loadGroupActivity()(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return closure #1 in closure #1 in NSItemProvider.loadGroupActivity()(a1, a2);
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError;
  if (!lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for NSItemProvider.TUConversationActivityLoadError, &unk_1E44FA178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError;
  if (!lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for NSItemProvider.TUConversationActivityLoadError, &unk_1E44FA178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSItemProvider.TUConversationActivityLoadError and conformance NSItemProvider.TUConversationActivityLoadError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NSItemProvider.TUConversationActivityLoadError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0EFF768 + 4 * byte_1A0F18555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0EFF79C + 4 * asc_1A0F18550[v4]))();
}

uint64_t sub_1A0EFF79C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFF7A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0EFF7ACLL);
  return result;
}

uint64_t sub_1A0EFF7B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0EFF7C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0EFF7C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0EFF7CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSItemProvider.TUConversationActivityLoadError()
{
  return &unk_1E44FA178;
}

void specialized Sequence.contains(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  id v16;
  char v17;
  char v18;
  int64_t v19;
  id v20;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v19)
      goto LABEL_21;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_18:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    v20 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v12);
    v16 = v20;
    v17 = a1(&v20);
    if (v3)
    {
      swift_release();

      return;
    }
    v18 = v17;

    if ((v18 & 1) != 0)
    {
LABEL_21:
      swift_release();
      return;
    }
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 2;
  if (v10 + 2 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 3;
  if (v10 + 3 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 4;
  if (v10 + 4 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v19)
      goto LABEL_21;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  id v16;
  int64_t v17;
  id v18;

  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v18 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v16 = v18;
    closure #1 in ConversationManager.updateConversations(conversationsByGroupUUID:)(&v18, a2);
    if (v2)
    {
      swift_release();

      return;
    }

    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 2;
      if (v10 + 2 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 3;
      if (v10 + 3 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
      {
LABEL_14:
        v10 = v15;
        goto LABEL_15;
      }
      v17 = v10 + 4;
      if (v10 + 4 >= v9)
      {
LABEL_26:
        swift_release();
        return;
      }
      v14 = *(_QWORD *)(v5 + 8 * v17);
      v10 += 4;
      if (!v14)
        break;
    }
LABEL_15:
    v8 = (v14 - 1) & v14;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v17;
    if (v14)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t ConversationManager.__allocating_init(client:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized ConversationManager.init(client:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

uint64_t static ConversationManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t ConversationManager.conversationsByUUID.didset()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;

  v1 = ConversationManager.conversationsByUUID.getter();
  v2 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 24))
  {
    v16 = v2;
    swift_retain();
    CurrentValueSubject.send(_:)();
    result = swift_release();
  }
  v4 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  if ((v2 & 0x8000000000000000) == 0 && (v2 & 0x4000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v2 + 16);
    if (v5)
      goto LABEL_6;
LABEL_19:
    swift_release();
    v9 = MEMORY[0x1E0DEE9D8];
    v16 = v4;
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_29;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_release();
  if (!v5)
    goto LABEL_19;
LABEL_6:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v7 = MEMORY[0x1A1B05010](i, v2);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 8 * i + 32);
      swift_retain();
    }
    v8 = (*(_QWORD *(**)(char *__return_ptr))(*(_QWORD *)v7 + 152))(&v15);
    if (v15 == 3 && (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v7 + 272))(v8))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_release();
  v9 = v16;
  v16 = v4;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_29;
LABEL_20:
  if ((v9 & 0x4000000000000000) == 0)
  {
    v10 = *(_QWORD *)(v9 + 16);
    result = swift_retain();
    if (!v10)
    {
LABEL_30:
      swift_release_n();
      v14 = MEMORY[0x1E0DEE9D8];
LABEL_31:
      ConversationManager._groupSessions.getter();
      v16 = v14;
      CurrentValueSubject.send(_:)();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_22;
  }
LABEL_29:
  swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v10 = result;
  if (!result)
    goto LABEL_30;
LABEL_22:
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v12 = MEMORY[0x1A1B05010](v11, v9);
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 8 * v11 + 32);
        swift_retain();
      }
      ++v11;
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 320))();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v13);
    }
    while (v10 != v11);
    swift_release_n();
    v14 = v16;
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

_QWORD *ConversationManager.conversations.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = ConversationManager.conversationsByUUID.getter();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ConversationManager.conversationsByUUID.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v1 = closure #1 in ConversationManager.conversationsByUUID.getter(v0);
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in ConversationManager.conversationsByUUID.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;

  v2 = a1 + 104;
  outlined init with copy of AudioSessionAssertionManager(a1 + 104, (uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(v7, v8);
  v3 = dispatch thunk of ActivitySessionContainerProvider.activitySessions.getter();
  v4 = specialized ConversationManager.updateConversations(conversationsByGroupUUID:)(v3);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  outlined init with copy of AudioSessionAssertionManager(v2, (uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(v7, v8);
  dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  v5 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  *(_QWORD *)(a1 + 144) = v5;
  swift_release();
  return v4;
}

uint64_t closure #1 in closure #1 in ConversationManager.conversationsByUUID.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  v4 = specialized ConversationManager.updateConversations(conversationsByGroupUUID:)(v3);
  swift_release();
  *(_QWORD *)(a2 + 16) = v4;
  swift_bridgeObjectRelease();
  ConversationManager.conversationsByUUID.didset();
  return swift_release();
}

uint64_t ConversationManager.conversationsPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = *(_QWORD *)(v0 + 32);
LABEL_5:
    swift_retain();
    return v1;
  }
  v2 = v0;
  v3 = ConversationManager.conversationsByUUID.getter();
  specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Conversation], Never>);
  swift_allocObject();
  *(_QWORD *)(v0 + 24) = CurrentValueSubject.init(_:)();
  result = swift_release();
  if (*(_QWORD *)(v0 + 24))
  {
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Conversation], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[Conversation], Never>, MEMORY[0x1E0C95FB8]);
    v1 = Publisher.eraseToAnyPublisher()();
    *(_QWORD *)(v2 + 32) = v1;
    swift_retain();
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ConversationManager.conversationsPublisher.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*ConversationManager.conversationsPublisher.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ConversationManager.conversationsPublisher.getter();
  return GroupSessionJournal.attachments.modify;
}

uint64_t ConversationManager.suggest(activity:)()
{
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  return AnyCancellable.init(_:)();
}

uint64_t ConversationManager.groupSessions(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v2 = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v3 = result;
    if (result)
    {
LABEL_3:
      if (v3 < 1)
      {
        __break(1u);
        goto LABEL_29;
      }
      for (i = 0; i != v3; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1A1B05010](i, a1);
        }
        else
        {
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
        }
        (*(void (**)(char *__return_ptr))(*(_QWORD *)v6 + 152))(&v12);
        if (v12 == 3)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
      }
      swift_bridgeObjectRelease();
      v7 = v13;
      v13 = v2;
      if (v7 < 0)
        goto LABEL_25;
      goto LABEL_16;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x1E0DEE9D8];
  v13 = v2;
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
    goto LABEL_25;
LABEL_16:
  if ((v7 & 0x4000000000000000) != 0)
  {
LABEL_25:
    swift_retain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v8 = result;
    if (!result)
      goto LABEL_26;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(v7 + 16);
  result = swift_retain();
  if (!v8)
  {
LABEL_26:
    swift_release_n();
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_18:
  if (v8 < 1)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v9 = 0;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v10 = MEMORY[0x1A1B05010](v9, v7);
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8 * v9 + 32);
      swift_retain();
    }
    ++v9;
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 320))();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v11);
  }
  while (v8 != v9);
  swift_release_n();
  return v13;
}

uint64_t ConversationManager._groupSessions.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if (v0[5])
  {
    v1 = v0[5];
  }
  else
  {
    v2 = v0;
    v3 = ConversationManager.conversationsByUUID.getter();
    v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *))(*v0 + 232))(v4);
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>);
    swift_allocObject();
    v1 = CurrentValueSubject.init(_:)();
    v2[5] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t ConversationManager.groupSessions.getter()
{
  uint64_t v1;

  ConversationManager._groupSessions.getter();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t ConversationManager.groupSessionsPublisher.getter()
{
  uint64_t v0;
  uint64_t result;

  v0 = ConversationManager._groupSessions.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t ConversationManager.topicManager.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  id v8;
  uint64_t v9;
  uint64_t v11[5];

  if (v0[6])
  {
    v1 = v0[6];
  }
  else
  {
    v2 = type metadata accessor for TopicManager();
    v3 = v0[16];
    v4 = v0[17];
    v5 = __swift_project_boxed_opaque_existential_1(v0 + 13, v3);
    v11[3] = v3;
    v6 = *(_QWORD *)(v4 + 8);
    v11[4] = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v5, v3);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D15358]), sel_init);
    v9 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPFeatureFlags);
    v1 = specialized TopicManager.__allocating_init(provider:featureFlags:)((uint64_t)boxed_opaque_existential_1, (uint64_t)v8, v2, v3, v9, v6);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
    v0[6] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t ConversationManager.topicManager.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*ConversationManager.topicManager.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ConversationManager.topicManager.getter();
  return ConversationManager.topicManager.modify;
}

uint64_t ConversationManager.topicManager.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 48) = *a1;
  return swift_release();
}

uint64_t ConversationManager.audioSessionAssertionManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v1 + 56, a1);
}

uint64_t ConversationManager.audioSessionAssertionManager.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 56;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(a1, v3);
  return swift_endAccess();
}

uint64_t (*ConversationManager.audioSessionAssertionManager.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t ConversationManager.groupSessionTable.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*ConversationManager.groupSessionTable.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ConversationManager.groupSessionTable.getter();
  return ConversationManager.groupSessionTable.modify;
}

uint64_t ConversationManager.groupSessionTable.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 96) = *a1;
  return swift_release();
}

uint64_t ConversationManager.prepareForActivation(options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = v2;
  outlined init with take of AuthorizationPromptOptions?(a2, v3 + 16);
  return swift_task_switch();
}

uint64_t ConversationManager.prepareForActivation(options:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[12];
  v2 = swift_task_alloc();
  v0[13] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[14] = v3;
  *v3 = v0;
  v3[1] = ConversationManager.prepareForActivation(options:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in ConversationManager.prepareForActivation(options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[8];
  char v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v28 = a1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityActivationResult, Never>);
  v5 = *(_QWORD *)(v29 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v29);
  v7 = type metadata accessor for AuthorizationRequestOverrides.PromptCondition();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v19 - v12;
  outlined init with copy of AudioSessionAssertionManager(a2 + 104, (uint64_t)v30);
  v27 = v30[4];
  v26 = __swift_project_boxed_opaque_existential_1(v30, v30[3]);
  outlined init with take of AuthorizationPromptOptions?(a3, (uint64_t)v31);
  v14 = 0;
  if (v31[1] != 1)
  {
    v22 = v31[0];
    v24 = v31[4];
    v25 = v31[2];
    v21 = v31[5];
    v23 = v31[6];
    v19[1] = v31[7];
    v34 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, **((unsigned int **)&unk_1E4500F90 + v32), v7);
    v20 = v34;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
    objc_allocWithZone((Class)type metadata accessor for AuthorizationRequestOverrides());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = (void *)AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)();
  }
  v15 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v29);
  v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v16, (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  dispatch thunk of ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:)();
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
}

uint64_t closure #1 in closure #1 in ConversationManager.prepareForActivation(options:)(char a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;

  if (a2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    v4 = a2;
    v5 = a2;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v15 = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v6, v7, "Error preparing activity for activation: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v9, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);
    }
    else
    {

    }
    v13 = 2;
  }
  else
  {
    v13 = (a1 & 1) == 0;
  }
  LOBYTE(v15) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityActivationResult, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationManager.begin(activity:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[11] = a2;
  v3[12] = v2;
  v4 = type metadata accessor for UUID();
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ConversationManager.begin(activity:request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void *v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;

  v1 = ConversationManager.activeConversation.getter();
  *(_QWORD *)(v0 + 128) = v1;
  if (v1)
  {
    v2 = v1;
    if (one-time initialization token for default != -1)
      swift_once();
    v3 = *(void **)(v0 + 88);
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v5 = v3;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void **)(v0 + 88);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29 = v28;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v0 + 72) = v9;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityCreateSessionRequest);
      v11 = v9;
      v12 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v6, v7, "Activating activity through current session: %s.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v28, -1, -1);
      MEMORY[0x1A1B05CC4](v10, -1, -1);

    }
    else
    {

    }
    outlined init with copy of AudioSessionAssertionManager(*(_QWORD *)(v0 + 96) + 104, v0 + 16);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    (*(void (**)(void))(*(_QWORD *)v2 + 128))();
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v26;
    *v26 = v0;
    v26[1] = ConversationManager.begin(activity:request:);
    return dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v14 = *(void **)(v0 + 88);
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    v16 = v14;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(void **)(v0 + 88);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v22 = v29;
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)(v0 + 56) = v20;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityCreateSessionRequest);
      v23 = v20;
      v24 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "Dropping activity as there is no active conversation: %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);

    }
    else
    {

    }
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  v1 = *(unsigned __int8 *)(v0 + 152);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t ConversationManager.begin(activity:request:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc();
  v6 = *(_QWORD *)(v4 + 112);
  v5 = *(_QWORD *)(v4 + 120);
  v7 = *(_QWORD *)(v4 + 104);
  if (!v1)
    *(_BYTE *)(v4 + 152) = a1 & 1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return swift_task_switch();
}

uint64_t ConversationManager.activeConversation.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;

  v0 = ConversationManager.conversationsByUUID.getter();
  v1 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  if ((v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
LABEL_16:
    swift_retain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    swift_retain();
    if (v2)
    {
LABEL_4:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x1A1B05010](v3 - 4, v1);
          v6 = __OFADD__(v4, 1);
          v7 = v3 - 3;
          if (v6)
            goto LABEL_15;
        }
        else
        {
          v5 = *(_QWORD *)(v1 + 8 * v3);
          swift_retain();
          v6 = __OFADD__(v4, 1);
          v7 = v3 - 3;
          if (v6)
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 152))(&v9);
        if (v9 == 3)
        {
          swift_release_n();
          return v5;
        }
        swift_release();
        ++v3;
      }
      while (v7 != v2);
    }
  }
  swift_release_n();
  return 0;
}

uint64_t ConversationManager.end(activity:)()
{
  uint64_t v0;

  return ConversationManager.end(activity:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ConversationManager.init(client:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized ConversationManager.init(client:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

uint64_t closure #1 in ConversationManager.updateConversations(conversationsByGroupUUID:)(id *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  id v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v31 - 8);
  v6 = MEMORY[0x1E0C80A78](v31);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v30 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - v12;
  v14 = *a1;
  v15 = objc_msgSend(*a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
    swift_retain();
  }
  else
  {
    v20 = v14;
    v30 = v2;
    v21 = v20;
    v22 = objc_msgSend(v20, (SEL)&selRef_URL);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = objc_msgSend(v21, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for Conversation();
    swift_allocObject();
    v19 = Conversation.init(identifier:groupUUID:)((uint64_t)v11, (uint64_t)v8);
    swift_retain();
    Conversation.update(with:)(v21);
    swift_release();

  }
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25 = v13;
  v26 = v31;
  v24(v25, v31);
  Conversation.update(with:)(v14);
  v27 = objc_msgSend(v14, (SEL)&selRef_URL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = *a2;
  *a2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *a2 = v32;
  swift_bridgeObjectRelease();
  v24(v11, v26);
  return swift_release();
}

uint64_t closure #1 in closure #2 in ConversationManager.updateConversations(conversationsByGroupUUID:)(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char v7;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t ConversationManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 104);
  swift_release();
  return v0;
}

uint64_t ConversationManager.__deallocating_deinit()
{
  ConversationManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance ConversationManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ConversationManager();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessions.getter in conformance ConversationManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessionsPublisher.getter in conformance ConversationManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t protocol witness for InternalGroupSessionProvider.topicManager.getter in conformance ConversationManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t protocol witness for InternalGroupSessionProvider.audioSessionAssertionManager.getter in conformance ConversationManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t protocol witness for InternalGroupSessionProvider.prepareForActivation(options:) in conformance ConversationManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 352) + *(_QWORD *)(*(_QWORD *)v2 + 352));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance ConversationManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 360) + *(_QWORD *)(*(_QWORD *)v2 + 360));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance ConversationManager;
  return v8(a1, a2);
}

uint64_t protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance ConversationManager(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    v5 = 0;
  else
    v5 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t protocol witness for InternalGroupSessionProvider.end(activity:) in conformance ConversationManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 368) + *(_QWORD *)(*(_QWORD *)v1 + 368));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v6(a1);
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReliableBroadcastPacket.Message>);
  v3 = *(_QWORD *)(type metadata accessor for ReliableBroadcastPacket.Message(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = specialized Sequence._copySequenceContents(initializing:)(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for ReliableBroadcastPacket.Message);
      swift_bridgeObjectRetain();
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [AnyHashable : Any].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v33 - v16;
  v38 = a4;
  v20 = *(_QWORD *)(a4 + 56);
  v19 = a4 + 56;
  v18 = v20;
  v37 = v19;
  v21 = -1 << *(_BYTE *)(v19 - 24);
  if (-v21 < 64)
    v22 = ~(-1 << -(char)v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  if (!a2)
  {
    v24 = 0;
    a3 = 0;
LABEL_38:
    v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v19 - 24);
  v35 = a1;
  v24 = 0;
  v25 = 0;
  v36 = (unint64_t)(63 - v21) >> 6;
  v33 = v36 - 1;
  if (!v23)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    v31 = *(_QWORD *)(v11 + 72);
    outlined init with copy of Participant(*(_QWORD *)(v38 + 48) + v31 * v27, (uint64_t)v14, a5);
    outlined init with take of Participant((uint64_t)v14, (uint64_t)v17, a5);
    result = outlined init with take of Participant((uint64_t)v17, a2, a5);
    if (v25 == a3)
      goto LABEL_37;
    a2 += v31;
    if (v23)
      goto LABEL_8;
LABEL_9:
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36)
      goto LABEL_32;
    v29 = *(_QWORD *)(v37 + 8 * v28);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    v23 = 0;
    v24 = v28;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
    goto LABEL_14;
  v30 = v28 + 2;
  if (v28 + 2 >= v36)
    goto LABEL_32;
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    v23 = 0;
    v24 = v28 + 2;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    v28 = v24;
    goto LABEL_18;
  }
  v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v23 = 0;
      v24 = v33;
      goto LABEL_36;
    }
    v29 = *(_QWORD *)(v37 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized ConversationManager.init(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a3;
  v12 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  v8 = static AVAudioSessionAssertionManager.shared;
  *(_QWORD *)(a2 + 80) = type metadata accessor for AVAudioSessionAssertionManager();
  *(_QWORD *)(a2 + 88) = &protocol witness table for AVAudioSessionAssertionManager;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  outlined init with take of TypedPayloadDecoding(&v10, a2 + 104);
  swift_retain();
  return a2;
}

uint64_t outlined init with take of AuthorizationPromptOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AuthorizationPromptOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ConversationManager.prepareForActivation(options:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationManager.prepareForActivation(options:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t ConversationManager.end(activity:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1A0F023A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0F023D8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0F02408@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 280))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0F02438(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 288);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0F02468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
}

uint64_t sub_1A0F02490(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 312))(v4);
}

uint64_t sub_1A0F024D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0F02500(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 336);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for ConversationManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationManager.conversationsPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationManager.conversationsPublisher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationManager.conversationsPublisher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationManager.suggest(activity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ConversationManager.groupSessions(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationManager.groupSessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ConversationManager.groupSessionsPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ConversationManager.topicManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ConversationManager.topicManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ConversationManager.topicManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ConversationManager.audioSessionAssertionManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of ConversationManager.audioSessionAssertionManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ConversationManager.audioSessionAssertionManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ConversationManager.groupSessionTable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of ConversationManager.groupSessionTable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of ConversationManager.groupSessionTable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of ConversationManager.prepareForActivation(options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 352) + *(_QWORD *)(*(_QWORD *)v2 + 352));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ConversationManager.begin(activity:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 360) + *(_QWORD *)(*(_QWORD *)v2 + 360));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of ConversationManager.end(activity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 368) + *(_QWORD *)(*(_QWORD *)v1 + 368));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of ConversationManager.__allocating_init(client:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t sub_1A0F0275C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityActivationResult, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManager.prepareForActivation(options:)(char a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityActivationResult, Never>);
  return closure #1 in closure #1 in ConversationManager.prepareForActivation(options:)(a1, a2);
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v36 - v11;
  v13 = 0;
  v46 = MEMORY[0x1E0DEE9D8];
  v42 = v5;
  v43 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v37 = (char *)&v36 - v11;
  v38 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v39 = (unint64_t)(v15 + 63) >> 6;
  v36 = result;
  if ((v16 & v14) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v13 >= v39)
    goto LABEL_33;
  v22 = *(_QWORD *)(v38 + 8 * v13);
  if (v22)
    goto LABEL_19;
  v23 = v13 + 1;
  if (v13 + 1 >= v39)
    goto LABEL_33;
  v22 = *(_QWORD *)(v38 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v13 = v23;
LABEL_19:
    v19 = (v22 - 1) & v22;
    for (i = __clz(__rbit64(v22)) + (v13 << 6); ; i = v18 | (v13 << 6))
    {
      v24 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, *(_QWORD *)(v43 + 48) + v24 * i, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
        break;
      v44 = v19;
      v25 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
      v26 = v25(v12, v5, v6);
      MEMORY[0x1E0C80A78](v26);
      *(&v36 - 2) = (uint64_t)v12;
      v27 = v12;
      v28 = v41;
      swift_bridgeObjectRetain();
      v29 = v45;
      specialized Sequence.contains(where:)(partial apply for closure #1 in closure #2 in ConversationManager.updateConversations(conversationsByGroupUUID:), (uint64_t)(&v36 - 4), v28);
      v31 = v30;
      v45 = v29;
      swift_bridgeObjectRelease();
      if ((v31 & 1) != 0)
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v27, v6);
        v5 = v42;
        v12 = v27;
        v17 = v44;
        if (!v44)
          goto LABEL_7;
      }
      else
      {
        v25(v40, v27, v6);
        v32 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
          v32 = v46;
        }
        v17 = v44;
        v34 = *(_QWORD *)(v32 + 16);
        v33 = *(_QWORD *)(v32 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v32 = v46;
        }
        *(_QWORD *)(v32 + 16) = v34 + 1;
        v35 = v32
            + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + v34 * v24;
        v6 = v36;
        result = v25((char *)v35, v40, v36);
        v46 = v32;
        v5 = v42;
        v12 = v37;
        if (!v17)
          goto LABEL_7;
      }
LABEL_6:
      v18 = __clz(__rbit64(v17));
      v19 = (v17 - 1) & v17;
    }
    swift_release();
    goto LABEL_34;
  }
  v23 = v13 + 2;
  if (v13 + 2 >= v39)
  {
LABEL_33:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    swift_release();
LABEL_34:
    outlined destroy of UUID?((uint64_t)v5);
    return v46;
  }
  v22 = *(_QWORD *)(v38 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 3;
  if (v13 + 3 >= v39)
    goto LABEL_33;
  v22 = *(_QWORD *)(v38 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v13 + 4;
  if (v13 + 4 >= v39)
    goto LABEL_33;
  v22 = *(_QWORD *)(v38 + 8 * v23);
  if (v22)
    goto LABEL_18;
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v39)
      goto LABEL_33;
    v22 = *(_QWORD *)(v38 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized ConversationManager.updateConversations(conversationsByGroupUUID:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v33;
  uint8_t *v34;
  char *v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  char *v37;
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v37 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v36 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
    v39 = v36;
    *(_DWORD *)v11 = 136315138;
    v34 = v11 + 4;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v12 = v3;
    swift_bridgeObjectRetain();
    v13 = Dictionary.description.getter();
    v15 = v14;
    swift_bridgeObjectRelease();
    v16 = v13;
    v3 = v12;
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "ConversationManager received event conversationsByGroupUUID: %s", v11, 0xCu);
    v17 = v36;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v39 = (void (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEE9E0];
  v18 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v18, (uint64_t *)&v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19 = swift_bridgeObjectRetain();
  v20 = specialized Sequence.filter(_:)(v19, a1);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v20 + 16);
  v34 = (uint8_t *)v20;
  if (v21)
  {
    v22 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v36 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16);
    swift_bridgeObjectRetain();
    v35 = v7;
    while (1)
    {
      v36(v7, v22, v2);
      v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v25(v7, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
        break;
      v26 = (uint64_t)v37;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v37, v7, v2);
      v27 = (uint64_t)v39;
      swift_bridgeObjectRetain();
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      LOBYTE(v26) = v29;
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v38 = v27;
        v39 = (void (*)(_QWORD, _QWORD, _QWORD))0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v27 = v38;
        }
        v24 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
        v24(*(_QWORD *)(v27 + 48) + v28 * v23, v2);
        v31 = v38;
        specialized _NativeDictionary._delete(at:)(v28, v38);
        v39 = (void (*)(_QWORD, _QWORD, _QWORD))v31;
        swift_release();
        swift_bridgeObjectRelease();
        v7 = v35;
      }
      else
      {
        v24 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
      }
      v24((unint64_t)v37, v2);
      v22 += v23;
      if (!--v21)
        goto LABEL_16;
    }
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_16:
    v25(v7, 1, 1, v2);
  }
  swift_bridgeObjectRelease_n();
  return (uint64_t)v39;
}

uint64_t sub_1A0F03058()
{
  swift_unownedRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManager.conversationsByUUID.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ConversationManager.conversationsByUUID.getter(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in ConversationManager.updateConversations(conversationsByGroupUUID:)(id *a1)
{
  return closure #1 in closure #2 in ConversationManager.updateConversations(conversationsByGroupUUID:)(a1) & 1;
}

Swift::Void __swiftcall GroupSession.associateScene(persistentIdentifier:)(Swift::String persistentIdentifier)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock[6];

  v2 = v1;
  object = persistentIdentifier._object;
  countAndFlagsBits = persistentIdentifier._countAndFlagsBits;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  MEMORY[0x1E0C80A78](v9);
  v29 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v27 = v8;
    v15 = v14;
    v25 = swift_slowAlloc();
    aBlock[0] = v25;
    *(_DWORD *)v15 = 136315394;
    swift_bridgeObjectRetain();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
    v26 = countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    v16 = GroupSession.description.getter();
    v28 = v6;
    v17 = v5;
    v19 = v18;
    swift_release();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v19, aBlock);
    countAndFlagsBits = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    v5 = v17;
    v6 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "Application called associateScene with sceneID:%s on %s", (uint8_t *)v15, 0x16u);
    v20 = v25;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v20, -1, -1);
    v21 = v15;
    v8 = v27;
    MEMORY[0x1A1B05CC4](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v2;
  v22[3] = countAndFlagsBits;
  v22[4] = object;
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.associateScene(persistentIdentifier:);
  aBlock[5] = (uint64_t)v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_14;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v24 = v29;
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v24, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v31);
  swift_release();
}

uint64_t closure #1 in GroupSession.associateScene(persistentIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  id v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  _QWORD aBlock[6];

  v6 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v7 = *v6;
  v8 = XPCClient.queue.getter();

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in closure #1 in GroupSession.associateScene(persistentIdentifier:);
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_19_0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);

  _Block_release(v11);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in GroupSession.associateScene(persistentIdentifier:)()
{
  uint64_t *v0;

  return closure #1 in GroupSession.associateScene(persistentIdentifier:)(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

void closure #1 in closure #1 in GroupSession.associateScene(persistentIdentifier:)(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

Swift::Void __swiftcall GroupSession.disassociateScene()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v21 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v19 = v5;
    v12 = v11;
    aBlock[0] = v11;
    v20 = v4;
    *(_DWORD *)v10 = 136315138;
    v13 = GroupSession.description.getter();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    v4 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v8, v9, "Application called disassociateScene on %s", v10, 0xCu);
    swift_arrayDestroy();
    v15 = v12;
    v5 = v19;
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);

  }
  else
  {

    swift_release();
  }
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.disassociateScene();
  aBlock[5] = v0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_3;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = v21;
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v17, v4, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v5);
  swift_release();
}

uint64_t closure #1 in GroupSession.disassociateScene()(uint64_t a1)
{
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v3 = *v2;
  v4 = XPCClient.queue.getter();

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #1 in GroupSession.disassociateScene();
  *(_QWORD *)(v5 + 24) = a1;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in GroupSession.disassociateScene()(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

id closure #1 in closure #1 in closure #1 in GroupSession.disassociateScene()(id *a1)
{
  return objc_msgSend(*a1, sel_disassociateScene);
}

uint64_t partial apply for closure #1 in GroupSession.disassociateScene()()
{
  uint64_t v0;

  return closure #1 in GroupSession.disassociateScene()(v0);
}

void partial apply for closure #1 in closure #1 in GroupSession.disassociateScene()()
{
  uint64_t v0;

  closure #1 in closure #1 in GroupSession.disassociateScene()(v0);
}

uint64_t sub_1A0F03BFC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in GroupSession.associateScene(persistentIdentifier:)()
{
  uint64_t v0;

  closure #1 in closure #1 in GroupSession.associateScene(persistentIdentifier:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A0F03C1C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.associateScene(persistentIdentifier:)(void **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *a1;
  v5 = (void *)MEMORY[0x1A1B048B4](v3, v2);
  objc_msgSend(v4, sel_associateSceneWithSceneID_, v5);

}

void SystemCoordinator.setDefaultSpatialTemplatePreference(_:for:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, (uint64_t (*)(void))partial apply for closure #1 in SystemCoordinator.setDefaultSpatialTemplatePreference(_:for:));
  os_unfair_lock_unlock(v1);
}

void closure #1 in SystemCoordinator.setDefaultSpatialTemplatePreference(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v10;
  *v10 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5 & 0xFF01, a2, a3, isUniquelyReferenced_nonNull_native);
  *v10 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

void partial apply for closure #1 in SystemCoordinator.setDefaultSpatialTemplatePreference(_:for:)()
{
  uint64_t v0;

  closure #1 in SystemCoordinator.setDefaultSpatialTemplatePreference(_:for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 49) << 8));
}

Swift::Void __swiftcall SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(Swift::String a1)
{
  SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(a1._countAndFlagsBits, (uint64_t)a1._object, (uint64_t (*)(void))partial apply for closure #1 in SystemCoordinator.clearDefaultSpatialTemplatePreference(for:));
}

void closure #1 in SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[16];

  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_endAccess();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

void SystemCoordinator.setDefaultSpatialTemplateRole(_:for:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, (uint64_t (*)(void))partial apply for closure #1 in SystemCoordinator.setDefaultSpatialTemplateRole(_:for:));
  os_unfair_lock_unlock(v1);
}

void closure #1 in SystemCoordinator.setDefaultSpatialTemplateRole(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[40];

  outlined init with copy of AudioSessionAssertionManager(a4, (uint64_t)v7);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v7, a2, a3);
  swift_endAccess();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

Swift::Void __swiftcall SystemCoordinator.clearDefaultSpatialTemplateRole(for:)(Swift::String a1)
{
  SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(a1._countAndFlagsBits, (uint64_t)a1._object, (uint64_t (*)(void))partial apply for closure #1 in SystemCoordinator.clearDefaultSpatialTemplateRole(for:));
}

void SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 16) + 16);
  os_unfair_lock_lock(v5);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v6, a3);
  os_unfair_lock_unlock(v5);
}

void closure #1 in SystemCoordinator.clearDefaultSpatialTemplateRole(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v6, a2, a3);
  swift_endAccess();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

void partial apply for closure #1 in SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)()
{
  uint64_t *v0;

  closure #1 in SystemCoordinator.clearDefaultSpatialTemplatePreference(for:)(v0[2], v0[3], v0[4]);
}

void partial apply for closure #1 in SystemCoordinator.setDefaultSpatialTemplateRole(_:for:)()
{
  uint64_t *v0;

  closure #1 in SystemCoordinator.setDefaultSpatialTemplateRole(_:for:)(v0[2], v0[3], v0[4], v0[5]);
}

void partial apply for closure #1 in SystemCoordinator.clearDefaultSpatialTemplateRole(for:)()
{
  uint64_t *v0;

  closure #1 in SystemCoordinator.clearDefaultSpatialTemplateRole(for:)(v0[2], v0[3], v0[4]);
}

uint64_t protocol witness for AssetDownloadCoordinator.result() in conformance AssetDownloadCoordinator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D10918] + MEMORY[0x1E0D10918]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v5(a1);
}

uint64_t protocol witness for AssetDownloadCoordinator.receive(signal:) in conformance AssetDownloadCoordinator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D10920] + MEMORY[0x1E0D10920]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v5(a1);
}

uint64_t protocol witness for AssetUploadCoordinator.assetSkeleton.getter in conformance AssetUploadCoordinator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D108F0] + MEMORY[0x1E0D108F0]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v5(a1);
}

uint64_t protocol witness for AssetUploadCoordinator.signals.getter in conformance AssetUploadCoordinator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D10900] + MEMORY[0x1E0D10900]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v5(a1);
}

uint64_t protocol witness for AssetUploadCoordinator.result() in conformance AssetUploadCoordinator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D108F8] + MEMORY[0x1E0D108F8]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v5(a1);
}

uint64_t AssetManager.process(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = AssetManager.process(request:);
  return AssetManager.process(request:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = AssetManager.process(request:);
  return AssetManager.process(request:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AssetManager.process(request:) in conformance AssetManager()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return AssetManager.process(request:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD **)(v0 + 16);
  v2[3] = type metadata accessor for AssetUploadCoordinator();
  v2[4] = &protocol witness table for AssetUploadCoordinator;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return AssetManager.process(request:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD **)(v0 + 16);
  v2[3] = type metadata accessor for AssetDownloadCoordinator();
  v2[4] = &protocol witness table for AssetDownloadCoordinator;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AssetManager.process(request:) in conformance AssetManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AssetManager.process(request:) in conformance AssetManager;
  return AssetManager.process(request:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AssetManager.process(request:) in conformance AssetManager;
  return AssetManager.process(request:)();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t dispatch thunk of AssetManager.process(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 32) + *(_QWORD *)(a4 + 32));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AssetUploadCoordinator.assetSkeleton.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AssetUploadCoordinator.signals.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AssetUploadCoordinator.result()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.result()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.receive(signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

void GroupActivityMetadata.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  void (*v38)(void);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  CGImageRef v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  unsigned __int8 v63;
  id v64;
  void *v65;
  id v66;
  unsigned __int8 v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;

  v95 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v94 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v91 = (char *)&v80 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivityDescription?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v80 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivityMetadata.ActivityType?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v82 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v83 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generic != -1)
    swift_once();
  v80 = __swift_project_value_buffer(v16, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v80, a2, type metadata accessor for GroupActivityMetadata.ActivityType);
  v18 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v19 = (uint64_t *)(a2 + v18[5]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t *)(a2 + v18[6]);
  *v20 = 0;
  v20[1] = 0;
  v84 = v20;
  v81 = v18[7];
  *(_QWORD *)(a2 + v81) = 0;
  v21 = a2 + v18[8];
  v22 = type metadata accessor for URL();
  v23 = *(void (**)(void))(*(_QWORD *)(v22 - 8) + 56);
  v87 = v21;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v21, 1, 1, v22);
  v86 = v18[9];
  *(_QWORD *)(a2 + v86) = 0;
  v24 = dyld_program_sdk_at_least();
  v85 = v18[10];
  *(_BYTE *)(a2 + v85) = v24 ^ 1;
  v88 = a2 + v18[11];
  v89 = v23;
  v90 = v22;
  v23();
  v25 = a2 + v18[12];
  if (one-time initialization token for default != -1)
    swift_once();
  v26 = qword_1ED0B5BF8;
  v27 = qword_1ED0B5C10;
  *(_BYTE *)v25 = static SceneAssociationBehavior.default;
  *(_QWORD *)(v25 + 8) = v26;
  *(_OWORD *)(v25 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(v25 + 32) = v27;
  v92 = v18[13];
  *(_BYTE *)(a2 + v92) = 0;
  v93 = v18[14];
  *(_QWORD *)(a2 + v93) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = objc_msgSend(v95, sel_context);
  v29 = objc_msgSend(v28, sel_typedIdentifier);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  GroupActivityDescription.init(id:)();
  outlined init with copy of URL?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for GroupActivityDescription?);
  v30 = type metadata accessor for GroupActivityDescription();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v30) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v15, v10, v30);
    v32 = 0;
  }
  v33 = v82;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v15, v32, 1, v16);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, &demangling cache variable for type metadata for GroupActivityDescription?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v15, 1, v16) == 1)
  {
    v34 = v83;
    outlined init with copy of Participant(v80, v83, type metadata accessor for GroupActivityMetadata.ActivityType);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for GroupActivityMetadata.ActivityType?);
  }
  else
  {
    v34 = v83;
    outlined init with take of GroupActivityMetadata.ActivityType((uint64_t)v15, v83);
  }
  v35 = v95;
  v36 = v90;
  outlined assign with take of GroupActivityMetadata.ActivityType(v34, a2);
  v37 = objc_msgSend(v35, sel_title);
  v38 = v89;
  if (v37)
  {
    v39 = v37;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0;
  }
  swift_bridgeObjectRelease();
  *v19 = v40;
  v19[1] = v42;
  v43 = objc_msgSend(v35, sel_subTitle);
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  v48 = (uint64_t)v94;
  v49 = v84;
  swift_bridgeObjectRelease();
  *v49 = v45;
  v49[1] = v47;
  v50 = objc_msgSend(v35, sel_imageData);
  if (v50)
  {
    v51 = v50;
    v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;

    v55 = specialized static CGImageRef.thumbnailImage(from:)();
    outlined consume of Data._Representation(v52, v54);
    v56 = v81;

    *(_QWORD *)(a2 + v56) = v55;
  }
  v57 = objc_msgSend(v35, sel_fallbackURL);
  if (v57)
  {
    v58 = v57;
    v59 = (uint64_t)v91;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = 0;
  }
  else
  {
    v60 = 1;
    v59 = (uint64_t)v91;
  }
  v61 = 1;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38)(v59, v60, 1, v36);
  outlined assign with take of URL?(v59, v87);
  v62 = objc_msgSend(v35, sel_preferredBroadcastingAttributes);
  *(_QWORD *)(a2 + v86) = v62;
  v63 = objc_msgSend(v35, sel_supportsContinuationOnTV);
  *(_BYTE *)(a2 + v85) = v63;
  v64 = objc_msgSend(v35, sel_invitationURL);
  if (v64)
  {
    v65 = v64;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v61 = 0;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38)(v48, v61, 1, v36);
  outlined assign with take of URL?(v48, v88);
  v66 = objc_msgSend(v35, sel_sceneAssociationBehavior);
  v67 = objc_msgSend(v66, sel_shouldAssociateScene);
  v68 = objc_msgSend(v66, sel_targetContentIdentifier);
  if (v68)
  {
    v69 = v68;
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v71;

  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  swift_bridgeObjectRetain();
  v73 = objc_msgSend(v66, sel_preferredSceneSessionRole);
  if (v73)
  {
    v74 = v73;
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v77 = v76;
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();

    v75 = 0;
    v77 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)v25 = v67;
  *(_QWORD *)(v25 + 8) = v70;
  *(_QWORD *)(v25 + 16) = v72;
  *(_QWORD *)(v25 + 24) = v75;
  *(_QWORD *)(v25 + 32) = v77;
  v78 = objc_msgSend(v35, sel_supportsActivityPreviews);
  *(_BYTE *)(a2 + v92) = v78;
  v79 = objc_msgSend(v35, sel_lifetimePolicy);

  *(_QWORD *)(a2 + v93) = v79;
}

uint64_t GroupActivityMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for generic != -1)
    swift_once();
  v2 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v3, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
  v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v5 = (_QWORD *)(a1 + v4[5]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + v4[6]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + v4[7]) = 0;
  v7 = a1 + v4[8];
  v8 = type metadata accessor for URL();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  *(_QWORD *)(a1 + v4[9]) = 0;
  *(_BYTE *)(a1 + v4[10]) = dyld_program_sdk_at_least() ^ 1;
  v9(a1 + v4[11], 1, 1, v8);
  v10 = v4[12];
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = a1 + v10;
  v12 = qword_1ED0B5BF8;
  v13 = qword_1ED0B5C10;
  *(_BYTE *)v11 = static SceneAssociationBehavior.default;
  *(_QWORD *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(v11 + 32) = v13;
  *(_BYTE *)(a1 + v4[13]) = 0;
  *(_QWORD *)(a1 + v4[14]) = 2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id GroupActivityMetadata.tuMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  char *v49;
  char *v50;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v41 - v6;
  v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivityMetadata.ActivityType?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupActivityMetadata.infoDictionaryActivityType.getter((uint64_t)v13);
  outlined init with copy of Participant(v1, (uint64_t)v10, type metadata accessor for GroupActivityMetadata);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined init with copy of Participant((uint64_t)v10, (uint64_t)v17, type metadata accessor for GroupActivityMetadata.ActivityType);
    outlined destroy of Participant((uint64_t)v10, type metadata accessor for GroupActivityMetadata);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for GroupActivityMetadata.ActivityType?);
  }
  else
  {
    outlined destroy of Participant((uint64_t)v10, type metadata accessor for GroupActivityMetadata);
    outlined init with take of GroupActivityMetadata.ActivityType((uint64_t)v13, (uint64_t)v17);
  }
  v48 = (void *)GroupActivityDescription.tuActivityContext.getter();
  outlined init with copy of URL?(v1 + v8[8], (uint64_t)v7, &demangling cache variable for type metadata for URL?);
  v18 = v1 + v8[11];
  v50 = v5;
  outlined init with copy of URL?(v18, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  v47 = *(unsigned __int8 *)(v1 + v8[10]);
  v19 = (uint64_t *)(v1 + v8[5]);
  v20 = *v19;
  v21 = v19[1];
  v22 = (uint64_t *)(v1 + v8[6]);
  v23 = v22[1];
  v45 = *v22;
  v46 = v20;
  v24 = *(_QWORD *)(v1 + v8[7]);
  v49 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24)
  {
    CGImageRef.thumbnailImageData(_:)(300);
    v43 = v26;
    v44 = v25;
  }
  else
  {
    v43 = 0xF000000000000000;
    v44 = 0;
  }
  v42 = *(_QWORD *)(v1 + v8[9]);
  v27 = (_QWORD *)(v1 + v8[12]);
  v28 = *(unsigned __int8 *)v27;
  v30 = v27[2];
  v29 = v27[3];
  v31 = v27[4];
  if (!v30)
  {
    swift_bridgeObjectRetain_n();
    v33 = 0;
    if (v31)
      goto LABEL_9;
LABEL_11:
    v34 = 0;
    goto LABEL_12;
  }
  v32 = v27[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v33 = (void *)MEMORY[0x1A1B048B4](v32, v30);
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_11;
LABEL_9:
  v34 = (void *)MEMORY[0x1A1B048B4](v29, v31);
  swift_bridgeObjectRelease();
LABEL_12:
  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD270]), sel_initWithTargetContentIdentifier_shouldAssociateScene_preferredSceneSessionRole_, v33, v28, v34);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v36 = *(_BYTE *)(v1 + v8[13]);
  v37 = *(_QWORD *)(v1 + v8[14]);
  v38 = objc_allocWithZone(MEMORY[0x1E0DBD268]);
  v39 = @nonobjc TUConversationActivityMetadata.init(context:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:sceneAssociationBehavior:supportsActivityPreviews:lifetimePolicy:)(v48, 0, 0xF000000000000000, (uint64_t)v49, (uint64_t)v50, v47, v46, v21, v45, v23, v44, v43, v42, v35, v36, v37);
  outlined destroy of Participant((uint64_t)v17, type metadata accessor for GroupActivityMetadata.ActivityType);
  return v39;
}

uint64_t type metadata accessor for GroupActivityMetadata.ActivityType(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivityMetadata.ActivityType);
}

uint64_t GroupActivityMetadata.ActivityType.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GroupActivityMetadata.ActivityType.description.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*GroupActivityMetadata.ActivityType.description.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t one-time initialization function for generic(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.generic, MEMORY[0x1E0D14E58]);
}

uint64_t outlined assign with take of GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t GroupActivityMetadata.ActivityType.init(description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t static GroupActivityMetadata.ActivityType.generic.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for generic, (uint64_t)static GroupActivityMetadata.ActivityType.generic, a1);
}

uint64_t one-time initialization function for collaboration(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.collaboration, MEMORY[0x1E0D14E08]);
}

uint64_t one-time initialization function for generic(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = type metadata accessor for GroupActivityDescription();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  __swift_allocate_value_buffer(v9, a2);
  v10 = __swift_project_value_buffer(v9, (uint64_t)a2);
  a3();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10, v8, v5);
}

uint64_t static GroupActivityMetadata.ActivityType.collaboration.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for collaboration, (uint64_t)static GroupActivityMetadata.ActivityType.collaboration, a1);
}

uint64_t one-time initialization function for listenTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.listenTogether, MEMORY[0x1E0D14E30]);
}

uint64_t static GroupActivityMetadata.ActivityType.listenTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for listenTogether, (uint64_t)static GroupActivityMetadata.ActivityType.listenTogether, a1);
}

uint64_t one-time initialization function for watchTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.watchTogether, MEMORY[0x1E0D14E20]);
}

uint64_t static GroupActivityMetadata.ActivityType.watchTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for watchTogether, (uint64_t)static GroupActivityMetadata.ActivityType.watchTogether, a1);
}

uint64_t one-time initialization function for playTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.playTogether, MEMORY[0x1E0D14DF0]);
}

uint64_t static GroupActivityMetadata.ActivityType.playTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for playTogether, (uint64_t)static GroupActivityMetadata.ActivityType.playTogether, a1);
}

uint64_t one-time initialization function for workoutTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.workoutTogether, MEMORY[0x1E0D14E40]);
}

uint64_t static GroupActivityMetadata.ActivityType.workoutTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for workoutTogether, (uint64_t)static GroupActivityMetadata.ActivityType.workoutTogether, a1);
}

uint64_t one-time initialization function for shopTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.shopTogether, MEMORY[0x1E0D14E00]);
}

uint64_t static GroupActivityMetadata.ActivityType.shopTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for shopTogether, (uint64_t)static GroupActivityMetadata.ActivityType.shopTogether, a1);
}

uint64_t one-time initialization function for readTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.readTogether, MEMORY[0x1E0D14DF8]);
}

uint64_t static GroupActivityMetadata.ActivityType.readTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for readTogether, (uint64_t)static GroupActivityMetadata.ActivityType.readTogether, a1);
}

uint64_t one-time initialization function for exploreTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.exploreTogether, MEMORY[0x1E0D14E38]);
}

uint64_t static GroupActivityMetadata.ActivityType.exploreTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for exploreTogether, (uint64_t)static GroupActivityMetadata.ActivityType.exploreTogether, a1);
}

uint64_t one-time initialization function for learnTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.learnTogether, MEMORY[0x1E0D14E10]);
}

uint64_t static GroupActivityMetadata.ActivityType.learnTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for learnTogether, (uint64_t)static GroupActivityMetadata.ActivityType.learnTogether, a1);
}

uint64_t one-time initialization function for createTogether(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.createTogether, MEMORY[0x1E0D14E28]);
}

uint64_t static GroupActivityMetadata.ActivityType.createTogether.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for createTogether, (uint64_t)static GroupActivityMetadata.ActivityType.createTogether, a1);
}

uint64_t one-time initialization function for screenSharing(uint64_t a1)
{
  return one-time initialization function for generic(a1, static GroupActivityMetadata.ActivityType.screenSharing, MEMORY[0x1E0D14E18]);
}

uint64_t static GroupActivityMetadata.ActivityType.screenSharing.getter@<X0>(uint64_t a1@<X8>)
{
  return static GroupActivityMetadata.ActivityType.generic.getter(&one-time initialization token for screenSharing, (uint64_t)static GroupActivityMetadata.ActivityType.screenSharing, a1);
}

uint64_t static GroupActivityMetadata.ActivityType.generic.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of Participant(v6, a3, type metadata accessor for GroupActivityMetadata.ActivityType);
}

uint64_t GroupActivityMetadata.ActivityType.hash(into:)()
{
  type metadata accessor for GroupActivityDescription();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14E60], MEMORY[0x1E0D14E70]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int GroupActivityMetadata.ActivityType.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for GroupActivityDescription();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14E60], MEMORY[0x1E0D14E70]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivityMetadata.ActivityType()
{
  Hasher.init(_seed:)();
  type metadata accessor for GroupActivityDescription();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14E60], MEMORY[0x1E0D14E70]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivityMetadata.ActivityType()
{
  type metadata accessor for GroupActivityDescription();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14E60], MEMORY[0x1E0D14E70]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivityMetadata.ActivityType()
{
  Hasher.init(_seed:)();
  type metadata accessor for GroupActivityDescription();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityDescription and conformance GroupActivityDescription, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14E60], MEMORY[0x1E0D14E70]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t GroupActivityMetadata.LifetimePolicy.tuConversationActivityLifetimePolicy.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GroupActivityMetadata.LifetimePolicy.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static GroupActivityMetadata.LifetimePolicy.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static GroupActivityMetadata.LifetimePolicy.endsWhenInitiatorLeaves.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void GroupActivityMetadata.LifetimePolicy.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static GroupActivityMetadata.LifetimePolicy.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int GroupActivityMetadata.LifetimePolicy.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t GroupActivityMetadata.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
}

uint64_t GroupActivityMetadata.type.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GroupActivityMetadata.ActivityType(a1, v1);
}

uint64_t (*GroupActivityMetadata.type.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t (*GroupActivityMetadata.title.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t (*GroupActivityMetadata.subtitle.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

void *GroupActivityMetadata.previewImage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 28));
  v2 = v1;
  return v1;
}

void GroupActivityMetadata.previewImage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 28);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*GroupActivityMetadata.previewImage.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.fallbackURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupActivityMetadata(0);
  return outlined init with copy of URL?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupActivityMetadata.fallbackURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 32);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*GroupActivityMetadata.fallbackURL.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.preferredBroadcastOptions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t (*GroupActivityMetadata.preferredBroadcastOptions.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.supportsContinuationOnTV.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 40));
}

uint64_t GroupActivityMetadata.supportsContinuationOnTV.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*GroupActivityMetadata.supportsContinuationOnTV.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.invitationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GroupActivityMetadata(0);
  return outlined init with copy of URL?(v1 + *(int *)(v3 + 44), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupActivityMetadata.invitationURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 44);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*GroupActivityMetadata.invitationURL.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.sceneAssociationBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 48);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 32);
  *(_BYTE *)a1 = *(_BYTE *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 GroupActivityMetadata.sceneAssociationBehavior.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v2 = *a1;
  v7 = *(__n128 *)(a1 + 8);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_QWORD *)a1 + 4);
  v5 = v1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)v5 = v2;
  result = v7;
  *(__n128 *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v4;
  return result;
}

uint64_t (*GroupActivityMetadata.sceneAssociationBehavior.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.supportsActivityPreviews.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 52));
}

uint64_t GroupActivityMetadata.supportsActivityPreviews.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*GroupActivityMetadata.supportsActivityPreviews.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  return GroupActivityMetadata.supportsActivityPreviews.modify;
}

uint64_t GroupActivityMetadata.supportsActivityPreviews.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

uint64_t GroupActivityMetadata.lifetimePolicy.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t GroupActivityMetadata.lifetimePolicy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  *(_QWORD *)(v1 + *(int *)(result + 56)) = v2;
  return result;
}

uint64_t (*GroupActivityMetadata.lifetimePolicy.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GroupActivityMetadata(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

GroupActivities::GroupActivityMetadata::CodingKeys_optional __swiftcall GroupActivityMetadata.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupActivityMetadata.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return (GroupActivities::GroupActivityMetadata::CodingKeys_optional)3;
  else
    return (GroupActivities::GroupActivityMetadata::CodingKeys_optional)v3;
}

GroupActivities::GroupActivityMetadata::CodingKeys_optional __swiftcall GroupActivityMetadata.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupActivities::GroupActivityMetadata::CodingKeys_optional)3;
}

uint64_t GroupActivityMetadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GroupActivityMetadata.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6B6361626C6C6166;
  if (a1 == 1)
    return 0x6974617469766E69;
  return 0xD000000000000018;
}

uint64_t GroupActivityMetadata.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6B6361626C6C6166;
  if (a1 == 1)
    return 0x6974617469766E69;
  return 0xD000000000000018;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivityMetadata.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x6974617469766E69;
  v4 = 0xED00004C52556E6FLL;
  v5 = 0x80000001A0F18D90;
  if (v2 != 1)
  {
    v3 = 0xD000000000000018;
    v4 = 0x80000001A0F18D90;
  }
  if (*a1)
    v6 = v3;
  else
    v6 = 0x6B6361626C6C6166;
  if (v2)
    v7 = v4;
  else
    v7 = 0xEB000000004C5255;
  v8 = 0x6974617469766E69;
  if (*a2 == 1)
    v5 = 0xED00004C52556E6FLL;
  else
    v8 = 0xD000000000000018;
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6B6361626C6C6166;
  if (*a2)
    v10 = v5;
  else
    v10 = 0xEB000000004C5255;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivityMetadata.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivityMetadata.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivityMetadata.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GroupActivityMetadata.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized GroupActivityMetadata.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GroupActivityMetadata.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB000000004C5255;
  v4 = 0xED00004C52556E6FLL;
  v5 = 0x6974617469766E69;
  if (v2 != 1)
  {
    v5 = 0xD000000000000018;
    v4 = 0x80000001A0F18D90;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6B6361626C6C6166;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupActivityMetadata.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6974617469766E69;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0x6B6361626C6C6166;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupActivityMetadata.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized GroupActivityMetadata.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupActivityMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupActivityMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupActivityMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v36 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupActivityMetadata.CodingKeys>);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generic != -1)
    swift_once();
  v14 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v15 = __swift_project_value_buffer(v14, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v15, (uint64_t)v13, type metadata accessor for GroupActivityMetadata.ActivityType);
  v16 = &v13[v11[5]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v13[v11[6]];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *(_QWORD *)&v13[v11[7]] = 0;
  v18 = (uint64_t)&v13[v11[8]];
  v19 = type metadata accessor for URL();
  v20 = *(void (**)(void))(*(_QWORD *)(v19 - 8) + 56);
  v39 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20)(v18, 1, 1, v19);
  *(_QWORD *)&v13[v11[9]] = 0;
  v21 = dyld_program_sdk_at_least();
  v36 = v11[10];
  v13[v36] = v21 ^ 1;
  v38 = &v13[v11[11]];
  v20();
  v22 = &v13[v11[12]];
  if (one-time initialization token for default != -1)
    swift_once();
  v23 = qword_1ED0B5BF8;
  v24 = qword_1ED0B5C10;
  *v22 = static SceneAssociationBehavior.default;
  *((_QWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 1) = xmmword_1ED0B5C00;
  *((_QWORD *)v22 + 4) = v24;
  v13[v11[13]] = 0;
  *(_QWORD *)&v13[v11[14]] = 2;
  v25 = one-time initialization token for default;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v25 != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.default);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1A0DB3000, v27, v28, "GroupActivityMetadata should no longer be encoded with your\nactivity. Please adopt asynchronous metadata.", v29, 2u);
    MEMORY[0x1A1B05CC4](v29, -1, -1);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys();
  v30 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v30)
  {
    v46 = 0;
    lazy protocol witness table accessor for type URL? and conformance <A> A?(&lazy protocol witness table cache variable for type URL? and conformance <A> A?, &lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E0CB0038], MEMORY[0x1E0DEE9A0]);
    v31 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined assign with take of URL?((uint64_t)v7, v39);
    v45 = 1;
    v32 = (uint64_t)v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined assign with take of URL?(v32, (uint64_t)v38);
    v44 = 2;
    v34 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v31);
    v35 = v37;
    v13[v36] = v34 & 1;
    outlined init with copy of Participant((uint64_t)v13, v35, type metadata accessor for GroupActivityMetadata);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return outlined destroy of Participant((uint64_t)v13, type metadata accessor for GroupActivityMetadata);
}

uint64_t GroupActivityMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupActivityMetadata.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1A0DB3000, v8, v9, "GroupActivityMetadata should no longer be encoded with your\nactivity. Please adopt asynchronous metadata.", v10, 2u);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for GroupActivityMetadata(0);
  v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  lazy protocol witness table accessor for type URL? and conformance <A> A?(&lazy protocol witness table cache variable for type URL? and conformance <A> A?, &lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E0CB0010], MEMORY[0x1E0DEE988]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v14 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupActivityMetadata@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupActivityMetadata.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivityMetadata(_QWORD *a1)
{
  return GroupActivityMetadata.encode(to:)(a1);
}

uint64_t GroupActivityMetadata.init(tuActivityMetadataBlob:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v7;
  _BYTE *v8;

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivityMetadata);
  v7 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v3)
  {

  }
  else if (v7)
  {
    GroupActivityMetadata.init(_:)(v7, a3);
    return outlined consume of Data._Representation(a1, a2);
  }
  lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError();
  swift_allocError();
  *v8 = 1;
  swift_willThrow();
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t GroupActivityMetadata.infoDictionaryActivityType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivityDescription?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v31 - v6;
  v8 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v9 = objc_msgSend(v8, sel_infoDictionary);

  if (!v9)
    goto LABEL_15;
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v10 + 16)
    || (v11 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000001A0F1CC50), (v12 & 1) == 0))
  {
    v34 = 0u;
    v35 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v34);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_14:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v34, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    v25 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 1, 1, v25);
  }
  if (!*(_QWORD *)(v33 + 16)
    || (v13 = *(_QWORD *)(v33 + 32), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), !*(_QWORD *)(v13 + 16))
    || (v14 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x80000001A0F1CC70), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
  v18 = *v16;
  v17 = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v32 = v18;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc();
    *(_QWORD *)&v34 = v24;
    *(_DWORD *)v23 = 136315138;
    v31[1] = v23 + 4;
    swift_bridgeObjectRetain();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v17, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v20, v21, "Using info dictionary activity type: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  GroupActivityDescription.init(id:)();
  outlined init with copy of URL?((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for GroupActivityDescription?);
  v27 = type metadata accessor for GroupActivityDescription();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v27) == 1)
  {
    v29 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 1, 1, v29);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(a1, v5, v27);
    v30 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 0, 1, v30);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for GroupActivityDescription?);
}

GroupActivities::GroupActivityMetadata::Experience_optional __swiftcall GroupActivityMetadata.Experience.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (GroupActivities::GroupActivityMetadata::Experience_optional)rawValue;
}

uint64_t GroupActivityMetadata.Experience.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance GroupActivityMetadata.Experience@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupActivityMetadata.Experience()
{
  lazy protocol witness table accessor for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivityMetadata.Experience()
{
  lazy protocol witness table accessor for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience();
  return RawRepresentable<>.encode(to:)();
}

void GroupActivityMetadata.experience.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*GroupActivityMetadata.experience.modify(_BYTE *a1))(_QWORD, _QWORD, _QWORD)
{
  *a1 = 2;
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupActivityMetadata.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for GroupActivityMetadata.localizedTitle : GroupActivityMetadata(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t GroupActivityMetadata.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GroupActivityMetadata.localizedTitle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (_QWORD *)(v1 + v3);
  v5 = v4[1];
  *(_QWORD *)a1 = *v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRetain();
  return GroupActivityMetadata.localizedTitle.modify;
}

uint64_t GroupActivityMetadata.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for GroupActivityMetadata.localizedSubtitle : GroupActivityMetadata(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t GroupActivityMetadata.subtitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*GroupActivityMetadata.localizedSubtitle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (_QWORD *)(v1 + v3);
  v5 = v4[1];
  *(_QWORD *)a1 = *v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRetain();
  return GroupActivityMetadata.localizedTitle.modify;
}

uint64_t GroupActivityMetadata.localizedTitle.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t GroupActivityMetadata.preferredBroadcastOptions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  *(_QWORD *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*GroupActivityMetadata.preferredBroadcastingAttributes.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 36);
  v4 = *(_QWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = v4;
  return GroupActivityMetadata.preferredBroadcastingAttributes.modify;
}

uint64_t GroupActivityMetadata.preferredBroadcastingAttributes.modify(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + *(int *)(result + 16)) = *(_QWORD *)result;
  return result;
}

uint64_t GroupActivityMetadata.contentAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 56)) == 1;
  return result;
}

uint64_t GroupActivityMetadata.contentAssociation.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  v4 = 1;
  if (v2 != 1)
    v4 = 2;
  *(_QWORD *)(v1 + *(int *)(result + 56)) = v4;
  return result;
}

uint64_t (*GroupActivityMetadata.contentAssociation.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for GroupActivityMetadata(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = *(_QWORD *)(v1 + v3) == 1;
  return GroupActivityMetadata.contentAssociation.modify;
}

uint64_t GroupActivityMetadata.contentAssociation.modify(uint64_t result)
{
  uint64_t v1;

  v1 = 1;
  if (*(_QWORD *)result != 1)
    v1 = 2;
  *(_QWORD *)(*(_QWORD *)(result + 8) + *(int *)(result + 16)) = v1;
  return result;
}

id @nonobjc TUConversationActivityMetadata.init(context:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:sceneAssociationBehavior:supportsActivityPreviews:lifetimePolicy:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16)
{
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  NSURL *v25;
  void *v26;
  void *v27;
  NSURL *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  Class v35;
  id v36;
  uint64_t v38;
  Class isa;
  void *v41;
  void *v42;

  if (a3 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a2, a3);
  }
  v22 = type metadata accessor for URL();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v26 = 0;
  if (v24(a4, 1, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v25);
    v26 = v27;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, v22);
  }
  v42 = v26;
  if (v24(a5, 1, v22) == 1)
  {
    v29 = 0;
    v30 = a10;
    if (a8)
      goto LABEL_8;
LABEL_11:
    v31 = 0;
    v32 = a12;
    if (v30)
      goto LABEL_9;
    goto LABEL_12;
  }
  URL._bridgeToObjectiveC()(v28);
  v29 = v34;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a5, v22);
  v30 = a10;
  if (!a8)
    goto LABEL_11;
LABEL_8:
  v31 = (void *)MEMORY[0x1A1B048B4](a7, a8);
  swift_bridgeObjectRelease();
  v32 = a12;
  if (v30)
  {
LABEL_9:
    v33 = (void *)MEMORY[0x1A1B048B4](a9, v30);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_12:
  v33 = 0;
LABEL_13:
  if (v32 >> 60 == 15)
  {
    v35 = 0;
  }
  else
  {
    v35 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a11, v32);
  }
  LOBYTE(v38) = a15 & 1;
  v36 = objc_msgSend(v41, sel_initWithContext_linkMetadata_fallbackURL_invitationURL_supportsContinuationOnTV_title_subTitle_imageData_preferredBroadcastingAttributes_sceneAssociationBehavior_supportsActivityPreviews_lifetimePolicy_, a1, isa, v42, v29, a6 & 1, v31, v33, v35, a13, a14, v38, a16);

  return v36;
}

BOOL specialized static GroupActivityMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  char v40;
  char v41;
  _BOOL8 result;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  char v54;
  char v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  void *v58;
  uint64_t v59;
  char v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  int *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  id v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;

  v4 = type metadata accessor for URL();
  v93 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v92 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  v7 = MEMORY[0x1E0C80A78](v6);
  v91 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v94 = (uint64_t)&v84 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v84 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v84 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v84 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v84 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v84 - v26;
  if ((MEMORY[0x1A1B03C0C](a1, a2) & 1) == 0)
    return 0;
  v28 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v29 = v28[5];
  v30 = (_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a1 + v29 + 8);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  if (v31)
  {
    if (!v33)
      return 0;
    if (*v30 != *v32 || v31 != v33)
    {
      v90 = v6;
      v34 = v16;
      v35 = a1;
      v36 = a2;
      v37 = v19;
      v38 = v13;
      v39 = v28;
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v28 = v39;
      v13 = v38;
      v19 = v37;
      a2 = v36;
      a1 = v35;
      v16 = v34;
      v6 = v90;
      v41 = v40;
      result = 0;
      if ((v41 & 1) == 0)
        return result;
    }
  }
  else if (v33)
  {
    return 0;
  }
  v43 = v28[6];
  v44 = (_QWORD *)(a1 + v43);
  v45 = *(_QWORD *)(a1 + v43 + 8);
  v46 = (_QWORD *)(a2 + v43);
  v47 = v46[1];
  if (!v45)
  {
    if (v47)
      return 0;
    goto LABEL_16;
  }
  if (!v47)
    return 0;
  if (*v44 == *v46 && v45 == v47)
    goto LABEL_16;
  v90 = v6;
  v48 = v16;
  v49 = a1;
  v50 = a2;
  v51 = v19;
  v52 = v13;
  v53 = v28;
  v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v28 = v53;
  v13 = v52;
  v19 = v51;
  a2 = v50;
  a1 = v49;
  v16 = v48;
  v6 = v90;
  v55 = v54;
  result = 0;
  if ((v55 & 1) != 0)
  {
LABEL_16:
    v90 = v4;
    v56 = v28[7];
    v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + v56);
    v58 = *(void **)(a2 + v56);
    if (v57)
    {
      if (!v58)
        return 0;
      v89 = v28;
      v87 = v57;
      type metadata accessor for CGImageRef(0);
      v88 = v59;
      v86 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, (uint64_t (*)(uint64_t))type metadata accessor for CGImageRef, (uint64_t)&protocol conformance descriptor for CGImageRef);
      v85 = v58;
      v87 = v87;
      v60 = static _CFObject.== infix(_:_:)();

      v28 = v89;
      if ((v60 & 1) == 0)
        return 0;
    }
    else if (v58)
    {
      return 0;
    }
    v84 = v13;
    v61 = v28;
    outlined init with copy of URL?(a1 + v28[8], (uint64_t)v27, &demangling cache variable for type metadata for URL?);
    v89 = v61;
    outlined init with copy of URL?(a2 + v61[8], (uint64_t)v25, &demangling cache variable for type metadata for URL?);
    v62 = v94;
    v63 = v94 + *(int *)(v6 + 48);
    outlined init with copy of URL?((uint64_t)v27, v94, &demangling cache variable for type metadata for URL?);
    v88 = v63;
    outlined init with copy of URL?((uint64_t)v25, v63, &demangling cache variable for type metadata for URL?);
    v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
    if (v64(v62, 1, v90) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for URL?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for URL?);
      if (v64(v88, 1, v90) == 1)
      {
        v65 = v64;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v94, &demangling cache variable for type metadata for URL?);
LABEL_29:
        if (*(_QWORD *)(a1 + v89[9]) != *(_QWORD *)(a2 + v89[9])
          || *(unsigned __int8 *)(a1 + v89[10]) != *(unsigned __int8 *)(a2 + v89[10]))
        {
          return 0;
        }
        v69 = v89;
        outlined init with copy of URL?(a1 + v89[11], (uint64_t)v19, &demangling cache variable for type metadata for URL?);
        outlined init with copy of URL?(a2 + v69[11], (uint64_t)v16, &demangling cache variable for type metadata for URL?);
        v70 = *(int *)(v6 + 48);
        v71 = (uint64_t)v16;
        v72 = v91;
        v73 = v91 + v70;
        outlined init with copy of URL?((uint64_t)v19, v91, &demangling cache variable for type metadata for URL?);
        outlined init with copy of URL?(v71, v73, &demangling cache variable for type metadata for URL?);
        v74 = v90;
        if (v65(v72, 1, v90) == 1)
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v71, &demangling cache variable for type metadata for URL?);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
          if (v65(v73, 1, v74) == 1)
          {
            outlined destroy of OS_dispatch_queue.SchedulerOptions?(v72, &demangling cache variable for type metadata for URL?);
LABEL_40:
            v80 = v89;
            v81 = v89[12];
            LOBYTE(v98) = *(_BYTE *)(a1 + v81);
            v99 = *(_OWORD *)(a1 + v81 + 8);
            v100 = *(_OWORD *)(a1 + v81 + 24);
            v82 = a2 + v81;
            LOBYTE(v95) = *(_BYTE *)v82;
            v83 = *(_OWORD *)(v82 + 24);
            v96 = *(_OWORD *)(v82 + 8);
            v97 = v83;
            if (specialized static SceneAssociationBehavior.== infix(_:_:)(&v98, &v95)
              && *(unsigned __int8 *)(a1 + v80[13]) == *(unsigned __int8 *)(a2 + v80[13]))
            {
              return *(_QWORD *)(a1 + v80[14]) == *(_QWORD *)(a2 + v80[14]);
            }
            return 0;
          }
          goto LABEL_38;
        }
        v94 = v71;
        v75 = (uint64_t)v84;
        outlined init with copy of URL?(v72, (uint64_t)v84, &demangling cache variable for type metadata for URL?);
        if (v65(v73, 1, v74) == 1)
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v94, &demangling cache variable for type metadata for URL?);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v75, v74);
LABEL_38:
          v66 = v72;
          goto LABEL_27;
        }
        v77 = v92;
        v76 = v93;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v92, v73, v74);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        v78 = dispatch thunk of static Equatable.== infix(_:_:)();
        v79 = *(void (**)(char *, uint64_t))(v76 + 8);
        v79(v77, v74);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v94, &demangling cache variable for type metadata for URL?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
        v79((char *)v75, v74);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v72, &demangling cache variable for type metadata for URL?);
        if ((v78 & 1) != 0)
          goto LABEL_40;
        return 0;
      }
    }
    else
    {
      outlined init with copy of URL?(v62, (uint64_t)v22, &demangling cache variable for type metadata for URL?);
      v87 = v64;
      if (v64(v88, 1, v90) != 1)
      {
        v67 = v90;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v92, v88, v90);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
        LODWORD(v88) = dispatch thunk of static Equatable.== infix(_:_:)();
        v68 = *(void (**)(char *, uint64_t))(v93 + 8);
        v68(v92, v67);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for URL?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for URL?);
        v68(v22, v67);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v94, &demangling cache variable for type metadata for URL?);
        v65 = v87;
        if ((v88 & 1) == 0)
          return 0;
        goto LABEL_29;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for URL?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v22, v90);
    }
    v66 = v94;
LABEL_27:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v66, &demangling cache variable for type metadata for (URL?, URL?));
    return 0;
  }
  return result;
}

uint64_t outlined init with take of GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t specialized GroupActivityMetadata.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupActivityMetadata.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.CodingKeys, &type metadata for GroupActivityMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.CodingKeys, &type metadata for GroupActivityMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.CodingKeys, &type metadata for GroupActivityMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.CodingKeys, &type metadata for GroupActivityMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.CodingKeys and conformance GroupActivityMetadata.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type URL? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for URL?);
    v10 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], a3);
    result = MEMORY[0x1A1B05BEC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in GroupActivityMetadata.ActivityType()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type GroupActivityMetadata.ActivityType and conformance GroupActivityMetadata.ActivityType, type metadata accessor for GroupActivityMetadata.ActivityType, (uint64_t)&protocol conformance descriptor for GroupActivityMetadata.ActivityType);
}

unint64_t lazy protocol witness table accessor for type GroupActivityMetadata.LifetimePolicy and conformance GroupActivityMetadata.LifetimePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.LifetimePolicy and conformance GroupActivityMetadata.LifetimePolicy;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.LifetimePolicy and conformance GroupActivityMetadata.LifetimePolicy)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.LifetimePolicy, &type metadata for GroupActivityMetadata.LifetimePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.LifetimePolicy and conformance GroupActivityMetadata.LifetimePolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.Experience, &type metadata for GroupActivityMetadata.Experience);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience;
  if (!lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityMetadata.Experience, &type metadata for GroupActivityMetadata.Experience);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityMetadata.Experience and conformance GroupActivityMetadata.Experience);
  }
  return result;
}

uint64_t sub_1A0F08A50@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 52));
  return result;
}

uint64_t sub_1A0F08A84(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  *(_BYTE *)(a2 + *(int *)(result + 52)) = v3;
  return result;
}

void sub_1A0F08AB4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1A0F08AC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 20));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A0F08B00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for GroupActivityMetadata(0) + 24));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A0F08B3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a2 = *(_QWORD *)(a1 + *(int *)(result + 36));
  return result;
}

uint64_t sub_1A0F08B70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = v3;
  return result;
}

uint64_t sub_1A0F08BA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for GroupActivityMetadata(0);
  *a2 = *(_QWORD *)(a1 + *(int *)(result + 56)) == 1;
  return result;
}

uint64_t sub_1A0F08BDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for GroupActivityMetadata(0);
  v5 = 1;
  if (v3 != 1)
    v5 = 2;
  *(_QWORD *)(a2 + *(int *)(result + 56)) = v5;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupActivityMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = *(void **)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    __dst = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for URL();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v18;
    if (v22(v19, 1, v20))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v26 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
    v27 = a3[11];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    if (v22((char *)a2 + v27, 1, v20))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v28, v29, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v28, 0, 1, v20);
    }
    v31 = a3[12];
    v32 = a3[13];
    v33 = (char *)a1 + v31;
    v34 = (char *)a2 + v31;
    *v33 = *v34;
    v35 = *((_QWORD *)v34 + 2);
    *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
    *((_QWORD *)v33 + 2) = v35;
    v36 = *((_QWORD *)v34 + 4);
    *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
    *((_QWORD *)v33 + 4) = v36;
    *((_BYTE *)a1 + v32) = *((_BYTE *)a2 + v32);
    *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GroupActivityMetadata(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = a1 + a2[8];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + a2[11];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupActivityMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__dst;

  v6 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  __dst = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v17;
  if (v21(v18, 1, v19))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v24 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[11];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  if (v21((const void *)(a2 + v25), 1, v19))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v26, v27, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  v29 = a3[12];
  v30 = a3[13];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  v33 = *(_QWORD *)(v32 + 16);
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v31 + 16) = v33;
  v34 = *(_QWORD *)(v32 + 32);
  *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
  *(_QWORD *)(v31 + 32) = v34;
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GroupActivityMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = *(void **)(a1 + v13);
  v15 = *(void **)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  v16 = v15;

  v17 = a3[8];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_7:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v26 = a3[11];
  v27 = (void *)(a1 + v26);
  v28 = (void *)(a2 + v26);
  v29 = v22((void *)(a1 + v26), 1, v20);
  v30 = v22(v28, 1, v20);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v27, v28, v20);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v27, v20);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v27, v28, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
LABEL_13:
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)v33 = *(_BYTE *)(a2 + v32);
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(a2 + v32 + 8);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(a2 + v32 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v33 + 24) = *(_QWORD *)(v34 + 24);
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for GroupActivityMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;

  v6 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[11];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v13((const void *)(a2 + v16), 1, v11))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v17, v18, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
  }
  v20 = a3[12];
  v21 = a3[13];
  v22 = a1 + v20;
  v23 = (__int128 *)(a2 + v20);
  v24 = *v23;
  v25 = v23[1];
  *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
  *(_OWORD *)v22 = v24;
  *(_OWORD *)(v22 + 16) = v25;
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for GroupActivityMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = a3[8];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for URL();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v28 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[11];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = v24((void *)(a1 + v29), 1, v22);
  v33 = v24(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v30, v31, v22);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v30, v31, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
LABEL_13:
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_BYTE *)v36 = *(_BYTE *)(a2 + v35);
  v38 = *(_QWORD *)(a2 + v35 + 16);
  *(_QWORD *)(v36 + 8) = *(_QWORD *)(a2 + v35 + 8);
  *(_QWORD *)(v36 + 16) = v38;
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v37 + 32);
  *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
  *(_QWORD *)(v36 + 32) = v39;
  swift_bridgeObjectRelease();
  v40 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v40) = *(_QWORD *)(a2 + v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0F09868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for GroupActivityMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0F09930(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for GroupActivityMetadata.ActivityType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GroupActivityMetadata.ActivityType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityMetadata.ActivityType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0F09B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GroupActivityMetadata.ActivityType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0F09BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivityDescription();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for GroupActivityMetadata.ActivityType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupActivityDescription();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityMetadata.LifetimePolicy()
{
  return &type metadata for GroupActivityMetadata.LifetimePolicy;
}

uint64_t storeEnumTagSinglePayload for GroupActivityMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0F09CB4 + 4 * byte_1A0F18795[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0F09CE8 + 4 * byte_1A0F18790[v4]))();
}

uint64_t sub_1A0F09CE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0F09CF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0F09CF8);
  return result;
}

uint64_t sub_1A0F09D04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0F09D0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0F09D10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0F09D18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityMetadata.CodingKeys()
{
  return &type metadata for GroupActivityMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GroupActivityMetadata.Experience(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0F09D80 + 4 * byte_1A0F1879F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0F09DB4 + 4 * byte_1A0F1879A[v4]))();
}

uint64_t sub_1A0F09DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0F09DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0F09DC4);
  return result;
}

uint64_t sub_1A0F09DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0F09DD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0F09DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0F09DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityMetadata.Experience()
{
  return &type metadata for GroupActivityMetadata.Experience;
}

uint64_t *GroupSessionEndpointIdentifier.systemCoordinator.unsafeMutableAddressor()
{
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  return &static GroupSessionEndpointIdentifier.systemCoordinator;
}

uint64_t one-time initialization function for identity()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for XPCIdentity();
  __swift_allocate_value_buffer(v0, static SystemCoordinatorInterface.identity);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static SystemCoordinatorInterface.identity);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x1E0D14AA0], v0);
}

uint64_t SystemCoordinatorInterface.identity.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for identity != -1)
    swift_once();
  v0 = type metadata accessor for XPCIdentity();
  return __swift_project_value_buffer(v0, (uint64_t)static SystemCoordinatorInterface.identity);
}

uint64_t static SystemCoordinatorInterface.identity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SystemCoordinatorInterface.identity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id one-time initialization function for hostObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPSystemCoordinatorXPCHost, &static SystemCoordinatorInterface.hostObjectInterface);
}

_QWORD *SystemCoordinatorInterface.hostObjectInterface.unsafeMutableAddressor()
{
  if (one-time initialization token for hostObjectInterface != -1)
    swift_once();
  return &static SystemCoordinatorInterface.hostObjectInterface;
}

id static SystemCoordinatorInterface.hostObjectInterface.getter()
{
  return static SystemCoordinatorInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static SystemCoordinatorInterface.hostObjectInterface);
}

void static SystemCoordinatorInterface.hostObjectInterface.setter(void *a1)
{
  static SystemCoordinatorInterface.hostObjectInterface.setter(a1, &one-time initialization token for hostObjectInterface, (void **)&static SystemCoordinatorInterface.hostObjectInterface);
}

uint64_t (*static SystemCoordinatorInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

id one-time initialization function for clientObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPSystemCoordinatorXPCClient, &static SystemCoordinatorInterface.clientObjectInterface);
}

id one-time initialization function for hostObjectInterface(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, *a2);
  *a3 = result;
  return result;
}

_QWORD *SystemCoordinatorInterface.clientObjectInterface.unsafeMutableAddressor()
{
  if (one-time initialization token for clientObjectInterface != -1)
    swift_once();
  return &static SystemCoordinatorInterface.clientObjectInterface;
}

id static SystemCoordinatorInterface.clientObjectInterface.getter()
{
  return static SystemCoordinatorInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static SystemCoordinatorInterface.clientObjectInterface);
}

id static SystemCoordinatorInterface.hostObjectInterface.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

void static SystemCoordinatorInterface.clientObjectInterface.setter(void *a1)
{
  static SystemCoordinatorInterface.hostObjectInterface.setter(a1, &one-time initialization token for clientObjectInterface, (void **)&static SystemCoordinatorInterface.clientObjectInterface);
}

void static SystemCoordinatorInterface.hostObjectInterface.setter(void *a1, _QWORD *a2, void **a3)
{
  void *v5;

  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *a3;
  *a3 = a1;

}

uint64_t (*static SystemCoordinatorInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance SystemCoordinatorInterface@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SystemCoordinatorInterface.identity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance SystemCoordinatorInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance SystemCoordinatorInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static SystemCoordinatorInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance SystemCoordinatorInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance SystemCoordinatorInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static SystemCoordinatorInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance SystemCoordinatorInterface(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  swift_beginAccess();
  return *a4;
}

void one-time initialization function for systemCoordinator()
{
  static GroupSessionEndpointIdentifier.systemCoordinator = 0xD00000000000002CLL;
  *(_QWORD *)algn_1EE5EB4D0 = 0x80000001A0F1AB70;
}

void static GroupSessionEndpointIdentifier.systemCoordinator.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x80000001A0F1AB70;
}

ValueMetadata *type metadata accessor for SystemCoordinatorInterface()
{
  return &type metadata for SystemCoordinatorInterface;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t Asset.ID.storageLocation.getter()
{
  return MEMORY[0x1E0D10880]();
}

uint64_t Asset.ID.referenceSignature.getter()
{
  return MEMORY[0x1E0D10888]();
}

uint64_t Asset.ID.signature.getter()
{
  return MEMORY[0x1E0D10890]();
}

uint64_t type metadata accessor for Asset.ID()
{
  return MEMORY[0x1E0D10898]();
}

uint64_t Asset.Protector.init(securityKey:privacyKey:)()
{
  return MEMORY[0x1E0D108A0]();
}

uint64_t type metadata accessor for Asset.Protector()
{
  return MEMORY[0x1E0D108A8]();
}

uint64_t type metadata accessor for Asset()
{
  return MEMORY[0x1E0D108B8]();
}

uint64_t AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)()
{
  return MEMORY[0x1E0D108C8]();
}

uint64_t type metadata accessor for AssetUploadRequest()
{
  return MEMORY[0x1E0D108D0]();
}

uint64_t AssetDownloadRequest.init(asset:fileURL:credential:)()
{
  return MEMORY[0x1E0D108D8]();
}

uint64_t AssetDownloadRequest.init(skeleton:fileURL:)()
{
  return MEMORY[0x1E0D108E0]();
}

uint64_t type metadata accessor for AssetDownloadRequest()
{
  return MEMORY[0x1E0D108E8]();
}

uint64_t type metadata accessor for AssetUploadCoordinator()
{
  return MEMORY[0x1E0D10908]();
}

uint64_t type metadata accessor for AssetDownloadCoordinator()
{
  return MEMORY[0x1E0D10928]();
}

uint64_t static AssetManager.shared.getter()
{
  return MEMORY[0x1E0D10938]();
}

uint64_t AssetManager.process(request:)()
{
  return MEMORY[0x1E0D10940]();
}

{
  return MEMORY[0x1E0D10950]();
}

{
  return MEMORY[0x1E0D10960]();
}

{
  return MEMORY[0x1E0D10970]();
}

uint64_t type metadata accessor for AssetManager()
{
  return MEMORY[0x1E0D10980]();
}

uint64_t AssetSkeleton.asset.getter()
{
  return MEMORY[0x1E0D10990]();
}

uint64_t AssetSkeleton.assetID.getter()
{
  return MEMORY[0x1E0D10998]();
}

uint64_t type metadata accessor for AssetSkeleton()
{
  return MEMORY[0x1E0D109A0]();
}

uint64_t Credential.Builder.init(tenantName:requestorID:accessToken:)()
{
  return MEMORY[0x1E0D109C0]();
}

uint64_t Credential.Builder.setExpirationDate(_:)()
{
  return MEMORY[0x1E0D109C8]();
}

uint64_t Credential.Builder.build()()
{
  return MEMORY[0x1E0D109D0]();
}

uint64_t type metadata accessor for Credential.Builder()
{
  return MEMORY[0x1E0D109D8]();
}

uint64_t type metadata accessor for Credential()
{
  return MEMORY[0x1E0D109E0]();
}

uint64_t type metadata accessor for SimultaneousTransferError()
{
  return MEMORY[0x1E0D109E8]();
}

uint64_t type metadata accessor for Signal()
{
  return MEMORY[0x1E0D109F0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t DataProtocol.copyBytes<A>(to:from:)()
{
  return MEMORY[0x1E0CAE518]();
}

uint64_t Notification.userInfo.getter()
{
  return MEMORY[0x1E0CAE638]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x1E0CAE648]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t URLResourceValues.fileSize.getter()
{
  return MEMORY[0x1E0CAF3C0]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x1E0CAF3D8]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x1E0CAF5D8]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.getter()
{
  return MEMORY[0x1E0CAF5E0]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1E0CAF628]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t URL.absoluteURL.getter()
{
  return MEMORY[0x1E0CAFD38]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x1E0CAFDC0]();
}

uint64_t URL.init(fileURLWithPath:relativeTo:)()
{
  return MEMORY[0x1E0CAFDC8]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x1E0CAFDD8]();
}

uint64_t static URL.temporaryDirectory.getter()
{
  return MEMORY[0x1E0CAFE30]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x1E0CAFE38](retstr);
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t URL.init(string:relativeTo:)()
{
  return MEMORY[0x1E0CAFF88]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x1E0CB0088]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1E0CB00A0]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x1E0CB00F0]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x1E0CB0110]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x1E0CB01B0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB0220]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t Data.range(of:options:in:)()
{
  return MEMORY[0x1E0CB0268]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x1E0CB07C0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1E0CB0910]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x1E0CB0930]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x1E0CB0970]();
}

uint64_t UUID.uuid.getter()
{
  return MEMORY[0x1E0CB0978]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t type metadata accessor for Attachment.MMCSMetadata.UploadStatus()
{
  return MEMORY[0x1E0D14908]();
}

uint64_t Attachment.MMCSMetadata.assetSkeleton.getter()
{
  return MEMORY[0x1E0D14918]();
}

uint64_t Attachment.MMCSMetadata.status.getter()
{
  return MEMORY[0x1E0D14920]();
}

uint64_t type metadata accessor for Attachment.MMCSMetadata()
{
  return MEMORY[0x1E0D14928]();
}

uint64_t Attachment.UpdatingBlob.data.getter()
{
  return MEMORY[0x1E0D14938]();
}

uint64_t Attachment.UpdatingBlob.init(data:)()
{
  return MEMORY[0x1E0D14940]();
}

uint64_t type metadata accessor for Attachment.UpdatingBlob()
{
  return MEMORY[0x1E0D14948]();
}

uint64_t Attachment.mmcsMetadata.getter()
{
  return MEMORY[0x1E0D14950]();
}

uint64_t Attachment.id.getter()
{
  return MEMORY[0x1E0D14958]();
}

uint64_t Attachment.Metadata.developerMetadata.getter()
{
  return MEMORY[0x1E0D14960]();
}

uint64_t type metadata accessor for Attachment.Metadata()
{
  return MEMORY[0x1E0D14968]();
}

uint64_t Attachment.metadata.getter()
{
  return MEMORY[0x1E0D14970]();
}

uint64_t type metadata accessor for Attachment()
{
  return MEMORY[0x1E0D14980]();
}

uint64_t Entitlement.rawValue.getter()
{
  return MEMORY[0x1E0D14998]();
}

uint64_t type metadata accessor for Entitlement()
{
  return MEMORY[0x1E0D149A8]();
}

uint64_t PubSubTopic.Participant.participantID.getter()
{
  return MEMORY[0x1E0D149B8]();
}

uint64_t PubSubTopic.Participant.isSaltVerified.getter()
{
  return MEMORY[0x1E0D149C0]();
}

uint64_t type metadata accessor for PubSubTopic.Participant()
{
  return MEMORY[0x1E0D149C8]();
}

uint64_t PubSubTopic.reporterTag.getter()
{
  return MEMORY[0x1E0D149E0]();
}

Swift::Void __swiftcall PubSubTopic.unsubscribe(force:)(Swift::Bool force)
{
  MEMORY[0x1E0D149E8](force);
}

uint64_t PubSubTopic.$subscribers.getter()
{
  return MEMORY[0x1E0D149F0]();
}

uint64_t type metadata accessor for PubSubTopic.Configuration()
{
  return MEMORY[0x1E0D149F8]();
}

uint64_t PubSubTopic.isAvailableUnsafe.getter()
{
  return MEMORY[0x1E0D14A08]();
}

uint64_t PubSubTopic.retrieveNextMessage()()
{
  return MEMORY[0x1E0D14A10]();
}

uint64_t PubSubTopic.refreshDataCryptorProvider(with:)()
{
  return MEMORY[0x1E0D14A18]();
}

uint64_t static PubSubTopic.State.== infix(_:_:)()
{
  return MEMORY[0x1E0D14A20]();
}

uint64_t type metadata accessor for PubSubTopic.State()
{
  return MEMORY[0x1E0D14A30]();
}

uint64_t PubSubTopic.queue.getter()
{
  return MEMORY[0x1E0D14A40]();
}

uint64_t PubSubTopic.Message.participants.getter()
{
  return MEMORY[0x1E0D14A48]();
}

uint64_t PubSubTopic.Message.data.getter()
{
  return MEMORY[0x1E0D14A50]();
}

uint64_t PubSubTopic.Message.seqNum.getter()
{
  return MEMORY[0x1E0D14A58]();
}

uint64_t type metadata accessor for PubSubTopic.Message()
{
  return MEMORY[0x1E0D14A60]();
}

uint64_t PubSubTopic.publish(message:to:previousSeqNumUnacked:)()
{
  return MEMORY[0x1E0D14A68]();
}

uint64_t PubSubTopic.reporter.getter()
{
  return MEMORY[0x1E0D14A70]();
}

uint64_t UploadToken.storageLocation.getter()
{
  return MEMORY[0x1E0D14A80]();
}

uint64_t type metadata accessor for UploadToken()
{
  return MEMORY[0x1E0D14A90]();
}

uint64_t type metadata accessor for XPCIdentity()
{
  return MEMORY[0x1E0D14AA8]();
}

uint64_t PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)()
{
  return MEMORY[0x1E0D14AB0]();
}

uint64_t type metadata accessor for PluginClient.Configuration()
{
  return MEMORY[0x1E0D14AB8]();
}

uint64_t PluginClient.init(config:queue:reporter:reporterTag:)()
{
  return MEMORY[0x1E0D14AC0]();
}

uint64_t type metadata accessor for PluginClient()
{
  return MEMORY[0x1E0D14AC8]();
}

uint64_t PubSubClient.__allocating_init(pluginClient:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return MEMORY[0x1E0D14AD0]();
}

uint64_t dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  return MEMORY[0x1E0D14AD8]();
}

uint64_t type metadata accessor for PubSubClient.TopicCategory()
{
  return MEMORY[0x1E0D14AE8]();
}

uint64_t dispatch thunk of PubSubClient.updateVirtualParticipant(_:localParticipantID:)()
{
  return MEMORY[0x1E0D14AF8]();
}

uint64_t dispatch thunk of PubSubClient.close()()
{
  return MEMORY[0x1E0D14B00]();
}

uint64_t type metadata accessor for PubSubClient()
{
  return MEMORY[0x1E0D14B08]();
}

uint64_t dispatch thunk of StateMachine.currentState.getter()
{
  return MEMORY[0x1E0D14B18]();
}

uint64_t StateMachine.init(initialState:transitions:)()
{
  return MEMORY[0x1E0D14B20]();
}

uint64_t StateMachine.Transition.init(from:to:event:)()
{
  return MEMORY[0x1E0D14B28]();
}

uint64_t dispatch thunk of StateMachine.execute(_:)()
{
  return MEMORY[0x1E0D14B38]();
}

uint64_t static XPCInterface.isConnectionEntitled(_:)()
{
  return MEMORY[0x1E0D14B48]();
}

uint64_t type metadata accessor for AccountMember()
{
  return MEMORY[0x1E0D14B58]();
}

uint64_t type metadata accessor for DownloadToken()
{
  return MEMORY[0x1E0D14B68]();
}

uint64_t CurrentSubject.init(wrappedValue:)()
{
  return MEMORY[0x1E0D14B70]();
}

uint64_t CurrentSubject.wrappedValue.modify()
{
  return MEMORY[0x1E0D14B78]();
}

uint64_t CurrentSubject.wrappedValue.getter()
{
  return MEMORY[0x1E0D14B80]();
}

uint64_t CurrentSubject.wrappedValue.setter()
{
  return MEMORY[0x1E0D14B88]();
}

uint64_t CurrentSubject.projectedValue.getter()
{
  return MEMORY[0x1E0D14B90]();
}

uint64_t type metadata accessor for CurrentSubject()
{
  return MEMORY[0x1E0D14B98]();
}

uint64_t DatagramClient.Configuration.init(endpoint:establishChannelMaxAttempts:establishChannelRetryInterval:egressMessagePayloadMaxSizeBytes:)()
{
  return MEMORY[0x1E0D14BA8]();
}

uint64_t type metadata accessor for DatagramClient.Configuration()
{
  return MEMORY[0x1E0D14BB0]();
}

uint64_t DatagramClient.init(config:queue:)()
{
  return MEMORY[0x1E0D14BB8]();
}

uint64_t type metadata accessor for DatagramClient()
{
  return MEMORY[0x1E0D14BC8]();
}

uint64_t type metadata accessor for PluginEndpoint()
{
  return MEMORY[0x1E0D14BD8]();
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  return MEMORY[0x1E0D14BE0]();
}

uint64_t AsyncSerialQueue.perform(_:)()
{
  return MEMORY[0x1E0D14BF0]();
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  return MEMORY[0x1E0D14BF8]();
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  return MEMORY[0x1E0D14C00]();
}

uint64_t type metadata accessor for DatagramEndpoint()
{
  return MEMORY[0x1E0D14C18]();
}

uint64_t AddressableMember.init(handle:)()
{
  return MEMORY[0x1E0D14C20]();
}

uint64_t type metadata accessor for AddressableMember()
{
  return MEMORY[0x1E0D14C30]();
}

uint64_t dispatch thunk of PubSubTopicRecord.acknowledge()()
{
  return MEMORY[0x1E0D14C40]();
}

uint64_t dispatch thunk of PubSubTopicRecord.publisherID.getter()
{
  return MEMORY[0x1E0D14C48]();
}

uint64_t dispatch thunk of PubSubTopicRecord.toParticipantIDs.getter()
{
  return MEMORY[0x1E0D14C50]();
}

uint64_t dispatch thunk of PubSubTopicRecord.data.getter()
{
  return MEMORY[0x1E0D14C58]();
}

uint64_t dispatch thunk of XPCHostConnection.destroyConnection()()
{
  return MEMORY[0x1E0D14C68]();
}

uint64_t XPCHostConnection.init(connection:queue:)()
{
  return MEMORY[0x1E0D14C70]();
}

uint64_t XPCHostConnection.clientObject.getter()
{
  return MEMORY[0x1E0D14C78]();
}

uint64_t XPCHostConnection.queue.getter()
{
  return MEMORY[0x1E0D14C90]();
}

uint64_t dispatch thunk of PubSubTopicReporter.emitAndRemoveReport(forTag:)()
{
  return MEMORY[0x1E0D14CE8]();
}

uint64_t PubSubTopicReporter.queue.getter()
{
  return MEMORY[0x1E0D14CF0]();
}

uint64_t static UnreliableMessenger.ClosedReason.== infix(_:_:)()
{
  return MEMORY[0x1E0D14D00]();
}

uint64_t UnreliableMessenger.Configuration.init(datagramPayloadMaxSizeBytes:outgoingQueueMaxSize:channelStreamMaxTries:channelStreamRetryInterval:seqNumBufferSize:)()
{
  return MEMORY[0x1E0D14D08]();
}

uint64_t type metadata accessor for UnreliableMessenger.Configuration()
{
  return MEMORY[0x1E0D14D10]();
}

uint64_t UnreliableMessenger.$activeReliableSubscribers.modify()
{
  return MEMORY[0x1E0D14D18]();
}

uint64_t UnreliableMessenger.refreshDataCryptorProvider(with:)()
{
  return MEMORY[0x1E0D14D20]();
}

uint64_t UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)()
{
  return MEMORY[0x1E0D14D28]();
}

uint64_t UnreliableMessenger.send(_:to:completion:)()
{
  return MEMORY[0x1E0D14D30]();
}

Swift::Void __swiftcall UnreliableMessenger.close()()
{
  MEMORY[0x1E0D14D38]();
}

uint64_t UnreliableMessenger.start(dataCryptorProvider:)()
{
  return MEMORY[0x1E0D14D40]();
}

uint64_t UnreliableMessenger.Message.fromParticipantID.getter()
{
  return MEMORY[0x1E0D14D48]();
}

uint64_t UnreliableMessenger.Message.data.getter()
{
  return MEMORY[0x1E0D14D50]();
}

uint64_t type metadata accessor for UnreliableMessenger()
{
  return MEMORY[0x1E0D14D58]();
}

uint64_t ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)()
{
  return MEMORY[0x1E0D14D68]();
}

uint64_t type metadata accessor for ActivitySessionEvent()
{
  return MEMORY[0x1E0D14D70]();
}

uint64_t AttachmentDataReport.init(isSubscribe:responseTime:)()
{
  return MEMORY[0x1E0D14D78]();
}

uint64_t AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)()
{
  return MEMORY[0x1E0D14D80]();
}

uint64_t AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)()
{
  return MEMORY[0x1E0D14D88]();
}

uint64_t type metadata accessor for AttachmentDataReport()
{
  return MEMORY[0x1E0D14D90]();
}

uint64_t dispatch thunk of TopicCryptorProvider.refresh(with:)()
{
  return MEMORY[0x1E0D14DA8]();
}

uint64_t dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)()
{
  return MEMORY[0x1E0D14DB0]();
}

uint64_t dispatch thunk of AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)()
{
  return MEMORY[0x1E0D14DB8]();
}

uint64_t AttachmentLedgerClient.Config.init(participantIDSalt:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:)()
{
  return MEMORY[0x1E0D14DC0]();
}

uint64_t type metadata accessor for AttachmentLedgerClient.Config()
{
  return MEMORY[0x1E0D14DC8]();
}

uint64_t AttachmentLedgerClient.__allocating_init(client:config:localParticipantID:)()
{
  return MEMORY[0x1E0D14DD0]();
}

uint64_t type metadata accessor for AttachmentLedgerClient()
{
  return MEMORY[0x1E0D14DD8]();
}

uint64_t GroupActivityDescription.tuActivityContext.getter()
{
  return MEMORY[0x1E0D14DE8]();
}

uint64_t static GroupActivityDescription.== infix(_:_:)()
{
  return MEMORY[0x1E0D14E48]();
}

uint64_t GroupActivityDescription.init(id:)()
{
  return MEMORY[0x1E0D14E50]();
}

uint64_t type metadata accessor for GroupActivityDescription()
{
  return MEMORY[0x1E0D14E60]();
}

uint64_t static SharableObjectIdentifier.identifier<A, B>(ofType:with:)()
{
  return MEMORY[0x1E0D14E78]();
}

uint64_t static SharableObjectIdentifier.identifier<A>(ofType:with:)()
{
  return MEMORY[0x1E0D14E80]();
}

uint64_t ConversationManagerClient.registerEndpointProvider(_:)()
{
  return MEMORY[0x1E0D14EA8]();
}

uint64_t ConversationManagerClient.onActivitySessionsChanged.getter()
{
  return MEMORY[0x1E0D14EB0]();
}

Swift::Void __swiftcall ConversationManagerClient.unregisterEndpointProvider(identifier:)(Swift::String identifier)
{
  MEMORY[0x1E0D14EB8](identifier._countAndFlagsBits, identifier._object);
}

uint64_t static ConversationManagerClient.shared.getter()
{
  return MEMORY[0x1E0D14EC0]();
}

uint64_t type metadata accessor for ConversationManagerClient()
{
  return MEMORY[0x1E0D14ED8]();
}

uint64_t PresenceSessionParticipant.isCurrentDevice.getter()
{
  return MEMORY[0x1E0D14F10]();
}

uint64_t PresenceSessionParticipant.id.getter()
{
  return MEMORY[0x1E0D14F18]();
}

uint64_t PresenceSessionParticipant.handle.getter()
{
  return MEMORY[0x1E0D14F20]();
}

uint64_t type metadata accessor for PresenceSessionParticipant()
{
  return MEMORY[0x1E0D14F28]();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PluginAttachmentLedgerTopic.unsubscribe()()
{
  MEMORY[0x1E0D14F38]();
}

uint64_t PluginAttachmentLedgerTopic.updateStatus(id:status:)()
{
  return MEMORY[0x1E0D14F48]();
}

uint64_t PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.getter()
{
  return MEMORY[0x1E0D14F60]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic.Configuration()
{
  return MEMORY[0x1E0D14F68]();
}

uint64_t PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  return MEMORY[0x1E0D14F70]();
}

uint64_t PluginAttachmentLedgerTopic.requestUploadToken()()
{
  return MEMORY[0x1E0D14F80]();
}

uint64_t PluginAttachmentLedgerTopic.requestDownloadToken(for:)()
{
  return MEMORY[0x1E0D14F90]();
}

uint64_t PluginAttachmentLedgerTopic.State.ShutdownInfo.pendingAttachments.getter()
{
  return MEMORY[0x1E0D14FA0]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason()
{
  return MEMORY[0x1E0D14FB0]();
}

uint64_t PluginAttachmentLedgerTopic.State.ShutdownInfo.config.getter()
{
  return MEMORY[0x1E0D14FC8]();
}

uint64_t PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter()
{
  return MEMORY[0x1E0D14FD0]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo()
{
  return MEMORY[0x1E0D14FD8]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic.State.RetryInfo()
{
  return MEMORY[0x1E0D15010]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic.State()
{
  return MEMORY[0x1E0D15018]();
}

uint64_t PluginAttachmentLedgerTopic.remove(id:)()
{
  return MEMORY[0x1E0D15038]();
}

uint64_t PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  return MEMORY[0x1E0D15048]();
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic()
{
  return MEMORY[0x1E0D15058]();
}

uint64_t type metadata accessor for AuthorizationRequestOverrides.PromptCondition()
{
  return MEMORY[0x1E0D15070]();
}

uint64_t AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)()
{
  return MEMORY[0x1E0D15078]();
}

uint64_t type metadata accessor for AuthorizationRequestOverrides()
{
  return MEMORY[0x1E0D15080]();
}

uint64_t PresenceSessionConnectionInfo.endpoint.getter()
{
  return MEMORY[0x1E0D15088]();
}

uint64_t type metadata accessor for BackgroundSessionManagerClient()
{
  return MEMORY[0x1E0D15098]();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.getter()
{
  return MEMORY[0x1E0D150A0]();
}

uint64_t type metadata accessor for CPManagedConfigurationObserver()
{
  return MEMORY[0x1E0D150A8]();
}

uint64_t PresenceSessionCreationRequest.init(id:isCrossAccount:)()
{
  return MEMORY[0x1E0D150B8]();
}

uint64_t type metadata accessor for PresenceSessionCreationRequest()
{
  return MEMORY[0x1E0D150C0]();
}

uint64_t ActivitySessionClientConnection.setActivityPublisher.getter()
{
  return MEMORY[0x1E0D150C8]();
}

uint64_t ActivitySessionClientConnection.setStateCallback.setter()
{
  return MEMORY[0x1E0D150D0]();
}

uint64_t ActivitySessionClientConnection.requestParticipants(for:)()
{
  return MEMORY[0x1E0D150D8]();
}

uint64_t ActivitySessionClientConnection.setDataCryptorCallback.setter()
{
  return MEMORY[0x1E0D150E0]();
}

uint64_t ActivitySessionClientConnection.receivedResourceCallback.setter()
{
  return MEMORY[0x1E0D150E8]();
}

uint64_t ActivitySessionClientConnection.serverDisconnectedCallback.setter()
{
  return MEMORY[0x1E0D150F0]();
}

uint64_t ActivitySessionClientConnection.setAssociatedSceneCallback.setter()
{
  return MEMORY[0x1E0D150F8]();
}

uint64_t ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter()
{
  return MEMORY[0x1E0D15100]();
}

uint64_t type metadata accessor for ActivitySessionClientConnection()
{
  return MEMORY[0x1E0D15108]();
}

uint64_t GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)()
{
  return MEMORY[0x1E0D15118]();
}

uint64_t type metadata accessor for GroupSessionDataCryptorProvider()
{
  return MEMORY[0x1E0D15128]();
}

uint64_t PresenceSessionClientConnection.handleUpdatedPresentDevices.setter()
{
  return MEMORY[0x1E0D15130]();
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.setter()
{
  return MEMORY[0x1E0D15138]();
}

uint64_t type metadata accessor for PresenceSessionClientConnection()
{
  return MEMORY[0x1E0D15140]();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter()
{
  return MEMORY[0x1E0D15158]();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.topicCategory(groupUUID:name:)()
{
  return MEMORY[0x1E0D15160]();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.activitySessions.getter()
{
  return MEMORY[0x1E0D15168]();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.pubSubTopicReporter.getter()
{
  return MEMORY[0x1E0D15170]();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter()
{
  return MEMORY[0x1E0D15178]();
}

uint64_t BackgroundSessionCreationRequest.activitySessionRequest.getter()
{
  return MEMORY[0x1E0D15180]();
}

uint64_t BackgroundSessionCreationRequest.isCrossAccount.getter()
{
  return MEMORY[0x1E0D15188]();
}

uint64_t BackgroundSessionCreationRequest.init(id:activitySessionRequest:members:localMember:isCrossAccount:)()
{
  return MEMORY[0x1E0D15190]();
}

uint64_t BackgroundSessionCreationRequest.id.getter()
{
  return MEMORY[0x1E0D15198]();
}

uint64_t type metadata accessor for BackgroundSessionCreationRequest()
{
  return MEMORY[0x1E0D151A0]();
}

uint64_t BackgroundSessionManagerXPCClient.createPresenceSession(with:)()
{
  return MEMORY[0x1E0D151B0]();
}

uint64_t BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)()
{
  return MEMORY[0x1E0D151C0]();
}

uint64_t BackgroundSessionManagerXPCClient.begin(request:)()
{
  return MEMORY[0x1E0D151D0]();
}

uint64_t BackgroundSessionManagerXPCClient.leave(identifier:)()
{
  return MEMORY[0x1E0D151E0]();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:)()
{
  return MEMORY[0x1E0D151F8]();
}

uint64_t dispatch thunk of ConversationManagerClientProtocol.prepareForGroupActivity(overrides:completionHandler:)()
{
  return MEMORY[0x1E0D15208]();
}

uint64_t dispatch thunk of BackgroundSessionManagerClientProtocol.delegate.setter()
{
  return MEMORY[0x1E0D15220]();
}

uint64_t Lock.withLock<A>(_:)()
{
  return MEMORY[0x1E0D15228]();
}

Swift::Void __swiftcall Lock.assertOwned()()
{
  MEMORY[0x1E0D15230]();
}

Swift::Void __swiftcall Lock.assertNotOwned()()
{
  MEMORY[0x1E0D15238]();
}

Swift::Void __swiftcall Lock.lock()()
{
  MEMORY[0x1E0D15240]();
}

Swift::Void __swiftcall Lock.unlock()()
{
  MEMORY[0x1E0D15248]();
}

uint64_t Lock.init()()
{
  return MEMORY[0x1E0D15250]();
}

uint64_t type metadata accessor for Lock()
{
  return MEMORY[0x1E0D15258]();
}

uint64_t dispatch thunk of Token.expirationDate.getter()
{
  return MEMORY[0x1E0D15298]();
}

uint64_t dispatch thunk of Token.token.getter()
{
  return MEMORY[0x1E0D152A0]();
}

uint64_t dispatch thunk of Token.accountID.getter()
{
  return MEMORY[0x1E0D152A8]();
}

uint64_t tryLog<A>(_:_:function:line:)()
{
  return MEMORY[0x1E0D152B0]();
}

uint64_t Testable.init(wrappedValue:)()
{
  return MEMORY[0x1E0D152B8]();
}

uint64_t Testable.wrappedValue.modify()
{
  return MEMORY[0x1E0D152C0]();
}

uint64_t Testable.wrappedValue.getter()
{
  return MEMORY[0x1E0D152C8]();
}

uint64_t Testable.wrappedValue.setter()
{
  return MEMORY[0x1E0D152D0]();
}

uint64_t type metadata accessor for Testable()
{
  return MEMORY[0x1E0D152D8]();
}

uint64_t static Signposts.messengerSignpostIdentifier(forPayload:)()
{
  return MEMORY[0x1E0D152E8]();
}

uint64_t static Signposts.messenger.getter()
{
  return MEMORY[0x1E0D152F0]();
}

uint64_t XPCClient.__allocating_init(listenerEndpoint:)()
{
  return MEMORY[0x1E0D15300]();
}

uint64_t dispatch thunk of XPCClient.destroyConnection()()
{
  return MEMORY[0x1E0D15308]();
}

uint64_t XPCClient.withSynchronousHost<A>(body:errorHandler:)()
{
  return MEMORY[0x1E0D15310]();
}

uint64_t XPCClient.queue.getter()
{
  return MEMORY[0x1E0D15318]();
}

uint64_t XPCClient.withHost(body:errorHandler:)()
{
  return MEMORY[0x1E0D15320]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t dispatch thunk of static Transferable.transferRepresentation.getter()
{
  return MEMORY[0x1E0CA86F8]();
}

uint64_t static Transferable.readableContentTypes.getter()
{
  return MEMORY[0x1E0CA8700]();
}

uint64_t Transferable.data(contentType:)()
{
  return MEMORY[0x1E0CA8710]();
}

uint64_t type metadata accessor for TransferableError()
{
  return MEMORY[0x1E0CA8748]();
}

uint64_t DataRepresentation.init(contentType:exporting:importing:)()
{
  return MEMORY[0x1E0CA8760]();
}

uint64_t DataRepresentation.init(exportedContentType:exporting:)()
{
  return MEMORY[0x1E0CA8768]();
}

uint64_t type metadata accessor for DataRepresentation()
{
  return MEMORY[0x1E0CA8770]();
}

uint64_t dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)()
{
  return MEMORY[0x1E0CA87F8]();
}

uint64_t static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)()
{
  return MEMORY[0x1E0CA8808]();
}

uint64_t type metadata accessor for _TransferRepresentationValue()
{
  return MEMORY[0x1E0CA8848]();
}

uint64_t _TransferRepresentationValue.init(_:)()
{
  return MEMORY[0x1E0CA8850]();
}

uint64_t _TransferRepresentationInputs.init()()
{
  return MEMORY[0x1E0CA8860]();
}

uint64_t type metadata accessor for _TransferRepresentationInputs()
{
  return MEMORY[0x1E0CA8868]();
}

uint64_t ResolvedTransferRepresentation.contentType.getter()
{
  return MEMORY[0x1E0CA8870]();
}

uint64_t ResolvedTransferRepresentation.representationType.getter()
{
  return MEMORY[0x1E0CA8880]();
}

uint64_t ResolvedTransferRepresentation.exporting.getter()
{
  return MEMORY[0x1E0CA8888]();
}

uint64_t ResolvedTransferRepresentation.importing.getter()
{
  return MEMORY[0x1E0CA8890]();
}

uint64_t type metadata accessor for ResolvedTransferRepresentation()
{
  return MEMORY[0x1E0CA8898]();
}

uint64_t _TransferRepresentationOutputs.storage.getter()
{
  return MEMORY[0x1E0CA88A8]();
}

uint64_t type metadata accessor for _TransferRepresentationOutputs()
{
  return MEMORY[0x1E0CA88B0]();
}

uint64_t UTType.init(exportedAs:conformingTo:)()
{
  return MEMORY[0x1E0DF0188]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x1E0DF0190]();
}

uint64_t static UTType.== infix(_:_:)()
{
  return MEMORY[0x1E0DF0218]();
}

uint64_t static UTType.url.getter()
{
  return MEMORY[0x1E0DF0258]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x1E0DF0268]();
}

uint64_t static UTType.jpeg.getter()
{
  return MEMORY[0x1E0DF0298]();
}

uint64_t static UTType.fileURL.getter()
{
  return MEMORY[0x1E0DF02F8]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x1E0DF0340]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t OSSignpostID.init(_:)()
{
  return MEMORY[0x1E0DF2128]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2158]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return MEMORY[0x1E0DF2210]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x1E0C95640]();
}

uint64_t type metadata accessor for Publishers.CompactMap()
{
  return MEMORY[0x1E0C956F8]();
}

uint64_t type metadata accessor for Publishers.HandleEvents()
{
  return MEMORY[0x1E0C957B0]();
}

uint64_t type metadata accessor for Publishers.MeasureInterval()
{
  return MEMORY[0x1E0C95898]();
}

uint64_t type metadata accessor for Publishers.PrefetchStrategy()
{
  return MEMORY[0x1E0C958C0]();
}

uint64_t type metadata accessor for Publishers.RemoveDuplicates()
{
  return MEMORY[0x1E0C958D0]();
}

uint64_t Publishers.Map.map<A>(_:)()
{
  return MEMORY[0x1E0C95930]();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return MEMORY[0x1E0C95940]();
}

uint64_t type metadata accessor for Publishers.Zip()
{
  return MEMORY[0x1E0C95958]();
}

uint64_t type metadata accessor for Publishers.Drop()
{
  return MEMORY[0x1E0C95978]();
}

uint64_t type metadata accessor for Publishers.Scan()
{
  return MEMORY[0x1E0C959A8]();
}

uint64_t type metadata accessor for Publishers.Merge()
{
  return MEMORY[0x1E0C95A48]();
}

uint64_t type metadata accessor for Publishers.Share()
{
  return MEMORY[0x1E0C95A90]();
}

uint64_t type metadata accessor for Publishers.Buffer()
{
  return MEMORY[0x1E0C95AA8]();
}

uint64_t type metadata accessor for Publishers.Throttle()
{
  return MEMORY[0x1E0C95C18]();
}

uint64_t Publishers.MergeMany.init<A>(_:)()
{
  return MEMORY[0x1E0C95C70]();
}

uint64_t Publishers.ReceiveOn.receive<A>(subscriber:)()
{
  return MEMORY[0x1E0C95CA0]();
}

uint64_t type metadata accessor for Publishers.ReceiveOn()
{
  return MEMORY[0x1E0C95CA8]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x1E0C95D08]();
}

uint64_t Subscribers.Demand.description.getter()
{
  return MEMORY[0x1E0C95D30]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x1E0C95D40]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x1E0C95D48]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x1E0C95D50]();
}

uint64_t AnyPublisher.receive<A>(subscriber:)()
{
  return MEMORY[0x1E0C95D70]();
}

uint64_t type metadata accessor for AnyPublisher()
{
  return MEMORY[0x1E0C95D78]();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return MEMORY[0x1E0C95DB0]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x1E0C95DD8]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  MEMORY[0x1E0C95DE8]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1E0C95E48]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x1E0C95E50]();
}

uint64_t AsyncPublisher.Iterator.next()()
{
  return MEMORY[0x1E0C95E58]();
}

uint64_t AsyncPublisher.init(_:)()
{
  return MEMORY[0x1E0C95E90]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x1E0C95ED8]();
}

uint64_t PassthroughSubject.send(completion:)()
{
  return MEMORY[0x1E0C95F00]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x1E0C95F08]();
}

uint64_t PassthroughSubject.__allocating_init()()
{
  return MEMORY[0x1E0C95F18]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x1E0C95F20]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x1E0C95F28]();
}

uint64_t CurrentValueSubject.send(completion:)()
{
  return MEMORY[0x1E0C95F50]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x1E0C95F60]();
}

uint64_t CurrentValueSubject.value.getter()
{
  return MEMORY[0x1E0C95F70]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x1E0C95FA8]();
}

uint64_t Just.init(_:)()
{
  return MEMORY[0x1E0C960A8]();
}

uint64_t Future.init(_:)()
{
  return MEMORY[0x1E0C96100]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x1E0C96150]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x1E0C96158]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x1E0C96160]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x1E0C96168]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x1E0C96170]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x1E0C96178]();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return MEMORY[0x1E0C96180]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x1E0C96198]();
}

uint64_t Publisher.execute(_:onError:)()
{
  return MEMORY[0x1E0D15330]();
}

uint64_t Publisher.sinkOnce(_:onError:)()
{
  return MEMORY[0x1E0D15338]();
}

uint64_t Publisher<>.execute(_:)()
{
  return MEMORY[0x1E0D15340]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return MEMORY[0x1E0C961D8]();
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)()
{
  return MEMORY[0x1E0C961E0]();
}

uint64_t Publisher.measureInterval<A>(using:options:)()
{
  return MEMORY[0x1E0C96230]();
}

uint64_t Publisher.removeDuplicates(by:)()
{
  return MEMORY[0x1E0C96238]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1E0C96248]();
}

uint64_t Publisher.zip<A>(_:)()
{
  return MEMORY[0x1E0C96268]();
}

uint64_t Publisher.scan<A>(_:_:)()
{
  return MEMORY[0x1E0C96288]();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return MEMORY[0x1E0C96290]();
}

uint64_t Publisher.first()()
{
  return MEMORY[0x1E0C962B8]();
}

uint64_t Publisher.merge<A>(with:)()
{
  return MEMORY[0x1E0C962C0]();
}

uint64_t Publisher.share()()
{
  return MEMORY[0x1E0C962F0]();
}

uint64_t Publisher.buffer(size:prefetch:whenFull:)()
{
  return MEMORY[0x1E0C96300]();
}

uint64_t Publisher.filter(_:)()
{
  return MEMORY[0x1E0C96308]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x1E0C96378]();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return MEMORY[0x1E0C96388]();
}

uint64_t Publisher.throttle<A>(for:scheduler:latest:)()
{
  return MEMORY[0x1E0C96398]();
}

uint64_t Publisher.dropFirst(_:)()
{
  return MEMORY[0x1E0C963B0]();
}

uint64_t Publisher.subscribe<A>(on:options:)()
{
  return MEMORY[0x1E0C963C8]();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return MEMORY[0x1E0C963D8]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x1E0C963E8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t Publisher<>.assign(to:)()
{
  return MEMORY[0x1E0C96420]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x1E0C96428]();
}

uint64_t Publisher<>.flatMap<A>(maxPublishers:_:)()
{
  return MEMORY[0x1E0C96430]();
}

{
  return MEMORY[0x1E0C96438]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x1E0DEF580]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x1E0DEF708]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x1E0DEF710]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x1E0DEF728]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1E0DEF750]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0CA93A0]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x1E0CA93B0]();
}

uint64_t SymmetricKey.init(size:)()
{
  return MEMORY[0x1E0CA93B8]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x1E0CA93C8]();
}

uint64_t static SymmetricKeySize.bits256.getter()
{
  return MEMORY[0x1E0CA9448]();
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return MEMORY[0x1E0CA9450]();
}

uint64_t type metadata accessor for SymmetricKeySize()
{
  return MEMORY[0x1E0CA9458]();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return MEMORY[0x1E0CA94B8]();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return MEMORY[0x1E0CA94D0]();
}

uint64_t AES.GCM.Nonce.init<A>(data:)()
{
  return MEMORY[0x1E0CA94E8]();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return MEMORY[0x1E0CA94F8]();
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  return MEMORY[0x1E0CA9508]();
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  return MEMORY[0x1E0CA9510]();
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)()
{
  return MEMORY[0x1E0CA9518]();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return MEMORY[0x1E0CA9538]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1E0DF05B0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB17E8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1E0DE9E40]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x1E0DE9E90]();
}

uint64_t type metadata accessor for Dictionary.Values()
{
  return MEMORY[0x1E0DE9F78]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x1E0DEA040](keepingCapacity);
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x1E0DEA1C8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return MEMORY[0x1E0CB1998]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1E0DEA618]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x1E0DEAAF8]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEADA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1E0DEAE98]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x1E0DEAEB8](keepingCapacity);
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1E0DF05D8]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1E0DF05E0]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj()
{
  return MEMORY[0x1E0DF0698]();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1E0DF0700]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return MEMORY[0x1E0DF0770]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return MEMORY[0x1E0DF0790]();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return MEMORY[0x1E0DF07A0]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x1E0DF07C0]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x1E0DF07D8]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  MEMORY[0x1E0DF07E0]();
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x1E0DF07E8]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x1E0DF0838]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t Task.value.getter()
{
  return MEMORY[0x1E0DF0860]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x1E0DF0870]();
}

uint64_t Task<>.value.getter()
{
  return MEMORY[0x1E0DF08A8]();
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t static Task<>.currentPriority.getter()
{
  return MEMORY[0x1E0DF08C0]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return MEMORY[0x1E0DF0918]();
}

uint64_t ThrowingTaskGroup.next(isolation:)()
{
  return MEMORY[0x1E0DF0958]();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return MEMORY[0x1E0DF0978]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return MEMORY[0x1E0DF0A40]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x1E0DF0A68]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x1E0DF0A70]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x1E0DF0A88]();
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF()
{
  return MEMORY[0x1E0DF0A90]();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1E0DF0AD8]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1E0CB1BB0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t Set.Index._asCocoa.modify()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1E0DEB310]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB1C10]();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return MEMORY[0x1E0DF1FB8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x1E0DEB738]();
}

uint64_t SPVector3D.hash(into:)()
{
  return MEMORY[0x1E0DEFF68]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t type metadata accessor for CKRecordChange.ChangeType()
{
  return MEMORY[0x1E0D111C8]();
}

uint64_t CKRecordChange.changeType.getter()
{
  return MEMORY[0x1E0D111D0]();
}

uint64_t type metadata accessor for CKRecordObserver.RecordChanges.Iterator()
{
  return MEMORY[0x1E0D111D8]();
}

uint64_t type metadata accessor for CKRecordObserver.RecordChanges()
{
  return MEMORY[0x1E0D111E8]();
}

uint64_t CKRecordObserver.recordChanges.getter()
{
  return MEMORY[0x1E0D11200]();
}

uint64_t CKRecordObserver.init(container:recordType:)()
{
  return MEMORY[0x1E0D11208]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return MEMORY[0x1E0DEF848]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x1E0DEF868]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E0DEF8A0]();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)()
{
  return MEMORY[0x1E0DEF8C0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return MEMORY[0x1E0DEF9F0]();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
  MEMORY[0x1E0DEFA18]();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
  MEMORY[0x1E0DEFA20]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x1E0DF22A8]();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return MEMORY[0x1E0CB1F30]();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return MEMORY[0x1E0CB1F50]();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t NSData.startIndex.getter()
{
  return MEMORY[0x1E0CB1FC0]();
}

uint64_t NSData.endIndex.getter()
{
  return MEMORY[0x1E0CB1FC8]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t NSCoder.decodeTopLevelObject<A>(of:forKey:)()
{
  return MEMORY[0x1E0CB2060]();
}

uint64_t SPAngle.hash(into:)()
{
  return MEMORY[0x1E0DEFF80]();
}

uint64_t static CKRecord.SystemType.share.getter()
{
  return MEMORY[0x1E0C94660]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEFCD8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t SPPose3D.hash(into:)()
{
  return MEMORY[0x1E0DEFF98]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x1E0DEBE30]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t AnyKeyPath.debugDescription.getter()
{
  return MEMORY[0x1E0DEBE68]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return MEMORY[0x1E0DEC2F0]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x1E0DEC310]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return MEMORY[0x1E0DEC508]();
}

uint64_t type metadata accessor for ManagedBuffer()
{
  return MEMORY[0x1E0DEC518]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1E0DEC5A8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x1E0DF0B98]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x1E0DF0BA0]();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return MEMORY[0x1E0DEC7D0]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x1E0DEC808]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1E0DEC980]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x1E0DEC9F0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x1E0DECC10]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x1E0DECC30]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t AsyncFilterSequence.isIncluded.getter()
{
  return MEMORY[0x1E0DF0C78]();
}

uint64_t AsyncFilterSequence.base.getter()
{
  return MEMORY[0x1E0DF0C80]();
}

uint64_t AsyncFilterSequence.Iterator.baseIterator.modify()
{
  return MEMORY[0x1E0DF0C88]();
}

uint64_t AsyncFilterSequence.Iterator.isIncluded.getter()
{
  return MEMORY[0x1E0DF0C90]();
}

uint64_t AsyncFilterSequence.Iterator.init(_:isIncluded:)()
{
  return MEMORY[0x1E0DF0CA0]();
}

uint64_t AsyncFilterSequence.init(_:isIncluded:)()
{
  return MEMORY[0x1E0DF0CB8]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x1E0DECE28]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1E0DECE70]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  return MEMORY[0x1E0DF0D38]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

{
  return MEMORY[0x1E0DECFC8]();
}

{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

{
  return MEMORY[0x1E0DED0F8]();
}

{
  return MEMORY[0x1E0DED110]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1E0DED1B0](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decodeNil()()
{
  return MEMORY[0x1E0DED690]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encodeNil()()
{
  return MEMORY[0x1E0DED740]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return MEMORY[0x1E0DF0EE8]();
}

uint64_t dispatch thunk of Clock.sleep(until:tolerance:)()
{
  return MEMORY[0x1E0DF0EF0]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
  MEMORY[0x1E0DEDF20](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x1E0DEDF28](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x1E0DEDF38]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x1E0DEDF48]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB26E8]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x1E0DEE220]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x1E0DEE238]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x1E0DEE7C8]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return MEMORY[0x1E0DEE8F8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

uint64_t CGImageCreateThumb()
{
  return MEMORY[0x1E0CBC2F0]();
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBB8](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

uint64_t CUTWeakLinkClass()
{
  return MEMORY[0x1E0D131E0]();
}

uint64_t CUTWeakLinkSymbol()
{
  return MEMORY[0x1E0D131E8]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t NWCreateDispatchDataFromNSData()
{
  return MEMORY[0x1E0CCEC10]();
}

uint64_t NWCreateNSDataFromDispatchData()
{
  return MEMORY[0x1E0CCEC18]();
}

uint64_t PNCopyBestGuessCountryCodeForNumber()
{
  return MEMORY[0x1E0D17860]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t TUSimulatedModeEnabled()
{
  return MEMORY[0x1E0DBD6D0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1E0C80CC0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void nw_connection_force_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCF088](connection);
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF130](connection, completion);
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  MEMORY[0x1E0CCF168](connection, content, context, is_complete, completion);
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF1B0](connection, queue);
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF1C0](connection, handler);
}

void nw_connection_start(nw_connection_t connection)
{
  MEMORY[0x1E0CCF1D8](connection);
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  return MEMORY[0x1E0CCF238](context);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1E0DEEB78]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getAtPartialKeyPath()
{
  return MEMORY[0x1E0DEEC20]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1E0DEECE8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1E0DEED80]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_taskGroup_wait_next_throwing()
{
  return MEMORY[0x1E0DF0FF0]();
}

uint64_t swift_task_addCancellationHandler()
{
  return MEMORY[0x1E0DF0FF8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_removeCancellationHandler()
{
  return MEMORY[0x1E0DF1040]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1E0DEEF60]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1E0DEEF68]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1E0DEEF70]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1E0DEEF88]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1E0DEEF90]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1E0DEEFB0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1E0DEEFB8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

