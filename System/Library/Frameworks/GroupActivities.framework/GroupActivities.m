uint64_t type metadata instantiation function for GroupSession.State()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for GroupSession.Timestamps()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for GroupSessionTable.Storage()
{
  return &type metadata for GroupSessionTable.Storage;
}

uint64_t type metadata completion function for AnyGroupActivity()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AnyGroupActivity.MetadataProvider(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyGroupActivity(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  result = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1A1B05BEC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for AnyGroupActivity(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AnyGroupActivity);
}

uint64_t type metadata accessor for AnyGroupActivity.MetadataProvider(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AnyGroupActivity.MetadataProvider);
}

uint64_t destroy for GroupSessionObserver(id *a1)
{

  swift_unknownObjectRelease();
  return swift_release();
}

void closure #10 in GroupSessionObserver.receive<A>(subscriber:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v7 = v3;
    *(_DWORD *)v2 = 136315138;
    v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, oslog, v1, "Received cancel on observer for activity type: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v3, -1, -1);
    MEMORY[0x1A1B05CC4](v2, -1, -1);

  }
  else
  {

  }
}

uint64_t GroupSession.Sessions.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v3;
  v5 = type metadata accessor for GroupSessionObserver(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4);
  v6 = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionObserver<A>, v5);
  v8 = type metadata accessor for _PublisherElements.Iterator(0, v5, v6, v7);
  *v3 = v1;
  v3[1] = GroupSession.Sessions.Iterator.next();
  return _PublisherElements.Iterator.next()(v1 + 16, v8);
}

uint64_t type metadata accessor for _PublisherElements.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PublisherElements.Iterator);
}

double static GroupActivity.sessions()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  GroupSessionObserver.init(for:)((uint64_t)v13);
  v11[0] = v13[0];
  v11[1] = v13[1];
  v12 = v14;
  v7 = type metadata accessor for GroupSessionObserver(0, a1, a2, v6);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionObserver<A>, v7);
  _PublisherElements.init(_:)((uint64_t)v11, v7, (uint64_t)v15);
  v8 = v16;
  result = *(double *)v15;
  v10 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 32) = v8;
  return result;
}

double GroupSessionObserver.init(for:)@<D0>(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v2 = (void *)static OS_dispatch_queue.main.getter();
  GroupSessionObserver.init(for:queue:)(v2, v6);
  v3 = v7;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t type metadata accessor for GroupSessionObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSessionObserver);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _PublisherElements.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t closure #5 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v21 - v9;
  v11 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = MEMORY[0x1E0DEE9D8];
  if (!v12)
  {
LABEL_15:
    v23 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Just<GroupSession<AnyGroupActivity>>]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<GroupSession<AnyGroupActivity>> and conformance Just<A>, &demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>, MEMORY[0x1E0C960B0]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Just<GroupSession<AnyGroupActivity>>] and conformance [A], &demangling cache variable for type metadata for [Just<GroupSession<AnyGroupActivity>>], MEMORY[0x1E0DEAF38]);
    return Publishers.MergeMany.init<A>(_:)();
  }
  v23 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v21[1] = a2;
    v13 = v23;
    if ((v11 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v12; ++i)
      {
        v22 = MEMORY[0x1A1B05010](i, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
        Just.init(_:)();
        v23 = v13;
        v17 = *(_QWORD *)(v13 + 16);
        v16 = *(_QWORD *)(v13 + 24);
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v13 = v23;
        }
        *(_QWORD *)(v13 + 16) = v17 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v17, v10, v4);
      }
    }
    else
    {
      v18 = (uint64_t *)(v11 + 32);
      do
      {
        v22 = *v18;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
        Just.init(_:)();
        v23 = v13;
        v20 = *(_QWORD *)(v13 + 16);
        v19 = *(_QWORD *)(v13 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v13 = v23;
        }
        *(_QWORD *)(v13 + 16) = v20 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v20, v8, v4);
        ++v18;
        --v12;
      }
      while (v12);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized GroupStateObserver.init(conversationManagerClient:queue:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v61 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v62 = (char *)&v46 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v46 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  v50 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v49 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  v56 = *(_QWORD *)(v15 - 8);
  v57 = v15;
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  v59 = *(_QWORD *)(v17 - 8);
  v60 = v17;
  MEMORY[0x1E0C80A78](v17);
  v58 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a1;
  v53 = a3;
  v23 = a3 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  LOBYTE(v65) = 0;
  Published.init(initialValue:)();
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v51 = v23;
  v52 = v19;
  v24(v23, v22, v19);
  if (one-time initialization token for client != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.client);
  v26 = a2;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v29 = 138412290;
    v65 = (uint64_t)v26;
    v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v30 = v26;

    _os_log_impl(&dword_1A0DB3000, v27, v28, "Initialized group state observer on queue: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    MEMORY[0x1A1B05CC4](v29, -1, -1);
  }
  else
  {

    v27 = v26;
  }

  type metadata accessor for ConversationManagerClient();
  v65 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  v32 = MEMORY[0x1E0C95D90];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
  v33 = v58;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>, MEMORY[0x1E0C95950]);
  v34 = v60;
  v65 = Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>, v32);
  v35 = v46;
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>, MEMORY[0x1E0C958E0]);
  v36 = v48;
  v37 = v49;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v36);
  v65 = (uint64_t)v26;
  v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v39 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v55, 1, 1, v38);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, MEMORY[0x1E0C957C0]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  v40 = v54;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v39, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v13);
  swift_beginAccess();
  v41 = v62;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v42 = v57;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v42);
  v43 = v63;
  v44 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v61, v41, v64);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v44);

  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v34);

  return v53;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B05BEC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t GroupStateObserver.__allocating_init()()
{
  void *v0;
  void *v1;
  uint64_t v2;

  type metadata accessor for OS_dispatch_queue();
  v0 = (void *)static OS_dispatch_queue.main.getter();
  type metadata accessor for ConversationManagerClient();
  v1 = (void *)static ConversationManagerClient.shared.getter();
  v2 = swift_allocObject();
  return specialized GroupStateObserver.init(conversationManagerClient:queue:)(v1, v0, v2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for closure #4 in GroupSessionObserver.receive<A>(subscriber:)(unint64_t *a1)
{
  uint64_t v1;

  return closure #4 in GroupSessionObserver.receive<A>(subscriber:)(a1, (_QWORD *)(v1 + 48));
}

uint64_t closure #4 in GroupSessionObserver.receive<A>(subscriber:)(unint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v4 = type metadata accessor for UUID();
  v48 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  if (one-time initialization token for client != -1)
LABEL_28:
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.client);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v44 = a2;
  if (v10)
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v52 = (_QWORD *)v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    v14 = v4;
    v15 = MEMORY[0x1A1B049D4](v6, v13);
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = v15;
    v4 = v14;
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v8, v9, "Received updated sessions: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v19 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v20 = v48;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    a2 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    if (a2)
      goto LABEL_7;
LABEL_30:
    swift_bridgeObjectRelease();
    v39 = v44[2];
    ObjectType = swift_getObjectType();
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 40))(ObjectType, v39);
    (*(void (**)(_QWORD *))(*(_QWORD *)v41 + 152))(v19);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  a2 = *(_QWORD **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!a2)
    goto LABEL_30;
LABEL_7:
  v46 = v6;
  v47 = v6 & 0xC000000000000001;
  v21 = 4;
  v45 = a2;
  while (1)
  {
    v22 = v21 - 4;
    if (v47)
    {
      v23 = MEMORY[0x1A1B05010](v21 - 4, v6);
      v24 = v21 - 3;
      if (__OFADD__(v22, 1))
        goto LABEL_25;
    }
    else
    {
      v23 = *(_QWORD *)(v6 + 8 * v21);
      swift_retain();
      v24 = v21 - 3;
      if (__OFADD__(v22, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v49 = (_QWORD *)v24;
    a2 = *(_QWORD **)(v20 + 16);
    v25 = v50;
    v6 = v4;
    ((void (*)(uint64_t, uint64_t, uint64_t))a2)(v50, v23 + direct field offset for GroupSession.id, v4);
    v26 = *(_QWORD *)(v23 + *(_QWORD *)(*(_QWORD *)v23 + 360));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = v19;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
    v30 = v19[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_26;
    v33 = v28;
    if (v19[3] < v32)
      break;
    v20 = v48;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_19;
    }
LABEL_21:
    v19 = v52;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)(v52[7] + 8 * v29) = v26;
      v4 = v6;
    }
    else
    {
      v52[(v29 >> 6) + 8] |= 1 << v29;
      v4 = v6;
      ((void (*)(unint64_t, uint64_t, unint64_t))a2)(v19[6] + *(_QWORD *)(v20 + 72) * v29, v50, v6);
      *(_QWORD *)(v19[7] + 8 * v29) = v26;
      v36 = v19[2];
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (v37)
        goto LABEL_27;
      v19[2] = v38;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v50, v4);
    swift_release();
    ++v21;
    a2 = v45;
    v6 = v46;
    if (v49 == v45)
      goto LABEL_30;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
LABEL_19:
    v20 = v48;
    goto LABEL_21;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Int));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Int));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, GroupSessionTable.Storage));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, GroupSessionTable.Storage));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = outlined init with take of GroupSessionTable.Storage(v9, v7[7] + 24 * v16);
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for (String, TypedPayloadDecoding));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = outlined init with take of TypedPayloadDecoding(&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, SymmetricKey));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SymmetricKey>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, SymmetricKey));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7];
    v20 = type metadata accessor for SymmetricKey();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v16, v9, v20);
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer), &demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CIImageRepresentationOption, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for (CIImageRepresentationOption, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreferenceOutput>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v21 = v2 + 64;
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v22 = v4;
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    v9 = *((_BYTE *)v5 + 8);
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = *((_BYTE *)v5 + 40);
    swift_bridgeObjectRetain();
    outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v10, v11, v12, v13);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v6;
    v16[1] = v7;
    v17 = v3[7] + 48 * result;
    *(_QWORD *)v17 = v8;
    *(_BYTE *)(v17 + 8) = v9;
    *(_QWORD *)(v17 + 16) = v10;
    *(_QWORD *)(v17 + 24) = v11;
    *(_QWORD *)(v17 + 32) = v12;
    *(_BYTE *)(v17 + 40) = v13;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v5 += 8;
    v3[2] = v20;
    v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 57);
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 25);
    v6 = *(_QWORD *)(v4 - 17);
    v7 = *(_QWORD *)(v4 - 9);
    v8 = *(v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 16 * result;
    *(_QWORD *)v13 = v7;
    *(_BYTE *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 9) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 32;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, SystemCoordinatorConfiguration), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, TopicManager.ConversationClient), &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)v13, &demangling cache variable for type metadata for (TopicManager.ServiceName, TopicManager.ConversationClient.Service));
    v7 = v13[0];
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v7;
    result = outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v14, v3[7] + 48 * result);
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  __int128 v7;
  char v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _OWORD *v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v16 = *(_OWORD *)(a1 + 48);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  v7 = v16;
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_retain();
    return (unint64_t)v3;
  }
  v9 = (_OWORD *)(a1 + 80);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = v3[7] + 24 * result;
    *(_QWORD *)v10 = v5;
    *(_OWORD *)(v10 + 8) = v7;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 2;
    v4 = *((_QWORD *)v9 - 2);
    v5 = *((_QWORD *)v9 - 1);
    v17 = *v9;
    swift_retain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v7 = v17;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ReliableBroadcastLink.SenderContext.PendingMessage>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v18 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 104);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    v10 = v3[7] + 32 * result;
    *(_QWORD *)v10 = v5;
    *(_OWORD *)(v10 + 8) = v18;
    *(_QWORD *)(v10 + 24) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 5;
    v4 = *((_DWORD *)v9 - 8);
    v15 = *(v9 - 3);
    v18 = *((_OWORD *)v9 - 1);
    v16 = *v9;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v6 = v16;
    v5 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ReliableBroadcastPacket.PacketIdentifier, ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (unsigned int *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReliableBroadcastPacket.PacketIdentifier, ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of URL?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (ReliableBroadcastPacket.PacketIdentifier, ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest));
      v11 = *v5;
      v12 = *((unsigned __int16 *)v5 + 2);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11 | (v12 << 32));
      if ((v14 & 1) != 0)
        break;
      v15 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v16 = v7[6] + 8 * result;
      *(_DWORD *)v16 = v11;
      *(_WORD *)(v16 + 4) = v12;
      v17 = v7[7];
      v18 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
      result = outlined init with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(v8, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v15);
      v19 = v7[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v7[2] = v21;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ReliableBroadcastLink.SenderContext>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 80); ; i += 7)
    {
      v5 = *(i - 6);
      v6 = *(i - 5);
      v7 = *((_DWORD *)i - 8);
      v8 = *((_BYTE *)i - 28);
      v9 = *((_DWORD *)i - 6);
      v10 = *((_BYTE *)i - 20);
      v18 = *((_OWORD *)i - 1);
      v11 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v13 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v14 = v3[7] + 48 * result;
      *(_QWORD *)v14 = v6;
      *(_DWORD *)(v14 + 8) = v7;
      *(_BYTE *)(v14 + 12) = v8;
      *(_DWORD *)(v14 + 16) = v9;
      *(_BYTE *)(v14 + 20) = v10;
      *(_OWORD *)(v14 + 24) = v18;
      *(_QWORD *)(v14 + 40) = v11;
      v15 = v3[2];
      v16 = __OFADD__(v15, 1);
      v17 = v15 + 1;
      if (v16)
        goto LABEL_10;
      v3[2] = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessionTable.getter in conformance ConversationManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t ConversationManager.groupSessionTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
  }
  else
  {
    type metadata accessor for GroupSessionTable();
    v1 = swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    *(_QWORD *)(v1 + 16) = Lock.init()();
    *(_QWORD *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

Swift::Void __swiftcall GroupSessionTable.cleanUpIfNotPresent(_:)(Swift::OpaquePointer a1)
{
  swift_retain();
  Lock.withLock<A>(_:)();
  swift_release();
}

uint64_t type metadata accessor for GroupSessionTable()
{
  return objc_opt_self();
}

void closure #11 in GroupSessionObserver.receive<A>(subscriber:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v7 = v3;
    *(_DWORD *)v2 = 136315138;
    v4 = Subscribers.Demand.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, oslog, v1, "Received request for next activity session with demand: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v3, -1, -1);
    MEMORY[0x1A1B05CC4](v2, -1, -1);

  }
  else
  {

  }
}

uint64_t GroupSessionObserver.init(for:queue:)@<X0>(void *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.client);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16 = v15;
    *(_DWORD *)v8 = 136315394;
    v10 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1A0DB3000, v6, v7, "Initialized observer for %s on queue: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);

  }
  else
  {

  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v13 = static ConversationManager.shared;
  *a2 = v5;
  a2[1] = v13;
  a2[2] = &protocol witness table for ConversationManager;
  a2[3] = protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity;
  a2[4] = 0;
  return swift_retain();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t GroupSessionObserver.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  uint64_t ObjectType;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  id v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v100 = a3;
  v101 = a4;
  v99 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v6);
  v98 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v74 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>);
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v77 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>>);
  v84 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v83 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v15 = type metadata accessor for GroupSession(255, v13, v12, v14);
  v16 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>> and conformance Publishers.Filter<A>, &demangling cache variable for type metadata for Publishers.Filter<Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>>, MEMORY[0x1E0C95AD0]);
  v85 = v10;
  v81 = v15;
  v78 = v16;
  v17 = type metadata accessor for Publishers.CompactMap();
  v92 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v90 = (char *)&v69 - v18;
  v19 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95708], v17);
  v94 = v17;
  v82 = v19;
  v20 = type metadata accessor for Publishers.HandleEvents();
  v96 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v95 = (char *)&v69 - v21;
  v22 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v23 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C957C0], v20);
  v24 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  v97 = v20;
  *(_QWORD *)&v103 = v20;
  *((_QWORD *)&v103 + 1) = v22;
  v87 = v23;
  v88 = v22;
  *(_QWORD *)&v104 = v23;
  *((_QWORD *)&v104 + 1) = v24;
  v86 = v24;
  v93 = type metadata accessor for Publishers.ReceiveOn();
  v91 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v89 = (char *)&v69 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>);
  v70 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [Conversation]>);
  v71 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]>);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v4[1];
  v103 = *v4;
  v104 = v34;
  v105 = *((_QWORD *)v4 + 4);
  v35 = (void *)*((_QWORD *)&v103 + 1);
  v36 = v34;
  ObjectType = swift_getObjectType();
  if (one-time initialization token for shared != -1)
    swift_once();
  if (v35 == static ConversationManager.shared)
  {
    type metadata accessor for ConversationManagerClient();
    v69 = (id)static ConversationManagerClient.shared.getter();
    v102 = (id)ConversationManagerClient.onActivitySessionsChanged.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, MEMORY[0x1E0C95D90]);
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Conversation]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, MEMORY[0x1E0C957C0]);
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v28, v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
    Publishers.Map.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v31, v29);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.HandleEvents<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>>, [GroupSession<AnyGroupActivity>]>, MEMORY[0x1E0C95950]);
    v39 = v73;
    v38 = (void *)Publisher.eraseToAnyPublisher()();

    (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v39);
  }
  else
  {
    v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(ObjectType, v36);
  }
  v102 = v38;
  v40 = swift_allocObject();
  v73 = (uint64_t)v38;
  v42 = v100;
  v41 = v101;
  *(_QWORD *)(v40 + 16) = v13;
  *(_QWORD *)(v40 + 24) = v42;
  *(_QWORD *)(v40 + 32) = v12;
  *(_QWORD *)(v40 + 40) = v41;
  v43 = v104;
  *(_OWORD *)(v40 + 48) = v103;
  *(_OWORD *)(v40 + 64) = v43;
  *(_QWORD *)(v40 + 80) = v105;
  swift_retain();
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSession<AnyGroupActivity>], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSession<AnyGroupActivity>], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSession<AnyGroupActivity>], Never>, MEMORY[0x1E0C95D90]);
  v44 = v74;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  static Subscribers.Demand.unlimited.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>, MEMORY[0x1E0C957C0]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>> and conformance Publishers.MergeMany<A>, &demangling cache variable for type metadata for Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, MEMORY[0x1E0C95C80]);
  v45 = v77;
  v46 = v76;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v46);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v13;
  *(_QWORD *)(v47 + 24) = v42;
  *(_QWORD *)(v47 + 32) = v12;
  *(_QWORD *)(v47 + 40) = v41;
  v48 = v104;
  *(_OWORD *)(v47 + 48) = v103;
  *(_OWORD *)(v47 + 64) = v48;
  *(_QWORD *)(v47 + 80) = v105;
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Publishers.MergeMany<Just<GroupSession<AnyGroupActivity>>>, Publishers.HandleEvents<AnyPublisher<[GroupSession<AnyGroupActivity>], Never>>>, MEMORY[0x1E0C95B78]);
  v49 = v83;
  v50 = v80;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v45, v50);
  v51 = (void *)v103;
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v13;
  *(_QWORD *)(v52 + 24) = v42;
  *(_QWORD *)(v52 + 32) = v12;
  *(_QWORD *)(v52 + 40) = v41;
  v53 = v104;
  *(_OWORD *)(v52 + 48) = v103;
  *(_OWORD *)(v52 + 64) = v53;
  *(_QWORD *)(v52 + 80) = v105;
  *(_QWORD *)(v52 + 88) = v51;
  outlined retain of GroupSessionObserver<A>((id *)&v103);
  v54 = v51;
  v55 = v90;
  v56 = v85;
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v56);
  v57 = (_QWORD *)swift_allocObject();
  v57[2] = v13;
  v57[3] = v42;
  v57[4] = v12;
  v57[5] = v41;
  v58 = (_QWORD *)swift_allocObject();
  v58[2] = v13;
  v58[3] = v42;
  v58[4] = v12;
  v58[5] = v41;
  v59 = (_QWORD *)swift_allocObject();
  v59[2] = v13;
  v59[3] = v42;
  v59[4] = v12;
  v59[5] = v41;
  v60 = v94;
  v61 = v95;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v55, v60);
  v102 = v54;
  v62 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v63 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v98, 1, 1, v62);
  v64 = v54;
  v65 = v89;
  v66 = v97;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v63);

  (*(void (**)(char *, uint64_t))(v96 + 8))(v61, v66);
  v67 = v93;
  Publishers.ReceiveOn.receive<A>(subscriber:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v65, v67);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1B05BD4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for GroupSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1B05BE0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id *outlined retain of GroupSessionObserver<A>(id *a1)
{
  id v2;

  v2 = *a1;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void type metadata completion function for GroupSession(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  type metadata accessor for Participant();
  if (v2 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v4 <= 0x3F)
    {
      v5 = *(_QWORD *)(a1 + 80);
      v6 = *(_QWORD *)(a1 + 88);
      type metadata accessor for GroupSession.State(255, v5, v6, v3);
      type metadata accessor for Published();
      if (v7 <= 0x3F)
      {
        type metadata accessor for Published();
        if (v8 <= 0x3F)
        {
          type metadata accessor for Published<Set<Participant>>();
          if (v10 <= 0x3F)
          {
            type metadata accessor for GroupSession.Timestamps(319, v5, v6, v9);
            if (v11 <= 0x3F)
              swift_initClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A1B05B68](a1, v6, a5);
}

uint64_t type metadata accessor for Participant()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Participant;
  if (!type metadata singleton initialization cache for Participant)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for GroupSession.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.State);
}

uint64_t type metadata accessor for GroupSession.Timestamps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.Timestamps);
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    v1 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEF7F8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void closure #1 in GroupSessionObserver.receive<A>(subscriber:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v9 = v4;
    *(_DWORD *)v3 = 136315138;
    type metadata accessor for UUID();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v6 = Dictionary.description.getter();
    v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Received updated conversation containers: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x1A1B05BEC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1A1B05BEC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Conversation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Conversation;
  if (!type metadata singleton initialization cache for Conversation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t type metadata instantiation function for GroupActivityTransferRepresentation()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t objectdestroy_2Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #10 in GroupSessionObserver.receive<A>(subscriber:)()
{
  closure #10 in GroupSessionObserver.receive<A>(subscriber:)();
}

uint64_t initializeWithCopy for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t one-time initialization function for client()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.client);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  return Logger.init(subsystem:category:)();
}

void type metadata completion function for GroupSession.Timestamps()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t type metadata accessor for GroupSession.Sessions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.Sessions);
}

uint64_t type metadata completion function for AnyGroupActivity.MetadataProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GroupActivityMetadata(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GroupActivityMetadata(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivityMetadata);
}

uint64_t type metadata accessor for GroupSession.Sessions.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.Sessions.Iterator);
}

void type metadata completion function for Conversation()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Conversation.State>(319, &lazy cache variable for type metadata for Published<Conversation.State>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Set<Participant>>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Participant>>, &demangling cache variable for type metadata for Set<Participant>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Conversation.State>(319, &lazy cache variable for type metadata for Published<UInt64>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Set<Participant>>(319, &lazy cache variable for type metadata for Published<[GroupSession<AnyGroupActivity>]>, &demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

void type metadata accessor for Published<Set<Participant>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = type metadata accessor for Published();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for Published<Conversation.State>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Published();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void base witness table accessor for CustomCombineIdentifierConvertible in _PublisherElements<A>.Iterator.Inner()
{
  JUMPOUT(0x1A1B05BECLL);
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  type metadata accessor for AVAudioSessionAssertionManager();
  v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  result = Lock.init()();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = v2;
  static AVAudioSessionAssertionManager.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for SystemCoordinatorTable();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  static SystemCoordinatorTable.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for BackgroundAudioSessionAssertionManager();
  result = swift_initStaticObject();
  static BackgroundAudioSessionAssertionManager.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for StaticGroupActivityRegistry();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  type metadata accessor for Lock();
  swift_allocObject();
  result = Lock.init()();
  *(_QWORD *)(v0 + 24) = result;
  static StaticGroupActivityRegistry.shared = v0;
  return result;
}

void one-time initialization function for shared()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;

  type metadata accessor for ConversationManagerClient();
  v0 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for ConversationManager();
  v1 = swift_allocObject();
  v2 = v0;
  v3 = (void *)specialized ConversationManager.init(client:)((uint64_t)v2, v1);

  static ConversationManager.shared = v3;
}

uint64_t type metadata accessor for ConversationManager()
{
  return objc_opt_self();
}

uint64_t specialized ConversationManager.init(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for ConversationManagerClient();
  v8 = MEMORY[0x1E0D14EC8];
  *(_QWORD *)&v6 = a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  v4 = static AVAudioSessionAssertionManager.shared;
  *(_QWORD *)(a2 + 80) = type metadata accessor for AVAudioSessionAssertionManager();
  *(_QWORD *)(a2 + 88) = &protocol witness table for AVAudioSessionAssertionManager;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  outlined init with take of TypedPayloadDecoding(&v6, a2 + 104);
  swift_retain();
  return a2;
}

uint64_t type metadata accessor for AVAudioSessionAssertionManager()
{
  return objc_opt_self();
}

uint64_t outlined init with take of TypedPayloadDecoding(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t base witness table accessor for Equatable in Participant()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
}

uint64_t closure #3 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v10 = MEMORY[0x1E0DEE9D8];
  if (!((unint64_t)*a1 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_11:
    result = swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_12:
    *a2 = v9;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1A1B05010](v6, v3);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
        swift_retain();
      }
      ++v6;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 320))();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v8);
    }
    while (v4 != v6);
    result = swift_bridgeObjectRelease();
    v9 = v10;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t GroupSession.Sessions.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = type metadata accessor for GroupSessionObserver(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v5 = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionObserver<A>, v4);
  v7 = type metadata accessor for _PublisherElements(0, v4, v5, v6);
  result = _PublisherElements.makeAsyncIterator()(v7, v8, v9, v10);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PublisherElements);
}

uint64_t specialized _PublisherElements.Iterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for _PublisherElements.Iterator.Inner(0, a2, a3, a4);
  v5 = swift_allocObject();
  _PublisherElements.Iterator.Inner.init()();
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for _PublisherElements<A>.Iterator.Inner, v4);
  Publisher.subscribe<A>(_:)();
  return v5;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance GroupSessionObserver<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GroupSessionObserver.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for _PublisherElements.Iterator.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PublisherElements.Iterator.Inner);
}

uint64_t _PublisherElements.Iterator.Inner.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = swift_slowAlloc();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *(_QWORD *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = static Subscribers.Demand.none.getter();
  **(_DWORD **)(v0 + 16) = 0;
  return v0;
}

uint64_t _PublisherElements.makeAsyncIterator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized _PublisherElements.Iterator.init(_:)(v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t type metadata completion function for Participant()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v0;

  return closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _NativeDictionary.filter(_:)(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v4, (void (*)(char *, uint64_t))partial apply for closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:));
  return swift_release();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  int64_t v28;

  v23 = a2;
  v24 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = *(_QWORD *)(a3 + 64);
  v25 = 0;
  v26 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v28 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_5;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v28)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
    v20 = *(_QWORD *)(v26 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v28)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
      v20 = *(_QWORD *)(v26 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v28)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
        v20 = *(_QWORD *)(v26 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v15 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    outlined init with copy of GroupSessionTable.Storage(*(_QWORD *)(a3 + 56) + 24 * v17, (uint64_t)v27);
    v18 = closure #1 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)((uint64_t)v10, (uint64_t)v27, a4);
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v27);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v28)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
  v20 = *(_QWORD *)(v26 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v28)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, (_QWORD *)a3);
    v20 = *(_QWORD *)(v26 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  id v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  char *v50;

  v39 = a2;
  v40 = a1;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  v6 = MEMORY[0x1E0C80A78](v44);
  v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v50 = (char *)&v39 - v8;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v45 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v41 = 0;
  v42 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v43 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v47 = (v17 - 1) & v17;
      v48 = v13;
      v19 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_18;
    }
    v20 = __OFADD__(v13, 1);
    v21 = v13 + 1;
    if (v20)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v43)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v40, v39, v41, v45, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
    v22 = *(_QWORD *)(v42 + 8 * v21);
    if (!v22)
      break;
LABEL_17:
    v47 = (v22 - 1) & v22;
    v48 = v21;
    v19 = __clz(__rbit64(v22)) + (v21 << 6);
LABEL_18:
    v24 = v45;
    v25 = v10;
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    v27 = v49;
    v26(v49, v45[6] + *(_QWORD *)(v10 + 72) * v19, v9);
    v28 = *(_QWORD *)(v24[7] + 8 * v19);
    v29 = v9;
    v30 = (uint64_t)v50;
    v26(v50, (unint64_t)v27, v29);
    v31 = *(int *)(v44 + 48);
    *(_QWORD *)(v30 + v31) = v28;
    v32 = (uint64_t)v46;
    v33 = v30;
    v9 = v29;
    v26(v46, v33, v29);
    *(_QWORD *)(v32 + v31) = v28;
    v34 = *(_QWORD *)(a4 + 16);
    swift_retain_n();
    if (v34 && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v36 & 1) != 0))
    {
      v37 = objc_msgSend(*(id *)(*(_QWORD *)(a4 + 56) + 8 * v35), sel_state, v39);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v50, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
      v10 = v25;
      v38 = *(void (**)(char *, uint64_t))(v25 + 8);
      v38(v46, v9);
      swift_release();
      result = ((uint64_t (*)(char *, uint64_t))v38)(v49, v9);
      v17 = v47;
      v13 = v48;
      if (v37 == (id)4)
      {
        *(unint64_t *)((char *)v40 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        v20 = __OFADD__(v41++, 1);
        if (v20)
          goto LABEL_31;
      }
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v50, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
      v10 = v25;
      v18 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v18(v32, v9);
      swift_release();
      result = ((uint64_t (*)(char *, uint64_t))v18)(v49, v9);
      v17 = v47;
      v13 = v48;
    }
  }
  v23 = v21 + 1;
  if (v21 + 1 >= v43)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v40, v39, v41, v45, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 2;
  if (v21 + 2 >= v43)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v40, v39, v41, v45, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 3;
  if (v21 + 3 >= v43)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v40, v39, v41, v45, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
  v22 = *(_QWORD *)(v42 + 8 * v23);
  if (v22)
  {
LABEL_16:
    v21 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v43)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v40, v39, v41, v45, &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
    v22 = *(_QWORD *)(v42 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];

  v38 = a1;
  v44 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v44 - 8);
  v7 = MEMORY[0x1E0C80A78](v44);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v37 - v10;
  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v12 = result;
  v37 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v38;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v40 = v9;
  v16 = v41;
  v17 = v44;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v43 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v37)
        return v12;
      v21 = v38[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v37)
          return v12;
        v21 = v38[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v37)
            return v12;
          v21 = v38[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v37)
              return v12;
            v21 = v38[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v37)
                  return v12;
                v21 = v38[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v43 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v16, a4[6] + v25 * v19, v17);
    outlined init with copy of GroupSessionTable.Storage(a4[7] + 24 * v19, (uint64_t)v46);
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27 = v40;
    v26(v40, v16, v17);
    outlined init with take of GroupSessionTable.Storage((uint64_t)v46, (uint64_t)v45);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    v26((char *)(*(_QWORD *)(v12 + 48) + v31 * v25), v27, v44);
    result = outlined init with take of GroupSessionTable.Storage((uint64_t)v45, *(_QWORD *)(v12 + 56) + 24 * v31);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

uint64_t closure #2 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  Swift::Int v26;
  uint64_t v27;

  v2 = type metadata accessor for UUID();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v23 - v6;
  v8 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v8);
  v10 = v9;
  v27 = MEMORY[0x1E0DEE9D8];
  if (!(v9 >> 62))
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    result = swift_bridgeObjectRelease();
    *a1 = v22;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v11 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v11 >= 1)
  {
    v13 = 0;
    v24 = a1;
    v25 = v10 & 0xC000000000000001;
    do
    {
      if (v25)
        v14 = (id)MEMORY[0x1A1B05010](v13, v10);
      else
        v14 = *(id *)(v10 + 8 * v13 + 32);
      v15 = v14;
      v16 = objc_msgSend(v14, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v17 = objc_msgSend(v15, sel_groupUUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for Conversation();
      swift_allocObject();
      Conversation.init(identifier:groupUUID:)((uint64_t)v7, (uint64_t)v5);
      swift_retain();
      v18 = objc_msgSend(v15, sel_state);
      if ((unint64_t)v18 >= 5)
        v19 = 0;
      else
        v19 = (char)v18;
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v26) = v19;
      swift_retain();
      static Published.subscript.setter();
      v20 = objc_msgSend(v15, sel_localParticipantIdentifier);
      swift_getKeyPath();
      swift_getKeyPath();
      v26 = (Swift::Int)v20;
      swift_retain();
      static Published.subscript.setter();
      if (one-time initialization token for shared != -1)
        swift_once();
      v21 = specialized InternalGroupSessionProvider.groupSessions(for:)(v15);
      swift_getKeyPath();
      swift_getKeyPath();
      v26 = v21;
      swift_retain();
      static Published.subscript.setter();
      swift_release();

      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v13;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    v22 = v27;
    a1 = v24;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void type metadata completion function for GroupActivityMetadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for GroupActivityDescription();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t type metadata accessor for GroupStateObserver()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupStateObserver;
  if (!type metadata singleton initialization cache for GroupStateObserver)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for _PublisherElements.Iterator.Inner()
{
  return swift_initClassMetadata2();
}

void type metadata completion function for GroupStateObserver()
{
  unint64_t v0;

  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for Published<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
  }
}

uint64_t type metadata completion function for _PublisherElements()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance _PublisherElements<A>.Iterator.Inner(_QWORD *a1)
{
  return _PublisherElements.Iterator.Inner.receive(subscription:)(a1);
}

void partial apply for closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in _PublisherElements.Iterator.Inner.next()(a1, v1);
}

void closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;

  v5 = *(_QWORD *)(*a2 + 80);
  v4 = *(_QWORD *)(*a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - v9;
  v11 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v13 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, v5, v4, v12);
  (*(void (**)(__int128 *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(&v19, a2 + 4, v13);
  if (!v20)
  {
    v17[1] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    v14 = a2 + 9;
    swift_beginAccess();
    v15 = a2[9];
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      goto LABEL_8;
    if (v15 < 0)
    {
      __break(1u);
      return;
    }
    v16 = v15 + 1;
    if (__OFADD__(v15, 1))
LABEL_8:
      v16 = static Subscribers.Demand.unlimited.getter();
    *v14 = v16;
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    return;
  }
  if (v20 == 1)
  {
    os_unfair_lock_unlock(v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_QWORD, char *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), v10, v7);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(&v19, (uint64_t)v18);
    v17[4] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  }
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t _PublisherElements.Iterator.Inner.receive(subscription:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  v3 = *v1;
  v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v6 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v7 + 16))(v12, v1 + 4, v6);
  v8 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  if (v8)
  {
    os_unfair_lock_unlock(v4);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    return dispatch thunk of Cancellable.cancel()();
  }
  else
  {
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v7 + 40))(v1 + 4, v12, v6);
    swift_endAccess();
    swift_beginAccess();
    v10 = v1[9];
    v1[9] = static Subscribers.Demand.none.getter();
    os_unfair_lock_unlock(v4);
    v11 = static Subscribers.Demand.none.getter();
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0
      || (static Subscribers.Demand.unlimited.getter(),
          result = static Subscribers.Demand.== infix(_:_:)(),
          (result & 1) == 0))
    {
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0
        || (static Subscribers.Demand.unlimited.getter(),
            result = static Subscribers.Demand.== infix(_:_:)(),
            (result & 1) == 0)
        && v11 < v10)
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        return dispatch thunk of Subscription.request(_:)();
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for _PublisherElements.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t type metadata accessor for _PublisherElements.Iterator.Inner.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PublisherElements.Iterator.Inner.State);
}

uint64_t outlined init with copy of AudioSessionAssertionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for _PublisherElements.Iterator.Inner.State(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return a1;
}

uint64_t assignWithTake for _PublisherElements.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  char *v15;

  v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t storeEnumTagSinglePayload for GroupSession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t GroupStateObserver.$isEligibleForGroupSession.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t _PublisherElements.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[3];
  v2 = (uint64_t *)v0[4];
  v3 = *v2;
  v0[5] = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(_QWORD *)(v1 + 16);
  v4[3] = *(_QWORD *)(v1 + 24);
  v4[4] = v2;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  *v5 = v0;
  v5[1] = _PublisherElements.Iterator.next();
  return v8(v0[2], (uint64_t)partial apply for closure #1 in _PublisherElements.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in _PublisherElements.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #2 in GroupStateObserver.init(conversationManagerClient:queue:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, oslog, v1, "Group session eligibility changed to new value: %{BOOL}d", v2, 8u);
    MEMORY[0x1A1B05CC4](v2, -1, -1);
  }

}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_1ED0BAC08 == -1)
  {
    if (qword_1ED0BAC10)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_1ED0BAC08, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_1ED0BAC10)
      return _availability_version_check();
  }
  if (qword_1ED0BAC00 == -1)
  {
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1ED0BAC00, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_1ED0BABF4 > a3)
    return 1;
  return dword_1ED0BABF4 >= a3 && dword_1ED0BABF8 >= a4;
}

uint64_t partial apply for closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t closure #2 in _PublisherElements.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = **(_QWORD ***)(v0 + 24);
  *(_QWORD *)(v0 + 32) = v1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = closure #2 in _PublisherElements.Iterator.next();
  v2[2] = *(_QWORD *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _PublisherElements.Iterator.Inner.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;

  v4 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  *v1 = v0;
  v1[1] = _PublisherElements.Iterator.Inner.next();
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, void (*)(uint64_t), _QWORD, uint64_t))v4)(v0[2], 0, 0, partial apply for closure #1 in _PublisherElements.Iterator.Inner.next(), v0[3], v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in GroupStateObserver.init(conversationManagerClient:queue:)@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v37 = a2;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
  v3 = MEMORY[0x1E0C80A78](v42);
  v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v36 - v6;
  MEMORY[0x1E0C80A78](v5);
  v40 = (char *)&v36 - v8;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 64);
  v38 = *a1 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v39 = (unint64_t)(v11 + 63) >> 6;
  v43 = v9;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_5;
    }
    v32 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v32 >= v39)
      goto LABEL_26;
    v33 = *(_QWORD *)(v38 + 8 * v32);
    ++v15;
    if (!v33)
    {
      v15 = v32 + 1;
      if (v32 + 1 >= v39)
        goto LABEL_26;
      v33 = *(_QWORD *)(v38 + 8 * v15);
      if (!v33)
      {
        v15 = v32 + 2;
        if (v32 + 2 >= v39)
          goto LABEL_26;
        v33 = *(_QWORD *)(v38 + 8 * v15);
        if (!v33)
        {
          v15 = v32 + 3;
          if (v32 + 3 >= v39)
            goto LABEL_26;
          v33 = *(_QWORD *)(v38 + 8 * v15);
          if (!v33)
          {
            v15 = v32 + 4;
            if (v32 + 4 >= v39)
              goto LABEL_26;
            v33 = *(_QWORD *)(v38 + 8 * v15);
            if (!v33)
            {
              v34 = v32 + 5;
              if (v34 >= v39)
              {
LABEL_26:
                v35 = 0;
                goto LABEL_27;
              }
              v33 = *(_QWORD *)(v38 + 8 * v34);
              if (!v33)
              {
                while (1)
                {
                  v15 = v34 + 1;
                  if (__OFADD__(v34, 1))
                    goto LABEL_29;
                  if (v15 >= v39)
                    goto LABEL_26;
                  v33 = *(_QWORD *)(v38 + 8 * v15);
                  ++v34;
                  if (v33)
                    goto LABEL_24;
                }
              }
              v15 = v34;
            }
          }
        }
      }
    }
LABEL_24:
    v13 = (v33 - 1) & v33;
    v17 = __clz(__rbit64(v33)) + (v15 << 6);
LABEL_5:
    v18 = v43;
    v19 = *(_QWORD *)(v43 + 48);
    v20 = type metadata accessor for UUID();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = v19 + *(_QWORD *)(v21 + 72) * v17;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    v24 = (uint64_t)v40;
    v23(v40, v22, v20);
    v25 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v17);
    v26 = v42;
    *(_QWORD *)(v24 + *(int *)(v42 + 48)) = v25;
    outlined init with take of (key: UUID, value: TUConversationActivitySessionContainer)(v24, (uint64_t)v7);
    v27 = *(int *)(v26 + 48);
    v28 = v41;
    v23(v41, (uint64_t)v7, v20);
    v29 = *(void **)&v7[v27];
    *(_QWORD *)&v28[v27] = v29;
    v30 = v25;
    v31 = objc_msgSend(v29, sel_state);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
    if (v31 == (id)3)
    {
      v35 = 1;
LABEL_27:
      result = swift_release();
      *v37 = v35;
      return result;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t (*)(void))qword_1ED0BAC10;
  if (qword_1ED0BAC10)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x1E0C80CC0])
    {
      qword_1ED0BAC10 = (uint64_t)MEMORY[0x1E0C80CC0];
      v1 = MEMORY[0x1E0C80CC0];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x1A1B05694](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_1ED0BABF4, &dword_1ED0BABF8);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

id lpLog()
{
  if (lpLog_once != -1)
    dispatch_once(&lpLog_once, &__block_literal_global);
  return (id)lpLog_log;
}

void __lpLog_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.groupactivities", "LinkPresentationSupport");
  v1 = (void *)lpLog_log;
  lpLog_log = (uint64_t)v0;

}

id SystemCoordinatorHost.currentState.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  return *v1;
}

id key path getter for SystemCoordinatorHost.currentState : SystemCoordinatorHost@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

void key path setter for SystemCoordinatorHost.currentState : SystemCoordinatorHost(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;
  SystemCoordinatorHost.currentState.didset();

}

void SystemCoordinatorHost.currentState.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;
  SystemCoordinatorHost.currentState.didset();

}

void SystemCoordinatorHost.currentState.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id *v8;
  id v9;
  id v10;
  char v11;
  id *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[2];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v8 = (id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    v9 = *v8;
    type metadata accessor for SystemCoordinatorState();
    v10 = v9;
    v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) == 0)
    {
      v12 = (id *)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
      swift_beginAccess();
      if (*v12)
      {
        v13 = *v12;
        XPCHostConnection.clientObject.getter();

        v14 = (void *)v16[1];
        v15 = *v8;
        objc_msgSend(v14, sel_updateState_, v15);

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void (*SystemCoordinatorHost.currentState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return SystemCoordinatorHost.currentState.modify;
}

void SystemCoordinatorHost.currentState.modify(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v3 = *(void **)a1;
  v5 = (void **)(*(_QWORD *)a1 + 24);
  v4 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v8 = *(void **)(v7 + v6);
  *(_QWORD *)(v7 + v6) = *v5;
  v9 = v4;
  v10 = v9;
  if ((a2 & 1) != 0)
  {
    v11 = v9;
    SystemCoordinatorHost.currentState.didset();

    v8 = *v5;
  }
  else
  {
    SystemCoordinatorHost.currentState.didset();

  }
  free(v3);
}

uint64_t SystemCoordinatorHost.configurationUpdateSubject.getter()
{
  return swift_retain();
}

uint64_t SystemCoordinatorHost.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id SystemCoordinatorHost.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
}

uint64_t key path getter for SystemCoordinatorHost.delegate : SystemCoordinatorHost@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  result = MEMORY[0x1A1B05DC0](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for SystemCoordinatorHost.delegate : SystemCoordinatorHost(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t SystemCoordinatorHost.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v1);
}

uint64_t SystemCoordinatorHost.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SystemCoordinatorHost.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1A1B05DC0](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

void SystemCoordinatorHost.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id SystemCoordinatorHost.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint);
}

void *SystemCoordinatorHost.connection.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

id key path getter for SystemCoordinatorHost.connection : SystemCoordinatorHost@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

void key path setter for SystemCoordinatorHost.connection : SystemCoordinatorHost(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = v2;
    v6 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    v7 = *v3;
  }
  else
  {
    v8 = v2;
    v7 = 0;
  }
  *v3 = v2;

}

void SystemCoordinatorHost.connection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    v4 = *v3;
  }
  *v3 = a1;

}

void (*SystemCoordinatorHost.connection.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return SystemCoordinatorHost.connection.modify;
}

void SystemCoordinatorHost.connection.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v2 = *(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(v6 + v5);
  if ((a2 & 1) != 0)
  {
    v8 = v3;
    if (v7)
    {
      v9 = v7;
      dispatch thunk of XPCHostConnection.destroyConnection()();

      v10 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;

    v12 = *v4;
  }
  else
  {
    if (v7)
    {
      v11 = v7;
      dispatch thunk of XPCHostConnection.destroyConnection()();

      v12 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;
  }

  free(v2);
}

objc_class *SystemCoordinatorHost.__allocating_init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  objc_class *v8;

  v7 = objc_allocWithZone(v3);
  v8 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, a2, a3);

  return v8;
}

objc_class *SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v4;

  v4 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, a2, a3);

  return v4;
}

uint64_t specialized Publisher.dynamicThrottle<A>(for:after:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v63 = a2;
  v82 = a1;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>>);
  v78 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v75 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>);
  v77 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v73 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>);
  v8 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  v72 = v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v69 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)v54 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>);
  v13 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  v66 = v13;
  MEMORY[0x1E0C80A78](v12);
  v64 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v16 = *(_QWORD *)(v15 - 8);
  v59 = *(_QWORD *)(v16 + 64);
  v17 = v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v58 = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v57 = (char *)v54 - v20;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  MEMORY[0x1E0C80A78](v56);
  v22 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>);
  v70 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v79 = (char *)v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>);
  v68 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v28 = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v3;
  v85 = a3;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<SystemCoordinatorConfiguration, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<SystemCoordinatorConfiguration, Never>, MEMORY[0x1E0C95F48]);
  v55 = Publisher.share()();
  v83 = v55;
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1, v29);
  v54[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>);
  v61 = type metadata accessor for OS_dispatch_queue();
  v54[1] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, MEMORY[0x1E0C95AA0]);
  v62 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
  v60 = v28;
  Publisher.measureInterval<A>(using:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v26, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  v30 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF8A0], MEMORY[0x1E0DEF8B8]);
  MEMORY[0x1A1B0513C](v15, v30);
  v22[*(int *)(v56 + 36)] = 0;
  v31 = v17;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v33 = v57;
  v32(v57, v82, v15);
  v34 = v58;
  v32(v58, v63, v15);
  v35 = *(unsigned __int8 *)(v31 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = (v59 + v35 + v36) & ~v35;
  v38 = swift_allocObject();
  v39 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 32);
  v39(v38 + v36, v33, v15);
  v39(v38 + v37, v34, v15);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue> and conformance Publishers.MeasureInterval<A, B>, &demangling cache variable for type metadata for Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, MEMORY[0x1E0C958A8]);
  Publisher.scan<A>(_:_:)();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v22, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  v83 = v55;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>> and conformance Publishers.Scan<A, B>, &demangling cache variable for type metadata for Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, MEMORY[0x1E0C959B8]);
  v40 = v64;
  Publisher.zip<A>(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>> and conformance Publishers.Zip<A, B>, &demangling cache variable for type metadata for Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>, MEMORY[0x1E0C95970]);
  v41 = v65;
  v42 = Publisher.share()();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v41);
  v83 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>);
  type metadata accessor for SystemCoordinatorConfiguration();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, MEMORY[0x1E0C95AA0]);
  v43 = v67;
  Publisher.compactMap<A>(_:)();
  v83 = v42;
  v44 = v69;
  Publisher.compactMap<A>(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, MEMORY[0x1E0C95708]);
  v45 = v73;
  v46 = v71;
  Publisher.throttle<A>(for:scheduler:latest:)();
  v47 = *(void (**)(char *, uint64_t))(v72 + 8);
  v47(v44, v46);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue> and conformance Publishers.Throttle<A, B>, &demangling cache variable for type metadata for Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>, MEMORY[0x1E0C95C28]);
  v48 = v75;
  v49 = v45;
  v50 = v74;
  Publisher.merge<A>(with:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>> and conformance Publishers.Merge<A, B>, &demangling cache variable for type metadata for Publishers.Merge<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, Publishers.Throttle<Publishers.CompactMap<Publishers.Share<Publishers.Zip<Publishers.Scan<Publishers.MeasureInterval<Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>, OS_dispatch_queue>, PublishRate<OS_dispatch_queue>>, Publishers.Share<PassthroughSubject<SystemCoordinatorConfiguration, Never>>>>, SystemCoordinatorConfiguration>, OS_dispatch_queue>>, MEMORY[0x1E0C95A60]);
  v51 = v76;
  v52 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v51);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v49, v50);
  v47(v43, v46);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v79, v80);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v81);
  return v52;
}

void closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18[3];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v3);
  if (v4)
  {
    v5 = (char *)v4;
    if (one-time initialization token for systemCoordinator != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
    v7 = v2;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v18[0] = v11;
      *(_DWORD *)v10 = 136315138;
      type metadata accessor for SystemCoordinatorConfiguration();
      v12 = v7;
      v13 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v8, v9, "Updated configuration to %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v11, -1, -1);
      MEMORY[0x1A1B05CC4](v10, -1, -1);

    }
    else
    {

    }
    v15 = &v5[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate];
    swift_beginAccess();
    if (MEMORY[0x1A1B05DC0](v15))
    {
      v16 = *((_QWORD *)v15 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, id, uint64_t, uint64_t))(v16 + 8))(v5, v7, ObjectType, v16);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

id SystemCoordinatorHost.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener], sel_invalidate);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

Swift::Void __swiftcall SystemCoordinatorHost.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = v0 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
    swift_beginAccess();
    if (MEMORY[0x1A1B05DC0](v7))
    {
      v8 = *(_QWORD *)(v7 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v0, ObjectType, v8);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

id SystemCoordinatorHost.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SystemCoordinatorHost.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

Swift::Bool __swiftcall SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

void closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  void **v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = (void **)(a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = a2;
    v6 = v4;
    dispatch thunk of XPCHostConnection.destroyConnection()();

    v7 = *v3;
  }
  else
  {
    v8 = a2;
    v7 = 0;
  }
  *v3 = a2;

}

void SystemCoordinatorHost.provideCurrentState(_:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id *v9;
  id v10;
  uint64_t v11;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = (id *)(v1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    v10 = *v9;
    a1();

  }
  else
  {
    __break(1u);
  }
}

uint64_t default argument 5 of GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

id default argument 6 of LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D15358]), sel_init);
}

void default argument 1 of GroupSession.sendResource(atURL:to:metadata:completion:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 1 of PlaybackSyncer.init(internalCoordinator:serialQueue:)()
{
  type metadata accessor for OS_dispatch_queue();
  return static OS_dispatch_queue.main.getter();
}

uint64_t default argument 1 of AttachmentLedgerTopic.subscribe(with:pendingAttachments:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  return 0;
}

uint64_t default argument 1 of SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  return 0;
}

uint64_t default argument 4 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return 0;
}

unint64_t default argument 5 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

unint64_t default argument 6 of SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

void default argument 0 of SystemCoordinatorConfiguration._SpatialTemplatePreference.init(_:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t (*default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return partial apply for closure #1 in default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:);
}

uint64_t specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v31 = a1;
  v32 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v27 - v13;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, v15, MEMORY[0x1E0DEF8B0]);
  v16 = a2;
  LOBYTE(a2) = dispatch thunk of static Comparable.< infix(_:_:)();
  v17 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.SchedulerTimeType.Stride and conformance OS_dispatch_queue.SchedulerTimeType.Stride, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF8A0], MEMORY[0x1E0DEF8B8]);
  if ((a2 & 1) == 0)
  {
    v18 = v32;
    result = MEMORY[0x1A1B0513C](v8, v17);
    v25 = 0;
    v21 = (int *)(v5 + 36);
    goto LABEL_8;
  }
  v28 = v12;
  v29 = v9;
  v19 = v31;
  v18 = v32;
  MEMORY[0x1A1B05130](v31, v16, v8, v17);
  v20 = dispatch thunk of static Comparable.<= infix(_:_:)();
  outlined init with copy of PublishRate<OS_dispatch_queue>(v19, (uint64_t)v7);
  if ((v20 & 1) == 0)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
    v23 = v29;
    goto LABEL_7;
  }
  v21 = (int *)(v5 + 36);
  v22 = v7[*(int *)(v5 + 36)];
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  v23 = v29;
  if ((v22 & 1) != 0)
  {
LABEL_7:
    v26 = v28;
    MEMORY[0x1A1B0513C](v8, v17);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v8);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v18, v26, v8);
    v21 = (int *)(v5 + 36);
    v25 = 1;
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v18, v14, v8);
  v25 = 0;
LABEL_8:
  *(_BYTE *)(v18 + *v21) = v25;
  return result;
}

uint64_t default argument 0 of CGImageRef.thumbnailImageData(_:)()
{
  return 300;
}

uint64_t default argument 2 of BinaryDecoder.decode(_:encoding:delimiter:)()
{
  return 0;
}

uint64_t default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)((uint64_t (*)(_QWORD))MEMORY[0x1E0D10980], MEMORY[0x1E0D10938], (uint64_t)&protocol witness table for AssetManager, a1);
}

uint64_t default argument 2 of GroupSessionEvent.Action.init(eventType:item:queueItemType:)()
{
  return 0;
}

uint64_t default argument 0 of GroupSessionEvent.activitySessionEvent(hasPendingActivityUpdate:)()
{
  return 0;
}

uint64_t default argument 1 of AVAudioSessionAssertion.init(id:manager:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = static AVAudioSessionAssertionManager.shared;
  a1[3] = type metadata accessor for AVAudioSessionAssertionManager();
  a1[4] = (uint64_t)&protocol witness table for AVAudioSessionAssertionManager;
  *a1 = v2;
  return swift_retain();
}

uint64_t default argument 2 of ReliableBroadcastLink.handleRetransmissionRequestTimedOut(from:for:retry:)()
{
  return 0;
}

void default argument 1 of LinkManager.sendData(_:to:reliability:completion:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void default argument 2 of LinkManager.sendData(_:to:reliability:completion:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 4 of AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)((uint64_t (*)(_QWORD))MEMORY[0x1E0D10980], MEMORY[0x1E0D10938], (uint64_t)&protocol witness table for AssetManager, a1);
}

id default argument 0 of BackgroundGroupSessionManager.init(client:)()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerClient()), sel_init);
}

uint64_t default argument 0 of ConversationManager.init(client:)@<X0>(uint64_t *a1@<X8>)
{
  return default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)((uint64_t (*)(_QWORD))MEMORY[0x1E0D14ED8], MEMORY[0x1E0D14EC0], MEMORY[0x1E0D14EC8], a1);
}

uint64_t default argument 3 of AttachmentDownloadTask.init(topic:attachment:file:manager:)@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = a1(0);
  result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x1E0DEA950]);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TUConversationState(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x1A1B048B4](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance TUConversationActivityEventType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance nw_connection_state_t(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TUConversationState(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TUConversationActivityLifetimePolicy()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TUConversationActivityLifetimePolicy()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TUConversationActivityLifetimePolicy()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGImageRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CGImageRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AVPlaybackCoordinatorPlaybackObjectCommand()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance nw_connection_state_t@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance nw_connection_state_t(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinatorPlaybackObjectCommand()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorPlaybackObjectCommand);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorPlaybackObjectCommand);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinationTransportControlStateKey()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AVPlaybackCoordinationParticipantStateKey()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AVPlaybackCoordinatorPlaybackObjectCommand@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x1A1B048B4](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIImageRepresentationOption()
{
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGImageRef(uint64_t a1)
{
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CGImageRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGImageRef()
{
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CGImageRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGImageRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CGImageRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

int *specialized thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *result;
  void *v5;

  result = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  if ((*(_BYTE *)(a1 + result[9]) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(void **)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PublishRate<OS_dispatch_queue>, SystemCoordinatorConfiguration))
                           + 48));
    result = v5;
  }
  *a2 = v5;
  return result;
}

{
  int *result;
  void *v5;

  result = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  if (*(_BYTE *)(a1 + result[9]) == 1)
  {
    v5 = *(void **)(a1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PublishRate<OS_dispatch_queue>, SystemCoordinatorConfiguration))
                           + 48));
    result = v5;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

objc_class *specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(uint64_t a1, id a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  id v22;
  objc_class *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  objc_class *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  objc_class *ObjectType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  objc_super v67;
  objc_super v68;
  objc_super v69;

  v64 = a3;
  v52 = a2;
  v57 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DispatchTimeInterval();
  v53 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v55 = *(_QWORD *)(v63 - 8);
  v9 = MEMORY[0x1E0C80A78](v63);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v50 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue>);
  v15 = *(_QWORD *)(v14 - 8);
  v61 = v14;
  v62 = v15;
  MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState;
  v18 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  v19 = objc_allocWithZone(v18);
  v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  v20 = &v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)&v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v69.receiver = v19;
  v69.super_class = v18;
  v21 = v3;
  v22 = objc_msgSendSuper2(&v69, sel_init);
  v23 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  v24 = objc_allocWithZone(v23);
  *(_QWORD *)&v24[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v22;
  v24[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(_QWORD *)&v24[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v68.receiver = v24;
  v68.super_class = v23;
  *(_QWORD *)&v3[v17] = objc_msgSendSuper2(&v68, sel_init);
  v25 = OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<SystemCoordinatorConfiguration, Never>);
  swift_allocObject();
  *(_QWORD *)&v21[v25] = PassthroughSubject.init()();
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubscription] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_connection] = 0;
  v26 = &v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid];
  v56 = type metadata accessor for UUID();
  v58 = *(_QWORD *)(v56 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v26, a1, v56);
  v27 = v52;
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue] = v52;
  v28 = (void *)objc_opt_self();
  v52 = v27;
  v29 = objc_msgSend(v28, sel_anonymousListener);
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener] = v29;
  v30 = objc_msgSend(v29, sel_endpoint);
  *(_QWORD *)&v21[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint] = v30;

  v67.receiver = v21;
  v67.super_class = ObjectType;
  v31 = objc_msgSendSuper2(&v67, sel_init);
  v32 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  v33 = v64;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v35 = v51;
  v34(v8, v64 + *(int *)(v32 + 20), v51);
  ObjectType = (objc_class *)v31;
  swift_retain();
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  v34(v8, v33 + *(int *)(v32 + 24), v35);
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  v36 = v13;
  v37 = v52;
  v38 = specialized Publisher.dynamicThrottle<A>(for:after:scheduler:)((uint64_t)v13, (uint64_t)v11, (uint64_t)v52);
  v39 = *(void (**)(char *, uint64_t))(v55 + 8);
  v40 = v11;
  v41 = v63;
  v39(v40, v63);
  v39(v36, v41);
  swift_release();
  v66 = v38;
  v34(v8, v33, v35);
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
  v65 = v37;
  v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v43 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v60, 1, 1, v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinatorConfiguration, Never>);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinatorConfiguration, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SystemCoordinatorConfiguration, Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
  v44 = v59;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v43, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  v39(v36, v63);
  swift_release();
  swift_allocObject();
  v45 = ObjectType;
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue> and conformance Publishers.Debounce<A, B>, &demangling cache variable for type metadata for Publishers.Debounce<AnyPublisher<SystemCoordinatorConfiguration, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95BB0]);
  v46 = v61;
  v47 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v46);
  *(_QWORD *)((char *)v45 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_configurationUpdateSubscription) = v47;
  swift_release();
  v48 = *(void **)((char *)v45 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_listener);
  objc_msgSend(v48, sel_setDelegate_, v45);
  objc_msgSend(v48, sel_resume);

  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v64);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v56);
  return v45;
}

BOOL specialized SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  id v22;
  char *v23;
  char *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v37 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.systemCoordinator);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v31 = (_QWORD *)swift_slowAlloc();
    v32 = v4;
    *(_DWORD *)v12 = 138412290;
    aBlock[0] = v9;
    v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v14 = v31;
    *v31 = v9;

    _os_log_impl(&dword_1A0DB3000, v10, v11, "Asked to accept new connection from %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v4 = v32;
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);

  }
  else
  {

  }
  v15 = *(void **)&v2[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue];
  v16 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorHostConnection());
  swift_unknownObjectWeakInit();
  v17 = v9;
  v15;
  v18 = (void *)XPCHostConnection.init(connection:queue:)();
  if (v18)
  {
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v2;
    *(_QWORD *)(v19 + 24) = v18;
    aBlock[4] = partial apply for closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor;
    v20 = _Block_copy(aBlock);
    v21 = v2;
    v22 = v18;
    v23 = v33;
    static DispatchQoS.unspecified.getter();
    v38 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v24 = v37;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v23, v24, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v4);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
    swift_release();
  }
  else
  {
    v25 = v17;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 67109120;
      LODWORD(aBlock[0]) = objc_msgSend(v25, sel_processIdentifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1A0DB3000, v26, v27, "SystemCoordinatorHostConnection could not be created; rejecting connection from PID %d.",
        v28,
        8u);
      MEMORY[0x1A1B05CC4](v28, -1, -1);

    }
    else
    {

    }
  }
  return v18 != 0;
}

uint64_t sub_1A0DBF5AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in default argument 2 of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1)
{
  uint64_t v1;

  return destructiveProjectEnumData for GroupSessionErrors(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t dispatch thunk of SystemCoordinatorHostDelegate.systemCoordinatorHost(_:didUpdateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SystemCoordinatorHostDelegate.systemCoordinatorHostDidInvalidate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t ObjC metadata update function for SystemCoordinatorHost()
{
  return type metadata accessor for SystemCoordinatorHost();
}

uint64_t type metadata accessor for SystemCoordinatorHost()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemCoordinatorHost;
  if (!type metadata singleton initialization cache for SystemCoordinatorHost)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorHost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorHost.__allocating_init(uuid:queue:configurationUpdatesRateLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityLifetimePolicy);
}

void type metadata accessor for SPAxis(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SPAxis);
}

void type metadata accessor for TUConversationActivityEventQueueItemType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityEventQueueItemType);
}

void type metadata accessor for TUConversationActivityEventType(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityEventType);
}

void type metadata accessor for TUConversationActivityContentAssociation(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for TUConversationActivityContentAssociation);
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for audit_token_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for audit_token_t);
}

void type metadata accessor for SPAngle(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SPAngle);
}

uint64_t initializeBufferWithCopyOfBuffer for SPVector3D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SPVector3D(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for SPVector3D(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, (unint64_t *)&lazy cache variable for type metadata for SPVector3D);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SPPose3D(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SPPose3D(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for SPPose3D(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SPPose3D);
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CFErrorRef);
}

void type metadata accessor for SecTaskRef(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SecTaskRef);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, (unint64_t *)&lazy cache variable for type metadata for CGImageRef);
}

void type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for AVPlaybackCoordinationTransportControlStateKey);
}

void type metadata accessor for AVPlaybackCoordinationParticipantStateKey(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for AVPlaybackCoordinationParticipantStateKey);
}

void type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for AVPlaybackCoordinatorPlaybackObjectCommand);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinatorPlaybackObjectCommand()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorPlaybackObjectCommand and conformance AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorPlaybackObjectCommand);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for Equatable in CGImageRef()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, (uint64_t (*)(uint64_t))type metadata accessor for CGImageRef, (uint64_t)&protocol conformance descriptor for CGImageRef);
}

uint64_t base witness table accessor for Hashable in CGImageRef()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CGImageRef and conformance CGImageRef, (uint64_t (*)(uint64_t))type metadata accessor for CGImageRef, (uint64_t)&protocol conformance descriptor for CGImageRef);
}

uint64_t base witness table accessor for Equatable in TUConversationActivityLifetimePolicy()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TUConversationActivityLifetimePolicy and conformance TUConversationActivityLifetimePolicy, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivityLifetimePolicy, (uint64_t)&protocol conformance descriptor for TUConversationActivityLifetimePolicy);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinationTransportControlStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinationParticipantStateKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
}

uint64_t outlined destroy of weak SystemCoordinatorHostDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1A0DBFBE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;

  closure #1 in SystemCoordinatorHost.listener(_:shouldAcceptNewConnection:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1A0DBFC30()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(void **a1)
{
  uint64_t v1;

  closure #1 in SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)(a1, v1);
}

uint64_t outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A0DBFC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(_QWORD *)(type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride() - 8);
  return specialized closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, v3+ ((*(_QWORD *)(v7 + 64)+ *(unsigned __int8 *)(v7 + 80)+ ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a3);
}

uint64_t outlined init with copy of PublishRate<OS_dispatch_queue>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublishRate<OS_dispatch_queue>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CPActivitySessionState(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CPActivitySessionState);
}

void type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for CIImageRepresentationOption);
}

void type metadata accessor for nw_connection_state_t(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for nw_connection_state_t);
}

void type metadata accessor for SPRotation3D(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SPRotation3D);
}

void type metadata accessor for SPPoint3D(uint64_t a1)
{
  type metadata accessor for TUConversationActivityLifetimePolicy(a1, &lazy cache variable for type metadata for SPPoint3D);
}

void type metadata accessor for TUConversationActivityLifetimePolicy(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for RawRepresentable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

uint64_t base witness table accessor for RawRepresentable in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for Equatable in AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey and conformance AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey);
}

uint64_t base witness table accessor for Equatable in CIImageRepresentationOption()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
}

void Topic.delegate.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

void EquatableSpatialTemplatePreference.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
}

uint64_t EquatableSpatialTemplatePreference.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = v3;
  return result;
}

uint64_t static EquatableSpatialTemplatePreference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
    return 0;
  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EquatableSpatialTemplatePreference(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9))
  {
    v2 = *(_BYTE *)(a2 + 8);
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 8))
        return 1;
    }
    else
    {
      if (*(double *)a1 != *(double *)a2)
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EquatableSpatialTemplatePreference(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EquatableSpatialTemplatePreference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for EquatableSpatialTemplatePreference()
{
  return &type metadata for EquatableSpatialTemplatePreference;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

BOOL static GroupSessionErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void GroupSessionErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int GroupSessionErrors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionErrors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionErrors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GroupSessionErrors()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionErrors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *Capabilities.attachments.unsafeMutableAddressor()
{
  return &static Capabilities.attachments;
}

uint64_t static Capabilities.attachments.getter()
{
  return 1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance Capabilities(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance Capabilities(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance Capabilities@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance Capabilities@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance Capabilities(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance Capabilities()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance Capabilities()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance Capabilities(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Capabilities@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t GroupSession.initiator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1 + direct field offset for GroupSession.initiator, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t GroupSession.playbackSyncerLink.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t specialized GroupSession.playbackSyncerLink.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t, _UNKNOWN **);
  uint64_t v6;

  v3 = (uint64_t *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  swift_retain();
  if (v4)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4
                                                         + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                           + 456))(0, 0);
  if (*v3)
  {
    v5 = *(void (**)(uint64_t, _UNKNOWN **))(**(_QWORD **)(*v3
                                                                   + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                                     + 456);
    swift_retain();
    v6 = swift_retain();
    v5(v6, &protocol witness table for GroupSession<A>);
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t GroupSession.playbackSyncerLink.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  swift_retain();
  GroupSession.playbackSyncerLink.didset(v4);
  swift_release();
  return swift_release();
}

uint64_t GroupSession.playbackSyncerLink.didset(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  void (*v4)(uint64_t, _UNKNOWN **);
  uint64_t v5;

  if (a1)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1
                                                         + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                           + 456))(0, 0);
  v2 = (_QWORD *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  result = swift_beginAccess();
  if (*v2)
  {
    v4 = *(void (**)(uint64_t, _UNKNOWN **))(**(_QWORD **)(*v2
                                                                   + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                                     + 456);
    swift_retain();
    v5 = swift_retain();
    v4(v5, &protocol witness table for GroupSession<A>);
    return swift_release();
  }
  return result;
}

void (*GroupSession.playbackSyncerLink.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)(v1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  v3[3] = *v4;
  swift_retain();
  return GroupSession.playbackSyncerLink.modify;
}

void GroupSession.playbackSyncerLink.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = swift_retain();
    GroupSession.playbackSyncerLink.setter(v4);
    swift_release();
  }
  else
  {
    GroupSession.playbackSyncerLink.setter(v3);
  }
  free(v2);
}

uint64_t GroupSession.playbackSyncMessenger.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t GroupSession.playbackSyncMessenger.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*GroupSession.playbackSyncMessenger.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for GroupSession.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GroupSession.topicManager.getter()
{
  return swift_retain();
}

id GroupSession.linkManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for GroupSession.linkManager);
}

double GroupSession.attachmentDownloadBytes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession.attachmentDownloadBytes;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentDownloadBytes.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + direct field offset for GroupSession.attachmentDownloadBytes);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentDownloadBytes.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentUploadBytes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession.attachmentUploadBytes;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentUploadBytes.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + direct field offset for GroupSession.attachmentUploadBytes);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentUploadBytes.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentDownloadTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession.attachmentDownloadTime;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentDownloadTime.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + direct field offset for GroupSession.attachmentDownloadTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentDownloadTime.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

double GroupSession.attachmentUploadTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession.attachmentUploadTime;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t GroupSession.attachmentUploadTime.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + direct field offset for GroupSession.attachmentUploadTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*GroupSession.attachmentUploadTime.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.receivedDataHandler : <A>GroupSession<A>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for GroupSession.receivedDataHandler : <A>GroupSession<A>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t GroupSession.receivedDataHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t GroupSession.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + direct field offset for GroupSession.receivedDataHandler);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t (*GroupSession.receivedDataHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.receivedDataPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._receivedDataPublisher, &demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(Data, Participant, SendReliability), Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedDataPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._receivedDataPublisher);
}

uint64_t specialized Subject.wrappedValue.getter(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  if (*(_QWORD *)(v2 + 8))
  {
    v4 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    v6 = v2;
    __swift_instantiateConcreteTypeFromMangledName(a1);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](a2, a1, MEMORY[0x1E0C95F48]);
    v4 = Publisher.eraseToAnyPublisher()();
    *(_QWORD *)(v6 + 8) = v4;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t (*GroupSession.receivedDataPublisher.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for GroupSession._receivedDataPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(Data, Participant, SendReliability), Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

uint64_t GroupSession.$receivedDataPublisher.getter()
{
  specialized GroupSession.$receivedDataPublisher.getter();
  return swift_retain();
}

uint64_t GroupSession.receivedAttachmentPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._receivedAttachmentPublisher, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedAttachmentPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._receivedAttachmentPublisher);
}

uint64_t (*GroupSession.receivedAttachmentPublisher.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for GroupSession._receivedAttachmentPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, &lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

uint64_t GroupSession.$receivedAttachmentPublisher.getter()
{
  specialized GroupSession.$receivedAttachmentPublisher.getter();
  return swift_retain();
}

uint64_t GroupSession.attachmentsPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0
                                                                                   + direct field offset for GroupSession.linkManager))
                                             + 0x148))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[LinkManager.Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[LinkManager.Attachment], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[LinkManager.Attachment], Never>, MEMORY[0x1E0C95FB8]);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[LinkManager.Attachment], Never>, [UUID]>, MEMORY[0x1E0C95950]);
  v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t closure #1 in GroupSession.attachmentsPublisher.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for LinkManager.Attachment(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    v20 = a2;
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v16 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v21 = *(_QWORD *)(v5 + 72);
    do
    {
      outlined init with copy of Participant(v16, (uint64_t)v7, type metadata accessor for LinkManager.Attachment);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v7, v8);
      outlined destroy of Participant((uint64_t)v7, type metadata accessor for LinkManager.Attachment);
      v15 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v22;
      }
      v18 = *(_QWORD *)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v15 = v22;
      }
      *(_QWORD *)(v15 + 16) = v18 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18, v12, v8);
      v22 = v15;
      v16 += v21;
      --v14;
    }
    while (v14);
    a2 = v20;
  }
  *a2 = v15;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  char **p_name;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  char **v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, _QWORD);
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[32];
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v42 = a2;
  v3 = type metadata accessor for Participant();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v45 = (uint64_t)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v5 = __CocoaSet.count.getter();
  else
    v5 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v43)
    {
      result = __CocoaSet.startIndex.getter();
      v8 = 1;
    }
    else
    {
      result = specialized _NativeSet.startIndex.getter(a1);
      v8 = v9 & 1;
    }
    v47 = result;
    v48 = v7;
    v49 = v8;
    if (v5 < 0)
    {
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v10 = a1;
      v38[1] = v10;
      v39 = a1;
      p_name = &SystemCoordinator.name;
      do
      {
        while (1)
        {
          v18 = v47;
          v19 = v49;
          v44 = v48;
          specialized Set.subscript.getter(v47, v48, v49, a1);
          v21 = v20;
          v22 = objc_msgSend(v20, p_name[421]);
          v23 = objc_msgSend(v21, sel_handle);
          v24 = objc_msgSend(v23, sel_normalizedValue);

          v25 = p_name;
          if (!v24)
          {
            v26 = objc_msgSend(v21, sel_handle);
            v24 = objc_msgSend(v26, sel_value);

          }
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v29 = v28;

          v30 = v45;
          UUID.init(_:)();
          v31 = v41;
          *(_QWORD *)(v30 + *(int *)(v41 + 24)) = v22;
          v32 = (uint64_t *)(v30 + *(int *)(v31 + 20));
          *v32 = v27;
          v32[1] = v29;
          v33 = objc_msgSend(v21, (SEL)v25 + 72);
          swift_beginAccess();
          specialized Set._Variant.remove(_:)((uint64_t)v33);
          swift_endAccess();

          v34 = v50;
          p_name = v25;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
            v34 = v50;
          }
          a1 = v39;
          v36 = *(_QWORD *)(v34 + 16);
          v35 = *(_QWORD *)(v34 + 24);
          if (v36 >= v35 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v34 = v50;
          }
          *(_QWORD *)(v34 + 16) = v36 + 1;
          result = outlined init with take of Participant(v45, v34+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v36, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          if (v43)
            break;
          v12 = v44;
          v13 = specialized _NativeSet.index(after:)(v18, v44, v19, a1);
          v15 = v14;
          v17 = v16;
          outlined consume of Set<Participant>.Index._Variant(v18, v12, v19);
          v47 = v13;
          v48 = v15;
          v49 = v17 & 1;
          if (!--v5)
            goto LABEL_24;
        }
        if ((v19 & 1) == 0)
          goto LABEL_27;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationParticipant>.Index);
        v37 = (void (*)(char *, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v37(v46, 0);
        --v5;
      }
      while (v5);
LABEL_24:
      outlined consume of Set<Participant>.Index._Variant(v47, v48, v49);
      return v50;
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for Participant();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    return v7;
  v31 = v5;
  v27[1] = v1;
  v34 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v7 = v34;
  result = specialized _NativeDictionary.startIndex.getter(a1);
  v10 = result;
  v11 = 0;
  v12 = a1 + 64;
  v27[0] = a1 + 88;
  v28 = v6;
  v29 = v9;
  v30 = a1 + 64;
  v13 = (uint64_t)v31;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
  {
    v16 = (unint64_t)v10 >> 6;
    if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
      goto LABEL_26;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    UUID.init(_:)();
    v18 = v33;
    *(_QWORD *)(v13 + *(int *)(v33 + 24)) = v17;
    v19 = (_QWORD *)(v13 + *(int *)(v18 + 20));
    *v19 = 0;
    v19[1] = 0xE000000000000000;
    v34 = v7;
    v21 = *(_QWORD *)(v7 + 16);
    v20 = *(_QWORD *)(v7 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v7 = v34;
    }
    *(_QWORD *)(v7 + 16) = v21 + 1;
    result = outlined init with take of Participant(v13, v7+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v14 = 1 << *(_BYTE *)(a1 + 32);
    if (v10 >= v14)
      goto LABEL_27;
    v12 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v16);
    if ((v22 & (1 << v10)) == 0)
      goto LABEL_28;
    LODWORD(v9) = v29;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v29)
      goto LABEL_29;
    v23 = v22 & (-2 << (v10 & 0x3F));
    if (v23)
    {
      v14 = __clz(__rbit64(v23)) | v10 & 0xFFFFFFFFFFFFFFC0;
      v15 = v28;
    }
    else
    {
      v24 = v16 + 1;
      v25 = (unint64_t)(v14 + 63) >> 6;
      v15 = v28;
      if (v16 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (!v26)
        {
          v24 = v16 + 2;
          if (v16 + 2 >= v25)
            goto LABEL_4;
          v26 = *(_QWORD *)(v30 + 8 * v24);
          if (!v26)
          {
            while (v25 - 3 != v16)
            {
              v26 = *(_QWORD *)(v27[0] + 8 * v16++);
              if (v26)
              {
                v24 = v16 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v14 = __clz(__rbit64(v26)) + (v24 << 6);
      }
    }
LABEL_4:
    ++v11;
    v10 = v14;
    if (v11 == v15)
      return v7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t GroupSession.catchupNeededPublisher.getter()
{
  return GroupSession.receivedDataPublisher.getter((uint64_t)&direct field offset for GroupSession._catchupNeededPublisher, &demangling cache variable for type metadata for PassthroughSubject<Participant, Never>, &lazy protocol witness table cache variable for type PassthroughSubject<Participant, Never> and conformance PassthroughSubject<A, B>);
}

uint64_t GroupSession.receivedDataPublisher.getter(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;

  swift_beginAccess();
  v5 = specialized Subject.wrappedValue.getter(a2, a3);
  swift_endAccess();
  return v5;
}

uint64_t GroupSession.catchupNeededPublisher.setter(uint64_t a1)
{
  return GroupSession.receivedDataPublisher.setter(a1, &direct field offset for GroupSession._catchupNeededPublisher);
}

uint64_t GroupSession.receivedDataPublisher.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a1;
  return swift_release();
}

uint64_t (*GroupSession.catchupNeededPublisher.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for GroupSession._catchupNeededPublisher;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = specialized Subject.wrappedValue.getter(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>, &lazy protocol witness table cache variable for type PassthroughSubject<Participant, Never> and conformance PassthroughSubject<A, B>);
  return GroupSession.receivedDataPublisher.modify;
}

void GroupSession.receivedDataPublisher.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + 8) = v3;
    swift_release();
    swift_endAccess();
  }
  else
  {
    *(_QWORD *)(v4 + 8) = v3;
    swift_endAccess();
    swift_release();
  }
  free(v2);
}

uint64_t GroupSession.$catchupNeededPublisher.getter()
{
  specialized GroupSession.$catchupNeededPublisher.getter();
  return swift_retain();
}

uint64_t GroupSession.state.getter()
{
  return GroupSession.state.getter();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t key path getter for GroupSession.state : <A>GroupSession<A>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GroupSession.state.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSession.state : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.state.setter);
}

uint64_t GroupSession.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t GroupSession.$state.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for GroupSession.State(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  type metadata accessor for Published();
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of GroupSession.activity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  Published.init(wrappedValue:)((uint64_t)v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t GroupSession.activity.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t key path getter for GroupSession.activity : <A>GroupSession<A>()
{
  return GroupSession.activity.getter();
}

void key path setter for GroupSession.activity : <A>GroupSession<A>(uint64_t a1)
{
  specialized GroupSession.activity.setter(a1);
}

uint64_t GroupSession.activity.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized GroupSession.activity.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void GroupSession.activity.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Optional();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v34 - v7;
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  swift_retain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v40 = v3;
  if (v13)
  {
    v14 = swift_slowAlloc();
    v35 = v9;
    v15 = v14;
    v34 = (void *)swift_slowAlloc();
    v43 = v34;
    *(_DWORD *)v15 = 136315394;
    v37 = v10;
    v16 = GroupSession.description.getter();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)&v43);
    v36 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    GroupSession.activity.getter();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    v18 = >> prefix<A>(_:)((uint64_t)v8, v2);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v39);
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)&v43);
    v5 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v11, v12, "Observed activity mutation on GroupSession %s to %s", (uint8_t *)v15, 0x16u);
    v21 = v34;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v21, -1, -1);
    v22 = v15;
    v9 = v35;
    MEMORY[0x1A1B05CC4](v22, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  GroupSession.state.getter();
  v23 = v43;
  v41 = 1;
  v42 = (uint64_t)v43;
  v24 = static GroupSession.State.== infix(_:_:)((id *)&v42, (void **)&v41);
  outlined consume of GroupSession<A>.State<A>(v23);
  if ((v24 & 1) != 0)
  {
    GroupSession.activity.getter();
    GroupSession.invalidateIfWaiting()((uint64_t)partial apply for closure #1 in GroupSession.updateActivity(_:), (uint64_t)&block_descriptor_518);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v2);
  }
  else
  {
    if (one-time initialization token for runtimeIssues != -1)
      swift_once();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.runtimeIssues);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1A0DB3000, v25, v26, "Attempted activity update on non-joined GroupSession", v27, 2u);
      MEMORY[0x1A1B05CC4](v27, -1, -1);
    }

    swift_retain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (void *)swift_slowAlloc();
      v43 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = GroupSession.description.getter();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v28, v29, "Attempted activity update on non-joined GroupSession %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v31, -1, -1);
      MEMORY[0x1A1B05CC4](v30, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
}

uint64_t static GroupSession.State.== infix(_:_:)(id *a1, void **a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v2 == (id)1)
    {
      if (v3 == (void *)1)
        goto LABEL_10;
    }
    else if ((unint64_t)v3 >= 2)
    {
      v5 = v2;
LABEL_10:
      v4 = 1;
      goto LABEL_11;
    }
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  outlined copy of GroupSession<A>.State<A>(*a1);
  v4 = 0;
LABEL_11:
  outlined copy of GroupSession<A>.State<A>(v3);
  outlined consume of GroupSession<A>.State<A>(v2);
  outlined consume of GroupSession<A>.State<A>(v3);
  return v4;
}

uint64_t GroupSession.updateActivity(_:)()
{
  return GroupSession.invalidateIfWaiting()((uint64_t)partial apply for closure #1 in GroupSession.updateActivity(_:), (uint64_t)&block_descriptor_518);
}

void (*GroupSession.activity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.activity.getter();
  return GroupSession.activity.modify;
}

void GroupSession.activity.modify(uint64_t a1, char a2)
{
  GroupSession.activity.modify(a1, a2, (void (*)(void *))specialized GroupSession.activity.setter);
}

uint64_t GroupSession.$activity.getter()
{
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t GroupSession.$activity.setter(uint64_t a1)
{
  uint64_t v2;

  specialized GroupSession.$activity.setter(a1);
  v2 = type metadata accessor for Published.Publisher();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*GroupSession.$activity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for Published.Publisher();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.$activity.getter();
  return GroupSession.$activity.modify;
}

void GroupSession.$activity.modify(uint64_t a1, char a2)
{
  GroupSession.activity.modify(a1, a2, (void (*)(void *))specialized GroupSession.$activity.setter);
}

uint64_t GroupSession.activeParticipants.getter()
{
  return GroupSession.activeParticipants.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for GroupSession.activeParticipants : <A>GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.activeParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupSession.activeParticipants : <A>GroupSession<A>()
{
  swift_bridgeObjectRetain();
  return GroupSession.activeParticipants.setter();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t GroupSession.$activeParticipants.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t GroupSession.localParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(*(_QWORD *)(v1 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, a1, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t GroupSession.sceneSessionIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GroupSession.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 240);
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GroupSession.timestamps.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = (uint64_t)v2 + *(_QWORD *)(*v2 + 240);
  v6 = type metadata accessor for GroupSession.Timestamps(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v5, v6);
}

id GroupSession.remoteEndpoint.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_beginAccess();
  return *v1;
}

void GroupSession.remoteEndpoint.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 248));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*GroupSession.remoteEndpoint.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.isLocallyInitiated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 256));
}

uint64_t GroupSession.isLightweightPrimaryInitiated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 264));
}

uint64_t GroupSession.isFirstJoin.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_beginAccess();
  return *v1;
}

uint64_t GroupSession.isFirstJoin.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 272));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*GroupSession.isFirstJoin.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

id GroupSession.connection.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_beginAccess();
  return *v1;
}

void GroupSession.connection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 280));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*GroupSession.connection.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

id GroupSession.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 288));
}

void *GroupSession.publishQueue.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void GroupSession.publishQueue.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 296));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*GroupSession.publishQueue.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.capabilities.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 336);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t GroupSession.capabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 336));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  return GroupSession.capabilities.didset(v4);
}

uint64_t specialized GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for DispatchPredicate();
  v5 = *(v4 - 1);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 288));
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  v4 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 336));
  result = swift_beginAccess();
  if (*v4 == a1)
    return result;
  if (one-time initialization token for default != -1)
    goto LABEL_10;
LABEL_4:
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_retain();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v14 = 134217984;
    aBlock[0] = *v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "Updating capabilities to %ld", v14, 0xCu);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {

    swift_release();
  }
  v15 = (id *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 280));
  swift_beginAccess();
  v16 = *v15;
  v17 = XPCClient.queue.getter();

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for specialized closure #1 in GroupSession.capabilities.didset;
  *(_QWORD *)(v18 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_426;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v17, v19);

  _Block_release(v19);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v17 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t GroupSession.capabilities.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for DispatchPredicate();
  v5 = *(v4 - 1);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 288));
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  v4 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 336));
  result = swift_beginAccess();
  if (*v4 == a1)
    return result;
  if (one-time initialization token for default != -1)
    goto LABEL_10;
LABEL_4:
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_retain();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v14 = 134217984;
    aBlock[0] = *v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "Updating capabilities to %ld", v14, 0xCu);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {

    swift_release();
  }
  v15 = (id *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 280));
  swift_beginAccess();
  v16 = *v15;
  v17 = XPCClient.queue.getter();

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for specialized closure #1 in GroupSession.capabilities.didset;
  *(_QWORD *)(v18 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_515;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v17, v19);

  _Block_release(v19);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v17 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void (*GroupSession.capabilities.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 336));
  swift_beginAccess();
  v3[3] = *v4;
  return GroupSession.capabilities.modify;
}

void GroupSession.capabilities.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  GroupSession.capabilities.setter(*(_QWORD *)(*(_QWORD *)a1 + 24));
  free(v1);
}

uint64_t GroupSession.internalActiveParticipants.getter()
{
  return GroupSession.activeParticipants.getter();
}

uint64_t key path getter for GroupSession.internalActiveParticipants : <A>GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.internalActiveParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupSession.internalActiveParticipants : <A>GroupSession<A>()
{
  swift_bridgeObjectRetain();
  return GroupSession.internalActiveParticipants.setter();
}

uint64_t GroupSession.internalActiveParticipants.setter()
{
  return GroupSession.activeParticipants.setter();
}

uint64_t GroupSession.activeParticipants.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*GroupSession.internalActiveParticipants.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

void GroupSession.internalActiveParticipants.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t GroupSession.$internalActiveParticipants.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, a1);
  return a5(v9);
}

uint64_t GroupSession.$internalActiveParticipants.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GroupSession.$internalActiveParticipants.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  GroupSession.$internalActiveParticipants.getter();
  return GroupSession.$internalActiveParticipants.modify;
}

void GroupSession.$internalActiveParticipants.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    GroupSession.$internalActiveParticipants.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    GroupSession.$internalActiveParticipants.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t GroupSession.internalState.getter()
{
  return GroupSession.state.getter();
}

uint64_t key path getter for GroupSession.internalState : <A>GroupSession<A>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GroupSession.internalState.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSession.internalState : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.internalState.setter);
}

uint64_t key path setter for GroupSession.state : <A>GroupSession<A>(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  id v7;

  v7 = *a1;
  outlined copy of GroupSession<A>.State<A>(v7);
  return a5(&v7);
}

void GroupSession.internalState.setter(void **a1)
{
  void *v1;
  void *v2;

  v2 = *a1;
  v1 = v2;
  GroupSession.internalState.willset(&v2);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  static Published.subscript.setter();
  GroupSession.updatePublicState()();
}

void specialized GroupSession.internalState.willset(void *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_retain();
  outlined copy of GroupSession<A>.State<A>(a1);
  swift_retain();
  outlined copy of GroupSession<A>.State<A>(a1);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v12 = v5;
    *(_DWORD *)v4 = 136315394;
    v6 = specialized GroupSession.description.getter();
    v8 = v7;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    outlined copy of GroupSession<A>.State<A>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
    v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of GroupSession<A>.State<A>(a1);
    outlined consume of GroupSession<A>.State<A>(a1);
    _os_log_impl(&dword_1A0DB3000, oslog, v3, "%s changing internal state: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {
    swift_release_n();
    outlined consume of GroupSession<A>.State<A>(a1);
    outlined consume of GroupSession<A>.State<A>(a1);

  }
}

void GroupSession.internalState.willset(void **a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  v2 = *v1;
  v3 = *a1;
  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  outlined copy of GroupSession<A>.State<A>(v3);
  outlined copy of GroupSession<A>.State<A>(v3);
  swift_retain();
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v16 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v15 = (uint64_t)v3;
    v11 = type metadata accessor for GroupSession.State(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v10);
    v12 = >> prefix<A>(_:)((uint64_t)&v15, v11);
    v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of GroupSession<A>.State<A>(v3);
    outlined consume of GroupSession<A>.State<A>(v3);
    _os_log_impl(&dword_1A0DB3000, oslog, v5, "%s changing internal state: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);

  }
  else
  {
    swift_release();
    outlined consume of GroupSession<A>.State<A>(v3);
    outlined consume of GroupSession<A>.State<A>(v3);

  }
}

Swift::Void __swiftcall GroupSession.updatePublicState()()
{
  specialized GroupSession.updatePublicState()((uint64_t)partial apply for closure #1 in GroupSession.updatePublicState(), (uint64_t)&block_descriptor_0);
}

uint64_t specialized GroupSession.updatePublicState()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void **)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 296));
  swift_beginAccess();
  v13 = *v12;
  if (*v12)
    v14 = *v12;
  else
    v14 = *(id *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 288));
  aBlock[4] = a1;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  v15 = _Block_copy(aBlock);
  v16 = v13;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

void (*GroupSession.internalState.modify(uint64_t a1))(void **a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  GroupSession.internalState.getter();
  return GroupSession.internalState.modify;
}

void GroupSession.internalState.modify(void **a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *a1;
  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined copy of GroupSession<A>.State<A>(v2);
    GroupSession.internalState.setter(&v3);
    outlined consume of GroupSession<A>.State<A>(v2);
  }
  else
  {
    GroupSession.internalState.setter(&v3);
  }
}

uint64_t GroupSession.$internalState.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for GroupSession.State(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  type metadata accessor for Published();
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t GroupSession.$internalState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v4;
  specialized GroupSession.$internalState.setter(a1, a2, a3, a4);
  type metadata accessor for GroupSession.State(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v7);
  v8 = type metadata accessor for Published.Publisher();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

void (*GroupSession.$internalState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  type metadata accessor for GroupSession.State(255, *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88), v4);
  v5 = type metadata accessor for Published.Publisher();
  v3[1] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  GroupSession.$internalState.getter();
  return GroupSession.$internalState.modify;
}

void GroupSession.$internalState.modify(uint64_t a1, char a2)
{
  GroupSession.activity.modify(a1, a2, (void (*)(void *))specialized GroupSession.$internalState.setter);
}

void GroupSession.activity.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 24);
  v6 = *(void **)(*(_QWORD *)a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v6, v7);
    a3(v5);
    v9 = *(void (**)(void *, uint64_t))(v8 + 8);
    v9(v5, v7);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 32));
    v9 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v9(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

BOOL GroupSession.isInvalid.getter()
{
  void *v1;

  GroupSession.internalState.getter();
  outlined consume of GroupSession<A>.State<A>(v1);
  return (unint64_t)v1 > 1;
}

uint64_t GroupSession.distributionCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 360));
}

uint64_t GroupSession.__allocating_init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23;

  v23 = swift_allocObject();
  GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
  return v23;
}

uint64_t specialized GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, void *a14, void *a15, uint64_t a16, void (*a17)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(char *, uint64_t, uint64_t);
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void (*v89)(char *, uint64_t, uint64_t);
  id v90;
  char *v91;
  uint64_t v92;
  Swift::String v93;
  void **v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  uint64_t *v99;
  void (*v100)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v101;
  uint64_t v102;
  id *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  char *v121;
  id v122;
  char *v123;
  uint64_t v124;
  void (*v125)(_QWORD, _QWORD, _QWORD);
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  void (*v144)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t);
  _QWORD *v145;
  uint64_t v146;
  void (*v147)(uint64_t (*)(), uint64_t);
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  void (*v151)(uint64_t (*)(uint64_t), uint64_t);
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (*v155)(uint64_t (*)(void *), uint64_t);
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  void (*v159)(uint64_t (*)(uint64_t), uint64_t);
  _QWORD *v160;
  void *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t);
  char *v172;
  id v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  void (*v180)(uint64_t (*)(void *), uint64_t);
  uint64_t v181;
  void (*v182)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  void *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t);
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  void (*v213)(char *, uint64_t, uint64_t);
  int v214;
  id v215;
  uint64_t v216;
  void (*v217)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v218;
  uint64_t v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  void (*v230)(char *, uint64_t, uint64_t);
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  char *v247;
  void (*v248)(char *, char *, uint64_t);
  id v249;
  char *v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  id v263[4];
  unint64_t v264;
  unint64_t v265;

  v21 = v20;
  v246 = a8;
  v207 = a7;
  v220 = a6;
  v257 = a5;
  v230 = (void (*)(char *, uint64_t, uint64_t))a4;
  v213 = a3;
  v256 = a2;
  v261 = a1;
  v253 = a20;
  v255 = a19;
  v252 = a18;
  v217 = a17;
  v216 = a16;
  v249 = a15;
  v215 = a14;
  v251 = a13;
  v214 = a12;
  v254 = a11;
  v212 = a10;
  v210 = a9;
  v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  v242 = *(_QWORD *)(v243 - 8);
  MEMORY[0x1E0C80A78](v243);
  v241 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v237 = *(_QWORD *)(v244 - 8);
  v23 = MEMORY[0x1E0C80A78](v244);
  v238 = (char *)&v193 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v239 = (char *)&v193 - v26;
  MEMORY[0x1E0C80A78](v25);
  v240 = (char *)&v193 - v27;
  v233 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v232 = *(_QWORD *)(v233 - 8);
  MEMORY[0x1E0C80A78](v233);
  v231 = (char *)&v193 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  v235 = *(_QWORD *)(v236 - 8);
  MEMORY[0x1E0C80A78](v236);
  v234 = (char *)&v193 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnyGroupActivity>.Publisher);
  v228 = *(_QWORD *)(v229 - 8);
  v30 = MEMORY[0x1E0C80A78](v229);
  v226 = (char *)&v193 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v227 = (char *)&v193 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v33);
  v250 = (char *)&v193 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>);
  v219 = *(_QWORD *)(v221 - 8);
  MEMORY[0x1E0C80A78](v221);
  v218 = (char *)&v193 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue>);
  v224 = *(_QWORD *)(v225 - 8);
  MEMORY[0x1E0C80A78](v225);
  v223 = (char *)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  v209 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211);
  v208 = (char *)&v193 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v204 = *(_QWORD *)(v206 - 8);
  MEMORY[0x1E0C80A78](v206);
  v205 = (char *)&v193 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v202);
  v203 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v40);
  v201 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for UUID();
  v259 = *(_QWORD *)(v42 - 8);
  v260 = v42;
  v43 = MEMORY[0x1E0C80A78](v42);
  v199 = (char *)&v193 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = v44;
  MEMORY[0x1E0C80A78](v43);
  v247 = (char *)&v193 - v45;
  v245 = type metadata accessor for AnyGroupActivity(0);
  v46 = MEMORY[0x1E0C80A78](v245);
  v198 = (uint64_t)&v193 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46);
  v196 = (uint64_t)&v193 - v48;
  v195 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v195);
  v194 = (char *)&v193 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v258 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v52 = (char *)&v193 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<AnyGroupActivity>.State>);
  v54 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v56 = (char *)&v193 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v20 + direct field offset for GroupSession.playbackSyncerLink) = 0;
  *(_QWORD *)(v20 + direct field offset for GroupSession.playbackSyncMessenger) = 0;
  *(_QWORD *)(v20 + direct field offset for GroupSession.attachmentDownloadBytes) = 0;
  *(_QWORD *)(v20 + direct field offset for GroupSession.attachmentUploadBytes) = 0;
  *(_QWORD *)(v20 + direct field offset for GroupSession.attachmentDownloadTime) = 0;
  *(_QWORD *)(v20 + direct field offset for GroupSession.attachmentUploadTime) = 0;
  v57 = (_QWORD *)(v20 + direct field offset for GroupSession.receivedDataHandler);
  *v57 = 0;
  v57[1] = 0;
  v58 = (uint64_t *)(v20 + direct field offset for GroupSession._receivedDataPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>);
  swift_allocObject();
  *v58 = PassthroughSubject.init()();
  v58[1] = 0;
  v59 = (uint64_t *)(v20 + direct field offset for GroupSession._receivedAttachmentPublisher);
  v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_allocObject();
  *v59 = PassthroughSubject.init()();
  v59[1] = 0;
  v60 = (uint64_t *)(v20 + direct field offset for GroupSession._catchupNeededPublisher);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>);
  swift_allocObject();
  *v60 = PassthroughSubject.init()();
  v60[1] = 0;
  v61 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 208);
  v264 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
  Published.init(initialValue:)();
  v62 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
  v63 = v53;
  v62(v61, v56, v53);
  v64 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 224);
  v65 = MEMORY[0x1E0DEE9E8];
  v264 = MEMORY[0x1E0DEE9E8];
  v248 = (void (*)(char *, char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  v66 = *(void (**)(uint64_t, char *, uint64_t))(v258 + 32);
  v67 = v64;
  v68 = v257;
  v258 = v50;
  v66(v67, v52, v50);
  v69 = (_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 232));
  *v69 = 0;
  v69[1] = 0;
  v197 = (void **)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 296));
  *v197 = 0;
  v70 = v65;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      v70 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v70 = MEMORY[0x1E0DEE9E8];
    v68 = v257;
  }
  *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 304)) = v70;
  *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 320)) = 0;
  *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 328)) = 0;
  *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 336)) = 0;
  v71 = v20 + *(_QWORD *)(*(_QWORD *)v20 + 344);
  v264 = v65;
  Published.init(initialValue:)();
  v66(v71, v52, v258);
  v72 = v20 + *(_QWORD *)(*(_QWORD *)v20 + 352);
  v264 = 0;
  Published.init(initialValue:)();
  v62(v72, v56, v63);
  *(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 368)) = 0;
  v73 = v260;
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 16);
  v75 = v261;
  v74(v20 + direct field offset for GroupSession.id, v261, v260);
  v76 = (uint64_t)v194;
  UUID.init()();
  v77 = v195;
  v78 = (void (**)(char *, uint64_t, uint64_t))(v76 + *(int *)(v195 + 20));
  v79 = v230;
  *v78 = v213;
  v78[1] = v79;
  *(_QWORD *)(v76 + *(int *)(v77 + 24)) = 0;
  outlined init with take of Participant(v76, v20 + direct field offset for GroupSession.initiator, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v80 = v196;
  outlined init with copy of Participant(v68, v196, type metadata accessor for AnyGroupActivity);
  swift_beginAccess();
  outlined init with copy of Participant(v80, v198, type metadata accessor for AnyGroupActivity);
  Published.init(initialValue:)();
  outlined destroy of Participant(v80, type metadata accessor for AnyGroupActivity);
  swift_endAccess();
  v81 = v252;
  *(_QWORD *)(v20 + direct field offset for GroupSession.topicManager) = v252;
  swift_retain();
  v82 = UUID.uuidString.getter();
  v83 = v256;
  v85 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81 + 248))(v256, v82, v84);
  swift_bridgeObjectRelease();
  v86 = (uint64_t)v247;
  v74((uint64_t)v247, v75, v73);
  v87 = (uint64_t)v199;
  v213 = (void (*)(char *, uint64_t, uint64_t))v74;
  v74((uint64_t)v199, v83, v73);
  outlined init with copy of Participant(v254, v76, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v88 = objc_allocWithZone(MEMORY[0x1E0D15358]);
  swift_retain();
  swift_retain();
  v89 = v249;
  v90 = objc_msgSend(v88, sel_init);
  v91 = (char *)objc_allocWithZone((Class)type metadata accessor for LinkManager(0));
  v249 = v85;
  v230 = (void (*)(char *, uint64_t, uint64_t))v89;
  *(_QWORD *)(v21 + direct field offset for GroupSession.linkManager) = specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(v86, v87, v81, (uint64_t)v85, v76, v89, v90, v91);
  v92 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v264 = 0;
  v265 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v264 = 0xD000000000000025;
  v265 = 0x80000001A0F18FF0;
  v93._countAndFlagsBits = v207;
  v93._object = v246;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v264 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v205, *MEMORY[0x1E0DEF8D0], v206);
  v246 = (void *)v92;
  *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 288)) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v94 = v197;
  swift_beginAccess();
  v95 = *v94;
  v96 = v251;
  *v94 = v251;
  v97 = v96;

  v98 = v220;
  *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 248)) = v220;
  outlined init with copy of URL?(v253, v21 + *(_QWORD *)(*(_QWORD *)v21 + 240), &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  *(_BYTE *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 256)) = v210 & 1;
  *(_BYTE *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 264)) = v212 & 1;
  *(_BYTE *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 272)) = v214 & 1;
  *(_QWORD *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 360)) = v215;
  v99 = (uint64_t *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 232));
  swift_beginAccess();
  v100 = v217;
  *v99 = v216;
  v99[1] = (uint64_t)v100;
  v101 = v98;
  swift_bridgeObjectRelease();
  outlined init with copy of AudioSessionAssertionManager(v255, v21 + *(_QWORD *)(*(_QWORD *)v21 + 312));
  type metadata accessor for ActivitySessionClientConnection();
  v220 = v101;
  v102 = XPCClient.__allocating_init(listenerEndpoint:)();
  v103 = (id *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 280));
  *v103 = (id)v102;
  v104 = v21 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  v263[3] = *(id *)v104;
  swift_allocObject();
  swift_weakInit();
  v105 = MEMORY[0x1E0C95F48];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95F48]);
  swift_retain();
  swift_retain();
  v106 = v208;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>, MEMORY[0x1E0C957C0]);
  v107 = v211;
  v108 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v209 + 8))(v106, v107);
  *(_QWORD *)(v104 + 8) = v108;
  swift_release();
  swift_beginAccess();
  v109 = *v103;
  swift_allocObject();
  swift_weakInit();
  v110 = v109;
  swift_retain();
  ActivitySessionClientConnection.serverDisconnectedCallback.setter();

  swift_release();
  v111 = *v103;
  swift_allocObject();
  swift_weakInit();
  v112 = v111;
  swift_retain();
  ActivitySessionClientConnection.setAssociatedSceneCallback.setter();

  swift_release();
  v113 = *v103;
  swift_allocObject();
  swift_weakInit();
  v114 = v113;
  swift_retain();
  ActivitySessionClientConnection.setStateCallback.setter();

  swift_release();
  v115 = *v103;
  swift_allocObject();
  swift_weakInit();
  v116 = v115;
  swift_retain();
  ActivitySessionClientConnection.setDataCryptorCallback.setter();

  swift_release();
  v117 = *v103;
  swift_allocObject();
  swift_weakInit();
  v118 = v117;
  swift_retain();
  ActivitySessionClientConnection.receivedResourceCallback.setter();

  swift_release();
  v119 = *v103;
  v120 = (void *)ActivitySessionClientConnection.setActivityPublisher.getter();

  v263[0] = v120;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<TUConversationActivity, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>, v105);
  v121 = v218;
  Publisher.compactMap<A>(_:)();
  swift_release();
  v122 = v97;
  v123 = v121;
  if (!v96)
    v122 = *(id *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 288));
  v263[0] = v122;
  v124 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v125 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v124 - 8) + 56);
  v126 = (uint64_t)v250;
  v245 = v124;
  v217 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v125;
  v125(v250, 1, 1);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, MEMORY[0x1E0C95708]);
  v127 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  v215 = v97;
  v128 = v223;
  v129 = v221;
  v216 = v127;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v126, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v219 + 8))(v123, v129);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AnyGroupActivity>);
  v130 = v227;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.CompactMap<PassthroughSubject<TUConversationActivity, Never>, AnyGroupActivity>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v131 = v225;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v224 + 8))(v128, v131);
  v132 = v228;
  v133 = v229;
  (*(void (**)(char *, char *, uint64_t))(v228 + 16))(v226, v130, v229);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v133);
  v134 = direct field offset for GroupSession.linkManager;
  v135 = *(_QWORD **)(v21 + direct field offset for GroupSession.linkManager);
  v136 = swift_allocObject();
  swift_weakInit();
  v137 = v247;
  v138 = v260;
  v213(v247, v261, v260);
  v139 = v259;
  v140 = (*(unsigned __int8 *)(v259 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
  v141 = (v222 + v140 + 7) & 0xFFFFFFFFFFFFFFF8;
  v142 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v139 + 32))(v142 + v140, v137, v138);
  *(_QWORD *)(v142 + v141) = v136;
  v143 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v144 = *(void (**)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v135) + 0x1B8);
  swift_retain();
  v144(partial apply for specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v142);
  swift_release();
  v145 = *(_QWORD **)(v21 + v134);
  v146 = swift_allocObject();
  swift_weakInit();
  v147 = *(void (**)(uint64_t (*)(), uint64_t))((*v143 & *v145) + 0x1D0);
  v148 = v145;
  swift_retain();
  v147(partial apply for specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v146);

  swift_release();
  v149 = *(_QWORD **)(v21 + v134);
  v150 = swift_allocObject();
  swift_weakInit();
  v151 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))((*v143 & *v149) + 0x200);
  v152 = v149;
  swift_retain();
  v151(partial apply for specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v150);

  swift_release();
  v153 = *(_QWORD **)(v21 + v134);
  v154 = swift_allocObject();
  swift_weakInit();
  v155 = *(void (**)(uint64_t (*)(void *), uint64_t))((*v143 & *v153) + 0x1E8);
  v156 = v153;
  swift_retain();
  v155(partial apply for specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v154);

  swift_release();
  v157 = *(_QWORD **)(v21 + v134);
  v158 = swift_allocObject();
  swift_weakInit();
  v159 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))((*v143 & *v157) + 0x218);
  v160 = v157;
  swift_retain();
  v159(partial apply for specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v158);

  v161 = v215;
  v162 = swift_release();
  v163 = v231;
  (*(void (**)(uint64_t))(*(_QWORD *)v249 + 440))(v162);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
  v164 = v234;
  v165 = v233;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v232 + 8))(v163, v165);
  swift_beginAccess();
  v166 = v240;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>, MEMORY[0x1E0C95950]);
  v167 = v236;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v235 + 8))(v164, v167);
  v168 = v237;
  v169 = v239;
  v170 = v244;
  v248 = *(void (**)(char *, char *, uint64_t))(v237 + 16);
  v248(v239, v166, v244);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  v171 = *(void (**)(char *, uint64_t))(v168 + 8);
  v171(v166, v170);
  swift_beginAccess();
  v172 = v238;
  Published.projectedValue.getter();
  swift_endAccess();
  v173 = v161;
  if (!v251)
    v173 = *(id *)(v21 + *(_QWORD *)(*(_QWORD *)v21 + 288));
  v263[0] = v173;
  v174 = (uint64_t)v250;
  v217(v250, 1, 1, v245);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, MEMORY[0x1E0C96190]);
  v251 = v161;
  v175 = v241;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v174, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  v171(v172, v170);
  swift_beginAccess();
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v176 = v166;
  v177 = v243;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v242 + 8))(v175, v177);
  v248(v169, v176, v170);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  v171(v176, v170);
  v178 = swift_allocObject();
  swift_weakInit();
  v179 = v249;
  v180 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(_QWORD *)v249 + 472);
  swift_retain();
  v180(partial apply for specialized closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v178);
  swift_release();
  v181 = swift_allocObject();
  swift_weakInit();
  v182 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v179 + 496);
  swift_retain();
  v182(partial apply for specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v181);
  swift_release();
  if (one-time initialization token for client != -1)
    swift_once();
  v183 = type metadata accessor for Logger();
  __swift_project_value_buffer(v183, (uint64_t)static Logger.client);
  swift_retain();
  v184 = Logger.logObject.getter();
  v185 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v184, v185))
  {
    v186 = (uint8_t *)swift_slowAlloc();
    v187 = (void *)swift_slowAlloc();
    v263[0] = v187;
    *(_DWORD *)v186 = 136315138;
    v188 = specialized GroupSession.description.getter();
    v262 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v189, (uint64_t *)v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v184, v185, "Init GroupSession %s", v186, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v187, -1, -1);
    MEMORY[0x1A1B05CC4](v186, -1, -1);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v253, &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  __swift_destroy_boxed_opaque_existential_1Tm(v255);
  outlined destroy of Participant(v254, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  outlined destroy of Participant(v257, type metadata accessor for AnyGroupActivity);
  v190 = v260;
  v191 = *(void (**)(uint64_t, uint64_t))(v259 + 8);
  v191(v256, v260);
  v191(v261, v190);
  return v21;
}

char *GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  unint64_t v70;
  void (*v71)(char *, char *);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  char *v99;
  void **v100;
  void *v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  id v111;
  id v112;
  uint64_t v113;
  id *v114;
  unint64_t *v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  uint64_t v123;
  _QWORD *v124;
  id v125;
  id v126;
  uint64_t v127;
  _QWORD *v128;
  id v129;
  id v130;
  uint64_t v131;
  _QWORD *v132;
  id v133;
  id v134;
  uint64_t v135;
  _QWORD *v136;
  id v137;
  id v138;
  uint64_t v139;
  _QWORD *v140;
  id v141;
  id v142;
  void *v143;
  uint64_t v144;
  char *v145;
  void *v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  void (*v170)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t);
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  void (*v175)(uint64_t (*)(), _QWORD *);
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  void (*v183)(uint64_t (*)(uint64_t), _QWORD *);
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  void (*v188)(uint64_t (*)(void *), _QWORD *);
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  void (*v194)(uint64_t (*)(void *), _QWORD *);
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  char *v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  void (*v217)(uint64_t (*)(void *), _QWORD *);
  uint64_t v218;
  _QWORD *v219;
  void (*v220)(uint64_t (*)(), _QWORD *);
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  _BOOL4 v224;
  uint64_t v225;
  uint64_t v226;
  uint8_t *v227;
  void *v228;
  uint64_t v229;
  unint64_t v230;
  void (*v231)(uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  void **v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  _QWORD *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(char *, uint64_t, uint64_t);
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  uint64_t v258;
  char *v259;
  id v260;
  uint64_t v261;
  void (*v262)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  Swift::String v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  id v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  id v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;

  v21 = v20;
  v270._object = a8;
  v270._countAndFlagsBits = a7;
  v260 = a6;
  v298 = a5;
  v258 = a4;
  v251 = a3;
  v297 = a2;
  v304 = a1;
  v294 = a20;
  v296 = a19;
  v293 = a18;
  v257 = a17;
  v256 = a16;
  v274 = a15;
  v255 = a14;
  v300 = a13;
  v254 = a12;
  v295 = a11;
  v253 = a10;
  v252 = a9;
  v22 = *(_QWORD *)v20;
  v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>);
  v286 = *(_QWORD *)(v287 - 8);
  MEMORY[0x1E0C80A78](v287);
  v285 = (char *)&v234 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v282 = *(_QWORD *)(v283 - 8);
  v24 = MEMORY[0x1E0C80A78](v283);
  v281 = (char *)&v234 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v284 = (char *)&v234 - v26;
  v277 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v276 = *(_QWORD *)(v277 - 8);
  MEMORY[0x1E0C80A78](v277);
  v275 = (char *)&v234 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>);
  v279 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280);
  v278 = (char *)&v234 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v22 + 80);
  v273 = type metadata accessor for Published.Publisher();
  v272 = *(_QWORD *)(v273 - 8);
  MEMORY[0x1E0C80A78](v273);
  v271 = (char *)&v234 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v31);
  v291 = (char *)&v234 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>);
  v34 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<TUConversationActivity, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<TUConversationActivity, Never>, MEMORY[0x1E0C95F48]);
  v263 = v33;
  v262 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v34;
  v35 = type metadata accessor for Publishers.CompactMap();
  v268 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v259 = (char *)&v234 - v36;
  v37 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v38 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95708], v35);
  v39 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  v269 = v35;
  v307 = v35;
  v308 = v37;
  v299 = v37;
  v264 = v38;
  v309 = v38;
  v310 = v39;
  v290 = v39;
  v267 = type metadata accessor for Publishers.ReceiveOn();
  v266 = *(_QWORD *)(v267 - 8);
  MEMORY[0x1E0C80A78](v267);
  v265 = (char *)&v234 - v40;
  v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>);
  v249 = *(_QWORD *)(v250 - 8);
  MEMORY[0x1E0C80A78](v250);
  v248 = (char *)&v234 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = (_QWORD *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v245 = *(v247 - 1);
  MEMORY[0x1E0C80A78](v247);
  v246 = (char *)&v234 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v242);
  v243 = (char *)&v234 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v44);
  v241 = (char *)&v234 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = type metadata accessor for UUID();
  v301 = *(_QWORD *)(v302 - 8);
  v46 = MEMORY[0x1E0C80A78](v302);
  v240 = (char *)&v234 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v288 = (char *)&v234 - v49;
  v292 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v48);
  v239 = (char *)&v234 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v237);
  v236 = (char *)&v234 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v238 = *(void ***)(v235 - 8);
  MEMORY[0x1E0C80A78](v235);
  v53 = (char *)&v234 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(v22 + 88);
  type metadata accessor for GroupSession.State(255, v29, v54, v55);
  v56 = type metadata accessor for Published();
  v57 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v59 = (char *)&v234 - v58;
  *(_QWORD *)&v20[direct field offset for GroupSession.playbackSyncerLink] = 0;
  *(_QWORD *)&v20[direct field offset for GroupSession.playbackSyncMessenger] = 0;
  *(_QWORD *)&v20[direct field offset for GroupSession.attachmentDownloadBytes] = 0;
  *(_QWORD *)&v20[direct field offset for GroupSession.attachmentUploadBytes] = 0;
  *(_QWORD *)&v20[direct field offset for GroupSession.attachmentDownloadTime] = 0;
  *(_QWORD *)&v20[direct field offset for GroupSession.attachmentUploadTime] = 0;
  v60 = &v20[direct field offset for GroupSession.receivedDataHandler];
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = 0;
  v61 = (uint64_t *)&v20[direct field offset for GroupSession._receivedDataPublisher];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(Data, Participant, SendReliability), Never>);
  swift_allocObject();
  *v61 = PassthroughSubject.init()();
  v61[1] = 0;
  v62 = (uint64_t *)&v20[direct field offset for GroupSession._receivedAttachmentPublisher];
  v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  swift_allocObject();
  *v62 = PassthroughSubject.init()();
  v62[1] = 0;
  v63 = (uint64_t *)&v20[direct field offset for GroupSession._catchupNeededPublisher];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Participant, Never>);
  swift_allocObject();
  *v63 = PassthroughSubject.init()();
  v63[1] = 0;
  v64 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 208)];
  v307 = 0;
  v303 = v29;
  v289 = v54;
  v66 = type metadata accessor for GroupSession.State(0, v29, v54, v65);
  Published.init(wrappedValue:)((uint64_t)&v307, v66);
  v67 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  v68 = v56;
  v67(v64, v59, v56);
  v69 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 224)];
  v70 = MEMORY[0x1E0DEE9E8];
  v307 = MEMORY[0x1E0DEE9E8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  v71 = (void (*)(char *, char *))v238[4];
  v72 = v69;
  v73 = v298;
  v74 = v235;
  v71(v72, v53);
  v75 = v70;
  v76 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 232)];
  *(_QWORD *)v76 = 0;
  *((_QWORD *)v76 + 1) = 0;
  v238 = (void **)&v21[*(_QWORD *)(*(_QWORD *)v21 + 296)];
  *v238 = 0;
  v77 = v70;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      v77 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v77 = MEMORY[0x1E0DEE9E8];
    v73 = v298;
    v75 = MEMORY[0x1E0DEE9E8];
  }
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 304)] = v77;
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 320)] = 0;
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 328)] = 0;
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 336)] = 0;
  v78 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 344)];
  v307 = v75;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  Published.init(initialValue:)();
  ((void (*)(char *, char *, uint64_t))v71)(v78, v53, v74);
  v79 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 352)];
  v307 = 0;
  Published.init(wrappedValue:)((uint64_t)&v307, v66);
  v67(v79, v59, v68);
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 368)] = 0;
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v301 + 16);
  v81 = v304;
  v82 = v302;
  v80(&v21[direct field offset for GroupSession.id], v304, v302);
  v83 = (uint64_t)v236;
  UUID.init()();
  v84 = v237;
  v85 = (void (**)(char *, uint64_t, uint64_t))(v83 + *(int *)(v237 + 20));
  v86 = v258;
  *v85 = v251;
  v85[1] = (void (*)(char *, uint64_t, uint64_t))v86;
  *(_QWORD *)(v83 + *(int *)(v84 + 24)) = 0;
  outlined init with take of Participant(v83, (uint64_t)&v21[direct field offset for GroupSession.initiator], (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v87 = (uint64_t)v239;
  v88 = v303;
  (*(void (**)(char *, uint64_t, uint64_t))(v292 + 16))(v239, v73, v303);
  swift_beginAccess();
  property wrapper backing initializer of GroupSession.activity(v87, v88);
  swift_endAccess();
  v89 = v293;
  *(_QWORD *)&v21[direct field offset for GroupSession.topicManager] = v293;
  swift_retain();
  v90 = UUID.uuidString.getter();
  v91 = v297;
  v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 248))(v297, v90, v92);
  swift_bridgeObjectRelease();
  v94 = (uint64_t)v288;
  v80(v288, v81, v82);
  v95 = (uint64_t)v240;
  v251 = v80;
  v80(v240, v91, v82);
  outlined init with copy of Participant(v295, v83, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v96 = objc_allocWithZone(MEMORY[0x1E0D15358]);
  swift_retain();
  swift_retain();
  v97 = v274;
  v98 = objc_msgSend(v96, sel_init);
  v99 = (char *)objc_allocWithZone((Class)type metadata accessor for LinkManager(0));
  v258 = v93;
  v274 = v97;
  *(_QWORD *)&v21[direct field offset for GroupSession.linkManager] = specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(v94, v95, v89, v93, v83, v97, v98, v99);
  v307 = 0;
  v308 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v307 = 0xD000000000000025;
  v308 = 0x80000001A0F18FF0;
  String.append(_:)(v270);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v307 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, _QWORD *))(v245 + 104))(v246, *MEMORY[0x1E0DEF8D0], v247);
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 288)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v100 = v238;
  swift_beginAccess();
  v101 = *v100;
  v102 = v300;
  *v100 = v300;
  v247 = v102;

  v103 = v260;
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 248)] = v260;
  v104 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 240)];
  v105 = v303;
  v106 = v289;
  v108 = (_QWORD *)type metadata accessor for GroupSession.Timestamps(0, v303, v289, v107);
  v270._countAndFlagsBits = *(v108 - 1);
  v109 = *(void (**)(char *, uint64_t))(v270._countAndFlagsBits + 16);
  v270._object = v108;
  v109(v104, v294);
  v21[*(_QWORD *)(*(_QWORD *)v21 + 256)] = v252 & 1;
  v21[*(_QWORD *)(*(_QWORD *)v21 + 264)] = v253 & 1;
  v21[*(_QWORD *)(*(_QWORD *)v21 + 272)] = v254 & 1;
  *(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 360)] = v255;
  v110 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 232)];
  swift_beginAccess();
  v111 = v257;
  *(_QWORD *)v110 = v256;
  *((_QWORD *)v110 + 1) = v111;
  v112 = v103;
  swift_bridgeObjectRelease();
  outlined init with copy of AudioSessionAssertionManager(v296, (uint64_t)&v21[*(_QWORD *)(*(_QWORD *)v21 + 312)]);
  type metadata accessor for ActivitySessionClientConnection();
  v260 = v112;
  v113 = XPCClient.__allocating_init(listenerEndpoint:)();
  v114 = (id *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 280)];
  *v114 = (id)v113;
  v115 = (unint64_t *)&v21[direct field offset for GroupSession._receivedAttachmentPublisher];
  swift_beginAccess();
  v307 = *v115;
  v116 = swift_allocObject();
  swift_weakInit();
  v117 = (_QWORD *)swift_allocObject();
  v117[2] = v105;
  v117[3] = v106;
  v117[4] = v116;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95F48]);
  swift_retain();
  swift_retain();
  v118 = v248;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<PassthroughSubject<(UUID, URL, Participant), Never>>, MEMORY[0x1E0C957C0]);
  v119 = v250;
  v120 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v249 + 8))(v118, v119);
  v121 = &v21[direct field offset for GroupSession._receivedAttachmentPublisher];
  swift_beginAccess();
  *((_QWORD *)v121 + 1) = v120;
  swift_release();
  swift_beginAccess();
  v122 = *v114;
  v123 = swift_allocObject();
  swift_weakInit();
  v124 = (_QWORD *)swift_allocObject();
  v124[2] = v105;
  v124[3] = v106;
  v124[4] = v123;
  v125 = v122;
  swift_retain();
  ActivitySessionClientConnection.serverDisconnectedCallback.setter();

  swift_release();
  v126 = *v114;
  v127 = swift_allocObject();
  swift_weakInit();
  v128 = (_QWORD *)swift_allocObject();
  v128[2] = v105;
  v128[3] = v106;
  v128[4] = v127;
  v129 = v126;
  swift_retain();
  ActivitySessionClientConnection.setAssociatedSceneCallback.setter();

  swift_release();
  v130 = *v114;
  v131 = swift_allocObject();
  swift_weakInit();
  v132 = (_QWORD *)swift_allocObject();
  v132[2] = v105;
  v132[3] = v106;
  v132[4] = v131;
  v133 = v130;
  swift_retain();
  ActivitySessionClientConnection.setStateCallback.setter();

  swift_release();
  v134 = *v114;
  v135 = swift_allocObject();
  swift_weakInit();
  v136 = (_QWORD *)swift_allocObject();
  v136[2] = v105;
  v136[3] = v106;
  v136[4] = v135;
  v137 = v134;
  swift_retain();
  ActivitySessionClientConnection.setDataCryptorCallback.setter();

  swift_release();
  v138 = *v114;
  v139 = swift_allocObject();
  swift_weakInit();
  v140 = (_QWORD *)swift_allocObject();
  v140[2] = v105;
  v140[3] = v106;
  v140[4] = v139;
  v141 = v138;
  swift_retain();
  ActivitySessionClientConnection.receivedResourceCallback.setter();

  swift_release();
  v142 = *v114;
  v143 = (void *)ActivitySessionClientConnection.setActivityPublisher.getter();

  v306 = v143;
  v144 = swift_allocObject();
  *(_QWORD *)(v144 + 16) = v105;
  *(_QWORD *)(v144 + 24) = v106;
  v145 = v259;
  Publisher.compactMap<A>(_:)();
  v146 = v247;
  swift_release();
  swift_release();
  v147 = v146;
  v148 = v304;
  v149 = v302;
  v150 = v301;
  v151 = v145;
  if (!v300)
    v147 = *(id *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 288)];
  v306 = v147;
  v152 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56);
  v154 = (uint64_t)v291;
  v263 = v152;
  v262 = v153;
  ((void (*)(char *, uint64_t, uint64_t))v153)(v291, 1, 1);
  v257 = v146;
  v155 = v265;
  v156 = v269;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v154, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v268 + 8))(v151, v156);
  v157 = (uint64_t)v271;
  GroupSession.$activity.getter();
  v158 = v267;
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95CB8], v267);
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v266 + 8))(v155, v158);
  specialized GroupSession.$activity.setter(v157);
  (*(void (**)(uint64_t, uint64_t))(v272 + 8))(v157, v273);
  v273 = direct field offset for GroupSession.linkManager;
  v159 = *(_QWORD **)&v21[direct field offset for GroupSession.linkManager];
  v160 = swift_allocObject();
  swift_weakInit();
  v161 = v288;
  v251(v288, v148, v149);
  v162 = (*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
  v163 = (v261 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
  v164 = swift_allocObject();
  v165 = v303;
  v166 = v289;
  *(_QWORD *)(v164 + 16) = v303;
  *(_QWORD *)(v164 + 24) = v166;
  v167 = v149;
  v168 = v166;
  (*(void (**)(unint64_t, char *, uint64_t))(v150 + 32))(v164 + v162, v161, v167);
  *(_QWORD *)(v164 + v163) = v160;
  v169 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v170 = *(void (**)(uint64_t (*)(uint64_t, unint64_t, uint64_t, unsigned __int8 *), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v159) + 0x1B8);
  swift_retain();
  v170(partial apply for closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v164);
  swift_release();
  v171 = v273;
  v172 = *(_QWORD **)&v21[v273];
  v173 = swift_allocObject();
  swift_weakInit();
  v174 = (_QWORD *)swift_allocObject();
  v174[2] = v165;
  v174[3] = v168;
  v174[4] = v173;
  v175 = *(void (**)(uint64_t (*)(), _QWORD *))((*v169 & *v172) + 0x1D0);
  v176 = v172;
  swift_retain();
  v175(partial apply for closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v174);

  swift_release();
  v177 = *(_QWORD **)&v21[v171];
  v178 = swift_allocObject();
  swift_weakInit();
  v179 = (_QWORD *)swift_allocObject();
  v179[2] = v165;
  v179[3] = v168;
  v180 = v165;
  v181 = v168;
  v179[4] = v178;
  v182 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v183 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *))((*MEMORY[0x1E0DEEDD8] & *v177) + 0x200);
  v184 = v177;
  swift_retain();
  v183(partial apply for closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v179);

  swift_release();
  v185 = *(_QWORD **)&v21[v171];
  v186 = swift_allocObject();
  swift_weakInit();
  v187 = (_QWORD *)swift_allocObject();
  v187[2] = v180;
  v187[3] = v181;
  v187[4] = v186;
  v188 = *(void (**)(uint64_t (*)(void *), _QWORD *))((*v182 & *v185) + 0x1E8);
  v189 = v185;
  swift_retain();
  v188(partial apply for closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v187);

  swift_release();
  v190 = *(_QWORD **)&v21[v171];
  v191 = swift_allocObject();
  swift_weakInit();
  v192 = (_QWORD *)swift_allocObject();
  v192[2] = v180;
  v192[3] = v181;
  v193 = v180;
  v192[4] = v191;
  v194 = *(void (**)(uint64_t (*)(void *), _QWORD *))((*MEMORY[0x1E0DEEDD8] & *v190) + 0x218);
  v195 = v190;
  swift_retain();
  v194(partial apply for closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v192);

  v196 = swift_release();
  v197 = v258;
  v198 = v275;
  (*(void (**)(uint64_t))(*(_QWORD *)v258 + 440))(v196);
  v199 = swift_allocObject();
  swift_weakInit();
  v200 = (_QWORD *)swift_allocObject();
  v200[2] = v180;
  v200[3] = v181;
  v200[4] = v199;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
  v201 = v278;
  v202 = v277;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v276 + 8))(v198, v202);
  v203 = (uint64_t)v284;
  GroupSession.$internalActiveParticipants.getter();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, Set<Participant>>, MEMORY[0x1E0C95950]);
  v204 = v280;
  Publisher<>.assign(to:)();
  v205 = v204;
  v206 = v257;
  (*(void (**)(char *, uint64_t))(v279 + 8))(v201, v205);
  GroupSession.$internalActiveParticipants.setter(v203);
  v207 = v281;
  GroupSession.$internalActiveParticipants.getter();
  v208 = v206;
  v209 = v193;
  v210 = v181;
  if (!v300)
    v208 = *(id *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 288)];
  v306 = v208;
  v211 = (uint64_t)v291;
  v262(v291, 1, 1, v263);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, MEMORY[0x1E0C96190]);
  v300 = v206;
  v212 = v285;
  v213 = v283;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v211, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v282 + 8))(v207, v213);
  GroupSession.$activeParticipants.getter();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Published<Set<Participant>>.Publisher, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v214 = v287;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v286 + 8))(v212, v214);
  GroupSession.$activeParticipants.setter(v203);
  v215 = swift_allocObject();
  swift_weakInit();
  v216 = (_QWORD *)swift_allocObject();
  v216[2] = v209;
  v216[3] = v210;
  v216[4] = v215;
  v217 = *(void (**)(uint64_t (*)(void *), _QWORD *))(*(_QWORD *)v197 + 472);
  swift_retain();
  v217(partial apply for closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v216);
  swift_release();
  v218 = swift_allocObject();
  swift_weakInit();
  v219 = (_QWORD *)swift_allocObject();
  v219[2] = v209;
  v219[3] = v210;
  v219[4] = v218;
  v220 = *(void (**)(uint64_t (*)(), _QWORD *))(*(_QWORD *)v197 + 496);
  swift_retain();
  v220(partial apply for closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v219);
  swift_release();
  if (one-time initialization token for client != -1)
    swift_once();
  v221 = type metadata accessor for Logger();
  __swift_project_value_buffer(v221, (uint64_t)static Logger.client);
  swift_retain();
  v222 = Logger.logObject.getter();
  v223 = static os_log_type_t.default.getter();
  v224 = os_log_type_enabled(v222, v223);
  v225 = v304;
  v226 = v302;
  if (v224)
  {
    v227 = (uint8_t *)swift_slowAlloc();
    v228 = (void *)swift_slowAlloc();
    v306 = v228;
    *(_DWORD *)v227 = 136315138;
    v229 = GroupSession.description.getter();
    v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v229, v230, (uint64_t *)&v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v222, v223, "Init GroupSession %s", v227, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v228, -1, -1);
    MEMORY[0x1A1B05CC4](v227, -1, -1);
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, void *))(v270._countAndFlagsBits + 8))(v294, v270._object);
    __swift_destroy_boxed_opaque_existential_1Tm(v296);
    outlined destroy of Participant(v295, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    (*(void (**)(uint64_t, uint64_t))(v292 + 8))(v298, v303);
    v231 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    v231(v297, v226);
    v232 = v304;
  }
  else
  {
    swift_release();
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, void *))(v270._countAndFlagsBits + 8))(v294, v270._object);
    __swift_destroy_boxed_opaque_existential_1Tm(v296);
    outlined destroy of Participant(v295, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    (*(void (**)(uint64_t, uint64_t))(v292 + 8))(v298, v209);
    v231 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    v231(v297, v226);
    v232 = v225;
  }
  v231(v232, v226);
  return v21;
}

uint64_t specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(NSObject **)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    *(_QWORD *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_419;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    swift_release();
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(NSObject **)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = partial apply for closure #1 in closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    *(_QWORD *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_501;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    swift_release();
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t specialized GroupSession.handleNewAttachmentSubscriber()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 288));
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Received new attachment subscriber", v11, 2u);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  v12 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 336));
  swift_beginAccess();
  v13 = *v12;
  *v12 |= 1uLL;
  specialized GroupSession.capabilities.didset(v13);
  v14 = *(_QWORD *)(v1 + direct field offset for GroupSession.topicManager);
  v15 = *(_QWORD **)(v1 + direct field offset for GroupSession.linkManager);
  v16 = (char *)v15 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID;
  v17 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v14 + 240))(v16, v17, v18);
  swift_bridgeObjectRelease();
  v19 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x100);
  v20 = swift_retain();
  v19(v20);
  v21 = (_QWORD *)(v1 + direct field offset for GroupSession._receivedAttachmentPublisher);
  swift_beginAccess();
  v23[1] = *v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95F48]);
  v21[1] = Publisher.eraseToAnyPublisher()();
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall GroupSession.handleNewAttachmentSubscriber()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[10];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 288));
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Received new attachment subscriber", v11, 2u);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  v12 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 336));
  swift_beginAccess();
  GroupSession.capabilities.setter(*v12 | 1);
  v13 = *(_QWORD *)(v1 + direct field offset for GroupSession.topicManager);
  v14 = *(_QWORD **)(v1 + direct field offset for GroupSession.linkManager);
  v15 = (char *)v14 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID;
  v16 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v13 + 240))(v15, v16, v17);
  swift_bridgeObjectRelease();
  v18 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x100);
  v19 = swift_retain();
  v18(v19);
  v20 = (_QWORD *)(v1 + direct field offset for GroupSession._receivedAttachmentPublisher);
  swift_beginAccess();
  v23[7] = *v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(UUID, URL, Participant), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(UUID, URL, Participant), Never>, MEMORY[0x1E0C95F48]);
  v21 = Publisher.eraseToAnyPublisher()();
  v22 = v1 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  *(_QWORD *)(v22 + 8) = v21;
  swift_release();
  swift_release();
}

uint64_t specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void *v9;
  const void *v10;
  _QWORD v11[3];
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11[1] = *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    aBlock[4] = partial apply for specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = result;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_412;
    v9 = _Block_copy(aBlock);
    v11[0] = v1;
    v10 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v11[2] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v7, v3, v10);
    _Block_release(v10);
    (*(void (**)(char *, uint64_t))(v11[0] + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void *v9;
  const void *v10;
  _QWORD v11[3];
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11[1] = *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    aBlock[4] = partial apply for closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = result;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_494;
    v9 = _Block_copy(aBlock);
    v11[0] = v1;
    v10 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v11[2] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v7, v3, v10);
    _Block_release(v10);
    (*(void (**)(char *, uint64_t))(v11[0] + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  void *v0;
  _BYTE *v1;
  void *v2;

  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((unint64_t)v2 <= 1)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    v0 = (void *)swift_allocError();
    *v1 = 4;
    specialized GroupSession.invalidate(reason:)(v0);

  }
}

void closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  void *v0;
  _BYTE *v1;
  void *v2;

  GroupSession.internalState.getter();
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((unint64_t)v2 <= 1)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    v0 = (void *)swift_allocError();
    *v1 = 4;
    GroupSession.invalidate(reason:)(v0);

  }
}

uint64_t specialized GroupSession.invalidate(reason:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  id v17;
  void *v18;
  void *v19;
  id *v20;
  id v21;
  uint64_t v22;
  uint64_t KeyPath;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  id v37[16];
  uint64_t v38[4];

  v2 = v1;
  if (one-time initialization token for playback != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.playback);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v38[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    v37[13] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v7, v8, "Invalidating GroupSession with reason:%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {

  }
  v14 = specialized GroupSession.cleanUpPlaybackSyncer()();
  v15 = *(_QWORD **)(v2 + direct field offset for GroupSession.linkManager);
  v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x130))(v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v17 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  v18 = (void *)AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)();
  specialized GroupSession.logAttachmentEvent(report:reportEvent:)(v18, 0xD000000000000023, 0x80000001A0F190F0, (uint64_t)&unk_1E44FBBB0, (uint64_t)partial apply for specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:), (uint64_t)&block_descriptor_382);

  v19 = (void *)(*(uint64_t (**)(void))((*v16 & *v15) + 0x238))();
  specialized GroupSession.logAttachmentEvent(report:reportEvent:)(v19, 0xD000000000000027, 0x80000001A0F19020, (uint64_t)&unk_1E44FBBB0, (uint64_t)partial apply for specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:), (uint64_t)&block_descriptor_382);

  v20 = (id *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 280));
  swift_beginAccess();
  v21 = *v20;
  dispatch thunk of XPCClient.destroyConnection()();

  MEMORY[0x1E0C80A78](v22);
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath);
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined consume of GroupSession<A>.State<A>(v37[0]);
  if (v37[0] >= (id)2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v27 = a1;
    v28 = a1;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (void *)swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v34 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v29, v30, "Received invalidation reason %s after already being invalidated.", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v32, -1, -1);
      MEMORY[0x1A1B05CC4](v31, -1, -1);
    }
    else
    {

    }
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v24 = a1;
    specialized GroupSession.internalState.willset(a1);
    MEMORY[0x1E0C80A78](v25);
    v26 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v26);
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    specialized GroupSession.updatePublicState()((uint64_t)partial apply for specialized closure #1 in GroupSession.updatePublicState(), (uint64_t)&block_descriptor_376);
  }
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 320)) = 0;
  return swift_release();
}

uint64_t GroupSession.invalidate(reason:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v29[5];
  id v30[3];

  v2 = v1;
  if (one-time initialization token for playback != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.playback);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (void *)swift_slowAlloc();
    v30[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    v29[1] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v7, v8, "Invalidating GroupSession with reason:%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {

  }
  GroupSession.cleanUpPlaybackSyncer()();
  GroupSession.logAttachmentSessionReport()();
  v14 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v2
                                                                           + direct field offset for GroupSession.linkManager))
                                     + 0x238))();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v14, 0xD000000000000027, 0x80000001A0F19020);

  v15 = (id *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 280));
  swift_beginAccess();
  v16 = *v15;
  dispatch thunk of XPCClient.destroyConnection()();

  GroupSession.internalState.getter();
  v17 = v30[0];
  outlined consume of GroupSession<A>.State<A>(v30[0]);
  if ((unint64_t)v17 <= 1)
  {
    swift_beginAccess();
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v29[0] = a1;
    v27 = a1;
    GroupSession.internalState.setter(v29);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v18 = a1;
    v19 = a1;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (void *)swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v25 = String.init<A>(reflecting:)();
      v29[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v20, v21, "Received invalidation reason %s after already being invalidated.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v23, -1, -1);
      MEMORY[0x1A1B05CC4](v22, -1, -1);
    }
    else
    {

    }
  }
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 320)) = 0;
  return swift_release();
}

uint64_t specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  id v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = *(id *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    swift_release();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = a3;
    v15[3] = a1;
    v15[4] = a2;
    aBlock[4] = partial apply for specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_409;
    v16 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v19 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v12, v8, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  id v18;
  id v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchWorkItemFlags();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v14 - 8);
  v25 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v18 = *(id *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    v23 = v11;
    v19 = v18;
    swift_release();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = a4;
    v20[3] = a5;
    v20[4] = a3;
    v20[5] = a1;
    v20[6] = a2;
    aBlock[4] = partial apply for closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_491;
    v21 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v26 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v16, v13, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v25);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = (_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 232));
    swift_beginAccess();
    *v6 = a2;
    v6[1] = a3;
    swift_bridgeObjectRetain();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD v17[3];
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v13 = result;
    v17[1] = *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = a1;
    v14[3] = v13;
    v14[4] = a2;
    aBlock[4] = partial apply for specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_403;
    v15 = _Block_copy(aBlock);
    swift_retain();
    v16 = a2;
    static DispatchQoS.unspecified.getter();
    v17[2] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    v17[0] = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v11, v7, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, _QWORD))(v9 + 8))(v11, v17[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD v17[3];
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v13 = result;
    v17[1] = *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 288));
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = a1;
    v14[3] = v13;
    v14[4] = a2;
    aBlock[4] = partial apply for closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_485;
    v15 = _Block_copy(aBlock);
    swift_retain();
    v16 = a2;
    static DispatchQoS.unspecified.getter();
    v17[2] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    v17[0] = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v11, v7, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, _QWORD))(v9 + 8))(v11, v17[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, int a2, id a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;
  char v10;
  id v12;
  _BYTE *v13;
  id v14;
  Swift::String v15;

  switch(a1)
  {
    case 0:
      specialized GroupSession.internalState.willset(0);
      MEMORY[0x1E0C80A78](v3);
      type metadata accessor for AnyGroupActivity(0);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath);
      swift_getKeyPath();
      goto LABEL_4;
    case 1:
      specialized GroupSession.internalState.willset((void *)1);
      MEMORY[0x1E0C80A78](v5);
      type metadata accessor for AnyGroupActivity(0);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
      v6 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v6);
      swift_getKeyPath();
LABEL_4:
      swift_retain();
      static Published.subscript.setter();
      specialized GroupSession.updatePublicState()((uint64_t)partial apply for specialized closure #1 in GroupSession.updatePublicState(), (uint64_t)&block_descriptor_376);
      return;
    case 2:
      if (a3)
      {
        v12 = a3;
      }
      else
      {
        lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
        v12 = (id)swift_allocError();
        *v13 = 2;
      }
      v14 = a3;
      specialized GroupSession.invalidate(reason:)(v12);

      return;
    case 4:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v7 = (void *)swift_allocError();
      v9 = v7;
      v10 = 6;
      goto LABEL_9;
    case 5:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v7 = (void *)swift_allocError();
      v9 = v7;
      v10 = 8;
LABEL_9:
      *v8 = v10;
      specialized GroupSession.invalidate(reason:)(v7);

      break;
    default:
      _StringGuts.grow(_:)(17);
      v15._countAndFlagsBits = 0x206E776F6E6B6E55;
      v15._object = (void *)0xEF203A6574617473;
      String.append(_:)(v15);
      type metadata accessor for CPActivitySessionState(0);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
}

void closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, int a2, id a3)
{
  void *v3;
  char *v4;
  void *v5;
  char v6;
  id v8;
  _BYTE *v9;
  id v10;
  Swift::String v11;
  uint64_t v12;

  switch(a1)
  {
    case 0:
      v12 = 0;
      goto LABEL_4;
    case 1:
      v12 = 1;
LABEL_4:
      GroupSession.internalState.setter((void **)&v12);
      return;
    case 2:
      if (a3)
      {
        v8 = a3;
      }
      else
      {
        lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
        v8 = (id)swift_allocError();
        *v9 = 2;
      }
      v10 = a3;
      GroupSession.invalidate(reason:)(v8);

      return;
    case 4:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v3 = (void *)swift_allocError();
      v5 = v3;
      v6 = 6;
      goto LABEL_9;
    case 5:
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v3 = (void *)swift_allocError();
      v5 = v3;
      v6 = 8;
LABEL_9:
      *v4 = v6;
      GroupSession.invalidate(reason:)(v3);

      break;
    default:
      _StringGuts.grow(_:)(17);
      v11._countAndFlagsBits = 0x206E776F6E6B6E55;
      v11._object = (void *)0xEF203A6574617473;
      String.append(_:)(v11);
      type metadata accessor for CPActivitySessionState(0);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
}

void specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t Strong;
  _QWORD *v1;
  void (*v2)(uint64_t);
  _QWORD *v3;
  uint64_t v4;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = *(_QWORD **)(Strong + direct field offset for GroupSession.linkManager);
    v2 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x170);
    v3 = v1;
    v4 = swift_unknownObjectRetain();
    v2(v4);
    swift_release();

  }
}

void specialized closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t i;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91[3];
  uint64_t v92;

  v90 = a4;
  v81 = a1;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  MEMORY[0x1E0C80A78](v79);
  v80 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  MEMORY[0x1E0C80A78](v5);
  v82 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v7);
  v78 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v77 - v15;
  MEMORY[0x1E0C80A78](v14);
  v85 = (uint64_t)&v77 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID();
  v87 = *(_QWORD *)(v21 - 8);
  v88 = v21;
  MEMORY[0x1E0C80A78](v21);
  v86 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v23);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return;
  static String.Encoding.utf8.getter();
  v24 = String.init(data:encoding:)();
  if (v25)
  {
    v26 = v24;
    v27 = v25;
    UUID.init(uuidString:)();
    v29 = v87;
    v28 = v88;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v20, 1, v88) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for default != -1)
        swift_once();
      v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Log.default);
      swift_bridgeObjectRetain();
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        v91[0] = v34;
        *(_DWORD *)v33 = 136315138;
        swift_bridgeObjectRetain();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1A0DB3000, v31, v32, "Failed to convert attachmentID: %s to UUID.", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v34, -1, -1);
        MEMORY[0x1A1B05CC4](v33, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      return;
    }
    swift_bridgeObjectRelease();
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v86, v20, v28);
    MEMORY[0x1E0C80A78](v39);
    v40 = type metadata accessor for AnyGroupActivity(0);
    *(&v77 - 2) = v40;
    v41 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
    *(&v77 - 1) = v41;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    *(&v77 - 2) = v40;
    *(&v77 - 1) = v41;
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v43 = v91[0];
    v44 = v91[0] + 56;
    v45 = 1 << *(_BYTE *)(v91[0] + 32);
    v46 = -1;
    if (v45 < 64)
      v46 = ~(-1 << v45);
    v47 = v46 & *(_QWORD *)(v91[0] + 56);
    v48 = (unint64_t)(v45 + 63) >> 6;
    swift_bridgeObjectRetain();
    v49 = 0;
    if (!v47)
      goto LABEL_15;
LABEL_14:
    v50 = __clz(__rbit64(v47));
    v47 &= v47 - 1;
    for (i = v50 | (v49 << 6); ; i = __clz(__rbit64(v53)) + (v49 << 6))
    {
      outlined init with copy of Participant(*(_QWORD *)(v43 + 48) + *(_QWORD *)(v10 + 72) * i, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      outlined init with take of Participant((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      if (*(_QWORD *)&v13[*(int *)(v9 + 24)] == v90)
        break;
      outlined destroy of Participant((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      if (v47)
        goto LABEL_14;
LABEL_15:
      v52 = v49 + 1;
      if (__OFADD__(v49, 1))
      {
        __break(1u);
        goto LABEL_53;
      }
      if (v52 >= v48)
      {
LABEL_41:
        swift_release();
        v55 = v78;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v78, 1, 1, v9);
        goto LABEL_42;
      }
      v53 = *(_QWORD *)(v44 + 8 * v52);
      ++v49;
      if (!v53)
      {
        v49 = v52 + 1;
        if (v52 + 1 >= v48)
          goto LABEL_41;
        v53 = *(_QWORD *)(v44 + 8 * v49);
        if (!v53)
        {
          v49 = v52 + 2;
          if (v52 + 2 >= v48)
            goto LABEL_41;
          v53 = *(_QWORD *)(v44 + 8 * v49);
          if (!v53)
          {
            v49 = v52 + 3;
            if (v52 + 3 >= v48)
              goto LABEL_41;
            v53 = *(_QWORD *)(v44 + 8 * v49);
            if (!v53)
            {
              v49 = v52 + 4;
              if (v52 + 4 >= v48)
                goto LABEL_41;
              v53 = *(_QWORD *)(v44 + 8 * v49);
              if (!v53)
              {
                v49 = v52 + 5;
                if (v52 + 5 >= v48)
                  goto LABEL_41;
                v53 = *(_QWORD *)(v44 + 8 * v49);
                if (!v53)
                {
                  v54 = v52 + 6;
                  if (v54 >= v48)
                    goto LABEL_41;
                  v53 = *(_QWORD *)(v44 + 8 * v54);
                  if (!v53)
                  {
                    while (1)
                    {
                      v49 = v54 + 1;
                      if (__OFADD__(v54, 1))
                        break;
                      if (v49 >= v48)
                        goto LABEL_41;
                      v53 = *(_QWORD *)(v44 + 8 * v49);
                      ++v54;
                      if (v53)
                        goto LABEL_34;
                    }
                    __break(1u);
                    return;
                  }
                  v49 = v54;
                }
              }
            }
          }
        }
      }
LABEL_34:
      v47 = (v53 - 1) & v53;
    }
    swift_release();
    v55 = v78;
    outlined init with take of Participant((uint64_t)v13, v78, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
LABEL_42:
    swift_bridgeObjectRelease();
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v55, 1, v9);
    v57 = v85;
    if (v56 == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v55, &demangling cache variable for type metadata for Participant?);
      if (one-time initialization token for default != -1)
        swift_once();
      v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Log.default);
      swift_retain();
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = swift_slowAlloc();
        v62 = swift_slowAlloc();
        v91[0] = v62;
        *(_DWORD *)v61 = 134218242;
        v63 = v90;
        v92 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 12) = 2080;
        v64 = specialized GroupSession.description.getter();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v91);
        v57 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v66 = v63;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v59, v60, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v62, -1, -1);
        MEMORY[0x1A1B05CC4](v61, -1, -1);

        v67 = v79;
        v68 = (uint64_t)v80;
      }
      else
      {

        swift_release();
        v67 = v79;
        v68 = (uint64_t)v80;
        v66 = v90;
      }
      UUID.init(_:)();
      *(_QWORD *)(v57 + *(int *)(v9 + 24)) = v66;
      v69 = (_QWORD *)(v57 + *(int *)(v9 + 20));
      *v69 = 0;
      v69[1] = 0xE000000000000000;
    }
    else
    {
      outlined init with take of Participant(v55, v85, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v67 = v79;
      v68 = (uint64_t)v80;
    }
    swift_beginAccess();
    swift_retain();
    v70 = objc_msgSend(v81, sel_URL);
    v71 = v82;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v72 = v68 + *(int *)(v67 + 48);
    v73 = v68 + *(int *)(v67 + 64);
    v74 = v86;
    v75 = v87;
    v76 = v88;
    (*(void (**)(uint64_t, char *, uint64_t))(v87 + 16))(v68, v86, v88);
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v72, v71, v84);
    outlined init with copy of Participant(v57, v73, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    PassthroughSubject.send(_:)();
    swift_release();
    swift_release();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v68, &demangling cache variable for type metadata for (UUID, URL, Participant));
    outlined destroy of Participant(v57, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
    return;
  }
  if (one-time initialization token for default != -1)
LABEL_53:
    swift_once();
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Log.default);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    _os_log_impl(&dword_1A0DB3000, v36, v37, "Failed to find attachmentID from metadata", v38, 2u);
    MEMORY[0x1A1B05CC4](v38, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
}

void closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t i;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[4];

  v87 = a4;
  v77 = a1;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  MEMORY[0x1E0C80A78](v81);
  v76 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  MEMORY[0x1E0C80A78](v5);
  v78 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v7);
  v75 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v74 - v15;
  MEMORY[0x1E0C80A78](v14);
  v82 = (uint64_t)&v74 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  v84 = v21;
  v85 = v22;
  MEMORY[0x1E0C80A78](v21);
  v83 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v24);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return;
  static String.Encoding.utf8.getter();
  v25 = String.init(data:encoding:)();
  if (!v26)
  {
    if (one-time initialization token for default != -1)
LABEL_52:
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.default);
    v32 = Logger.logObject.getter();
    v37 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v32, v37))
    {

      swift_release();
      return;
    }
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    _os_log_impl(&dword_1A0DB3000, v32, v37, "Failed to find attachmentID from metadata", v38, 2u);
    MEMORY[0x1A1B05CC4](v38, -1, -1);
    goto LABEL_11;
  }
  v27 = v25;
  v28 = v26;
  UUID.init(uuidString:)();
  v29 = v84;
  v30 = v85;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v20, 1, v84) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for default != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v33))
    {

      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v89[0] = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v32, v33, "Failed to convert attachmentID: %s to UUID.", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v35, -1, -1);
    MEMORY[0x1A1B05CC4](v34, -1, -1);
LABEL_11:
    swift_release();

    return;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v83, v20, v29);
  v39 = GroupSession.activeParticipants.getter();
  v40 = v39;
  v41 = v39 + 56;
  v42 = 1 << *(_BYTE *)(v39 + 32);
  v43 = -1;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  v44 = v43 & *(_QWORD *)(v39 + 56);
  v45 = (unint64_t)(v42 + 63) >> 6;
  swift_bridgeObjectRetain();
  v46 = 0;
  if (!v44)
    goto LABEL_16;
LABEL_15:
  v47 = __clz(__rbit64(v44));
  v44 &= v44 - 1;
  for (i = v47 | (v46 << 6); ; i = __clz(__rbit64(v50)) + (v46 << 6))
  {
    outlined init with copy of Participant(*(_QWORD *)(v40 + 48) + *(_QWORD *)(v10 + 72) * i, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (*(_QWORD *)&v13[*(int *)(v9 + 24)] == v87)
    {
      swift_release();
      v52 = v75;
      outlined init with take of Participant((uint64_t)v13, v75, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v52, 0, 1, v9);
LABEL_41:
      swift_bridgeObjectRelease();
      v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v52, 1, v9);
      v54 = v85;
      v55 = v82;
      if (v53 == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v52, &demangling cache variable for type metadata for Participant?);
        if (one-time initialization token for default != -1)
          swift_once();
        v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)static Log.default);
        swift_retain();
        v57 = Logger.logObject.getter();
        v58 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = swift_slowAlloc();
          v60 = swift_slowAlloc();
          v89[0] = v60;
          *(_DWORD *)v59 = 134218242;
          v61 = v87;
          v88 = v87;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v59 + 12) = 2080;
          v62 = GroupSession.description.getter();
          v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v89);
          v54 = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          v64 = v61;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A0DB3000, v57, v58, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v59, 0x16u);
          swift_arrayDestroy();
          v65 = v60;
          v55 = v82;
          MEMORY[0x1A1B05CC4](v65, -1, -1);
          MEMORY[0x1A1B05CC4](v59, -1, -1);

          v66 = (uint64_t)v76;
        }
        else
        {

          swift_release();
          v66 = (uint64_t)v76;
          v64 = v87;
        }
        UUID.init(_:)();
        *(_QWORD *)(v55 + *(int *)(v9 + 24)) = v64;
        v67 = (_QWORD *)(v55 + *(int *)(v9 + 20));
        *v67 = 0;
        v67[1] = 0xE000000000000000;
      }
      else
      {
        outlined init with take of Participant(v52, v82, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v66 = (uint64_t)v76;
      }
      swift_beginAccess();
      swift_retain();
      v68 = objc_msgSend(v77, sel_URL);
      v69 = v78;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v70 = v66 + *(int *)(v81 + 48);
      v71 = v66 + *(int *)(v81 + 64);
      v73 = v83;
      v72 = v84;
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v66, v83, v84);
      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v70, v69, v80);
      outlined init with copy of Participant(v55, v71, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      PassthroughSubject.send(_:)();
      swift_release();
      swift_release();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v66, &demangling cache variable for type metadata for (UUID, URL, Participant));
      outlined destroy of Participant(v55, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v73, v72);
      return;
    }
    outlined destroy of Participant((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v44)
      goto LABEL_15;
LABEL_16:
    v49 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v49 >= v45)
    {
LABEL_40:
      swift_release();
      v52 = v75;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v75, 1, 1, v9);
      goto LABEL_41;
    }
    v50 = *(_QWORD *)(v41 + 8 * v49);
    ++v46;
    if (!v50)
    {
      v46 = v49 + 1;
      if (v49 + 1 >= v45)
        goto LABEL_40;
      v50 = *(_QWORD *)(v41 + 8 * v46);
      if (!v50)
      {
        v46 = v49 + 2;
        if (v49 + 2 >= v45)
          goto LABEL_40;
        v50 = *(_QWORD *)(v41 + 8 * v46);
        if (!v50)
        {
          v46 = v49 + 3;
          if (v49 + 3 >= v45)
            goto LABEL_40;
          v50 = *(_QWORD *)(v41 + 8 * v46);
          if (!v50)
          {
            v46 = v49 + 4;
            if (v49 + 4 >= v45)
              goto LABEL_40;
            v50 = *(_QWORD *)(v41 + 8 * v46);
            if (!v50)
              break;
          }
        }
      }
    }
LABEL_33:
    v44 = (v50 - 1) & v50;
  }
  v51 = v49 + 5;
  if (v51 >= v45)
    goto LABEL_40;
  v50 = *(_QWORD *)(v41 + 8 * v51);
  if (v50)
  {
    v46 = v51;
    goto LABEL_33;
  }
  while (1)
  {
    v46 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v46 >= v45)
      goto LABEL_40;
    v50 = *(_QWORD *)(v41 + 8 * v46);
    ++v51;
    if (v50)
      goto LABEL_33;
  }
  __break(1u);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v27 = a3;
  v26 = type metadata accessor for Participant();
  v30 = *(_QWORD *)(v26 - 8);
  v6 = MEMORY[0x1E0C80A78](v26);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - v9;
  v11 = *(_QWORD *)(a2 + 56);
  v28 = a2 + 56;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    outlined init with copy of Participant(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v30 + 72) * i, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v22 = a1(v8);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      return swift_release();
    }
    if ((v22 & 1) != 0)
    {
      swift_release();
      v23 = v27;
      outlined init with take of Participant((uint64_t)v8, v27, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v24 = 0;
      v25 = v26;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v23, v24, 1, v25);
    }
    result = outlined destroy of Participant((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v14)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v16++, 1))
      break;
    if (v16 >= v29)
      goto LABEL_28;
    v20 = *(_QWORD *)(v28 + 8 * v16);
    if (!v20)
    {
      v21 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 2;
      if (v16 + 2 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 3;
      if (v16 + 3 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
      {
LABEL_16:
        v16 = v21;
        goto LABEL_17;
      }
      v21 = v16 + 4;
      if (v16 + 4 < v29)
      {
        v20 = *(_QWORD *)(v28 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v16 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_31;
            if (v16 >= v29)
              goto LABEL_28;
            v20 = *(_QWORD *)(v28 + 8 * v16);
            ++v21;
            if (v20)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v26;
      v23 = v27;
      swift_release();
      v24 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v23, v24, 1, v25);
    }
LABEL_17:
    v14 = (v20 - 1) & v20;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint8_t *v25;
  uint64_t v26;
  char *v27;
  id v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnyGroupActivity(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v24 = (_QWORD *)swift_slowAlloc();
    v25 = v15;
    v26 = v8;
    *(_DWORD *)v15 = 138412290;
    v28 = v12;
    v16 = v12;
    v27 = v6;
    v17 = v16;
    v8 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = v24;
    *v24 = v12;

    v6 = v27;
    v19 = v25;
    _os_log_impl(&dword_1A0DB3000, v13, v14, "GroupSession updating activity to %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    MEMORY[0x1A1B05CC4](v19, -1, -1);

  }
  else
  {

  }
  MEMORY[0x1E0C80A78](v20);
  tryLog<A>(_:_:function:line:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for AnyGroupActivity?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
  }
  else
  {
    v22 = outlined init with take of Participant((uint64_t)v6, (uint64_t)v10, type metadata accessor for AnyGroupActivity);
    MEMORY[0x1E0C80A78](v22);
    tryLog<A>(_:_:function:line:)();
    return outlined destroy of Participant((uint64_t)v10, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnyGroupActivity(0);
  v35 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (one-time initialization token for default != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  v16 = v14;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v32 = v10;
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v34 = a4;
    v30 = (_QWORD *)v20;
    v31 = v11;
    *(_DWORD *)v19 = 138412290;
    v36 = v16;
    v21 = v16;
    v33 = v13;
    v22 = v21;
    v11 = v31;
    v10 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = v30;
    *v30 = v16;

    v13 = v33;
    _os_log_impl(&dword_1A0DB3000, v17, v18, "GroupSession updating activity to %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v24 = v23;
    a4 = v34;
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v19, -1, -1);

  }
  else
  {

  }
  MEMORY[0x1E0C80A78](v25);
  v28 = v11;
  tryLog<A>(_:_:function:line:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnyGroupActivity?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  else
  {
    v27 = outlined init with take of Participant((uint64_t)v10, (uint64_t)v13, type metadata accessor for AnyGroupActivity);
    MEMORY[0x1E0C80A78](v27);
    *(&v29 - 4) = a2;
    *(&v29 - 3) = a3;
    v28 = a2;
    tryLog<A>(_:_:function:line:)();
    return outlined destroy of Participant((uint64_t)v13, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v9;

  v4 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(a1, (uint64_t)v6, v7);
  return specialized GroupActivity.init(activity:)((uint64_t)v6, a2);
}

uint64_t implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v13;

  v8 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Participant(a1, (uint64_t)v10, v11);
  return GroupActivity.init(activity:)(v10, a2, a3, a4);
}

uint64_t specialized GroupActivity.init(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnyGroupActivity(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = swift_conformsToProtocol2();
  if (v14)
    v15 = v14;
  else
    v15 = 0;
  if (v14)
    v16 = v7;
  else
    v16 = 0;
  if (v16)
  {
    outlined init with copy of Participant(a1, (uint64_t)v13, type metadata accessor for AnyGroupActivity);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 8);
    v30 = v16;
    v31 = v15;
    __swift_allocate_boxed_opaque_existential_1(&v28);
    v17(v13, v16, v15);
    if (v2)
    {
      outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v28);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomGroupActivityDecodable);
    v24 = swift_dynamicCast();
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    if ((v24 & 1) == 0)
    {
      v25(v6, 1, 1, v7);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for AnyGroupActivity?);
      v28 = 0;
      v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v28 = 0xD00000000000001DLL;
      v29 = 0x80000001A0F197B0;
      swift_getMetatypeMetadata();
      v26._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v25(v6, 0, 1, v7);
    outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
    v22 = (uint64_t)v6;
    v23 = v32;
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v19 = (uint64_t *)(a1 + *(int *)(v7 + 24));
    v20 = *v19;
    v21 = v19[1];
    outlined copy of Data._Representation(*v19, v21);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined destroy of Participant(a1, type metadata accessor for AnyGroupActivity);
    outlined consume of Data._Representation(v20, v21);
    result = swift_release();
    if (v2)
      return result;
    v22 = (uint64_t)v11;
    v23 = v32;
  }
  return outlined init with take of Participant(v22, v23, type metadata accessor for AnyGroupActivity);
}

uint64_t specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  void (**v40)(uint64_t, unint64_t, uint64_t);
  void (*v41)(uint64_t, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t i;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[7];
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[5];

  v91 = a6;
  v92 = a3;
  v87 = a4;
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  MEMORY[0x1E0C80A78](v84);
  v85 = (_QWORD *)((char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v10);
  v82 = (uint64_t)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Participant();
  v86 = *(_QWORD *)(v96 - 8);
  v12 = MEMORY[0x1E0C80A78](v96);
  v14 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v80 - v16;
  MEMORY[0x1E0C80A78](v15);
  v83 = (uint64_t)v80 - v18;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OSSignpostID();
  v24 = *(_QWORD *)(v23 - 8);
  v94 = v23;
  v95 = v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v88 = (char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)v80 - v27;
  v29 = type metadata accessor for OSSignposter();
  v89 = *(_QWORD *)(v29 - 8);
  v90 = v29;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Signposts.messenger.getter();
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a5, v19);
  v33 = (void *)OSSignposter.logHandle.getter();
  v81 = static os_signpost_type_t.event.getter();
  v34 = OS_os_log.signpostsEnabled.getter();
  v93 = a2;
  if ((v34 & 1) != 0)
  {
    v80[2] = v33;
    v80[3] = v22;
    v80[4] = v20;
    v80[5] = v19;
    v80[6] = v31;
    v35 = a2 >> 62;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v88, v28, v94);
    v36 = (_DWORD *)swift_slowAlloc();
    v98[3] = swift_slowAlloc();
    *v36 = 134218498;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(a1, a2);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  outlined consume of Data._Representation(a1, a2);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v28, v94);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v31, v90);
  v37 = v92;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v39 = result;
  LODWORD(v92) = v87 & 1;
  if ((v87 & 1) == 0)
  {
    v40 = (void (**)(uint64_t, unint64_t, uint64_t))(result
                                                                   + direct field offset for GroupSession.receivedDataHandler);
    result = swift_beginAccess();
    v41 = *v40;
    if (*v40)
    {
      swift_retain();
      v41(a1, v93, v37);
      result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v41);
    }
  }
  v94 = a1;
  MEMORY[0x1E0C80A78](result);
  v42 = type metadata accessor for AnyGroupActivity(0);
  v80[-2] = v42;
  v43 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  v80[-1] = v43;
  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath);
  v80[-2] = v42;
  v80[-1] = v43;
  swift_getKeyPath();
  v95 = v39;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v45 = v98[0];
  v46 = v98[0] + 56;
  v47 = 1 << *(_BYTE *)(v98[0] + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & *(_QWORD *)(v98[0] + 56);
  v50 = (unint64_t)(v47 + 63) >> 6;
  swift_bridgeObjectRetain();
  v51 = 0;
  v52 = v86;
  if (!v49)
    goto LABEL_11;
LABEL_10:
  v53 = __clz(__rbit64(v49));
  v49 &= v49 - 1;
  for (i = v53 | (v51 << 6); ; i = __clz(__rbit64(v56)) + (v51 << 6))
  {
    outlined init with copy of Participant(*(_QWORD *)(v45 + 48) + *(_QWORD *)(v52 + 72) * i, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (*(_QWORD *)&v14[*(int *)(v96 + 24)] == v37)
    {
      swift_release();
      v58 = v82;
      outlined init with take of Participant((uint64_t)v14, v82, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
      v60 = v58;
      v61 = 0;
      goto LABEL_36;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v49)
      goto LABEL_10;
LABEL_11:
    v55 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v55 >= v50)
      goto LABEL_35;
    v56 = *(_QWORD *)(v46 + 8 * v55);
    ++v51;
    if (!v56)
    {
      v51 = v55 + 1;
      if (v55 + 1 >= v50)
        goto LABEL_35;
      v56 = *(_QWORD *)(v46 + 8 * v51);
      if (!v56)
      {
        v51 = v55 + 2;
        if (v55 + 2 >= v50)
          goto LABEL_35;
        v56 = *(_QWORD *)(v46 + 8 * v51);
        if (!v56)
        {
          v51 = v55 + 3;
          if (v55 + 3 >= v50)
            goto LABEL_35;
          v56 = *(_QWORD *)(v46 + 8 * v51);
          if (!v56)
          {
            v51 = v55 + 4;
            if (v55 + 4 >= v50)
              goto LABEL_35;
            v56 = *(_QWORD *)(v46 + 8 * v51);
            if (!v56)
            {
              v51 = v55 + 5;
              if (v55 + 5 >= v50)
                goto LABEL_35;
              v56 = *(_QWORD *)(v46 + 8 * v51);
              if (!v56)
                break;
            }
          }
        }
      }
    }
LABEL_30:
    v49 = (v56 - 1) & v56;
  }
  v57 = v55 + 6;
  if (v57 >= v50)
    goto LABEL_35;
  v56 = *(_QWORD *)(v46 + 8 * v57);
  if (v56)
  {
    v51 = v57;
    goto LABEL_30;
  }
  while (1)
  {
    v51 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      JUMPOUT(0x1A0DCD784);
    }
    if (v51 >= v50)
      break;
    v56 = *(_QWORD *)(v46 + 8 * v51);
    ++v57;
    if (v56)
      goto LABEL_30;
  }
LABEL_35:
  swift_release();
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v58 = v82;
  v60 = v82;
  v61 = 1;
LABEL_36:
  v17 = (char *)v96;
  v59(v60, v61, 1, v96);
  swift_bridgeObjectRelease();
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v52 + 48))(v58, 1, v17);
  v49 = v94;
  if (v62 != 1)
  {
    v74 = v83;
    outlined init with take of Participant(v58, v83, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v72 = v85;
    v73 = v84;
    v75 = v92;
    goto LABEL_43;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v58, &demangling cache variable for type metadata for Participant?);
  if (one-time initialization token for default != -1)
LABEL_46:
    swift_once();
  v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Log.default);
  swift_retain();
  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc();
    v67 = swift_slowAlloc();
    v97 = v37;
    v98[0] = v67;
    *(_DWORD *)v66 = 134218242;
    v68 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v66 + 12) = 2080;
    v69 = specialized GroupSession.description.getter();
    v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v98);
    v49 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v64, v65, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy();
    v71 = v67;
    v17 = (char *)v96;
    MEMORY[0x1A1B05CC4](v71, -1, -1);
    MEMORY[0x1A1B05CC4](v66, -1, -1);

    v72 = v85;
    v73 = v84;
    v74 = v83;
  }
  else
  {

    swift_release();
    v72 = v85;
    v73 = v84;
    v74 = v83;
    v68 = v37;
  }
  v75 = v92;
  UUID.init(_:)();
  *(_QWORD *)(v74 + *((int *)v17 + 6)) = v68;
  v76 = (_QWORD *)(v74 + *((int *)v17 + 5));
  *v76 = 0;
  v76[1] = 0xE000000000000000;
LABEL_43:
  swift_beginAccess();
  v77 = (uint64_t)v72 + *(int *)(v73 + 48);
  v78 = *(int *)(v73 + 64);
  v79 = v93;
  *v72 = v49;
  v72[1] = v79;
  outlined init with copy of Participant(v74, v77, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  *((_BYTE *)v72 + v78) = v75;
  outlined copy of Data._Representation(v49, v79);
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v72, &demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return outlined destroy of Participant(v74, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char v33;
  void (*v34)(char *, char *, unint64_t);
  _DWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(uint64_t, unint64_t, uint64_t);
  void (*v42)(uint64_t, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t active;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t i;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[7];
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[3];

  v87 = a6;
  v88 = a5;
  v89 = a3;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  MEMORY[0x1E0C80A78](v80);
  v81 = (_QWORD *)((char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v10);
  v82 = (uint64_t)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Participant();
  v83 = *(_QWORD *)(v94 - 8);
  v12 = MEMORY[0x1E0C80A78](v94);
  v14 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v78 - v16;
  MEMORY[0x1E0C80A78](v15);
  v79 = (uint64_t)v78 - v18;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OSSignpostID();
  v91 = *(_QWORD *)(v23 - 8);
  v92 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v84 = (char *)v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)v78 - v26;
  v28 = type metadata accessor for OSSignposter();
  v85 = *(_QWORD *)(v28 - 8);
  v86 = v28;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)v78 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = *a4;
  static Signposts.messenger.getter();
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v88, v19);
  v32 = (void *)OSSignposter.logHandle.getter();
  LODWORD(v88) = static os_signpost_type_t.event.getter();
  v33 = OS_os_log.signpostsEnabled.getter();
  v90 = a1;
  if ((v33 & 1) != 0)
  {
    v78[2] = v32;
    v78[6] = v22;
    v78[3] = v20;
    v78[4] = v30;
    v34 = *(void (**)(char *, char *, unint64_t))(v91 + 16);
    v78[5] = v27;
    v34(v84, v27, v92);
    v35 = (_DWORD *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *v35 = 134218498;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(a1, a2);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  outlined consume of Data._Representation(a1, a2);
  (*(void (**)(char *, unint64_t))(v91 + 8))(v27, v92);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v30, v86);
  v36 = v89;
  v37 = v93;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v39 = result;
  v40 = v90;
  if ((v37 & 1) == 0)
  {
    v41 = (void (**)(uint64_t, unint64_t, uint64_t))(result
                                                                   + direct field offset for GroupSession.receivedDataHandler);
    swift_beginAccess();
    v42 = *v41;
    if (*v41)
    {
      swift_retain();
      v42(v40, a2, v36);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v42);
    }
  }
  v43 = v39;
  v44 = v36;
  v91 = v43;
  v92 = a2;
  active = GroupSession.internalActiveParticipants.getter();
  v46 = active;
  v47 = active + 56;
  v48 = 1 << *(_BYTE *)(active + 32);
  v49 = -1;
  if (v48 < 64)
    v49 = ~(-1 << v48);
  v50 = v49 & *(_QWORD *)(active + 56);
  v51 = (unint64_t)(v48 + 63) >> 6;
  swift_bridgeObjectRetain();
  v52 = 0;
  v53 = v83;
  if (!v50)
    goto LABEL_11;
LABEL_10:
  v54 = __clz(__rbit64(v50));
  v50 &= v50 - 1;
  for (i = v54 | (v52 << 6); ; i = __clz(__rbit64(v57)) + (v52 << 6))
  {
    outlined init with copy of Participant(*(_QWORD *)(v46 + 48) + *(_QWORD *)(v53 + 72) * i, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (*(_QWORD *)&v14[*(int *)(v94 + 24)] == v44)
    {
      swift_release();
      v59 = v82;
      outlined init with take of Participant((uint64_t)v14, v82, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v61 = v59;
      v62 = 0;
      goto LABEL_34;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v50)
      goto LABEL_10;
LABEL_11:
    v56 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v56 >= v51)
      goto LABEL_33;
    v57 = *(_QWORD *)(v47 + 8 * v56);
    ++v52;
    if (!v57)
    {
      v52 = v56 + 1;
      if (v56 + 1 >= v51)
        goto LABEL_33;
      v57 = *(_QWORD *)(v47 + 8 * v52);
      if (!v57)
      {
        v52 = v56 + 2;
        if (v56 + 2 >= v51)
          goto LABEL_33;
        v57 = *(_QWORD *)(v47 + 8 * v52);
        if (!v57)
        {
          v52 = v56 + 3;
          if (v56 + 3 >= v51)
            goto LABEL_33;
          v57 = *(_QWORD *)(v47 + 8 * v52);
          if (!v57)
          {
            v52 = v56 + 4;
            if (v56 + 4 >= v51)
              goto LABEL_33;
            v57 = *(_QWORD *)(v47 + 8 * v52);
            if (!v57)
              break;
          }
        }
      }
    }
LABEL_28:
    v50 = (v57 - 1) & v57;
  }
  v58 = v56 + 5;
  if (v58 >= v51)
    goto LABEL_33;
  v57 = *(_QWORD *)(v47 + 8 * v58);
  if (v57)
  {
    v52 = v58;
    goto LABEL_28;
  }
  while (1)
  {
    v52 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      JUMPOUT(0x1A0DCE23CLL);
    }
    if (v52 >= v51)
      break;
    v57 = *(_QWORD *)(v47 + 8 * v52);
    ++v58;
    if (v57)
      goto LABEL_28;
  }
LABEL_33:
  swift_release();
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
  v59 = v82;
  v61 = v82;
  v62 = 1;
LABEL_34:
  v47 = v94;
  v60(v61, v62, 1, v94);
  swift_bridgeObjectRelease();
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v59, 1, v47);
  v50 = v92;
  if (v63 != 1)
  {
    v53 = v79;
    outlined init with take of Participant(v59, v79, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    goto LABEL_41;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v59, &demangling cache variable for type metadata for Participant?);
  v53 = v79;
  if (one-time initialization token for default != -1)
LABEL_44:
    swift_once();
  v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Log.default);
  swift_retain();
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = swift_slowAlloc();
    v89 = swift_slowAlloc();
    v96[0] = v89;
    *(_DWORD *)v67 = 134218242;
    v68 = v44;
    v95 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v67 + 12) = 2080;
    v69 = GroupSession.description.getter();
    v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v96);
    v50 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v65, v66, "Failed to find participant on GroupSession with serverIdentifier: %llu, groupSession: %s", (uint8_t *)v67, 0x16u);
    v71 = v89;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v71, -1, -1);
    v72 = v67;
    v47 = v94;
    MEMORY[0x1A1B05CC4](v72, -1, -1);

  }
  else
  {

    swift_release();
    v68 = v44;
  }
  UUID.init(_:)();
  *(_QWORD *)(v53 + *(int *)(v47 + 24)) = v68;
  v73 = (_QWORD *)(v53 + *(int *)(v47 + 20));
  *v73 = 0;
  v73[1] = 0xE000000000000000;
LABEL_41:
  swift_beginAccess();
  v74 = (uint64_t)v81;
  v75 = (uint64_t)v81 + *(int *)(v80 + 48);
  v76 = *(int *)(v80 + 64);
  v77 = v90;
  *v81 = v90;
  *(_QWORD *)(v74 + 8) = v50;
  outlined init with copy of Participant(v53, v75, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  *(_BYTE *)(v74 + v76) = v93;
  outlined copy of Data._Representation(v77, v50);
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  swift_release();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v74, &demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return outlined destroy of Participant(v53, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint8_t *v19;
  os_signpost_id_t v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;

  v0 = type metadata accessor for OSSignpostError();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v22[-v9];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = result;
    specialized GroupSession.updatePublicState()((uint64_t)partial apply for specialized closure #1 in GroupSession.updatePublicState(), (uint64_t)&block_descriptor_376);
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 328);
    if (*(_QWORD *)(v12 + v13))
    {
      v24 = v5;
      v25 = v13;
      v14 = one-time initialization token for groupSession;
      swift_retain();
      if (v14 != -1)
        swift_once();
      v15 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v15, (uint64_t)static Signposts.groupSession);
      v16 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v23 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(_BYTE *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E0DF2190])
        {
          v17 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
          v17 = "";
        }
        v18 = v24;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 16))(v8, v10, v4);
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        v20 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v16, (os_signpost_type_t)v23, v20, "group-session-join", v17, v19, 2u);
        MEMORY[0x1A1B05CC4](v19, -1, -1);

        v21 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
        v21(v10, v4);
        swift_release();
        v21(v8, v4);
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v10, v4);
        swift_release();
      }
      *(_QWORD *)(v12 + v25) = 0;
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint8_t *v19;
  os_signpost_id_t v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;

  v0 = type metadata accessor for OSSignpostError();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v22[-v9];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = result;
    GroupSession.updatePublicState()();
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 328);
    if (*(_QWORD *)(v12 + v13))
    {
      v24 = v5;
      v25 = v13;
      v14 = one-time initialization token for groupSession;
      swift_retain();
      if (v14 != -1)
        swift_once();
      v15 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v15, (uint64_t)static Signposts.groupSession);
      v16 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v23 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        if ((*(unsigned int (**)(_BYTE *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E0DF2190])
        {
          v17 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
          v17 = "";
        }
        v18 = v24;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 16))(v8, v10, v4);
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        v20 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v16, (os_signpost_type_t)v23, v20, "group-session-join", v17, v19, 2u);
        MEMORY[0x1A1B05CC4](v19, -1, -1);

        v21 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
        v21(v10, v4);
        swift_release();
        v21(v8, v4);
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v10, v4);
        swift_release();
      }
      *(_QWORD *)(v12 + v25) = 0;
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a1;
  v1 = type metadata accessor for Participant();
  v53 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v48 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v48 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t)&v48 - v14;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v51 = v13;
  v17 = v1;
  if (one-time initialization token for default == -1)
    goto LABEL_3;
LABEL_42:
  swift_once();
LABEL_3:
  v49 = v4;
  v50 = v15;
  v18 = type metadata accessor for Logger();
  v48 = __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v21 = 134217984;
    v54 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v19, v20, "Catchup needed. Leader participant id:%llu", v21, 0xCu);
    MEMORY[0x1A1B05CC4](v21, -1, -1);
  }

  MEMORY[0x1E0C80A78](v22);
  v23 = type metadata accessor for AnyGroupActivity(0);
  *(&v48 - 2) = v23;
  v24 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  *(&v48 - 1) = v24;
  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath);
  *(&v48 - 2) = v23;
  *(&v48 - 1) = v24;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v26 = v54;
  v4 = (char *)(v54 + 56);
  v27 = 1 << *(_BYTE *)(v54 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & *(_QWORD *)(v54 + 56);
  v30 = (unint64_t)(v27 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  if (v29)
  {
LABEL_8:
    v31 = __clz(__rbit64(v29));
    v29 &= v29 - 1;
    v32 = v31 | (v15 << 6);
    goto LABEL_29;
  }
  while (1)
  {
    v33 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v33 >= v30)
      goto LABEL_33;
    v34 = *(_QWORD *)&v4[8 * v33];
    ++v15;
    if (!v34)
    {
      v15 = v33 + 1;
      if (v33 + 1 >= v30)
        goto LABEL_33;
      v34 = *(_QWORD *)&v4[8 * v15];
      if (!v34)
      {
        v15 = v33 + 2;
        if (v33 + 2 >= v30)
          goto LABEL_33;
        v34 = *(_QWORD *)&v4[8 * v15];
        if (!v34)
        {
          v15 = v33 + 3;
          if (v33 + 3 >= v30)
            goto LABEL_33;
          v34 = *(_QWORD *)&v4[8 * v15];
          if (!v34)
          {
            v15 = v33 + 4;
            if (v33 + 4 >= v30)
              goto LABEL_33;
            v34 = *(_QWORD *)&v4[8 * v15];
            if (!v34)
            {
              v15 = v33 + 5;
              if (v33 + 5 >= v30)
                goto LABEL_33;
              v34 = *(_QWORD *)&v4[8 * v15];
              if (!v34)
                break;
            }
          }
        }
      }
    }
LABEL_28:
    v29 = (v34 - 1) & v34;
    v32 = __clz(__rbit64(v34)) + (v15 << 6);
LABEL_29:
    outlined init with copy of Participant(*(_QWORD *)(v26 + 48) + *(_QWORD *)(v53 + 72) * v32, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (*(_QWORD *)&v7[*(int *)(v17 + 24)] == v52)
    {
      swift_release();
      v36 = v50;
      outlined init with take of Participant((uint64_t)v7, v50, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v37 = v53;
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v39 = v36;
      v40 = 0;
LABEL_34:
      v41 = v17;
      v38(v39, v40, 1, v17);
      swift_bridgeObjectRelease();
      v42 = (uint64_t)v51;
      outlined init with copy of URL?(v36, (uint64_t)v51, &demangling cache variable for type metadata for Participant?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v42, 1, v41) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v42, &demangling cache variable for type metadata for Participant?);
        v43 = Logger.logObject.getter();
        v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v45 = 134217984;
          v54 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1A0DB3000, v43, v44, "ParticipantID:%llu was not found.", v45, 0xCu);
          MEMORY[0x1A1B05CC4](v45, -1, -1);
        }

        swift_release();
      }
      else
      {
        v46 = v42;
        v47 = (uint64_t)v49;
        outlined init with take of Participant(v46, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        swift_beginAccess();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        swift_release();
        outlined destroy of Participant(v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      }
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v36, &demangling cache variable for type metadata for Participant?);
    }
    result = outlined destroy of Participant((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v29)
      goto LABEL_8;
  }
  v35 = v33 + 6;
  if (v35 >= v30)
  {
LABEL_33:
    swift_release();
    v37 = v53;
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
    v36 = v50;
    v39 = v50;
    v40 = 1;
    goto LABEL_34;
  }
  v34 = *(_QWORD *)&v4[8 * v35];
  if (v34)
  {
    v15 = v35;
    goto LABEL_28;
  }
  while (1)
  {
    v15 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v15 >= v30)
      goto LABEL_33;
    v34 = *(_QWORD *)&v4[8 * v15];
    ++v35;
    if (v34)
      goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t active;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a1;
  v1 = type metadata accessor for Participant();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v39 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v39 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - v15;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v18 = result;
  v43 = v14;
  if (one-time initialization token for default == -1)
    goto LABEL_3;
LABEL_40:
  swift_once();
LABEL_3:
  v40 = v5;
  v42 = v16;
  v19 = type metadata accessor for Logger();
  v39 = __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v22 = 134217984;
    v45 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v20, v21, "Catchup needed. Leader participant id:%llu", v22, 0xCu);
    MEMORY[0x1A1B05CC4](v22, -1, -1);
  }

  v41 = v18;
  active = GroupSession.internalActiveParticipants.getter();
  v24 = active;
  v5 = (char *)(active + 56);
  v25 = 1 << *(_BYTE *)(active + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v18 = v26 & *(_QWORD *)(active + 56);
  v16 = (char *)((unint64_t)(v25 + 63) >> 6);
  result = swift_bridgeObjectRetain();
  v27 = 0;
  if (v18)
  {
LABEL_8:
    v28 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v29 = v28 | (v27 << 6);
    goto LABEL_27;
  }
  while (1)
  {
    v30 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v30 >= (uint64_t)v16)
      goto LABEL_31;
    v31 = *(_QWORD *)&v5[8 * v30];
    ++v27;
    if (!v31)
    {
      v27 = v30 + 1;
      if (v30 + 1 >= (uint64_t)v16)
        goto LABEL_31;
      v31 = *(_QWORD *)&v5[8 * v27];
      if (!v31)
      {
        v27 = v30 + 2;
        if (v30 + 2 >= (uint64_t)v16)
          goto LABEL_31;
        v31 = *(_QWORD *)&v5[8 * v27];
        if (!v31)
        {
          v27 = v30 + 3;
          if (v30 + 3 >= (uint64_t)v16)
            goto LABEL_31;
          v31 = *(_QWORD *)&v5[8 * v27];
          if (!v31)
          {
            v27 = v30 + 4;
            if (v30 + 4 >= (uint64_t)v16)
              goto LABEL_31;
            v31 = *(_QWORD *)&v5[8 * v27];
            if (!v31)
              break;
          }
        }
      }
    }
LABEL_26:
    v18 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v27 << 6);
LABEL_27:
    outlined init with copy of Participant(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v2 + 72) * v29, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (*(_QWORD *)&v8[*(int *)(v1 + 24)] == v44)
    {
      swift_release();
      v33 = (uint64_t)v42;
      outlined init with take of Participant((uint64_t)v8, (uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v33, 0, 1, v1);
LABEL_32:
      swift_bridgeObjectRelease();
      v34 = (uint64_t)v43;
      outlined init with copy of URL?(v33, (uint64_t)v43, &demangling cache variable for type metadata for Participant?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v34, 1, v1) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v34, &demangling cache variable for type metadata for Participant?);
        v35 = Logger.logObject.getter();
        v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v37 = 134217984;
          v45 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1A0DB3000, v35, v36, "ParticipantID:%llu was not found.", v37, 0xCu);
          MEMORY[0x1A1B05CC4](v37, -1, -1);
        }

        swift_release();
      }
      else
      {
        v38 = (uint64_t)v40;
        outlined init with take of Participant(v34, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        swift_beginAccess();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        swift_release();
        outlined destroy of Participant(v38, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      }
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v33, &demangling cache variable for type metadata for Participant?);
    }
    result = outlined destroy of Participant((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v18)
      goto LABEL_8;
  }
  v32 = v30 + 5;
  if (v32 >= (uint64_t)v16)
  {
LABEL_31:
    swift_release();
    v33 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v42, 1, 1, v1);
    goto LABEL_32;
  }
  v31 = *(_QWORD *)&v5[8 * v32];
  if (v31)
  {
    v27 = v32;
    goto LABEL_26;
  }
  while (1)
  {
    v27 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v27 >= (uint64_t)v16)
      goto LABEL_31;
    v31 = *(_QWORD *)&v5[8 * v27];
    ++v32;
    if (v31)
      goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      aBlock[0] = v8;
      *(_DWORD *)v7 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        v9 = String.init<A>(reflecting:)();
        v11 = v10;
      }
      else
      {
        v11 = 0xE300000000000000;
        v9 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Requesting encryption-keys for participantIDs=%s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v12 = *(NSObject **)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 288));
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v3;
    *(_QWORD *)(v13 + 24) = a1;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = closure #1 in GroupSession.requestEncryptionKey(for:)specialized partial apply;
    *(_QWORD *)(v14 + 24) = v13;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_397;
    v15 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v12, v15);
    _Block_release(v15);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

Swift::Void __swiftcall GroupSession.requestEncryptionKey(for:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v1;
  void *rawValue;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  rawValue = a1.value._rawValue;
  v3 = *(NSObject **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 288));
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = rawValue;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in GroupSession.requestEncryptionKey(for:);
  *(_QWORD *)(v5 + 24) = v4;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_92;
  v6 = _Block_copy(v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
}

uint64_t specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  id *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ValueWitnessTable *v10;
  id *v11;
  id v12;
  uint64_t v13;
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  id v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45[3];
  uint64_t v46;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_7;
  v5 = (id *)(Strong + *(_QWORD *)(*(_QWORD *)Strong + 280));
  swift_beginAccess();
  v6 = *v5;
  swift_release();
  if ((ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter() & 1) == 0)
  {

LABEL_7:
    v13 = swift_bridgeObjectRetain();
    Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(v13);
    swift_bridgeObjectRelease();
    v15 = specialized Set.init<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n);
    goto LABEL_20;
  }
  v46 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized Sequence.compactMap<A>(_:)(a1, a2, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  swift_release();
  v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v46 + 16))
    goto LABEL_18;
  swift_beginAccess();
  v9 = swift_weakLoadStrong();
  v10 = &value witness table for GroupSessionProviderTestingOverrides;
  if (v9)
  {
    v11 = (id *)(v9 + *(_QWORD *)(*(_QWORD *)v9 + 280));
    swift_beginAccess();
    v12 = *v11;
    swift_bridgeObjectRetain();
    v24 = ActivitySessionClientConnection.requestParticipants(for:)();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v45[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v21 = Set.description.getter();
      v23 = v22;
      swift_bridgeObjectRelease();
      v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v10 = &value witness table for GroupSessionProviderTestingOverrides;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "[Translation] Not translating participants %s since self is nil", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);
    }

    v24 = MEMORY[0x1E0DEE9E8];
  }
  Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(v24, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  v8 = specialized Set.union<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n, v8);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(_QWORD *)(v46 + 16))
    goto LABEL_18;
  if (v10[32].assignWithTake != (void *)-1)
    goto LABEL_22;
  while (1)
  {
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.default);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v42 = v6;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v44[0] = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain();
      v31 = Set.description.getter();
      v33 = v32;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v6 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v27, v28, "[Translation] Remaining IDs that didn't successfully translate: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v30, -1, -1);
      MEMORY[0x1A1B05CC4](v29, -1, -1);
    }

LABEL_18:
    swift_beginAccess();
    v34 = swift_bridgeObjectRetain();
    v35 = specialized Sequence.compactMap<A>(_:)(v34);
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(v35 + 16);
    v37 = *(_QWORD *)(v8 + 16);
    v38 = __OFADD__(v36, v37);
    v39 = v36 + v37;
    if (!v38)
      break;
    __break(1u);
LABEL_22:
    swift_once();
  }
  v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 & ~(v39 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v40 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v40);
  specialized Array.append<A>(contentsOf:)(v35);
  swift_bridgeObjectRelease();
  v15 = specialized Set.init<A>(_:)(v43);
  swift_bridgeObjectRelease();

LABEL_20:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t Strong;
  id *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  ValueWitnessTable *v17;
  id *v18;
  id v19;
  uint64_t v20;
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  _QWORD v51[6];
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];
  uint64_t v57[3];
  uint64_t v58;

  v9 = *a1;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_7;
  v11 = (id *)(Strong + *(_QWORD *)(*(_QWORD *)Strong + 280));
  swift_beginAccess();
  v12 = *v11;
  swift_release();
  v13 = ActivitySessionClientConnection.shouldTranslateParticipantIDs.getter();
  if ((v13 & 1) == 0)
  {

LABEL_7:
    v20 = swift_bridgeObjectRetain();
    Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64V14CopresenceCore11PubSubTopicC11ParticipantV_G_15GroupActivitiesAMVs5NeverOTg504_s15l429Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n(v20);
    swift_bridgeObjectRelease();
    v22 = specialized Set.init<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39TUConversationUnreliableMessengerConfigCSSSgAA12j73ManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6e3V14f6Core11hiJ23CA_VGcfU11_A0_A15_XEfU_Tf1cn_n);
    goto LABEL_20;
  }
  v58 = MEMORY[0x1E0DEE9E8];
  MEMORY[0x1E0C80A78](v13);
  v51[2] = a3;
  v51[3] = a4;
  v51[4] = a2;
  v51[5] = &v58;
  swift_bridgeObjectRetain();
  v14 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), (uint64_t)v51, v9);
  swift_bridgeObjectRelease();
  v15 = (uint8_t *)specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v58 + 16))
    goto LABEL_18;
  swift_beginAccess();
  v16 = swift_weakLoadStrong();
  v17 = &value witness table for GroupSessionProviderTestingOverrides;
  if (v16)
  {
    v18 = (id *)(v16 + *(_QWORD *)(*(_QWORD *)v16 + 280));
    swift_beginAccess();
    v19 = *v18;
    swift_bridgeObjectRetain();
    v32 = ActivitySessionClientConnection.requestParticipants(for:)();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v57[0] = v54;
      v53 = v26;
      *(_DWORD *)v26 = 136315138;
      v52 = v26 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v27 = Set.description.getter();
      v29 = v28;
      swift_bridgeObjectRelease();
      v56[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v57);
      v17 = &value witness table for GroupSessionProviderTestingOverrides;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30 = v53;
      _os_log_impl(&dword_1A0DB3000, v24, v25, "[Translation] Not translating participants %s since self is nil", v53, 0xCu);
      v31 = v54;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v31, -1, -1);
      MEMORY[0x1A1B05CC4](v30, -1, -1);
    }

    v32 = MEMORY[0x1E0DEE9E8];
  }
  Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo25TUConversationParticipantCG_15GroupActivities0E0Vs5NeverOTg504_s15f381Activities0A7SessionC2id9groupUUID15initiatorHandle8activity14remoteEndpoint10queueLabel16locallyInitiated018lightweightPrimaryO016localParticipant11isFirstJoin12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n(v32, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  v15 = (uint8_t *)specialized Set.union<A>(_:)(Join12publishQueue17distributionCount25unreliableMessengerConfig05sceneC10Identifier12topicManager05audioC16AssertionManager10timestampsACyxG10Foundation0F0V_AXSSxSo013NSXPCListenerK0CSSS2bAA0S0VSbSo012OS_dispatch_L0CSgSiSo39d10Unreliablez148ConfigCSSSgAA12TopicManagerCAA05AudioC16AssertionManager_pAC10TimestampsVyx_GtcfcShyA0_GSDys6UInt64V14CopresenceCore11PubSubTopicCA_VGcfU11_A0_So014D9S0CXEfU1_Shys6UInt64VGTf1cn_n, (uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(_QWORD *)(v58 + 16))
    goto LABEL_18;
  if (v17[32].assignWithTake != (void *)-1)
    goto LABEL_22;
  while (1)
  {
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.default);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v56[0] = v38;
      v54 = (uint64_t)a5;
      *(_DWORD *)v37 = 136315138;
      v52 = v37 + 4;
      swift_bridgeObjectRetain();
      v39 = Set.description.getter();
      v53 = v15;
      v40 = v12;
      v42 = v41;
      swift_bridgeObjectRelease();
      v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v42, v56);
      a5 = (_QWORD *)v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v12 = v40;
      v15 = v53;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v35, v36, "[Translation] Remaining IDs that didn't successfully translate: %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v38, -1, -1);
      MEMORY[0x1A1B05CC4](v37, -1, -1);
    }

LABEL_18:
    swift_beginAccess();
    v43 = swift_bridgeObjectRetain();
    v44 = specialized Sequence.compactMap<A>(_:)(v43);
    swift_bridgeObjectRelease();
    v45 = *(_QWORD *)(v44 + 16);
    v46 = *((_QWORD *)v15 + 2);
    v47 = __OFADD__(v45, v46);
    v48 = v45 + v46;
    if (!v47)
      break;
    __break(1u);
LABEL_22:
    swift_once();
  }
  v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 & ~(v48 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v49 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v49);
  specialized Array.append<A>(contentsOf:)(v44);
  swift_bridgeObjectRelease();
  v22 = specialized Set.init<A>(_:)(v55);
  swift_bridgeObjectRelease();

LABEL_20:
  result = swift_bridgeObjectRelease();
  *a5 = v22;
  return result;
}

uint64_t closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t active;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;

  v20[2] = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((PubSubTopic.Participant.isSaltVerified.getter() & 1) != 0 && (swift_beginAccess(), swift_weakLoadStrong()))
  {
    active = GroupSession.internalActiveParticipants.getter();
    MEMORY[0x1E0C80A78](active);
    v20[-2] = a1;
    specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), active, (uint64_t)v8);
    v20[1] = v3;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for Participant?);
LABEL_9:
      v18 = PubSubTopic.Participant.participantID.getter();
      specialized Set._Variant.insert(_:)(&v21, v18);
      swift_release();
      v15 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v15, 1, v9);
    }
    outlined init with take of Participant((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    swift_bridgeObjectRetain();
    v17 = String.count.getter();
    swift_bridgeObjectRelease();
    if (!v17)
    {
      outlined destroy of Participant((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      goto LABEL_9;
    }
    swift_release();
    outlined init with take of Participant((uint64_t)v12, a3, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v15 = 0;
  }
  else
  {
    v14 = PubSubTopic.Participant.participantID.getter();
    UUID.init(_:)();
    v15 = 0;
    *(_QWORD *)(a3 + *(int *)(v9 + 24)) = v14;
    v16 = (_QWORD *)(a3 + *(int *)(v9 + 20));
    *v16 = 0;
    v16[1] = 0xE000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v15, 1, v9);
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  uint64_t v49;

  v47 = a2;
  v48 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Participant();
  v9 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v46 = v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v41 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v40 = (uint64_t)&v39 - v12;
  v13 = type metadata accessor for PubSubTopic.Participant();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - v18;
  v20 = *(_QWORD *)(a3 + 64);
  v43 = a3 + 64;
  v21 = 1 << *(_BYTE *)(a3 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v44 = (unint64_t)(v21 + 63) >> 6;
  v49 = a3;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  v42 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v25 >= v44)
      goto LABEL_32;
    v29 = *(_QWORD *)(v43 + 8 * v25);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v19, *(_QWORD *)(v49 + 56) + *(_QWORD *)(v14 + 72) * v27, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v19, v13);
    v48(v17);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      v38 = v42;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v38;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v7, 1, v45) == 1)
    {
      result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for Participant?);
    }
    else
    {
      v31 = v40;
      outlined init with take of Participant((uint64_t)v7, v40, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      outlined init with take of Participant(v31, v41, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
      v33 = *(_QWORD *)(v42 + 16);
      v32 = *(_QWORD *)(v42 + 24);
      v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        v39 = v33 + 1;
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v42);
        v34 = v39;
        v42 = v37;
      }
      v35 = v41;
      v36 = v42;
      *(_QWORD *)(v42 + 16) = v34;
      result = outlined init with take of Participant(v35, v36+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v33, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    }
  }
  v30 = v25 + 1;
  if (v25 + 1 >= v44)
    goto LABEL_32;
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 2;
  if (v25 + 2 >= v44)
    goto LABEL_32;
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 3;
  if (v25 + 3 >= v44)
    goto LABEL_32;
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 4;
  if (v25 + 4 >= v44)
  {
LABEL_32:
    v38 = v42;
    goto LABEL_33;
  }
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v25 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v44)
      goto LABEL_32;
    v29 = *(_QWORD *)(v43 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(unint64_t, char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *);
  uint64_t v50;
  uint64_t v51;

  v48 = a2;
  v49 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v51 - 8);
  v8 = MEMORY[0x1E0C80A78](v51);
  v43 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)&v39 - v10;
  v11 = type metadata accessor for Participant();
  v47 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - v15;
  v17 = *(_QWORD *)(a3 + 56);
  v45 = a3 + 56;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v21 = a3;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v44 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v23++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v46)
      goto LABEL_32;
    v27 = *(_QWORD *)(v45 + 8 * v23);
    if (!v27)
      break;
LABEL_18:
    v20 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_19:
    outlined init with copy of Participant(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v47 + 72) * v25, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v49(v14);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v38 = v44;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v38;
    }
    outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v7, 1, v51) == 1)
    {
      result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v41 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
      v29 = v51;
      v41(v42, v7, v51);
      v30 = v29;
      v31 = (uint64_t (*)(unint64_t, char *, uint64_t))v41;
      v41(v43, v42, v30);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
      v33 = *(_QWORD *)(v44 + 16);
      v32 = *(_QWORD *)(v44 + 24);
      v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        v39 = *(_QWORD *)(v44 + 16);
        v40 = v33 + 1;
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v44);
        v33 = v39;
        v34 = v40;
        v44 = v37;
      }
      v35 = v43;
      v36 = v44;
      *(_QWORD *)(v44 + 16) = v34;
      result = v31(v36+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v33, v35, v51);
    }
  }
  v28 = v23 + 1;
  if (v23 + 1 >= v46)
    goto LABEL_32;
  v27 = *(_QWORD *)(v45 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v28 = v23 + 2;
  if (v23 + 2 >= v46)
    goto LABEL_32;
  v27 = *(_QWORD *)(v45 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v28 = v23 + 3;
  if (v23 + 3 >= v46)
    goto LABEL_32;
  v27 = *(_QWORD *)(v45 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v28 = v23 + 4;
  if (v23 + 4 >= v46)
  {
LABEL_32:
    v38 = v44;
    goto LABEL_33;
  }
  v27 = *(_QWORD *)(v45 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v23 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v46)
      goto LABEL_32;
    v27 = *(_QWORD *)(v45 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for Participant();
  v30 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v27 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(a1 + 56);
  v28 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  v31 = a1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v17 = MEMORY[0x1E0DEE9D8];
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v16 << 6); ; i = __clz(__rbit64(v21)) + (v16 << 6))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * i);
    UUID.init(_:)();
    *(_QWORD *)&v8[*(int *)(v2 + 24)] = v23;
    v24 = &v8[*(int *)(v2 + 20)];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0xE000000000000000;
    outlined init with take of Participant((uint64_t)v8, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v10, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v26 = *(_QWORD *)(v17 + 16);
    v25 = *(_QWORD *)(v17 + 24);
    if (v26 >= v25 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v17);
    *(_QWORD *)(v17 + 16) = v26 + 1;
    result = outlined init with take of Participant((uint64_t)v5, v17+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v26, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v14)
      goto LABEL_4;
LABEL_5:
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v29)
      goto LABEL_27;
    v21 = *(_QWORD *)(v28 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v29)
        goto LABEL_27;
      v21 = *(_QWORD *)(v28 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v29)
          goto LABEL_27;
        v21 = *(_QWORD *)(v28 + 8 * v16);
        if (!v21)
        {
          v16 = v20 + 3;
          if (v20 + 3 >= v29)
            goto LABEL_27;
          v21 = *(_QWORD *)(v28 + 8 * v16);
          if (!v21)
            break;
        }
      }
    }
LABEL_20:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 4;
  if (v22 >= v29)
  {
LABEL_27:
    swift_release();
    return v17;
  }
  v21 = *(_QWORD *)(v28 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v29)
      goto LABEL_27;
    v21 = *(_QWORD *)(v28 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t *__return_ptr, char *);

  v36 = a1;
  v5 = type metadata accessor for Participant();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  v12 = *(_QWORD *)(a3 + 56);
  v32 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v33 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v17 >= v33)
      goto LABEL_31;
    v21 = *(_QWORD *)(v32 + 8 * v17);
    if (!v21)
      break;
LABEL_18:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_19:
    outlined init with copy of Participant(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * v19, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    outlined init with take of Participant((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v36(&v34, v9);
    if (v3)
    {
      outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v27 = v31;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v27;
    }
    result = outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if ((v35 & 1) == 0)
    {
      v30 = v34;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v31 = (_QWORD *)result;
      }
      v24 = v31[2];
      v23 = v31[3];
      v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        v28 = v31[2];
        v29 = v24 + 1;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v31);
        v24 = v28;
        v25 = v29;
        v31 = (_QWORD *)result;
      }
      v26 = v31;
      v31[2] = v25;
      v26[v24 + 4] = v30;
    }
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v33)
    goto LABEL_31;
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 2;
  if (v17 + 2 >= v33)
    goto LABEL_31;
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 3;
  if (v17 + 3 >= v33)
    goto LABEL_31;
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 4;
  if (v17 + 4 >= v33)
  {
LABEL_31:
    v27 = v31;
    goto LABEL_32;
  }
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
  {
LABEL_17:
    v17 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v33)
      goto LABEL_31;
    v21 = *(_QWORD *)(v32 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  uint64_t v26;

  v4 = v3;
  v5 = a3;
  v26 = MEMORY[0x1E0DEE9D8];
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v25[1];
    v23 = v25[2];
    v7 = v25[3];
    v8 = v25[4];
    v9 = v25[5];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    v17 = __CocoaSet.Iterator.next()();
    if (!v17)
      goto LABEL_39;
    v24 = v17;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v18 = (id)v25[0];
    swift_unknownObjectRelease();
    v16 = v8;
    v14 = v9;
    if (!v18)
      goto LABEL_39;
LABEL_28:
    v25[0] = v18;
    a1(&v24, v25);

    if (v4)
    {
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_bridgeObjectRelease();
      return;
    }
    if (v24)
    {
      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_27:
    v18 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    if (!v18)
      goto LABEL_39;
    goto LABEL_28;
  }
  v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v22)
      goto LABEL_39;
    v19 = *(_QWORD *)(v23 + 8 * v16);
    if (!v19)
    {
      v20 = v8 + 2;
      if (v8 + 2 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
        goto LABEL_25;
      v20 = v8 + 3;
      if (v8 + 3 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
        goto LABEL_25;
      v20 = v8 + 4;
      if (v8 + 4 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
      {
LABEL_25:
        v16 = v20;
      }
      else
      {
        v16 = v8 + 5;
        if (v8 + 5 >= v22)
          goto LABEL_39;
        v19 = *(_QWORD *)(v23 + 8 * v16);
        if (!v19)
        {
          v21 = v8 + 6;
          while (v22 != v21)
          {
            v19 = *(_QWORD *)(v23 + 8 * v21++);
            if (v19)
            {
              v16 = v21 - 1;
              goto LABEL_26;
            }
          }
LABEL_39:
          outlined consume of [AnyHashable : Any].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    v14 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  v6 = a1;
  v7 = a1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v8, v9, a3, v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    specialized GroupSession.invalidate(reason:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  v8 = a1;
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v18[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v10, v11, a5, v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    GroupSession.invalidate(reason:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      aBlock[0] = v8;
      *(_DWORD *)v7 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        v9 = String.init<A>(reflecting:)();
        v11 = v10;
      }
      else
      {
        v11 = 0xE300000000000000;
        v9 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Requesting encryption-keys for participantIDs=%s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v12 = *(NSObject **)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 288));
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v3;
    *(_QWORD *)(v13 + 24) = a1;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = partial apply for specialized closure #1 in GroupSession.requestEncryptionKey(for:);
    *(_QWORD *)(v14 + 24) = v13;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_363;
    v15 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v12, v15);
    _Block_release(v15);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::OpaquePointer_optional v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315138;
      if (a1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        v8 = String.init<A>(reflecting:)();
        v10 = v9;
      }
      else
      {
        v10 = 0xE300000000000000;
        v8 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v4, v5, "Requesting encryption-keys for participantIDs=%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v7, -1, -1);
      MEMORY[0x1A1B05CC4](v6, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v11.value._rawValue = a1;
    GroupSession.requestEncryptionKey(for:)(v11);
    return swift_release();
  }
  return result;
}

uint64_t *GroupSession.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock[9];

  v1 = v0;
  v43 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.client);
  swift_retain();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = GroupSession.description.getter();
    aBlock[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Deinit groupSession %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

    swift_release();
  }
  v15 = (uint64_t *)((char *)v0 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  v16 = *v15;
  if (*v15)
  {
    aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.deinit;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_95;
    v17 = _Block_copy(aBlock);
    swift_retain_n();
    static DispatchQoS.unspecified.getter();
    v44 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v18 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1A1B04D7C](0, v7, v4, v17);
    _Block_release(v17);
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v4, v18);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v40);
    swift_release();
  }
  v19 = (id *)((char *)v0 + *(_QWORD *)(*v0 + 280));
  swift_beginAccess();
  v20 = *v19;
  dispatch thunk of XPCClient.destroyConnection()();

  outlined destroy of Participant((uint64_t)v1 + direct field offset for GroupSession.initiator, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  swift_release();
  swift_release();
  v21 = (uint64_t)v1 + direct field offset for GroupSession.id;
  v22 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(uint64_t *)((char *)v1 + direct field offset for GroupSession.receivedDataHandler));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v23 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  v24 = *(_QWORD *)(v43 + 80);
  v25 = *(_QWORD *)(v43 + 88);
  type metadata accessor for GroupSession.State(255, v24, v25, v26);
  v27 = type metadata accessor for Published();
  v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
  v28(v23, v27);
  v29 = (uint64_t)v1 + *(_QWORD *)(*v1 + 216);
  v30 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v31 = (uint64_t)v1 + *(_QWORD *)(*v1 + 224);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>);
  v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8);
  v33(v31, v32);
  swift_bridgeObjectRelease();
  v34 = (uint64_t)v1 + *(_QWORD *)(*v1 + 240);
  v36 = type metadata accessor for GroupSession.Timestamps(0, v24, v25, v35);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v34, v36);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v1 + *(_QWORD *)(*v1 + 312));
  swift_release();
  swift_release();
  v33((uint64_t)v1 + *(_QWORD *)(*v1 + 344), v32);
  v28((uint64_t)v1 + *(_QWORD *)(*v1 + 352), v27);
  return v1;
}

void closure #1 in GroupSession.deinit(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  (*(void (**)(void))(**(_QWORD **)(a1
                                  + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                    + 512))();
  if (one-time initialization token for playback != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.playback);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A0DB3000, oslog, v2, "Cleaned up playback syncer in deinit", v3, 2u);
    MEMORY[0x1A1B05CC4](v3, -1, -1);
  }

}

uint64_t GroupSession.__deallocating_deinit()
{
  return GroupSession.__deallocating_deinit((void (*)(void))GroupSession.deinit);
}

Swift::Void __swiftcall GroupSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t aBlock[6];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Application called join on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release();
  }
  v8 = *(NSObject **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 288));
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in GroupSession.join();
  *(_QWORD *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_102;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
}

uint64_t closure #1 in GroupSession.join()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_signpost_type_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint8_t *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - v7;
  if (one-time initialization token for groupSession != -1)
    swift_once();
  v9 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v9, (uint64_t)static Signposts.groupSession);
  UUID.uint64Value.getter();
  OSSignpostID.init(_:)();
  v10 = OSSignposter.logHandle.getter();
  v11 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v6, v8, v2);
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v10, v11, v14, "group-session-join", "", v13, 2u);
    MEMORY[0x1A1B05CC4](v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {

    v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  }
  v12(v6, v8, v2);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v15 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 328)) = v15;
  swift_release();
  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v17 = objc_msgSend(v16, sel_opaqueSessionID);

  MEMORY[0x1E0C80A78](v18);
  *(&v20 - 2) = a1;
  *((_DWORD *)&v20 - 2) = v17;
  *((_BYTE *)&v20 - 4) = 0;
  return GroupSession.invalidationBlock(execute:)((uint64_t (*)(void))partial apply for closure #1 in closure #1 in GroupSession.join());
}

void closure #1 in closure #1 in GroupSession.join()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id *v10;
  id v11;
  void *v12;
  ValueMetadata *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  int v28;
  char v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD **)a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (id *)(a1 + v5[35]);
  swift_beginAccess();
  v11 = *v10;
  v12 = (void *)XPCClient.queue.getter();

  v27 = a1;
  v28 = a2;
  v29 = BYTE4(a2) & 1;
  OS_dispatch_queue.sync<A>(execute:)();

  if (!v2)
  {
    v13 = (ValueMetadata *)v5[10];
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = (*(uint64_t (**)(uint64_t))(v5[11] + 40))(v14);
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.default);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_14;
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "Not creating AVAudioSession because ScreenSharing doesn't support it";
    }
    else
    {
      if (v13 != &type metadata for StaticGroupActivity)
      {
        v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16);
        v21(v9, a1 + direct field offset for GroupSession.id, v6);
        outlined init with copy of AudioSessionAssertionManager(a1 + *(_QWORD *)(*(_QWORD *)a1 + 312), (uint64_t)v30);
        type metadata accessor for AVAudioSessionAssertion();
        v22 = swift_allocObject();
        v21((_BYTE *)(v22 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id), (uint64_t)v9, v6);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v30, v22 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
        v23 = v31;
        v24 = v32;
        __swift_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 8))(v9, v23, v24);
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
        *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 320)) = v22;
        swift_release();
        return;
      }
      if (one-time initialization token for default != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.default);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_14;
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "Not creating AVAudioSession because static group activities don't support it";
    }
    _os_log_impl(&dword_1A0DB3000, v17, v18, v20, v19, 2u);
    MEMORY[0x1A1B05CC4](v19, -1, -1);
LABEL_14:

  }
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  v3 = (void **)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v4 = *v3;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = v4;
  swift_retain();
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();

  swift_release();
  swift_beginAccess();
  v7 = *(void **)(v2 + 16);
  if (v7)
  {
    v8 = v7;
    swift_willThrow();
  }
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  NSNumber v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v6 = *a1;
  if ((a2 & 0x100000000) != 0)
    v7.super.super.isa = 0;
  else
    v7.super.super.isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v10[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join();
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed CPDataCryptor?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_466;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_joinWithAudioSessionID_completion_, v7.super.super.isa, v9);
  _Block_release(v9);

}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27[4];

  if (a2)
  {
    v7 = *a3;
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = (void **)(a4 + 16);
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_retain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      *(_DWORD *)v12 = 136315138;
      v26 = (uint64_t)a3;
      v27[0] = v13;
      v15 = type metadata accessor for GroupSession(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v14);
      v16 = >> prefix<A>(_:)((uint64_t)&v26, v15);
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Error joining session %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v13, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    v23 = *v8;
    *v8 = a2;
    v24 = a2;

  }
  else
  {
    v18 = *(_QWORD **)((char *)a3 + direct field offset for GroupSession.linkManager);
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v20 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x170);
    v21 = swift_unknownObjectRetain();
    v22 = v20(v21);
    v25 = (id)(*(uint64_t (**)(uint64_t))((*v19 & *v18) + 0x230))(v22);
    GroupSession.logAttachmentEvent(report:reportEvent:)(v25, 0xD000000000000025, 0x80000001A0F19830);

  }
}

uint64_t GroupSession.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized GroupSession.logAttachmentEvent(report:reportEvent:)(a1, a2, a3, (uint64_t)&unk_1E44FB198, (uint64_t)partial apply for closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:), (uint64_t)&block_descriptor_108);
}

uint64_t specialized GroupSession.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v25 = a5;
  v26 = a6;
  v7 = v6;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v14 - 8);
  v28 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (id *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 280));
  swift_beginAccess();
  v18 = *v17;
  v19 = (void *)XPCClient.queue.getter();

  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v7;
  v20[3] = a2;
  v20[4] = a3;
  v20[5] = a1;
  aBlock[4] = v25;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v26;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = a1;
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v16, v13, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed CPDataCryptor?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

id closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v20[3];

  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_retain();
  v6 = a1;
  swift_retain();
  v7 = a1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v20[0] = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = GroupSession.description.getter();
    v14 = v13;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v8, v9, "%s connection error %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_beginAccess();
  v18 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;

  return a1;
}

uint64_t GroupSession.invalidationBlock(execute:)(uint64_t (*a1)(void))
{
  return a1();
}

Swift::Void __swiftcall GroupSession.leave()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t aBlock[6];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Application called leave on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release();
  }
  v8 = *(NSObject **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 288));
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in GroupSession.leave();
  *(_QWORD *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_115;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
}

uint64_t closure #1 in closure #1 in GroupSession.leave()(uint64_t a1)
{
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v3 = *v2;
  v4 = XPCClient.queue.getter();

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.leave();
  *(_QWORD *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_450;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 320)) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized closure #1 in GroupSession.capabilities.didset(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void **a1, uint64_t a2)
{
  void *v2;
  void *v3;
  _QWORD v4[6];

  v2 = *a1;
  v4[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave();
  v4[5] = a2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  v4[3] = &block_descriptor_453;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_leaveWithCompletion_, v3);
  _Block_release(v3);
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id *v13;
  id v14;
  uint64_t v15;
  uint64_t v16[4];

  if (a1)
  {
    v4 = *a2;
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v15 = (uint64_t)a2;
      v16[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = >> prefix<A>(_:)((uint64_t)&v15, v4);
      v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v6, v7, "Error leaving session %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v9, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    GroupSession.invalidate(reason:)(a1);
  }
  else
  {
    v12 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)a2
                                                                             + direct field offset for GroupSession.linkManager))
                                       + 0x238))();
    GroupSession.logAttachmentEvent(report:reportEvent:)(v12, 0xD000000000000027, 0x80000001A0F19020);

    v13 = (id *)((char *)a2 + *(_QWORD *)(*a2 + 280));
    swift_beginAccess();
    v14 = *v13;
    dispatch thunk of XPCClient.destroyConnection()();

  }
}

Swift::Void __swiftcall GroupSession.end()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t aBlock[6];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    aBlock[0] = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Application called end on %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release();
  }
  v8 = *(NSObject **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 288));
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in GroupSession.end();
  *(_QWORD *)(v9 + 24) = v0;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_122;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 320)) = 0;
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in GroupSession.end()(uint64_t a1)
{
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v3 = *v2;
  v4 = XPCClient.queue.getter();

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #1 in GroupSession.end();
  *(_QWORD *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_443;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

id closure #1 in closure #1 in closure #1 in GroupSession.end()(id *a1)
{
  return objc_msgSend(*a1, sel_end);
}

Swift::Void __swiftcall GroupSession.requestForegroundPresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v21 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v19 = v5;
    v12 = v11;
    aBlock[0] = v11;
    v20 = v4;
    *(_DWORD *)v10 = 136315138;
    v13 = GroupSession.description.getter();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    v4 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v8, v9, "Application called requestForegroundPresentation on %s", v10, 0xCu);
    swift_arrayDestroy();
    v15 = v12;
    v5 = v19;
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);

  }
  else
  {

    swift_release();
  }
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.requestForegroundPresentation();
  aBlock[5] = v0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_125;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = v21;
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v17, v4, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v5);
  swift_release();
}

uint64_t closure #1 in GroupSession.requestForegroundPresentation()(uint64_t a1)
{
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v3 = *v2;
  v4 = XPCClient.queue.getter();

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in closure #1 in GroupSession.requestForegroundPresentation();
  *(_QWORD *)(v5 + 24) = a1;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_436;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v4, v6);

  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in GroupSession.end()(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

id closure #1 in closure #1 in closure #1 in GroupSession.requestForegroundPresentation()(id *a1)
{
  return objc_msgSend(*a1, sel_requestForegroundPresentation);
}

BOOL GroupSession.hasPendingActivityUpdate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 368)) > 0;
}

uint64_t closure #1 in closure #1 in GroupSession.updateActivity(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnyGroupActivity(0);
  v27 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v27 + 64);
  v9 = MEMORY[0x1E0C80A78](v7);
  v28 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v26 - v10);
  GroupSession.state.getter();
  v12 = v32;
  v30 = 1;
  v31 = v32;
  v13 = *(_QWORD *)(v2 + 88);
  LOBYTE(v2) = static GroupSession.State.== infix(_:_:)(&v31, (void **)&v30);
  outlined consume of GroupSession<A>.State<A>(v12);
  if ((v2 & 1) != 0)
  {
    GroupSession.activity.getter();
    v14 = v29;
    GroupActivity.eraseToAnyGroupActivity()(v3, v13, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (!v14)
    {
      v16 = *(_QWORD *)(*a1 + 368);
      v17 = *(uint64_t *)((char *)a1 + v16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        *(uint64_t *)((char *)a1 + v16) = v19;
        v20 = (uint64_t)v11;
        v21 = (uint64_t)v11;
        v22 = v28;
        outlined init with copy of Participant(v21, v28, type metadata accessor for AnyGroupActivity);
        v23 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        v24 = swift_allocObject();
        outlined init with take of Participant(v22, v24 + v23, type metadata accessor for AnyGroupActivity);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
        swift_allocObject();
        v32 = (void *)Future.init(_:)();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>, (uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>, MEMORY[0x1E0C96108]);
        swift_retain_n();
        Publisher.sinkOnce(_:onError:)();
        swift_release_n();
        swift_release();
        return outlined destroy of Participant(v20, type metadata accessor for AnyGroupActivity);
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *v25 = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = (id *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 280));
  swift_beginAccess();
  v13 = *v12;
  v14 = (void *)XPCClient.queue.getter();

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = v11;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_527;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = v11;
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v10, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  result = swift_release();
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 368);
  v20 = *(_QWORD *)(a2 + v19);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(a2 + v19) = v22;
  return result;
}

void closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v30 - v8;
  v10 = v4[46];
  v11 = *(_QWORD *)(a2 + v10);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    v4 = *a1;
    *(_QWORD *)(a2 + v10) = v13;
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  swift_retain();
  v15 = v4;
  swift_retain();
  v16 = v4;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v20 = 136315394;
    HIDWORD(v30) = v19;
    GroupSession.activity.getter();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v9, 0, 1, v5);
    v21 = >> prefix<A>(_:)((uint64_t)v9, v5);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    v32 = (uint64_t)v4;
    v24 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v25 = String.init<A>(reflecting:)();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v17, BYTE4(v30), "Failed to set activity %s error: %s", (uint8_t *)v20, 0x16u);
    v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v27, -1, -1);
    MEMORY[0x1A1B05CC4](v20, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
  v28 = (void *)swift_allocError();
  *v29 = 3;
  GroupSession.invalidate(reason:)(v28);

}

void specialized closure #1 in GroupSession.updatePublicState()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  void *v23;

  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v2 = (uint64_t)v23;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v23)
  {
    if (v23 == (void *)1)
    {
      if (v22 == (void *)1)
      {
        v2 = 1;
LABEL_14:
        outlined consume of GroupSession<A>.State<A>((id)v2);
        outlined consume of GroupSession<A>.State<A>(v22);
        outlined consume of GroupSession<A>.State<A>((id)v2);
        return;
      }
    }
    else if ((unint64_t)v22 >= 2)
    {
      v17 = v23;
      goto LABEL_14;
    }
  }
  else if (!v22)
  {
    v2 = 0;
    goto LABEL_14;
  }
  outlined copy of GroupSession<A>.State<A>(v23);
  outlined consume of GroupSession<A>.State<A>(v23);
  outlined consume of GroupSession<A>.State<A>(v22);
  outlined consume of GroupSession<A>.State<A>(v23);
  MEMORY[0x1E0C80A78](v3);
  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath);
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v23 != (void *)1)
  {
    outlined consume of GroupSession<A>.State<A>(v23);
    outlined consume of GroupSession<A>.State<A>((id)1);
LABEL_12:
    MEMORY[0x1E0C80A78](v5);
    v14 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v14);
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    v15 = swift_release();
    MEMORY[0x1E0C80A78](v15);
    v16 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v16);
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    return;
  }
  outlined consume of GroupSession<A>.State<A>((id)1);
  outlined consume of GroupSession<A>.State<A>((id)1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1 + direct field offset for GroupSession.linkManager)) + 0x198))(v6, v7, v8, v9, v10, v11, v12, v13);
  if ((v5 & 1) != 0)
    goto LABEL_12;
  v5 = TUSimulatedModeEnabled();
  if ((_DWORD)v5)
    goto LABEL_12;
  if (one-time initialization token for default != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1A0DB3000, v19, v20, "Internal state has joined but waiting for PubSubTopic to subscribe", v21, 2u);
    MEMORY[0x1A1B05CC4](v21, -1, -1);
  }

}

void closure #1 in GroupSession.updatePublicState()(uint64_t a1)
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  char v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;

  GroupSession.internalState.getter();
  v2 = v14;
  v13 = v14;
  GroupSession.state.getter();
  v3 = (void *)v12;
  v11 = v12;
  v4 = static GroupSession.State.== infix(_:_:)(&v13, (void **)&v11);
  outlined consume of GroupSession<A>.State<A>(v3);
  outlined consume of GroupSession<A>.State<A>(v2);
  if ((v4 & 1) == 0)
  {
    GroupSession.internalState.getter();
    v5 = v14;
    v12 = 1;
    v13 = v14;
    v6 = static GroupSession.State.== infix(_:_:)(&v13, (void **)&v12);
    outlined consume of GroupSession<A>.State<A>(v5);
    if ((v6 & 1) == 0
      || ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1
                                                                     + direct field offset for GroupSession.linkManager))
                               + 0x198))() & 1) != 0
      || (TUSimulatedModeEnabled() & 1) != 0)
    {
      GroupSession.internalState.getter();
      GroupSession.state.setter();
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Log.default);
      oslog = Logger.logObject.getter();
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1A0DB3000, oslog, v8, "Internal state has joined but waiting for PubSubTopic to subscribe", v9, 2u);
        MEMORY[0x1A1B05CC4](v9, -1, -1);
      }

    }
  }
}

uint64_t specialized closure #1 in GroupSession.requestEncryptionKey(for:)(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = (void **)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v5 = *v4;
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_retain();
  v7 = XPCClient.queue.getter();

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:);
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_373;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v7, v10);

  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = a1;
  v4 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v5 = *v4;
  v6 = XPCClient.queue.getter();

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:);
  *(_QWORD *)(v8 + 24) = v7;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_476;
  v9 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);

  _Block_release(v9);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(void **a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSArray v12;
  uint64_t v13;

  v3 = *a1;
  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    if (a2)
    {
      v9 = MEMORY[0x1A1B049D4](a2, MEMORY[0x1E0DEE190]);
      v11 = v10;
    }
    else
    {
      v11 = 0xE500000000000000;
      v9 = 0x3E6C696E3CLL;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v5, v6, "Requesting encryption keys for participantIDs=%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);

    if (!a2)
      goto LABEL_10;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a2)
    {
LABEL_10:
      v12.super.isa = 0;
      goto LABEL_11;
    }
  }
  v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
LABEL_11:
  objc_msgSend(v3, sel_requestEncryptionKeysFor_, v12.super.isa);

}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance GroupSession<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall GroupSession.invalidateIfWaiting()()
{
  GroupSession.invalidateIfWaiting()((uint64_t)partial apply for closure #1 in GroupSession.invalidateIfWaiting(), (uint64_t)&block_descriptor_128);
}

void GroupSession.sendData(_:to:reliability:completion:)(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  _DWORD *v29;
  _QWORD v30[4];
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a6;
  v35 = a5;
  v10 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v10);
  v30[2] = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v34 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v42 = (char *)v30 - v16;
  v17 = type metadata accessor for OSSignposter();
  v36 = *(_QWORD *)(v17 - 8);
  v37 = v17;
  MEMORY[0x1E0C80A78](v17);
  v41 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a3;
  v38 = *a4;
  if (one-time initialization token for default != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v32 = v13;
  v33 = v12;
  v39 = v19;
  v30[3] = v10;
  v31 = a2 >> 62;
  if (v23)
  {
    v24 = (_DWORD *)swift_slowAlloc();
    v44 = swift_slowAlloc();
    *v24 = 134218242;
    __asm { BR              X11 }
  }
  outlined consume of Data._Representation(a1, a2);

  swift_release();
  v25 = v41;
  static Signposts.messenger.getter();
  v26 = v42;
  static Signposts.messengerSignpostIdentifier(forPayload:)();
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v27);
  swift_retain_n();
  v28 = (void *)OSSignposter.logHandle.getter();
  static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v34, v26, v12);
    v29 = (_DWORD *)swift_slowAlloc();
    v44 = swift_slowAlloc();
    *v29 = 134218498;
    __asm { BR              X11 }
  }
  swift_release_n();
  outlined consume of Data._Representation(a1, a2);
  swift_release_n();

  outlined consume of Data._Representation(a1, a2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  v44 = v39;
  LOBYTE(v43) = v38;
  LinkManager.sendData(_:to:reliability:completion:)(a1, a2, &v44, (char *)&v43, v35, v40);
}

uint64_t protocol witness for AnyTransportSession.uploadAttachment(id:attachment:developerMetadata:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1, a2, a3, a4);
}

uint64_t GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for UUID();
  v5[24] = v6;
  v5[25] = *(_QWORD *)(v6 - 8);
  v5[26] = swift_task_alloc();
  v7 = type metadata accessor for String.Encoding();
  v5[27] = v7;
  v5[28] = *(_QWORD *)(v7 - 8);
  v5[29] = swift_task_alloc();
  v8 = type metadata accessor for URLResourceValues();
  v5[30] = v8;
  v5[31] = *(_QWORD *)(v8 - 8);
  v5[32] = swift_task_alloc();
  v9 = type metadata accessor for Date();
  v5[33] = v9;
  v5[34] = *(_QWORD *)(v9 - 8);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v10 = type metadata accessor for URL();
  v5[39] = v10;
  v5[40] = *(_QWORD *)(v10 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSession.uploadAttachment(id:attachment:developerMetadata:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65[2];

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = (uint64_t *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, v7, v3);
  outlined copy of Data?(v6, v5);
  outlined copy of Data?(v6, v5);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 320);
  if (v12)
  {
    v16 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 304);
    v18 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    v65[0] = v62;
    *(_DWORD *)v18 = 136315394;
    v9(v17, v13, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
    outlined init with copy of URL?(v17, v16, &demangling cache variable for type metadata for URL?);
    v63 = v11;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
    {
      v19 = 0xE300000000000000;
      v20 = 7104878;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 328);
      v24 = *(_QWORD *)(v0 + 336);
      v26 = *(_QWORD *)(v0 + 312);
      v25 = *(_QWORD *)(v0 + 320);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 32))(v24, *(_QWORD *)(v0 + 296), v26);
      v9(v23, v24, v26);
      v20 = String.init<A>(reflecting:)();
      v19 = v27;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    v28 = *(_QWORD *)(v0 + 344);
    v30 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 320);
    v31 = *(_QWORD *)(v0 + 176);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 304), &demangling cache variable for type metadata for URL?);
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    *(_WORD *)(v18 + 12) = 2080;
    if (v31 >> 60 == 15)
    {
      v32 = 0xE300000000000000;
      v1 = (uint64_t *)(v0 + 144);
      v33 = v63;
      v34 = 7104878;
    }
    else
    {
      v35 = *(_QWORD *)(v0 + 168);
      v36 = *(_QWORD *)(v0 + 176);
      *(_QWORD *)(v0 + 104) = v35;
      *(_QWORD *)(v0 + 112) = v36;
      outlined copy of Data._Representation(v35, v36);
      v34 = String.init<A>(reflecting:)();
      v32 = v37;
      v1 = (uint64_t *)(v0 + 144);
      v33 = v63;
    }
    v39 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v32, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v39, v38);
    outlined consume of Data?(v39, v38);
    _os_log_impl(&dword_1A0DB3000, v10, v33, "Request to upload attachment: %s, developerMetadata: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v62, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);

  }
  else
  {
    v22 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(v15 + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
    outlined consume of Data?(v22, v21);
    outlined consume of Data?(v22, v21);

  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v0 + 184) + direct field offset for GroupSession.topicManager)+ OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags), sel_sharePlayAttachmentLedgerEnabled))
  {
    static Date.now.getter();
    v40 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 352) = v40;
    *v40 = v0;
    v40[1] = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
    return LinkManager.uploadAttachment(id:file:developerMetadata:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 232);
    v44 = *(_QWORD *)(v0 + 216);
    UUID.uuidString.getter();
    static String.Encoding.utf8.getter();
    v45 = String.data(using:allowLossyConversion:)();
    v47 = v46;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 368) = v45;
    *(_QWORD *)(v0 + 376) = v47;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    if (v47 >> 60 == 15)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 192));
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      v50 = os_log_type_enabled(v48, v49);
      v52 = *(_QWORD *)(v0 + 200);
      v51 = *(_QWORD *)(v0 + 208);
      v53 = *(_QWORD *)(v0 + 192);
      if (v50)
      {
        v54 = (uint8_t *)swift_slowAlloc();
        v64 = swift_slowAlloc();
        v65[0] = v64;
        *(_DWORD *)v54 = 136315138;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v55 = dispatch thunk of CustomStringConvertible.description.getter();
        *v1 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
        _os_log_impl(&dword_1A0DB3000, v48, v49, "Failed to convert attachmentID %s to Data", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v64, -1, -1);
        MEMORY[0x1A1B05CC4](v54, -1, -1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v52 + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
      }

      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      swift_allocError();
      *v61 = 2;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v57 = *(_QWORD *)(v0 + 184);
      v58 = *(_QWORD *)(v0 + 160);
      v59 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 384) = v59;
      v59[2] = v57;
      v59[3] = v58;
      v59[4] = v45;
      v59[5] = v47;
      v60 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 392) = v60;
      *v60 = v0;
      v60[1] = GroupSession.uploadAttachment(id:attachment:developerMetadata:);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t inited;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  double *v21;
  double *v22;
  id v23;
  void *v24;
  void *v25;
  _BYTE *v26;
  _BYTE *v27;

  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  v6 = v5;
  Date.timeIntervalSince1970.getter();
  v8 = v7;
  v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v2, v3);
  v9(v1, v3);
  v10 = *(_QWORD *)(v0 + 360);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A0F0EAB0;
  v12 = (void *)*MEMORY[0x1E0C99998];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99998];
  v13 = v12;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  if (v10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 240);
    swift_bridgeObjectRelease();
    v17 = URLResourceValues.fileSize.getter();
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    if ((v19 & 1) == 0)
    {
      v20 = *(_QWORD *)(v0 + 184);
      v21 = (double *)(v20 + direct field offset for GroupSession.attachmentUploadBytes);
      swift_beginAccess();
      *v21 = *v21 + (double)v17;
      v22 = (double *)(v20 + direct field offset for GroupSession.attachmentUploadTime);
      swift_beginAccess();
      *v22 = v6 - v8 + *v22;
      v23 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
      v24 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
      GroupSession.logAttachmentEvent(report:reportEvent:)(v24, 0xD000000000000017, 0x80000001A0F190B0);

    }
    if (*(_QWORD *)(v0 + 360))
    {
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v25 = (void *)swift_allocError();
      *v26 = 10;
      GroupSession.invalidate(reason:)(v25);

      swift_allocError();
      *v27 = 10;
      swift_willThrow();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined consume of Data?(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t inited;
  void *v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double *v14;
  double *v15;
  id v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  _BYTE *v20;

  v1 = *(void **)(v0 + 360);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
  *(_QWORD *)(v0 + 120) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0 && *(_BYTE *)(v0 + 408) == 1)
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A0F0EAB0;
    v4 = (void *)*MEMORY[0x1E0C99998];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99998];
    v5 = v4;
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for NSURLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    v8 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    swift_bridgeObjectRelease();
    v10 = URLResourceValues.fileSize.getter();
    v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    if ((v12 & 1) == 0)
    {
      v13 = *(_QWORD *)(v0 + 184);
      v14 = (double *)(v13 + direct field offset for GroupSession.attachmentUploadBytes);
      swift_beginAccess();
      *v14 = *v14 + (double)v10;
      v15 = (double *)(v13 + direct field offset for GroupSession.attachmentUploadTime);
      swift_beginAccess();
      *v15 = *v15 + 0.0;
      v16 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
      v17 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
      GroupSession.logAttachmentEvent(report:reportEvent:)(v17, 0xD000000000000017, 0x80000001A0F190B0);

    }
    if (*(_QWORD *)(v0 + 360))
    {
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      v18 = (void *)swift_allocError();
      *v19 = 10;
      GroupSession.invalidate(reason:)(v18);

      swift_allocError();
      *v20 = 10;
      swift_willThrow();
    }
  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined consume of Data?(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return GroupSession.downloadAttachment(_:)(a1, a2);
}

uint64_t GroupSession.downloadAttachment(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[17] = swift_task_alloc();
  v4 = type metadata accessor for URLResourceValues();
  v3[18] = v4;
  v3[19] = *(_QWORD *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v3[21] = v5;
  v3[22] = *(_QWORD *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v6 = type metadata accessor for Date();
  v3[25] = v6;
  v3[26] = *(_QWORD *)(v6 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  v3[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSession.downloadAttachment(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(int *)(*(_QWORD *)(v0 + 232) + 48);
  *(_DWORD *)(v0 + 272) = v2;
  URL.init(string:)();
  *(_QWORD *)(v1 + v2) = 0;
  static Date.now.getter();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v3;
  *v3 = v0;
  v3[1] = GroupSession.downloadAttachment(_:);
  return LinkManager.fetchAttachment(attachmentID:)(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  int v14;
  id v15;
  void *v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  uint64_t inited;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  double *v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(int *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v3, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  *(_QWORD *)(v3 + v2) = v1;
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  Date.timeIntervalSince1970.getter();
  v8 = v7;
  Date.timeIntervalSince1970.getter();
  v10 = v8 - v9;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5))
  {
    v11 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
    v13(*(_QWORD *)(v0 + 216), v12);
    v13(v11, v12);
LABEL_3:
    v14 = 0;
    goto LABEL_4;
  }
  v24 = *(void **)(v0 + 256);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 16))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 168));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A0F0EAB0;
  v26 = (void *)*MEMORY[0x1E0C99998];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99998];
  v27 = v26;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  v28 = v24;
  v30 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 224);
  v31 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 176);
  v33 = *(_QWORD *)(v0 + 184);
  v34 = *(_QWORD *)(v0 + 168);
  if (v28)
  {
    v35 = (id *)(v0 + 104);
    v36 = *(_QWORD *)(v0 + 208);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    v37 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v37(v30, v31);
    v37(v29, v31);
    *(_QWORD *)(v0 + 104) = v28;
    v38 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0 || *(_BYTE *)(v0 + 276) != 1)
    {

      goto LABEL_15;
    }

    v14 = 1;
  }
  else
  {
    v46 = *(_QWORD *)(v0 + 160);
    v54 = *(_QWORD *)(v0 + 152);
    v55 = *(_QWORD *)(v0 + 144);
    v56 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    swift_bridgeObjectRelease();
    v47 = URLResourceValues.fileSize.getter();
    v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v46, v55);
    v50 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v50(v30, v31);
    v50(v29, v31);
    if ((v49 & 1) != 0)
      goto LABEL_3;
    v51 = *(_QWORD *)(v0 + 128);
    v52 = (double *)(v51 + direct field offset for GroupSession.attachmentDownloadBytes);
    swift_beginAccess();
    *v52 = *v52 + (double)v47;
    v53 = (double *)(v51 + direct field offset for GroupSession.attachmentDownloadTime);
    swift_beginAccess();
    v14 = 0;
    *v53 = v10 + *v53;
  }
LABEL_4:
  v15 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  v16 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v16, 0xD000000000000019, 0x80000001A0F190D0);
  if (v14)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    v17 = (void *)swift_allocError();
    *v18 = 10;
    GroupSession.invalidate(reason:)(v17);

    swift_allocError();
    *v19 = 10;
LABEL_8:
    swift_willThrow();

LABEL_15:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 240), &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 136);
  outlined init with copy of URL?(*(_QWORD *)(v0 + 240), v22, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *v23 = 11;
    goto LABEL_8;
  }
  v39 = *(_QWORD *)(v0 + 240);
  v41 = *(_QWORD *)(v0 + 168);
  v40 = *(_QWORD *)(v0 + 176);
  v42 = *(_QWORD *)(v0 + 136);
  v43 = *(_QWORD *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v43, v42, v41);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v39, &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
  v1 = *(void **)(v0 + 256);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast() && *(_BYTE *)(v0 + 276) == 1)
  {

    v3 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    v4 = (void *)AttachmentDataReport.init(isUpload:assetTotalSize:isServerBlocked:endToEndAttachmentLatency:loadTime:)();
    GroupSession.logAttachmentEvent(report:reportEvent:)(v4, 0xD000000000000019, 0x80000001A0F190D0);
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    v5 = (void *)swift_allocError();
    *v6 = 10;
    GroupSession.invalidate(reason:)(v5);

    swift_allocError();
    *v7 = 10;
    swift_willThrow();

  }
  else
  {

  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 240), &demangling cache variable for type metadata for (fileURL: URL?, sentTime: Double));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSession.downloadAttachment(_:)(double a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 256) = v1;
  swift_task_dealloc();
  if (!v1)
    *(double *)(v4 + 264) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AnyTransportSession.fetchMetadata(_:) in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t GroupSession.fetchMetadata(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t GroupSession.fetchMetadata(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = GroupSession.fetchMetadata(_:);
  return LinkManager.fetchAttachmentMetadata(attachmentID:)(*(_QWORD *)(v0 + 16));
}

uint64_t GroupSession.fetchMetadata(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return GroupSession.removeAttachment(id:)(a1);
}

uint64_t protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t GroupSession.removeAttachment(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSession.removeAttachment(id:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = v0[3];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[5];
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = v0[6];
  v9 = v0[7];
  v11 = v0[5];
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A0DB3000, v6, v7, "Request to remove attachment: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(v0[7], v0[5]);
  }

  v15 = (_QWORD *)swift_task_alloc();
  v0[8] = v15;
  *v15 = v0;
  v15[1] = GroupSession.removeAttachment(id:);
  return LinkManager.removeAttachment(id:)(v0[3]);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void (*GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(void *a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10))(char *, uint64_t, uint64_t)
{
  void (*v11)(char *, uint64_t, uint64_t);

  v11 = specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return v11;
}

uint64_t specialized GroupSession.Timestamps.init(activitySession:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char **p_name;
  id v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v29 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - v15;
  p_name = &SystemCoordinator.name;
  v18 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = objc_msgSend(a1, sel_localCreationTimestamp);
  if (!v19)
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v22(v9, 1, 1, v10);
    goto LABEL_5;
  }
  v20 = v19;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v14, v10);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v22(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    p_name = (char **)(&SystemCoordinator + 24);
LABEL_5:
    v23 = objc_msgSend(a1, p_name[399]);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
    v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    goto LABEL_7;
  }
  v21(v16, v9, v10);
LABEL_7:
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  v21((char *)(a2 + *(int *)(v24 + 36)), v16, v10);
  v25 = objc_msgSend(a1, sel_permittedJoinTimestamp);
  if (v25)
  {
    v26 = v25;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = 0;
  }
  else
  {
    v27 = 1;
  }

  v22(v7, v27, 1, v10);
  return outlined init with take of Date?((uint64_t)v7, a2 + *(int *)(v24 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.Timestamps.init(activitySession:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char **p_name;
  id v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v32 = a2;
  v33 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v32 - v17;
  p_name = &SystemCoordinator.name;
  v20 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = objc_msgSend(a1, sel_localCreationTimestamp);
  if (!v21)
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v24(v11, 1, 1, v12);
    goto LABEL_5;
  }
  v22 = v21;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v11, v16, v12);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v24(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    p_name = (char **)(&SystemCoordinator + 24);
LABEL_5:
    v25 = objc_msgSend(a1, p_name[399], v32, v33);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
    v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    goto LABEL_7;
  }
  v23(v18, v11, v12);
LABEL_7:
  v27 = type metadata accessor for GroupSession.Timestamps(0, v32, v33, v26);
  v23((char *)(a4 + *(int *)(v27 + 36)), v18, v12);
  v28 = objc_msgSend(a1, sel_permittedJoinTimestamp);
  if (v28)
  {
    v29 = v28;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v30 = 0;
  }
  else
  {
    v30 = 1;
  }

  v24(v9, v30, 1, v12);
  return outlined init with take of Date?((uint64_t)v9, a4 + *(int *)(v27 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.__allocating_init(activitySession:publishQueue:)(uint64_t *a1, void *a2)
{
  uint64_t v2;

  v2 = specialized GroupSession.__allocating_init(activitySession:publishQueue:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t GroupSession.Timestamps.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = type metadata accessor for Date();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(a6, a1, v12);
  v15 = type metadata accessor for GroupSession.Timestamps(0, a3, a5, v14);
  v16 = a1 + *(int *)(v15 + 36);
  v18 = type metadata accessor for GroupSession.Timestamps(0, a2, a4, v17);
  v13(a6 + *(int *)(v18 + 36), v16, v12);
  return outlined init with take of Date?(a1 + *(int *)(v15 + 40), a6 + *(int *)(v18 + 40), &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.sendResource(atURL:to:metadata:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  dispatch_queue_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  id v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  dispatch_queue_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  dispatch_queue_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t aBlock[6];
  uint64_t v76[4];

  v7 = v6;
  v72 = a4;
  v73 = a6;
  v70 = a5;
  v71 = a3;
  v66 = *(dispatch_queue_t *)v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v61 - v14;
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v74 = (char *)&v61 - v22;
  v68 = v23;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v61 - v24;
  v69 = *a2;
  if (one-time initialization token for default != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.default);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v27(v25, a1, v16);
  swift_retain_n();
  v28 = Logger.logObject.getter();
  v65 = static os_log_type_t.info.getter();
  v29 = os_log_type_enabled(v28, (os_log_type_t)v65);
  v67 = v27;
  if (v29)
  {
    v63 = a1;
    v30 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    aBlock[0] = v62;
    *(_DWORD *)v30 = 136315394;
    v27(v15, (uint64_t)v25, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    outlined init with copy of URL?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
    v64 = v7;
    if (v31 == 1)
    {
      v32 = 0xE300000000000000;
      v33 = 7104878;
    }
    else
    {
      v35 = v74;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v74, v13, v16);
      v27(v20, (uint64_t)v35, v16);
      v33 = String.init<A>(reflecting:)();
      v32 = v36;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v35, v16);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
    v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
    *(_WORD *)(v30 + 12) = 2080;
    v37 = v64;
    v76[0] = v64;
    v34 = v66;
    v38 = >> prefix<A>(_:)((uint64_t)v76, (uint64_t)v66);
    v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, aBlock);
    v7 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v28, (os_log_type_t)v65, "Request to send resource at URL %s over %s ", (uint8_t *)v30, 0x16u);
    v40 = v62;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v40, -1, -1);
    MEMORY[0x1A1B05CC4](v30, -1, -1);

    a1 = v63;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);

    swift_release_n();
    v34 = v66;
  }
  v41 = v16;
  v42 = (id *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 280));
  swift_beginAccess();
  v43 = *v42;
  v66 = (dispatch_queue_t)XPCClient.queue.getter();

  v44 = v74;
  v67(v74, a1, v41);
  v45 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v46 = (v68 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = v17;
  v48 = v7;
  v49 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  v50 = (char *)swift_allocObject();
  *(v50 + 2) = v34[10];
  *(v50 + 3) = v34[11];
  *((_QWORD *)v50 + 4) = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v50[v45], v44, v41);
  v51 = v70;
  *(_QWORD *)&v50[v46] = v69;
  v52 = (uint64_t *)&v50[v49];
  v54 = v71;
  v53 = v72;
  *v52 = v71;
  v52[1] = v53;
  v55 = &v50[(v49 + 23) & 0xFFFFFFFFFFFFFFF8];
  v56 = v73;
  *(_QWORD *)v55 = v51;
  *((_QWORD *)v55 + 1) = v56;
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:);
  *(_QWORD *)(v57 + 24) = v50;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v57;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_147;
  v58 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Data._Representation(v54, v53);
  swift_retain();
  swift_retain();
  swift_release();
  v59 = v66;
  dispatch_sync(v66, v58);

  _Block_release(v58);
  LOBYTE(v59) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v59 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

void closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSSet v41;
  NSData v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  void (*v58)(uint64_t, void *);
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v48 = a7;
  v62 = type metadata accessor for Participant();
  v55 = *(_QWORD *)(v62 - 8);
  v15 = MEMORY[0x1E0C80A78](v62);
  v54 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v44 - v17;
  v49 = *a1;
  v18 = objc_allocWithZone(MEMORY[0x1E0DBD380]);
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v22 = objc_msgSend(v18, sel_initWithURL_withExtensionType_, v20, 0);

  if (!a3)
  {
    v39 = GroupSession.activeParticipants.getter();
    v40 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:), a4, v39);
    swift_bridgeObjectRelease();
    specialized Set.init<A>(_:)(v40);
    swift_bridgeObjectRelease();
    v41.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42.super.isa = Data._bridgeToObjectiveC()().super.isa;
    v60 = v48;
    v61 = a8;
    aBlock = MEMORY[0x1E0C809B0];
    v57 = 1107296256;
    v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    v59 = &block_descriptor_334;
    v43 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v49, sel_sendResourceAtURL_to_metadata_completion_, v22, v41.super.isa, v42.super.isa, v43);
LABEL_16:

    _Block_release(v43);
    return;
  }
  v51 = a5;
  v52 = a6;
  v47 = v22;
  v23 = *(_QWORD *)(a3 + 16);
  v24 = MEMORY[0x1E0DEE9D8];
  if (!v23)
  {
LABEL_15:
    specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    v41.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v42.super.isa = Data._bridgeToObjectiveC()().super.isa;
    v60 = v48;
    v61 = a8;
    aBlock = MEMORY[0x1E0C809B0];
    v57 = 1107296256;
    v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    v59 = &block_descriptor_331;
    v43 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v22 = v47;
    objc_msgSend(v49, sel_sendResourceAtURL_to_metadata_completion_, v47, v41.super.isa, v42.super.isa, v43);
    goto LABEL_16;
  }
  v45 = a8;
  v46 = v8;
  aBlock = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
  v25 = specialized Set.startIndex.getter(a3);
  v27 = v26;
  v29 = v28 & 1;
  v50 = a3 + 56;
  while ((v25 & 0x8000000000000000) == 0 && v25 < 1 << *(_BYTE *)(a3 + 32))
  {
    if (((*(_QWORD *)(v50 + (((unint64_t)v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      goto LABEL_18;
    if (*(_DWORD *)(a3 + 36) != (_DWORD)v27)
      goto LABEL_19;
    v30 = v53;
    outlined init with copy of Participant(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v55 + 72) * v25, v53, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v31 = v30;
    v32 = v54;
    outlined init with take of Participant(v31, v54, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v33 = *(_QWORD *)(v32 + *(int *)(v62 + 24));
    outlined destroy of Participant(v32, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v24 = aBlock;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
      v24 = aBlock;
    }
    v35 = *(_QWORD *)(v24 + 16);
    v34 = *(_QWORD *)(v24 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v24 = aBlock;
    }
    *(_QWORD *)(v24 + 16) = v35 + 1;
    *(_QWORD *)(v24 + 8 * v35 + 32) = v33;
    v36 = specialized _NativeSet.index(after:)(v25, v27, v29 & 1, a3);
    v25 = v36;
    v27 = v37;
    v29 = v38 & 1;
    if (!--v23)
    {
      outlined consume of Set<Participant>.Index._Variant(v36, v37, v38 & 1);
      a8 = v45;
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Participant();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + *(int *)(v7 + 24));
  outlined init with copy of Participant(*(_QWORD *)(a2 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v11 = *(_QWORD *)&v9[*(int *)(v6 + 24)];
  result = outlined destroy of Participant((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  if (v10 == v11)
    v13 = 0;
  else
    v13 = v10;
  *(_QWORD *)a3 = v13;
  *(_BYTE *)(a3 + 8) = v10 == v11;
  return result;
}

uint64_t closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  default argument 1 of GroupSession.sendResource(atURL:to:metadata:completion:)(&v17);
  v16 = v17;
  GroupSession.sendResource(atURL:to:metadata:completion:)(a3, &v16, a4, v15, (uint64_t)partial apply for closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:), v12);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

Swift::Void __swiftcall GroupSession.logAttachmentSessionReport()()
{
  uint64_t v0;
  id v1;
  void *v2;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + direct field offset for GroupSession.linkManager))
                    + 0x130))();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v1 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
  v2 = (void *)AttachmentDataReport.init(totalAttachments:totalDownloadBytes:totalUploadBytes:downloadSpeed:uploadSpeed:)();
  GroupSession.logAttachmentEvent(report:reportEvent:)(v2, 0xD000000000000023, 0x80000001A0F190F0);

}

void specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();

}

void closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(void **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *a1;
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v15 = a2;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v16 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "GroupSession: Logging attachment event: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    v13 = v11;
    a2 = v15;
    MEMORY[0x1A1B05CC4](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = (void *)MEMORY[0x1A1B048B4](a2, a3);
  objc_msgSend(v7, sel_logAttachmentEventWithReport_reportEvent_, a4, v14);

}

uint64_t specialized GroupSession.cleanUpPlaybackSyncer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 288));
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for specialized closure #1 in GroupSession.cleanUpPlaybackSyncer();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_386;
  v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall GroupSession.cleanUpPlaybackSyncer()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(_QWORD *)((char *)v1 + v2[36]);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v2[10];
  v12[3] = v2[11];
  v12[4] = v11;
  aBlock[4] = partial apply for closure #1 in GroupSession.cleanUpPlaybackSyncer();
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_154;
  v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v10, v6, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  swift_release();
}

void closure #1 in GroupSession.invalidateIfWaiting()()
{
  void *v0;
  char v1;
  void *v2;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;

  GroupSession.internalState.getter();
  v0 = v6;
  v4 = 0;
  v5 = v6;
  v1 = static GroupSession.State.== infix(_:_:)(&v5, &v4);
  outlined consume of GroupSession<A>.State<A>(v0);
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    v2 = (void *)swift_allocError();
    *v3 = 9;
    GroupSession.invalidate(reason:)(v2);

  }
}

uint64_t GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Publisher();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue>);
  v39 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v38 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_retain();
  GroupSession.playbackSyncerLink.setter(v17);
  v40 = v11;
  v41 = a1;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v18 = MEMORY[0x1E0DEE9E8];
  v19 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 304));
  swift_beginAccess();
  *v19 = v18;
  swift_bridgeObjectRelease();
  GroupSession.$activeParticipants.getter();
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = (_QWORD *)swift_allocObject();
  v35 = *(_QWORD *)(v4 + 80);
  v21[2] = v35;
  v34 = *(_QWORD *)(v4 + 88);
  v21[3] = v34;
  v21[4] = v20;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, MEMORY[0x1E0C96190]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  v42 = *(id *)((char *)v2 + *(_QWORD *)(*v2 + 288));
  v23 = v42;
  v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  v25 = v23;
  v27 = v37;
  v26 = v38;
  Publisher.subscribe<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v27);
  v28 = swift_allocObject();
  swift_weakInit();
  v29 = (_QWORD *)swift_allocObject();
  v30 = v34;
  v29[2] = v35;
  v29[3] = v30;
  v29[4] = v28;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue> and conformance Publishers.SubscribeOn<A, B>, &demangling cache variable for type metadata for Publishers.SubscribeOn<NSNotificationCenter.Publisher, OS_dispatch_queue>, MEMORY[0x1E0C957A0]);
  v31 = v40;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v31);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  v32 = swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 400))(v32);
}

uint64_t closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  void (*v37)(char *);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45;

  v2 = type metadata accessor for Participant();
  v43 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v39 - v6;
  v8 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
    while (1)
    {
      swift_once();
LABEL_3:
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.default.getter();
      v14 = v13;
      if (os_log_type_enabled(v12, v13))
      {
        v15 = swift_slowAlloc();
        v42 = swift_slowAlloc();
        v44[0] = v42;
        *(_DWORD *)v15 = 136315394;
        v39 = v15 + 4;
        v40 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
        swift_bridgeObjectRetain();
        v16 = Set.description.getter();
        LODWORD(v41) = v14;
        v17 = v16;
        v19 = v18;
        swift_bridgeObjectRelease();
        v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        v39 = v15 + 14;
        GroupSession.activeParticipants.getter();
        swift_release();
        v20 = Set.description.getter();
        v22 = v21;
        swift_bridgeObjectRelease();
        v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v12, (os_log_type_t)v41, "Active participants changed to latest participants:%s from previous participants:%s", (uint8_t *)v15, 0x16u);
        v23 = v42;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v23, -1, -1);
        MEMORY[0x1A1B05CC4](v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      v45 = GroupSession.activeParticipants.getter();
      specialized Set._subtract<A>(_:)(v8);
      v24 = v10;
      v10 = 0;
      v8 = v45;
      v25 = *(_QWORD *)(v45 + 56);
      v40 = v24;
      v41 = v45 + 56;
      v26 = 1 << *(_BYTE *)(v45 + 32);
      v27 = -1;
      if (v26 < 64)
        v27 = ~(-1 << v26);
      v28 = v27 & v25;
      v29 = (uint64_t *)(v24 + direct field offset for GroupSession.playbackSyncerLink);
      v42 = (unint64_t)(v26 + 63) >> 6;
      if ((v27 & v25) != 0)
      {
        do
        {
          while (1)
          {
            v38 = __clz(__rbit64(v28));
            v28 &= v28 - 1;
            v33 = v38 | (v10 << 6);
LABEL_25:
            outlined init with copy of Participant(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v43 + 72) * v33, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
            outlined init with take of Participant((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
            swift_beginAccess();
            v34 = *v29;
            if (*v29)
              break;
            outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
            swift_endAccess();
            if (!v28)
              goto LABEL_11;
          }
          swift_endAccess();
          v35 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 248);
          v36 = swift_retain();
          v37 = (void (*)(char *))v35(v36);
          swift_release();
          if (v37)
          {
            v37(v5);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v37);
          }
          outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        }
        while (v28);
      }
LABEL_11:
      v30 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
      }
      else
      {
        if (v30 >= v42)
          goto LABEL_30;
        v31 = *(_QWORD *)(v41 + 8 * v30);
        ++v10;
        if (v31)
          goto LABEL_24;
        v10 = v30 + 1;
        if (v30 + 1 >= v42)
          goto LABEL_30;
        v31 = *(_QWORD *)(v41 + 8 * v10);
        if (v31)
          goto LABEL_24;
        v10 = v30 + 2;
        if (v30 + 2 >= v42)
          goto LABEL_30;
        v31 = *(_QWORD *)(v41 + 8 * v10);
        if (v31)
          goto LABEL_24;
        v32 = v30 + 3;
        if (v32 >= v42)
        {
LABEL_30:
          swift_release();
          return swift_release();
        }
        v31 = *(_QWORD *)(v41 + 8 * v32);
        if (v31)
        {
          v10 = v32;
LABEL_24:
          v28 = (v31 - 1) & v31;
          v33 = __clz(__rbit64(v31)) + (v10 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          v10 = v32 + 1;
          if (__OFADD__(v32, 1))
            break;
          if (v10 >= v42)
            goto LABEL_30;
          v31 = *(_QWORD *)(v41 + 8 * v10);
          ++v32;
          if (v31)
            goto LABEL_24;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  __int128 *v38;
  os_log_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  int v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  void *v71;
  __int128 *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  __int128 v79;
  __int128 v80;

  v2 = type metadata accessor for GroupSessionEvent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v75 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v65 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Notification();
  v14 = *(_QWORD *)(v77 - 8);
  v15 = MEMORY[0x1E0C80A78](v77);
  v76 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v65 - v17;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v74 = a1;
    v20 = Notification.userInfo.getter();
    if (v20)
    {
      v73 = v10;
      v21 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v20);
      swift_bridgeObjectRelease();
      if (v21)
      {
        if (*(_QWORD *)(v21 + 16))
        {
          v72 = (__int128 *)v13;
          v22 = (id)*MEMORY[0x1E0C8ABE0];
          v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
          if ((v24 & 1) != 0)
          {
            outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v23, (uint64_t)&v79);
          }
          else
          {
            v79 = 0u;
            v80 = 0u;
          }

          if (*((_QWORD *)&v80 + 1))
          {
            type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v71 = v78;
              if (one-time initialization token for playback != -1)
                swift_once();
              v25 = type metadata accessor for Logger();
              v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.playback);
              v27 = v77;
              v68 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
              v68(v18, v74, v77);
              v69 = v26;
              v28 = Logger.logObject.getter();
              v67 = static os_log_type_t.default.getter();
              v29 = os_log_type_enabled(v28, (os_log_type_t)v67);
              v30 = (uint64_t)v72;
              if (v29)
              {
                v66 = v28;
                v31 = (uint8_t *)swift_slowAlloc();
                v32 = swift_slowAlloc();
                *(_QWORD *)&v79 = v32;
                *(_DWORD *)v31 = 136315138;
                v33 = Notification.userInfo.getter();
                v65 = v32;
                if (v33)
                {
                  v78 = (void *)v33;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
                  v34 = String.init<A>(reflecting:)();
                  v36 = v35;
                }
                else
                {
                  v34 = 7104878;
                  v36 = 0xE300000000000000;
                }
                v78 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, (uint64_t *)&v79);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                v70 = *(void (**)(char *, uint64_t))(v14 + 8);
                v70(v18, v77);
                v39 = v66;
                _os_log_impl(&dword_1A0DB3000, v66, (os_log_type_t)v67, "Received event, notification: %s", v31, 0xCu);
                v40 = v65;
                swift_arrayDestroy();
                MEMORY[0x1A1B05CC4](v40, -1, -1);
                MEMORY[0x1A1B05CC4](v31, -1, -1);

                v30 = (uint64_t)v72;
              }
              else
              {
                v70 = *(void (**)(char *, uint64_t))(v14 + 8);
                v70(v18, v27);

              }
              if (*(_QWORD *)(v21 + 16))
              {
                v41 = (id)*MEMORY[0x1E0C8ABE8];
                v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
                if ((v43 & 1) != 0)
                {
                  outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v42, (uint64_t)&v79);
                }
                else
                {
                  v79 = 0u;
                  v80 = 0u;
                }
                v30 = (uint64_t)v72;

                if (*((_QWORD *)&v80 + 1))
                {
                  v44 = type metadata accessor for UUID();
                  v45 = swift_dynamicCast();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v30, v45 ^ 1u, 1, v44);
LABEL_32:
                  if (*(_QWORD *)(v21 + 16))
                  {
                    v47 = (id)*MEMORY[0x1E0C8ABF0];
                    v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
                    if ((v49 & 1) != 0)
                    {
                      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v48, (uint64_t)&v79);
                    }
                    else
                    {
                      v79 = 0u;
                      v80 = 0u;
                    }

                    v30 = (uint64_t)v72;
                  }
                  else
                  {
                    v79 = 0u;
                    v80 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((_QWORD *)&v80 + 1))
                  {
                    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
                    if (swift_dynamicCast())
                      v50 = v78;
                    else
                      v50 = 0;
                  }
                  else
                  {
                    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v79, &demangling cache variable for type metadata for Any?);
                    v50 = 0;
                  }
                  v52 = (uint64_t)v73;
                  v51 = v74;
                  v53 = v71;
                  GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)(v30, v71, v50, (uint64_t)v73);
                  outlined init with copy of URL?(v52, (uint64_t)v8, &demangling cache variable for type metadata for GroupSessionEvent?);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
                  {
                    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for GroupSessionEvent?);
                    v55 = v76;
                    v54 = v77;
                    v68(v76, v51, v77);
                    v56 = Logger.logObject.getter();
                    v57 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v56, v57))
                    {
                      v58 = (uint8_t *)swift_slowAlloc();
                      v59 = swift_slowAlloc();
                      *(_QWORD *)&v79 = v59;
                      *(_DWORD *)v58 = 136315138;
                      v60 = Notification.userInfo.getter();
                      if (v60)
                      {
                        v78 = (void *)v60;
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
                        v61 = String.init<A>(reflecting:)();
                        v63 = v62;
                      }
                      else
                      {
                        v61 = 7104878;
                        v63 = 0xE300000000000000;
                      }
                      v78 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, (uint64_t *)&v79);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      v70(v55, v54);
                      _os_log_impl(&dword_1A0DB3000, v56, v57, "Could not create playback event %s", v58, 0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x1A1B05CC4](v59, -1, -1);
                      MEMORY[0x1A1B05CC4](v58, -1, -1);

                      swift_release();
                    }
                    else
                    {

                      swift_release();
                      v70(v55, v54);
                    }
                    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v73, &demangling cache variable for type metadata for GroupSessionEvent?);
                    v38 = v72;
                    v37 = &demangling cache variable for type metadata for UUID?;
                  }
                  else
                  {
                    v64 = v75;
                    outlined init with take of Participant((uint64_t)v8, v75, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
                    GroupSession.showNotice(_:)(v64);

                    swift_release();
                    outlined destroy of Participant(v64, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
                    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v52, &demangling cache variable for type metadata for GroupSessionEvent?);
                    v37 = &demangling cache variable for type metadata for UUID?;
                    v38 = (__int128 *)v30;
                  }
                  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v38, v37);
                }
              }
              else
              {
                v79 = 0u;
                v80 = 0u;
              }
              outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v79, &demangling cache variable for type metadata for Any?);
              v46 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v30, 1, 1, v46);
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            return swift_release();
          }
        }
        else
        {
          v79 = 0u;
          v80 = 0u;
        }
        swift_bridgeObjectRelease();
        swift_release();
        v37 = &demangling cache variable for type metadata for Any?;
        v38 = &v79;
        return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v38, v37);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  _OWORD v29[4];
  void *v30;
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey, Any>);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v2) >> 6;
  v5 = v1 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v7 << 6);
      v11 = v7;
      goto LABEL_28;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    v11 = v7 + 1;
    if (!v13)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v26)
        goto LABEL_39;
      v13 = *(_QWORD *)(v27 + 8 * v11);
      if (!v13)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v26)
          goto LABEL_39;
        v13 = *(_QWORD *)(v27 + 8 * v11);
        if (!v13)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v26)
            goto LABEL_39;
          v13 = *(_QWORD *)(v27 + 8 * v11);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_28:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v37);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    outlined init with copy of AnyHashable((uint64_t)v34, (uint64_t)v31);
    type metadata accessor for AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKey(0);
    if (!swift_dynamicCast())
    {
      v30 = 0;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      v25 = v30;
      swift_release();

      outlined consume of [AnyHashable : Any].Iterator._Variant();
      swift_release();
      return 0;
    }
    v15 = v30;
    outlined init with copy of Any((uint64_t)v35 + 8, (uint64_t)v31);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v34, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v31, (_OWORD *)((char *)v32 + 8));
    outlined init with take of Any((_OWORD *)((char *)v32 + 8), v29);
    v16 = v15;
    outlined init with take of Any(v29, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v17 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v18 = -1 << *(_BYTE *)(v1 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v5 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v5 + 8 * v20);
      }
      while (v24 == -1);
      v8 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8) = v16;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v1 + 56) + 32 * v8));
    ++*(_QWORD *)(v1 + 16);
    v7 = v11;
    v4 = v9;
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v1;
  }
  v13 = *(_QWORD *)(v27 + 8 * v14);
  if (v13)
  {
    v11 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v26)
      goto LABEL_39;
    v13 = *(_QWORD *)(v27 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  unint64_t v71;
  char *v72;
  void (*v74)(char *, char *, uint64_t);
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v82 = a2;
  v83 = a3;
  v86 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  MEMORY[0x1E0C80A78](v6);
  v84 = (uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v8);
  v85 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v78 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v79 = (char *)&v74 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v74 - v15;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v76 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v77 = (char *)&v74 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v80 = (char *)&v74 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v74 - v25;
  v27 = type metadata accessor for Participant();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v81 = (uint64_t)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v74 - v31;
  outlined init with copy of URL?(a1, (uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v33(v16, 1, v17) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined init with copy of Participant(*(_QWORD *)(v4 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
LABEL_10:
    v52 = v81;
    outlined init with copy of Participant((uint64_t)v32, v81, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v53 = v83;
    v54 = v83;
    v55 = v82;
    v56 = v84;
    GroupSessionEvent.init(originator:avCommand:rate:)(v52, v55, v53, v84);
    v57 = type metadata accessor for GroupSessionEvent();
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v56, &demangling cache variable for type metadata for GroupSessionEvent?);
      if (one-time initialization token for playback != -1)
        swift_once();
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.playback);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl(&dword_1A0DB3000, v60, v61, "AVCF event: Failed to create GroupSession Event from playback notification", v62, 2u);
        MEMORY[0x1A1B05CC4](v62, -1, -1);
      }

      outlined destroy of Participant((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v64 = v86;
      v65 = 1;
    }
    else
    {
      outlined destroy of Participant((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v66 = v56;
      v67 = v86;
      outlined init with take of Participant(v66, v86, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionEvent);
      v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v64 = v67;
      v65 = 0;
    }
    v68 = v57;
    return v63(v64, v65, 1, v68);
  }
  v74 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  v74(v26, v16, v17);
  v34 = GroupSession.activeParticipants.getter();
  MEMORY[0x1E0C80A78](v34);
  *(&v74 - 2) = (void (*)(char *, char *, uint64_t))v26;
  v35 = v85;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:), v34, v85);
  swift_bridgeObjectRelease();
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v35, 1, v27);
  v37 = v17;
  if (v36 != 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    outlined init with take of Participant(v85, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    goto LABEL_10;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v85, &demangling cache variable for type metadata for Participant?);
  if (one-time initialization token for playback != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.playback);
  v39 = v18;
  v40 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v41 = v80;
  v40(v80, v26, v37);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    v45 = swift_slowAlloc();
    v88 = v45;
    *(_DWORD *)v44 = 136315138;
    v46 = (uint64_t)v79;
    v40(v79, v41, v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v46, 0, 1, v37);
    v47 = v46;
    v48 = v78;
    outlined init with copy of URL?(v47, v78, &demangling cache variable for type metadata for UUID?);
    if (v75(v48, 1, v37) == 1)
    {
      v49 = 0xE300000000000000;
      v50 = v37;
      v51 = 7104878;
    }
    else
    {
      v85 = v45;
      v70 = v77;
      v74(v77, (char *)v48, v37);
      v40(v76, v70, v37);
      v50 = v37;
      v51 = String.init<A>(reflecting:)();
      v49 = v71;
      v72 = v70;
      v45 = v85;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v72, v50);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v79, &demangling cache variable for type metadata for UUID?);
    v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v49, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v69 = *(void (**)(char *, uint64_t))(v39 + 8);
    v69(v80, v50);
    _os_log_impl(&dword_1A0DB3000, v42, v43, "createPlaybackNoticeEvent: Can't find participant: %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v45, -1, -1);
    MEMORY[0x1A1B05CC4](v44, -1, -1);

    v37 = v50;
  }
  else
  {
    v69 = *(void (**)(char *, uint64_t))(v18 + 8);
    v69(v41, v37);

  }
  v69(v26, v37);
  v68 = type metadata accessor for GroupSessionEvent();
  v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
  v64 = v86;
  v65 = 1;
  return v63(v64, v65, 1, v68);
}

void closure #1 in variable initialization expression of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;

  if (a1)
  {
    v2 = a1;
    if (one-time initialization token for playback != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.playback);
    v4 = a1;
    v5 = a1;
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, oslog, v6, "Error sending %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(**(_QWORD **)a2 + 208);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ()), v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 232);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler : <A><A1>GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 256);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  return v1;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.connected.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.connected.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.connected.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, a1);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.localUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, a1);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter();
}

{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter();
}

{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.groupSession;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.messenger.getter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.messenger.setter()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.messenger.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.messenger;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify;
}

void GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_weakAssign();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer.getter()
{
  return swift_retain();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.__allocating_init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(a1, a2, a3);
  return v6;
}

_QWORD *GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[12];
  uint64_t v39[3];

  v4 = v3;
  v38[1] = a2;
  v7 = *v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = closure #1 in variable initialization expression of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  v4[7] = 0;
  swift_weakInit();
  swift_weakInit();
  v38[0] = v7;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    v15 = a3;
    v16 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    v15 = a3;
    v16 = MEMORY[0x1E0DEE9E8];
  }
  *(_QWORD *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.cancellables) = v16;
  swift_beginAccess();
  swift_weakAssign();
  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v17((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, &a1[direct field offset for GroupSession.id], v8);
  outlined init with copy of Participant(*(_QWORD *)&a1[direct field offset for GroupSession.linkManager]+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v17(v11, v14, v8);
  outlined destroy of Participant((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, v11, v8);
  swift_beginAccess();
  swift_weakAssign();
  *(_QWORD *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer) = v15;
  *((_BYTE *)v4 + 64) = 0;
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 256);
  if ((a1[v19] & 1) != 0 || a1[*(_QWORD *)(v18 + 264)] == 1)
  {
    v20 = &a1[*(_QWORD *)(v18 + 272)];
    swift_beginAccess();
    v21 = *v20 ^ 1;
  }
  else
  {
    v21 = 1;
  }
  LOBYTE(v39[0]) = v21 & 1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup) = CurrentValueSubject.init(_:)();
  if (one-time initialization token for playback != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.playback);
  swift_retain_n();
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    *(_DWORD *)v25 = 67109888;
    swift_beginAccess();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    swift_release();
    LODWORD(v39[0]) = LOBYTE(v39[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 8) = 1024;
    v26 = a1[v19];
    swift_release();
    LODWORD(v39[0]) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 14) = 1024;
    v27 = a1[*(_QWORD *)(*(_QWORD *)a1 + 264)];
    swift_release();
    LODWORD(v39[0]) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 20) = 1024;
    v28 = &a1[*(_QWORD *)(*(_QWORD *)a1 + 272)];
    swift_beginAccess();
    v29 = *v28;
    swift_release();
    LODWORD(v39[0]) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v23, v24, "ShouldRequestCatchup:%{BOOL}d isLocallyInitiated:%{BOOL}d isLightweightPrimaryInitiated:%{BOOL}d isFirstJoin:%{BOOL}d", (uint8_t *)v25, 0x1Au);
    MEMORY[0x1A1B05CC4](v25, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  v30 = v38[0];
  if (swift_weakLoadStrong())
  {
    v31 = GroupSession.catchupNeededPublisher.getter();
    swift_release();
    v39[0] = v31;
    v32 = swift_allocObject();
    swift_weakInit();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v30 + 80);
    *(_OWORD *)(v33 + 24) = *(_OWORD *)(v30 + 88);
    *(_QWORD *)(v33 + 40) = *(_QWORD *)(v30 + 104);
    *(_QWORD *)(v33 + 48) = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Participant, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Participant, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Participant, Never>, MEMORY[0x1E0C95D90]);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  if (swift_weakLoadStrong())
  {
    specialized GroupSessionMessenger.receive<A>(_:)(v39);
    swift_release();
    v38[11] = v39[0];
    v34 = swift_allocObject();
    swift_weakInit();
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = *(_QWORD *)(v30 + 80);
    *(_OWORD *)(v35 + 24) = *(_OWORD *)(v30 + 88);
    *(_QWORD *)(v35 + 40) = *(_QWORD *)(v30 + 104);
    *(_QWORD *)(v35 + 48) = v34;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:);
    *(_QWORD *)(v36 + 24) = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<PlaybackSyncer.Message>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageStream<PlaybackSyncer.Message> and conformance GroupSessionMessenger.MessageStream<A>, &demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<PlaybackSyncer.Message>, (uint64_t)&protocol conformance descriptor for GroupSessionMessenger.MessageStream<A>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (((*(uint64_t (**)(void))(*(_QWORD *)result + 272))() & 1) != 0)
    {
      if (one-time initialization token for playback != -1)
        swift_once();
      v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.playback);
      v3 = Logger.logObject.getter();
      v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_1A0DB3000, v3, v4, "Processing catchup needed signal", v5, 2u);
        MEMORY[0x1A1B05CC4](v5, -1, -1);
      }

      (*(void (**)(void))(*(_QWORD *)v1 + 344))();
      CurrentValueSubject.send(_:)();
      swift_release();
    }
    else
    {
      if (one-time initialization token for playback != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.playback);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1A0DB3000, v7, v8, "Ignoring catchup needed signal since not connected to PlaybackSyncer yet", v9, 2u);
        MEMORY[0x1A1B05CC4](v9, -1, -1);
      }

    }
    return swift_release();
  }
  return result;
}

void specialized GroupSessionMessenger.receive<A>(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14[2];

  v14[0] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = (_QWORD *)specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  v10 = *(_BYTE *)(v1 + 40);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for specialized closure #1 in GroupSessionMessenger.receive<A>(_:);
  *(_QWORD *)(v12 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, MEMORY[0x1E0C95D90]);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>, MEMORY[0x1E0C95708]);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext)>>, MEMORY[0x1E0C957C0]);
  v13 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized GroupSessionMessenger.MessageStream.init(outputStream:)(v13, v14[0]);
}

uint64_t closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(_BYTE *, uint64_t);
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = (void (*)(_BYTE *, uint64_t))(*(uint64_t (**)(void))(*(_QWORD *)result + 224))();
    result = swift_release();
    if (v7)
    {
      v8[0] = v3;
      v9 = v4;
      v10 = v5;
      v7(v8, a2);
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v7);
    }
  }
  return result;
}

Swift::Void __swiftcall GroupSession.GroupSessionPlaybackSyncerLink.connect()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;

  v2 = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 104);
  type metadata accessor for GroupSession.State(255, v4, v5, v0);
  v6 = type metadata accessor for Published.Publisher();
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - v7;
  v32 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C96190], v6);
  v9 = type metadata accessor for Publishers.Drop();
  v34 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - v11;
  v13 = (*(uint64_t (**)(uint64_t))(v3 + 296))(v10);
  if (v13)
  {
    v14 = v13;
    v31 = v4;
    GroupSession.state.getter();
    v15 = v35;
    v36 = 1;
    v37 = v35;
    v16 = static GroupSession.State.== infix(_:_:)(&v37, (void **)&v36);
    outlined consume of GroupSession<A>.State<A>(v15);
    if ((v16 & 1) != 0)
    {
      if (one-time initialization token for playback != -1)
        swift_once();
      v30 = v5;
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1A0DB3000, v18, v19, "GroupSession was already joined so calling didJoinHandler", v20, 2u);
        MEMORY[0x1A1B05CC4](v20, -1, -1);
      }

      v21 = GroupSession.activeParticipants.getter();
      MEMORY[0x1E0C80A78](v21);
      v22 = *(_QWORD *)(v3 + 96);
      *(&v29 - 4) = *(_QWORD *)(v3 + 80);
      *(&v29 - 3) = v22;
      *(&v29 - 2) = v14;
      v23 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect(), (uint64_t)(&v29 - 6), v21);
      swift_bridgeObjectRelease();
      v24 = *(uint64_t *)((char *)v2 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer);
      v25 = specialized Set.init<A>(_:)(v23);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, _UNKNOWN **, uint64_t))(*(_QWORD *)v24 + 480))(v2, &protocol witness table for GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>, v25);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*v2 + 280))(1);
      v5 = v30;
    }
    GroupSession.$state.getter();
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
    v26 = swift_allocObject();
    swift_weakInit();
    v27 = (_QWORD *)swift_allocObject();
    v28 = v31;
    v27[2] = *(_QWORD *)(v3 + 80);
    v27[3] = v28;
    v27[4] = *(_QWORD *)(v3 + 96);
    v27[5] = v5;
    v27[6] = v26;
    MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95988], v9);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v9);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
}

uint64_t closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[7];
  uint64_t v21;
  id v22;

  v7 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = result;
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)result + 296))();
    if (v10)
    {
      v11 = v10;
      v21 = 1;
      v22 = v7;
      if ((static GroupSession.State.== infix(_:_:)(&v22, (void **)&v21) & 1) != 0)
      {
        if (one-time initialization token for playback != -1)
          swift_once();
        v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.playback);
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v15 = 0;
          _os_log_impl(&dword_1A0DB3000, v13, v14, "GroupSession joined so connecting link to PlaybackSyncer", v15, 2u);
          MEMORY[0x1A1B05CC4](v15, -1, -1);
        }

        v16 = GroupSession.activeParticipants.getter();
        MEMORY[0x1E0C80A78](v16);
        v20[2] = a3;
        v20[3] = a5;
        v20[4] = v11;
        v17 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect(), (uint64_t)v20, v16);
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(v9 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer);
        swift_retain();
        swift_retain();
        v19 = specialized Set.init<A>(_:)(v17);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(_QWORD *)v18 + 480))(v9, &protocol witness table for GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>, v19);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 280))(1);
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v20;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Participant(*(_QWORD *)(a2 + direct field offset for GroupSession.linkManager)+ OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, v15, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v12, v15, v6);
  outlined destroy of Participant(v15, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v16(v10, a1, v6);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v17(v12, v6);
  if ((v15 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v16(a3, a1, v6);
    v18 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v18, 1, v6);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.sendMessage(_:to:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[4];
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;

  v5 = type metadata accessor for UUID();
  v66 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v65 = &v55[-v9];
  v10 = type metadata accessor for Participant();
  v63 = *(_QWORD *)(v10 - 8);
  v64 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v62 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = &v55[-v14];
  v16 = *a1;
  v18 = *((_QWORD *)a1 + 1);
  v17 = *((_QWORD *)a1 + 2);
  if (a2)
  {
    v58 = *((_QWORD *)a1 + 2);
    v59 = v18;
    v19 = *(_QWORD *)(a2 + 16);
    v20 = MEMORY[0x1E0DEE9D8];
    if (v19)
    {
      v56 = v16;
      v57 = v2;
      v67 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
      v21 = (_BYTE *)(a2 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80)));
      v22 = *(_QWORD *)(v66 + 72);
      v60 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 16);
      v61 = v22;
      do
      {
        v23 = (uint64_t)v15;
        v24 = v65;
        v25 = v60;
        v60(v65, v21, v5);
        v25(v8, v24, v5);
        v26 = v62;
        v25(v62, v8, v5);
        UUID.uuid.getter();
        HIBYTE(v25) = v27;
        UUID.uuid.getter();
        v29 = (v28 >> 40) & 0xFF00 | HIBYTE(v25);
        UUID.uuid.getter();
        v31 = (v30 >> 24) & 0xFF0000;
        UUID.uuid.getter();
        v33 = v29 | v31 | (v32 >> 8) & 0xFF000000;
        UUID.uuid.getter();
        v35 = v33 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v34 << 32);
        UUID.uuid.getter();
        v37 = v35 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v36 << 40);
        UUID.uuid.getter();
        v39 = v37 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v38 << 48);
        UUID.uuid.getter();
        v41 = v39 | (v40 << 56);
        v42 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
        v42(v8, v5);
        v43 = v64;
        *(_QWORD *)&v26[*(int *)(v64 + 24)] = v41;
        v44 = &v26[*(int *)(v43 + 20)];
        *v44 = 0;
        v44[1] = 0xE000000000000000;
        v45 = (uint64_t)v26;
        v15 = (_BYTE *)v23;
        outlined init with take of Participant(v45, v23, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v42(v24, v5);
        v20 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v67;
        }
        v47 = *(_QWORD *)(v20 + 16);
        v46 = *(_QWORD *)(v20 + 24);
        if (v47 >= v46 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          v20 = v67;
        }
        *(_QWORD *)(v20 + 16) = v47 + 1;
        v13 = outlined init with take of Participant(v23, v20+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v21 += v61;
        --v19;
      }
      while (v19);
      v2 = v57;
      LOBYTE(v16) = v56;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v13))
    {
      v48 = specialized Set.init<A>(_:)(v20);
      v49 = swift_bridgeObjectRelease();
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v49);
      specialized GroupSessionMessenger.send<A>(_:to:completion:)(v16, v59, v58, v48, v50, v51);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v13);
    if (result)
    {
      v53 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 200))();
      specialized GroupSessionMessenger.send<A>(_:to:completion:)(v16, v18, v17, 0, v53, v54);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized GroupSessionMessenger.send<A>(_:to:completion:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  unint64_t v28;
  ValueMetadata *v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  v7 = v6;
  v29 = &type metadata for PlaybackSyncer.Message;
  v30 = lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message();
  v31 = lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message();
  v26[0] = a1;
  v27 = a2;
  v28 = a3;
  v32 = 1;
  outlined copy of Data._Representation(a2, a3);
  if (one-time initialization token for default != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v25 = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a2, a3);
    outlined consume of Data._Representation(a2, a3);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v21 = String.init<A>(reflecting:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v15, v16, "Sending message: %s to: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    MEMORY[0x1A1B05CC4](v17, -1, -1);

  }
  else
  {
    outlined consume of Data._Representation(a2, a3);
    outlined consume of Data._Representation(a2, a3);

    swift_bridgeObjectRelease_n();
  }
  v25 = a4;
  LOBYTE(v24) = *(_BYTE *)(v7 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v26, &v25, (char *)&v24, a5, a6);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v26);
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 48));
  v1 = v0 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID;
  v2 = type metadata accessor for UUID();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, v2);
  swift_weakDestroy();
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSession.GroupSessionPlaybackSyncerLink.__deallocating_deinit()
{
  return GroupSession.__deallocating_deinit((void (*)(void))GroupSession.GroupSessionPlaybackSyncerLink.deinit);
}

uint64_t GroupSession.__deallocating_deinit(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PlaybackSyncerLink.sendMessage(_:to:) in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t protocol witness for PlaybackSyncerLink.receivedMessageHandler.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t protocol witness for PlaybackSyncerLink.receivedMessageHandler.setter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t (*protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 240))();
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

uint64_t protocol witness for PlaybackSyncerLink.participantLeftHandler.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t protocol witness for PlaybackSyncerLink.participantLeftHandler.setter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t (*protocol witness for PlaybackSyncerLink.participantLeftHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 264))();
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

void protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.localUUID, a1);
}

uint64_t protocol witness for PlaybackSyncerLink.sessionUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>(&direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID, a1);
}

uint64_t protocol witness for PlaybackSyncerLink.localUUID.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for PlaybackSyncerLink.shouldRequestCatchup.getter in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)(result + direct field offset for GroupSession.playbackSyncerLink);
    swift_beginAccess();
    if (*v2)
    {
      v3 = *(void (**)(uint64_t))(**(_QWORD **)(*v2
                                                        + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                          + 512);
      swift_retain();
      v4 = swift_retain();
      v3(v4);
      swift_release();
      if (one-time initialization token for playback != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_1A0DB3000, v6, v7, "Cleaned up playback syncer", v8, 2u);
        MEMORY[0x1A1B05CC4](v8, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
    }
    if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
      v9 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v9 = MEMORY[0x1E0DEE9E8];
    v10 = (unint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 304));
    swift_beginAccess();
    *v10 = v9;
    swift_bridgeObjectRelease();
    v11 = (_QWORD *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
    swift_beginAccess();
    *v11 = 0;
    swift_release();
    specialized GroupSession.playbackSyncerLink.setter(0);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)(result + direct field offset for GroupSession.playbackSyncerLink);
    swift_beginAccess();
    if (*v2)
    {
      v3 = *(void (**)(uint64_t))(**(_QWORD **)(*v2
                                                        + direct field offset for GroupSession.GroupSessionPlaybackSyncerLink.playbackSyncer)
                                          + 512);
      swift_retain();
      v4 = swift_retain();
      v3(v4);
      swift_release();
      if (one-time initialization token for playback != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_1A0DB3000, v6, v7, "Cleaned up playback syncer", v8, 2u);
        MEMORY[0x1A1B05CC4](v8, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
    }
    if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
      v9 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v9 = MEMORY[0x1E0DEE9E8];
    v10 = (unint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 304));
    swift_beginAccess();
    *v10 = v9;
    swift_bridgeObjectRelease();
    v11 = (_QWORD *)(v1 + direct field offset for GroupSession.playbackSyncMessenger);
    swift_beginAccess();
    *v11 = 0;
    swift_release();
    GroupSession.playbackSyncerLink.setter(0);
    return swift_release();
  }
  return result;
}

uint64_t specialized GroupSession.description.getter()
{
  void *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;

  _StringGuts.grow(_:)(120);
  v1._countAndFlagsBits = 0x73655370756F7247;
  v1._object = (void *)0xED00003C6E6F6973;
  String.append(_:)(v1);
  v2._object = (void *)0x80000001A0F195E0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A6574617473202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  type metadata accessor for AnyGroupActivity(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.State);
  _print_unlocked<A, B>(_:_:)();
  outlined consume of GroupSession<A>.State<A>(v0);
  v7._countAndFlagsBits = 0xD000000000000014;
  v7._object = (void *)0x80000001A0F19120;
  String.append(_:)(v7);
  if (*((_BYTE *)v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)))
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if (*((_BYTE *)v0 + *(_QWORD *)(*(_QWORD *)v0 + 256)))
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  v11._object = (void *)0x80000001A0F19140;
  String.append(_:)(v11);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000015;
  v13._object = (void *)0x80000001A0F19160;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t GroupSession.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  v1 = *v0;
  _StringGuts.grow(_:)(120);
  v2._countAndFlagsBits = 0x73655370756F7247;
  v2._object = (void *)0xED00003C6E6F6973;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v1 + 80);
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A666C6573283ELL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x203A6469202CLL;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A6574617473202CLL;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  GroupSession.state.getter();
  type metadata accessor for GroupSession.State(0, v3, *(_QWORD *)(v1 + 88), v9);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined consume of GroupSession<A>.State<A>(v0);
  v10._object = (void *)0x80000001A0F19120;
  v10._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v10);
  if (*((_BYTE *)v0 + *(_QWORD *)(*v0 + 256)))
    v11 = 1702195828;
  else
    v11 = 0x65736C6166;
  if (*((_BYTE *)v0 + *(_QWORD *)(*v0 + 256)))
    v12 = 0xE400000000000000;
  else
    v12 = 0xE500000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD00000000000001CLL;
  v14._object = (void *)0x80000001A0F19140;
  String.append(_:)(v14);
  GroupSession.activeParticipants.getter();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0xD000000000000015;
  v16._object = (void *)0x80000001A0F19160;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSession<A>()
{
  return GroupSession.description.getter();
}

Swift::Void __swiftcall GroupSession.invalidateConnection()()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_beginAccess();
  v2 = *v1;
  dispatch thunk of XPCClient.destroyConnection()();

}

uint64_t GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, void *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  char v25;
  uint64_t aBlock[6];
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v8 = *v3;
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  v25 = a1;
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136315394;
    LOBYTE(v28) = a1 & 1;
    v14 = String.init<A>(reflecting:)();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v28 = (uint64_t)v4;
    v16 = >> prefix<A>(_:)((uint64_t)&v28, v8);
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v10, v11, "GroupSession got shouldDismissPlayback allowingCancellation:%s. Will end %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  GroupSession.state.getter();
  v18 = (void *)aBlock[0];
  v27 = 1;
  v28 = aBlock[0];
  v19 = static GroupSession.State.== infix(_:_:)((id *)&v28, (void **)&v27);
  outlined consume of GroupSession<A>.State<A>(v18);
  if ((v19 & 1) != 0)
  {
    v20 = *(NSObject **)((char *)v4 + *(_QWORD *)(*v4 + 288));
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v4;
    *(_BYTE *)(v21 + 24) = v25 & 1;
    *(_QWORD *)(v21 + 32) = a2;
    *(_QWORD *)(v21 + 40) = a3;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = partial apply for closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
    *(_QWORD *)(v22 + 24) = v21;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_189;
    a2 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v20, a2);
    _Block_release(a2);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return result;
    __break(1u);
  }
  return ((uint64_t (*)(_QWORD))a2)(0);
}

uint64_t closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  _QWORD aBlock[6];

  v8 = (id *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v9 = *v8;
  v10 = XPCClient.queue.getter();

  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_BYTE *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_313;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);

  _Block_release(v13);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a4 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v6;
  void *v7;
  uint64_t v8;
  id v9;

  v6 = (void **)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v7 = *v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v9 = v7;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();

  return swift_release();
}

void closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(void **a1, char a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v7 = *a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v10[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v10[3] = &block_descriptor_322;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_presentSessionDismissalAlertWithAllowingCancellation_completion_, a2 & 1, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v5, v6, "GroupSession got result of dismissal alert %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }

  return a2(a1 & 1);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t GroupSession.Timestamps.globalCreation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GroupSession.Timestamps.localCreation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t GroupSession.Timestamps.permittedJoin.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of URL?(v2 + *(int *)(a1 + 40), a2, &demangling cache variable for type metadata for Date?);
}

uint64_t GroupSession.Timestamps.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Date.init()();
  v7 = type metadata accessor for GroupSession.Timestamps(0, a1, a2, v6);
  Date.init()();
  v8 = a3 + *(int *)(v7 + 40);
  v9 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t specialized closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  char v17;
  _OWORD v18[3];

  if ((a4 & 1) != 0)
  {
    if ((a3 & 1) == 0)
      goto LABEL_3;
  }
  else if ((a3 & 1) != 0)
  {
LABEL_3:
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a5, 1, 1, v7);
  }
  outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v18[0] = v16[0];
    v18[1] = v16[1];
    v18[2] = v16[2];
    outlined init with copy of Decodable & Encodable((uint64_t)v18, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
    if ((swift_dynamicCast() & 1) == 0 || v13 == 4)
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a5, 1, 1, v12);
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
      v10 = a5 + *(int *)(v9 + 48);
      *(_BYTE *)a5 = v13;
      *(_QWORD *)(a5 + 8) = v14;
      *(_QWORD *)(a5 + 16) = v15;
      outlined init with copy of Participant(a2, v10, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a5, 0, 1, v9);
    }
    return outlined destroy of TypedPayloadBox((uint64_t)v18);
  }
  else
  {
    outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v16);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a5, 1, 1, v11);
  }
}

void specialized closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v23 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v23 - v9;
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  v12 = *(int *)(v2 + 48);
  v13 = (uint64_t)&v10[v12];
  v14 = a1 + v12;
  LOBYTE(v12) = *(_BYTE *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  *v10 = v12;
  *((_QWORD *)v10 + 1) = v16;
  *((_QWORD *)v10 + 2) = v15;
  outlined init with copy of Participant(v14, v13, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionMessenger.MessageContext);
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  outlined init with take of Date?((uint64_t)v10, (uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  outlined copy of Data._Representation(v16, v15);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v24 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = _typeName(_:qualified:)();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    _os_log_impl(&dword_1A0DB3000, v17, v18, "Receiving message: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v20, -1, -1);
    MEMORY[0x1A1B05CC4](v19, -1, -1);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  }

}

uint64_t protocol witness for SystemCoordinatorClientProvider.id.getter in conformance GroupSession<A>@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.id.getter(a1);
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ReliableBroadcastPacket>, type metadata accessor for ReliableBroadcastPacket);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PresenceSessionInfo.Participant>, type metadata accessor for PresenceSessionInfo.Participant);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ResolvedTransferRepresentation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA8898]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AbsoluteSpatialTemplateOutput.Element>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 112 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Topic.PendingMessage>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ReliableBroadcastPacket.Message>, type metadata accessor for ReliableBroadcastPacket.Message);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Just<GroupSession<AnyGroupActivity>>>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>)
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<GroupSession<AnyGroupActivity>>)
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DownloadAttachment>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(sequenceNumber: UInt32, pendingMessage: ReliableBroadcastLink.SenderContext.PendingMessage?)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (sequenceNumber: UInt32, pendingMessage: ReliableBroadcastLink.SenderContext.PendingMessage?));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v51 - 8);
  v8 = MEMORY[0x1E0C80A78](v51);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v52 = (uint64_t)&v41 - v12;
  result = MEMORY[0x1E0C80A78](v11);
  v47 = (uint64_t)&v41 - v14;
  if (!*(_QWORD *)(*v2 + 16))
    return result;
  v15 = *(_QWORD *)(a1 + 56);
  v41 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v42 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v44 = v6;
  v45 = v2;
  v46 = a1;
  v43 = v7;
  while (1)
  {
    if (v18)
    {
      v48 = (v18 - 1) & v18;
      v49 = v19;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
      goto LABEL_26;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v22 >= v42)
      return swift_release();
    v23 = *(_QWORD *)(v41 + 8 * v22);
    v24 = v19 + 1;
    if (!v23)
    {
      v24 = v19 + 2;
      if (v19 + 2 >= v42)
        return swift_release();
      v23 = *(_QWORD *)(v41 + 8 * v24);
      if (!v23)
      {
        v24 = v19 + 3;
        if (v19 + 3 >= v42)
          return swift_release();
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          v24 = v19 + 4;
          if (v19 + 4 >= v42)
            return swift_release();
          v23 = *(_QWORD *)(v41 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_25:
    v48 = (v23 - 1) & v23;
    v49 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(_QWORD *)(a1 + 48) + v26 * v21;
    v28 = v47;
    outlined init with copy of Participant(v27, v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v29 = v52;
    outlined init with take of Participant(v28, v52, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v30 = *v2;
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    v31 = v51;
    v32 = (_QWORD *)(v29 + *(int *)(v51 + 20));
    String.hash(into:)();
    v50 = *(int *)(v31 + 24);
    Hasher._combine(_:)(*(_QWORD *)(v29 + v50));
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v30 + 32);
    v35 = v33 & ~v34;
    if (((*(_QWORD *)(v30 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
    {
      v36 = ~v34;
      while (1)
      {
        outlined init with copy of Participant(*(_QWORD *)(v30 + 48) + v35 * v26, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        if ((static UUID.== infix(_:_:)() & 1) != 0)
        {
          v37 = &v10[*(int *)(v51 + 20)];
          v38 = *(_QWORD *)v37 == *v32 && *((_QWORD *)v37 + 1) == v32[1];
          if ((v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && *(_QWORD *)&v10[*(int *)(v51 + 24)] == *(_QWORD *)(v52 + v50))
          {
            break;
          }
        }
        outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v35 = (v35 + 1) & v36;
        if (((*(_QWORD *)(v30 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_6;
      }
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      swift_bridgeObjectRelease();
      v2 = v45;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v40 = *v2;
      v53 = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        v40 = v53;
      }
      v20 = (uint64_t)v44;
      outlined init with take of Participant(*(_QWORD *)(v40 + 48) + v35 * v26, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      specialized _NativeSet._delete(at:)(v35);
      *v2 = v53;
      swift_bridgeObjectRelease();
      v7 = v43;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v20, 0, 1, v51);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      v7 = v43;
      v20 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v51);
      v2 = v45;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v20, &demangling cache variable for type metadata for Participant?);
    result = outlined destroy of Participant(v52, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    a1 = v46;
    v18 = v48;
    v19 = v49;
  }
  v25 = v19 + 5;
  if (v19 + 5 >= v42)
    return swift_release();
  v23 = *(_QWORD *)(v41 + 8 * v25);
  if (v23)
  {
    v24 = v19 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v42)
      return swift_release();
    v23 = *(_QWORD *)(v41 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_25;
  }
LABEL_43:
  __break(1u);
  return result;
}

id specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  id v40;
  void *v41;
  char *v42;
  objc_class *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(uint64_t *, _QWORD);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, uint64_t);
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[4];
  objc_super v93;

  v83 = a7;
  v88 = a6;
  v89 = a3;
  v90 = a5;
  v91 = a4;
  v86 = a2;
  v87 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  MEMORY[0x1E0C80A78](v9);
  v76 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
  v80 = *(_QWORD *)(v11 - 8);
  v81 = v11;
  MEMORY[0x1E0C80A78](v11);
  v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Participant();
  v84 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v82 = v13;
  v85 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
  v23 = objc_allocWithZone(MEMORY[0x1E0CB38E0]);
  v24 = a8;
  *(_QWORD *)&a8[v22] = objc_msgSend(v23, sel_init);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = 0;
  v25 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic];
  v92[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic?);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v21, v18);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments] = MEMORY[0x1E0DEE9E0];
  v26 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments];
  v27 = MEMORY[0x1E0DEE9D8];
  v92[0] = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v26, v17, v14);
  if ((v27 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v28 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v28 = MEMORY[0x1E0DEE9E8];
  v29 = v86;
  v30 = v87;
  v31 = v90;
  v32 = v91;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_cancellables] = v28;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_state] = 0;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce] = 0;
  v33 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v36 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  v37 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier];
  v38 = type metadata accessor for UUID();
  v86 = *(_QWORD *)(v38 - 8);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  v39(v37, v30, v38);
  v82 = v38;
  v39(&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID], v29, v38);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_topic] = v32;
  outlined init with copy of Participant(v31, (uint64_t)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant], (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v40 = v88;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig] = v88;
  v41 = v83;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags] = v83;
  swift_retain();
  v88 = v40;
  v42 = v41;

  v43 = (objc_class *)type metadata accessor for LinkManager(0);
  v93.receiver = v24;
  v93.super_class = v43;
  v44 = objc_msgSendSuper2(&v93, sel_init);
  v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v46 = (uint64_t)v85;
  outlined init with copy of Participant(v31, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v47 = (*(unsigned __int8 *)(v84 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v45;
  outlined init with take of Participant(v46, v48 + v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v49 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(_QWORD *)v91 + 328);
  v50 = v30;
  v51 = v31;
  v52 = v44;
  v53 = v48;
  v54 = v91;
  v49(partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v53);
  v85 = v42;
  if (objc_msgSend(v42, sel_unreliableMessengerEnabled))
  {
    v55 = UUID.uuidString.getter();
    v57 = v56;
    v58 = *(_QWORD *)(v90 + *(int *)(v75 + 24));
    v59 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type LinkManager and conformance LinkManager, type metadata accessor for LinkManager, (uint64_t)&protocol conformance descriptor for LinkManager);
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, uint64_t))(*(_QWORD *)v89 + 256);
    v61 = (char *)v52;
    v62 = v59;
    v54 = v91;
    v63 = v60(v29, v55, v57, v58, v88, v52, v62);
    swift_bridgeObjectRelease();

    v64 = v76;
    (*(void (**)(void))(*(_QWORD *)v54 + 440))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
    v65 = v78;
    v66 = v79;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v65);
    v67 = (void (*)(uint64_t *, _QWORD))UnreliableMessenger.$activeReliableSubscribers.modify();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>, MEMORY[0x1E0C95950]);
    v68 = v81;
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v68);
    v67(v92, 0);
    *(_QWORD *)&v61[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = v63;
    v51 = v90;
    v50 = v87;
    swift_release();
  }
  v69 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v70 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)v54 + 352);
  swift_retain();
  v70(partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v69);
  swift_release();
  swift_release();

  outlined destroy of Participant(v51, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v71 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v72 = v29;
  v73 = v82;
  v71(v72, v82);
  v71(v50, v73);
  swift_release();
  return v52;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  id v41;
  void *v42;
  objc_class *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  void (*v63)(uint64_t *, _QWORD);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD, uint64_t);
  void (*v67)(uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[4];
  objc_super v87;

  v82 = a3;
  v83 = a7;
  v80 = a4;
  v81 = a6;
  v79 = a5;
  v84 = a2;
  v85 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v71 = *(_QWORD *)(v9 - 8);
  v72 = v9;
  MEMORY[0x1E0C80A78](v9);
  v70 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  MEMORY[0x1E0C80A78](v11);
  v73 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Participant();
  v78 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v76 = v13;
  v77 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
  v23 = objc_allocWithZone(MEMORY[0x1E0CB38E0]);
  v24 = a8;
  *(_QWORD *)&a8[v22] = objc_msgSend(v23, sel_init);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = 0;
  v25 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic];
  v86[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic?);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v21, v18);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments] = MEMORY[0x1E0DEE9E0];
  v26 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments];
  v27 = MEMORY[0x1E0DEE9D8];
  v86[0] = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v26, v17, v14);
  if ((v27 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v28 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v28 = MEMORY[0x1E0DEE9E8];
  v29 = v84;
  v30 = v85;
  v31 = v79;
  v32 = v80;
  v33 = (uint64_t)v77;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_cancellables] = v28;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_state] = 0;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce] = 0;
  v34 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v36 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  v37 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler];
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  v38 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier];
  v39 = type metadata accessor for UUID();
  v79 = *(_QWORD *)(v39 - 8);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  v40(v38, v30, v39);
  v40(&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID], v29, v39);
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_topic] = v32;
  outlined init with copy of Participant(v31, (uint64_t)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant], (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v41 = v81;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig] = v81;
  v42 = v83;
  *(_QWORD *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags] = v83;
  swift_retain();
  v81 = v41;
  swift_unknownObjectRetain();

  v43 = (objc_class *)type metadata accessor for LinkManager(0);
  v87.receiver = v24;
  v87.super_class = v43;
  v44 = objc_msgSendSuper2(&v87, sel_init);
  v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of Participant(v31, v33, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v46 = (*(unsigned __int8 *)(v78 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v45;
  outlined init with take of Participant(v33, v47 + v46, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v48 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(_QWORD *)v32 + 328);
  v49 = v44;
  v48(partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v47);
  if (objc_msgSend(v42, sel_unreliableMessengerEnabled))
  {
    v50 = UUID.uuidString.getter();
    v52 = v51;
    v53 = *(_QWORD *)(v31 + *(int *)(v69 + 24));
    v54 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type LinkManager and conformance LinkManager, type metadata accessor for LinkManager, (uint64_t)&protocol conformance descriptor for LinkManager);
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, uint64_t))(*(_QWORD *)v82 + 256);
    v56 = (char *)v49;
    v57 = v50;
    v32 = v80;
    v58 = v55(v84, v57, v52, v53, v81, v49, v54);

    v59 = swift_bridgeObjectRelease();
    v60 = v70;
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 440))(v59);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher, MEMORY[0x1E0C96190]);
    v61 = v72;
    v62 = v73;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v61);
    v63 = (void (*)(uint64_t *, _QWORD))UnreliableMessenger.$activeReliableSubscribers.modify();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>, MEMORY[0x1E0C95950]);
    v64 = v75;
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v62, v64);
    v63(v86, 0);
    *(_QWORD *)&v56[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = v58;
    swift_release();
  }
  v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v66 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)v32 + 352);
  swift_retain();
  v66(partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v65);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Participant(v31, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v67 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v67(v84, v39);
  v67(v85, v39);
  swift_release();
  return v49;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*a1, a2);
}

uint64_t specialized GroupSession.$receivedDataPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession._receivedDataPublisher;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized GroupSession.$receivedAttachmentPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession._receivedAttachmentPublisher;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized GroupSession.$catchupNeededPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for GroupSession._catchupNeededPublisher;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

_QWORD *sub_1A0DE2B74@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(uint64_t *__return_ptr))GroupSession.state.getter, a1);
}

uint64_t sub_1A0DE2B80(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.state.setter);
}

uint64_t sub_1A0DE2B8C()
{
  return 16;
}

__n128 sub_1A0DE2B98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE2BA4()
{
  return GroupSession.activity.getter();
}

void sub_1A0DE2BC4(uint64_t a1)
{
  specialized GroupSession.activity.setter(a1);
}

uint64_t sub_1A0DE2BE4()
{
  return 16;
}

__n128 sub_1A0DE2BF0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized GroupSession.$state.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for GroupSession.State(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v6 = type metadata accessor for Published.Publisher();
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v10 - v8, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t GroupSession.invalidateIfWaiting()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v5 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 288));
  aBlock[4] = a1;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v14, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void specialized GroupSession.activity.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 88);
  v10[2] = v3;
  v10[3] = v8;
  swift_getKeyPath();
  v10[0] = v3;
  v10[1] = v8;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_retain();
  v9 = static Published.subscript.setter();
  GroupSession.activity.didset(v9);
}

id outlined copy of GroupSession<A>.State<A>(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void outlined consume of GroupSession<A>.State<A>(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t specialized GroupSession.$activity.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t sub_1A0DE304C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.activeParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DE3074()
{
  swift_bridgeObjectRetain();
  return GroupSession.activeParticipants.setter();
}

uint64_t sub_1A0DE30AC()
{
  return 16;
}

__n128 sub_1A0DE30B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE30C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.internalActiveParticipants.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DE30EC()
{
  swift_bridgeObjectRetain();
  return GroupSession.internalActiveParticipants.setter();
}

uint64_t sub_1A0DE3114()
{
  return 16;
}

__n128 sub_1A0DE3120(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_1A0DE312C@<X0>(_QWORD *a1@<X8>)
{
  return keypath_getTm((_QWORD *(*)(uint64_t *__return_ptr))GroupSession.internalState.getter, a1);
}

_QWORD *keypath_getTm@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A0DE3170(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.state : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(id *))GroupSession.internalState.setter);
}

uint64_t sub_1A0DE317C()
{
  return 16;
}

__n128 sub_1A0DE3188(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void partial apply for closure #1 in GroupSession.updatePublicState()()
{
  uint64_t v0;

  closure #1 in GroupSession.updatePublicState()(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized GroupSession.$internalState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for GroupSession.State(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  v6 = type metadata accessor for Published.Publisher();
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v10 - v8, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for OS_dispatch_queue(255, a2);
    result = MEMORY[0x1A1B05BEC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A0DE32BC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t partial apply for closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  return closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2);
}

void partial apply for closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

void partial apply for closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4);
}

uint64_t sub_1A0DE3328()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1A0DE3340()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4, v4 + v10, *(_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  uint64_t *v1;

  return closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1[4], v1[2], v1[3], "LinkManager invalidated with error=%s");
}

uint64_t partial apply for closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  return closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  uint64_t *v1;

  return closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1[4], v1[2], v1[3], "Topic invalidated with error=%s");
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      v19 = v1;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  v19 = v1;
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00];
  v18 = v4;
  while ((v19 & 0xC000000000000001) != 0)
  {
    result = MEMORY[0x1A1B05010](v6, v19);
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_26;
LABEL_18:
    v20 = result;
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x1E0C95E18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = ~v10;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x1E0C95E20]);
      do
      {
        result = dispatch thunk of static Equatable.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          result = swift_release();
          v4 = v18;
          goto LABEL_11;
        }
        v11 = (v11 + 1) & v15;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
      }
      while ((v13 & (1 << v11)) != 0);
      v4 = v18;
    }
    *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v20;
    v16 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v16, 1);
    v17 = v16 + 1;
    if (v9)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v17;
LABEL_11:
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00];
    if (v6 == v4)
      return v3;
  }
  if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_28;
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_18;
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A0DE375C()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:));
}

uint64_t sub_1A0DE37A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in GroupSession.deinit()
{
  uint64_t v0;

  closure #1 in GroupSession.deinit(v0);
}

uint64_t partial apply for closure #1 in GroupSession.join()()
{
  uint64_t v0;

  return closure #1 in GroupSession.join()(v0);
}

uint64_t sub_1A0DE37E4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)()
{
  uint64_t v0;

  specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in GroupSession.leave()()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.leave());
}

uint64_t sub_1A0DE382C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.end()()
{
  uint64_t v0;

  return closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A0DE3844()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.requestForegroundPresentation()()
{
  uint64_t v0;

  return closure #1 in GroupSession.requestForegroundPresentation()(v0);
}

void partial apply for closure #1 in GroupSession.invalidateIfWaiting()()
{
  closure #1 in GroupSession.invalidateIfWaiting()();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionErrors, &type metadata for GroupSessionErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionErrors, &type metadata for GroupSessionErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionErrors and conformance GroupSessionErrors);
  }
  return result;
}

uint64_t partial apply for closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int64_t v26;
  unint64_t i;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t Strong;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  v61 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v65 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v56 - v8;
  v72 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v72 - 8);
  v11 = MEMORY[0x1E0C80A78](v72);
  v58 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v60 = (uint64_t)&v56 - v14;
  MEMORY[0x1E0C80A78](v13);
  v57 = (uint64_t)&v56 - v15;
  v16 = type metadata accessor for PubSubTopic.Participant();
  v74 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v75 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v56 - v19;
  v21 = *(_QWORD *)(a1 + 64);
  v68 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v69 = (unint64_t)(v22 + 63) >> 6;
  v67 = a2 + 16;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  v59 = MEMORY[0x1E0DEE9D8];
  v66 = a1;
  v63 = v9;
  v64 = v10;
  v71 = v16;
  v62 = v20;
  if (!v24)
    goto LABEL_8;
LABEL_4:
  v73 = (v24 - 1) & v24;
  for (i = __clz(__rbit64(v24)) | (v26 << 6); ; i = __clz(__rbit64(v33)) + (v26 << 6))
  {
    v35 = v74;
    (*(void (**)(char *, unint64_t, uint64_t))(v74 + 16))(v20, *(_QWORD *)(a1 + 56) + *(_QWORD *)(v74 + 72) * i, v16);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v75, v20, v16);
    if ((PubSubTopic.Participant.isSaltVerified.getter() & 1) == 0
      || (swift_beginAccess(), (Strong = swift_weakLoadStrong()) == 0))
    {
      v28 = PubSubTopic.Participant.participantID.getter();
      UUID.init(_:)();
      v29 = v72;
      *(_QWORD *)&v9[*(int *)(v72 + 24)] = v28;
      v30 = v75;
      v31 = &v9[*(int *)(v29 + 20)];
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0xE000000000000000;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v29);
      goto LABEL_6;
    }
    MEMORY[0x1E0C80A78](Strong);
    v37 = v10;
    v38 = type metadata accessor for AnyGroupActivity(0);
    *(&v56 - 2) = v38;
    v39 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
    *(&v56 - 1) = v39;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    *(&v56 - 2) = v38;
    *(&v56 - 1) = v39;
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    v41 = swift_release();
    v42 = v76;
    MEMORY[0x1E0C80A78](v41);
    *(&v56 - 2) = (uint64_t)v75;
    v43 = v65;
    v44 = v70;
    specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:), v42, v65);
    v70 = v44;
    swift_bridgeObjectRelease();
    v45 = v72;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v43, 1, v72) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v43, &demangling cache variable for type metadata for Participant?);
      a1 = v66;
      v9 = v63;
    }
    else
    {
      v46 = v43;
      v47 = v60;
      outlined init with take of Participant(v46, v60, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      swift_bridgeObjectRetain();
      v48 = String.count.getter();
      swift_bridgeObjectRelease();
      v9 = v63;
      if (v48)
      {
        swift_release();
        outlined init with take of Participant(v47, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v49 = v64;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v9, 0, 1, v45);
        a1 = v66;
        v29 = v45;
        v10 = v49;
        v30 = v75;
        v20 = v62;
        goto LABEL_6;
      }
      outlined destroy of Participant(v47, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      a1 = v66;
    }
    v20 = v62;
    v30 = v75;
    v50 = PubSubTopic.Participant.participantID.getter();
    specialized Set._Variant.insert(_:)(&v76, v50);
    swift_release();
    v10 = v64;
    v29 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v9, 1, 1, v72);
LABEL_6:
    v16 = v71;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v30, v71);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v29) == 1)
    {
      result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Participant?);
      v24 = v73;
      if (v73)
        goto LABEL_4;
    }
    else
    {
      v51 = v57;
      outlined init with take of Participant((uint64_t)v9, v57, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      outlined init with take of Participant(v51, v58, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
      v53 = *(_QWORD *)(v59 + 16);
      v52 = *(_QWORD *)(v59 + 24);
      if (v53 >= v52 >> 1)
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v59);
      v54 = v58;
      v55 = v59;
      *(_QWORD *)(v59 + 16) = v53 + 1;
      result = outlined init with take of Participant(v54, v55+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v53, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      v24 = v73;
      if (v73)
        goto LABEL_4;
    }
LABEL_8:
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v26 >= v69)
      goto LABEL_39;
    v33 = *(_QWORD *)(v68 + 8 * v26);
    if (!v33)
      break;
LABEL_20:
    v73 = (v33 - 1) & v33;
  }
  v34 = v26 + 1;
  if (v26 + 1 >= v69)
    goto LABEL_39;
  v33 = *(_QWORD *)(v68 + 8 * v34);
  if (v33)
    goto LABEL_19;
  v34 = v26 + 2;
  if (v26 + 2 >= v69)
    goto LABEL_39;
  v33 = *(_QWORD *)(v68 + 8 * v34);
  if (v33)
    goto LABEL_19;
  v34 = v26 + 3;
  if (v26 + 3 >= v69)
    goto LABEL_39;
  v33 = *(_QWORD *)(v68 + 8 * v34);
  if (v33)
    goto LABEL_19;
  v34 = v26 + 4;
  if (v26 + 4 >= v69)
  {
LABEL_39:
    swift_release();
    return v59;
  }
  v33 = *(_QWORD *)(v68 + 8 * v34);
  if (v33)
  {
LABEL_19:
    v26 = v34;
    goto LABEL_20;
  }
  while (1)
  {
    v26 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v26 >= v69)
      goto LABEL_39;
    v33 = *(_QWORD *)(v68 + 8 * v26);
    ++v34;
    if (v33)
      goto LABEL_20;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = type metadata accessor for Participant();
  v4 = MEMORY[0x1E0C80A78](v31);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v27 = (uint64_t)&v27 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v27 - v10;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v12 = 0;
    v28 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v13 = *(_QWORD *)(v9 + 72);
    do
    {
      outlined init with copy of Participant(v28 + v13 * v12, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      v16 = v31;
      v17 = &v11[*(int *)(v31 + 20)];
      String.hash(into:)();
      v18 = *(int *)(v16 + 24);
      Hasher._combine(_:)(*(_QWORD *)&v11[v18]);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(a2 + 32);
      v21 = v19 & ~v20;
      v22 = *(_QWORD *)(a2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21;
      v30 = v12;
      if ((v22 & 1) != 0)
      {
        v23 = ~v20;
        while (1)
        {
          outlined init with copy of Participant(*(_QWORD *)(a2 + 48) + v21 * v13, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          if ((static UUID.== infix(_:_:)() & 1) != 0)
          {
            v24 = &v6[*(int *)(v31 + 20)];
            v25 = *(_QWORD *)v24 == *(_QWORD *)v17 && *((_QWORD *)v24 + 1) == *((_QWORD *)v17 + 1);
            if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && *(_QWORD *)&v6[*(int *)(v31 + 24)] == *(_QWORD *)&v11[v18])
            {
              break;
            }
          }
          outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v21 = (v21 + 1) & v23;
          if (((*(_QWORD *)(a2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_3;
        }
        outlined destroy of Participant((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = v27;
        outlined init with copy of Participant((uint64_t)v11, v27, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v32 = a2;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v21, isUniquelyReferenced_nonNull_native);
        a2 = v32;
      }
      swift_bridgeObjectRelease();
      v12 = v30 + 1;
      outlined destroy of Participant((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    }
    while (v12 != v29);
  }
  return a2;
}

void (*specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(void *a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10))(char *, uint64_t, uint64_t)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t *v67;
  char *v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned __int8 v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  void (*v81)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v82)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[48];
  uint64_t v111;

  v102 = a3;
  v99 = a5;
  v100 = a6;
  v111 = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  MEMORY[0x1E0C80A78](v14);
  v101 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v98);
  v107 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1E0C80A78](v97);
  v106 = (uint64_t *)((char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v96 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v105 = (uint64_t)&v87 - v23;
  MEMORY[0x1E0C80A78](v22);
  v104 = (uint64_t)&v87 - v24;
  v25 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  v26 = MEMORY[0x1E0C80A78](v25);
  v95 = (uint64_t)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v94 = (uint64_t)&v87 - v29;
  MEMORY[0x1E0C80A78](v28);
  v103 = (uint64_t)&v87 - v30;
  v31 = objc_msgSend(a1, sel_endpoint);
  if (v31)
  {
    v87 = v25;
    v32 = v111;
    v88 = v31;
    v89 = a7;
    v108 = v19;
    v109 = v18;
    v91 = a9;
    v93 = a10;
    v33 = objc_msgSend(a1, sel_activity, v87);
    v34 = objc_msgSend(v33, sel_metadata);

    v92 = a8;
    v90 = a4;
    if (v34)
    {
      v35 = v103;
      GroupActivityMetadata.init(_:)(v34, v103);
      v36 = v109;
      v37 = v32;
    }
    else
    {
      v35 = v103;
      v37 = v32;
      if (one-time initialization token for generic != -1)
        swift_once();
      v39 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
      v40 = __swift_project_value_buffer(v39, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
      outlined init with copy of Participant(v40, v35, type metadata accessor for GroupActivityMetadata.ActivityType);
      v41 = (int *)type metadata accessor for GroupActivityMetadata(0);
      v42 = (_QWORD *)(v35 + v41[5]);
      *v42 = 0;
      v42[1] = 0;
      v43 = (_QWORD *)(v35 + v41[6]);
      *v43 = 0;
      v43[1] = 0;
      *(_QWORD *)(v35 + v41[7]) = 0;
      v44 = v35 + v41[8];
      v45 = type metadata accessor for URL();
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
      v46(v44, 1, 1, v45);
      *(_QWORD *)(v35 + v41[9]) = 0;
      *(_BYTE *)(v35 + v41[10]) = dyld_program_sdk_at_least() ^ 1;
      v46(v35 + v41[11], 1, 1, v45);
      v47 = v35 + v41[12];
      if (one-time initialization token for default != -1)
        swift_once();
      v48 = qword_1ED0B5BF8;
      v49 = qword_1ED0B5C10;
      *(_BYTE *)v47 = static SceneAssociationBehavior.default;
      *(_QWORD *)(v47 + 8) = v48;
      *(_OWORD *)(v47 + 16) = xmmword_1ED0B5C00;
      *(_QWORD *)(v47 + 32) = v49;
      *(_BYTE *)(v35 + v41[13]) = 0;
      *(_QWORD *)(v35 + v41[14]) = 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = v109;
    }
    swift_storeEnumTagMultiPayload();
    v50 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v51 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v105, v37, v36);
    v52 = objc_msgSend(a1, sel_activity);
    v53 = v94;
    outlined init with copy of Participant(v35, v94, type metadata accessor for AnyGroupActivity.MetadataProvider);
    v54 = objc_msgSend(v52, sel_activityIdentifier);
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v56;

    v57 = v95;
    outlined init with copy of Participant(v53, v95, type metadata accessor for AnyGroupActivity.MetadataProvider);
    v58 = objc_msgSend(v52, sel_applicationContext);
    v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v61 = v60;

    v62 = objc_msgSend(v52, sel_UUID);
    v63 = v96;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of Participant(v53, type metadata accessor for AnyGroupActivity.MetadataProvider);
    v64 = (char *)v106;
    v65 = v87;
    *v106 = v55;
    *((_QWORD *)v64 + 1) = v65;
    v66 = (int *)v97;
    outlined init with take of Participant(v57, (uint64_t)&v64[*(int *)(v97 + 20)], type metadata accessor for AnyGroupActivity.MetadataProvider);
    v67 = (uint64_t *)&v64[v66[6]];
    *v67 = v59;
    v67[1] = v61;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(&v64[v66[7]], v63, v109);
    v68 = &v64[v66[8]];
    *(_QWORD *)v68 = 0;
    *((_QWORD *)v68 + 1) = 0;
    LODWORD(v97) = objc_msgSend(v51, sel_isLocallyInitiated);
    v69 = objc_msgSend(v51, sel_isLightweightPrimaryInitiated);
    v70 = v107;
    v71 = v99;
    UUID.init(_:)();
    v72 = v98;
    *(_QWORD *)(v70 + *(int *)(v98 + 24)) = v71;
    v73 = v51;
    v74 = (_QWORD *)(v70 + *(int *)(v72 + 20));
    v75 = v89;
    *v74 = v100;
    v74[1] = v75;
    v76 = objc_msgSend(v51, sel_isFirstJoin);
    v77 = objc_msgSend(v51, sel_distributionCount);
    v78 = objc_msgSend(v73, sel_persistentSceneIdentifier);
    if (v78)
    {
      v79 = v78;
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v82 = v81;

    }
    else
    {
      v80 = 0;
      v82 = 0;
    }
    v83 = v93;
    outlined init with copy of AudioSessionAssertionManager(v93, (uint64_t)v110);
    v84 = v73;
    v85 = v101;
    specialized GroupSession.Timestamps.init(activitySession:)(v84, v101);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    swift_allocObject();
    a4 = (void (*)(char *, uint64_t, uint64_t))specialized GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v104, v105, v102, v90, (uint64_t)v106, v88, 0x7669746341796E61, (void *)0xEB00000000797469, v97, v69, v107, v76, 0, v77, v92, v80, v82, v91, (uint64_t)v110,
                                                          v85);
    __swift_destroy_boxed_opaque_existential_1Tm(v83);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v111, v109);
    outlined destroy of Participant(v103, type metadata accessor for AnyGroupActivity.MetadataProvider);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *v38 = 4;
    swift_willThrow();

    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(a10);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v111, v18);
  }
  return a4;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = type metadata accessor for Participant();
  v2 = *(_QWORD *)(v34 - 8);
  v3 = MEMORY[0x1E0C80A78](v34);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v30 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
    v9 = static _SetStorage.allocate(capacity:)();
    v10 = 0;
    v11 = v9 + 56;
    v32 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v12 = *(_QWORD *)(v2 + 72);
    v31 = v8;
    while (1)
    {
      v33 = v10;
      outlined init with copy of Participant(v32 + v12 * v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      dispatch thunk of Hashable.hash(into:)();
      v14 = v34;
      v15 = &v7[*(int *)(v34 + 20)];
      String.hash(into:)();
      v16 = *(int *)(v14 + 24);
      Hasher._combine(_:)(*(_QWORD *)&v7[v16]);
      v17 = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(v9 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)(v11 + 8 * (v19 >> 6));
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        v23 = ~v18;
        while (1)
        {
          outlined init with copy of Participant(*(_QWORD *)(v9 + 48) + v19 * v12, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          if ((static UUID.== infix(_:_:)() & 1) != 0)
          {
            v24 = &v5[*(int *)(v34 + 20)];
            v25 = *(_QWORD *)v24 == *(_QWORD *)v15 && *((_QWORD *)v24 + 1) == *((_QWORD *)v15 + 1);
            if ((v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && *(_QWORD *)&v5[*(int *)(v34 + 24)] == *(_QWORD *)&v7[v16])
            {
              break;
            }
          }
          outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
          v19 = (v19 + 1) & v23;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)(v11 + 8 * (v19 >> 6));
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            goto LABEL_16;
        }
        outlined destroy of Participant((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        outlined destroy of Participant((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v13 = v31;
      }
      else
      {
LABEL_16:
        v13 = v31;
        *(_QWORD *)(v11 + 8 * v20) = v22 | v21;
        result = outlined init with take of Participant((uint64_t)v7, *(_QWORD *)(v9 + 48) + v19 * v12, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
        v27 = *(_QWORD *)(v9 + 16);
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v9 + 16) = v29;
      }
      v10 = v33 + 1;
      if (v33 + 1 == v13)
        return v9;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t specialized GroupSession.__allocating_init(activitySession:publishQueue:)(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  void *v32;
  id v33;
  id v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void **v43;
  uint64_t v44;
  void *v45;
  uint64_t KeyPath;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  void *v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  void *v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[40];
  uint64_t v86;

  v78 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
  MEMORY[0x1E0C80A78](v4);
  v69 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v2 + 80);
  v7 = *(_QWORD *)(v2 + 88);
  v72 = v2;
  v86 = v7;
  v80 = v6;
  v9 = type metadata accessor for GroupSession.Timestamps(0, v6, v7, v8);
  MEMORY[0x1E0C80A78](v9);
  v71 = (uint64_t)&v62 - v10;
  v11 = type metadata accessor for Participant();
  MEMORY[0x1E0C80A78](v11);
  v70 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AnyGroupActivity(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v68 = (uint64_t *)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x1E0C80A78](v14);
  v74 = (char *)&v62 - v17;
  MEMORY[0x1E0C80A78](v16);
  v79 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v73 = v23;
  v24 = *(void (**)(void))(v23 + 16);
  v76 = (char *)&v62 - v25;
  v24();
  v67 = *(void (**)(char *, uint64_t, uint64_t))((char *)a1 + direct field offset for GroupSession.linkManager);
  v77 = v22;
  ((void (*)(char *, char *, uint64_t))v24)(v22, (char *)v67 + OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID, v19);
  v26 = (uint64_t)a1 + direct field offset for GroupSession.initiator;
  v27 = (uint64_t *)((char *)a1 + direct field offset for GroupSession.initiator + *(int *)(v11 + 20));
  v28 = *v27;
  v29 = v27[1];
  v30 = objc_allocWithZone(MEMORY[0x1E0D15360]);
  swift_bridgeObjectRetain();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v32 = (void *)MEMORY[0x1A1B048B4](v28, v29);
  swift_bridgeObjectRelease();
  v33 = objc_msgSend(v30, sel_initWithUUID_accountIdentifier_, isa, v32);

  objc_msgSend(v33, sel__setParticipantIdentifier_, *(_QWORD *)(v26 + *(int *)(v11 + 24)));
  v34 = objc_msgSend(v33, sel_accountIdentifier);

  v35 = (void (*)(char *, uint64_t, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  v83 = v13;
  v38 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
  v84 = v38;
  swift_getKeyPath();
  v39 = v13;
  v81 = v13;
  v82 = v38;
  swift_getKeyPath();
  v40 = v74;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v41 = v75;
  GroupActivity.init(activity:)(v40, v80, v86, v79);
  if (v41)
  {

    swift_bridgeObjectRelease();
    v42 = *(void (**)(char *, uint64_t))(v73 + 8);
    v42(v77, v19);
    v42(v76, v19);
  }
  else
  {
    v43 = (void **)((char *)a1 + *(_QWORD *)(*a1 + 248));
    v44 = swift_beginAccess();
    v45 = *v43;
    MEMORY[0x1E0C80A78](v44);
    KeyPath = swift_getKeyPath();
    v75 = v37;
    MEMORY[0x1E0C80A78](KeyPath);
    swift_getKeyPath();
    v74 = v45;
    v47 = v68;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v48 = (void *)v47[1];
    v73 = *v47;
    v66 = v48;
    swift_bridgeObjectRetain();
    outlined destroy of Participant((uint64_t)v47, type metadata accessor for AnyGroupActivity);
    v49 = *(_QWORD *)(*a1 + 264);
    LODWORD(v68) = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 + 256));
    v65 = *((unsigned __int8 *)a1 + v49);
    v50 = v67;
    v51 = v70;
    outlined init with copy of Participant((uint64_t)v67 + OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, v70, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v52 = (unsigned __int8 *)a1 + *(_QWORD *)(*a1 + 272);
    swift_beginAccess();
    v53 = *a1;
    v63 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 + 360));
    v64 = *v52;
    v54 = *(void **)((char *)v50 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig);
    v55 = (uint64_t *)((char *)a1 + *(_QWORD *)(v53 + 232));
    swift_beginAccess();
    v62 = *v55;
    v67 = v35;
    v56 = (void *)v55[1];
    v57 = *(uint64_t *)((char *)a1 + direct field offset for GroupSession.topicManager);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1 + *(_QWORD *)(*a1 + 312), (uint64_t)v85);
    v58 = v69;
    outlined init with copy of URL?((uint64_t)a1 + *(_QWORD *)(*a1 + 240), v69, &demangling cache variable for type metadata for GroupSession<AnyGroupActivity>.Timestamps);
    v59 = v71;
    GroupSession.Timestamps.init<A>(_:)(v58, v80, v39, v86, v38, v71);
    v38 = swift_allocObject();
    v60 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)((uint64_t)v76, (uint64_t)v77, v67, v75, v79, v74, v73, v66, v68, v65, v51, v64, v78, v63, v60, v62, v56, v57, (uint64_t)v85,
      v59);
  }
  return v38;
}

uint64_t sub_1A0DE54F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)()
{
  uint64_t v0;

  type metadata accessor for URL();
  closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1A0DE5614()
{
  return swift_deallocObject();
}

uint64_t sub_1A0DE5624()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  return closure #1 in GroupSession.cleanUpPlaybackSyncer()();
}

uint64_t partial apply for closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t *a1)
{
  return closure #1 in GroupSession.registerPlaybackSyncerLink(_:)(a1);
}

uint64_t partial apply for closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(uint64_t a1)
{
  return closure #2 in GroupSession.registerPlaybackSyncerLink(_:)(a1);
}

uint64_t sub_1A0DE566C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)()
{
  return closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)();
}

uint64_t partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(char *a1, uint64_t a2)
{
  return closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.init(groupSession:messenger:playbackSyncer:)(a1, a2);
}

uint64_t sub_1A0DE56B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlaybackSyncer.Message, @in_guaranteed GroupSessionMessenger.MessageContext) -> ()(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PlaybackSyncer.Message, GroupSessionMessenger.MessageContext));
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t partial apply for closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(void **a1)
{
  uint64_t *v1;

  return closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t partial apply for closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1A0DE5758()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Capabilities and conformance Capabilities()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Capabilities, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Capabilities, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Capabilities, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capabilities and conformance Capabilities;
  if (!lazy protocol witness table cache variable for type Capabilities and conformance Capabilities)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for Capabilities, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capabilities and conformance Capabilities);
  }
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in GroupSession<A>()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1A0DE58DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + direct field offset for GroupSession.playbackSyncerLink);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t sub_1A0DE5930()
{
  uint64_t v0;

  v0 = swift_retain();
  return GroupSession.playbackSyncerLink.setter(v0);
}

uint64_t sub_1A0DE5958()
{
  return 16;
}

__n128 sub_1A0DE5964(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5978()
{
  return 16;
}

__n128 sub_1A0DE5984(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5990@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.receivedDataPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DE59B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_199Tm(a1, a2, a3, a4, GroupSession.receivedDataPublisher.setter);
}

uint64_t sub_1A0DE59C4()
{
  return 16;
}

__n128 sub_1A0DE59D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE59DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.receivedAttachmentPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DE5A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_199Tm(a1, a2, a3, a4, GroupSession.receivedAttachmentPublisher.setter);
}

uint64_t keypath_set_199Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_1A0DE5A3C()
{
  return 16;
}

__n128 sub_1A0DE5A48(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5A54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupSession.catchupNeededPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DE5A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_199Tm(a1, a2, a3, a4, GroupSession.catchupNeededPublisher.setter);
}

uint64_t sub_1A0DE5A88()
{
  return 16;
}

__n128 sub_1A0DE5A94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5AA0()
{
  return 16;
}

__n128 sub_1A0DE5AAC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5AB8()
{
  return GroupSession.$state.getter();
}

uint64_t sub_1A0DE5AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized GroupSession.$state.setter(a1, a2, a3, a4);
}

uint64_t sub_1A0DE5AF8()
{
  return 16;
}

__n128 sub_1A0DE5B04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5B10()
{
  return 16;
}

__n128 sub_1A0DE5B1C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5B28()
{
  return GroupSession.$activity.getter();
}

uint64_t sub_1A0DE5B48(uint64_t a1)
{
  return specialized GroupSession.$activity.setter(a1);
}

uint64_t sub_1A0DE5B68()
{
  return 16;
}

__n128 sub_1A0DE5B74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5B80()
{
  return 16;
}

__n128 sub_1A0DE5B8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5B98()
{
  return GroupSession.$activeParticipants.getter();
}

uint64_t sub_1A0DE5BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(char *))GroupSession.$activeParticipants.setter);
}

uint64_t sub_1A0DE5BD4()
{
  return 16;
}

__n128 sub_1A0DE5BE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5BEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 336));
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1A0DE5C3C(uint64_t *a1)
{
  return GroupSession.capabilities.setter(*a1);
}

uint64_t sub_1A0DE5C60()
{
  return 16;
}

__n128 sub_1A0DE5C6C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5C78()
{
  return 16;
}

__n128 sub_1A0DE5C84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5C90()
{
  return GroupSession.$internalActiveParticipants.getter();
}

uint64_t sub_1A0DE5CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for GroupSession.$activeParticipants : <A>GroupSession<A>(a1, a2, a3, a4, (uint64_t (*)(char *))GroupSession.$internalActiveParticipants.setter);
}

uint64_t sub_1A0DE5CCC()
{
  return 16;
}

__n128 sub_1A0DE5CD8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5CE4()
{
  return 16;
}

__n128 sub_1A0DE5CF0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5CFC()
{
  return GroupSession.$internalState.getter();
}

uint64_t sub_1A0DE5D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized GroupSession.$internalState.setter(a1, a2, a3, a4);
}

uint64_t sub_1A0DE5D3C()
{
  return 16;
}

__n128 sub_1A0DE5D48(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0DE5D54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  a2[1] = result;
  return result;
}

uint64_t sub_1A0DE5DB8()
{
  return 32;
}

__n128 sub_1A0DE5DC4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5DD8()
{
  return 32;
}

__n128 sub_1A0DE5DE4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5DF8()
{
  return 32;
}

__n128 sub_1A0DE5E04(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5E10@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A0DE5E44(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 280))(*a1);
}

uint64_t sub_1A0DE5E70()
{
  return 32;
}

__n128 sub_1A0DE5E7C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5E88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0DE5EB8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 304);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0DE5EE8()
{
  return 32;
}

__n128 sub_1A0DE5EF4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5F00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0DE5F30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 328);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0DE5F60()
{
  return 32;
}

__n128 sub_1A0DE5F6C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1A0DE5F78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0DE5FA8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 352);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0DE5FD8()
{
  return 32;
}

__n128 sub_1A0DE5FE4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupSessionErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1A0DE60D8 + 4 * byte_1A0F0E401[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1A0DE610C + 4 * byte_1A0F0E3FC[v4]))();
}

uint64_t sub_1A0DE610C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0DE6114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0DE611CLL);
  return result;
}

uint64_t sub_1A0DE6128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0DE6130);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1A0DE6134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0DE613C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for GroupSessionErrors(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GroupSessionErrors(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionErrors()
{
  return &type metadata for GroupSessionErrors;
}

ValueMetadata *type metadata accessor for Capabilities()
{
  return &type metadata for Capabilities;
}

uint64_t method lookup function for GroupSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSession.__allocating_init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

void type metadata accessor for Published<Set<Participant>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Set<Participant>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Participant>);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Participant>>);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupSession.State(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for GroupSession.State(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for GroupSession.State(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for GroupSession.State(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t getEnumTag for GroupSession.State(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for GroupSession.State(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

uint64_t type metadata completion function for GroupSession.GroupSessionPlaybackSyncerLink()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for GroupSession.GroupSessionPlaybackSyncerLink()
{
  JUMPOUT(0x1A1B05B68);
}

uint64_t method lookup function for GroupSession.GroupSessionPlaybackSyncerLink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.onSendMessageCompletion.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.receivedMessageHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.participantLeftHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connected.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.groupSession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.messenger.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.__allocating_init(groupSession:messenger:playbackSyncer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.connect()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of GroupSession.GroupSessionPlaybackSyncerLink.sendMessage(_:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.Timestamps(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + *(int *)(a3 + 36)), (uint64_t *)((char *)a2 + *(int *)(a3 + 36)), v7);
    v10 = *(int *)(a3 + 40);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.Timestamps(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v8(a1 + *(int *)(a2 + 36), v4);
  v6 = a1 + *(int *)(a2 + 40);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  v9 = *(int *)(a3 + 40);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  v9 = *(int *)(a3 + 40);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *initializeWithTake for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  v9 = *(int *)(a3 + 40);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for GroupSession.Timestamps(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)], v6);
  v9 = *(int *)(a3 + 40);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Timestamps()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0DE6BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GroupSession.Timestamps()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0DE6C44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64) -> (@out ())(a1, a2, a3, *(uint64_t (**)(_QWORD *, uint64_t *))(v3 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ()(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16));
}

uint64_t objectdestroy_181Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1A0DE7018()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.shouldDismissPlayback(allowingCancellation:completionHandler:)(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message, &type metadata for PlaybackSyncer.Message);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message, &type metadata for PlaybackSyncer.Message);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message and conformance PlaybackSyncer.Message);
  }
  return result;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageWrapper(uint64_t a1)
{
  destroy for GroupSessionMessenger.MessageWrapper(a1);
  return a1;
}

uint64_t sub_1A0DE712C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return specialized closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, a2, *a3, *(_BYTE *)(v4 + 16), a4);
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed GroupSessionMessenger.MessageWrapper, @in_guaranteed GroupSessionMessenger.MessageContext, @in_guaranteed SendReliability) -> (@out (A, GroupSessionMessenger.MessageContext)?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of GroupSessionMessenger.MessageType(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for GroupSessionMessenger.MessageType(a2, a1);
  return a2;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageType(uint64_t a1)
{
  destroy for GroupSessionMessenger.MessageType(a1);
  return a1;
}

uint64_t outlined init with copy of Decodable & Encodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of TypedPayloadBox(uint64_t a1)
{
  destroy for TypedPayloadBox(a1);
  return a1;
}

uint64_t partial apply for closure #1 in GroupSession.createPlaybackEvent(originatorUUID:avCommand:rate:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void partial apply for closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(id *a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t outlined consume of Set<Participant>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in GroupSession.sendResource(atURL:to:metadata:completion:)(a1, v2, a2);
}

uint64_t partial apply for specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #1 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, v2);
}

uint64_t partial apply for specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, void *a2)
{
  return specialized closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2);
}

void partial apply for specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  specialized closure #5 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

void partial apply for specialized closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized closure #6 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, a4);
}

uint64_t sub_1A0DE73C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return specialized closure #8 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, a2, a3, *a4, v4 + v10, *(_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  return specialized closure #9 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t partial apply for specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #10 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  uint64_t v1;

  return specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1, "LinkManager invalidated with error=%s");
}

uint64_t partial apply for specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #12 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*a1, v2);
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #14 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(void *a1)
{
  uint64_t v1;

  return specialized closure #11 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, v1, "Topic invalidated with error=%s");
}

uint64_t partial apply for specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return specialized closure #15 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t sub_1A0DE7538()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for specialized closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  uint64_t v0;

  return specialized closure #1 in GroupSession.requestEncryptionKey(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A0DE754C()
{
  return swift_deallocObject();
}

uint64_t sub_1A0DE755C()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void partial apply for specialized closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A0DE7588()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for specialized closure #1 in GroupSession.updatePublicState()()
{
  uint64_t v0;

  specialized closure #1 in GroupSession.updatePublicState()(v0);
}

uint64_t objectdestroy_104Tm()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)()
{
  uint64_t v0;

  specialized closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(*(_QWORD *)(v0 + 16));
}

void partial apply for closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()()
{
  return specialized closure #1 in GroupSession.cleanUpPlaybackSyncer()();
}

BOOL partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Participant() + 24));
  return v1 == PubSubTopic.Participant.participantID.getter();
}

uint64_t sub_1A0DE7650()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A0DE765C()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void partial apply for implicit closure #2 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(char *a1@<X8>)
{
  uint64_t v1;

  AnyGroupActivity.init(tuConversationActivity:)(*(id *)(v1 + 16), a1);
}

uint64_t outlined init with take of Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1A1B05CC4);
  return result;
}

void partial apply for specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;

  specialized closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t sub_1A0DE77C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t *v0;

  return specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v0[2], v0[3], v0[4]);
}

void partial apply for specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  specialized closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t sub_1A0DE7804()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in GroupSession.capabilities.didset()
{
  uint64_t v0;

  specialized closure #1 in GroupSession.capabilities.didset(v0);
}

uint64_t sub_1A0DE7834()
{
  return swift_deallocObject();
}

id partial apply for specialized closure #1 in closure #1 in GroupSession.capabilities.didset(void **a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 336));
  swift_beginAccess();
  return objc_msgSend(v2, sel_updateCapabilitiesWithCapabilities_, *v3);
}

uint64_t sub_1A0DE78AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Error>);
  return closure #1 in closure #1 in GroupSession.uploadAttachment(id:attachment:developerMetadata:)(a1);
}

void partial apply for closure #1 in closure #1 in GroupSession.requestForegroundPresentation()()
{
  uint64_t v0;

  closure #1 in closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A0DE7970()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in GroupSession.end()()
{
  uint64_t v0;

  closure #1 in closure #1 in GroupSession.end()(v0);
}

uint64_t sub_1A0DE79A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.leave()()
{
  uint64_t v0;

  return closure #1 in closure #1 in GroupSession.leave()(v0);
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.leave()()
{
  uint64_t v0;

  specialized closure #1 in GroupSession.capabilities.didset(v0);
}

uint64_t sub_1A0DE79E8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(a1, v1);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(void *a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.leave()(a1, v1);
}

void partial apply for closure #1 in closure #1 in GroupSession.join()()
{
  uint64_t v0;

  closure #1 in closure #1 in GroupSession.join()(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.join()()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in GroupSession.join()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A0DE7A80()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1A0DE7AD8()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

id partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A0DE7AEC()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.join()(a1, a2, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A0DE7B18()
{
  return objectdestroy_85Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t objectdestroy_85Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A0DE7B7C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in closure #13 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1, *(_QWORD *)(v2 + 40), a2);
}

uint64_t partial apply for implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return implicit closure #3 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v1[4], v1[2], v1[3], a1);
}

uint64_t objectdestroy_399Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t v0;

  closure #1 in closure #4 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t sub_1A0DE7C4C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  uint64_t *v0;

  return specialized closure #1 in closure #3 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(v0[4], v0[5], v0[6]);
}

void partial apply for closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)()
{
  closure #1 in closure #2 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)();
}

uint64_t sub_1A0DE7C94()
{
  return swift_deallocObject();
}

uint64_t sub_1A0DE7CA4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0DE7CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Participant() - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Participant() - 8) + 80);
  closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9));
}

void partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, v2);
}

uint64_t sub_1A0DE7DCC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSession.updateActivity(_:)()
{
  return GroupSession.invalidationBlock(execute:)(partial apply for closure #1 in closure #1 in GroupSession.updateActivity(_:));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.updateActivity(_:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in GroupSession.updateActivity(_:)(v0);
}

uint64_t sub_1A0DE7E04()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v6 = v3 + v5[8];
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = v3 + v5[11];
    if (!v9(v10, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v2 + v1[6]), *(_QWORD *)(v2 + v1[6] + 8));
  v11 = v2 + v1[7];
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyGroupActivity(0) - 8) + 80);
  return closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(void **a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(a1, v1);
}

void partial apply for closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(_QWORD **a1)
{
  uint64_t v1;

  closure #2 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(a1, v1);
}

uint64_t sub_1A0DE8034()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(*(_QWORD *)(v0 + 16));
}

id partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.updateActivity(_:)(id *a1)
{
  uint64_t v1;

  return objc_msgSend(*a1, sel_updateActivityWithActivity_, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Participant(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)partial apply(void **a1)
{
  partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEncryptionKey(for:)(a1);
}

void implicit closure #2 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)partial apply(char *a1@<X8>)
{
  partial apply for implicit closure #2 in closure #7 in GroupSession.init(id:groupUUID:initiatorHandle:activity:remoteEndpoint:queueLabel:locallyInitiated:lightweightPrimaryInitiated:localParticipant:isFirstJoin:publishQueue:distributionCount:unreliableMessengerConfig:sceneSessionIdentifier:topicManager:audioSessionAssertionManager:timestamps:)(a1);
}

uint64_t partial apply for closure #1 in closure #2 in GroupSession.GroupSessionPlaybackSyncerLink.connect()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return partial apply for closure #1 in GroupSession.GroupSessionPlaybackSyncerLink.connect()(a1, a2);
}

void closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)partial apply(void **a1)
{
  partial apply for closure #1 in closure #1 in GroupSession.logAttachmentEvent(report:reportEvent:)(a1);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD00000000000001ALL;
  if (v2)
    v4 = 0x80000001A0F18DF0;
  else
    v4 = 0x80000001A0F18E10;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000018;
  else
    v5 = 0xD00000000000001ALL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001A0F18E10;
  else
    v6 = 0x80000001A0F18DF0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 116;
  else
    v2 = 100;
  if ((a2 & 1) != 0)
    v3 = 116;
  else
    v3 = 100;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A0DE84A8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A0DE850C + 4 * byte_1A0F0EAC4[a2]))(0x746E65746E6F63);
}

uint64_t sub_1A0DE850C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E65746E6F63 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void AnyGroupActivity.init(tuConversationActivity:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, sel_metadata);
  if (v15)
  {
    v16 = v15;
    v36 = v6;
    v17 = v16;
    GroupActivityMetadata.init(_:)(v16, (uint64_t)v14);
    v18 = objc_msgSend(a1, sel_activityIdentifier);
    v37 = v2;
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v21;
    v35 = v20;

    outlined init with copy of Participant((uint64_t)v14, (uint64_t)v11, type metadata accessor for GroupActivityMetadata);
    swift_storeEnumTagMultiPayload();
    v22 = objc_msgSend(a1, sel_applicationContext);
    v33 = v5;
    v23 = v22;
    v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    v27 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of Participant((uint64_t)v14, type metadata accessor for GroupActivityMetadata);
    v28 = v34;
    *(_QWORD *)a2 = v35;
    *((_QWORD *)a2 + 1) = v28;
    v29 = (int *)type metadata accessor for AnyGroupActivity(0);
    outlined init with take of Participant((uint64_t)v11, (uint64_t)&a2[v29[5]], type metadata accessor for AnyGroupActivity.MetadataProvider);
    v30 = (uint64_t *)&a2[v29[6]];
    *v30 = v24;
    v30[1] = v26;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&a2[v29[7]], v8, v33);
    v31 = &a2[v29[8]];
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
  }
  else
  {
    lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError();
    swift_allocError();
    *v32 = 1;
    swift_willThrow();

  }
}

unint64_t lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError;
  if (!lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityError, &type metadata for GroupActivityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError;
  if (!lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityError, &type metadata for GroupActivityError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityError and conformance GroupActivityError);
  }
  return result;
}

uint64_t AnyGroupActivity.tuConversationActivity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for AnyGroupActivity(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x1E0C80A78](v1);
  outlined init with copy of Participant(v0, (uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  outlined init with take of Participant((uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4, type metadata accessor for AnyGroupActivity);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t AnyGroupActivity.init(tuConversationActivity:metadataProvider:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_activityIdentifier);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v14;

  outlined init with copy of Participant(a2, (uint64_t)v11, type metadata accessor for AnyGroupActivity.MetadataProvider);
  v15 = objc_msgSend(a1, sel_applicationContext);
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  v19 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  outlined destroy of Participant(a2, type metadata accessor for AnyGroupActivity.MetadataProvider);
  v20 = v26;
  *a3 = v13;
  a3[1] = v20;
  v21 = (int *)type metadata accessor for AnyGroupActivity(0);
  outlined init with take of Participant((uint64_t)v11, (uint64_t)a3 + v21[5], type metadata accessor for AnyGroupActivity.MetadataProvider);
  v22 = (uint64_t *)((char *)a3 + v21[6]);
  *v22 = v16;
  v22[1] = v18;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))((char *)a3 + v21[7], v8, v28);
  v24 = (uint64_t *)((char *)a3 + v21[8]);
  *v24 = 0;
  v24[1] = 0;
  return result;
}

uint64_t AnyGroupActivity.activityIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyGroupActivity.activityIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnyGroupActivity.activityIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AnyGroupActivity(0);
  return outlined init with copy of Participant(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
}

uint64_t AnyGroupActivity.metadataProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 20);
  return outlined assign with take of AnyGroupActivity.MetadataProvider(a1, v3);
}

uint64_t (*AnyGroupActivity.metadataProvider.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AnyGroupActivity(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.content.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AnyGroupActivity.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AnyGroupActivity.content.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AnyGroupActivity(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 28);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AnyGroupActivity.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 28);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AnyGroupActivity.uuid.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AnyGroupActivity(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AnyGroupActivity.staticIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyGroupActivity.staticIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AnyGroupActivity.staticIdentifier.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AnyGroupActivity(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t default argument 1 of AnyGroupActivity.init(activityIdentifier:metadataProvider:content:uuid:staticIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for generic != -1)
    swift_once();
  v2 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v3, a1, type metadata accessor for GroupActivityMetadata.ActivityType);
  v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v5 = (_QWORD *)(a1 + v4[5]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + v4[6]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + v4[7]) = 0;
  v7 = a1 + v4[8];
  v8 = type metadata accessor for URL();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  *(_QWORD *)(a1 + v4[9]) = 0;
  *(_BYTE *)(a1 + v4[10]) = dyld_program_sdk_at_least() ^ 1;
  v9(a1 + v4[11], 1, 1, v8);
  v10 = v4[12];
  if (one-time initialization token for default != -1)
    swift_once();
  v11 = a1 + v10;
  v12 = qword_1ED0B5BF8;
  v13 = qword_1ED0B5C10;
  *(_BYTE *)v11 = static SceneAssociationBehavior.default;
  *(_QWORD *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(v11 + 32) = v13;
  *(_BYTE *)(a1 + v4[13]) = 0;
  *(_QWORD *)(a1 + v4[14]) = 2;
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t AnyGroupActivity.init(activityIdentifier:metadataProvider:content:uuid:staticIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;

  *a9 = a1;
  a9[1] = a2;
  v16 = (int *)type metadata accessor for AnyGroupActivity(0);
  outlined init with take of Participant(a3, (uint64_t)a9 + v16[5], type metadata accessor for AnyGroupActivity.MetadataProvider);
  v17 = (_QWORD *)((char *)a9 + v16[6]);
  *v17 = a4;
  v17[1] = a5;
  v18 = (char *)a9 + v16[7];
  v19 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a6, v19);
  v21 = (_QWORD *)((char *)a9 + v16[8]);
  *v21 = a7;
  v21[1] = a8;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AnyGroupActivity.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1A0DE9100()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyGroupActivity.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A0DE9240()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AnyGroupActivity.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1A0DE9374()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnyGroupActivity.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AnyGroupActivity.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A0DE9444 + 4 * byte_1A0F0EAD4[*v0]))();
}

void sub_1A0DE9444(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

void sub_1A0DE9460(_QWORD *a1@<X8>)
{
  *a1 = 1684632949;
  a1[1] = 0xE400000000000000;
}

void sub_1A0DE9474(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001A0F18D50;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A0DE94CC + 4 * byte_1A0F0EAD8[*v0]))(0xD000000000000012, 0x80000001A0F18D30);
}

uint64_t sub_1A0DE94CC()
{
  return 0x746E65746E6F63;
}

uint64_t sub_1A0DE94E4()
{
  return 1684632949;
}

unint64_t sub_1A0DE94F4()
{
  return 0xD000000000000010;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyGroupActivity.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AnyGroupActivity.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AnyGroupActivity.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance AnyGroupActivity.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyGroupActivity.CodingKeys()
{
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyGroupActivity.CodingKeys()
{
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AnyGroupActivity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnyGroupActivity.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24));
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AnyGroupActivity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  char v55;

  v44 = a2;
  v3 = type metadata accessor for UUID();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x1E0C80A78](v3);
  v45 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnyGroupActivity.CodingKeys>);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  MEMORY[0x1E0C80A78](v5);
  v53 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnyGroupActivity(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&v10[*(int *)(v8 + 20)];
  if (one-time initialization token for generic != -1)
    swift_once();
  v12 = type metadata accessor for GroupActivityMetadata.ActivityType(0);
  v13 = __swift_project_value_buffer(v12, (uint64_t)static GroupActivityMetadata.ActivityType.generic);
  outlined init with copy of Participant(v13, v11, type metadata accessor for GroupActivityMetadata.ActivityType);
  v14 = (int *)type metadata accessor for GroupActivityMetadata(0);
  v15 = (_QWORD *)(v11 + v14[5]);
  *v15 = 0;
  v15[1] = 0;
  v16 = (_QWORD *)(v11 + v14[6]);
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)(v11 + v14[7]) = 0;
  v17 = v11 + v14[8];
  v18 = type metadata accessor for URL();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v17, 1, 1, v18);
  *(_QWORD *)(v11 + v14[9]) = 0;
  *(_BYTE *)(v11 + v14[10]) = dyld_program_sdk_at_least() ^ 1;
  v19(v11 + v14[11], 1, 1, v18);
  v20 = v11 + v14[12];
  if (one-time initialization token for default != -1)
    swift_once();
  v21 = qword_1ED0B5BF8;
  v22 = qword_1ED0B5C10;
  *(_BYTE *)v20 = static SceneAssociationBehavior.default;
  *(_QWORD *)(v20 + 8) = v21;
  v51 = xmmword_1ED0B5C00;
  *(_OWORD *)(v20 + 16) = xmmword_1ED0B5C00;
  *(_QWORD *)(v20 + 32) = v22;
  *(_BYTE *)(v11 + v14[13]) = 0;
  *(_QWORD *)(v11 + v14[14]) = 2;
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_storeEnumTagMultiPayload();
  v23 = &v10[*(int *)(v7 + 32)];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v50 = v23;
  v24 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v25 = (uint64_t *)v10;
  lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = v53;
  v27 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v27)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v24);
    outlined destroy of Participant(v11, type metadata accessor for AnyGroupActivity.MetadataProvider);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v28 = v7;
    v43 = v25;
    LOBYTE(v54) = 0;
    v29 = v49;
    v30 = v26;
    v31 = KeyedDecodingContainer.decode(_:forKey:)();
    v32 = v43;
    *v43 = v31;
    v32[1] = v33;
    v55 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v24;
    *(_OWORD *)((char *)v32 + *(int *)(v28 + 24)) = v54;
    LOBYTE(v54) = 2;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v35 = v45;
    v36 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))((uint64_t)v43 + *(int *)(v28 + 28), v35, v36);
    LOBYTE(v54) = 3;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v29);
    v40 = (uint64_t *)v50;
    swift_bridgeObjectRelease();
    *v40 = v37;
    v40[1] = v39;
    v41 = v43;
    outlined init with copy of Participant((uint64_t)v43, v44, type metadata accessor for AnyGroupActivity);
    __swift_destroy_boxed_opaque_existential_1Tm(v34);
    return outlined destroy of Participant((uint64_t)v41, type metadata accessor for AnyGroupActivity);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyGroupActivity@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnyGroupActivity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyGroupActivity(_QWORD *a1)
{
  return AnyGroupActivity.encode(to:)(a1);
}

void static AnyGroupActivity.activityIdentifier.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyGroupActivity.metadata.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v3 = type metadata accessor for AnyGroupActivity(0);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AnyGroupActivity.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  outlined init with copy of Participant(v2, v1, type metadata accessor for AnyGroupActivity);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v24 = v13;
    *(_DWORD *)v12 = 136315138;
    outlined init with copy of Participant(v7, v10, type metadata accessor for AnyGroupActivity);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    outlined init with copy of AnyGroupActivity?(v10, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v9) == 1)
    {
      v14 = 0xE300000000000000;
      v15 = 7104878;
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 88);
      v17 = *(_QWORD *)(v0 + 96);
      outlined init with take of Participant(*(_QWORD *)(v0 + 56), v17, type metadata accessor for AnyGroupActivity);
      outlined init with copy of Participant(v17, v16, type metadata accessor for AnyGroupActivity);
      v15 = String.init<A>(reflecting:)();
      v14 = v18;
      outlined destroy of Participant(v17, type metadata accessor for AnyGroupActivity);
    }
    v19 = *(_QWORD *)(v0 + 104);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for AnyGroupActivity?);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v19, type metadata accessor for AnyGroupActivity);
    _os_log_impl(&dword_1A0DB3000, v4, v5, "Requesting metadata from GroupActivity %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {
    outlined destroy of Participant(*(_QWORD *)(v0 + 104), type metadata accessor for AnyGroupActivity);
  }

  outlined init with copy of Participant(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 72) + 20), *(_QWORD *)(v0 + 48), type metadata accessor for AnyGroupActivity.MetadataProvider);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v21 = *(_QWORD **)(v0 + 48);
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(v0 + 112) = *v21;
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v22;
    type metadata accessor for GroupActivityMetadata(0);
    *v22 = v0;
    v22[1] = AnyGroupActivity.metadata.getter;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    outlined init with take of Participant((uint64_t)v21, *(_QWORD *)(v0 + 24), type metadata accessor for GroupActivityMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v12[1] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v10 = lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(&lazy protocol witness table cache variable for type Future<GroupActivityMetadata, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  MEMORY[0x1A1B04530](partial apply for closure #1 in closure #1 in AnyGroupActivity.metadata.getter, v9, v4, v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  v2 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1E0C80A78](v2);
  outlined init with copy of Participant(a1, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t static AnyGroupActivity._identifiable(by:)()
{
  return 1;
}

void protocol witness for static GroupActivity.activityIdentifier.getter in conformance AnyGroupActivity()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance AnyGroupActivity(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return AnyGroupActivity.metadata.getter(a1);
}

uint64_t protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity()
{
  return 1;
}

uint64_t closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(uint64_t, char);
  uint64_t v16;
  uint64_t v18[2];

  v18[0] = a3;
  v6 = type metadata accessor for AnyGroupActivity(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  outlined init with copy of Participant(a3, (uint64_t)v9, type metadata accessor for AnyGroupActivity);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  outlined init with take of Participant((uint64_t)v9, v12 + v11, type metadata accessor for AnyGroupActivity);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  swift_allocObject();
  swift_retain();
  v18[1] = Future.init(_:)();
  outlined init with copy of Participant(v18[0], (uint64_t)v9, type metadata accessor for AnyGroupActivity);
  v14 = swift_allocObject();
  outlined init with take of Participant((uint64_t)v9, v14 + v11, type metadata accessor for AnyGroupActivity);
  v15 = (uint64_t (**)(uint64_t, char))(v14 + ((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v15 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ();
  v15[1] = (uint64_t (*)(uint64_t, char))v10;
  v16 = lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(&lazy protocol witness table cache variable for type Future<GroupActivityMetadata, Never> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
  MEMORY[0x1A1B04530](partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter, v14, v13, v16);
  swift_release();
  return swift_release();
}

uint64_t _s15GroupActivities03AnyA8ActivityV014tuConversationD07Combine6FutureCySo014TUConversationD0Cs5Error_pGvgyys6ResultOyAIsAJ_pGccfU_TA_0(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, closure #1 in AnyGroupActivity.tuConversationActivity.getter);
}

uint64_t outlined assign with take of AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t *a2, void (*a3)(id, _QWORD))
{
  id v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class isa;
  Class v13;
  void *v14;
  id v15;
  id v16;

  v5 = GroupActivityMetadata.tuMetadata.getter();
  v6 = (uint64_t *)((char *)a2 + *(int *)(type metadata accessor for AnyGroupActivity(0) + 24));
  v8 = *v6;
  v7 = v6[1];
  v10 = *a2;
  v9 = a2[1];
  v11 = objc_allocWithZone(MEMORY[0x1E0DBD248]);
  outlined copy of Data._Representation(v8, v7);
  swift_bridgeObjectRetain();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = UUID._bridgeToObjectiveC()().super.isa;
  v14 = (void *)MEMORY[0x1A1B048B4](v10, v9);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v11, sel_initWithMetadata_applicationContext_uuid_activityIdentifier_, v5, isa, v13, v14);

  outlined consume of Data._Representation(v8, v7);
  v16 = v15;
  a3(v15, 0);

}

uint64_t AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  type metadata accessor for GroupActivityMetadata(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Creating sessionCreationRequest with AnyGroupActivity", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter;
  return AnyGroupActivity.metadata.getter(*(_QWORD *)(v0 + 24));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSData v12;
  void *v13;
  NSUUID v14;
  void *v15;
  id v16;
  id v18;

  v2 = *(uint64_t **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v18 = GroupActivityMetadata.tuMetadata.getter();
  outlined destroy of Participant(v1, type metadata accessor for GroupActivityMetadata);
  v3 = type metadata accessor for AnyGroupActivity(0);
  v4 = (uint64_t *)((char *)v2 + *(int *)(v3 + 24));
  v6 = *v4;
  v5 = v4[1];
  v7 = *v2;
  v8 = v2[1];
  v9 = (uint64_t *)((char *)v2 + *(int *)(v3 + 32));
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v5);
  swift_bridgeObjectRetain();
  v12.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = (void *)MEMORY[0x1A1B048B4](v7, v8);
  swift_bridgeObjectRelease();
  v14.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v10)
  {
    v15 = (void *)MEMORY[0x1A1B048B4](v11, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD258]), sel_initWithMetadata_applicationContext_activityIdentifier_uuid_staticIdentifier_, v18, v12.super.isa, v13, v14.super.isa, v15);

  outlined consume of Data._Representation(v6, v5);
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v16);
}

uint64_t AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t AnyGroupActivity.tuConversationActivity<A>(as:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = AnyGroupActivity.tuConversationActivity<A>(as:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a4;
  v28 = a3;
  v25 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for CheckedContinuation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for AnyGroupActivity(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  outlined init with copy of Participant(a2, (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  outlined init with take of Participant((uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for AnyGroupActivity);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  v29 = Future.init(_:)();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16 = v6;
  v15(v9, a1, v6);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = swift_allocObject();
  v20 = v27;
  v19 = v28;
  *(_QWORD *)(v18 + 16) = v27;
  *(_QWORD *)(v18 + 24) = v19;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v21(v18 + ((v17 + 32) & ~v17), v9, v16);
  v15(v9, v25, v16);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  v21(v22 + ((v17 + 24) & ~v17), v9, v16);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>, (uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(void **a1)
{
  void *v1;
  id v2;
  uint64_t result;

  v1 = *a1;
  type metadata accessor for TUConversationActivity();
  v2 = v1;
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(id *a1)
{
  id v1;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(throwing:)();
}

uint64_t specialized closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v6 = type metadata accessor for AnyGroupActivity(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  outlined init with copy of Participant(a3, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnyGroupActivity);
  v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = a2;
  outlined init with take of Participant((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, type metadata accessor for AnyGroupActivity);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue(), (uint64_t)v14);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[2] = a4;
  v5[3] = a5;
  v5[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  v6 = swift_task_alloc();
  v5[5] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v5[6] = v7;
  *v7 = v5;
  v7[1] = specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue();
  return AnyGroupActivity.metadata.getter(v6);
}

uint64_t specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void (**)(uint64_t))(v0 + 16);
  swift_storeEnumTagMultiPayload();
  v2(v1);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v1, &demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnyGroupActivity.CodingKeys, &unk_1E44F66E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnyGroupActivity.CodingKeys, &unk_1E44F66E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnyGroupActivity.CodingKeys, &unk_1E44F66E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnyGroupActivity.CodingKeys, &unk_1E44F66E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGroupActivity.CodingKeys and conformance AnyGroupActivity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CB0368], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t partial apply for closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AnyGroupActivity.metadata.getter(a1, v1);
}

uint64_t outlined init with copy of AnyGroupActivity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1, v1[3], v1[4], v1[2]);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyGroupActivity(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v9 = *v10;
      swift_retain();
    }
    else
    {
      v12 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = (int *)type metadata accessor for GroupActivityMetadata(0);
      v14 = v13[5];
      v15 = (_QWORD *)((char *)v9 + v14);
      v16 = (_QWORD *)((char *)v10 + v14);
      v17 = v16[1];
      *v15 = *v16;
      v15[1] = v17;
      v18 = v13[6];
      v19 = (_QWORD *)((char *)v9 + v18);
      v20 = (_QWORD *)((char *)v10 + v18);
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      v22 = v13[7];
      v23 = *(void **)((char *)v10 + v22);
      *(_QWORD *)((char *)v9 + v22) = v23;
      v24 = v13[8];
      __dst = (char *)v9 + v24;
      v53 = (char *)v10 + v24;
      v25 = type metadata accessor for URL();
      v54 = *(_QWORD *)(v25 - 8);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      v27 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = v23;
      if (v26(v53, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v53, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v27);
      }
      *(_QWORD *)((char *)v9 + v13[9]) = *(_QWORD *)((char *)v10 + v13[9]);
      *((_BYTE *)v9 + v13[10]) = *((_BYTE *)v10 + v13[10]);
      v30 = v13[11];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      if (v26((char *)v10 + v30, 1, v27))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v31, v32, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v31, 0, 1, v27);
      }
      v34 = v13[12];
      v35 = (char *)v9 + v34;
      v36 = (char *)v10 + v34;
      *v35 = *v36;
      v37 = *((_QWORD *)v36 + 2);
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      *((_QWORD *)v35 + 2) = v37;
      v38 = *((_QWORD *)v36 + 4);
      *((_QWORD *)v35 + 3) = *((_QWORD *)v36 + 3);
      *((_QWORD *)v35 + 4) = v38;
      *((_BYTE *)v9 + v13[13]) = *((_BYTE *)v10 + v13[13]);
      *(_QWORD *)((char *)v9 + v13[14]) = *(_QWORD *)((char *)v10 + v13[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    v39 = a3[6];
    v40 = (uint64_t *)((char *)v4 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = *v41;
    v43 = v41[1];
    outlined copy of Data._Representation(*v41, v43);
    *v40 = v42;
    v40[1] = v43;
    v44 = a3[7];
    v45 = (char *)v4 + v44;
    v46 = (char *)a2 + v44;
    v47 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = a3[8];
    v49 = (uint64_t *)((char *)v4 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AnyGroupActivity(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v5 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v7 = v4 + v6[8];
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v11 = v4 + v6[11];
    if (!v10(v11, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v12 = a1 + a2[7];
  v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnyGroupActivity(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  id v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char *__dst;
  int *v54;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v8 = *v9;
    swift_retain();
  }
  else
  {
    v54 = v3;
    v10 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = (int *)type metadata accessor for GroupActivityMetadata(0);
    v12 = v11[5];
    v13 = (_QWORD *)((char *)v8 + v12);
    v14 = (_QWORD *)((char *)v9 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v11[6];
    v17 = (_QWORD *)((char *)v8 + v16);
    v18 = (_QWORD *)((char *)v9 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v11[7];
    v21 = *(void **)((char *)v9 + v20);
    *(_QWORD *)((char *)v8 + v20) = v21;
    v22 = v11[8];
    __dst = (char *)v8 + v22;
    v51 = (char *)v9 + v22;
    v23 = type metadata accessor for URL();
    v52 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v21;
    v26 = v24;
    if (v24(v51, 1, v23))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v51, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v51, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v23);
    }
    *(_QWORD *)((char *)v8 + v11[9]) = *(_QWORD *)((char *)v9 + v11[9]);
    *((_BYTE *)v8 + v11[10]) = *((_BYTE *)v9 + v11[10]);
    v28 = v11[11];
    v29 = (char *)v8 + v28;
    v30 = (char *)v9 + v28;
    if (v26((char *)v9 + v28, 1, v23))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v29, v30, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v29, 0, 1, v23);
    }
    v3 = v54;
    v32 = v11[12];
    v33 = (char *)v8 + v32;
    v34 = (char *)v9 + v32;
    *v33 = *v34;
    v35 = *((_QWORD *)v34 + 2);
    *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
    *((_QWORD *)v33 + 2) = v35;
    v36 = *((_QWORD *)v34 + 4);
    *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
    *((_QWORD *)v33 + 4) = v36;
    *((_BYTE *)v8 + v11[13]) = *((_BYTE *)v9 + v11[13]);
    *(_QWORD *)((char *)v8 + v11[14]) = *(_QWORD *)((char *)v9 + v11[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  v37 = v3[6];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  *v38 = v40;
  v38[1] = v41;
  v42 = v3[7];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  v46 = v3[8];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnyGroupActivity(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v47;
  uint64_t v48;
  char *__dst;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    outlined destroy of Participant((uint64_t)a1 + v6, type metadata accessor for AnyGroupActivity.MetadataProvider);
    type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v7 = *v8;
      swift_retain();
    }
    else
    {
      v9 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      v10 = (int *)type metadata accessor for GroupActivityMetadata(0);
      v11 = v10[5];
      v12 = (_QWORD *)((char *)v7 + v11);
      v13 = (_QWORD *)((char *)v8 + v11);
      *v12 = *v13;
      v12[1] = v13[1];
      v14 = v10[6];
      v15 = (_QWORD *)((char *)v7 + v14);
      v16 = (_QWORD *)((char *)v8 + v14);
      *v15 = *v16;
      v15[1] = v16[1];
      v17 = v10[7];
      v18 = *(void **)((char *)v8 + v17);
      *(_QWORD *)((char *)v7 + v17) = v18;
      v19 = v10[8];
      __dst = (char *)v7 + v19;
      v47 = (char *)v8 + v19;
      v20 = type metadata accessor for URL();
      v48 = *(_QWORD *)(v20 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      v22 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v18;
      if (v21(v47, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(__dst, v47, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v22);
      }
      *(_QWORD *)((char *)v7 + v10[9]) = *(_QWORD *)((char *)v8 + v10[9]);
      *((_BYTE *)v7 + v10[10]) = *((_BYTE *)v8 + v10[10]);
      v25 = v10[11];
      v26 = (char *)v7 + v25;
      v27 = (char *)v8 + v25;
      if (v21((char *)v8 + v25, 1, v22))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v26, v27, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v26, 0, 1, v22);
      }
      v29 = v10[12];
      v30 = (char *)v7 + v29;
      v31 = (char *)v8 + v29;
      *v30 = *v31;
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 3) = *((_QWORD *)v31 + 3);
      *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
      *((_BYTE *)v7 + v10[13]) = *((_BYTE *)v8 + v10[13]);
      *(_QWORD *)((char *)v7 + v10[14]) = *(_QWORD *)((char *)v8 + v10[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v32 = a3[6];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = *v34;
  v36 = v34[1];
  outlined copy of Data._Representation(*v34, v36);
  v37 = *v33;
  v38 = v33[1];
  *v33 = v35;
  v33[1] = v36;
  outlined consume of Data._Representation(v37, v38);
  v39 = a3[7];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[8];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  *v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AnyGroupActivity(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  char *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    v11 = (int *)type metadata accessor for GroupActivityMetadata(0);
    *(_OWORD *)&v7[v11[5]] = *(_OWORD *)&v8[v11[5]];
    *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
    *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
    v12 = v11[8];
    __dst = &v7[v12];
    v13 = &v8[v12];
    v14 = type metadata accessor for URL();
    v15 = *(_QWORD *)(v14 - 8);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    v30 = v15;
    if (v31(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *(_QWORD *)&v7[v11[9]] = *(_QWORD *)&v8[v11[9]];
    v7[v11[10]] = v8[v11[10]];
    v17 = v11[11];
    v18 = &v7[v17];
    v19 = &v8[v17];
    if (v31(&v8[v17], 1, v14))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v18, 0, 1, v14);
    }
    v21 = v11[12];
    v22 = &v7[v21];
    v23 = &v8[v21];
    v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
    v7[v11[13]] = v8[v11[13]];
    *(_QWORD *)&v7[v11[14]] = *(_QWORD *)&v8[v11[14]];
    swift_storeEnumTagMultiPayload();
  }
  v25 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for AnyGroupActivity(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of Participant((uint64_t)a1 + v7, type metadata accessor for AnyGroupActivity.MetadataProvider);
    v10 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = (int *)type metadata accessor for GroupActivityMetadata(0);
      *(_OWORD *)&v8[v12[5]] = *(_OWORD *)&v9[v12[5]];
      *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
      *(_QWORD *)&v8[v12[7]] = *(_QWORD *)&v9[v12[7]];
      v13 = v12[8];
      __dst = &v8[v13];
      v14 = &v9[v13];
      v15 = type metadata accessor for URL();
      v16 = *(_QWORD *)(v15 - 8);
      v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      v39 = v16;
      if (v40(v14, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      *(_QWORD *)&v8[v12[9]] = *(_QWORD *)&v9[v12[9]];
      v8[v12[10]] = v9[v12[10]];
      v18 = v12[11];
      v19 = &v8[v18];
      v20 = &v9[v18];
      if (v40(&v9[v18], 1, v15))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v19, v20, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v19, 0, 1, v15);
      }
      v22 = v12[12];
      v23 = &v8[v22];
      v24 = &v9[v22];
      v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
      v8[v12[13]] = v9[v12[13]];
      *(_QWORD *)&v8[v12[14]] = *(_QWORD *)&v9[v12[14]];
      swift_storeEnumTagMultiPayload();
    }
  }
  v26 = a3[6];
  v27 = *(_QWORD *)((char *)a1 + v26);
  v28 = *(_QWORD *)((char *)a1 + v26 + 8);
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)((char *)a2 + v26);
  outlined consume of Data._Representation(v27, v28);
  v29 = a3[7];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  v33 = a3[8];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0DEC464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for UUID();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AnyGroupActivity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0DEC510(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for UUID();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyGroupActivity.MetadataProvider(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      v7 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for GroupActivityMetadata(0);
      v9 = v8[5];
      v10 = (_QWORD *)((char *)a1 + v9);
      v11 = (_QWORD *)((char *)a2 + v9);
      v12 = v11[1];
      *v10 = *v11;
      v10[1] = v12;
      v13 = v8[6];
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v8[7];
      v18 = *(void **)((char *)a2 + v17);
      *(_QWORD *)((char *)a1 + v17) = v18;
      v19 = v8[8];
      __dst = (char *)a1 + v19;
      v20 = (char *)a2 + v19;
      v21 = type metadata accessor for URL();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = v18;
      if (v23(v20, 1, v21))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
      *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
      v26 = v8[11];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      if (v23((char *)a2 + v26, 1, v21))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v27, v28, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v27, 0, 1, v21);
      }
      v30 = v8[12];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      *v31 = *v32;
      v33 = *((_QWORD *)v32 + 2);
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      *((_QWORD *)v31 + 2) = v33;
      v34 = *((_QWORD *)v32 + 4);
      *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
      *((_QWORD *)v31 + 4) = v34;
      *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
      *(_QWORD *)((char *)a1 + v8[14]) = *(_QWORD *)((char *)a2 + v8[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnyGroupActivity.MetadataProvider(uint64_t a1)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_release();
  v3 = type metadata accessor for GroupActivityDescription();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  v4 = (int *)type metadata accessor for GroupActivityMetadata(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v5 = a1 + v4[8];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + v4[11];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnyGroupActivity.MetadataProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *__dst;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    v6 = v5[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    v9 = v8[1];
    *v7 = *v8;
    v7[1] = v9;
    v10 = v5[6];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = v5[7];
    v15 = *(void **)((char *)a2 + v14);
    *(_QWORD *)((char *)a1 + v14) = v15;
    v16 = v5[8];
    __dst = (char *)a1 + v16;
    v17 = (char *)a2 + v16;
    v18 = type metadata accessor for URL();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v15;
    if (v20(v17, 1, v18))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
    *((_BYTE *)a1 + v5[10]) = *((_BYTE *)a2 + v5[10]);
    v23 = v5[11];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (v20((char *)a2 + v23, 1, v18))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v18);
    }
    v27 = v5[12];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    *v28 = *v29;
    v30 = *((_QWORD *)v29 + 2);
    *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 2) = v30;
    v31 = *((_QWORD *)v29 + 4);
    *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
    *((_QWORD *)v28 + 4) = v31;
    *((_BYTE *)a1 + v5[13]) = *((_BYTE *)a2 + v5[13]);
    *(_QWORD *)((char *)a1 + v5[14]) = *(_QWORD *)((char *)a2 + v5[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AnyGroupActivity.MetadataProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      v4 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
      v6 = v5[5];
      v7 = (_QWORD *)((char *)a1 + v6);
      v8 = (_QWORD *)((char *)a2 + v6);
      *v7 = *v8;
      v7[1] = v8[1];
      v9 = v5[6];
      v10 = (_QWORD *)((char *)a1 + v9);
      v11 = (_QWORD *)((char *)a2 + v9);
      *v10 = *v11;
      v10[1] = v11[1];
      v12 = v5[7];
      v13 = *(void **)((char *)a2 + v12);
      *(_QWORD *)((char *)a1 + v12) = v13;
      v14 = v5[8];
      __dst = (char *)a1 + v14;
      v15 = (char *)a2 + v14;
      v16 = type metadata accessor for URL();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = v13;
      if (v18(v15, 1, v16))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
      *((_BYTE *)a1 + v5[10]) = *((_BYTE *)a2 + v5[10]);
      v21 = v5[11];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      if (v18((char *)a2 + v21, 1, v16))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, v23, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
      }
      v25 = v5[12];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      *v26 = *v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
      *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
      *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
      *((_BYTE *)a1 + v5[13]) = *((_BYTE *)a2 + v5[13]);
      *(_QWORD *)((char *)a1 + v5[14]) = *(_QWORD *)((char *)a2 + v5[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnyGroupActivity.MetadataProvider(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for GroupActivityMetadata(0);
    *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
    *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
    *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
    v8 = v7[8];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_QWORD *)&a1[v7[9]] = *(_QWORD *)&a2[v7[9]];
    a1[v7[10]] = a2[v7[10]];
    v15 = v7[11];
    v16 = &a1[v15];
    v17 = &a2[v15];
    if (v13(&a2[v15], 1, v11))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    v19 = v7[12];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    a1[v7[13]] = a2[v7[13]];
    *(_QWORD *)&a1[v7[14]] = *(_QWORD *)&a2[v7[14]];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for AnyGroupActivity.MetadataProvider(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  if (a1 != a2)
  {
    outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity.MetadataProvider);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for GroupActivityDescription();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for GroupActivityMetadata(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v8 = v7[8];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for URL();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (v13(v10, 1, v11))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_QWORD *)&a1[v7[9]] = *(_QWORD *)&a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      v15 = v7[11];
      v16 = &a1[v15];
      v17 = &a2[v15];
      if (v13(&a2[v15], 1, v11))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
      }
      v19 = v7[12];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v22;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
      a1[v7[13]] = a2[v7[13]];
      *(_QWORD *)&a1[v7[14]] = *(_QWORD *)&a2[v7[14]];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AnyGroupActivity.MetadataProvider()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t getEnumTagSinglePayload for AnyGroupActivity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyGroupActivity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A0DED398 + 4 * byte_1A0F0EAE1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A0DED3CC + 4 * byte_1A0F0EADC[v4]))();
}

uint64_t sub_1A0DED3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0DED3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0DED3DCLL);
  return result;
}

uint64_t sub_1A0DED3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0DED3F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A0DED3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0DED3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AnyGroupActivity.CodingKeys()
{
  return &unk_1E44F66E0;
}

unint64_t specialized AnyGroupActivity.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnyGroupActivity.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v6 = v3 + v5[8];
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = v3 + v5[11];
    if (!v9(v10, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v2 + v1[6]), *(_QWORD *)(v2 + v1[6] + 8));
  v11 = v2 + v1[7];
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AnyGroupActivity(0) - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1A0DED76C()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = type metadata accessor for CheckedContinuation();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(void **a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  return closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1);
}

uint64_t sub_1A0DED858()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = type metadata accessor for CheckedContinuation();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(id *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  return closure #2 in closure #1 in AnyGroupActivity.tuConversationActivity<A>(as:)(a1);
}

unint64_t type metadata accessor for TUConversationActivity()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversationActivity;
  if (!lazy cache variable for type metadata for TUConversationActivity)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  }
  return result;
}

uint64_t sub_1A0DED97C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AnyGroupActivity.metadata.getter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GroupActivityMetadata, Never>);
  return closure #1 in closure #1 in AnyGroupActivity.metadata.getter(a1);
}

uint64_t lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C96108], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A0DEDA60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t partial apply for specialized closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, a2, specialized closure #1 in GroupActivity.awaitMetadataValue());
}

uint64_t sub_1A0DEDACC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v6 = v3 + v5[8];
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = v3 + v5[11];
    if (!v9(v10, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v2 + v1[6]), *(_QWORD *)(v2 + v1[6] + 8));
  v11 = v2 + v1[7];
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for AnyGroupActivity(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in closure #1 in AnyGroupActivity.tuConversationActivity.getter(a1, (uint64_t *)(v1 + v4), *(void (**)(id, _QWORD))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1A0DEDD0C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  swift_release();
  v3 = v0 + ((v2 + 48) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v5 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v7 = v4 + v6[8];
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v11 = v4 + v6[11];
    if (!v10(v11, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v3 + v1[6]), *(_QWORD *)(v3 + v1[6] + 8));
  v12 = v3 + v1[7];
  v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  type metadata accessor for AnyGroupActivity(0);
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(a1, v4, v5, v6, v7);
}

uint64_t PresenceGroupSessionProviderObserver.groupSessionService.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v0 + 16);
}

uint64_t PresenceGroupSessionProviderObserver.groupSessionService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PresenceGroupSessionProviderObserver.groupSessionService.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return PresenceGroupSessionProviderObserver.groupSessionService.modify;
}

void PresenceGroupSessionProviderObserver.groupSessionService.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PresenceGroupSessionProviderObserver.provider.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PresenceGroupSessionProviderObserver.presenceSession.getter()
{
  return swift_retain();
}

uint64_t PresenceGroupSessionProviderObserver.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PresenceGroupSessionProviderObserver.cancellables.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PresenceGroupSessionProviderObserver.cancellables.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

void *PresenceGroupSessionProviderObserver.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static PresenceGroupSessionProviderObserver.maxAllowedDevices;
}

uint64_t static PresenceGroupSessionProviderObserver.maxAllowedDevices.getter()
{
  return 33;
}

_QWORD *PresenceGroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t ObjectType;

  v8 = (_QWORD *)swift_allocObject();
  ObjectType = swift_getObjectType();
  return specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v8, ObjectType, a4);
}

_QWORD *PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v4, ObjectType, a4);
}

uint64_t PresenceGroupSessionProviderObserver.join()()
{
  _QWORD *v0;
  _QWORD *v1;

  v1[14] = v0;
  v1[15] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD);
  _QWORD *v21;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v25)(_QWORD *);
  uint64_t (*v26)(void);
  uint64_t v27;

  v1 = v0[15];
  v2 = v0[16];
  v3 = (_QWORD *)v0[14];
  v25 = *(uint64_t (**)(_QWORD *))(*v3 + 152);
  v4 = (void (*)(_QWORD *, _QWORD))v25(v0 + 2);
  v6 = v5;
  swift_bridgeObjectRelease();
  *v6 = MEMORY[0x1E0DEE9E8];
  v4(v0 + 2, 0);
  v7 = type metadata accessor for TaskPriority();
  v23 = v2;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8 = v24(v2, 1, 1, v7);
  v9 = v3[6];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 272))(v8);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = v1;
  v0[17] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceGroupSessionProviderObserver.join(), (uint64_t)v12);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  v13 = AnyCancellable.init(_:)();
  v14 = (void (*)(_QWORD *, _QWORD))v25(v0 + 6);
  specialized Set._Variant.insert(_:)(&v27, v13);
  swift_release();
  v14(v0 + 6, 0);
  v15 = v24(v23, 1, 1, v7);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 184))(v15);
  v17 = swift_allocObject();
  swift_weakInit();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v16;
  v18[5] = v17;
  v0[18] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v23, (uint64_t)&async function pointer to partial apply for closure #3 in PresenceGroupSessionProviderObserver.join(), (uint64_t)v18);
  swift_allocObject();
  swift_retain();
  v19 = AnyCancellable.init(_:)();
  v20 = (void (*)(_QWORD *, _QWORD))v25(v0 + 10);
  specialized Set._Variant.insert(_:)(&v27, v19);
  swift_release();
  v20(v0 + 10, 0);
  v26 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v9 + 360) + *(_QWORD *)(*(_QWORD *)v9 + 360));
  v21 = (_QWORD *)swift_task_alloc();
  v0[19] = v21;
  *v21 = v0;
  v21[1] = PresenceGroupSessionProviderObserver.join();
  return v26();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PresenceGroupSessionProviderObserver.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[33] = a4;
  v5[34] = a5;
  v6 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v5[35] = v6;
  v5[36] = *(_QWORD *)(v6 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>);
  v5[41] = v7;
  v5[42] = *(_QWORD *)(v7 - 8);
  v5[43] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator);
  v5[44] = v8;
  v5[45] = *(_QWORD *)(v8 - 8);
  v5[46] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PresenceGroupSessionProviderObserver.join()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[42];
  v2 = v0[43];
  v3 = v0[41];
  v0[27] = v0[33];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceSessionInfo, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1A1B04650](v4, v5);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  v0[47] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSessionInfo, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[48] = v6;
  *v6 = v0;
  v6[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 400) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _OWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;

  v1 = (uint64_t)(v0 + 25);
  v2 = v0[25];
  if (!v2)
    goto LABEL_18;
  Strong = swift_weakLoadStrong();
  v0[49] = Strong;
  if (!Strong)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[45] + 8))(v0[46], v0[44]);
    swift_bridgeObjectRelease();
LABEL_48:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
  v4 = *(_QWORD *)(Strong + 40);
  v61 = (_QWORD *)Strong;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  v0[30] = v2;
  CurrentValueSubject.send(_:)();
  swift_release();
  v60 = v0 + 9;
  specialized Collection.prefix(_:)(33, v2, (uint64_t)(v0 + 9));
  v7 = v0[9];
  v6 = v0[10];
  v0[51] = v7;
  v0[52] = v6;
  v8 = *((_BYTE *)v0 + 88);
  v9 = v0[13];
  v69 = v0[12];
  v10 = *((_BYTE *)v0 + 112);
  v11 = v0[15];
  swift_bridgeObjectRelease();
  *((_OWORD *)v0 + 11) = *((_OWORD *)v0 + 6);
  *((_BYTE *)v0 + 192) = *((_BYTE *)v0 + 112);
  v0[31] = v11;
  outlined copy of Set<A>.Index._Variant<A>(v7, v6, v8);
  v65 = v6;
  outlined copy of Set<A>.Index._Variant<A>(v7, v6, v8);
  v62 = (uint64_t)(v0 + 22);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index((uint64_t)(v0 + 22));
  v63 = (uint64_t)(v0 + 31);
  v1 = v7;
  outlined retain of Set<PresenceSessionInfo.Participant>((uint64_t)(v0 + 31));
  if ((v8 & 1) != 0 || (v10 & 1) != 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    (*(void (**)(_QWORD, _QWORD))(v0[45] + 8))(v0[46], v0[44]);
    if (one-time initialization token for groupSessionProviderObserver != -1)
LABEL_63:
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint64_t *)(v1 + 32);
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v72 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_beginAccess();
      v28 = swift_weakLoadStrong();
      if (v28)
      {
        *v25 = v28;
        type metadata accessor for PresenceGroupSessionProviderObserver();
        v29 = String.init<A>(reflecting:)();
        v31 = v30;
      }
      else
      {
        v31 = 0xE300000000000000;
        v29 = 7104878;
      }
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v23, v24, "%s PresenceSession's sessionInfo publisher has finished", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v27, -1, -1);
      MEMORY[0x1A1B05CC4](v26, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    goto LABEL_48;
  }
  v12 = v6;
  v64 = v0 + 25;
  v59 = v0 + 2;
  v67 = v11 + 56;
  v68 = v0;
  v66 = v7;
  while (1)
  {
    if ((_DWORD)v12 != (_DWORD)v9)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v13 = v69;
    if (v7 == v69)
      break;
    if (v7 < v1)
      goto LABEL_51;
    if ((_DWORD)v9 != (_DWORD)v65)
      goto LABEL_52;
    if (v7 >= v69)
      goto LABEL_53;
    if (v7 < 0 || v7 >= 1 << *(_BYTE *)(v11 + 32))
      goto LABEL_54;
    if (((*(_QWORD *)(v67 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_55;
    if (*(_DWORD *)(v11 + 36) != (_DWORD)v9)
      goto LABEL_56;
    v15 = v0[39];
    v14 = v0[40];
    v17 = v0 + 35;
    v16 = v0[35];
    v18 = *(_QWORD *)(v17[1] + 72);
    outlined init with copy of Participant(*(_QWORD *)(v11 + 48) + v18 * v7, v14, type metadata accessor for PresenceSessionInfo.Participant);
    v7 = specialized _NativeSet.index(after:)(v7, v12, 0, v11);
    v12 = v19;
    v21 = v20;
    outlined init with take of Participant(v14, v15, type metadata accessor for PresenceSessionInfo.Participant);
    LODWORD(v16) = *(unsigned __int8 *)(v15 + *(int *)(v16 + 24));
    outlined destroy of Participant(v15, type metadata accessor for PresenceSessionInfo.Participant);
    if ((_DWORD)v16 == 1)
    {
      v1 = v66;
      outlined consume of Set<Participant>.Index._Variant(v66, v65, 0);
      v13 = v69;
      outlined consume of Set<Participant>.Index._Variant(v69, v9, 0);
      swift_bridgeObjectRelease();
      outlined consume of Set<Participant>.Index._Variant(v7, v12, v21 & 1);
      outlined copy of Set<A>.Index._Variant<A>(v66, v65, 0);
      outlined copy of Set<A>.Index._Variant<A>(v66, v65, 0);
      outlined retain of Set<PresenceSessionInfo.Participant>.Index(v62);
      outlined retain of Set<PresenceSessionInfo.Participant>(v63);
      v12 = v65;
      v35 = v66;
      while (1)
      {
        v0 = v68;
        if ((_DWORD)v12 != (_DWORD)v9)
          goto LABEL_57;
        if (v35 == v13)
          goto LABEL_37;
        if (v35 < v1)
          goto LABEL_58;
        if (v35 >= v13)
          goto LABEL_59;
        if (v35 < 0 || v35 >= 1 << *(_BYTE *)(v11 + 32))
          goto LABEL_60;
        if (((*(_QWORD *)(v67 + (((unint64_t)v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_61;
        if (*(_DWORD *)(v11 + 36) != (_DWORD)v9)
          goto LABEL_62;
        v37 = v68[37];
        v36 = v68[38];
        v38 = v68[35];
        outlined init with copy of Participant(*(_QWORD *)(v11 + 48) + v35 * v18, v36, type metadata accessor for PresenceSessionInfo.Participant);
        v35 = specialized _NativeSet.index(after:)(v35, v12, 0, v11);
        v12 = v39;
        v41 = v40;
        outlined init with take of Participant(v36, v37, type metadata accessor for PresenceSessionInfo.Participant);
        v0 = (_QWORD *)*(unsigned __int8 *)(v37 + *(int *)(v38 + 24));
        outlined destroy of Participant(v37, type metadata accessor for PresenceSessionInfo.Participant);
        if ((v0 & 1) == 0)
        {
          outlined consume of Set<Participant>.Index._Variant(v66, v65, 0);
          outlined consume of Set<Participant>.Index._Variant(v69, v9, 0);
          swift_bridgeObjectRelease();
          v51 = outlined consume of Set<Participant>.Index._Variant(v35, v12, v41 & 1);
          v52 = (*(uint64_t (**)(uint64_t))(*v61 + 112))(v51);
          v0 = v68;
          v68[53] = v52;
          if (v52)
          {
            v54 = v53;
            v55 = swift_getObjectType();
            v56 = v61[4];
            v68[54] = v56;
            v57 = *(_QWORD *)(v61[5] + 8);
            v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v54 + 16)
                                                                             + *(_QWORD *)(v54 + 16));
            swift_unknownObjectRetain();
            v58 = (_QWORD *)swift_task_alloc();
            v68[55] = v58;
            *v58 = v68;
            v58[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
            return v71(v56, v57, v55, v54);
          }
          outlined consume of Set<Participant>.Index._Variant(v66, v65, 0);
          outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
          outlined release of Set<PresenceSessionInfo.Participant>(v63);
          swift_release();
          goto LABEL_43;
        }
        v1 = v66;
        v13 = v69;
        if ((v41 & 1) != 0)
        {
          __break(1u);
LABEL_37:
          v32 = v65;
          outlined consume of Set<Participant>.Index._Variant(v1, v65, 0);
          v33 = v13;
          v34 = v9;
          goto LABEL_38;
        }
      }
    }
    v0 = v68;
    v1 = v66;
    if ((v21 & 1) != 0)
      goto LABEL_17;
  }
  v32 = v65;
  outlined consume of Set<Participant>.Index._Variant(v1, v65, 0);
  v33 = v69;
  v34 = v9;
LABEL_38:
  outlined consume of Set<Participant>.Index._Variant(v33, v34, 0);
  swift_bridgeObjectRelease();
  outlined consume of Set<Participant>.Index._Variant(v13, v12, 0);
  if (one-time initialization token for groupSessionProviderObserver != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Log.groupSessionProviderObserver);
  outlined copy of Set<A>.Index._Variant<A>(v1, v32, 0);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index(v62);
  outlined retain of Set<PresenceSessionInfo.Participant>(v63);
  outlined copy of Set<A>.Index._Variant<A>(v1, v32, 0);
  outlined retain of Set<PresenceSessionInfo.Participant>.Index(v62);
  outlined retain of Set<PresenceSessionInfo.Participant>(v63);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    v70 = swift_slowAlloc();
    v72 = v70;
    *(_DWORD *)v45 = 136315138;
    v0 = v68;
    v46 = *((_OWORD *)v60 + 1);
    *v59 = *(_OWORD *)v60;
    *(_OWORD *)(v64 - 21) = v46;
    *(_OWORD *)(v64 - 19) = *((_OWORD *)v60 + 2);
    *(v64 - 17) = v60[6];
    outlined copy of Set<A>.Index._Variant<A>(v1, v32, 0);
    outlined retain of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined retain of Set<PresenceSessionInfo.Participant>(v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<Set<PresenceSessionInfo.Participant>>);
    v47 = String.init<A>(reflecting:)();
    v68[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);
    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);
    _os_log_impl(&dword_1A0DB3000, v43, v44, "Not setting up IDSGroupSession since we don't have >1 other device %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v70, -1, -1);
    MEMORY[0x1A1B05CC4](v45, -1, -1);
    swift_release();

    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);
  }
  else
  {
    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);
    swift_release();
    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);
    outlined consume of Set<Participant>.Index._Variant(v1, v32, 0);
    outlined release of Set<PresenceSessionInfo.Participant>.Index(v62);
    outlined release of Set<PresenceSessionInfo.Participant>(v63);

  }
LABEL_43:
  v49 = (_QWORD *)swift_task_alloc();
  v0[57] = v49;
  *v49 = v0;
  v49[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 400);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  outlined consume of Set<Participant>.Index._Variant(v0[51], v0[52], 0);
  outlined release of Set<PresenceSessionInfo.Participant>.Index((uint64_t)(v0 + 22));
  outlined release of Set<PresenceSessionInfo.Participant>((uint64_t)(v0 + 31));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[57] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in PresenceGroupSessionProviderObserver.join();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 400) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 408);
  v1 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 352);
  swift_release();
  outlined consume of Set<Participant>.Index._Variant(v2, v1, 0);
  outlined release of Set<PresenceSessionInfo.Participant>.Index(v0 + 176);
  outlined release of Set<PresenceSessionInfo.Participant>(v0 + 248);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in PresenceGroupSessionProviderObserver.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[13] = a4;
  v5[14] = a5;
  v6 = type metadata accessor for UUID();
  v5[15] = v6;
  v5[16] = *(_QWORD *)(v6 - 8);
  v5[17] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>);
  v5[18] = v7;
  v5[19] = *(_QWORD *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator);
  v5[21] = v8;
  v5[22] = *(_QWORD *)(v8 - 8);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #3 in PresenceGroupSessionProviderObserver.join()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[18];
  v0[8] = v0[13];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSession.State, Never>);
  v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PresenceSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PresenceSession.State, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1A1B04650](v4, v5);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  v0[24] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PresenceSession.State, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[25] = v6;
  *v6 = v0;
  v6[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 258) = *(_BYTE *)(v0 + 256);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t (*v33)(_QWORD, uint64_t, uint64_t);
  uint64_t v34;

  if (*(_BYTE *)(v0 + 258) == 3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    if (one-time initialization token for groupSessionProviderObserver != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v34 = v5;
      *(_DWORD *)v4 = 136315138;
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        *(_QWORD *)(v0 + 88) = Strong;
        type metadata accessor for PresenceGroupSessionProviderObserver();
        v7 = String.init<A>(reflecting:)();
        v9 = v8;
      }
      else
      {
        v9 = 0xE300000000000000;
        v7 = 7104878;
      }
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v2, v3, "%s PresenceSession's state publisher has finished", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v5, -1, -1);
      MEMORY[0x1A1B05CC4](v4, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    goto LABEL_21;
  }
  v10 = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 216) = v10;
  if (!v10)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = (_QWORD *)v10;
  if (one-time initialization token for groupSessionProviderObserver != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.groupSessionProviderObserver);
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = *(_BYTE *)(v0 + 258);
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v34 = v17;
    *(_DWORD *)v16 = 136315394;
    *(_QWORD *)(v0 + 96) = v11;
    type metadata accessor for PresenceGroupSessionProviderObserver();
    swift_retain();
    v18 = String.init<A>(reflecting:)();
    *(_QWORD *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v34);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    *(_BYTE *)(v0 + 257) = v15;
    v20 = String.init<A>(reflecting:)();
    *(_QWORD *)(v16 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v13, v14, "%s observed state transition to: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    MEMORY[0x1A1B05CC4](v16, -1, -1);

  }
  else
  {

    v22 = swift_release_n();
  }
  if (*(_BYTE *)(v0 + 258) == 2
    && (v23 = (*(uint64_t (**)(uint64_t))(*v11 + 112))(v22), (*(_QWORD *)(v0 + 224) = v23) != 0))
  {
    v25 = v24;
    v26 = *(_QWORD *)(v0 + 136);
    ObjectType = swift_getObjectType();
    v28 = v11[5];
    v29 = swift_getObjectType();
    GroupSessionProvider.uuid.getter(v29, *(_QWORD *)(v28 + 8), v26);
    v33 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v25 + 32) + *(_QWORD *)(v25 + 32));
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v30;
    *v30 = v0;
    v30[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
    return v33(*(_QWORD *)(v0 + 136), ObjectType, v25);
  }
  else
  {
    swift_release();
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v32;
    *v32 = v0;
    v32[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  v4 = v2[16];
  v3 = v2[17];
  v5 = v2[15];
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v1;
  *v1 = v0;
  v1[1] = closure #3 in PresenceGroupSessionProviderObserver.join();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceGroupSessionProviderObserver.leave()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD **v1;
  void (*v2)(uint64_t, _QWORD);
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = *(_QWORD ***)(v0 + 48);
  v2 = (void (*)(uint64_t, _QWORD))((uint64_t (*)(uint64_t))(*v1)[19])(v0 + 16);
  v4 = v3;
  swift_bridgeObjectRelease();
  *v4 = MEMORY[0x1E0DEE9E8];
  v2(v0 + 16, 0);
  v7 = (uint64_t (*)(void))(**(int **)(*v1[6] + 368) + *(_QWORD *)(*v1[6] + 368));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = PresenceGroupSessionProviderObserver.leave();
  return v7();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PresenceGroupSessionProviderObserver.deinit()
{
  uint64_t v0;

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PresenceGroupSessionProviderObserver.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v20 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v17 = v20;
    }
    else
    {
      v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  swift_bridgeObjectRetain();
  v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v2;
    *v2 = 0x8000000000000000;
    v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v13 = ~v11;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  Swift::Int v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<CPParticipant>, &lazy cache variable for type metadata for CPParticipant, 0x1E0D15360, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    v30 = v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      v24 = v30;
    }
    else
    {
      v24 = v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)(v8, v24);
    *v3 = v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeSet.resize(capacity:), &lazy cache variable for type metadata for CPParticipant, 0x1E0D15360, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<CPParticipant>);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  Swift::Int v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<TUHandle>, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E0DBD2F8, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    v30 = v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      v24 = v30;
    }
    else
    {
      v24 = v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)(v8, v24);
    *v3 = v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))specialized _NativeSet.resize(capacity:), (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E0DBD2F8, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, v11, MEMORY[0x1E0DF0358]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_WORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x1A1B053D0](*(_QWORD *)(v6 + 40), (unsigned __int16)a2, 2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  Swift::UInt8 *v11;
  uint64_t v12;
  Swift::UInt8 *v13;
  Swift::UInt8 *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  unsigned __int8 *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  _QWORD v32[4];
  Swift::UInt8 *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt8 *v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::UInt8 *v42;
  int *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t __s1;
  uint64_t v50;

  v3 = v2;
  v50 = *MEMORY[0x1E0C80C00];
  v6 = (int *)type metadata accessor for ReliableBroadcastPacket.Message(0);
  v47 = *((_QWORD *)v6 - 1);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (unsigned __int8 *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (Swift::UInt8 *)v32 - v10;
  v12 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a2);
  v13 = &a2[v6[5]];
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v14 = a2;
  dispatch thunk of Hashable.hash(into:)();
  v41 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  v42 = v13;
  v15 = (uint64_t *)&v13[*(int *)(v41 + 20)];
  v16 = *v15;
  v17 = v15[1];
  v40 = v15;
  outlined copy of Data._Representation(v16, v17);
  Data.hash(into:)();
  outlined consume of Data._Representation(v16, v17);
  v38 = v6[6];
  Hasher._combine(_:)(*(_DWORD *)&a2[v38]);
  v37 = v6[7];
  Hasher._combine(_:)(*(_WORD *)&a2[v37]);
  v36 = v6[8];
  Hasher._combine(_:)(*(_WORD *)&a2[v36]);
  v43 = v6;
  v18 = (uint64_t *)&a2[v6[9]];
  v19 = *v18;
  v20 = v18[1];
  outlined copy of Data._Representation(*v18, v20);
  Data.hash(into:)();
  outlined consume of Data._Representation(v19, v20);
  v21 = Hasher._finalize()();
  v22 = -1 << *(_BYTE *)(v12 + 32);
  v23 = v21 & ~v22;
  v48 = v12 + 56;
  v24 = *(_QWORD *)(v12 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23;
  v39 = v14;
  if ((v24 & 1) != 0)
  {
    v32[3] = v18;
    v33 = v11;
    v34 = v3;
    v35 = a1;
    v25 = type metadata accessor for ReliableBroadcastPacket.Message;
    v45 = ~v22;
    v46 = v12;
    v47 = *(_QWORD *)(v47 + 72);
    do
    {
      v26 = *(_QWORD *)(v12 + 48);
      v44 = v47 * v23;
      v27 = v25;
      outlined init with copy of Participant(v26 + v47 * v23, (uint64_t)v9, v25);
      if (*v9 == *v14)
      {
        v28 = &v9[v43[5]];
        if ((static UUID.== infix(_:_:)() & 1) != 0)
          __asm { BR              X10 }
      }
      v25 = v27;
      outlined destroy of Participant((uint64_t)v9, v27);
      v12 = v46;
      v23 = (v23 + 1) & v45;
    }
    while (((*(_QWORD *)(v48 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0);
    swift_bridgeObjectRelease();
    a1 = v35;
    v3 = v34;
    v11 = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v30 = (uint64_t)v39;
  outlined init with copy of Participant((uint64_t)v39, (uint64_t)v11, type metadata accessor for ReliableBroadcastPacket.Message);
  __s1 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v11, v23, isUniquelyReferenced_nonNull_native);
  *v3 = __s1;
  swift_bridgeObjectRelease();
  outlined init with take of Participant(v30, a1, type metadata accessor for ReliableBroadcastPacket.Message);
  return 1;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      v3 = MEMORY[0x1E0C95E18];
      do
      {
        swift_dynamicCast();
        v2 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v15;
        }
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], v3);
        result = dispatch thunk of Hashable._rawHashValue(seed:)();
        v5 = v2 + 56;
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = result & ~v6;
        v8 = v7 >> 6;
        if (((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          v9 = __clz(__rbit64((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v8 == v11;
            if (v8 == v11)
              v8 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v8 = static _SetStorage.convert(_:capacity:)();
    v21 = v8;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for OS_dispatch_queue(0, a4);
      do
      {
        swift_dynamicCast();
        v8 = v21;
        v15 = *(_QWORD *)(v21 + 16);
        if (*(_QWORD *)(v21 + 24) <= v15)
        {
          a6(v15 + 1);
          v8 = v21;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
        v10 = v8 + 56;
        v11 = -1 << *(_BYTE *)(v8 + 32);
        v12 = result & ~v11;
        v13 = v12 >> 6;
        if (((-1 << v12) & ~*(_QWORD *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
        {
          v14 = __clz(__rbit64((-1 << v12) & ~*(_QWORD *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v16 = 0;
          v17 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v17 && (v16 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v18 = v13 == v17;
            if (v13 == v17)
              v13 = 0;
            v16 |= v18;
            v19 = *(_QWORD *)(v10 + 8 * v13);
          }
          while (v19 == -1);
          v14 = __clz(__rbit64(~v19)) + (v13 << 6);
        }
        *(_QWORD *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v20;
        ++*(_QWORD *)(v8 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v8;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v7 = type metadata accessor for Participant();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v8;
  v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_19;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))type metadata accessor for Participant, &demangling cache variable for type metadata for _SetStorage<Participant>);
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v13 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v14 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  String.hash(into:)();
  v28 = *(int *)(v7 + 24);
  Hasher._combine(_:)(*(_QWORD *)(a1 + v28));
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v8 + 72);
    do
    {
      outlined init with copy of Participant(*(_QWORD *)(v13 + 48) + v18 * a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      if ((static UUID.== infix(_:_:)() & 1) != 0)
      {
        v19 = &v10[*(int *)(v7 + 20)];
        v20 = *(_QWORD *)v19 == *v14 && *((_QWORD *)v19 + 1) == v14[1];
        if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && *(_QWORD *)&v10[*(int *)(v7 + 24)] == *(_QWORD *)(a1 + v28))
        {
          goto LABEL_22;
        }
      }
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  v21 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of Participant(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v26 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_22:
  outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v7 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v8;
  v27 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_19;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(type metadata accessor for PresenceSessionInfo.Participant, &demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>);
      goto LABEL_19;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v13 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v14 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  String.hash(into:)();
  v28 = *(int *)(v7 + 24);
  Hasher._combine(_:)(*(_BYTE *)(a1 + v28));
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = ~v16;
    v18 = *(_QWORD *)(v8 + 72);
    do
    {
      outlined init with copy of Participant(*(_QWORD *)(v13 + 48) + v18 * a2, (uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
      if ((static UUID.== infix(_:_:)() & 1) != 0)
      {
        v19 = &v10[*(int *)(v7 + 20)];
        v20 = *(_QWORD *)v19 == *v14 && *((_QWORD *)v19 + 1) == v14[1];
        if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && v10[*(int *)(v7 + 24)] == *(_BYTE *)(a1 + v28))
        {
          goto LABEL_22;
        }
      }
      outlined destroy of Participant((uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  v21 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of Participant(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v26 + 72) * a2, type metadata accessor for PresenceSessionInfo.Participant);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_22:
  outlined destroy of Participant((uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v12);
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340], &demangling cache variable for type metadata for _SetStorage<UTType>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], &demangling cache variable for type metadata for _SetStorage<UTType>, &lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
  }
  v13 = *v3;
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]);
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
    do
    {
      result = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = (unsigned __int16)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = MEMORY[0x1A1B053D0](*(_QWORD *)(*v3 + 40), v5, 2);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int16 *)(v10 + 2 * a2) == (_DWORD)v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int16 *)(v10 + 2 * a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(_QWORD *)(v12 + 48) + 2 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, void (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    a4(v13);
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(a7);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, a7);
  }
  v14 = *v7;
  v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v7 + 40));
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for OS_dispatch_queue(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt8 *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  Swift::UInt8 *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (*v25)(uint64_t);
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  Swift::UInt8 *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  Swift::UInt8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = v3;
  v47 = *MEMORY[0x1E0C80C00];
  v42 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v8 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v10 = (unsigned __int8 *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v4 + 16);
  v12 = *(_QWORD *)(*v4 + 24);
  v38 = v8;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v12 > v11)
      {
        specialized _NativeSet.copy()(type metadata accessor for ReliableBroadcastPacket.Message, &demangling cache variable for type metadata for _SetStorage<ReliableBroadcastPacket.Message>);
        goto LABEL_14;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v13 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*a1);
    v14 = (int *)v42;
    v15 = &a1[*(int *)(v42 + 20)];
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    v40 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
    v41 = v15;
    v16 = (uint64_t *)&v15[*(int *)(v40 + 20)];
    v17 = *v16;
    v18 = v16[1];
    v39 = v16;
    outlined copy of Data._Representation(v17, v18);
    Data.hash(into:)();
    outlined consume of Data._Representation(v17, v18);
    v37 = v14[6];
    Hasher._combine(_:)(*(_DWORD *)&a1[v37]);
    v35 = v14[7];
    Hasher._combine(_:)(*(_WORD *)&a1[v35]);
    v33 = v14[8];
    Hasher._combine(_:)(*(_WORD *)&a1[v33]);
    v19 = (uint64_t *)&a1[v14[9]];
    v20 = *v19;
    v21 = v19[1];
    outlined copy of Data._Representation(*v19, v21);
    Data.hash(into:)();
    outlined consume of Data._Representation(v20, v21);
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v22 & ~v23;
    v45 = v13 + 56;
    v46 = v13;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v32[3] = v19;
      v24 = type metadata accessor for ReliableBroadcastPacket.Message;
      v43 = ~v23;
      v44 = *(_QWORD *)(v8 + 72);
      v34 = a1;
      v36 = v4;
      do
      {
        v25 = v24;
        outlined init with copy of Participant(*(_QWORD *)(v46 + 48) + v44 * a2, (uint64_t)v10, v24);
        if (*v10 == *a1)
        {
          v26 = &v10[*(int *)(v42 + 20)];
          if ((static UUID.== infix(_:_:)() & 1) != 0)
            __asm { BR              X10 }
        }
        v24 = v25;
        outlined destroy of Participant((uint64_t)v10, v25);
        a2 = (a2 + 1) & v43;
      }
      while (((*(_QWORD *)(v45 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_14:
  v27 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of Participant((uint64_t)a1, *(_QWORD *)(v27 + 48) + *(_QWORD *)(v38 + 72) * a2, type metadata accessor for ReliableBroadcastPacket.Message);
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
  {
    __break(1u);
    JUMPOUT(0x1A0DF5090);
  }
  *(_QWORD *)(v27 + 16) = v31;
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))type metadata accessor for Participant, &demangling cache variable for type metadata for _SetStorage<Participant>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340], &demangling cache variable for type metadata for _SetStorage<UTType>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt16>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    outlined init with copy of Participant(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)outlined init with take of Participant((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)();
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = type metadata accessor for Participant();
  v3 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  v39 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v35 = v0;
  v36 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  v16 = type metadata accessor for Participant;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_24;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v37)
      goto LABEL_33;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_33;
      v21 = *(_QWORD *)(v36 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_33;
        v21 = *(_QWORD *)(v36 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_24:
    v23 = v6;
    v24 = *(_QWORD *)(v39 + 72);
    v25 = *(_QWORD *)(v6 + 48) + v24 * v19;
    v26 = v16;
    outlined init with copy of Participant(v25, (uint64_t)v5, (uint64_t (*)(_QWORD))v16);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    v27 = v38;
    String.hash(into:)();
    Hasher._combine(_:)(*(_QWORD *)&v5[*(int *)(v27 + 24)]);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v16 = v26;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      v16 = v26;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = outlined init with take of Participant((uint64_t)v5, *(_QWORD *)(v8 + 48) + v17 * v24, (uint64_t (*)(_QWORD))v16);
    ++*(_QWORD *)(v8 + 16);
    v6 = v23;
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v35;
    goto LABEL_35;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v37)
      goto LABEL_33;
    v21 = *(_QWORD *)(v36 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  v39 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v35 = v0;
  v36 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  v16 = type metadata accessor for PresenceSessionInfo.Participant;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_24;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v37)
      goto LABEL_33;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_33;
      v21 = *(_QWORD *)(v36 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_33;
        v21 = *(_QWORD *)(v36 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_24:
    v23 = v6;
    v24 = *(_QWORD *)(v39 + 72);
    v25 = *(_QWORD *)(v6 + 48) + v24 * v19;
    v26 = v16;
    outlined init with copy of Participant(v25, (uint64_t)v5, v16);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    v27 = v38;
    String.hash(into:)();
    Hasher._combine(_:)(v5[*(int *)(v27 + 24)]);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v16 = v26;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      v16 = v26;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = outlined init with take of Participant((uint64_t)v5, *(_QWORD *)(v8 + 48) + v17 * v24, v16);
    ++*(_QWORD *)(v8 + 16);
    v6 = v23;
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v35;
    goto LABEL_35;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v37)
      goto LABEL_33;
    v21 = *(_QWORD *)(v36 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt16>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
    result = MEMORY[0x1A1B053D0](*(_QWORD *)(v4 + 40), v18, 2);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (Swift::UInt8 *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ReliableBroadcastPacket.Message>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_24:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = v6 + 56;
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & *(_QWORD *)(v6 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v12)
      goto LABEL_22;
    v18 = *(_QWORD *)(v9 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_22;
      v18 = *(_QWORD *)(v9 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_22;
        v18 = *(_QWORD *)(v9 + 8 * v14);
        if (!v18)
          break;
      }
    }
LABEL_21:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    outlined init with copy of Participant(*(_QWORD *)(v6 + 48) + *(_QWORD *)(v3 + 72) * v16, (uint64_t)v5, type metadata accessor for ReliableBroadcastPacket.Message);
    result = specialized _NativeSet._unsafeInsertNew(_:)(v5, v7);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_22:
    result = swift_release_n();
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(v9 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_22;
    v18 = *(_QWORD *)(v9 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = v4 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_33;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_33;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t (*v39)(uint64_t);
  unint64_t *v40;
  uint64_t v41;

  v40 = a4;
  v41 = a5;
  v7 = v5;
  v39 = a2;
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - v10;
  v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_35:
    *v7 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v36 = v5;
  v37 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v38 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v25 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v38)
        goto LABEL_33;
      v26 = *(_QWORD *)(v37 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v38)
          goto LABEL_33;
        v26 = *(_QWORD *)(v37 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 + 48) + v28 * v24, v8);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(v40, v39, v41);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v14 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v35 == -1);
      v22 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v22 * v28, v11, v8);
    ++*(_QWORD *)(v14 + 16);
  }
  v27 = v25 + 3;
  if (v27 >= v38)
  {
LABEL_33:
    result = swift_release_n();
    v7 = v36;
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
  {
    v21 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = specialized Set.startIndex.getter(a2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = 1 << *(_BYTE *)(a2 + 32);
  if (v10 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v9 != (_DWORD)v11)
    goto LABEL_13;
  if (*(_QWORD *)a1 < result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v9 == (_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v10 >= v13)
      {
        *(_QWORD *)a3 = *(_QWORD *)a1;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = v13;
        *(_QWORD *)(a3 + 32) = v12;
        *(_BYTE *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = a2;
        return swift_bridgeObjectRetain();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *specialized PresenceGroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  a4[3] = 0;
  swift_unknownObjectWeakInit();
  a4[7] = MEMORY[0x1E0DEE9E8];
  a4[4] = a1;
  a4[5] = a2;
  swift_beginAccess();
  a4[3] = a6;
  swift_unknownObjectWeakAssign();
  type metadata accessor for PresenceSession(0);
  v12 = swift_allocObject();
  v13 = swift_unknownObjectRetain();
  a4[6] = specialized PresenceSession.init(provider:serviceProvider:)(v13, a2, a3, v12, a5, a6);
  return a4;
}

uint64_t sub_1A0DF7944()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0DF7968()
{
  return objectdestroy_2Tm();
}

uint64_t partial apply for closure #1 in PresenceGroupSessionProviderObserver.join()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in PresenceGroupSessionProviderObserver.join()(a1, v4, v5, v6, v7);
}

void partial apply for closure #2 in PresenceGroupSessionProviderObserver.join()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  JUMPOUT(0x1A1B04B54);
}

uint64_t sub_1A0DF7A28()
{
  return objectdestroy_2Tm();
}

uint64_t partial apply for closure #3 in PresenceGroupSessionProviderObserver.join()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #3 in PresenceGroupSessionProviderObserver.join()(a1, v4, v5, v7, v6);
}

uint64_t sub_1A0DF7AA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0DF7AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0DF7B18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0DF7B48(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PresenceGroupSessionProviderObserver()
{
  return objc_opt_self();
}

uint64_t method lookup function for PresenceGroupSessionProviderObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.groupSessionService.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.join()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 168) + *(_QWORD *)(*(_QWORD *)v0 + 168));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceGroupSessionProviderObserver.leave()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 176) + *(_QWORD *)(*(_QWORD *)v0 + 176));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t specialized Collection.prefix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  _OWORD v18[3];
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (result < 0)
  {
LABEL_16:
    __break(1u);
  }
  else
  {
    v4 = result;
    result = specialized Set.startIndex.getter(a2);
    v6 = result;
    v8 = v7;
    v10 = v9 & 1;
    if (v4)
    {
      v11 = *(unsigned int *)(a2 + 36);
      v12 = 1 << *(_BYTE *)(a2 + 32);
      while ((v10 & 1) == 0)
      {
        if ((_DWORD)v11 != (_DWORD)v8)
        {
          __break(1u);
          goto LABEL_16;
        }
        if (v6 == v12)
        {
          v10 = 0;
          v6 = v12;
          v8 = v11;
          goto LABEL_10;
        }
        result = specialized _NativeSet.index(after:)(v6, v8, 0, a2);
        v6 = result;
        v8 = v13;
        v10 = v14 & 1;
        if (!--v4)
          goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_10:
    result = specialized Set.startIndex.getter(a2);
    if ((v10 & 1) != 0 || (v16 & 1) != 0)
      goto LABEL_20;
    if ((_DWORD)v8 == (_DWORD)v15)
    {
      if (v6 >= result)
      {
        v20[0] = result;
        v20[1] = v15;
        v21 = 0;
        v22 = v6;
        v23 = v8;
        v24 = 0;
        result = specialized Collection<>.subscript.getter((uint64_t)v20, a2, (uint64_t)v18);
        v17 = v18[1];
        *(_OWORD *)a3 = v18[0];
        *(_OWORD *)(a3 + 16) = v17;
        *(_OWORD *)(a3 + 32) = v18[2];
        *(_QWORD *)(a3 + 48) = v19;
        return result;
      }
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t outlined copy of Set<A>.Index._Variant<A>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of Set<PresenceSessionInfo.Participant>.Index(uint64_t a1)
{
  outlined copy of Set<A>.Index._Variant<A>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined retain of Set<PresenceSessionInfo.Participant>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Set<PresenceSessionInfo.Participant>.Index(uint64_t a1)
{
  outlined consume of Set<Participant>.Index._Variant(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined release of Set<PresenceSessionInfo.Participant>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void *PlaybackSyncer.localParticipantState.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void PlaybackSyncer.localParticipantState.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*PlaybackSyncer.localParticipantState.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v16, (uint64_t)v9, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PlaybackSyncer.transportControlStates.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PlaybackSyncer.transportControlStates.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PlaybackSyncer.transportControlStates.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PlaybackSyncer.messageEncoder.getter()
{
  return swift_retain();
}

uint64_t PlaybackSyncer.messageDecoder.getter()
{
  return swift_retain();
}

uint64_t PlaybackSyncer.coordinator.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v0 + 112);
}

uint64_t PlaybackSyncer.coordinator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 120) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.coordinator.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.coordinator.modify;
}

void PlaybackSyncer.coordinator.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 120) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PlaybackSyncer.link.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v0 + 128);
}

uint64_t PlaybackSyncer.link.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.link.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v1 + 128);
  v5 = *(_QWORD *)(v1 + 136);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.link.modify;
}

void PlaybackSyncer.link.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 136) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PlaybackSyncer.syncerDelegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v0 + 144);
}

uint64_t PlaybackSyncer.syncerDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 152) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.syncerDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1A1B05DC0](v1 + 144);
  v5 = *(_QWORD *)(v1 + 152);
  v3[3] = v4;
  v3[4] = v5;
  return PlaybackSyncer.syncerDelegate.modify;
}

void PlaybackSyncer.syncerDelegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 152) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PlaybackSyncer.__allocating_init(coordinator:serialQueue:localParticipantUUID:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(id, _UNKNOWN **, id);
  id v12;
  id v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  void *v17;
  uint64_t v19;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t (**)(id, _UNKNOWN **, id))(v3 + 472);
  v12 = a1;
  v13 = a2;
  v14 = v11(v12, &protocol witness table for AVPlaybackCoordinator, v13);
  v15 = (objc_class *)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  swift_retain();
  v16 = specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)((uint64_t)v10, v14, (char *)objc_allocWithZone(v15), v3, (uint64_t)&protocol witness table for PlaybackSyncer);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a3, v7);
  v17 = *(void **)(v14 + 104);
  *(_QWORD *)(v14 + 104) = v16;
  swift_release();

  return v14;
}

uint64_t type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackSyncer.AVCoordinatorDelegateBridge);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:));
}

uint64_t PlaybackSyncer.__allocating_init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(a1, a2, a3);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t PlaybackSyncer.init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(a1, a2, a3);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  id v24;
  void *v25;
  uint64_t ObjectType;
  uint64_t v27;
  void (*v28)(uint64_t (*)(unsigned __int8 *, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD aBlock[6];
  id v53;

  v4 = v3;
  v45 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  MEMORY[0x1E0C80A78](v6);
  v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x1E0C80A78](v8);
  v46 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue>);
  v43 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for playback != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.playback);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1A0DB3000, v17, v18, "PlaybackSync: Connecting link", v19, 2u);
    MEMORY[0x1A1B05CC4](v19, -1, -1);
  }

  v20 = *(void (**)(uint64_t, uint64_t))(*v4 + 432);
  v21 = swift_unknownObjectRetain();
  v20(v21, a2);
  v22 = (void *)v4[13];
  if (v22)
  {
    v23 = *(uint64_t (**)(void))(*v4 + 400);
    v24 = v22;
    if (v23())
    {
      objc_opt_self();
      v25 = (void *)swift_dynamicCastObjCClass();
      if (v25)
      {
        objc_msgSend(v25, sel_setCoordinationMediumDelegate_, v24);

        swift_unknownObjectRelease();
        goto LABEL_11;
      }
      swift_unknownObjectRelease();
    }

  }
LABEL_11:
  ObjectType = swift_getObjectType();
  v27 = swift_allocObject();
  swift_weakInit();
  v28 = *(void (**)(uint64_t (*)(unsigned __int8 *, uint64_t), uint64_t, uint64_t, uint64_t))(a2 + 24);
  swift_retain();
  v28(partial apply for closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:), v27, ObjectType, a2);
  swift_release();
  v29 = swift_allocObject();
  swift_weakInit();
  v30 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a2 + 48);
  swift_retain();
  v30(partial apply for closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:), v29, ObjectType, a2);
  swift_release();
  aBlock[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(ObjectType, a2);
  v53 = (id)v4[12];
  v31 = v53;
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 1, 1, v32);
  v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>, MEMORY[0x1E0C95FB8]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  v33 = swift_allocObject();
  swift_weakInit();
  v34 = swift_allocObject();
  v35 = v45;
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = v35;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<CurrentValueSubject<Bool, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  swift_bridgeObjectRetain();
  v36 = v44;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v36);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v37 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
  aBlock[5] = v37;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_1;
  v38 = _Block_copy(aBlock);
  swift_retain();
  v39 = v46;
  static DispatchQoS.unspecified.getter();
  v53 = (id)MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v40 = v49;
  v41 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v39, v40, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v39, v48);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  id v23;
  int v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v27 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  v13 = *((_QWORD *)a1 + 1);
  v26 = *((_QWORD *)a1 + 2);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = *(id *)(result + 96);
    swift_release();
    v15 = swift_allocObject();
    v22 = v4;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v9);
    v16 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    *(_BYTE *)(v17 + 24) = v24;
    v18 = v26;
    *(_QWORD *)(v17 + 32) = v13;
    *(_QWORD *)(v17 + 40) = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v12, v9);
    aBlock[4] = partial apply for closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_84;
    v19 = _Block_copy(aBlock);
    swift_retain();
    outlined copy of Data._Representation(v13, v18);
    static DispatchQoS.unspecified.getter();
    v30 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v20 = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v21 = v23;
    MEMORY[0x1A1B04D7C](0, v8, v20, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v3);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int8 v10[8];
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10[0] = a2;
    v11 = a3;
    v12 = a4;
    PlaybackSyncer.receiveMessage(message:from:)(v10, a5);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v19 = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v18 = *(id *)(result + 96);
    swift_release();
    v12 = swift_allocObject();
    v17 = v2;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v8);
    v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = partial apply for closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_77;
    v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v22 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v16 = v18;
    MEMORY[0x1A1B04D7C](0, v7, v4, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v21);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 504))(a2);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19[3];

  v4 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    if (!v4)
    {
      if (!*(_QWORD *)(a3 + 16))
      {
        if (one-time initialization token for playback != -1)
          swift_once();
        v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.playback);
        v16 = Logger.logObject.getter();
        v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v18 = 0;
          _os_log_impl(&dword_1A0DB3000, v16, v17, "PlaybackSync: Catchup not needed", v18, 2u);
          MEMORY[0x1A1B05CC4](v18, -1, -1);
        }

        return swift_release();
      }
      if (one-time initialization token for playback != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.playback);
      swift_bridgeObjectRetain_n();
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        v11 = swift_slowAlloc();
        v19[0] = v11;
        *(_DWORD *)v10 = 136315138;
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        swift_bridgeObjectRetain();
        v12 = Set.description.getter();
        v14 = v13;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v8, v9, "PlaybackSync: Requesting catchup due to existing joined participants:%s.", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v11, -1, -1);
        MEMORY[0x1A1B05CC4](v10, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_beginAccess();
      *(_QWORD *)(v6 + 88) = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    PlaybackSyncer.sendCatchupRequestMessage()();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PlaybackSyncer.scheduleTransportStateTakeoverTimer()();
    return swift_release();
  }
  return result;
}

uint64_t PlaybackSyncer.replaceCoordinator(coordinator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(v3 + 96);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_13;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 408);
    v7 = swift_unknownObjectRetain();
    v8 = v6(v7, a3);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 424))(v8);
    swift_unknownObjectRelease();
    if (v9)
      PlaybackSyncer.sendCatchupRequestMessage()();
    return swift_release();
  }
  return result;
}

uint64_t PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v3 = v2;
  v23[0] = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v8 - 8);
  v25 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v3 + 96);
  v15 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  v19 = (void *)v23[0];
  *(_QWORD *)(v18 + v17) = v23[0];
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_20;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = v19;
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  swift_release();
  return swift_release();
}

void closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  objc_class *v16;
  char *v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  objc_super v22;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = (_QWORD *)Strong;
    if (one-time initialization token for playback != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1A0DB3000, v12, v13, "PlaybackSync: Replacing AVPlaybackCoordinator for group session", v14, 2u);
      MEMORY[0x1A1B05CC4](v14, -1, -1);
    }

    (*(void (**)(void))(*v10 + 512))();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v15(v8, a2, v5);
    v16 = (objc_class *)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
    v17 = (char *)objc_allocWithZone(v16);
    v18 = &v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate];
    *(_QWORD *)&v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    v15(&v17[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID], (uint64_t)v8, v5);
    swift_beginAccess();
    *((_QWORD *)v18 + 1) = &protocol witness table for PlaybackSyncer;
    swift_unknownObjectWeakAssign();
    v22.receiver = v17;
    v22.super_class = v16;
    v19 = objc_msgSendSuper2(&v22, sel_init);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    objc_msgSend(a3, sel_setCoordinationMediumDelegate_, v19);
    v20 = (void *)v10[13];
    v10[13] = v19;
    v21 = v19;

    (*(void (**)(void *, _UNKNOWN **))(*v10 + 488))(a3, &protocol witness table for AVPlaybackCoordinator);
    swift_release();

  }
}

void PlaybackSyncer.participantLeft(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1;
  v70 = a1;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v66 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v63 = (char *)&v61 - v8;
  MEMORY[0x1E0C80A78](v7);
  v62 = (char *)&v61 - v9;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v68);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v64 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v61 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v61 - v18;
  v20 = type metadata accessor for DispatchPredicate();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (uint64_t *)((char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = (void *)v2[12];
  *v23 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E0DEF740], v20);
  v25 = v24;
  v26 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v23, v20);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v67(v19, v70, v3);
  v69 = v4;
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v28 = 1;
  v29 = v27(v19, 0, 1, v3);
  v30 = (*(uint64_t (**)(uint64_t))(*v2 + 424))(v29);
  v65 = v2;
  if (v30)
  {
    v32 = v31;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v32 + 64))(ObjectType, v32);
    swift_unknownObjectRelease();
    v28 = 0;
  }
  v34 = v28;
  v26 = v3;
  v27(v17, v34, 1, v3);
  v35 = (uint64_t)&v11[*(int *)(v68 + 48)];
  outlined init with copy of URL?((uint64_t)v19, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of URL?((uint64_t)v17, v35, &demangling cache variable for type metadata for UUID?);
  v21 = v69;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v36((uint64_t)v11, 1, v3) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    if (v36(v35, 1, v3) == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
      v3 = v70;
LABEL_11:
      if (one-time initialization token for playback != -1)
        swift_once();
      v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.playback);
      v42 = v63;
      v67(v63, v3, v26);
      v43 = Logger.logObject.getter();
      v44 = v26;
      v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v72 = v47;
        *(_DWORD *)v46 = 136315138;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v48 = dispatch thunk of CustomStringConvertible.description.getter();
        v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v42, v44);
        _os_log_impl(&dword_1A0DB3000, v43, v45, "PlaybackSync: Ignoring removal of local participant: %s", v46, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v47, -1, -1);
        MEMORY[0x1A1B05CC4](v46, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v42, v44);
      }

      return;
    }
    goto LABEL_9;
  }
  v37 = v64;
  outlined init with copy of URL?((uint64_t)v11, v64, &demangling cache variable for type metadata for UUID?);
  if (v36(v35, 1, v3) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v37, v3);
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for (UUID?, UUID?));
    v3 = v70;
    goto LABEL_15;
  }
  v38 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v62, v35, v3);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v40 = *(void (**)(char *, uint64_t))(v21 + 8);
  v40(v38, v3);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  v40((char *)v37, v3);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  v3 = v70;
  if ((v39 & 1) != 0)
    goto LABEL_11;
LABEL_15:
  if (one-time initialization token for playback != -1)
LABEL_25:
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.playback);
  v51 = v66;
  v67(v66, v3, v26);
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    v72 = v55;
    *(_DWORD *)v54 = 136315138;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v56 = dispatch thunk of CustomStringConvertible.description.getter();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v26);
    _os_log_impl(&dword_1A0DB3000, v52, v53, "PlaybackSync: Cleaning up after participant left: %s", v54, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v55, -1, -1);
    MEMORY[0x1A1B05CC4](v54, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v51, v26);
  }

  if ((*(uint64_t (**)(void))(*v65 + 400))())
  {
    v59 = v58;
    v60 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24))(v3, v60, v59);
    swift_unknownObjectRelease();
  }
  PlaybackSyncer.handleWaitingFor(participant:)(v3);
}

Swift::Void __swiftcall PlaybackSyncer.cleanUp()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v40 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v40 - v12;
  v14 = type metadata accessor for DispatchPredicate();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)v1[12];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0DEF740], v14);
  v19 = v18;
  v20 = _dispatchPreconditionTest(_:)();
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
LABEL_7:
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.playback);
    swift_unknownObjectRetain_n();
    swift_retain_n();
    v24 = Logger.logObject.getter();
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v46))
    {
      v43 = v24;
      v44 = v15;
      v45 = v20;
      v25 = swift_slowAlloc();
      v41 = (_QWORD *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v49 = v42;
      *(_DWORD *)v25 = 136315394;
      if ((*(uint64_t (**)(void))(*v1 + 424))())
      {
        v27 = v26;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v27 + 72))(ObjectType, v27);
        swift_unknownObjectRelease();
        v29 = 0;
      }
      else
      {
        v29 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v13, v29, 1, v2);
      outlined init with copy of URL?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
      {
        v30 = 0xE300000000000000;
        v31 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v11, v2);
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v47, v7, v2);
        v31 = String.init<A>(reflecting:)();
        v30 = v32;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2112;
      v33 = v44;
      v48 = v44;
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v34 = v41;
      *v41 = v33;
      swift_unknownObjectRelease_n();
      v35 = v43;
      _os_log_impl(&dword_1A0DB3000, v43, (os_log_type_t)v46, "PlaybackSync: Cleaning up playback coordinator for session: %s coordinator:%@", (uint8_t *)v25, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v34, -1, -1);
      v36 = v42;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v36, -1, -1);
      v37 = v25;
      v15 = v33;
      MEMORY[0x1A1B05CC4](v37, -1, -1);

      v20 = v45;
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_release_n();
    }
    objc_msgSend((id)v15, sel_setCoordinationMediumDelegate_, 0);
    if (v20)
    {
      v38 = objc_msgSend((id)v20, sel_player);
      if (v38)
      {
        v39 = v38;
        objc_msgSend(v38, sel_setBackgroundPIPAuthorizationToken_, 0);

      }
    }
    goto LABEL_20;
  }
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 400))(v21))
    return;
  objc_opt_self();
  v22 = swift_dynamicCastObjCClass();
  if (v22)
  {
    v15 = v22;
    objc_opt_self();
    v20 = swift_dynamicCastObjCClass();
    if (v20)
      swift_unknownObjectRetain();
    if (one-time initialization token for playback == -1)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_20:
  swift_unknownObjectRelease();
}

uint64_t PlaybackSyncer.shouldDismissPlayback(allowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 448))();
  if (result)
  {
    v9 = v8;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1 & 1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PlaybackSyncer.shareLocalParticipantState(participantState:)(NSDictionary participantState)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSDictionary *v13;
  void *v14;
  objc_class *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v2 + 96);
  v12 = swift_allocObject();
  swift_weakInit();
  v13 = (NSDictionary *)swift_allocObject();
  v13[2].super.isa = (Class)v12;
  v13[3].super.isa = participantState.super.isa;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_27;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = participantState.super.isa;
  static DispatchQoS.unspecified.getter();
  v18 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
}

void closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  os_log_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void (*v37)(id);
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  os_log_t v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59[8];

  v59[6] = *(id *)MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v8 = Strong;
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)Strong + 424))();
    if (v9)
    {
      v11 = v9;
      v12 = v10;
      if (one-time initialization token for playback != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
      v15 = a2;
      swift_unknownObjectRetain_n();
      v16 = v15;
      v55 = v14;
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.default.getter();
      v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        v20 = swift_slowAlloc();
        v56 = v11;
        v21 = v20;
        v50 = (_QWORD *)swift_slowAlloc();
        v54 = (void *)swift_slowAlloc();
        v59[0] = v54;
        *(_DWORD *)v21 = 138412546;
        v53 = v19;
        v49 = v12;
        v57 = (uint64_t)v16;
        v51 = &v58;
        v22 = v16;
        v52 = v17;
        v23 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v24 = v50;
        *v50 = v16;

        *(_WORD *)(v21 + 12) = 2080;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t))(v49 + 72))(ObjectType);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v26 = dispatch thunk of CustomStringConvertible.description.getter();
        v28 = v27;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        v29 = v52;
        _os_log_impl(&dword_1A0DB3000, v52, (os_log_type_t)v53, "PlaybackSync: Broadcasting participant state:%@ to group session:%s", (uint8_t *)v21, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v24, -1, -1);
        v30 = v54;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v30, -1, -1);
        MEMORY[0x1A1B05CC4](v21, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      v31 = (void *)objc_opt_self();
      v59[0] = 0;
      v32 = objc_msgSend(v31, sel_dataWithJSONObject_options_error_, v16, 0, v59);
      v33 = v59[0];
      if (v32)
      {
        v34 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v36 = v35;

        v37 = *(void (**)(id))(*(_QWORD *)v8 + 216);
        v38 = v16;
        v37(v16);
        LOBYTE(v59[0]) = 0;
        v59[1] = v34;
        v59[2] = v36;
        outlined copy of Data._Representation((uint64_t)v34, (unint64_t)v36);
        PlaybackSyncer.sendMessage(_:to:)((char *)v59, 0);
        swift_release();
        outlined consume of Data._Representation((uint64_t)v34, (unint64_t)v36);
        swift_unknownObjectRelease();
        outlined consume of Data._Representation((uint64_t)v34, (unint64_t)v36);
      }
      else
      {
        v39 = v33;
        v40 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        v41 = v40;
        v42 = v40;
        v43 = Logger.logObject.getter();
        v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc();
          v46 = (void *)swift_slowAlloc();
          v59[0] = v46;
          *(_DWORD *)v45 = 136315138;
          swift_getErrorValue();
          v47 = Error.localizedDescription.getter();
          v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1A0DB3000, v43, v44, "PlaybackSync: shareLocalParticipantState Error:%s", v45, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A1B05CC4](v46, -1, -1);
          MEMORY[0x1A1B05CC4](v45, -1, -1);

          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          swift_release();

        }
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t PlaybackSyncer.Message.init(type:payload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

Swift::Void __swiftcall PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(Swift::String itemIdentifier, NSDictionary transportControlState)
{
  uint64_t v2;
  objc_class *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSDictionary *v14;
  void *v15;
  objc_class *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  object = (objc_class *)itemIdentifier._object;
  countAndFlagsBits = itemIdentifier._countAndFlagsBits;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(v2 + 96);
  v13 = swift_allocObject();
  swift_weakInit();
  v14 = (NSDictionary *)swift_allocObject();
  v14[2].super.isa = (Class)v13;
  v14[3].super.isa = transportControlState.super.isa;
  v14[4].super.isa = (Class)countAndFlagsBits;
  v14[5].super.isa = object;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_34;
  v15 = _Block_copy(aBlock);
  swift_retain();
  v16 = transportControlState.super.isa;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v19 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  swift_release();
}

void closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  _BOOL4 v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint8_t *v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  os_log_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(id *);
  id v42;
  void (*v43)(id *, _QWORD);
  uint64_t *v44;
  uint64_t *v45;
  char isUniquelyReferenced_nonNull_native;
  void *v47;
  void *v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  os_log_t v59;
  int v60;
  _BYTE *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69[9];

  v69[7] = *(id *)MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v12 = (_BYTE *)Strong;
    if (!(*(uint64_t (**)(void))(*(_QWORD *)Strong + 424))())
    {
LABEL_12:
      swift_release();
      return;
    }
    v65 = v13;
    if (one-time initialization token for playback != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
    v16 = a2;
    swift_unknownObjectRetain_n();
    v17 = v16;
    v64 = v15;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    v20 = v19;
    v21 = os_log_type_enabled(v18, v19);
    v66 = a3;
    if (v21)
    {
      v22 = (_DWORD *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v61 = v12;
      v24 = (_QWORD *)v23;
      v58 = v23;
      v62 = (void *)swift_slowAlloc();
      v69[0] = v62;
      v57[0] = v22;
      *v22 = 138412546;
      v59 = v18;
      v60 = v20;
      v67 = (uint64_t)v17;
      v57[1] = &v68;
      v25 = v17;
      v63 = a4;
      v26 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v24 = v17;
      v12 = v61;

      v27 = (uint8_t *)v57[0];
      *(_WORD *)(v57[0] + 12) = 2080;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(v65 + 72))(ObjectType);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v63;
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      v32 = v59;
      _os_log_impl(&dword_1A0DB3000, v59, (os_log_type_t)v60, "PlaybackSync: Broadcasting transport control state:%@ to group session:%s", v27, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v33 = v58;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v33, -1, -1);
      v34 = v62;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v34, -1, -1);
      MEMORY[0x1A1B05CC4](v27, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    v35 = (void *)objc_opt_self();
    v69[0] = 0;
    v36 = objc_msgSend(v35, sel_dataWithJSONObject_options_error_, v17, 0, v69);
    v37 = v69[0];
    if (v36)
    {
      v38 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v39;

      v41 = *(uint64_t (**)(id *))(*(_QWORD *)v12 + 248);
      v42 = v17;
      swift_bridgeObjectRetain();
      v43 = (void (*)(id *, _QWORD))v41(v69);
      v45 = v44;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v67 = *v45;
      *v45 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v42, v66, a4, isUniquelyReferenced_nonNull_native);
      *v45 = v67;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43(v69, 0);
      LOBYTE(v69[0]) = 1;
      v69[1] = v38;
      v69[2] = v40;
      outlined copy of Data._Representation((uint64_t)v38, (unint64_t)v40);
      PlaybackSyncer.sendMessage(_:to:)((char *)v69, 0);
      outlined consume of Data._Representation((uint64_t)v38, (unint64_t)v40);
      if ((v12[72] & 1) == 0)
        PlaybackSyncer.useExistingState()();
      swift_unknownObjectRelease();
      outlined consume of Data._Representation((uint64_t)v38, (unint64_t)v40);
      goto LABEL_12;
    }
    v47 = v37;
    v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v49 = v48;
    v50 = v48;
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = (void *)swift_slowAlloc();
      v69[0] = v54;
      *(_DWORD *)v53 = 136315138;
      swift_getErrorValue();
      v55 = Error.localizedDescription.getter();
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v51, v52, "PlaybackSync: shareTransportControlState Error:%s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v54, -1, -1);
      MEMORY[0x1A1B05CC4](v53, -1, -1);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_release();

    }
  }
}

uint64_t PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v4 + 96);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_41;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void (*v52)(uint64_t, uint64_t);
  uint8_t *buf;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    if (!(*(uint64_t (**)(void))(*(_QWORD *)result + 424))())
      return swift_release();
    v12 = v11;
    if (one-time initialization token for playback != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    v54 = a2;
    if (os_log_type_enabled(v14, v15))
    {
      v55 = v12;
      v16 = swift_slowAlloc();
      buf = (uint8_t *)swift_slowAlloc();
      v56[0] = (uint64_t)buf;
      *(_DWORD *)v16 = 136315906;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 1024;
      ObjectType = swift_getObjectType();
      v52 = *(void (**)(uint64_t, uint64_t))(v55 + 80);
      v52(ObjectType, v55);
      CurrentValueSubject.value.getter();
      swift_unknownObjectRelease();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      *(_WORD *)(v16 + 18) = 2080;
      swift_beginAccess();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      swift_bridgeObjectRetain();
      v18 = Set.description.getter();
      v20 = v19;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 28) = 1024;
      swift_release();
      v21 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v14, v15, "PlaybackSync: reloadTransportControlStateForItem:%s. shouldRequestCatchup:%{BOOL}d waitingForCatchupResponseFromParticipants:%s hasReceivedTransportState:%{BOOL}d", (uint8_t *)v16, 0x22u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](buf, -1, -1);
      v22 = v16;
      v12 = v55;
      MEMORY[0x1A1B05CC4](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_release_n();
      v21 = *(void (**)(uint64_t, uint64_t))(v12 + 80);
    }
    v23 = swift_getObjectType();
    v21(v23, v12);
    CurrentValueSubject.value.getter();
    swift_release();
    if ((v56[0] & 1) != 0 || (swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v10 + 88) + 16)))
    {
      if (*(_BYTE *)(v10 + 72) != 1)
      {
        v42 = Logger.logObject.getter();
        v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v44 = 0;
          _os_log_impl(&dword_1A0DB3000, v42, v43, "Playback Sync: Deferring completion handler until later", v44, 2u);
          MEMORY[0x1A1B05CC4](v44, -1, -1);
        }

        v45 = *(_QWORD *)(v10 + 56);
        *(_QWORD *)(v10 + 56) = a4;
        *(_QWORD *)(v10 + 64) = a5;
        swift_retain();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v45);
        goto LABEL_29;
      }
    }
    v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 232);
    v25 = swift_bridgeObjectRetain();
    v26 = v24(v25);
    if (*(_QWORD *)(v26 + 16))
    {
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v54, a3);
      if ((v28 & 1) != 0)
      {
        v29 = *(id *)(*(_QWORD *)(v26 + 56) + 8 * v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = v29;
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          v34 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v33 = 138412290;
          v35 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v34 = v30;

          _os_log_impl(&dword_1A0DB3000, v31, v32, "PlaybackSync: applying transport control state during reload:%@", v33, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1A1B05CC4](v34, -1, -1);
          MEMORY[0x1A1B05CC4](v33, -1, -1);
        }
        else
        {

          v31 = v30;
        }

        if ((*(uint64_t (**)(void))(*(_QWORD *)v10 + 400))())
        {
          v47 = v46;
          v48 = swift_getObjectType();
          (*(void (**)(NSObject *, uint64_t, uint64_t))(v47 + 8))(v30, v48, v47);
          swift_unknownObjectRelease();
        }

        v49 = Logger.logObject.getter();
        v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_1A0DB3000, v49, v50, "PlaybackSync: reloadTransportControlStateForItem finished", v51, 2u);
          MEMORY[0x1A1B05CC4](v51, -1, -1);
        }

        a4();
LABEL_29:
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1A0DB3000, v36, v37, "PlaybackSync: Could not find state for this item identifier", v38, 2u);
      MEMORY[0x1A1B05CC4](v38, -1, -1);
    }

    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1A0DB3000, v39, v40, "PlaybackSync: reloadTransportControlStateForItem finished", v41, 2u);
      MEMORY[0x1A1B05CC4](v41, -1, -1);
    }

    a4();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PlaybackSyncer.sendCatchupRequestMessage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  char v14[8];
  __int128 v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(void **)(v1 + 96);
  *(_QWORD *)v5 = v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1A0DB3000, v9, v10, "PlaybackSync: Catchup needed. Broadcasting catchup request.", v11, 2u);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  v14[0] = 2;
  v15 = xmmword_1A0F0EDD0;
  return PlaybackSyncer.sendMessage(_:to:)(v14, 0);
}

void PlaybackSyncer.receiveMessage(message:from:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v32 = a2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *a1;
  v14 = *((_QWORD *)a1 + 1);
  v13 = *((_QWORD *)a1 + 2);
  v15 = *(void **)(v3 + 96);
  *v12 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v32, v5);
  outlined copy of Data._Representation(v14, v13);
  v18 = Logger.logObject.getter();
  v19 = v14;
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v20))
  {
    v21 = swift_slowAlloc();
    v30 = v13;
    v22 = v21;
    v23 = swift_slowAlloc();
    v29 = v23;
    *(_DWORD *)v22 = 134218242;
    v33 = v31;
    v34 = v23;
    v28 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(v19, v30);
    *(_WORD *)(v22 + 12) = 2080;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v5);
    _os_log_impl(&dword_1A0DB3000, v18, v20, "PlaybackSync: Received message of type:%ld from participant:%s", (uint8_t *)v22, 0x16u);
    v26 = v29;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v26, -1, -1);
    MEMORY[0x1A1B05CC4](v22, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(v19, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  __asm { BR              X9 }
}

uint64_t PlaybackSyncer.Message.MessageType.rawValue.getter(uint64_t result)
{
  return result;
}

void PlaybackSyncer.receiveParticipantMessage(payload:from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _OWORD v51[2];
  _OWORD v52[2];
  uint64_t v53;

  v1 = v0;
  v53 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)v1[12];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_4;
  }
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 424))(v12))
    return;
  v48 = v13;
  v49 = v3;
  if (one-time initialization token for playback != -1)
    goto LABEL_23;
LABEL_4:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1A0DB3000, v15, v16, "PlaybackSync: Receiving ParticipantState", v17, 2u);
    MEMORY[0x1A1B05CC4](v17, -1, -1);
  }

  v18 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v50 = 0;
  v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, 0, &v50);

  v21 = v50;
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v51, v52);
    outlined init with copy of Any((uint64_t)v52, (uint64_t)v51);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDictionary);
    if (swift_dynamicCast())
    {
      v22 = v50;
      if ((*(uint64_t (**)(void))(*v1 + 400))())
      {
        v24 = v23;
        ObjectType = swift_getObjectType();
        (*(void (**)(id, uint64_t, uint64_t))(v24 + 16))(v22, ObjectType, v24);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRetain_n();
      v26 = v22;
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc();
        v46 = (_QWORD *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        *(_QWORD *)&v51[0] = v47;
        *(_DWORD *)v29 = 136315394;
        v30 = swift_getObjectType();
        (*(void (**)(uint64_t))(v48 + 72))(v30);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v31 = dispatch thunk of CustomStringConvertible.description.getter();
        v33 = v32;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v2);
        v50 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2112;
        v50 = v26;
        v34 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v35 = v46;
        *v46 = v26;

        _os_log_impl(&dword_1A0DB3000, v27, v28, "PlaybackSync: Received new participant state for group session %s: %@", (uint8_t *)v29, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v35, -1, -1);
        v36 = v47;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v36, -1, -1);
        MEMORY[0x1A1B05CC4](v29, -1, -1);
        swift_unknownObjectRelease();

      }
      else
      {
        swift_unknownObjectRelease_n();

      }
    }
    else
    {
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_1A0DB3000, v42, v43, "PlaybackSync: Could not cast participant state to dictionary.", v44, 2u);
        MEMORY[0x1A1B05CC4](v44, -1, -1);
      }
      swift_unknownObjectRelease();

    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  }
  else
  {
    v37 = v21;
    v38 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1A0DB3000, v39, v40, "PlaybackSync: Could not deserialize participant state.", v41, 2u);
      MEMORY[0x1A1B05CC4](v41, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
}

void PlaybackSyncer.receiveTransportControlMessage(payload:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t *);
  id v39;
  void (*v40)(uint64_t *, _QWORD);
  _QWORD *v41;
  _QWORD *v42;
  char isUniquelyReferenced_nonNull_native;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];
  uint64_t v66[3];
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;

  v1 = v0;
  v69 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)*((_QWORD *)v1 + 12);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once();
    goto LABEL_4;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 424))(v12))
    return;
  v61 = v13;
  v62 = v3;
  if (one-time initialization token for playback != -1)
    goto LABEL_34;
LABEL_4:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1A0DB3000, v15, v16, "PlaybackSync: Receiving TransportControlState", v17, 2u);
    MEMORY[0x1A1B05CC4](v17, -1, -1);
  }

  v18 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v65[0] = 0;
  v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, 0, v65);

  v21 = *(id *)&v65[0];
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v66, v68);
    outlined init with copy of Any((uint64_t)v68, (uint64_t)v66);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDictionary);
    if (swift_dynamicCast())
    {
      v22 = *(void **)&v65[0];
      if ((*(uint64_t (**)(void))(*(_QWORD *)v1 + 400))())
      {
        v24 = v23;
        ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v24 + 8))(v22, ObjectType, v24);
        swift_unknownObjectRelease();
      }
      *(_QWORD *)&v65[0] = *MEMORY[0x1E0C8ABD8];
      v26 = *(void **)&v65[0];
      type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
      v27 = v26;
      v28 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (v28)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v65, 0, sizeof(v65));
      }
      outlined init with take of Any?((uint64_t)v65, (uint64_t)v66);
      if (v67)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v37 = v64;
          v60 = v63;

          v38 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 248);
          v39 = v22;
          v40 = (void (*)(uint64_t *, _QWORD))v38(v66);
          v42 = v41;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v65[0] = *v42;
          *v42 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v39, v60, v37, isUniquelyReferenced_nonNull_native);
          *v42 = *(_QWORD *)&v65[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40(v66, 0);
          v44 = v39;
          swift_unknownObjectRetain_n();
          v45 = v44;
          v46 = Logger.logObject.getter();
          v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            v48 = swift_slowAlloc();
            v59 = (_QWORD *)swift_slowAlloc();
            v60 = swift_slowAlloc();
            v66[0] = v60;
            *(_DWORD *)v48 = 136315394;
            v58 = v48 + 4;
            v49 = swift_getObjectType();
            (*(void (**)(uint64_t))(v61 + 72))(v49);
            lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
            v50 = dispatch thunk of CustomStringConvertible.description.getter();
            v52 = v51;
            (*(void (**)(char *, uint64_t))(v62 + 8))(v5, v2);
            *(_QWORD *)&v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v66);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v48 + 12) = 2112;
            *(_QWORD *)&v65[0] = v45;
            v53 = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v54 = v59;
            *v59 = v45;

            _os_log_impl(&dword_1A0DB3000, v46, v47, "PlaybackSync: Received new transport control state for group session %s: %@", (uint8_t *)v48, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v54, -1, -1);
            v55 = v60;
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v55, -1, -1);
            MEMORY[0x1A1B05CC4](v48, -1, -1);

            if ((v1[72] & 1) == 0)
            {
LABEL_22:
              PlaybackSyncer.useExistingState()();

              swift_unknownObjectRelease();
LABEL_29:
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
              return;
            }
          }
          else
          {

            swift_unknownObjectRelease_n();
            if ((v1[72] & 1) == 0)
              goto LABEL_22;
          }
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v68);
          swift_unknownObjectRelease();

          return;
        }

      }
      else
      {

        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
      }
      v34 = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v57 = 0;
        _os_log_impl(&dword_1A0DB3000, v34, v56, "PlaybackSync: Could not decode item identifier in receiveTransportControlMessage.", v57, 2u);
        MEMORY[0x1A1B05CC4](v57, -1, -1);
      }

    }
    else
    {
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_1A0DB3000, v34, v35, "PlaybackSync: Could not cast transport control state to dictionary.", v36, 2u);
        MEMORY[0x1A1B05CC4](v36, -1, -1);
      }
    }
    swift_unknownObjectRelease();

    goto LABEL_29;
  }
  v29 = v21;
  v30 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1A0DB3000, v31, v32, "PlaybackSync: Could not deserialize transport control state.", v33, 2u);
    MEMORY[0x1A1B05CC4](v33, -1, -1);
    swift_unknownObjectRelease();

  }
  else
  {

    swift_unknownObjectRelease();
  }
}

uint64_t PlaybackSyncer.useExistingState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 96);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1A0DB3000, v9, v10, "PlaybackSync: Using current state", v11, 2u);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  *(_BYTE *)(v1 + 72) = 1;
  if (*(_QWORD *)(v1 + 80))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v1 + 80) = 0;
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  v12 = *(void (**)(uint64_t))(v1 + 56);
  if (v12)
  {
    v13 = swift_retain();
    v12(v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v12);
    v14 = *(_QWORD *)(v1 + 56);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v14);
}

uint64_t PlaybackSyncer.receiveCatchupRequestMessage(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v2 + 96);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v32 = a1;
    v20 = v19;
    v35 = v19;
    v33 = v2;
    *(_DWORD *)v18 = 136315138;
    v31 = v15;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1A0DB3000, v16, v17, "PlaybackSync: Catchup response requested from:%s", v18, 0xCu);
    swift_arrayDestroy();
    v23 = v20;
    a1 = v32;
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  PlaybackSyncer.handleWaitingFor(participant:)(a1);
  PlaybackSyncer.generateCatchupResponseMessage()(&v35);
  v24 = v35;
  v25 = v36;
  v26 = v37;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1A0DB3000, v27, v28, "PlaybackSync: Sending catchup response!", v29, 2u);
    MEMORY[0x1A1B05CC4](v29, -1, -1);
  }

  LOBYTE(v35) = v24;
  v36 = v25;
  v37 = v26;
  PlaybackSyncer.sendMessage(_:to:)((char *)&v35, 0);
  return outlined consume of Data._Representation(v25, v26);
}

uint64_t PlaybackSyncer.receiveCatchupResponseMessage(payload:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint8_t *v45;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v4 = v3;
  v50 = a1;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (_QWORD *)((char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v4 + 96);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
    goto LABEL_42;
  v49 = a2;
  if (one-time initialization token for playback != -1)
LABEL_43:
    swift_once();
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.playback);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v10, a3, v7);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v47[1] = v18;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v52 = v23;
    v48 = a3;
    *(_DWORD *)v22 = 136315138;
    v47[0] = v22 + 4;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v52);
    a3 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, unint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_1A0DB3000, v19, v20, "PlaybackSync: Receiving catchup response from:%s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    MEMORY[0x1A1B05CC4](v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v10, v7);
  }

  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v27 = v52;
  v26 = v53;
  v28 = v54;
  if (v53 >> 60 != 15)
  {
    outlined copy of Data._Representation(v52, v53);
    PlaybackSyncer.receiveParticipantMessage(payload:from:)();
    outlined consume of Data?(v27, v26);
  }
  if (*(_QWORD *)(v28 + 16))
  {
    v50 = v27;
    v10 = (char *)(v28 + 64);
    v29 = 1 << *(_BYTE *)(v28 + 32);
    v30 = -1;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    v7 = v30 & *(_QWORD *)(v28 + 64);
    v31 = (unint64_t)(v29 + 63) >> 6;
    swift_bridgeObjectRetain();
    a3 = 0;
    while (1)
    {
      if (v7)
      {
        v32 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v33 = v32 | (a3 << 6);
      }
      else
      {
        v36 = a3 + 1;
        if (__OFADD__(a3, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        if (v36 >= v31)
          goto LABEL_29;
        v37 = *(_QWORD *)&v10[8 * v36];
        ++a3;
        if (!v37)
        {
          a3 = v36 + 1;
          if (v36 + 1 >= v31)
            goto LABEL_29;
          v37 = *(_QWORD *)&v10[8 * a3];
          if (!v37)
          {
            a3 = v36 + 2;
            if (v36 + 2 >= v31)
              goto LABEL_29;
            v37 = *(_QWORD *)&v10[8 * a3];
            if (!v37)
            {
              v38 = v36 + 3;
              if (v38 >= v31)
              {
LABEL_29:
                swift_release();
                v39 = v50;
                goto LABEL_37;
              }
              v37 = *(_QWORD *)&v10[8 * v38];
              if (!v37)
              {
                while (1)
                {
                  a3 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    break;
                  if (a3 >= v31)
                    goto LABEL_29;
                  v37 = *(_QWORD *)&v10[8 * a3];
                  ++v38;
                  if (v37)
                    goto LABEL_28;
                }
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              a3 = v38;
            }
          }
        }
LABEL_28:
        v7 = (v37 - 1) & v37;
        v33 = __clz(__rbit64(v37)) + (a3 << 6);
      }
      v34 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * v33);
      v35 = *v34;
      v8 = v34[1];
      outlined copy of Data._Representation(*v34, v8);
      PlaybackSyncer.receiveTransportControlMessage(payload:)();
      outlined consume of Data._Representation(v35, v8);
    }
  }
  v40 = *(unsigned __int8 *)(v4 + 72);
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.default.getter();
  v43 = os_log_type_enabled(v41, v42);
  if (v40 == 1)
  {
    if (!v43)
    {
      outlined consume of Data?(v27, v26);

      return swift_bridgeObjectRelease();
    }
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1A0DB3000, v41, v42, "PlaybackSync: Received empty catchup but have already received non-empty catchup from somebody else. Returning.", v44, 2u);
    MEMORY[0x1A1B05CC4](v44, -1, -1);

  }
  else
  {
    if (v43)
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1A0DB3000, v41, v42, "PlaybackSync: Received empty catchup", v45, 2u);
      MEMORY[0x1A1B05CC4](v45, -1, -1);
    }

    PlaybackSyncer.handleWaitingFor(participant:)(a3);
  }
  v39 = v27;
LABEL_37:
  outlined consume of Data?(v39, v26);
  return swift_bridgeObjectRelease();
}

void PlaybackSyncer.handleWaitingFor(participant:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1 + 88;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
  {
    if (one-time initialization token for playback != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.playback);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    v36 = v13;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v34 = a1;
      v17 = (uint8_t *)v16;
      v33 = swift_slowAlloc();
      v38[0] = v33;
      v35 = v2;
      *(_DWORD *)v17 = 136315138;
      v32 = v17 + 4;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      _os_log_impl(&dword_1A0DB3000, v14, v15, "PlaybackSync: Removing %s from waiting for empty catchup response list", v17, 0xCu);
      v20 = v33;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      v21 = v17;
      a1 = v34;
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a1, (uint64_t)v6);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    swift_endAccess();
    if (*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      swift_retain_n();
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v25 = swift_slowAlloc();
        v38[0] = v25;
        *(_DWORD *)v24 = 136315138;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        swift_bridgeObjectRetain();
        v26 = Set.description.getter();
        v28 = v27;
        swift_bridgeObjectRelease();
        v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A0DB3000, v22, v23, "PlaybackSync: Still waiting for empty catchup responses from:%s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v25, -1, -1);
        MEMORY[0x1A1B05CC4](v24, -1, -1);

      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1A0DB3000, v29, v30, "PlaybackSync: All existing participants replied with empty catchup responses or left, so using existing state", v31, 2u);
        MEMORY[0x1A1B05CC4](v31, -1, -1);
      }

      PlaybackSyncer.useExistingState()();
    }
  }
}

uint64_t PlaybackSyncer.generateCatchupResponseMessage()@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void *v47;
  os_log_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  id v52[4];

  v2 = v1;
  v52[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)v2[12];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.playback);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1A0DB3000, v12, v13, "PlaybackSync: Generating catchup response", v14, 2u);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }

  v15 = (*(uint64_t (**)(void))(*v2 + 208))();
  v49 = a1;
  if (!v15)
  {
    v20 = 0;
    v22 = (void *)0xF000000000000000;
LABEL_17:
    v32 = v50;
    goto LABEL_20;
  }
  v16 = (void *)v15;
  v17 = (void *)objc_opt_self();
  v52[0] = 0;
  v18 = objc_msgSend(v17, sel_dataWithJSONObject_options_error_, v16, 0, v52);
  v19 = v52[0];
  if (v18)
  {
    v20 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    outlined copy of Data._Representation((uint64_t)v20, (unint64_t)v22);
    outlined copy of Data._Representation((uint64_t)v20, (unint64_t)v22);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v48 = v23;
      v25 = (uint8_t *)swift_slowAlloc();
      v47 = (void *)swift_slowAlloc();
      v52[0] = v47;
      *(_DWORD *)v25 = 136315138;
      static String.Encoding.utf8.getter();
      v26 = String.init(data:encoding:)();
      if (v27)
      {
        v28 = v27;
      }
      else
      {
        v26 = 0x64696C61766E693CLL;
        v28 = 0xE90000000000003ELL;
      }
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      v23 = v48;
      _os_log_impl(&dword_1A0DB3000, v48, v24, "PlaybackSync: attaching participant state to catchup: %s", v25, 0xCu);
      v29 = v47;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v29, -1, -1);
      MEMORY[0x1A1B05CC4](v25, -1, -1);

    }
    else
    {

      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
      outlined consume of Data._Representation((uint64_t)v20, (unint64_t)v22);
    }

    goto LABEL_17;
  }
  v30 = v19;
  v31 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  v32 = 0;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1A0DB3000, v33, v34, "PlaybackSync: Could not serialize participant state.", v35, 2u);
    MEMORY[0x1A1B05CC4](v35, -1, -1);

  }
  else
  {

  }
  v20 = 0;
  v22 = (void *)0xF000000000000000;
LABEL_20:
  if ((*(uint64_t (**)(void))(*v2 + 400))())
  {
    v37 = v36;
    ObjectType = swift_getObjectType();
    v39 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 32))(ObjectType, v37);
    swift_unknownObjectRelease();
  }
  else
  {
    v39 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v52[0] = v20;
  v52[1] = v22;
  v52[2] = v39;
  outlined copy of Data?((uint64_t)v20, (unint64_t)v22);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState();
  v40 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v32)
  {
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v43 = v40;
    v44 = v41;
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    outlined consume of Data?((uint64_t)v20, (unint64_t)v22);
    result = swift_bridgeObjectRelease();
    v45 = v49;
    *v49 = 3;
    *((_QWORD *)v45 + 1) = v43;
    *((_QWORD *)v45 + 2) = v44;
  }
  return result;
}

uint64_t jsonToString(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v0);
  static String.Encoding.utf8.getter();
  result = String.init(data:encoding:)();
  if (!v2)
    return 0x64696C61766E693CLL;
  return result;
}

uint64_t PlaybackSyncer.scheduleTransportStateTakeoverTimer()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t ObjectType;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];

  v1 = v0;
  v40 = type metadata accessor for DispatchTime();
  v37 = *(_QWORD *)(v40 - 8);
  v2 = MEMORY[0x1E0C80A78](v40);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v34 - v5;
  v7 = type metadata accessor for DispatchTimeInterval();
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (void *)*((_QWORD *)v1 + 12);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v36 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 424))(v16);
  if (!result)
    return result;
  if (*((_QWORD *)v1 + 10))
  {
    if (one-time initialization token for playback == -1)
    {
LABEL_5:
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.playback);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1A0DB3000, v20, v21, "PlaybackSync: Attempting to schedule transport state takeover when one already exists.", v22, 2u);
        MEMORY[0x1A1B05CC4](v22, -1, -1);
      }

      return swift_unknownObjectRelease();
    }
LABEL_17:
    swift_once();
    goto LABEL_5;
  }
  v35 = v18;
  if (one-time initialization token for playback != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.playback);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1A0DB3000, v24, v25, "PlaybackSync: Scheduling takeover countdown", v26, 2u);
    MEMORY[0x1A1B05CC4](v26, -1, -1);
  }

  aBlock[4] = partial apply for closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer();
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_61;
  v34 = (uint64_t)_Block_copy(aBlock);
  v41 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v34 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(v35 + 80))(ObjectType);
  CurrentValueSubject.value.getter();
  swift_release();
  v28 = &OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval;
  if (!LOBYTE(aBlock[0]))
    v28 = &OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval;
  v29 = v38;
  v30 = v39;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v9, &v1[*v28], v39);
  static DispatchTime.now()();
  MEMORY[0x1A1B046F8](v4, v9);
  v31 = *(void (**)(char *, uint64_t))(v37 + 8);
  v32 = v40;
  v31(v4, v40);
  v33 = v34;
  MEMORY[0x1A1B04D28](v6, v34);
  v31(v6, v32);
  *((_QWORD *)v1 + 10) = v33;
  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v9, v30);
}

uint64_t closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    if (one-time initialization token for playback != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.playback);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A0DB3000, v2, v3, "PlaybackSync: Transport state takeover timer has expired. Using existing state.", v4, 2u);
      MEMORY[0x1A1B05CC4](v4, -1, -1);
    }

    return PlaybackSyncer.useExistingState()();
  }
  return result;
}

uint64_t PlaybackSyncer.sendMessage(_:to:)(char *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 1);
  v12 = *((_QWORD *)a1 + 2);
  v13 = (void *)v3[12];
  *v9 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for playback == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.playback);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1A0DB3000, v16, v17, "PlaybackSync: Sending message.", v18, 2u);
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }

  result = (*(uint64_t (**)(void))(*v3 + 424))();
  if (result)
  {
    v21 = v20;
    ObjectType = swift_getObjectType();
    v24[0] = v10;
    v25 = v11;
    v26 = v12;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 8))(v24, a2, ObjectType, v21);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t PlaybackSyncer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + 56));
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 112);
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 128);
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 144);
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval;
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval, v2);
  return v0;
}

uint64_t PlaybackSyncer.__deallocating_deinit()
{
  PlaybackSyncer.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CoordinatorDelegate.shareLocalParticipantState(participantState:) in conformance PlaybackSyncer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t protocol witness for CoordinatorDelegate.shareTransportControlState(itemIdentifier:transportControlState:) in conformance PlaybackSyncer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t protocol witness for CoordinatorDelegate.reloadTransportControlStateForItem(itemIdentifier:completion:) in conformance PlaybackSyncer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t protocol witness for CoordinatorDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:) in conformance PlaybackSyncer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v1);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1A1B05DC0](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:));
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v10;

  ObjectType = swift_getObjectType();
  v10 = a4(a1, a2, v4, ObjectType, a3);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantUUID(for:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  if (one-time initialization token for playback != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.playback);
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = &unk_1EE5EB000;
  if (os_log_type_enabled(v5, v6))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v7 = (_QWORD *)&unk_1EE5EB000;
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v5, v6, "PlaybackSync: AVPlaybackCoordinator asked for local participant UUID:%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v9, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);

  }
  else
  {

  }
  v12 = &v4[v7[13]];
  v13 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, v12, v13);
}

Swift::Void __swiftcall PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastLocalParticipantStateDictionary:)(AVPlaybackCoordinator _, Swift::OpaquePointer broadcastLocalParticipantStateDictionary)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  Class isa;

  if ((*(uint64_t (**)(Class))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x60))(_.super.isa))
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    type metadata accessor for AVPlaybackCoordinationParticipantStateKey(0);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(Class, uint64_t, uint64_t))(v4 + 8))(isa, ObjectType, v4);

    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastTransportControlStateDictionary:forItemWithIdentifier:)(AVPlaybackCoordinator _, Swift::OpaquePointer broadcastTransportControlStateDictionary, Swift::String forItemWithIdentifier)
{
  _QWORD *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  Class isa;

  object = forItemWithIdentifier._object;
  countAndFlagsBits = forItemWithIdentifier._countAndFlagsBits;
  if ((*(uint64_t (**)(Class))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60))(_.super.isa))
  {
    v7 = v6;
    ObjectType = swift_getObjectType();
    type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, void *, Class, uint64_t, uint64_t))(v7 + 16))(countAndFlagsBits, object, isa, ObjectType, v7);

    swift_unknownObjectRelease();
  }
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:reloadTransportControlStateForItemWithIdentifier:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x60))();
  if (result)
  {
    v12 = v11;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24))(a2, a3, a4, a5, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

id PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PlaybackSyncer.AVCoordinatorDelegateBridge.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PlaybackSyncer.AVCoordinatorDelegateBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return specialized PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(a2, a3, a4);
}

uint64_t closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v19 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject();
  *(_BYTE *)(v15 + 16) = a1;
  *(_BYTE *)(v15 + 17) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_70;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A1B04D7C](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v18);
}

uint64_t closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for playback != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.playback);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v15 = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v6, v7, "Calling playback coordinator dismissal callback with result: %s promptForLeaveOrEndSessionAllowingCancellation%s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v9, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);
  }

  return a3(a1 & 1);
}

uint64_t PlaybackSyncer.CatchupState.localParticipantState.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t PlaybackSyncer.CatchupState.localParticipantState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PlaybackSyncer.CatchupState.localParticipantState.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t PlaybackSyncer.CatchupState.transportControlStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlaybackSyncer.CatchupState.transportControlStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PlaybackSyncer.CatchupState.transportControlStates.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlaybackSyncer.CatchupState.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackSyncer.CatchupState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackSyncer.CatchupState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackSyncer.CatchupState.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlaybackSyncer.CatchupState.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlaybackSyncer.CatchupState.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v16 = a3;
  v17 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    v15 = v14;
    v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PlaybackSyncer.CatchupState.init()()
{
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return 0;
}

uint64_t PlaybackSyncer.CatchupState.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = specialized PlaybackSyncer.CatchupState.init(from:)(a1);
  if (v1)
    return v3;
  return result;
}

unint64_t default argument 1 of PlaybackSyncer.CatchupState.init(localParticipantState:transportControlStates:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.CatchupState@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = specialized PlaybackSyncer.CatchupState.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.CatchupState(_QWORD *a1)
{
  uint64_t *v1;

  return PlaybackSyncer.CatchupState.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PlaybackSyncer.Message.MessageType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PlaybackSyncer.Message.MessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PlaybackSyncer.Message.MessageType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.Message.MessageType()
{
  lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.Message.MessageType()
{
  lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t PlaybackSyncer.Message.type.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PlaybackSyncer.Message.payload.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackSyncer.Message.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x64616F6C796170;
  else
    return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackSyncer.Message.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackSyncer.Message.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackSyncer.Message.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackSyncer.Message.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlaybackSyncer.Message.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlaybackSyncer.Message.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v11 = *((_QWORD *)v1 + 2);
  v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  v15 = 0;
  lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13 = v12;
    v14 = v11;
    v15 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PlaybackSyncer.Message.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  __int128 v10;
  __int128 v12;
  char v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlaybackSyncer.Message.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13 = 0;
    lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v12;
    v13 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v12;
    *(_BYTE *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackSyncer.Message@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackSyncer.Message.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackSyncer.Message(_QWORD *a1)
{
  return PlaybackSyncer.Message.encode(to:)(a1);
}

Swift::Void __swiftcall AVPlaybackCoordinator.handleNewTransportControlStateDictionary(_:)(NSDictionary a1)
{
  AVPlaybackCoordinator.handleNewTransportControlStateDictionary(_:)((uint64_t)a1.super.isa, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, &lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
}

Swift::Void __swiftcall AVPlaybackCoordinator.handleNewParticipantStateDictionary(_:)(NSDictionary a1)
{
  AVPlaybackCoordinator.handleNewTransportControlStateDictionary(_:)((uint64_t)a1.super.isa, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, &lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
}

void AVPlaybackCoordinator.handleNewTransportControlStateDictionary(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  a2(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(a3, a2, a4);
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
}

uint64_t AVPlaybackCoordinator.getTrackedTransportStates()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_trackedTransportControlStateDictionaries);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AVPlaybackCoordinationTransportControlStateKey : Any]);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = specialized Dictionary.compactMapValues<A>(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void closure #1 in AVPlaybackCoordinator.getTrackedTransportStates()(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  Class isa;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24[2];

  v24[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v2);
  v3 = (void *)objc_opt_self();
  type metadata accessor for AVPlaybackCoordinationTransportControlStateKey(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v24[0] = 0;
  v5 = objc_msgSend(v3, sel_dataWithJSONObject_options_error_, isa, 0, v24);

  v6 = v24[0];
  if (v5)
  {
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    if (one-time initialization token for playback != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.playback);
    outlined copy of Data._Representation(v7, v9);
    outlined copy of Data._Representation(v7, v9);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (void *)swift_slowAlloc();
      v24[0] = v14;
      *(_DWORD *)v13 = 136315138;
      static String.Encoding.utf8.getter();
      v15 = String.init(data:encoding:)();
      if (v16)
      {
        v17 = v16;
      }
      else
      {
        v15 = 0x64696C61766E693CLL;
        v17 = 0xE90000000000003ELL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v7, v9);
      outlined consume of Data._Representation(v7, v9);
      _os_log_impl(&dword_1A0DB3000, v11, v12, "PlaybackSync: attaching AV transport control state to catchup: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v14, -1, -1);
      MEMORY[0x1A1B05CC4](v13, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v7, v9);
      outlined consume of Data._Representation(v7, v9);
    }

  }
  else
  {
    v18 = v6;
    v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for playback != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.playback);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1A0DB3000, v21, v22, "PlaybackSync: Could not serialize AV transport control state.", v23, 2u);
      MEMORY[0x1A1B05CC4](v23, -1, -1);
    }

    v7 = 0;
    v9 = 0xF000000000000000;
  }
  *a1 = v7;
  a1[1] = v9;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = MEMORY[0x1E0DEE9E0];
  v37 = MEMORY[0x1E0DEE9E0];
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = (v5 - 1) & v5;
      v9 = __clz(__rbit64(v5)) | (v7 << 6);
      v10 = v7;
      goto LABEL_22;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v10 >= v30)
      goto LABEL_42;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    if (!v11)
      break;
LABEL_21:
    v8 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v10 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in AVPlaybackCoordinator.getTrackedTransportStates()(&v34);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_42:
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      return v2;
    }
    v16 = v35;
    if (v35 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = v34;
      v17 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v17)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17 + 1, 1);
        v2 = v37;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v18 = v2 + 64;
      v19 = -1 << *(_BYTE *)(v2 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v2 + 64 + 8 * (v20 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v2 + 64 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v18 + 8 * v21);
        }
        while (v26 == -1);
        v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      }
      *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      v27 = 16 * v22;
      v28 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v27);
      *v28 = v14;
      v28[1] = v15;
      v29 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v27);
      *v29 = v32;
      v29[1] = v16;
      ++*(_QWORD *)(v2 + 16);
    }
    result = swift_bridgeObjectRelease();
    v7 = v10;
    v5 = v8;
  }
  v12 = v7 + 2;
  if (v7 + 2 >= v30)
    goto LABEL_42;
  v11 = *(_QWORD *)(v31 + 8 * v12);
  if (v11)
    goto LABEL_20;
  v12 = v7 + 3;
  if (v7 + 3 >= v30)
    goto LABEL_42;
  v11 = *(_QWORD *)(v31 + 8 * v12);
  if (v11)
    goto LABEL_20;
  v12 = v7 + 4;
  if (v7 + 4 >= v30)
    goto LABEL_42;
  v11 = *(_QWORD *)(v31 + 8 * v12);
  if (v11)
    goto LABEL_20;
  v12 = v7 + 5;
  if (v7 + 5 >= v30)
    goto LABEL_42;
  v11 = *(_QWORD *)(v31 + 8 * v12);
  if (v11)
  {
LABEL_20:
    v10 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v10 >= v30)
      goto LABEL_42;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_44:
  __break(1u);
  return result;
}

void protocol witness for PlaybackCoordinating.handleNewTransportControlStateDictionary(_:) in conformance AVPlaybackCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for PlaybackCoordinating.handleNewTransportControlStateDictionary(_:) in conformance AVPlaybackCoordinator(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationTransportControlStateKey, &lazy protocol witness table cache variable for type AVPlaybackCoordinationTransportControlStateKey and conformance AVPlaybackCoordinationTransportControlStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationTransportControlStateKey);
}

void protocol witness for PlaybackCoordinating.handleNewParticipantStateDictionary(_:) in conformance AVPlaybackCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for PlaybackCoordinating.handleNewTransportControlStateDictionary(_:) in conformance AVPlaybackCoordinator(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for AVPlaybackCoordinationParticipantStateKey, &lazy protocol witness table cache variable for type AVPlaybackCoordinationParticipantStateKey and conformance AVPlaybackCoordinationParticipantStateKey, (uint64_t)&protocol conformance descriptor for AVPlaybackCoordinationParticipantStateKey);
}

void protocol witness for PlaybackCoordinating.handleNewTransportControlStateDictionary(_:) in conformance AVPlaybackCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  a4(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(a5, a4, a6);
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
}

void protocol witness for PlaybackCoordinating.handleRemoval(ofParticipant:) in conformance AVPlaybackCoordinator()
{
  void *v0;
  Class isa;

  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, sel_handleRemovalOfParticipant_, isa);

}

uint64_t protocol witness for PlaybackCoordinating.getTrackedTransportStates() in conformance AVPlaybackCoordinator()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_trackedTransportControlStateDictionaries);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AVPlaybackCoordinationTransportControlStateKey : Any]);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = specialized Dictionary.compactMapValues<A>(_:)(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized PlaybackSyncer.init(internalCoordinator:serialQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v4 = v3;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  *(_QWORD *)(v3 + 32) = PropertyListEncoder.init()();
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v7 = PropertyListDecoder.init()();
  v8 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 48) = v8;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = v8;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v3 + 136) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v3 + 152) = 0;
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_defaultTransportStateTakeoverInterval);
  *v9 = 20;
  v10 = *MEMORY[0x1E0DEF4A0];
  v11 = type metadata accessor for DispatchTimeInterval();
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v12)(v9, v10, v11);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15GroupActivities14PlaybackSyncer_initiatorTransportStateTakeoverInterval) = 10;
  v12();
  if (one-time initialization token for playback != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.playback);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1A0DB3000, v14, v15, "PlaybackSync: Creating playback syncer for group session", v16, 2u);
    MEMORY[0x1A1B05CC4](v16, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(v4 + 120) = a2;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v4 + 96) = a3;
  return v4;
}

id specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v8 = &a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate];
  *(_QWORD *)&a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v9 = &a3[OBJC_IVAR____TtCC15GroupActivities14PlaybackSyncer27AVCoordinatorDelegateBridge_localParticipantID];
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  swift_beginAccess();
  *((_QWORD *)v8 + 1) = a5;
  swift_unknownObjectWeakAssign();
  v14.receiver = a3;
  v14.super_class = (Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
  v12 = objc_msgSendSuper2(&v14, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v12;
}

id specialized PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v9;

  v9 = (char *)objc_allocWithZone((Class)type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0));
  return specialized PlaybackSyncer.AVCoordinatorDelegateBridge.init(localParticipantID:delegate:)(a1, a2, v9, a4, a5);
}

uint64_t sub_1A0E033F4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1, uint64_t a2)
{
  return closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1, a2);
}

uint64_t partial apply for closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(uint64_t a1)
{
  return closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1);
}

uint64_t sub_1A0E03428()
{
  return objectdestroy_4Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return closure #3 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  return closure #4 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1A0E03460()
{
  return objectdestroy_4Tm((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t objectdestroy_4Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)()
{
  uint64_t *v0;

  return closure #1 in PlaybackSyncer.replaceCoordinator(coordinator:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_1A0E034C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  closure #1 in PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1A0E03594()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)()
{
  uint64_t v0;

  closure #1 in PlaybackSyncer.shareLocalParticipantState(participantState:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A0E035C8()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)()
{
  uint64_t v0;

  closure #1 in PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1A0E03608()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)()
{
  uint64_t v0;

  return closure #1 in PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t specialized PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  if (one-time initialization token for playback != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.playback);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v23 = a3;
    v12 = a2;
    v13 = swift_slowAlloc();
    v24 = v13;
    *(_DWORD *)v11 = 136315138;
    v14 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "PlaybackSync: Got dismissal callback promptForLeaveOrEndSessionAllowingCancellation: %s", v11, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    a2 = v12;
    a3 = v23;
    MEMORY[0x1A1B05CC4](v16, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60))();
  if (result)
  {
    v19 = v18;
    ObjectType = swift_getObjectType();
    v21 = swift_allocObject();
    *(_BYTE *)(v21 + 16) = a1 & 1;
    *(_QWORD *)(v21 + 24) = a2;
    *(_QWORD *)(v21 + 32) = a3;
    v22 = *(void (**)(_QWORD, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v19 + 32);
    swift_retain();
    v22(a1 & 1, partial apply for closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:), v21, ObjectType, v19);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState.CodingKeys, &unk_1E44F8078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState.CodingKeys, &unk_1E44F8078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState.CodingKeys, &unk_1E44F8078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState.CodingKeys, &unk_1E44F8078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys);
  }
  return result;
}

uint64_t specialized PlaybackSyncer.CatchupState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000001A0F19BD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001A0F19BF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized PlaybackSyncer.CatchupState.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[2];
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlaybackSyncer.CatchupState.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackSyncer.CatchupState.CodingKeys and conformance PlaybackSyncer.CatchupState.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    v8 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    v11 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v8 = v10[0];
    v9 = v10[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    v11 = 1;
    outlined copy of Data?(v8, v9);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined copy of Data?(v8, v9);
    outlined consume of Data?(v8, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    outlined consume of Data?(v8, v9);
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized PlaybackSyncer.Message.MessageType.init(rawValue:)(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.CodingKeys, &unk_1E44F8218);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.CodingKeys, &unk_1E44F8218);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.CodingKeys, &unk_1E44F8218);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.CodingKeys, &unk_1E44F8218);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.CodingKeys and conformance PlaybackSyncer.Message.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.MessageType, &type metadata for PlaybackSyncer.Message.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.MessageType, &type metadata for PlaybackSyncer.Message.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.MessageType, &type metadata for PlaybackSyncer.Message.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.Message.MessageType, &type metadata for PlaybackSyncer.Message.MessageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.Message.MessageType and conformance PlaybackSyncer.Message.MessageType);
  }
  return result;
}

uint64_t sub_1A0E03D14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E03D44(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 216);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1A0E03D80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E03DB0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 240);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0E03DE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E03E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 408);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0E03E50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 424))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E03E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 432);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0E03EC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 448))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E03EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 456);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0E03F30@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E03F70(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of PlaybackSyncerDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t ObjC metadata update function for PlaybackSyncer()
{
  return type metadata accessor for PlaybackSyncer(0);
}

uint64_t type metadata accessor for PlaybackSyncer(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PlaybackSyncer);
}

uint64_t type metadata completion function for PlaybackSyncer()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for PlaybackSyncer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PlaybackSyncer.localParticipantState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PlaybackSyncer.transportControlStates.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of PlaybackSyncer.coordinator.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of PlaybackSyncer.link.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of PlaybackSyncer.syncerDelegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of PlaybackSyncer.__allocating_init(internalCoordinator:serialQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 472))();
}

uint64_t dispatch thunk of PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of PlaybackSyncer.replaceCoordinator(coordinator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of PlaybackSyncer.replaceCoordinator(avPlaybackCoordinator:localParticipantUUID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of PlaybackSyncer.participantLeft(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of PlaybackSyncer.cleanUp()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of PlaybackSyncer.shouldDismissPlayback(allowingCancellation:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of PlaybackSyncer.shareLocalParticipantState(participantState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of PlaybackSyncer.shareTransportControlState(itemIdentifier:transportControlState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of PlaybackSyncer.reloadTransportControlStateForItem(itemIdentifier:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shareLocalParticipantState(participantState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shareTransportControlState(itemIdentifier:transportControlState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of CoordinatorDelegate.reloadTransportControlStateForItem(itemIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of CoordinatorDelegate.shouldDismissPlayback(allowingCancellation:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t ObjC metadata update function for PlaybackSyncer.AVCoordinatorDelegateBridge()
{
  return type metadata accessor for PlaybackSyncer.AVCoordinatorDelegateBridge(0);
}

uint64_t type metadata completion function for PlaybackSyncer.AVCoordinatorDelegateBridge()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PlaybackSyncer.AVCoordinatorDelegateBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.__allocating_init(localParticipantID:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.localParticipantUUID(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastLocalParticipantStateDictionary:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:broadcastTransportControlStateDictionary:forItemWithIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:reloadTransportControlStateForItemWithIdentifier:completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t destroy for PlaybackSyncer.CatchupState(uint64_t *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PlaybackSyncer.CatchupState(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PlaybackSyncer.CatchupState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  outlined copy of Data._Representation(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for PlaybackSyncer.CatchupState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.CatchupState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.CatchupState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.CatchupState()
{
  return &type metadata for PlaybackSyncer.CatchupState;
}

uint64_t destroy for PlaybackSyncer.Message(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for PlaybackSyncer.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.Message(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[24])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.Message()
{
  return &type metadata for PlaybackSyncer.Message;
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.Message.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A0E047CC + 4 * byte_1A0F0EDE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A0E04800 + 4 * byte_1A0F0EDE0[v4]))();
}

uint64_t sub_1A0E04800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E04808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E04810);
  return result;
}

uint64_t sub_1A0E0481C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E04824);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A0E04828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E04830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackSyncer.Message.MessageType()
{
  return &type metadata for PlaybackSyncer.Message.MessageType;
}

uint64_t dispatch thunk of PlaybackCoordinating.handleNewParticipantStateDictionary(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PlaybackCoordinating.handleRemoval(ofParticipant:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlaybackCoordinating.getTrackedTransportStates()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.sendMessage(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.receivedMessageHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.participantLeftHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.localUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.sessionUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PlaybackSyncerLink.shouldRequestCatchup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

void *type metadata accessor for PlaybackSyncer.Message.CodingKeys()
{
  return &unk_1E44F8218;
}

uint64_t getEnumTagSinglePayload for PlaybackSyncer.Message.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackSyncer.Message.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E049A8 + 4 * byte_1A0F0EDEF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E049DC + 4 * byte_1A0F0EDEA[v4]))();
}

uint64_t sub_1A0E049DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E049E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E049ECLL);
  return result;
}

uint64_t sub_1A0E049F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E04A00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E04A04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E04A0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for PlaybackSyncer.CatchupState.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for PlaybackSyncer.CatchupState.CodingKeys()
{
  return &unk_1E44F8078;
}

uint64_t specialized PlaybackSyncer.Message.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A0E04CC4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()()
{
  uint64_t v0;

  return closure #1 in PlaybackSyncer.scheduleTransportStateTakeoverTimer()(v0);
}

unint64_t lazy protocol witness table accessor for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState, &type metadata for PlaybackSyncer.CatchupState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState;
  if (!lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PlaybackSyncer.CatchupState, &type metadata for PlaybackSyncer.CatchupState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackSyncer.CatchupState and conformance PlaybackSyncer.CatchupState);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithTake for GroupSessionTable.Storage(a2, a1);
  return a2;
}

uint64_t outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (!a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A0E04F88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(char a1)
{
  uint64_t v1;

  return closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in PlaybackSyncer.AVCoordinatorDelegateBridge.playbackCoordinator(_:promptForLeaveOrEndSessionAllowingCancellation:completionHandler:)(*(_BYTE *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(uint64_t (**)(_QWORD))(v0 + 24));
}

uint64_t sub_1A0E04FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in closure #2 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1A0E0506C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in closure #1 in PlaybackSyncer.connect(toLink:withExistingRemoteParticipants:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t SpatialTemplatePreference.contentExtent.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void SpatialTemplatePreference.storage.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

char *SpatialTemplatePreference.init(storage:contentExtent:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *result;
  *(_QWORD *)a4 = a2;
  *(_BYTE *)(a4 + 8) = a3 & 1;
  *(_BYTE *)(a4 + 9) = v4;
  return result;
}

uint64_t SpatialTemplatePreference.init(storage:spatialTemplate:contentExtent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v10;

  result = outlined destroy of SpatialTemplate?(a2);
  v10 = *a1;
  *(_QWORD *)a5 = a3;
  *(_BYTE *)(a5 + 8) = a4 & 1;
  *(_BYTE *)(a5 + 9) = v10;
  return result;
}

uint64_t outlined destroy of SpatialTemplate?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplate?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

GroupActivities::SpatialTemplatePreference::Storage_optional __swiftcall SpatialTemplatePreference.Storage.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (GroupActivities::SpatialTemplatePreference::Storage_optional)rawValue;
}

uint64_t SpatialTemplatePreference.Storage.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

GroupActivities::SpatialTemplatePreference::Storage_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SpatialTemplatePreference.Storage(Swift::Int *a1)
{
  return SpatialTemplatePreference.Storage.init(rawValue:)(*a1);
}

uint64_t SpatialTemplatePreference.description.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A0E0528C
                                                            + 4 * byte_1A0F0F3F0[*(unsigned __int8 *)(v0 + 9)]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A0E0528C()
{
  return 0x6953794265646973;
}

uint64_t sub_1A0E052A8()
{
  return 0x61737265766E6F63;
}

uint64_t sub_1A0E052CC()
{
  return 0x646E756F72727573;
}

uint64_t sub_1A0E052E4()
{
  return 0x6D6F74737563;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialTemplatePreference()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A0E05320
                                                            + 4 * byte_1A0F0F3F5[*(unsigned __int8 *)(v0 + 9)]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1A0E05320()
{
  return 0x6953794265646973;
}

uint64_t sub_1A0E0533C()
{
  return 0x61737265766E6F63;
}

uint64_t sub_1A0E05360()
{
  return 0x646E756F72727573;
}

uint64_t sub_1A0E05378()
{
  return 0x6D6F74737563;
}

void static SpatialTemplatePreference.none.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static SpatialTemplatePreference.sideBySide.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
}

void static SpatialTemplatePreference.conversational.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 513;
}

void static SpatialTemplatePreference.surround.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 769;
}

void static SpatialTemplatePreference.custom(_:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1025;
}

void SpatialTemplatePreference.contentExtent(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;

  v3 = *(_BYTE *)(v2 + 9);
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = v3;
}

double SpatialTemplatePreference.role(for:inSeatNumber:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t SpatialTemplatePreference.isCustom.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreference.Storage, &type metadata for SpatialTemplatePreference.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreference.Storage and conformance SpatialTemplatePreference.Storage);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreference()
{
  return &type metadata for SpatialTemplatePreference;
}

uint64_t getEnumTagSinglePayload for SpatialTemplatePreference.Storage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplatePreference.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0E0553C + 4 * byte_1A0F0F3FF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0E05570 + 4 * byte_1A0F0F3FA[v4]))();
}

uint64_t sub_1A0E05570(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E05578(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E05580);
  return result;
}

uint64_t sub_1A0E0558C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E05594);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0E05598(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E055A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplatePreference.Storage()
{
  return &type metadata for SpatialTemplatePreference.Storage;
}

uint64_t GroupSession.requestEndpoint(with:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  v2[5] = v1;
  v2[6] = v3;
  v2[7] = v4;
  return swift_task_switch();
}

uint64_t GroupSession.requestEndpoint(with:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 56);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 48);
    v7 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v17 = v15;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    v8 = GroupSession.description.getter();
    v10 = v9;
    swift_release();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Application called requestEndpoint(with: %s) on %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  v11 = *(_QWORD *)(v0 + 56);
  v16 = *(_OWORD *)(v0 + 40);
  v12 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v12;
  *(_OWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 32) = v11;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSXPCListenerEndpoint?);
  *v13 = v0;
  v13[1] = GroupSession.requestEndpoint(with:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  dispatch_queue_t v18;
  _QWORD aBlock[6];

  v8 = (_QWORD *)*a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v18 = *(dispatch_queue_t *)((char *)a2 + v8[36]);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = v8[10];
  *((_QWORD *)v13 + 3) = v8[11];
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = a3;
  *((_QWORD *)v13 + 6) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_2;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v15);
  _Block_release(v15);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a4 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id *v12;
  id v13;
  NSObject *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  _QWORD aBlock[6];

  v21 = a3;
  v7 = (_QWORD *)*a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (id *)((char *)a1 + v7[35]);
  swift_beginAccess();
  v13 = *v12;
  v14 = XPCClient.queue.getter();

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v7[10];
  *((_QWORD *)v16 + 3) = v7[11];
  *((_QWORD *)v16 + 4) = a1;
  v17 = v21;
  *((_QWORD *)v16 + 5) = a2;
  *((_QWORD *)v16 + 6) = v17;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  *(_QWORD *)(v18 + 24) = v16;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v19);

  _Block_release(v19);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (void **)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 280));
  swift_beginAccess();
  v12 = *v11;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a4, v8);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v9 + 32))(v14 + v13, &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v15 = v12;
  XPCClient.withHost(body:errorHandler:)();
  swift_release();

}

void closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = *a1;
  v12 = (void *)MEMORY[0x1A1B048B4](a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v8);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = &block_descriptor_26;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v11, sel_requestEndpointWith_completion_, v12, v15);
  _Block_release(v15);

}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  return CheckedContinuation.resume(returning:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  v3 = a1;
  v4 = a1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "connection error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {

  }
  v14 = (uint64_t)a1;
  v12 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t GroupSession.requestEndpointError(with:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[1];
  v2[2] = *a1;
  v2[3] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = GroupSession.requestEndpointError(with:);
  v5 = v2[2];
  v6 = v2[3];
  v4[5] = v1;
  v4[6] = v5;
  v4[7] = v6;
  return swift_task_switch();
}

uint64_t GroupSession.requestEndpointError(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 40) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t GroupSession.requestEndpointError(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionEndpointIdentifier.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

GroupActivities::GroupSessionEndpointIdentifier __swiftcall GroupSessionEndpointIdentifier.init(rawValue:)(GroupActivities::GroupSessionEndpointIdentifier rawValue)
{
  GroupActivities::GroupSessionEndpointIdentifier *v1;

  *v1 = rawValue;
  return rawValue;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionEndpointIdentifier()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupSessionEndpointIdentifier()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionEndpointIdentifier()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance GroupSessionEndpointIdentifier@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GroupSessionEndpointIdentifier@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionEndpointIdentifier(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t partial apply for closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupSession.requestEndpoint(with:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier;
  if (!lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionEndpointIdentifier, &type metadata for GroupSessionEndpointIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionEndpointIdentifier and conformance GroupSessionEndpointIdentifier);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupSessionEndpointIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for GroupSessionEndpointIdentifier()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for GroupSessionEndpointIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for GroupSessionEndpointIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEndpointIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionEndpointIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionEndpointIdentifier()
{
  return &type metadata for GroupSessionEndpointIdentifier;
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)()
{
  return partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, char *))closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t sub_1A0E06638()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)()
{
  return partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, char *))closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t partial apply for closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, char *))
{
  char *v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>)
                                      - 8)
                          + 80);
  return a1(*((_QWORD *)v1 + 4), *((_QWORD *)v1 + 5), *((_QWORD *)v1 + 6), &v1[(v2 + 56) & ~v2]);
}

uint64_t sub_1A0E06740()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in GroupSession.requestEndpoint(with:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSXPCListenerEndpoint?, Error>)
                                      - 8)
                          + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t SystemCoordinatorTable.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  return v0;
}

uint64_t *SystemCoordinatorTable.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static SystemCoordinatorTable.shared;
}

uint64_t static SystemCoordinatorTable.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t (*SystemCoordinatorTable.systemCoordinatorsById.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinatorTable.systemCoordinator(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v8;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  v8 = (char *)&async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:)
     + async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = SystemCoordinatorTable.systemCoordinator(for:);
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

uint64_t SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)()
{
  uint64_t v0;
  _QWORD *v1;

  outlined init with copy of AudioSessionAssertionManager(*(_QWORD *)(v0 + 64), v0 + 16);
  type metadata accessor for SystemCoordinator();
  swift_allocObject();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = closure #1 in SystemCoordinatorTable.systemCoordinator(for:);
  return SystemCoordinator.init(clientProvider:)(v0 + 16);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 56) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator);
  v6[16] = v7;
  v6[17] = *(_QWORD *)(v7 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in SystemCoordinatorTable.systemCoordinator(for:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  *(_QWORD *)(v0 + 152) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 193) = *(_BYTE *)(v0 + 192);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  uint64_t Strong;
  _QWORD *v4;

  v1 = *(unsigned __int8 *)(v0 + 193);
  if (v1 == 2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if ((v1 & 1) != 0 || (Strong = swift_weakLoadStrong(), (*(_QWORD *)(v0 + 176) = Strong) == 0))
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v4;
    *v4 = v0;
    v4[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    return swift_task_switch();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;

  v1 = v0[22] + 112;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v3 = v0[15];
    swift_bridgeObjectRetain();
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      v6 = v0[15];
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v4 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      MEMORY[0x1A1B04B54](v7, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      v10 = v9;
      swift_bridgeObjectRelease();
      v11 = 0;
      v12 = 0;
      if ((v10 & 1) != 0)
      {
        v13 = v0 + 12;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = *(_QWORD *)v1;
        v0[12] = *(_QWORD *)v1;
        *(_QWORD *)v1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v15 = *v13;
        }
        v16 = *(_QWORD *)(v15 + 48);
        v17 = type metadata accessor for UUID();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v8, v17);
        v18 = *v13;
        v19 = (uint64_t *)(*(_QWORD *)(*v13 + 56) + 16 * v8);
        v11 = *v19;
        v12 = v19[1];
        specialized _NativeDictionary._delete(at:)(v8, v18);
        *(_QWORD *)v1 = v18;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      outlined consume of SystemCoordinatorTable.Storage?(v11, v12);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  v20 = (_QWORD *)swift_task_alloc();
  v0[23] = v20;
  *v20 = v0;
  v20[1] = closure #2 in SystemCoordinatorTable.systemCoordinator(for:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

uint64_t SystemCoordinatorTable.clearSystemCoordinator(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      MEMORY[0x1A1B04B54](v7, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      swift_beginAccess();
      v8 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
      v10 = v9;
      swift_endAccess();
      outlined consume of SystemCoordinatorTable.Storage?(v8, v10);
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t SystemCoordinatorTable.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SystemCoordinatorTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SystemCoordinatorTable.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9E0];
  return v0;
}

uint64_t SystemCoordinatorTable.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance SystemCoordinatorTable()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[30] = a3;
  v4[31] = a4;
  v4[29] = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  v4[32] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[33] = v8;
  v4[34] = *(_QWORD *)(v8 + 64);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[37] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v4[38] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[39] = v10;
  v4[40] = *(_QWORD *)(v10 + 64);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[5] = a3;
  v4[6] = a4;
  v4[44] = (uint64_t)__swift_allocate_boxed_opaque_existential_1(v4 + 2);
  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  return swift_task_switch();
}

uint64_t specialized SystemCoordinatorTable.systemCoordinator(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 248) + 24))(*(_QWORD *)(v0 + 240));
  v36 = (uint64_t *)(v1 + 112);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 112);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_6;
  v3 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v40 = *(_QWORD *)(v0 + 344);
    v31 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 304);
    v33 = *(_QWORD *)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 288);
    v38 = *(_QWORD *)(v0 + 280);
    v34 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 240);
    v13 = type metadata accessor for TaskPriority();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v14(v10, 1, 1, v13);
    outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 56);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 56), v15 + 32);
    v35 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC15GroupActivities17SystemCoordinatorCSg_Tgm5(v10, (uint64_t)&async function pointer to partial apply for closure #1 in SystemCoordinatorTable.systemCoordinator(for:), v15);
    *(_QWORD *)(v0 + 360) = v35;
    *(_QWORD *)(v0 + 216) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>, MEMORY[0x1E0C95D90]);
    AsyncPublisher.init(_:)();
    v14(v10, 1, 1, v13);
    v29 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v38, v30, v39);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
    *(_QWORD *)(v0 + 368) = v16;
    v16(v33, v40, v32);
    v17 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v18 = (v34 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = (*(unsigned __int8 *)(v31 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))(v20 + v17, v38, v39);
    *(_QWORD *)(v20 + v18) = v29;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(v20 + v19, v33, v32);
    v21 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v10, (uint64_t)&async function pointer to partial apply for closure #2 in SystemCoordinatorTable.systemCoordinator(for:), v20);
    *(_QWORD *)(v0 + 376) = v21;
    v16(v33, v40, v32);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = *v36;
    *v36 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, v21, v33, isUniquelyReferenced_nonNull_native);
    *v36 = v41;
    swift_bridgeObjectRelease();
    v23 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    *(_QWORD *)(v0 + 384) = v23;
    v23(v33, v32);
    swift_endAccess();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
    *v24 = v0;
    v24[1] = specialized SystemCoordinatorTable.systemCoordinator(for:);
    return Task<>.value.getter();
  }
  v6 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v4);
  v7 = *v6;
  *(_QWORD *)(v0 + 400) = *v6;
  *(_QWORD *)(v0 + 408) = v6[1];
  v8 = v7 & 0x7FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v7 & 0x8000000000000000) == 0)
  {
    swift_retain();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
    *v9 = v0;
    v9[1] = specialized SystemCoordinatorTable.systemCoordinator(for:);
    return Task<>.value.getter();
  }
  v26 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 312);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  unint64_t *v3;
  void (*v4)(_QWORD *);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 208);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));
    v2 = SystemCoordinatorTable.systemCoordinatorsById.modify();
    v4 = specialized Dictionary.subscript.modify((_QWORD *)(v0 + 96));
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    if (v3[1])
    {
      *v3 = v1 | 0x8000000000000000;
      swift_retain();
      swift_release();
    }
    ((void (*)(uint64_t, _QWORD))v4)(v0 + 96, 0);
    v5(v6, v7);
    ((void (*)(uint64_t, _QWORD))v2)(v0 + 128, 0);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v9 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v8(v9, v10);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v14 = *(_QWORD *)(v0 + 344);
    v15 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 264);
    SystemCoordinatorTable.clearSystemCoordinator(_:)(v14);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    v20(v14, v15);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  swift_release();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 224);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t type metadata accessor for SystemCoordinatorTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for SystemCoordinatorTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 120) + *(_QWORD *)(*(_QWORD *)v1 + 120));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:);
  return v6(a1);
}

uint64_t dispatch thunk of SystemCoordinatorTable.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for SystemCoordinatorTable.Storage()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for SystemCoordinatorTable.Storage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SystemCoordinatorTable.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SystemCoordinatorTable.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *type metadata accessor for SystemCoordinatorTable.Storage()
{
  return &unk_1E44F9448;
}

uint64_t outlined consume of SystemCoordinatorTable.Storage?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A0E07DA0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v4[7] = a1;
  v4[8] = v1 + 32;
  return swift_task_switch();
}

uint64_t sub_1A0E07E30()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A0E07E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<Bool, Never>>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v8 = v6 + v7 + 8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = *(_QWORD *)(v1 + v6);
  v13 = v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in SystemCoordinatorTable.systemCoordinator(for:)(a1, v9, v10, v11, v12, v13);
}

_QWORD *initializeBufferWithCopyOfBuffer for SystemCoordinatorTable.Storage.CoordinatorBox(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for SystemCoordinatorTable.Storage.CoordinatorBox()
{
  return swift_release();
}

_QWORD *assignWithCopy for SystemCoordinatorTable.Storage.CoordinatorBox(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SystemCoordinatorTable.Storage.CoordinatorBox(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for SystemCoordinatorTable.Storage.CoordinatorBox(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for SystemCoordinatorTable.Storage.CoordinatorBox(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for SystemCoordinatorTable.Storage.CoordinatorBox(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for SystemCoordinatorTable.Storage.CoordinatorBox()
{
  return &unk_1E44F93B8;
}

uint64_t SpatialTemplateRole<>.roleIdentifier.getter()
{
  uint64_t v1;

  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

uint64_t SpatialTemplateRole.output.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(a1 + 16))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t dispatch thunk of SpatialTemplateRole.roleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for SpatialTemplateRole.roleIdentifier.getter in conformance PresentationSpatialTemplate.Role()
{
  return 0x65746E6573657270;
}

uint64_t one-time initialization function for null()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v3, static UUID.null);
  v4 = __swift_project_value_buffer(v3, (uint64_t)static UUID.null);
  UUID.init(uuidString:)();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t UUID.null.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for null != -1)
    swift_once();
  v0 = type metadata accessor for UUID();
  return __swift_project_value_buffer(v0, (uint64_t)static UUID.null);
}

uint64_t static UUID.null.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for null != -1)
    swift_once();
  v2 = type metadata accessor for UUID();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static UUID.null);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t specialized ReliableBroadcastLink.EncryptionManager.seal<A>(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79[10];
  uint64_t v80;

  v6 = v5;
  v69 = a4;
  v68 = a3;
  v66 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReliableBroadcastLink.EncryptionManager();
  MEMORY[0x1E0C80A78](v11);
  v77 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SymmetricKey();
  v75 = *(_QWORD *)(v16 - 8);
  v76 = v16;
  MEMORY[0x1E0C80A78](v16);
  v71 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v66 - v22;
  v24 = type metadata accessor for UUID();
  v25 = MEMORY[0x1E0C80A78](v24);
  v72 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v73 = (char *)&v66 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v66 - v29;
  v79[7] = a1;
  v79[8] = a2;
  v32 = v31;
  v74 = v11;
  outlined init with copy of UUID?(v6 + *(int *)(v11 + 20), (uint64_t)v23);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v23, 1, v24);
  v80 = v24;
  if (v34 == 1)
  {
    v35 = &demangling cache variable for type metadata for UUID?;
    v36 = (uint64_t)v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v23, v24);
    v37 = *(_QWORD *)v6;
    if (*(_QWORD *)(*(_QWORD *)v6 + 16)
      && (v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30), (v39 & 1) != 0))
    {
      v40 = *(_QWORD *)(v37 + 56);
      v42 = v75;
      v41 = v76;
      (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v15, v40 + *(_QWORD *)(v75 + 72) * v38, v76);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v41);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v15, 1, v41) != 1)
      {
        v43 = v71;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v71, v15, v41);
        type metadata accessor for BinaryEncoder();
        v44 = v42;
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1A0F0EDD0;
        v46 = v70;
        ReliableBroadcastPacket.Nonce.encode(to:)(inited, v68, v69);
        if (v46)
        {
          swift_setDeallocating();
          outlined consume of Data._Representation(*(_QWORD *)(inited + 16), *(_QWORD *)(inited + 24));
          (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v41);
          return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v30, v80);
        }
        else
        {
          swift_beginAccess();
          v78 = *(_OWORD *)(inited + 16);
          lazy protocol witness table accessor for type Data and conformance Data();
          v62 = (uint64_t)v67;
          AES.GCM.Nonce.init<A>(data:)();
          v64 = type metadata accessor for AES.GCM.Nonce();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 0, 1, v64);
          static AES.GCM.seal<A>(_:using:nonce:)();
          v65 = v80;
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v62, &demangling cache variable for type metadata for AES.GCM.Nonce?);
          (*(void (**)(char *, uint64_t))(v75 + 8))(v43, v76);
          return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v30, v65);
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v15, 1, 1, v76);
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v80);
    v35 = &demangling cache variable for type metadata for SymmetricKey?;
    v36 = (uint64_t)v15;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v36, v35);
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Log.reliableBroadcast);
  v48 = v6;
  v49 = v77;
  outlined init with copy of Participant(v48, v77, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = v32;
    v53 = (uint8_t *)swift_slowAlloc();
    v76 = swift_slowAlloc();
    v79[0] = v76;
    *(_DWORD *)v53 = 136315138;
    outlined init with copy of UUID?(v49 + *(int *)(v74 + 20), (uint64_t)v21);
    v54 = v80;
    if (v33(v21, 1, v80) == 1)
    {
      v55 = 0xE300000000000000;
      v56 = 7104878;
    }
    else
    {
      v57 = v52;
      v58 = v73;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v73, v21, v54);
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v72, v58, v54);
      v56 = String.init<A>(reflecting:)();
      v55 = v59;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v54);
    }
    *(_QWORD *)&v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v49, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
    _os_log_impl(&dword_1A0DB3000, v50, v51, "Local key material not found for MKI: %s.", v53, 0xCu);
    v60 = v76;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v60, -1, -1);
    MEMORY[0x1A1B05CC4](v53, -1, -1);
  }
  else
  {
    outlined destroy of Participant(v49, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  }

  lazy protocol witness table accessor for type EncryptionError and conformance EncryptionError();
  swift_allocError();
  *v61 = 1;
  return swift_willThrow();
}

uint64_t ReliableBroadcastLink.EncryptionManager.open(_:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v37 = a1;
  v3 = (uint64_t)v2;
  v5 = type metadata accessor for ReliableBroadcastLink.EncryptionManager();
  MEMORY[0x1E0C80A78](v5);
  v39 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SymmetricKey();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v2;
  if (*(_QWORD *)(v17 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v19 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v14 + 72) * v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
      v20 = v38;
      v21 = static AES.GCM.open(_:using:)();
      if (!v20)
        v17 = v21;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return v17;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, &demangling cache variable for type metadata for SymmetricKey?);
  if (one-time initialization token for reliableBroadcast != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.reliableBroadcast);
  v23 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, a2, v7);
  v24 = v39;
  outlined init with copy of Participant(v3, v39, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  v17 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v42 = v38;
    *(_DWORD *)v27 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
    LODWORD(v37) = v17;
    v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v7);
    *(_WORD *)(v27 + 12) = 2080;
    v17 = v27 + 14;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v30 = Dictionary.Keys.description.getter();
    v32 = v31;
    swift_bridgeObjectRelease();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v24, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
    _os_log_impl(&dword_1A0DB3000, v25, (os_log_type_t)v37, "Could not find MKI %s in known keys: %s.", (uint8_t *)v27, 0x16u);
    v33 = v38;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v33, -1, -1);
    MEMORY[0x1A1B05CC4](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    outlined destroy of Participant(v24, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
  }

  lazy protocol witness table accessor for type EncryptionError and conformance EncryptionError();
  swift_allocError();
  *v34 = 2;
  swift_willThrow();
  return v17;
}

uint64_t ReliableBroadcastLink.EncryptionManager.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  char *v16;
  unint64_t *v18;
  _QWORD v19[2];

  v18 = a1;
  v1 = type metadata accessor for SymmetricKeySize();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, SymmetricKey)>);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, SymmetricKey))
                                      - 8)
                          + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A0F0EAB0;
  if (one-time initialization token for null != -1)
    swift_once();
  v8 = type metadata accessor for UUID();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static UUID.null);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v11(v7 + v6, v9, v8);
  static SymmetricKeySize.bits256.getter();
  v12 = SymmetricKeySize.bitCount.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v19[0] = specialized Data.init(count:)(v12 / 8);
  v19[1] = v13;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v19);
  SymmetricKey.init<A>(data:)();
  v14 = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v15 = v18;
  *v18 = v14;
  v16 = (char *)v15 + *(int *)(type metadata accessor for ReliableBroadcastLink.EncryptionManager() + 20);
  v11((uint64_t)v16, v9, v8);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v8);
}

void ReliableBroadcastLink.encryptAndSend(_:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    ReliableBroadcastLink._encryptAndSend(_:)((uint64_t)a1, a2);
  }
  else
  {
    __break(1u);
    swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.reliableBroadcast);
    v12 = a1;
    v13 = a1;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v22 = (uint64_t)a1;
      v23 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v19 = String.init<A>(describing:)();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v14, v15, "Error sending message: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      MEMORY[0x1A1B05CC4](v16, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t ReliableBroadcastLink._encryptAndSend(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[16];
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;

  v56 = a2;
  v55 = a1;
  v49 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  MEMORY[0x1E0C80A78](v49);
  v52 = &v40[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  MEMORY[0x1E0C80A78](v47);
  v46 = &v40[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v45 = type metadata accessor for ReliableBroadcastPacket(0);
  v50 = *(_QWORD *)(v45 - 8);
  v5 = MEMORY[0x1E0C80A78](v45);
  v48 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v59 = &v40[-v7];
  v8 = type metadata accessor for ReliableBroadcastLink.EncryptionManager();
  MEMORY[0x1E0C80A78](v8);
  v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for AES.GCM.SealedBox();
  v53 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v58 = &v40[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v40[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v54 = &v40[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18);
  v21 = &v40[-v20];
  v22 = v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager;
  swift_beginAccess();
  outlined init with copy of UUID?(v22 + *(int *)(v8 + 20), (uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for reliableBroadcast != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.reliableBroadcast);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1A0DB3000, v24, v25, "Cannot send data, we never received our local key material.", v26, 2u);
      MEMORY[0x1A1B05CC4](v26, -1, -1);
    }

    lazy protocol witness table accessor for type EncryptionError and conformance EncryptionError();
    swift_allocError();
    *v27 = 1;
    return swift_willThrow();
  }
  else
  {
    v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32);
    v41(v21, v15, v16);
    v43 = v2 + 40;
    swift_beginAccess();
    v29 = *(_QWORD *)(v2 + 48);
    v30 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 16);
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
      JUMPOUT(0x1A0E09D60);
    }
    v44 = v17;
    if ((v31 & 0x8000000000000000) != 0 || (v51 = v16, v42 = v11, v32 = (uint64_t)v58, HIDWORD(v31)))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1A0E09EC0);
    }
    v33 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_participantIdentifier);
    swift_beginAccess();
    v34 = *v33;
    outlined init with copy of Participant(v22, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
    v35 = v57;
    specialized ReliableBroadcastLink.EncryptionManager.seal<A>(_:with:)(v55, v56, v34, v31, v32);
    if (!v35)
    {
      outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
      v36 = AES.GCM.SealedBox.ciphertext.getter();
      specialized Data.init<A>(_:)(v36, v37);
      v57 = v38;
      __asm { BR              X9 }
    }
    outlined destroy of Participant((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v44 + 8))(v21, v51);
  }
}

void closure #1 in ReliableBroadcastLink._encryptAndSend(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, int a4@<W6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a4;
  v14[1] = a1;
  v14[2] = a2;
  v16 = a6;
  v17 = a7;
  v18 = a5;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0);
  MEMORY[0x1E0C80A78](v12);
  v14[0] = type metadata accessor for ReliableBroadcastPacket.PacketType(0);
  MEMORY[0x1E0C80A78](v14[0]);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  AES.GCM.SealedBox.tag.getter();
  __asm { BR              X10 }
}

void sub_1A0E0A040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  if (BYTE6(v1) == 16)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v6, v5);
    v9 = (_QWORD *)(v2 + *(int *)(v0 + 20));
    *v9 = v4;
    v9[1] = v1;
    if ((v3 & 0x8000000000000000) == 0 && v3 < 0x10000)
      __asm { BR              X10 }
  }
  else
  {
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1A0E0A254);
}

void ReliableBroadcastLink.decryptAndDeliver(_:from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized ReliableBroadcastLink.decryptAndDeliver(_:from:)(a1, a2, a5);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = specialized Set.startIndex.getter(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for ReliableBroadcastPacket.Message(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    specialized Set.subscript.getter(result, v5, a1, a2);
    v7 = type metadata accessor for ReliableBroadcastPacket.Message(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_1A0E0A378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for ReliableBroadcastPacket.Message(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  unint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  Swift::Int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  Swift::Int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v2 = v1;
  v140 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v4 = *(_QWORD *)(v140 - 8);
  v5 = MEMORY[0x1E0C80A78](v140);
  v131 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v141 = (uint64_t)&v125 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v137 = (uint64_t)&v125 - v10;
  MEMORY[0x1E0C80A78](v9);
  v136 = (uint64_t)&v125 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v127 = result;
  if (v12 < 2)
  {
    v19 = (char *)MEMORY[0x1E0DEE9D8];
    v133 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v126 = MEMORY[0x1E0DEE9D8];
    if (v12 != 1)
    {
      v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_104:
      v118 = v19;
      if (v21 >= 2)
      {
        v119 = *a1;
        do
        {
          v120 = v21 - 2;
          if (v21 < 2)
            goto LABEL_133;
          if (!v119)
            goto LABEL_145;
          v121 = *(_QWORD *)&v118[16 * v120 + 32];
          v122 = *(_QWORD *)&v118[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v119 + *(_QWORD *)(v4 + 72) * v121, v119 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v118[16 * v21 + 16], v119 + *(_QWORD *)(v4 + 72) * v122, v133);
          if (v2)
            break;
          if (v122 < v121)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v118 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v118);
          if (v120 >= *((_QWORD *)v118 + 2))
            goto LABEL_135;
          v123 = &v118[16 * v120 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v118 + 2);
          if (v21 > v124)
            goto LABEL_136;
          memmove(&v118[16 * v21 + 16], &v118[16 * v21 + 32], 16 * (v124 - v21));
          *((_QWORD *)v118 + 2) = v124 - 1;
          v21 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v126 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v12;
    v16 = v14 >> 1;
    v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v17 + 16) = v16;
    v12 = v15;
    v18 = *(unsigned __int8 *)(v4 + 80);
    v126 = v17;
    v133 = v17 + ((v18 + 32) & ~v18);
  }
  v20 = 0;
  v19 = (char *)MEMORY[0x1E0DEE9D8];
  v139 = a1;
  v134 = v4;
  while (1)
  {
    v22 = v4;
    v23 = v20;
    v24 = v20 + 1;
    v132 = v20;
    v143 = v12;
    if (v20 + 1 >= v12)
    {
      v31 = v20 + 1;
      v40 = v20;
    }
    else
    {
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *a1;
      v27 = v136;
      outlined init with copy of Participant(*a1 + v25 * v24, v136, type metadata accessor for ReliableBroadcastPacket.Message);
      v28 = v137;
      outlined init with copy of Participant(v26 + v25 * v23, v137, type metadata accessor for ReliableBroadcastPacket.Message);
      v29 = *(int *)(v140 + 28);
      LODWORD(v138) = *(unsigned __int16 *)(v27 + v29);
      LODWORD(v135) = *(unsigned __int16 *)(v28 + v29);
      outlined destroy of Participant(v28, type metadata accessor for ReliableBroadcastPacket.Message);
      outlined destroy of Participant(v27, type metadata accessor for ReliableBroadcastPacket.Message);
      v30 = v26;
      v31 = v23 + 2;
      v130 = v30;
      v142 = v25;
      if (v23 + 2 >= v143)
      {
        v22 = v134;
      }
      else
      {
        v128 = v19;
        v129 = v2;
        v32 = v25 * v24;
        v33 = v30;
        v34 = v25 * v31;
        while (1)
        {
          v35 = v31;
          v36 = v138 < v135;
          v37 = v136;
          outlined init with copy of Participant(v33 + v34, v136, type metadata accessor for ReliableBroadcastPacket.Message);
          v38 = v137;
          outlined init with copy of Participant(v33 + v32, v137, type metadata accessor for ReliableBroadcastPacket.Message);
          v39 = *(unsigned __int16 *)(v37 + *(int *)(v140 + 28)) >= *(unsigned __int16 *)(v38 + *(int *)(v140 + 28));
          outlined destroy of Participant(v38, type metadata accessor for ReliableBroadcastPacket.Message);
          outlined destroy of Participant(v37, type metadata accessor for ReliableBroadcastPacket.Message);
          if (v36 == v39)
            break;
          v31 = v35 + 1;
          v33 += v142;
          if (v143 == v35 + 1)
          {
            v31 = v143;
            v22 = v134;
            a1 = v139;
            v19 = v128;
            goto LABEL_24;
          }
        }
        v22 = v134;
        a1 = v139;
        v19 = v128;
        v31 = v35;
LABEL_24:
        v2 = v129;
      }
      v40 = v132;
      if (v138 < v135)
      {
        if (v31 < v132)
          goto LABEL_139;
        if (v132 < v31)
        {
          v128 = v19;
          v129 = v2;
          v41 = 0;
          v42 = v142;
          v43 = v142 * (v31 - 1);
          v44 = v31 * v142;
          v45 = v132;
          v46 = v132 * v142;
          do
          {
            if (v45 != v31 + v41 - 1)
            {
              v47 = v130;
              if (!v130)
                goto LABEL_144;
              v48 = v130 + v46;
              v49 = v130 + v43;
              outlined init with take of Participant(v130 + v46, v131, type metadata accessor for ReliableBroadcastPacket.Message);
              if (v46 < v43 || v48 >= v47 + v44)
              {
                swift_arrayInitWithTakeFrontToBack();
                v42 = v142;
              }
              else
              {
                v42 = v142;
                if (v46 != v43)
                  swift_arrayInitWithTakeBackToFront();
              }
              outlined init with take of Participant(v131, v49, type metadata accessor for ReliableBroadcastPacket.Message);
            }
            ++v45;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v46 += v42;
          }
          while (v45 < v31 + v41);
          v19 = v128;
          v2 = v129;
          a1 = v139;
          v22 = v134;
          v40 = v132;
        }
      }
    }
    if (v31 < v143)
    {
      if (__OFSUB__(v31, v40))
        goto LABEL_137;
      if (v31 - v40 < v127)
        break;
    }
LABEL_56:
    if (v31 < v40)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v138 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v67 = *((_QWORD *)v19 + 2);
    v66 = *((_QWORD *)v19 + 3);
    v21 = v67 + 1;
    if (v67 >= v66 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v21;
    v68 = v19 + 32;
    v69 = &v19[16 * v67 + 32];
    v70 = v138;
    *(_QWORD *)v69 = v40;
    *((_QWORD *)v69 + 1) = v70;
    if (v67)
    {
      while (1)
      {
        v71 = v21 - 1;
        if (v21 >= 4)
        {
          v76 = &v68[16 * v21];
          v77 = *((_QWORD *)v76 - 8);
          v78 = *((_QWORD *)v76 - 7);
          v82 = __OFSUB__(v78, v77);
          v79 = v78 - v77;
          if (v82)
            goto LABEL_121;
          v81 = *((_QWORD *)v76 - 6);
          v80 = *((_QWORD *)v76 - 5);
          v82 = __OFSUB__(v80, v81);
          v74 = v80 - v81;
          v75 = v82;
          if (v82)
            goto LABEL_122;
          v83 = v21 - 2;
          v84 = &v68[16 * v21 - 32];
          v86 = *(_QWORD *)v84;
          v85 = *((_QWORD *)v84 + 1);
          v82 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          if (v82)
            goto LABEL_124;
          v82 = __OFADD__(v74, v87);
          v88 = v74 + v87;
          if (v82)
            goto LABEL_127;
          if (v88 >= v79)
          {
            v106 = &v68[16 * v71];
            v108 = *(_QWORD *)v106;
            v107 = *((_QWORD *)v106 + 1);
            v82 = __OFSUB__(v107, v108);
            v109 = v107 - v108;
            if (v82)
              goto LABEL_131;
            v99 = v74 < v109;
            goto LABEL_93;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v100 = *((_QWORD *)v19 + 4);
            v101 = *((_QWORD *)v19 + 5);
            v82 = __OFSUB__(v101, v100);
            v93 = v101 - v100;
            v94 = v82;
            goto LABEL_87;
          }
          v73 = *((_QWORD *)v19 + 4);
          v72 = *((_QWORD *)v19 + 5);
          v82 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          v75 = v82;
        }
        if ((v75 & 1) != 0)
          goto LABEL_123;
        v83 = v21 - 2;
        v89 = &v68[16 * v21 - 32];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v92 = __OFSUB__(v90, v91);
        v93 = v90 - v91;
        v94 = v92;
        if (v92)
          goto LABEL_126;
        v95 = &v68[16 * v71];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v82 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v82)
          goto LABEL_129;
        if (__OFADD__(v93, v98))
          goto LABEL_130;
        if (v93 + v98 >= v74)
        {
          v99 = v74 < v98;
LABEL_93:
          if (v99)
            v71 = v83;
          goto LABEL_95;
        }
LABEL_87:
        if ((v94 & 1) != 0)
          goto LABEL_125;
        v102 = &v68[16 * v71];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v82 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v82)
          goto LABEL_128;
        if (v105 < v93)
          goto LABEL_14;
LABEL_95:
        v110 = v71 - 1;
        if (v71 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v111 = *a1;
        if (!*a1)
          goto LABEL_143;
        v112 = v19;
        v113 = &v68[16 * v110];
        v114 = *(_QWORD *)v113;
        v115 = &v68[16 * v71];
        v116 = *((_QWORD *)v115 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v111 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v113, v111 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v115, v111 + *(_QWORD *)(v134 + 72) * v116, v133);
        if (v2)
          goto LABEL_115;
        if (v116 < v114)
          goto LABEL_118;
        if (v71 > *((_QWORD *)v112 + 2))
          goto LABEL_119;
        *(_QWORD *)v113 = v114;
        *(_QWORD *)&v68[16 * v110 + 8] = v116;
        v117 = *((_QWORD *)v112 + 2);
        if (v71 >= v117)
          goto LABEL_120;
        v19 = v112;
        v21 = v117 - 1;
        memmove(&v68[16 * v71], v115 + 16, 16 * (v117 - 1 - v71));
        *((_QWORD *)v112 + 2) = v117 - 1;
        a1 = v139;
        if (v117 <= 2)
          goto LABEL_14;
      }
    }
    v21 = 1;
LABEL_14:
    v12 = a1[1];
    v20 = v138;
    v4 = v134;
    if (v138 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v40, v127))
    goto LABEL_140;
  v50 = v143;
  if (v40 + v127 < v143)
    v50 = v40 + v127;
  if (v50 >= v40)
  {
    if (v31 != v50)
    {
      v128 = v19;
      v129 = v2;
      v51 = *(_QWORD *)(v22 + 72);
      v143 = v51 * (v31 - 1);
      v135 = v51;
      v52 = v31 * v51;
      v130 = v50;
      do
      {
        v54 = 0;
        v55 = v40;
        v138 = v31;
        while (1)
        {
          v56 = v139;
          v57 = *v139;
          v58 = v52;
          v59 = v52 + v54 + *v139;
          v60 = v136;
          outlined init with copy of Participant(v59, v136, type metadata accessor for ReliableBroadcastPacket.Message);
          v61 = v137;
          outlined init with copy of Participant(v143 + v54 + v57, v137, type metadata accessor for ReliableBroadcastPacket.Message);
          v62 = *(int *)(v140 + 28);
          LODWORD(v142) = *(unsigned __int16 *)(v60 + v62);
          LODWORD(v57) = *(unsigned __int16 *)(v61 + v62);
          outlined destroy of Participant(v61, type metadata accessor for ReliableBroadcastPacket.Message);
          outlined destroy of Participant(v60, type metadata accessor for ReliableBroadcastPacket.Message);
          if (v142 >= v57)
            break;
          v63 = *v56;
          if (!*v56)
            goto LABEL_142;
          v52 = v58;
          v64 = v63 + v143 + v54;
          outlined init with take of Participant(v63 + v58 + v54, v141, type metadata accessor for ReliableBroadcastPacket.Message);
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of Participant(v141, v64, type metadata accessor for ReliableBroadcastPacket.Message);
          v54 -= v135;
          ++v55;
          v53 = v138;
          if (v138 == v55)
            goto LABEL_49;
        }
        v53 = v138;
        v52 = v58;
LABEL_49:
        v31 = v53 + 1;
        v143 += v135;
        v52 += v135;
        v40 = v132;
      }
      while (v31 != v130);
      v31 = v130;
      v19 = v128;
      v2 = v129;
      a1 = v139;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;

  v37 = a1;
  v43 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v7 = MEMORY[0x1E0C80A78](v43);
  v44 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v39 = (uint64_t)&v35 - v10;
  result = MEMORY[0x1E0C80A78](v9);
  v38 = (uint64_t)&v35 - v13;
  v42 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v15 = v14 * (v42 - 1);
    v40 = v14;
    v16 = v14 * v42;
    v17 = type metadata accessor for ReliableBroadcastPacket.Message;
    v46 = a4;
LABEL_5:
    v18 = 0;
    v19 = v37;
    v41 = v16;
    while (1)
    {
      v21 = *v46;
      v22 = v16 + v18 + *v46;
      v23 = v38;
      outlined init with copy of Participant(v22, v38, v17);
      v24 = v15 + v18 + v21;
      v25 = v15;
      v26 = v39;
      outlined init with copy of Participant(v24, v39, v17);
      v27 = *(int *)(v43 + 28);
      v45 = *(unsigned __int16 *)(v23 + v27);
      v28 = v17;
      v29 = *(unsigned __int16 *)(v26 + v27);
      v30 = v26;
      v15 = v25;
      outlined destroy of Participant(v30, v28);
      v31 = v23;
      v16 = v41;
      result = outlined destroy of Participant(v31, v28);
      v32 = v45 >= v29;
      v17 = v28;
      if (v32)
      {
LABEL_4:
        v15 = v25 + v40;
        v16 += v40;
        if (++v42 == v36)
          return result;
        goto LABEL_5;
      }
      v33 = *v46;
      if (!*v46)
        break;
      v34 = v33 + v25 + v18;
      outlined init with take of Participant(v33 + v16 + v18, v44, v28);
      swift_arrayInitWithTakeFrontToBack();
      v20 = v34;
      v17 = v28;
      result = outlined init with take of Participant(v44, v20, v28);
      v18 -= v40;
      if (v42 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v46 - v11;
  v51 = *(_QWORD *)(v13 + 72);
  if (!v51)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1)
    goto LABEL_70;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1)
    goto LABEL_71;
  v15 = (uint64_t)(a2 - a1) / v51;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v51;
  if (v15 >= v14 / v51)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v51;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v32 = -v51;
        v48 = a4;
        v49 = a1;
        v47 = v8;
        do
        {
          v51 = a3 + v32;
          outlined init with copy of Participant(v30 + v32, (uint64_t)v12, type metadata accessor for ReliableBroadcastPacket.Message);
          v33 = a2 + v32;
          v34 = (uint64_t)v12;
          v35 = v50;
          outlined init with copy of Participant(a2 + v32, v50, type metadata accessor for ReliableBroadcastPacket.Message);
          v36 = *(int *)(v8 + 28);
          v37 = v32;
          v38 = *(unsigned __int16 *)(v34 + v36);
          v39 = *(unsigned __int16 *)(v35 + v36);
          v40 = v35;
          v12 = (char *)v34;
          outlined destroy of Participant(v40, type metadata accessor for ReliableBroadcastPacket.Message);
          outlined destroy of Participant(v34, type metadata accessor for ReliableBroadcastPacket.Message);
          if (v38 >= v39)
          {
            v43 = v52;
            v52 += v37;
            v44 = a3 < v43 || v51 >= v43;
            v32 = v37;
            if (v44)
            {
              v41 = v51;
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v33 = a2;
              v42 = v48;
            }
            else
            {
              v41 = v51;
              v8 = v47;
              v42 = v48;
              if (a3 != v43)
                swift_arrayInitWithTakeBackToFront();
              v33 = a2;
            }
          }
          else
          {
            v32 = v37;
            v41 = v51;
            if (a3 < a2 || v51 >= a2)
            {
              v8 = v47;
              swift_arrayInitWithTakeFrontToBack();
              v42 = v48;
            }
            else
            {
              v8 = v47;
              v42 = v48;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v54 += v32;
          }
          v30 = v52;
          if (v52 <= v42)
            break;
          a2 = v33;
          a3 = v41;
        }
        while (v33 > v49);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v51;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v49 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        v20 = a3;
        outlined init with copy of Participant(a2, (uint64_t)v12, type metadata accessor for ReliableBroadcastPacket.Message);
        v21 = v50;
        outlined init with copy of Participant(a4, v50, type metadata accessor for ReliableBroadcastPacket.Message);
        v22 = *(int *)(v8 + 28);
        v23 = *(unsigned __int16 *)&v12[v22];
        v24 = *(unsigned __int16 *)(v21 + v22);
        outlined destroy of Participant(v21, type metadata accessor for ReliableBroadcastPacket.Message);
        outlined destroy of Participant((uint64_t)v12, type metadata accessor for ReliableBroadcastPacket.Message);
        v25 = v54;
        if (v23 >= v24)
        {
          v28 = v53 + v51;
          if (v54 < v53 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 != v53)
              swift_arrayInitWithTakeBackToFront();
          }
          v53 = v28;
          v26 = a2;
        }
        else
        {
          v26 = a2 + v51;
          if (v54 < a2 || v54 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 == a2)
              v25 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v54 = v25 + v51;
        a4 = v53;
        if (v53 >= v49)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_68:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_72:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ReliableBroadcastLink.EncryptionManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ReliableBroadcastLink.EncryptionManager;
  if (!type metadata singleton initialization cache for ReliableBroadcastLink.EncryptionManager)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySnySiGGG_15GroupActivities23ReliableBroadcastPacketVs5NeverOTg507_sSiSnym3G15f12Activities23hij32VIgyyr_Si6offset_AA7elementtADs5K11OIegnrzr_TRSiAhMIgyyr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;

  v16 = a2;
  v17 = a3;
  v4 = type metadata accessor for ReliableBroadcastPacket(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v8 = v18;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v15 = a1;
  if (v9)
  {
    v10 = 0;
    v11 = (_QWORD *)(a1 + 40);
    do
    {
      v16(v10, *(v11 - 1), *v11);
      v18 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = v18;
      }
      ++v10;
      v11 += 2;
      *(_QWORD *)(v8 + 16) = v13 + 1;
      outlined init with take of Participant((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, type metadata accessor for ReliableBroadcastPacket);
    }
    while (v9 != v10);
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized ReliableBroadcastLink._decryptAndDeliver(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t inited;
  _BYTE *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (**v49)(uint64_t, unint64_t, uint64_t);
  void (*v50)(uint64_t, unint64_t, uint64_t);
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _BYTE *v65;

  v7 = type metadata accessor for AES.GCM.Nonce();
  MEMORY[0x1E0C80A78](v7);
  v58 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AES.GCM.SealedBox();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x1E0C80A78](v9);
  v56 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ReliableBroadcastLink.EncryptionManager();
  MEMORY[0x1E0C80A78](v11);
  v65 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReliableBroadcastPacket.Message?);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v51[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for ReliableBroadcastPacket.Message(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = &v51[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18);
  v22 = &v51[-v21];
  specialized Collection.first.getter(a1, (uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for ReliableBroadcastPacket.Message?);
    lazy protocol witness table accessor for type EncryptionError and conformance EncryptionError();
    swift_allocError();
    *v23 = 0;
    return swift_willThrow();
  }
  else
  {
    v53 = a3;
    outlined init with take of Participant((uint64_t)v15, (uint64_t)v22, type metadata accessor for ReliableBroadcastPacket.Message);
    v25 = *(int *)(v16 + 24);
    v57 = v22;
    v52 = *(_DWORD *)&v22[v25];
    v26 = swift_bridgeObjectRetain();
    v63 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v26);
    specialized MutableCollection<>.sort(by:)(&v63);
    if (v3)
    {
      result = swift_release();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = v63;
      v28 = (_QWORD *)specialized Data.init(capacity:)(a2);
      v63 = v28;
      v64 = v29;
      v30 = v27[2];
      if (v30)
      {
        v31 = (uint64_t)v27
            + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        v32 = *(_QWORD *)(v17 + 72);
        swift_retain();
        do
        {
          outlined init with copy of Participant(v31, (uint64_t)v20, type metadata accessor for ReliableBroadcastPacket.Message);
          Data.append(_:)();
          outlined destroy of Participant((uint64_t)v20, type metadata accessor for ReliableBroadcastPacket.Message);
          v31 += v32;
          --v30;
        }
        while (v30);
        swift_release_n();
        v34 = v63;
        v33 = v64;
      }
      else
      {
        v34 = v28;
        v33 = v29;
        swift_release();
      }
      v35 = v59;
      v36 = v59 + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_encryptionManager;
      swift_beginAccess();
      outlined init with copy of Participant(v36, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
      type metadata accessor for BinaryEncoder();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1A0F0EDD0;
      ReliableBroadcastPacket.Nonce.encode(to:)(inited, v53, v52);
      v38 = v57;
      swift_beginAccess();
      v60 = *(_OWORD *)(inited + 16);
      lazy protocol witness table accessor for type Data and conformance Data();
      AES.GCM.Nonce.init<A>(data:)();
      *(_QWORD *)&v60 = v34;
      *((_QWORD *)&v60 + 1) = v33;
      v39 = (uint64_t)&v38[*(int *)(v16 + 20)];
      v40 = (uint64_t *)(v39 + *(int *)(type metadata accessor for ReliableBroadcastPacket.EncryptionInfo(0) + 20));
      v42 = v40[1];
      v61 = *v40;
      v41 = v61;
      v62 = v42;
      outlined copy of Data._Representation((uint64_t)v34, v33);
      outlined copy of Data._Representation(v41, v42);
      v43 = (uint64_t)v56;
      AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
      v44 = (uint64_t)v57;
      v45 = v65;
      v46 = ReliableBroadcastLink.EncryptionManager.open(_:using:)(v43, v39);
      v48 = v47;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v43, v55);
      outlined destroy of Participant((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for ReliableBroadcastLink.EncryptionManager);
      v49 = (void (**)(uint64_t, unint64_t, uint64_t))(v35
                                                                     + OBJC_IVAR____TtC15GroupActivities21ReliableBroadcastLink_receivedDataHandler);
      swift_beginAccess();
      v50 = *v49;
      if (*v49)
      {
        swift_endAccess();
        swift_retain();
        v50(v46, v48, v53);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v50);
        outlined consume of Data._Representation(v46, v48);
        outlined consume of Data._Representation((uint64_t)v34, v33);
        return outlined destroy of Participant(v44, type metadata accessor for ReliableBroadcastPacket.Message);
      }
      else
      {
        outlined destroy of Participant(v44, type metadata accessor for ReliableBroadcastPacket.Message);
        swift_endAccess();
        outlined consume of Data._Representation((uint64_t)v34, v33);
        return outlined consume of Data._Representation(v46, v48);
      }
    }
  }
  return result;
}

void specialized ReliableBroadcastLink.decryptAndDeliver(_:from:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + 16);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    specialized ReliableBroadcastLink._decryptAndDeliver(_:from:)(a1, (uint64_t)a2, a3);
  }
  else
  {
    __break(1u);
    swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.reliableBroadcast);
    v14 = a2;
    v15 = a2;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v24 = (uint64_t)a2;
      v25 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v21 = String.init<A>(describing:)();
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v16, v17, "Error delivering message: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v19, -1, -1);
      MEMORY[0x1A1B05CC4](v18, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ReliableBroadcastLink.EncryptionManager(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for ReliableBroadcastLink.EncryptionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for ReliableBroadcastLink.EncryptionManager(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithCopy for ReliableBroadcastLink.EncryptionManager(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_QWORD *initializeWithTake for ReliableBroadcastLink.EncryptionManager(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for ReliableBroadcastLink.EncryptionManager(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReliableBroadcastLink.EncryptionManager()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E0CA08(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReliableBroadcastLink.EncryptionManager()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A0E0CA94(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for ReliableBroadcastLink.EncryptionManager()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

unint64_t lazy protocol witness table accessor for type EncryptionError and conformance EncryptionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError;
  if (!lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for EncryptionError, &unk_1E44F8350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError;
  if (!lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for EncryptionError, &unk_1E44F8350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncryptionError and conformance EncryptionError);
  }
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ReliableBroadcastLink._encryptAndSend(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  closure #1 in ReliableBroadcastLink._encryptAndSend(_:)(a1, a2, *(_QWORD *)(v3 + 24), *(_DWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), a3, *(_QWORD *)(v3 + 56));
}

uint64_t getEnumTagSinglePayload for EncryptionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EncryptionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E0CDB4 + 4 * byte_1A0F0F6A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E0CDE8 + 4 * asc_1A0F0F6A0[v4]))();
}

uint64_t sub_1A0E0CDE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E0CDF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E0CDF8);
  return result;
}

uint64_t sub_1A0E0CE04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E0CE0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E0CE10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E0CE18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for EncryptionError()
{
  return &unk_1E44F8350;
}

uint64_t GroupActivitySuggestion.__allocating_init<A>(activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized GroupActivitySuggestion.init<A>(activity:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t GroupActivitySuggestion.init<A>(activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = specialized GroupActivitySuggestion.init<A>(activity:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  void *v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[5];

  if (one-time initialization token for shared != -1)
    swift_once();
  v9 = static ConversationManager.shared;
  v13[3] = a2;
  v13[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  v11 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v9 + 224))(v13);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  if (!v4)
    *a4 = v11;
  return result;
}

uint64_t GroupActivitySuggestion.deinit()
{
  uint64_t v0;

  AnyCancellable.cancel()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall GroupActivitySuggestion.cancel()()
{
  AnyCancellable.cancel()();
}

uint64_t GroupActivitySuggestion.__deallocating_deinit()
{
  AnyCancellable.cancel()();
  swift_release();
  return swift_deallocClassInstance();
}

void protocol witness for Cancellable.cancel() in conformance GroupActivitySuggestion()
{
  AnyCancellable.cancel()();
}

uint64_t specialized GroupActivitySuggestion.init<A>(activity:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for AnyCancellable();
  tryLog<A>(_:_:function:line:)();
  v1 = v3;
  if (!v3)
  {
    swift_allocObject();
    v1 = AnyCancellable.init(_:)();
  }
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t type metadata accessor for GroupActivitySuggestion()
{
  return objc_opt_self();
}

uint64_t method lookup function for GroupActivitySuggestion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupActivitySuggestion.__allocating_init<A>(activity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return implicit closure #1 in GroupActivitySuggestion.init<A>(activity:)(v1[4], v1[2], v1[3], a1);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;

  v19 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v16 = (void *)objc_opt_self();
    swift_bridgeObjectRetain_n();
    v17 = (void *)MEMORY[0x1A1B048B4](v14, v15);
    v18 = objc_msgSend(v16, sel_normalizedHandleWithDestinationID_, v17);
    swift_bridgeObjectRelease_n();

    if (v18)
    {
      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_21;
  v7 = v10 + 1;
  if (v10 + 1 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 2;
  if (v10 + 2 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 3;
  if (v10 + 3 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;

  v19 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v16 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v17 = (void *)MEMORY[0x1A1B048B4](v14, v15);
    v18 = objc_msgSend(v16, sel_normalizedHandleWithDestinationID_, v17);
    swift_bridgeObjectRelease();

    if (v18)
    {
      MEMORY[0x1A1B049B0]();
      if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_21;
  v7 = v10 + 1;
  if (v10 + 1 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 2;
  if (v10 + 2 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_21;
  v7 = v10 + 3;
  if (v10 + 3 >= v6)
    goto LABEL_26;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }
  v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
}

uint64_t GroupSessionProvider.uuid.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  _QWORD v17[9];
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v17[7] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v17[5] = *(_QWORD *)(v7 - 8);
  v17[6] = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - v10;
  v18 = v3;
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v12 = v19;
  v13 = v20;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v20 = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v12;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  static SharableObjectIdentifier.identifier<A>(ofType:with:)();
  return swift_bridgeObjectRelease();
}

uint64_t static GroupSessionProvider.providerIdentifier.getter()
{
  return static GroupSessionProvider.providerIdentifier.getter();
}

{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = NSProcessInfo.stableAppIdentifier.getter();
  v3 = v2;

  if (v3)
    goto LABEL_4;
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_4:
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v1;
  }
  _StringGuts.grow(_:)(147);
  v9._object = (void *)0x80000001A0F1A0B0;
  v9._countAndFlagsBits = 0xD000000000000090;
  String.append(_:)(v9);
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double GroupSessionProvider.localMember.getter@<D0>(uint64_t a1@<X8>)
{
  return GroupSessionProvider.localMember.getter(a1);
}

{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t GroupSessionProvider.isCrossAccount.getter()
{
  return 1;
}

uint64_t GroupSessionProviderTestingOverrides.default.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  return __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
}

uint64_t GroupSessionProviderTestingOverrides.groupSessionServiceProvider.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  return v1;
}

uint64_t GroupSessionProvider.join()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t GroupSessionProvider.join()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[6];
  swift_getObjectType();
  v2 = swift_conformsToProtocol2();
  if (v2)
    v3 = v2;
  else
    v3 = 0;
  if (v2)
    v4 = v1;
  else
    v4 = 0;
  if (v4)
  {
    swift_unknownObjectRetain();
    v5 = specialized GroupSessionProvider.groupSessionService.getter();
    v7 = v6;
    v0[7] = v5;
    ObjectType = swift_getObjectType();
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 24) + *(_QWORD *)(v7 + 24));
    v9 = (_QWORD *)swift_task_alloc();
    v0[8] = v9;
    *v9 = v0;
    v9[1] = GroupSessionProvider.join();
    v10 = v4;
    v11 = v3;
    v12 = ObjectType;
    v13 = v7;
  }
  else
  {
    v14 = specialized GroupSessionProvider.groupSessionService.getter();
    v16 = v15;
    v0[10] = v14;
    v17 = swift_getObjectType();
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v16 + 16) + *(_QWORD *)(v16 + 16));
    v18 = (_QWORD *)swift_task_alloc();
    v0[11] = v18;
    *v18 = v0;
    v18[1] = GroupSessionProvider.join();
    v11 = v0[5];
    v10 = v0[6];
    v12 = v17;
    v13 = v16;
  }
  return v20(v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  *(_QWORD *)(v0 + 24) = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  *(_QWORD *)(v0 + 24) = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  swift_unknownObjectRelease();
  v1 = *(void **)(v0 + 72);
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProvider);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Failed to start tracking GroupSessionProvider on join()", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  *(_QWORD *)(v0 + 16) = v1;
  v8 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v1 = *(void **)(v0 + 96);
  swift_unknownObjectRelease();
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProvider);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Failed to start tracking GroupSessionProvider on join()", v5, 2u);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  *(_QWORD *)(v0 + 16) = v1;
  v8 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionProvider.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionProvider.leave()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);

  v1 = v0[9];
  v2 = v0[5];
  v3 = v0[4];
  v4 = specialized GroupSessionProvider.groupSessionService.getter();
  v6 = v5;
  v0[10] = v4;
  ObjectType = swift_getObjectType();
  GroupSessionProvider.uuid.getter(v3, v2, v1);
  v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 32) + *(_QWORD *)(v6 + 32));
  v8 = (_QWORD *)swift_task_alloc();
  v0[11] = v8;
  *v8 = v0;
  v8[1] = GroupSessionProvider.leave();
  return v10(v0[9], ObjectType, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Successfully left GroupSessionProvider", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v6, v5);
  *(_QWORD *)(v0 + 24) = 0;
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Failed to leave GroupSessionProvider", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  v5 = *(void **)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v7, v6);
  *(_QWORD *)(v0 + 16) = v5;
  v8 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionProvider.session.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return swift_task_switch();
}

uint64_t GroupSessionProvider.session.getter()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  swift_unknownObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v25 = v8;
    *(_DWORD *)v7 = 136315138;
    v0[10] = v5;
    v9 = >> prefix<A>(_:)((uint64_t)(v0 + 10), v6);
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Provider %s starting to observe GroupSessions", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  GroupSessionProvider.sessions.getter(v0[12], v0[13], (uint64_t)&v21);
  v11 = (void *)v21;
  v25 = v21;
  v26 = v22;
  v27 = v23;
  v28 = v24;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v0[16] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v0[17] = v13;
  v15 = type metadata accessor for GroupSession.Sessions(0, AssociatedTypeWitness, v13, v14);
  GroupSession.Sessions.makeAsyncIterator()(v15, v16, v0 + 2);

  swift_unknownObjectRelease();
  swift_release();
  v17 = (_QWORD *)swift_task_alloc();
  v0[18] = (uint64_t)v17;
  v19 = type metadata accessor for GroupSession.Sessions.Iterator(0, AssociatedTypeWitness, v13, v18);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSession<A>.Sessions.Iterator, v19);
  *v17 = v0;
  v17[1] = GroupSessionProvider.session.getter;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    swift_unknownObjectRetain_n();
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = *(_QWORD *)(v0 + 128);
      v5 = *(_QWORD *)(v0 + 136);
      v24 = *(_QWORD *)(v0 + 112);
      v25 = *(_QWORD *)(v0 + 96);
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v26 = v7;
      *(_DWORD *)v6 = 136315394;
      *(_QWORD *)(v0 + 48) = v1;
      v9 = type metadata accessor for GroupSession(0, v4, v5, v8);
      v10 = >> prefix<A>(_:)(v0 + 48, v9);
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 12) = 2080;
      *(_QWORD *)(v0 + 64) = v24;
      v12 = >> prefix<A>(_:)(v0 + 64, v25);
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v2, v3, "Observed GroupSession: %s on provider: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v7, -1, -1);
      MEMORY[0x1A1B05CC4](v6, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_release_n();
    }
    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 112);
    if (v16)
    {
      v18 = *(_QWORD *)(v0 + 96);
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v26 = v20;
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v0 + 32) = v17;
      v21 = >> prefix<A>(_:)(v0 + 32, v18);
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1A0DB3000, v14, v15, "Provider %s returning nil for GroupSession", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v20, -1, -1);
      MEMORY[0x1A1B05CC4](v19, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

double GroupSessionProvider.sessions.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v4 = v3;
  if (one-time initialization token for groupSessionProvider != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.groupSessionProvider);
  swift_unknownObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v22 = a3;
    v12 = swift_slowAlloc();
    *(_QWORD *)&v28[0] = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)&v25 = v4;
    v13 = >> prefix<A>(_:)((uint64_t)&v25, a1);
    *(_QWORD *)&v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Provider %s starting to observe on sessions stream for GroupSessions", v11, 0xCu);
    swift_arrayDestroy();
    v15 = v12;
    a3 = v22;
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  type metadata accessor for OS_dispatch_queue();
  swift_unknownObjectRetain();
  v16 = static OS_dispatch_queue.main.getter();
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness();
  GroupSessionObserver.init<A>(for:queue:)(v4, v16, AssociatedTypeWitness, a1, a2, &v25);
  v23[0] = v25;
  v23[1] = v26;
  v24 = v27;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = type metadata accessor for GroupSessionObserver(0, (uint64_t)AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8), v19);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupSessionObserver<A>, v20);
  _PublisherElements.init(_:)((uint64_t)v23, v20, (uint64_t)v28);
  v25 = v28[0];
  v26 = v28[1];
  v27 = v29;
  *(_QWORD *)&result = GroupSession.Sessions.init(base:)((uint64_t)&v25, a3).n128_u64[0];
  return result;
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[55] = a2;
  v3[56] = v2;
  v3[54] = a1;
  v4 = type metadata accessor for UUID();
  v3[57] = v4;
  v3[58] = *(_QWORD *)(v4 - 8);
  v3[59] = swift_task_alloc();
  v3[60] = type metadata accessor for LocalAccountMember();
  v3[61] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  objc_class *v14;
  uint64_t (*v15)(uint64_t);
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 432);
  (*(void (**)(uint64_t, uint64_t))(v1 + 72))(v2, v1);
  CurrentValueSubject.value.getter();
  swift_release();
  specialized Sequence.compactMap<A>(_:)(*(_QWORD *)(v0 + 416));
  v4 = v3;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 496) = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
  v5(v2, v1);
  if (*(_QWORD *)(v0 + 120))
  {
    v6 = v0 + 136;
    v7 = *(_QWORD *)(v0 + 440);
    v8 = *(_QWORD *)(v0 + 432);
    outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 96), v0 + 56);
    v5(v8, v7);
    if (*(_QWORD *)(v0 + 160))
    {
      outlined init with copy of Member?(v0 + 136, v0 + 216);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
      if (swift_dynamicCast())
      {
        v40 = v0 + 56;
        v10 = *(_QWORD *)(v0 + 376);
        v9 = *(_QWORD *)(v0 + 384);
        v11 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v12 = (void *)MEMORY[0x1A1B048B4](v10, v9);
        v13 = objc_msgSend(v11, sel_normalizedHandleWithDestinationID_, v12);

        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          v14 = (objc_class *)type metadata accessor for AddressableMember();
          v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D14C30];
          v16 = objc_allocWithZone(v14);
          v17 = (id)AddressableMember.init(handle:)();
          __swift_destroy_boxed_opaque_existential_1Tm(v40);
          v18 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, v15, MEMORY[0x1E0D14C28]);
        }
        else
        {
          if (one-time initialization token for groupSessionProvider != -1)
            swift_once();
          v29 = type metadata accessor for Logger();
          __swift_project_value_buffer(v29, (uint64_t)static Log.groupSessionProvider);
          swift_bridgeObjectRetain();
          v30 = Logger.logObject.getter();
          v31 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v30, v31))
          {
            v32 = (uint8_t *)swift_slowAlloc();
            v33 = swift_slowAlloc();
            v41[0] = v33;
            *(_DWORD *)v32 = 136315138;
            *(_QWORD *)(v0 + 392) = v10;
            *(_QWORD *)(v0 + 400) = v9;
            swift_bridgeObjectRetain();
            v34 = String.init<A>(reflecting:)();
            *(_QWORD *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1A0DB3000, v30, v31, "Failed to get tuHandle from AddressableMember %s", v32, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v33, -1, -1);
            v36 = v32;
            v6 = v0 + 136;
            MEMORY[0x1A1B05CC4](v36, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          __swift_destroy_boxed_opaque_existential_1Tm(v40);
          v17 = 0;
          v18 = 0;
        }
        goto LABEL_24;
      }
      if (swift_dynamicCast())
      {
        v19 = *(_QWORD *)(v0 + 488);
        v20 = (objc_class *)type metadata accessor for AccountMember();
        v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D14B58];
        v17 = objc_msgSend(objc_allocWithZone(v20), sel_init);
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
        v18 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AccountMember and conformance AccountMember, v21, MEMORY[0x1E0D14B50]);
        outlined destroy of Participant(v19, (uint64_t (*)(_QWORD))type metadata accessor for LocalAccountMember);
LABEL_24:
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
        goto LABEL_25;
      }
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
    }
    if (one-time initialization token for groupSessionProvider != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.groupSessionProvider);
    outlined init with copy of AudioSessionAssertionManager(v0 + 56, v0 + 176);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v41[0] = v39;
      *(_DWORD *)v25 = 136315138;
      outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 16);
      outlined init with copy of Member?(v0 + 16, v0 + 256);
      if (*(_QWORD *)(v0 + 280))
      {
        outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 256), v0 + 336);
        outlined init with copy of AudioSessionAssertionManager(v0 + 336, v0 + 296);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
        v26 = String.init<A>(reflecting:)();
        v28 = v27;
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 336);
      }
      else
      {
        v28 = 0xE300000000000000;
        v26 = 7104878;
      }
      outlined destroy of Member?(v0 + 16);
      *(_QWORD *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
      _os_log_impl(&dword_1A0DB3000, v23, v24, "LocalMember is an unknown type: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v39, -1, -1);
      MEMORY[0x1A1B05CC4](v25, -1, -1);

      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
      v17 = 0;
      v18 = 0;
      v6 = v0 + 136;
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
      v17 = 0;
      v18 = 0;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v6 = v0 + 96;
  }
LABEL_25:
  outlined destroy of Member?(v6);
  *(_QWORD *)(v0 + 504) = v17;
  *(_QWORD *)(v0 + 512) = v18;
  GroupSessionProvider.uuid.getter(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 472));
  v37 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 520) = v37;
  *v37 = v0;
  v37[1] = GroupSessionProvider.backgroundSessionCreationRequest.getter;
  return GroupSessionProvider.activityCreateSessionRequest.getter(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 440) + 88))(*(_QWORD *)(v0 + 432));
  v1 = objc_allocWithZone((Class)type metadata accessor for BackgroundSessionCreationRequest());
  v2 = BackgroundSessionCreationRequest.init(id:activitySessionRequest:members:localMember:isCrossAccount:)();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupSessionProvider.backgroundSessionCreationRequest.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 528) = v1;
  swift_task_dealloc();
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v4[58] + 8))(v4[59], v4[57]);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4[67] = a1;
  }
  return swift_task_switch();
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  v3[6] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[7] = swift_task_alloc();
  type metadata accessor for AnyGroupActivity(0);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v6;

  v2 = v0[7];
  v1 = (uint64_t *)v0[8];
  v3 = v0[5];
  v4 = v0[6];
  (*(void (**)(_QWORD, _QWORD))(v0[3] + 56))(v0[2], v0[3]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  GroupActivity.eraseToAnyGroupActivity()(v3, *(_QWORD *)(AssociatedConformanceWitness + 8), v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v6 = (_QWORD *)swift_task_alloc();
  v0[9] = v6;
  *v6 = v0;
  v6[1] = GroupSessionProvider.activityCreateSessionRequest.getter;
  return AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

uint64_t GroupSessionProvider.activityCreateSessionRequest.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  outlined destroy of Participant(v2, type metadata accessor for AnyGroupActivity);
  return swift_task_switch();
}

uint64_t default argument 0 of static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t one-time initialization function for default()
{
  uint64_t v0;

  v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_allocate_value_buffer(v0, static GroupSessionProviderTestingOverrides.default);
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionServiceProvider?);
  return Testable.init(wrappedValue:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.default);
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  return Logger.init(subsystem:category:)();
}

uint64_t GroupSessionProviderTestingOverrides.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionServiceProvider?);
  return Testable.init(wrappedValue:)();
}

uint64_t static GroupSessionProviderTestingOverrides.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for GroupSessionProviderTestingOverrides();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  return outlined init with copy of GroupSessionProviderTestingOverrides(v3, a1);
}

uint64_t static GroupSessionProviderTestingOverrides.default.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = type metadata accessor for GroupSessionProviderTestingOverrides();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  outlined assign with copy of GroupSessionProviderTestingOverrides(a1, v3);
  swift_endAccess();
  return outlined destroy of Participant(a1, (uint64_t (*)(_QWORD))type metadata accessor for GroupSessionProviderTestingOverrides);
}

uint64_t (*static GroupSessionProviderTestingOverrides.default.modify())()
{
  uint64_t v0;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path setter for GroupSessionProviderTestingOverrides.groupSessionServiceProvider : GroupSessionProviderTestingOverrides()
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return Testable.wrappedValue.setter();
}

uint64_t GroupSessionProviderTestingOverrides.groupSessionServiceProvider.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return Testable.wrappedValue.setter();
}

void (*GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  v2[4] = Testable.wrappedValue.modify();
  return GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify;
}

void GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t GroupSessionProviderTestingOverrides.init(groupSessionServiceProvider:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionServiceProvider?);
  return Testable.init(wrappedValue:)();
}

uint64_t specialized GroupSessionProvider.groupSessionService.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (one-time initialization token for default != -1)
    swift_once();
  v0 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v0, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  v1 = v3;
  if (v3)
  {
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    if (one-time initialization token for shared != -1)
      swift_once();
    v1 = static BackgroundGroupSessionManager.shared;
    swift_retain();
  }
  return v1;
}

uint64_t type metadata accessor for GroupSessionProviderTestingOverrides()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupSessionProviderTestingOverrides;
  if (!type metadata singleton initialization cache for GroupSessionProviderTestingOverrides)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined destroy of Member?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

double sub_1A0E0FEC0@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionProviderState()
{
  return &type metadata for GroupSessionProviderState;
}

uint64_t dispatch thunk of static GroupSessionProvider.providerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of GroupSessionProvider.activity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of GroupSessionProvider.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of GroupSessionProvider.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of GroupSessionProvider.localMember.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of GroupSessionProvider.isCrossAccount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of PresenceGroupSessionProvider.presenceInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for GroupSessionProviderTestingOverrides(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GroupSessionProviderTestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionProviderTestingOverrides()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E100F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GroupSessionProviderTestingOverrides()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E10140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for GroupSessionProviderTestingOverrides()
{
  unint64_t v0;

  type metadata accessor for Testable<GroupSessionServiceProvider?>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Testable<GroupSessionServiceProvider?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Testable<GroupSessionServiceProvider?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GroupSessionServiceProvider?);
    v0 = type metadata accessor for Testable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  }
}

uint64_t dispatch thunk of ErrorRecoveryGroupSessionProvider.fetchMembershipUpdate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v7(a1, a2);
}

uint64_t static Credential.build(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.accountID.getter();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.token.getter();
  type metadata accessor for Credential.Builder();
  swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Token.expirationDate.getter();
  Credential.Builder.setExpirationDate(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  Credential.Builder.build()();
  return swift_release();
}

uint64_t GroupSessionObserver.init<A>(for:queue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v43 = a3;
  v47 = a2;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v46 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v40 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v40 - v17;
  GroupSessionProvider.uuid.getter(a4, a5, (uint64_t)&v40 - v17);
  if (one-time initialization token for client != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.client);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v18, v10);
  swift_unknownObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  v44 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v45 = a4;
    v23 = v22;
    v41 = swift_slowAlloc();
    v49 = v41;
    *(_DWORD *)v23 = 136315650;
    v40 = v20;
    v24 = _typeName(_:qualified:)();
    v42 = a5;
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v48 = a1;
    v43 = a6;
    v26 = >> prefix<A>(_:)((uint64_t)&v48, v45);
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v49);
    a6 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v20 = v40;
    _os_log_impl(&dword_1A0DB3000, v40, (os_log_type_t)v44, "Initialized observer for %s for provider: %s a/k/a ID: %s", (uint8_t *)v23, 0x20u);
    v30 = v41;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    MEMORY[0x1A1B05CC4](v23, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }

  v31 = specialized GroupSessionProvider.groupSessionService.getter();
  v33 = v32;
  swift_unknownObjectRelease();
  v34 = *(_QWORD *)(v33 + 8);
  v35 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v36 = v46;
  v35(v46, v18, v10);
  v37 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v38 = swift_allocObject();
  result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(v38 + v37, v36, v10);
  *a6 = v47;
  a6[1] = v31;
  a6[2] = v34;
  a6[3] = partial apply for closure #1 in GroupSessionObserver.init<A>(for:queue:);
  a6[4] = v38;
  return result;
}

uint64_t (*default argument 3 of GroupSessionObserver.init(for:queue:provider:filter:)())()
{
  return protocol witness for static GroupActivity._identifiable(by:) in conformance AnyGroupActivity;
}

void GroupSessionObserver.init(for:queue:provider:filter:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
}

uint64_t GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t (*)(), char *, uint64_t (*)(uint64_t), char *, uint64_t, _UNKNOWN **);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  char *v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  int v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  os_signpost_id_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61[16];
  uint64_t *v62;
  char v63[16];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v7 = type metadata accessor for UUID();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = (char *)v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AnyGroupActivity(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for OSSignpostID();
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v56 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v58 = (char *)&v51 - v16;
  v17 = type metadata accessor for OSSignposter();
  v57 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v3 + 16);
  v70 = 0;
  ObjectType = swift_getObjectType();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(ObjectType, v20);
  v23 = a1 + direct field offset for GroupSession.id;
  v24 = *(_QWORD *)(a3 + 24);
  v64 = *(_QWORD *)(a3 + 16);
  v65 = v24;
  v55 = a1;
  v66 = a1;
  v67 = a2;
  v62 = &v70;
  v25 = *(void (**)(uint64_t, uint64_t (*)(), char *, uint64_t (*)(uint64_t), char *, uint64_t, _UNKNOWN **))(*(_QWORD *)v22 + 160);
  v27 = type metadata accessor for GroupSession(0, v64, v24, v26);
  v25(v23, partial apply for implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:), v63, partial apply for closure #1 in GroupSessionObserver.register(activitySession:publishQueue:), v61, v27, &protocol witness table for GroupSession<A>);
  swift_release();
  if (v70)
  {
    if (one-time initialization token for groupSession != -1)
      swift_once();
    v28 = v17;
    v29 = __swift_project_value_buffer(v17, (uint64_t)static Signposts.groupSession);
    v30 = v57;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16);
    v52 = v28;
    v32 = v31(v19, v29, v28);
    MEMORY[0x1E0C80A78](v32);
    *(&v51 - 2) = (uint8_t *)v10;
    v33 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type AnyGroupActivity and conformance AnyGroupActivity, type metadata accessor for AnyGroupActivity, (uint64_t)&protocol conformance descriptor for AnyGroupActivity);
    *(&v51 - 1) = (uint8_t *)v33;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    *(&v51 - 2) = (uint8_t *)v10;
    *(&v51 - 1) = (uint8_t *)v33;
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v36 = v53;
    v35 = v54;
    (*(void (**)(char *, char *, char *))(v53 + 16))(v9, (char *)v12 + *(int *)(v10 + 28), v54);
    outlined destroy of AnyGroupActivity((uint64_t)v12);
    UUID.uint64Value.getter();
    (*(void (**)(char *, char *))(v36 + 8))(v9, v35);
    v37 = v58;
    OSSignpostID.init(_:)();
    swift_retain_n();
    v38 = OSSignposter.logHandle.getter();
    v39 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v37, v60);
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      LODWORD(v53) = v39;
      v42 = v41;
      v54 = v19;
      v69 = v41;
      *(_DWORD *)v40 = 136315138;
      v51 = v40 + 4;
      MEMORY[0x1E0C80A78](v41);
      *(&v51 - 2) = (uint8_t *)v10;
      *(&v51 - 1) = (uint8_t *)v33;
      v43 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v43);
      *(&v51 - 2) = (uint8_t *)v10;
      *(&v51 - 1) = (uint8_t *)v33;
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      v44 = *v12;
      v45 = v12[1];
      swift_bridgeObjectRetain();
      outlined destroy of AnyGroupActivity((uint64_t)v12);
      v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v46 = v56;
      v47 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v38, (os_signpost_type_t)v53, v47, "group-session-received", "%s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v42, -1, -1);
      MEMORY[0x1A1B05CC4](v40, -1, -1);

      v48 = *(void (**)(char *, uint64_t))(v59 + 8);
      v49 = v60;
      v48(v58, v60);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v52);
      v48(v46, v49);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v60);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v52);
    }
  }
  return v70;
}

uint64_t implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for GroupSession(0, a3, a4, a4);
  swift_retain();
  v6 = specialized GroupSession.__allocating_init(activitySession:publishQueue:)(a1, a2);
  swift_release();
  return v6;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;

  v2 = 0;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (v6)
    goto LABEL_6;
LABEL_7:
  v10 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v10 < v7)
    {
      v11 = *(_QWORD *)(v3 + 8 * v10);
      ++v2;
      if (v11)
        goto LABEL_22;
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_27;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
        goto LABEL_22;
      v2 = v10 + 2;
      if (v10 + 2 >= v7)
        goto LABEL_27;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
        goto LABEL_22;
      v2 = v10 + 3;
      if (v10 + 3 >= v7)
        goto LABEL_27;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
      {
LABEL_22:
        v6 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v2 << 6); ; i = v8 | (v2 << 6))
        {
          v13 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
          if (objc_msgSend(v13, sel_state) == (id)3 && objc_msgSend(v13, sel_localParticipantIdentifier))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (!v6)
              goto LABEL_7;
          }
          else
          {

            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v7)
      {
        v11 = *(_QWORD *)(v3 + 8 * v12);
        if (v11)
        {
          v2 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_29;
          if (v2 >= v7)
            break;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          ++v12;
          if (v11)
            goto LABEL_22;
        }
      }
    }
LABEL_27:
    swift_release();
    return;
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t closure #6 in GroupSessionObserver.receive<A>(subscriber:)(_QWORD *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = (*(uint64_t (**)(_QWORD))(a2 + 24))(*a1);
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.client);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v11 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
      v8 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v4, v5, "activity session %s is filtered for observer. Dropping", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v7, -1, -1);
      MEMORY[0x1A1B05CC4](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  return v2 & 1;
}

void closure #8 in GroupSessionObserver.receive<A>(subscriber:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  swift_retain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = GroupSession.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v1, v2, "Observer receiving activity session: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v4, -1, -1);
    MEMORY[0x1A1B05CC4](v3, -1, -1);

  }
  else
  {

    swift_release();
  }
}

void closure #9 in GroupSessionObserver.receive<A>(subscriber:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v7 = v3;
    *(_DWORD *)v2 = 136315138;
    v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, oslog, v1, "Received completion on observer for activity type: %s", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v3, -1, -1);
    MEMORY[0x1A1B05CC4](v2, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1A0E11520()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupSessionObserver.init<A>(for:queue:)()
{
  type metadata accessor for UUID();
  return static UUID.== infix(_:_:)();
}

uint64_t partial apply for closure #6 in GroupSessionObserver.receive<A>(subscriber:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #6 in GroupSessionObserver.receive<A>(subscriber:)(a1, v1 + 48);
}

uint64_t sub_1A0E115E0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in GroupSessionObserver.receive<A>(subscriber:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = v3[11];
  v7 = type metadata accessor for GroupSessionObserver(0, v3[2], v3[4], a2);
  result = GroupSessionObserver.register(activitySession:publishQueue:)(v5, v6, v7);
  *a3 = result;
  return result;
}

uint64_t sub_1A0E11684()
{
  return swift_deallocObject();
}

void partial apply for closure #8 in GroupSessionObserver.receive<A>(subscriber:)()
{
  closure #8 in GroupSessionObserver.receive<A>(subscriber:)();
}

uint64_t sub_1A0E116A0()
{
  return swift_deallocObject();
}

void partial apply for closure #9 in GroupSessionObserver.receive<A>(subscriber:)()
{
  closure #9 in GroupSessionObserver.receive<A>(subscriber:)();
}

uint64_t sub_1A0E116BC()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in GroupSessionObserver<A>()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t assignWithCopy for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GroupSessionObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionObserver(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)()
{
  uint64_t v0;

  return implicit closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(*(uint64_t **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in GroupSessionObserver.register(activitySession:publishQueue:)(uint64_t a1)
{
  uint64_t v1;

  **(_QWORD **)(v1 + 16) = a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A0E11898()
{
  return 16;
}

__n128 sub_1A0E118A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of AnyGroupActivity(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GroupActivity.init(activity:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t result;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = type metadata accessor for Optional();
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)&v33 - v9;
  v10 = type metadata accessor for AnyGroupActivity(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a3 + 40))(*a1, a1[1], a2, a3) & 1) != 0)
  {
    v33 = v14;
    v34 = a4;
    v17 = swift_conformsToProtocol2();
    if (v17)
      v18 = v17;
    else
      v18 = 0;
    if (v17)
      v19 = a2;
    else
      v19 = 0;
    if (v19)
    {
      outlined init with copy of AnyGroupActivity((uint64_t)a1, (uint64_t)v13);
      v20 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 8);
      v40 = v19;
      v41 = v18;
      __swift_allocate_boxed_opaque_existential_1(&v38);
      v21 = v42;
      v20(v13, v19, v18);
      if (v21)
      {
        outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity);
        return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v38);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomGroupActivityDecodable);
        v28 = v37;
        v29 = swift_dynamicCast();
        v30 = v33;
        v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
        if (v29)
        {
          v31(v28, 0, 1, a2);
          outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v34, v28, a2);
        }
        else
        {
          v31(v28, 1, 1, a2);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
          v38 = 0;
          v39 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          v38 = 0xD00000000000001DLL;
          v39 = 0x80000001A0F197B0;
          swift_getMetatypeMetadata();
          v32._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    else
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      v24 = (_QWORD *)((char *)a1 + *(int *)(v10 + 24));
      v25 = *v24;
      v26 = v24[1];
      outlined copy of Data._Representation(*v24, v26);
      v27 = v42;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity);
      outlined consume of Data._Representation(v25, v26);
      result = swift_release();
      if (!v27)
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v34, v16, a2);
    }
  }
  else
  {
    lazy protocol witness table accessor for type GroupActivityError and conformance GroupActivityError();
    swift_allocError();
    *v23 = 0;
    swift_willThrow();
    return outlined destroy of Participant((uint64_t)a1, type metadata accessor for AnyGroupActivity);
  }
  return result;
}

uint64_t outlined init with copy of AnyGroupActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GroupActivity.eraseToAnyGroupActivity()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v36 = a3;
  v4 = v3;
  v39 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  v7 = MEMORY[0x1E0C80A78](v39);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v35 - v14;
  v47 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiableGroupActivity);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding(&v41, (uint64_t)v44);
    v19 = v45;
    v20 = v46;
    __swift_project_boxed_opaque_existential_1(v44, v45);
    IdentifiableGroupActivity.uuid.getter(v19, v20, (uint64_t)v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v41, &demangling cache variable for type metadata for IdentifiableGroupActivity?);
    UUID.init()();
  }
  v18(v13, v4, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyStaticGroupActivity);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding(&v41, (uint64_t)v44);
    __swift_project_boxed_opaque_existential_1(v44, v45);
    dispatch thunk of RawRepresentable.rawValue.getter();
    v38 = *((_QWORD *)&v41 + 1);
    v35 = v41;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v44);
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v41, &demangling cache variable for type metadata for AnyStaticGroupActivity?);
    v35 = 0;
    v38 = 0;
  }
  v21 = v37;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v24 = v23;
  *v9 = GroupActivity.awaitMetadataValue()(a1, a2);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of Participant((uint64_t)v9, type metadata accessor for AnyGroupActivity.MetadataProvider);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v47);
  }
  else
  {
    v28 = v25;
    v29 = v26;
    swift_release();
    v30 = (int *)type metadata accessor for AnyGroupActivity(0);
    v31 = v36;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))((char *)v36 + v30[7], v17, v47);
    *v31 = v22;
    v31[1] = v24;
    result = outlined init with take of AnyGroupActivity.MetadataProvider((uint64_t)v9, (uint64_t)v31 + v30[5]);
    v32 = (uint64_t *)((char *)v31 + v30[6]);
    *v32 = v28;
    v32[1] = v29;
    v33 = (uint64_t *)((char *)v31 + v30[8]);
    v34 = v38;
    *v33 = v35;
    v33[1] = v34;
  }
  return result;
}

uint64_t GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t)&unk_1E44FCD48, &demangling cache variable for type metadata for Future<GroupActivityMetadata, Never>);
}

uint64_t outlined init with take of AnyGroupActivity.MetadataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC15GroupActivities17SystemCoordinatorCSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator?);
  return swift_task_create();
}

BOOL static GroupActivityError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GroupActivityError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int GroupActivityError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL static GroupActivityActivationResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GroupActivityActivationResult.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GroupActivityActivationResult.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static GroupActivity.activityIdentifier.getter()
{
  return static GroupActivity.activityIdentifier.getter();
}

{
  id v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(149);
    v6._object = (void *)0x80000001A0F1A180;
    v6._countAndFlagsBits = 0xD000000000000092;
    String.append(_:)(v6);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GroupActivity._identifiable(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GroupActivity._identifiable(by:)(a1, a2, a3, a4) & 1;
}

{
  uint64_t v5;
  char v7;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4) == a1 && v5 == a2)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t GroupActivity.provider.getter(uint64_t a1)
{
  specialized GroupActivity.provider.getter(a1);
  return swift_unknownObjectRetain();
}

uint64_t GroupActivity.prepareForActivation(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;

  v5 = v4;
  v49 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v48 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v12);
  v47 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v39 - v18;
  if (one-time initialization token for default != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v50(v19, v4, a3);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v41 = v16;
    v23 = swift_slowAlloc();
    v43 = a1;
    v24 = (uint8_t *)v23;
    v40 = swift_slowAlloc();
    v52 = v40;
    v42 = v5;
    *(_DWORD *)v24 = 136315138;
    v39 = v24 + 4;
    v50(v14, (uint64_t)v19, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, a3);
    v25 = >> prefix<A>(_:)((uint64_t)v14, a3);
    v44 = a2;
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
    v28 = v25;
    v16 = v41;
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v52);
    v5 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v44;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
    _os_log_impl(&dword_1A0DB3000, v21, v22, "Application called syncronous activate SPI on %s", v24, 0xCu);
    v29 = v40;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    v30 = v24;
    a1 = v43;
    MEMORY[0x1A1B05CC4](v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }

  v31 = type metadata accessor for TaskPriority();
  v32 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v48, 1, 1, v31);
  v33 = v47;
  v50(v47, v5, a3);
  v34 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  v36 = v49;
  *((_QWORD *)v35 + 4) = a3;
  *((_QWORD *)v35 + 5) = v36;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v35[v34], v33, a3);
  v37 = &v35[(v16 + v34 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v37 = a1;
  *((_QWORD *)v37 + 1) = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in GroupActivity.prepareForActivation(completionHandler:), (uint64_t)v35);
  return swift_release();
}

uint64_t closure #1 in GroupActivity.prepareForActivation(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;

  v8[2] = a5;
  v8[3] = a6;
  v11 = (_QWORD *)swift_task_alloc();
  v8[4] = v11;
  *v11 = v8;
  v11[1] = closure #1 in GroupActivity.prepareForActivation(completionHandler:);
  return GroupActivity.prepareForActivation()((uint64_t)(v8 + 5), a7, a8);
}

uint64_t closure #1 in GroupActivity.prepareForActivation(completionHandler:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(char *);
  char v3;

  v1 = *(void (**)(char *))(v0 + 16);
  v3 = *(_BYTE *)(v0 + 40);
  v1(&v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupActivity.prepareForActivation()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  *(_OWORD *)(v3 + 16) = xmmword_1A0F0FA70;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_WORD *)(v3 + 80) = 0;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 88) = v7;
  *v7 = v3;
  v7[1] = GroupActivity.prepareForActivation();
  return GroupActivity.prepareForActivation(options:)(a1, v3 + 16, a2, a3);
}

uint64_t GroupActivity.prepareForActivation()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t GroupActivity.prepareForActivation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = v4;
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a3;
  v8 = type metadata accessor for Optional();
  *(_QWORD *)(v5 + 128) = v8;
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 144) = swift_task_alloc();
  *(_QWORD *)(v5 + 152) = *(_QWORD *)(a3 - 8);
  *(_QWORD *)(v5 + 160) = swift_task_alloc();
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 184) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 216) = v10;
  *(_WORD *)(v5 + 82) = *(_WORD *)(a2 + 64);
  return swift_task_switch();
}

uint64_t GroupActivity.prepareForActivation(options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t type[16];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v3, v4);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160);
  if (v9)
  {
    v12 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v14 = 136315138;
    v6(v12, v11, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v13);
    v15 = >> prefix<A>(_:)(v12, v13);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v12, v28);
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v13);
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Client did call prepare for activation %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 104));
  }

  v18 = *(_WORD *)(v0 + 82);
  v20 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 224);
  v30 = *(_OWORD *)(v0 + 184);
  v32 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)type = *(_OWORD *)(v0 + 168);
  v21 = specialized GroupActivity.provider.getter(*(_QWORD *)(v0 + 104));
  v23 = v22;
  *(_QWORD *)(v0 + 232) = v21;
  ObjectType = swift_getObjectType();
  *(_OWORD *)(v0 + 16) = *(_OWORD *)type;
  *(_OWORD *)(v0 + 32) = v30;
  *(_OWORD *)(v0 + 48) = v32;
  *(_QWORD *)(v0 + 64) = v20;
  *(_QWORD *)(v0 + 72) = v19;
  *(_WORD *)(v0 + 80) = v18;
  *(_QWORD *)&v32 = **(int **)(v23 + 48) + *(_QWORD *)(v23 + 48);
  swift_unknownObjectRetain();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v25;
  *v25 = v0;
  v25[1] = GroupActivity.prepareForActivation(options:);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v32)(*(_QWORD *)(v0 + 96), v0 + 16, ObjectType, v23);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

Swift::Void __swiftcall GroupActivity.activate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - v11;
  v13 = *(_QWORD *)(v5 - 8);
  v14 = MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  if (one-time initialization token for default != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v44(v18, v2, v5);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v40 = v4;
    v22 = swift_slowAlloc();
    v39 = v8;
    v23 = (uint8_t *)v22;
    v37 = swift_slowAlloc();
    v46 = v37;
    v38 = v3;
    *(_DWORD *)v23 = 136315138;
    v35 = v23 + 4;
    v36 = v23;
    v44(v12, (uint64_t)v18, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v5);
    v24 = v16;
    v25 = >> prefix<A>(_:)((uint64_t)v12, v5);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v42);
    v28 = v25;
    v16 = v24;
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v46);
    v3 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v4 = v40;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v5);
    v29 = v21;
    v30 = v36;
    _os_log_impl(&dword_1A0DB3000, v20, v29, "Application called syncronous activate SPI on %s", v36, 0xCu);
    v31 = v37;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    v8 = v39;
    MEMORY[0x1A1B05CC4](v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v5);
  }

  v32 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v8, 1, 1, v32);
  v44(v16, v3, v5);
  v33 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v34 = (char *)swift_allocObject();
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = 0;
  *((_QWORD *)v34 + 4) = v5;
  *((_QWORD *)v34 + 5) = v4;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v34[v33], v16, v5);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in GroupActivity.activate(), (uint64_t)v34);
  swift_release();
}

uint64_t closure #1 in GroupActivity.activate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 32) = v9;
  *v9 = v6;
  v9[1] = closure #1 in GroupActivity.activate();
  return GroupActivity.activate()(a5, a6);
}

uint64_t closure #1 in GroupActivity.activate()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 48) = a1 & 1;
  return swift_task_switch();
}

uint64_t closure #1 in GroupActivity.activate()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  const char *v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 48) == 1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.default);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      v5 = "Session successfully activated";
LABEL_10:
      _os_log_impl(&dword_1A0DB3000, v2, v3, v5, v4, 2u);
      MEMORY[0x1A1B05CC4](v4, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      v5 = "Failed to activate session";
      goto LABEL_10;
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(void **)(v0 + 40);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 40);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "Failed to activate session error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GroupActivity.activate()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  v5 = type metadata accessor for UUID();
  v3[28] = v5;
  v3[29] = *(_QWORD *)(v5 - 8);
  v3[30] = swift_task_alloc();
  v6 = type metadata accessor for OSSignpostID();
  v3[31] = v6;
  v3[32] = *(_QWORD *)(v6 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v7 = type metadata accessor for OSSignposter();
  v3[35] = v7;
  v3[36] = *(_QWORD *)(v7 - 8);
  v3[37] = swift_task_alloc();
  type metadata accessor for AnyGroupActivity(0);
  v3[38] = swift_task_alloc();
  v8 = type metadata accessor for Optional();
  v3[39] = v8;
  v3[40] = *(_QWORD *)(v8 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = *(_QWORD *)(a1 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GroupActivity.activate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t type;
  NSObject *log;
  uint64_t v27;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 392) = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 400) = v6;
  v6(v2, v4, v1);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 336);
  if (v9)
  {
    log = v7;
    v12 = *(_QWORD *)(v0 + 328);
    v22 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 200);
    type = v8;
    v14 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v27 = v24;
    *(_DWORD *)v14 = 136315138;
    v6(v12, v10, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v13);
    v15 = >> prefix<A>(_:)(v12, v13);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v23);
    *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v13);
    v7 = log;
    _os_log_impl(&dword_1A0DB3000, log, type, "Application called async activate on %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 200));
  }

  *(_QWORD *)(v0 + 408) = v18;
  v6(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  type metadata accessor for CollaborationActivity();
  if (swift_dynamicCast())
  {
    *(_QWORD *)(v0 + 416) = *(_QWORD *)(v0 + 136);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v19;
    *v19 = v0;
    v19[1] = GroupActivity.activate();
    return CollaborationActivity.activate()();
  }
  else
  {
    GroupActivity.eraseToAnyGroupActivity()(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(uint64_t **)(v0 + 304));
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 440) = v21;
    *v21 = v0;
    v21[1] = GroupActivity.activate();
    return AnyGroupActivity.tuConversationActivityCreateSessionRequest.getter();
  }
}

{
  uint64_t v0;
  unsigned int v2;

  swift_release();
  v2 = *(unsigned __int8 *)(v0 + 512);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v2);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_signpost_type_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  os_signpost_id_t v26;
  uint8_t *v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  _QWORD *v39;
  os_signpost_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t (*v48)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v49;

  v1 = *(void **)(v0 + 448);
  objc_msgSend(v1, sel_mutableCopy);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for TUMutableConversationActivityCreateSessionRequest();
  swift_dynamicCast();
  v2 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 456) = v2;
  if (one-time initialization token for groupSession != -1)
    swift_once();
  v3 = v0 + 16;
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = __swift_project_value_buffer(v6, (uint64_t)static Signposts.groupSession);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v10, v6);
  v11 = objc_msgSend(v2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uint64Value.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  OSSignpostID.init(_:)();
  v12 = v2;
  v13 = OSSignposter.logHandle.getter();
  v14 = static os_signpost_type_t.event.getter();
  v15 = OS_os_log.signpostsEnabled.getter();
  v17 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 280);
  if ((v15 & 1) != 0)
  {
    v41 = *(_QWORD *)(v0 + 264);
    v45 = *(_QWORD *)(v0 + 248);
    v46 = *(_QWORD *)(v0 + 256);
    (*(void (**)(void))(v46 + 16))();
    v20 = (uint8_t *)swift_slowAlloc();
    v44 = v18;
    v21 = swift_slowAlloc();
    v49 = v21;
    *(_DWORD *)v20 = 136315138;
    v43 = v19;
    v22 = objc_msgSend(v12, sel_activityIdentifier);
    v40 = v14;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v17;
    v25 = v24;

    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1A0DB3000, v13, v40, v26, "group-session-requested", "%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v21, -1, -1);
    v27 = v20;
    v3 = v0 + 16;
    MEMORY[0x1A1B05CC4](v27, -1, -1);

    v28 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v28(v43, v45);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v16, v44);
    v28(v41, v45);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v19, v30);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationGroupActivity);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of TypedPayloadDecoding((__int128 *)v3, v0 + 56);
    v31 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v31);
    v47 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v32 + 24) + *(_QWORD *)(v32 + 24));
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 464) = v33;
    *v33 = v0;
    v33[1] = GroupActivity.activate();
    return v47(v31, v32);
  }
  else
  {
    *(_QWORD *)(v3 + 32) = 0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v3, &demangling cache variable for type metadata for CollaborationGroupActivity?);
    v35 = specialized GroupActivity.provider.getter(*(_QWORD *)(v0 + 200));
    v37 = v36;
    *(_QWORD *)(v0 + 488) = v35;
    ObjectType = swift_getObjectType();
    v48 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v37 + 56) + *(_QWORD *)(v37 + 56));
    swift_unknownObjectRetain();
    v39 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v39;
    *v39 = v0;
    v39[1] = GroupActivity.activate();
    return v48(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 456), ObjectType, v37);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 480);
  objc_msgSend(*(id *)(v0 + 456), sel_setShare_, v1);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  v2 = specialized GroupActivity.provider.getter(*(_QWORD *)(v0 + 200));
  v4 = v3;
  *(_QWORD *)(v0 + 488) = v2;
  ObjectType = swift_getObjectType();
  v8 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v4 + 56) + *(_QWORD *)(v4 + 56));
  swift_unknownObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v6;
  *v6 = v0;
  v6[1] = GroupActivity.activate();
  return v8(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 456), ObjectType, v4);
}

{
  uint64_t v0;
  void (*v1)(_QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;

  v1 = *(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 400);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v47 = *(unsigned __int8 *)(v0 + 513);
  if (v47 != 1)
  {
    v1(*(_QWORD *)(v0 + 352), v2, v3);
    v4 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    v20 = os_log_type_enabled(v4, v19);
    v7 = *(void **)(v0 + 456);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    if (v20)
    {
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      v21 = *(_QWORD *)(v0 + 352);
      v22 = *(_QWORD *)(v0 + 328);
      v23 = *(_QWORD *)(v0 + 336);
      v37 = v21;
      v39 = *(_QWORD *)(v0 + 320);
      v41 = *(_QWORD *)(v0 + 312);
      v46 = *(_QWORD *)(v0 + 304);
      v24 = *(_QWORD *)(v0 + 200);
      v25 = (uint8_t *)swift_slowAlloc();
      v43 = v8;
      v26 = swift_slowAlloc();
      v48 = v26;
      v45 = v7;
      *(_DWORD *)v25 = 136315138;
      v35(v22, v21, v24);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, v24);
      v27 = >> prefix<A>(_:)(v22, v24);
      v29 = v28;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v41);
      *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v37, v24);
      _os_log_impl(&dword_1A0DB3000, v4, v19, "Application failed activity activation %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v26, -1, -1);
      v18 = v25;
      goto LABEL_6;
    }
    v31 = *(_QWORD *)(v0 + 352);
LABEL_9:
    v32 = *(_QWORD *)(v0 + 304);
    v33 = *(_QWORD *)(v0 + 200);

    v8(v31, v33);
    v30 = v32;
    goto LABEL_10;
  }
  v1(*(_QWORD *)(v0 + 360), v2, v3);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 456);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
  if (!v6)
  {
    v31 = *(_QWORD *)(v0 + 360);
    goto LABEL_9;
  }
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v38 = v9;
  v40 = *(_QWORD *)(v0 + 320);
  v42 = *(_QWORD *)(v0 + 312);
  v46 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 200);
  v13 = (uint8_t *)swift_slowAlloc();
  v44 = v8;
  v14 = swift_slowAlloc();
  v48 = v14;
  v45 = v7;
  *(_DWORD *)v13 = 136315138;
  v36(v10, v9, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v12);
  v15 = >> prefix<A>(_:)(v10, v12);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v10, v42);
  *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v44(v38, v12);
  _os_log_impl(&dword_1A0DB3000, v4, v5, "Application activated activity %s", v13, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A1B05CC4](v14, -1, -1);
  v18 = v13;
LABEL_6:
  MEMORY[0x1A1B05CC4](v18, -1, -1);

  v30 = v46;
LABEL_10:
  outlined destroy of Participant(v30, type metadata accessor for AnyGroupActivity);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v47);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);

  outlined destroy of Participant(v1, type metadata accessor for AnyGroupActivity);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  v1 = *(void **)(v0 + 504);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  swift_unknownObjectRelease();
  v2(v3, v4, v5);
  v6 = v1;
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    type = v9;
    v10 = *(void **)(v0 + 504);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    v12 = *(_QWORD *)(v0 + 336);
    v13 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 328);
    v31 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(void **)(v0 + 456);
    v15 = *(_QWORD *)(v0 + 200);
    v16 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v38 = v34;
    *(_DWORD *)v16 = 136315394;
    v11(v14, v13, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v15);
    v17 = >> prefix<A>(_:)(v14, v15);
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v14, v32);
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v13, v15);
    *(_WORD *)(v16 + 12) = 2080;
    *(_QWORD *)(v0 + 152) = v10;
    v20 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v21 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v8, type, "Application failed activity activation %s with error %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v34, -1, -1);
    MEMORY[0x1A1B05CC4](v16, -1, -1);

    v23 = v36;
  }
  else
  {
    v24 = *(void **)(v0 + 504);
    v25 = *(void **)(v0 + 456);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    v27 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 304);
    v29 = *(_QWORD *)(v0 + 200);

    v26(v27, v29);
    v23 = v28;
  }
  outlined destroy of Participant(v23, type metadata accessor for AnyGroupActivity);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t GroupActivity.activate()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 432) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 512) = a1 & 1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 504) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_unknownObjectRelease();
    *(_BYTE *)(v4 + 513) = a1 & 1;
  }
  return swift_task_switch();
}

uint64_t GroupActivity.activate()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 472) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 480) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  v16 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = a4;
  *((_QWORD *)v17 + 5) = a5;
  *((_QWORD *)v17 + 6) = a1;
  *((_QWORD *)v17 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v17[v16], (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)async function pointer to partial apply for closure #1 in closure #1 in GroupActivity.awaitMetadataValue(), (uint64_t)v17);
  return swift_release();
}

uint64_t closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v8[2] = a4;
  v8[3] = a5;
  v8[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<GroupActivityMetadata, Never>);
  v11 = swift_task_alloc();
  v8[5] = v11;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 32) + *(_QWORD *)(a8 + 32));
  v12 = (_QWORD *)swift_task_alloc();
  v8[6] = v12;
  *v12 = v8;
  v12[1] = specialized closure #1 in closure #1 in GroupActivity.awaitMetadataValue();
  return v14(v11, a7, a8);
}

uint64_t CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2)
{
  return GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t)&unk_1E44FCDC0, &demangling cache variable for type metadata for Future<CKShare, Error>);
}

uint64_t GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v21;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, a4);
  v18 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = a4;
  *((_QWORD *)v19 + 5) = a5;
  *((_QWORD *)v19 + 6) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TUConversationActivity, Error>) -> ();
  *((_QWORD *)v19 + 7) = v16;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v19[v18], v12, a4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in CollaborationGroupActivity.awaitShare(), (uint64_t)v19);
  return swift_release();
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v8[2] = a4;
  v8[3] = a5;
  v13 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a8 + 24) + *(_QWORD *)(a8 + 24));
  v11 = (_QWORD *)swift_task_alloc();
  v8[4] = v11;
  *v11 = v8;
  v11[1] = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  return v13(a7, a8);
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  (*(void (**)(void *, _QWORD))(v0 + 16))(v1, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, uint64_t);
  id v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(void *, uint64_t))(v0 + 16);
  v3 = v1;
  v2(v1, 1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in GroupActivity.awaitMetadataValue());
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t specialized GroupActivity.provider.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v14;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D15358]), sel_init);
  v11 = objc_msgSend(v10, sel_sharePlayLiteEnabled);

  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v2, a1);
  if (v11)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, a1);
    type metadata accessor for CollaborationActivity();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      if (one-time initialization token for shared != -1)
        swift_once();
      v12 = &static BackgroundGroupSessionManager.shared;
      return *v12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, a1);
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v12 = (uint64_t *)&static ConversationManager.shared;
  return *v12;
}

uint64_t sub_1A0E157C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivity.prepareForActivation(completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFF8;
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v5 + 16) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v7;
  *v7 = v5;
  v7[1] = closure #1 in GroupActivity.prepareForActivation(completionHandler:);
  return GroupActivity.prepareForActivation()(v5 + 40, v2, v3);
}

uint64_t sub_1A0E15914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivity.activate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v5 = (_QWORD *)swift_task_alloc();
  v4[4] = v5;
  *v5 = v4;
  v5[1] = closure #1 in GroupActivity.activate();
  return GroupActivity.activate()(v2, v3);
}

unint64_t type metadata accessor for TUMutableConversationActivityCreateSessionRequest()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest;
  if (!lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUMutableConversationActivityCreateSessionRequest);
  }
  return result;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollaborationGroupActivity.awaitShare()(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in GroupActivity.awaitMetadataValue()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in CollaborationGroupActivity.awaitShare());
}

uint64_t partial apply for closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 80);
  return a3(a1, a2, v3 + ((v4 + 32) & ~v4));
}

unint64_t lazy protocol witness table accessor for type GroupActivityActivationResult and conformance GroupActivityActivationResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult;
  if (!lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for GroupActivityActivationResult, &type metadata for GroupActivityActivationResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivityActivationResult and conformance GroupActivityActivationResult);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GroupActivityError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E15BAC + 4 * byte_1A0F0FA85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E15BE0 + 4 * byte_1A0F0FA80[v4]))();
}

uint64_t sub_1A0E15BE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E15BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E15BF0);
  return result;
}

uint64_t sub_1A0E15BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E15C04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E15C08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E15C10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityError()
{
  return &type metadata for GroupActivityError;
}

uint64_t storeEnumTagSinglePayload for GroupActivityActivationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E15C78 + 4 * byte_1A0F0FA8F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E15CAC + 4 * byte_1A0F0FA8A[v4]))();
}

uint64_t sub_1A0E15CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E15CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E15CBCLL);
  return result;
}

uint64_t sub_1A0E15CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E15CD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E15CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E15CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityActivationResult()
{
  return &type metadata for GroupActivityActivationResult;
}

uint64_t dispatch thunk of static GroupActivity.activityIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GroupActivity.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of static GroupActivity._identifiable(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CustomGroupActivityDecodable.init(activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1A0E15D9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CollaborationGroupActivity.awaitShare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  *(_OWORD *)(v4 + 16) = v5;
  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v6;
  *v6 = v4;
  v6[1] = closure #1 in closure #1 in CollaborationGroupActivity.awaitShare();
  return v8(v2, v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return ((uint64_t (*)(uint64_t, int *))&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5Tu[*(int *)_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR15GroupActivities17SystemCoordinatorCSg_TG5Tu])(a1, v4);
}

uint64_t objectdestroy_24Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((v6 + 64) & ~v6);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in GroupActivity.awaitMetadataValue()(a1, v7, v8, v9, v10, v11, v4, v5);
}

uint64_t PersonalGroupSessionProvider.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PersonalGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonalGroupSessionProvider.id.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.state.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.state.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.state.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.members.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.members.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.members.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t PersonalGroupSessionProvider.presenceInfo.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PersonalGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*PersonalGroupSessionProvider.presenceInfo.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t PersonalGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
}

uint64_t PersonalGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Member?(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136), a1);
}

uint64_t PersonalGroupSessionProvider.isCrossAccount.getter()
{
  return 0;
}

uint64_t PersonalGroupSessionProvider.__allocating_init(id:activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  PersonalGroupSessionProvider.init(id:activity:)(a1, a2, a3);
  return v6;
}

_QWORD *PersonalGroupSessionProvider.init(id:activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t *v9;

  v4 = v3;
  v8 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v3[4] = CurrentValueSubject.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v3[5] = CurrentValueSubject.init(_:)();
  if (one-time initialization token for default != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v3[6] = CurrentValueSubject.init(_:)();
  v9 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 + 136));
  v9[3] = type metadata accessor for LocalAccountMember();
  v9[4] = lazy protocol witness table accessor for type LocalAccountMember and conformance LocalAccountMember();
  __swift_allocate_boxed_opaque_existential_1(v9);
  UUID.init()();
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 144)) = 0;
  v4[2] = a1;
  v4[3] = a2;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 32))((char *)v4 + *(_QWORD *)(*v4 + 128), a3);
  return v4;
}

uint64_t *PersonalGroupSessionProvider.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *v0;
  if (one-time initialization token for personalGroupSessionProvider != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.personalGroupSessionProvider);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = (*(uint64_t (**)(void))(*v0 + 256))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "%s Deinit'd", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  outlined destroy of Member?((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  return v0;
}

uint64_t PersonalGroupSessionProvider.__deallocating_deinit()
{
  PersonalGroupSessionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t PersonalGroupSessionProvider.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(50);
  v1._object = (void *)0x80000001A0F1A240;
  v1._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonalGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t protocol witness for GroupSessionProvider.state.getter in conformance PersonalGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t protocol witness for GroupSessionProvider.members.getter in conformance PersonalGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t protocol witness for GroupSessionProvider.isCrossAccount.getter in conformance PersonalGroupSessionProvider<A>()
{
  return 0;
}

uint64_t protocol witness for Identifiable.id.getter in conformance PersonalGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 152))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalAccountMember and conformance LocalAccountMember()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember;
  if (!lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember)
  {
    v1 = type metadata accessor for LocalAccountMember();
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for LocalAccountMember, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonalGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PersonalGroupSessionProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PersonalGroupSessionProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in PersonalGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E0DEA9A0];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E0DEA970];
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PersonalGroupSessionProvider<A>()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t sub_1A0E169F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E16A24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 160);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A0E16A68()
{
  return 16;
}

__n128 sub_1A0E16A74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E16A80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E16AB0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E16AE0()
{
  return 16;
}

__n128 sub_1A0E16AEC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E16AF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E16B28(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E16B58()
{
  return 16;
}

__n128 sub_1A0E16B64(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E16B70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E16BA0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E16BD0()
{
  return 16;
}

__n128 sub_1A0E16BDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for PersonalGroupSessionProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for PersonalGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PersonalGroupSessionProvider);
}

uint64_t method lookup function for PersonalGroupSessionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.presenceInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.__allocating_init(id:activity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of PersonalGroupSessionProvider.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

BOOL static SendReliability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SendReliability.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SendReliability.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SendReliability and conformance SendReliability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SendReliability and conformance SendReliability;
  if (!lazy protocol witness table cache variable for type SendReliability and conformance SendReliability)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SendReliability, &type metadata for SendReliability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SendReliability and conformance SendReliability);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SendReliability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E16E5C + 4 * byte_1A0F0FD8D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E16E90 + 4 * byte_1A0F0FD88[v4]))();
}

uint64_t sub_1A0E16E90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E16E98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E16EA0);
  return result;
}

uint64_t sub_1A0E16EAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E16EB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E16EB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E16EC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SendReliability()
{
  return &type metadata for SendReliability;
}

_QWORD *GroupActivityTransferRepresentation.init<A>(exporting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a1;
  result[7] = a2;
  *a7 = &async function pointer to partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  a7[1] = result;
  return result;
}

uint64_t closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t);

  v7[8] = a5;
  v7[9] = a7;
  v7[6] = a1;
  v7[7] = a4;
  v12 = type metadata accessor for Optional();
  v7[10] = v12;
  v7[11] = *(_QWORD *)(v12 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = *(_QWORD *)(a4 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = *(_QWORD *)(a5 - 8);
  v13 = swift_task_alloc();
  v7[16] = v13;
  type metadata accessor for AnyGroupActivity(0);
  v7[17] = swift_task_alloc();
  v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v14 = (_QWORD *)swift_task_alloc();
  v7[18] = v14;
  *v14 = v7;
  v14[1] = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v16(v13, a1);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v34[2];

  v1 = *(void **)(v0 + 152);
  GroupActivity.eraseToAnyGroupActivity()(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(uint64_t **)(v0 + 136));
  if (v1)
  {
    v2 = v1;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 64));
    if (one-time initialization token for default != -1)
      swift_once();
    v4 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v8(v3, v6, v5);
    v9 = v2;
    v10 = v2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 112);
    if (v13)
    {
      v16 = *(_QWORD *)(v0 + 96);
      v29 = *(_QWORD *)(v0 + 88);
      v30 = *(_QWORD *)(v0 + 80);
      v17 = *(_QWORD *)(v0 + 56);
      type = v12;
      v18 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v34[0] = v33;
      *(_DWORD *)v18 = 136315394;
      v8(v16, v15, v17);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v17);
      v19 = >> prefix<A>(_:)(v16, v17);
      log = v11;
      v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v16, v30);
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v17);
      *(_WORD *)(v18 + 12) = 2080;
      *(_QWORD *)(v0 + 24) = v2;
      v22 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v23 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      v11 = log;
      _os_log_impl(&dword_1A0DB3000, log, type, "Failed to export activity from item: %s error: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v33, -1, -1);
      MEMORY[0x1A1B05CC4](v18, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 56));

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 64));
    v26 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v26;
    *(_QWORD *)(v26 + 16) = v25;
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v27;
    type metadata accessor for TUConversationActivity();
    *v27 = v0;
    v27[1] = closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of AnyGroupActivity(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  os_log_type_t type;
  uint64_t v29;
  uint64_t v30[2];

  v1 = *(void **)(v0 + 152);
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  v8 = v1;
  v9 = v1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  if (v12)
  {
    v15 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 88);
    v26 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 56);
    type = v11;
    v17 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v30[0] = v29;
    *(_DWORD *)v17 = 136315394;
    v7(v15, v14, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v16);
    v18 = >> prefix<A>(_:)(v15, v16);
    log = v10;
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v26);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v16);
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v1;
    v21 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v10 = log;
    _os_log_impl(&dword_1A0DB3000, log, type, "Failed to export activity from item: %s error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    MEMORY[0x1A1B05CC4](v17, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 56));

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  os_log_type_t type;
  uint64_t v29;
  uint64_t v30[2];

  outlined destroy of AnyGroupActivity(*(_QWORD *)(v0 + 136));
  v1 = *(void **)(v0 + 176);
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  v8 = v1;
  v9 = v1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  if (v12)
  {
    v15 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 88);
    v26 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 56);
    type = v11;
    v17 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v30[0] = v29;
    *(_DWORD *)v17 = 136315394;
    v7(v15, v14, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v16);
    v18 = >> prefix<A>(_:)(v15, v16);
    log = v10;
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v26);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v16);
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v1;
    v21 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v10 = log;
    _os_log_impl(&dword_1A0DB3000, log, type, "Failed to export activity from item: %s error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    MEMORY[0x1A1B05CC4](v17, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 56));

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A0E17B70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = (int *)v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, v9, v8, v4, v5, v6, v7);
}

{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AnyGroupActivity(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  outlined init with copy of AnyGroupActivity(a2, (uint64_t)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  outlined init with take of AnyGroupActivity((uint64_t)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  v19[1] = Future.init(_:)();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v7, a1, v4);
  v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
  v16(v15 + v14, v7, v4);
  v13(v7, a1, v4);
  v17 = swift_allocObject();
  v16(v17 + v14, v7, v4);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(id *a1)
{
  id v1;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(id *a1)
{
  id v1;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t GroupActivityTransferRepresentation.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v25 = a2;
  v4 = type metadata accessor for UTType();
  v24 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for DataRepresentation();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = v2[1];
  v23 = *v2;
  if (one-time initialization token for _groupActivity != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v4, (uint64_t)static UTType._groupActivity);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v6, v17, v4);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v7;
  v18[3] = v8;
  v18[4] = v23;
  v18[5] = v16;
  swift_retain();
  DataRepresentation.init(exportedContentType:exporting:)();
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0CA8780], v9);
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(v15, v13, v9);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  v19(v25, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v9);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = *a2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v6;
  *v6 = v2;
  v6[1] = closure #1 in GroupActivityTransferRepresentation.body.getter;
  return ((uint64_t (*)(uint64_t))((char *)a2 + v5))(a1);
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 32) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t closure #1 in GroupActivityTransferRepresentation.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v2, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v0 + 16);
  v4 = *(id *)(v0 + 16);
  v5 = *(void **)(v0 + 32);
  if (v3)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
  }
  else
  {
    v10 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t static TransferRepresentationBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

_QWORD *static GroupActivity<>.transferRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a1;
  result[4] = a2;
  result[5] = a3;
  result[6] = &async function pointer to partial apply for closure #1 in static GroupActivity<>.transferRepresentation.getter;
  result[7] = v8;
  *a4 = &async function pointer to partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  a4[1] = result;
  return result;
}

uint64_t closure #1 in static GroupActivity<>.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in static GroupActivity<>.transferRepresentation.getter()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 16))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A0E18444()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = closure #1 in GroupActivityTransferRepresentation.body.getter;
  return v8(a1);
}

uint64_t partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1A0E18550()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static GroupActivity<>.transferRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t associated type witness table accessor for TransferRepresentation.Body : TransferRepresentation in GroupActivityTransferRepresentation<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TransferRepresentation.Item : Transferable in GroupActivityTransferRepresentation<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupActivityTransferRepresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for GroupActivityTransferRepresentation()
{
  return swift_release();
}

_QWORD *assignWithCopy for GroupActivityTransferRepresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for GroupActivityTransferRepresentation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityTransferRepresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityTransferRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for GroupActivityTransferRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupActivityTransferRepresentation);
}

void sub_1A0E1873C(_QWORD *a1)
{
  get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x1E0CA8770]);
}

void sub_1A0E18750(_QWORD *a1)
{
  get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for GroupActivityTransferRepresentation);
}

void get_witness_table_16CoreTransferable0B0RzlAA18DataRepresentationVyxGAA08TransferD0HPyHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD))
{
  a2(255, *a1, a1[1]);
  JUMPOUT(0x1A1B05BECLL);
}

uint64_t partial apply for closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A0E187A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for AnyGroupActivity(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  v3 = v2 + v1[5];
  type metadata accessor for AnyGroupActivity.MetadataProvider(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    v4 = type metadata accessor for GroupActivityDescription();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    v5 = (int *)type metadata accessor for GroupActivityMetadata(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v6 = v3 + v5[8];
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = v3 + v5[11];
    if (!v9(v10, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined consume of Data._Representation(*(_QWORD *)(v2 + v1[6]), *(_QWORD *)(v2 + v1[6] + 8));
  v11 = v2 + v1[7];
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of AnyGroupActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:));
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TUConversationActivity, Error>)
                                      - 8)
                          + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>;
  if (!lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C96108], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Future<TUConversationActivity, Error> and conformance Future<A, B>);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_AF08AbsolutefG6OutputVACOs5NeverOTg504_s15d12Activities15fg28PAAE6outputAA0cD16Preferencei24VABOvgAA08AbsolutecdG0V7B66OAA0cdI0_pcfu_33_47a87628ece042fb50ac1547dc998f80AaL_pAKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[12];
  char v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v26;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v24, v5, v6);
      v7 = v24[0];
      v8 = v24[4];
      v9 = v24[5];
      v22 = v24[3];
      v23 = v24[1];
      v10 = v24[6];
      v20 = v24[8];
      v21 = v24[2];
      v18 = v24[10];
      v19 = v24[9];
      v17 = v24[11];
      v11 = v25;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v26 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v26;
      }
      v14 = *(_QWORD *)(v2 + 16);
      v13 = *(_QWORD *)(v2 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v2 = v26;
      }
      *(_QWORD *)(v2 + 16) = v14 + 1;
      v15 = v2 + 112 * v14;
      *(_QWORD *)(v15 + 32) = v7;
      *(_QWORD *)(v15 + 40) = v23;
      *(_QWORD *)(v15 + 64) = v8;
      *(_QWORD *)(v15 + 72) = v9;
      *(_QWORD *)(v15 + 48) = v21;
      *(_QWORD *)(v15 + 56) = v22;
      *(_QWORD *)(v15 + 80) = v10;
      *(_QWORD *)(v15 + 96) = v20;
      *(_QWORD *)(v15 + 104) = v19;
      *(_QWORD *)(v15 + 112) = v18;
      *(_QWORD *)(v15 + 120) = v17;
      v4 += 5;
      *(_BYTE *)(v15 + 128) = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

double SpatialTemplate.configuration.getter@<D0>(uint64_t a1@<X8>)
{
  return SpatialTemplate.configuration.getter(a1);
}

{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t SpatialTemplateConfiguration.init(defaultInitiatorRole:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpatialTemplateRole?(a1, a2);
}

uint64_t outlined init with take of SpatialTemplateRole?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SpatialTemplateConfiguration.defaultInitiatorRole.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SpatialTemplateConfiguration.hash(into:)()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SpatialTemplateConfiguration.hashValue.getter()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateConfiguration()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateConfiguration()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v5;
    v3 = v6;
    v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SpatialTemplate.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  if (swift_dynamicCast())
  {
    v19 = v16;
    v20 = v17;
    v21 = v18;
    PresentationSpatialTemplate.customOutput.getter(a3);
    return outlined destroy of PresentationSpatialTemplate((uint64_t)&v19);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v16, &demangling cache variable for type metadata for PresentationSpatialTemplate?);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_AF08AbsolutefG6OutputVACOs5NeverOTg504_s15d12Activities15fg28PAAE6outputAA0cD16Preferencei24VABOvgAA08AbsolutecdG0V7B66OAA0cdI0_pcfu_33_47a87628ece042fb50ac1547dc998f80AaL_pAKTf3nnnpk_nTf1cn_n(v10);
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v16, a1, a2);
    outlined init with take of SpatialTemplateRole?((uint64_t)&v16, (uint64_t)&v19);
    v12 = *((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v13 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
      SpatialTemplateRole.output.getter(v13, v15);
      v12 = v15[0];
      v14 = v15[1];
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    }
    else
    {
      result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v19, &demangling cache variable for type metadata for SpatialTemplateRole?);
      v14 = 0;
    }
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t specialized static SpatialTemplateConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char v4;
  _OWORD v6[2];
  uint64_t v7;
  _BYTE v8[40];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  outlined init with copy of URL?(a1, (uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v10)
  {
    outlined init with take of TypedPayloadDecoding(&v9, (uint64_t)v16);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v16, 0, sizeof(v16));
    v17 = 0;
  }
  outlined init with copy of URL?(a2, (uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v10)
  {
    outlined init with take of TypedPayloadDecoding(&v9, (uint64_t)v14);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v14, 0, sizeof(v14));
    v15 = 0;
  }
  v3 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
  outlined init with copy of URL?((uint64_t)v16, (uint64_t)&v9, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)v14, (uint64_t)&v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (v10)
  {
    outlined init with copy of URL?((uint64_t)&v9, (uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((_QWORD *)&v12 + 1))
    {
      v6[0] = v11;
      v6[1] = v12;
      v7 = v13;
      v4 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v8, (uint64_t)v6);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v6);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v8);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v8);
      v4 = 0;
      v3 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((_QWORD *)&v12 + 1))
    {
      v3 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      v4 = 0;
    }
    else
    {
      v4 = -1;
    }
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v9, v3);
  return v4 & 1;
}

uint64_t outlined destroy of AnySpatialTemplateRole(uint64_t a1)
{
  destroy for AnySpatialTemplate();
  return a1;
}

uint64_t outlined destroy of PresentationSpatialTemplate(uint64_t a1)
{
  destroy for PresentationSpatialTemplate(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration;
  if (!lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplateConfiguration, &type metadata for SpatialTemplateConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateConfiguration and conformance SpatialTemplateConfiguration);
  }
  return result;
}

uint64_t dispatch thunk of SpatialTemplate.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpatialTemplate.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for SpatialTemplateConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return a1;
}

uint64_t initializeWithCopy for SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for SpatialTemplateConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplateConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplateConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateConfiguration()
{
  return &type metadata for SpatialTemplateConfiguration;
}

uint64_t AttachmentLedgerTopic.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id AttachmentLedgerTopic.lock.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t AttachmentLedgerTopic.topic.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32[40];
  _BYTE v33[40];
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of URL?(a1, (uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v38 = v12;
    *(_DWORD *)v11 = 136315394;
    outlined init with copy of URL?((uint64_t)v39, (uint64_t)&v36, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    v31 = v10;
    v30 = v12;
    if (v37)
    {
      outlined init with take of TypedPayloadDecoding(&v36, (uint64_t)&v34);
      outlined init with copy of AudioSessionAssertionManager((uint64_t)&v34, (uint64_t)v33);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      v13 = String.init<A>(reflecting:)();
      v15 = v14;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v34);
    }
    else
    {
      v13 = 7104878;
      v15 = 0xE300000000000000;
    }
    *(_QWORD *)&v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_WORD *)(v11 + 12) = 2080;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
    CurrentSubject.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined init with copy of URL?((uint64_t)&v36, (uint64_t)&v34, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    if (v35)
    {
      outlined init with take of TypedPayloadDecoding(&v34, (uint64_t)v33);
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v33, (uint64_t)v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      v16 = String.init<A>(reflecting:)();
      v18 = v17;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
    }
    else
    {
      v16 = 7104878;
      v18 = 0xE300000000000000;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v36, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_QWORD *)&v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v9, (os_log_type_t)v31, "Updating topic from %s -> %s", (uint8_t *)v11, 0x16u);
    v19 = v30;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v19, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);

  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    swift_release_n();

  }
  v20 = (_QWORD *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
  swift_beginAccess();
  *v20 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v21 = v40;
  if (!v40)
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  v22 = v41;
  v23 = __swift_project_boxed_opaque_existential_1(v39, v40);
  v24 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v26);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v39, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v21);
  *(_QWORD *)&v34 = v27;
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[Attachment], Never>, MEMORY[0x1E0C95D90]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerTopic.topic.didset()
{
  uint64_t result;
  void (*v1)(uint64_t);
  uint64_t v2;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(void (**)(uint64_t))(*(_QWORD *)result + 376);
    v2 = swift_bridgeObjectRetain();
    v1(v2);
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerTopic.state.getter()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v3;

  v1 = *(void **)(v0 + 32);
  objc_msgSend(v1, sel_lock);
  dispatch thunk of StateMachine.currentState.getter();
  objc_msgSend(v1, sel_unlock);
  return v3;
}

uint64_t AttachmentLedgerTopic.dataCryptor.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[5];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v19 = v3;
    v10 = v9;
    v18 = swift_slowAlloc();
    v21[0] = v18;
    *(_DWORD *)v10 = 136315394;
    v11 = _typeName(_:qualified:)();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v14 = *(_QWORD *)(v1 + 16);
    v13 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Updating %s dataCryptor, topic=%s", (uint8_t *)v10, 0x16u);
    v15 = v18;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    v16 = v10;
    v3 = v19;
    MEMORY[0x1A1B05CC4](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v2);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
}

uint64_t AttachmentLedgerTopic.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  swift_beginAccess();
  return outlined init with copy of URL?(v3, a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t AttachmentLedgerTopic.dataCryptor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  swift_beginAccess();
  outlined assign with copy of TopicCryptorProvider?(a1, v3);
  swift_endAccess();
  AttachmentLedgerTopic.dataCryptor.didset();
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t outlined assign with copy of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*AttachmentLedgerTopic.dataCryptor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return AttachmentLedgerTopic.dataCryptor.modify;
}

uint64_t AttachmentLedgerTopic.dataCryptor.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return AttachmentLedgerTopic.dataCryptor.didset();
  return result;
}

uint64_t AttachmentLedgerTopic.attachments.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t AttachmentLedgerTopic.attachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*AttachmentLedgerTopic.attachments.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = malloc(*(_QWORD *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return AttachmentLedgerTopic.attachments.modify;
}

void AttachmentLedgerTopic.attachments.modify(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t AttachmentLedgerTopic.$attachments.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments, v1);
  v5 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t AttachmentLedgerTopic.RetryInfo.attempt.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.attempt.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void AttachmentLedgerTopic.RetryInfo.retryAttemptInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.retryAttemptInterval.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.maximumAttempts.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AttachmentLedgerTopic.RetryInfo.maximumAttempts.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.maximumAttempts.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.pendingAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedgerTopic.RetryInfo.pendingAttachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AttachmentLedgerTopic.RetryInfo.pendingAttachments.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.RetryInfo.update(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v40 = (char *)&v33 - v5;
  v6 = type metadata accessor for PluginAttachmentLedgerTopic.Configuration();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  PluginAttachmentLedgerTopic.State.ShutdownInfo.config.getter();
  v10 = PluginAttachmentLedgerTopic.Configuration.maxSubscribeRetries.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)(v1 + 16) = v10;
  v11 = PluginAttachmentLedgerTopic.State.ShutdownInfo.pendingAttachments.getter();
  v12 = v11;
  if (v11 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13)
      goto LABEL_3;
  }
  else
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_3:
      v14 = 0;
      v15 = (uint64_t *)(v1 + 24);
      v37 = v12;
      v38 = v12 & 0xC000000000000001;
      v34 = v12 + 32;
      v35 = (uint64_t *)(v1 + 24);
      v36 = v13;
      do
      {
        while (1)
        {
          if (v38)
          {
            v1 = MEMORY[0x1A1B05010](v14, v12);
            v16 = __OFADD__(v14, 1);
            v17 = v14 + 1;
            if (v16)
              goto LABEL_27;
          }
          else
          {
            v1 = *(_QWORD *)(v34 + 8 * v14);
            swift_retain();
            v16 = __OFADD__(v14, 1);
            v17 = v14 + 1;
            if (v16)
            {
LABEL_27:
              __break(1u);
              goto LABEL_28;
            }
          }
          v18 = *v15;
          v19 = (unint64_t)*v15 >> 62;
          v39 = v17;
          if (!v19)
            break;
          swift_bridgeObjectRetain_n();
          v20 = _CocoaArrayWrapper.endIndex.getter();
          if (v20)
            goto LABEL_12;
LABEL_20:
          swift_bridgeObjectRelease_n();
          v30 = swift_retain();
          v15 = v35;
          MEMORY[0x1A1B049B0](v30);
          v31 = v36;
          v12 = v37;
          v14 = v39;
          if (*(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          if (v14 == v31)
            return swift_bridgeObjectRelease_n();
        }
        v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v20)
          goto LABEL_20;
LABEL_12:
        v44 = v18 & 0xC000000000000001;
        v21 = 4;
        while (1)
        {
          v22 = v21 - 4;
          if (v44)
          {
            MEMORY[0x1A1B05010](v21 - 4, v18);
            v12 = v21 - 3;
            if (__OFADD__(v22, 1))
              goto LABEL_26;
          }
          else
          {
            swift_retain();
            v12 = v21 - 3;
            if (__OFADD__(v22, 1))
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
          }
          v23 = v40;
          Attachment.id.getter();
          v24 = v41;
          v25 = v1;
          Attachment.id.getter();
          v26 = static UUID.== infix(_:_:)();
          v27 = *(void (**)(char *, uint64_t))(v42 + 8);
          v28 = v24;
          v29 = v43;
          v27(v28, v43);
          v27(v23, v29);
          swift_release();
          if ((v26 & 1) != 0)
            break;
          ++v21;
          v1 = v25;
          if (v12 == v20)
            goto LABEL_20;
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        v12 = v37;
        v14 = v39;
        v15 = v35;
      }
      while (v39 != v36);
    }
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t AttachmentLedgerTopic.RetryInfo.init()()
{
  return 0;
}

uint64_t default argument 0 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 0;
}

double default argument 1 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 1.0;
}

uint64_t default argument 2 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return 2;
}

uint64_t default argument 3 of AttachmentLedgerTopic.RetryInfo.init(attempt:retryAttemptInterval:maximumAttempts:pendingAttachments:)()
{
  return MEMORY[0x1E0DEE9D8];
}

double AttachmentLedgerTopic.retryInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo;
  swift_beginAccess();
  v2 = *(double *)(v1 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AttachmentLedgerTopic.retryInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = v4 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo;
  swift_beginAccess();
  *(_QWORD *)v9 = a1;
  *(double *)(v9 + 8) = a4;
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  return swift_bridgeObjectRelease();
}

uint64_t (*AttachmentLedgerTopic.retryInfo.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t AttachmentLedgerTopic.__allocating_init(name:retainRefOnStart:pluginGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

_QWORD *AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  _OWORD v46[2];
  uint64_t v47;

  v7 = v6;
  v44 = a6;
  v37 = a4;
  v38 = a5;
  v35 = a2;
  v36 = a3;
  v34 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8);
  v41 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  v14 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  outlined init with copy of URL?((uint64_t)v46, (uint64_t)&v45 + 1, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  CurrentSubject.init(wrappedValue:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v46, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  v40 = OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>.Transition>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>.Transition);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1A0F0FF60;
  LOBYTE(v46[0]) = 0;
  v45 = 256;
  lazy protocol witness table accessor for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State();
  lazy protocol witness table accessor for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  v45 = 513;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  v45 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 2;
  v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 1;
  v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 0;
  v45 = 1029;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  v45 = 1030;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  v45 = 256;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  v45 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 4;
  v45 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 775;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 776;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 777;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 778;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 3;
  v45 = 779;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v46[0]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentLedgerTopic.State, AttachmentLedgerTopic.Event>);
  swift_allocObject();
  *(_QWORD *)((char *)v7 + v40) = StateMachine.init(initialState:transitions:)();
  v15 = (_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart);
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
  v16 = OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables;
  v17 = MEMORY[0x1E0DEE9D8];
  v18 = MEMORY[0x1E0DEE9E8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) == 0)
  {
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables) = MEMORY[0x1E0DEE9E8];
    v20 = v37;
    v19 = v38;
    v22 = v35;
    v21 = v36;
    v23 = v34;
    goto LABEL_3;
  }
  v31 = MEMORY[0x1E0DEE9D8];
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    *(_QWORD *)((char *)v7 + v16) = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    v21 = v36;
    v20 = v37;
    v22 = v35;
    v23 = v34;
  }
  else
  {
    *(_QWORD *)((char *)v7 + v16) = v18;
    v21 = v36;
    v20 = v37;
    v22 = v35;
    v23 = v34;
    if ((v31 & 0xC000000000000000) == 0)
    {
      *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = v18;
      v19 = v38;
      goto LABEL_6;
    }
  }
  v32 = _CocoaArrayWrapper.endIndex.getter();
  v19 = v38;
  if (!v32)
  {
LABEL_3:
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = v18;
    if ((v17 & 0xC000000000000000) == 0)
      goto LABEL_6;
    goto LABEL_4;
  }
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables) = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
LABEL_4:
  if (_CocoaArrayWrapper.endIndex.getter())
    v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
LABEL_6:
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables) = v18;
  v24 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor;
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((_QWORD *)v24 + 4) = 0;
  v25 = (char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments;
  *(_QWORD *)&v46[0] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
  v26 = v41;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v25, v26, v43);
  v27 = (_QWORD *)((char *)v7 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retryInfo);
  *v27 = 0;
  v27[1] = 0x3FF0000000000000;
  v27[2] = 2;
  v27[3] = v17;
  v7[2] = v23;
  v7[3] = v22;
  v28 = *v15;
  *v15 = v21;
  v15[1] = v20;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v28);
  v29 = v44;
  v7[5] = v19;
  v7[6] = v29;
  return v7;
}

id AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1)
{
  uint64_t (***v1)(uint64_t);
  uint64_t (***v2)(uint64_t);
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  _BYTE v26[40];
  __int128 v27;
  uint64_t v28;
  _QWORD v29[6];

  v2 = v1;
  v4 = v1[4];
  objc_msgSend(v4, sel_lock);
  LOBYTE(v22) = 0;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_QWORD *)&v22 = v9;
      *(_DWORD *)v8 = 136315138;
      v29[0] = v2;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      v10 = String.init<A>(reflecting:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      v12 = "Can't subscribe to AttachmentLedgerTopic %s";
LABEL_8:
      _os_log_impl(&dword_1A0DB3000, v6, v7, v12, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v9, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);
LABEL_19:

      return objc_msgSend(v4, sel_unlock);
    }
LABEL_18:
    swift_release_n();
    goto LABEL_19;
  }
  (*v1)[43]((uint64_t)&v27);
  outlined init with copy of URL?(a1, (uint64_t)v26, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v28)
  {
    outlined init with take of Date?((uint64_t)v26, (uint64_t)&v22, &demangling cache variable for type metadata for TopicCryptorProvider?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v27, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (v23)
      goto LABEL_10;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v22, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_QWORD *)&v22 = v9;
      *(_DWORD *)v8 = 136315138;
      v29[0] = v2;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      v19 = String.init<A>(reflecting:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      v12 = "No dataCryptor existing on AttachmentLedgerTopic and none passed in %s";
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v26, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined init with take of TypedPayloadDecoding(&v27, (uint64_t)&v22);
LABEL_10:
  outlined init with take of TypedPayloadDecoding(&v22, (uint64_t)v29);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)v25);
  (*v1)[44]((uint64_t)v25);
  v13 = *(uint64_t (**)(uint64_t))((char *)v1
                                          + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart);
  if (v13)
  {
    v14 = swift_retain();
    v15 = v13(v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v13);
  }
  else
  {
    v15 = 0;
  }
  *(uint64_t (***)(uint64_t))((char *)v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = (uint64_t (**)(uint64_t))v15;
  swift_unknownObjectRelease();
  v16 = outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)&v22);
  *(_QWORD *)&v27 = (*v2)[46](v16);
  v17 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  v24 = v27;
  *(_QWORD *)&v27 = ((uint64_t (*)(__int128 *))v2[5])(&v22);
  swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopicProvider, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopicProvider, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopicProvider, Error>, MEMORY[0x1E0C95D90]);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  outlined destroy of AttachmentLedgerTopic.BootstrapTopicInfo((uint64_t)&v22);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return objc_msgSend(v4, sel_unlock);
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.init(dataCryptorProvider:attachments:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = outlined init with take of TypedPayloadDecoding(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (v5)
    {
      v8 = v5;
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain();
      v10 = v5;
      swift_retain();
      v11 = v5;
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = swift_slowAlloc();
        v29 = swift_slowAlloc();
        v30 = (uint64_t)v5;
        v31 = v29;
        *(_DWORD *)v14 = 136315394;
        v15 = v5;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v16 = String.init<A>(reflecting:)();
        v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v14 + 12) = 2080;
        v19 = *(_QWORD *)(v7 + 16);
        v18 = *(_QWORD *)(v7 + 24);
        swift_bridgeObjectRetain();
        v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A0DB3000, v12, v13, "Failed to subscribe, error=%s, topic=%s", (uint8_t *)v14, 0x16u);
        v20 = v29;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v20, -1, -1);
        MEMORY[0x1A1B05CC4](v14, -1, -1);
      }
      else
      {

        swift_release_n();
      }

      v28 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v4, 1, 1, v28);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)((uint64_t)v4);

      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    }
    else
    {
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain();
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v25 = swift_slowAlloc();
        v31 = v25;
        *(_DWORD *)v24 = 136315138;
        v26 = *(_QWORD *)(v7 + 16);
        v27 = *(_QWORD *)(v7 + 24);
        swift_bridgeObjectRetain();
        v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1A0DB3000, v22, v23, "Successfully fetched plugin, topic=%s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v25, -1, -1);
        MEMORY[0x1A1B05CC4](v24, -1, -1);
      }
      else
      {
        swift_release();
      }

    }
    objc_msgSend(*(id *)(v7 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

void closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(_QWORD *a1)
{
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[40];
  _BYTE v24[40];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  __int128 v29[2];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(*(id *)(Strong + 32), sel_lock);
    LOBYTE(v29[0]) = 1;
    if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
    {
      v4 = a1[3];
      v5 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v4);
      v27[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
      v6 = swift_allocObject();
      swift_weakInit();
      outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v29);
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      outlined init with take of TypedPayloadDecoding(v29, v7 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic.State, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>, MEMORY[0x1E0C95D90]);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
    else
    {
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v20 = swift_slowAlloc();
        *(_QWORD *)&v29[0] = v20;
        *(_DWORD *)v19 = 136315138;
        dispatch thunk of StateMachine.currentState.getter();
        LOBYTE(v25) = v27[0];
        v21 = String.init<A>(reflecting:)();
        v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A0DB3000, v17, v18, "Failed to execute successful event, currentState: %s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v20, -1, -1);
        MEMORY[0x1A1B05CC4](v19, -1, -1);
      }
      else
      {
        swift_release_n();
      }

    }
    objc_msgSend(*(id *)(v3 + 32), sel_unlock);
    swift_release();
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v29);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v28 = v12;
      *(_DWORD *)v11 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v29, (uint64_t)v27);
      outlined init with copy of URL?((uint64_t)v27, (uint64_t)&v25, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      if (v26)
      {
        outlined init with take of TypedPayloadDecoding(&v25, (uint64_t)v24);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v24, (uint64_t)v23);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
        v13 = String.init<A>(reflecting:)();
        v15 = v14;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
      }
      else
      {
        v15 = 0xE300000000000000;
        v13 = 7104878;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
      _os_log_impl(&dword_1A0DB3000, v9, v10, "Lost reference to Topic, ignoring PluginTopic=%s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v12, -1, -1);
      MEMORY[0x1A1B05CC4](v11, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }

  }
}

uint64_t closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_BYTE *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  os_log_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  _BYTE *v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE v68[12];
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _BYTE *v77;
  NSObject *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81[3];
  char v82;
  uint64_t v83;

  v76 = a3;
  v80 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v68[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v77 = &v68[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PluginAttachmentLedgerTopic.State();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v68[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = &v68[-v15];
  MEMORY[0x1E0C80A78](v14);
  v18 = &v68[-v17];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v20 = result;
    v79 = v16;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v72 = v13;
    v75 = v7;
    v21 = type metadata accessor for Logger();
    v22 = __swift_project_value_buffer(v21, (uint64_t)static Log.attachmentLedgerTopic);
    v23 = v80;
    v78 = *(NSObject **)(v10 + 16);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v78)(v18, v80, v9);
    swift_retain_n();
    v74 = v22;
    v24 = v9;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v73 = v5;
      v29 = v28;
      v70 = swift_slowAlloc();
      v81[0] = v70;
      *(_DWORD *)v29 = 136315394;
      swift_retain();
      v69 = v27;
      v30 = AttachmentLedgerTopic.description.getter();
      v71 = v6;
      v31 = v20;
      v33 = v32;
      swift_release();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v33, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v29 + 12) = 2080;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, (uint64_t (*)(uint64_t))MEMORY[0x1E0D15018], MEMORY[0x1E0D15028]);
      v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v81);
      v23 = v80;
      v20 = v31;
      v6 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      v36(v18, v24);
      _os_log_impl(&dword_1A0DB3000, v25, (os_log_type_t)v69, "Topic %s observed PluginTopic's state change to %s", (uint8_t *)v29, 0x16u);
      v37 = v70;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v37, -1, -1);
      v38 = v29;
      v5 = v73;
      MEMORY[0x1A1B05CC4](v38, -1, -1);
    }
    else
    {
      swift_release_n();
      v36 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      v36(v18, v24);
    }

    v40 = v78;
    v39 = v79;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v78)(v79, v23, v24);
    v41 = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 88))(v39, v24);
    if (v41 == *MEMORY[0x1E0D14FF8])
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 96))(v39, v24);
      v42 = type metadata accessor for PluginAttachmentLedgerTopic.State.RetryInfo();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v39, v42);
    }
    else if (v41 == *MEMORY[0x1E0D15000])
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 96))(v39, v24);
      v43 = v75;
      v44 = v77;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 32))(v77, v39, v6);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v5, v44, v6);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v5, 0, 1, v6);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)((uint64_t)v5);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
      (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v44, v6);
    }
    else if (v41 != *MEMORY[0x1E0D15008])
    {
      if (v41 == *MEMORY[0x1E0D14FF0])
      {
        LOBYTE(v81[0]) = 3;
        if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
        {
          v45 = (_QWORD *)(v20 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
          swift_beginAccess();
          *v45 = MEMORY[0x1E0DEE9E8];
          swift_bridgeObjectRelease();
          AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(v76);
        }
        else
        {
          swift_retain_n();
          v61 = Logger.logObject.getter();
          v62 = v20;
          v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v61, v63))
          {
            v64 = (uint8_t *)swift_slowAlloc();
            v65 = swift_slowAlloc();
            v81[0] = v65;
            *(_DWORD *)v64 = 136315138;
            dispatch thunk of StateMachine.currentState.getter();
            v82 = v83;
            v66 = String.init<A>(reflecting:)();
            v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_release_n();
            _os_log_impl(&dword_1A0DB3000, v61, v63, "Topic state transitioned to ready state; however, the state machine wasn't in a state to handle it. currentState: %s",
              v64,
              0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A1B05CC4](v65, -1, -1);
            MEMORY[0x1A1B05CC4](v64, -1, -1);
          }
          else
          {
            swift_release_n();
          }

          v20 = v62;
        }
      }
      else if (v41 != *MEMORY[0x1E0D14FE8])
      {
        v46 = v72;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v40)(v72, v23, v24);
        swift_retain_n();
        v47 = Logger.logObject.getter();
        v48 = static os_log_type_t.fault.getter();
        v49 = v48;
        if (os_log_type_enabled(v47, v48))
        {
          v50 = swift_slowAlloc();
          v73 = v5;
          v51 = v50;
          v80 = swift_slowAlloc();
          v81[0] = v80;
          *(_DWORD *)v51 = 136315394;
          v78 = v47;
          swift_retain();
          LODWORD(v77) = v49;
          v52 = AttachmentLedgerTopic.description.getter();
          v53 = v6;
          v54 = v20;
          v56 = v55;
          swift_release();
          v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v56, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v20 = v54;
          v6 = v53;
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v51 + 12) = 2080;
          lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, (uint64_t (*)(uint64_t))MEMORY[0x1E0D15018], MEMORY[0x1E0D15028]);
          v57 = dispatch thunk of CustomStringConvertible.description.getter();
          v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v36(v46, v24);
          v47 = v78;
          _os_log_impl(&dword_1A0DB3000, v78, (os_log_type_t)v77, "Topic %s Hit unexpected state. state: %s", (uint8_t *)v51, 0x16u);
          v59 = v80;
          swift_arrayDestroy();
          MEMORY[0x1A1B05CC4](v59, -1, -1);
          v60 = v51;
          v5 = v73;
          MEMORY[0x1A1B05CC4](v60, -1, -1);
        }
        else
        {
          swift_release_n();
          v36(v46, v24);
        }

        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v5, 1, 1, v6);
        AttachmentLedgerTopic.processShutdown(shutdownInfo:)((uint64_t)v5);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v5, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
        v36(v79, v24);
      }
    }
    objc_msgSend(*(id *)(v20 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

void AttachmentLedgerTopic.processShutdown(shutdownInfo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(__int128 *, _QWORD);
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char v102[40];
  uint64_t v103[5];
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v2 = v1;
  v101 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v93 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v94 = (char *)&v90 - v9;
  v10 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason();
  v97 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v98 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v99 = (char *)&v90 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v100 = (char *)&v90 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_stateMachine);
  LOBYTE(v104) = 4;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v92 = v26;
    v91 = v5;
    v27 = (_QWORD *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables);
    swift_beginAccess();
    v95 = v17;
    v28 = MEMORY[0x1E0DEE9E8];
    *v27 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRelease();
    v29 = (_QWORD *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
    swift_beginAccess();
    *v29 = v28;
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
    swift_beginAccess();
    *v30 = v28;
    swift_bridgeObjectRelease();
    v106 = 0;
    v104 = 0u;
    v105 = 0u;
    v31 = v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v32(v25, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v22);
    CurrentSubject.wrappedValue.getter();
    v33 = *(void (**)(char *, uint64_t))(v23 + 8);
    v33(v25, v22);
    v32(v25, v31, v22);
    outlined init with copy of URL?((uint64_t)&v104, (uint64_t)v102, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    CurrentSubject.wrappedValue.setter();
    v33(v25, v22);
    AttachmentLedgerTopic.topic.didset((uint64_t)v103);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v104, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    v34 = v95;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v103, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
    swift_unknownObjectRelease();
    outlined init with copy of URL?(v101, (uint64_t)v16, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v34) == 1)
    {
      v35 = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
    }
    else
    {
      v45 = v100;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v100, v16, v34);
      v46 = v99;
      PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter();
      v47 = v97;
      v48 = v98;
      (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v98, *MEMORY[0x1E0D14FA8], v10);
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14FB0], MEMORY[0x1E0D14FC0]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = *(void (**)(char *, uint64_t))(v47 + 8);
      v50(v48, v10);
      v50(v46, v10);
      if ((v49 & 1) != 0)
      {
        v35 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v45, v34);
      }
      else
      {
        if (one-time initialization token for attachmentLedgerTopic != -1)
          swift_once();
        v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)static Log.attachmentLedgerTopic);
        v52 = v96;
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v96, v45, v34);
        swift_retain_n();
        v53 = Logger.logObject.getter();
        v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, (os_log_type_t)v54))
        {
          LODWORD(v101) = v54;
          v55 = v47;
          v56 = swift_slowAlloc();
          v90 = swift_slowAlloc();
          *(_QWORD *)&v104 = v90;
          *(_DWORD *)v56 = 136315394;
          v57 = (uint64_t)v94;
          PluginAttachmentLedgerTopic.State.ShutdownInfo.reason.getter();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v10);
          v58 = v93;
          outlined init with copy of URL?(v57, v93, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v58, 1, v10) == 1)
          {
            v59 = 0xE300000000000000;
            v60 = 7104878;
          }
          else
          {
            v62 = v99;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v99, v58, v10);
            (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v98, v62, v10);
            v60 = String.init<A>(reflecting:)();
            v59 = v63;
            v50(v62, v10);
          }
          outlined destroy of OS_dispatch_queue.SchedulerOptions?(v57, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason?);
          v103[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v59, (uint64_t *)&v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v61 = *(void (**)(char *, uint64_t))(v18 + 8);
          v34 = v95;
          v61(v96, v95);
          *(_WORD *)(v56 + 12) = 2080;
          swift_retain();
          v64 = AttachmentLedgerTopic.description.getter();
          v66 = v65;
          swift_release();
          v103[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v66, (uint64_t *)&v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1A0DB3000, v53, (os_log_type_t)v101, "Processing shutdown with reason: %s on topic %s", (uint8_t *)v56, 0x16u);
          v67 = v90;
          swift_arrayDestroy();
          MEMORY[0x1A1B05CC4](v67, -1, -1);
          MEMORY[0x1A1B05CC4](v56, -1, -1);

          v45 = v100;
        }
        else
        {
          v61 = *(void (**)(char *, uint64_t))(v18 + 8);
          v61(v52, v34);
          swift_release_n();

        }
        v68 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*(_QWORD *)v2 + 416))(&v104);
        AttachmentLedgerTopic.RetryInfo.update(with:)();
        v68(&v104, 0);
        v35 = ((uint64_t (*)(char *, uint64_t))v61)(v45, v34);
      }
    }
    v69 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 400);
    v70 = v69(v35);
    v71 = swift_bridgeObjectRelease();
    v69(v71);
    v73 = v72;
    swift_bridgeObjectRelease();
    if (v70 < v73)
    {
      LOBYTE(v104) = 5;
      if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
      {
        v74 = type metadata accessor for TaskPriority();
        v75 = (uint64_t)v91;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v91, 1, 1, v74);
        v76 = swift_allocObject();
        v77 = swift_weakInit();
        v78 = ((double (*)(uint64_t))v69)(v77);
        swift_bridgeObjectRelease();
        v79 = (double *)swift_allocObject();
        v79[2] = 0.0;
        v79[3] = 0.0;
        *((_QWORD *)v79 + 4) = v76;
        v79[5] = v78;
        _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v75, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:), (uint64_t)v79);
        swift_release();
        return;
      }
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        *(_QWORD *)&v104 = v40;
        *(_DWORD *)v39 = 136315138;
        swift_retain();
        v87 = AttachmentLedgerTopic.description.getter();
        v89 = v88;
        swift_release();
        v103[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        v44 = "%s Not staging a retry attempt due to invalid state.";
        goto LABEL_30;
      }
LABEL_31:
      swift_release_n();
      goto LABEL_32;
    }
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_31;
    v39 = (uint8_t *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    v103[0] = v40;
    *(_DWORD *)v39 = 136315138;
    *(_QWORD *)&v104 = ((uint64_t (*)(void))v69)();
    *((_QWORD *)&v104 + 1) = v81;
    *(_QWORD *)&v105 = v82;
    *((_QWORD *)&v105 + 1) = v83;
    v84 = String.init<A>(reflecting:)();
    *(_QWORD *)&v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    v44 = "Not retrying as we've exceeded the maximum amount of retries (%s";
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_31;
    v39 = (uint8_t *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    *(_QWORD *)&v104 = v40;
    *(_DWORD *)v39 = 136315138;
    swift_retain();
    v41 = AttachmentLedgerTopic.description.getter();
    v43 = v42;
    swift_release();
    v103[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    v44 = "Not able to process pluginShutdown on %s. We should *ALWAYS* be able to process a shutdown as it can happen at anytime";
  }
LABEL_30:
  _os_log_impl(&dword_1A0DB3000, v37, v38, v44, v39, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A1B05CC4](v40, -1, -1);
  MEMORY[0x1A1B05CC4](v39, -1, -1);
LABEL_32:

}

uint64_t closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(double *)(v5 + 184) = a1;
  *(_QWORD *)(v5 + 176) = a5;
  v6 = type metadata accessor for ContinuousClock();
  *(_QWORD *)(v5 + 192) = v6;
  *(_QWORD *)(v5 + 200) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 208) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v17;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v17 = v5;
    *(_DWORD *)v4 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[21] = Strong;
      type metadata accessor for AttachmentLedgerTopic(0);
      v7 = String.init<A>(reflecting:)();
      v9 = v8;
    }
    else
    {
      v9 = 0xE300000000000000;
      v7 = 7104878;
    }
    v10 = v0[23];
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2048;
    v0[20] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Waiting %f seconds to retry.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v11 = static Duration.seconds(_:)();
  v13 = v12;
  ContinuousClock.init()();
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                         + async function pointer to specialized Clock.sleep(for:tolerance:));
  v14 = (_QWORD *)swift_task_alloc();
  v0[28] = v14;
  *v14 = v0;
  v14[1] = closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:);
  return v16(v11, v13, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t (*closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _BYTE *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*result)(uint64_t, _QWORD);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_11;
  v2 = Strong;
  v3 = (_BYTE *)(v0 + 240);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v22 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_retain();
    v8 = AttachmentLedgerTopic.description.getter();
    v10 = v9;
    swift_release();
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v3 = (_BYTE *)(v0 + 240);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Done waiting, retrying.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *v3 = 6;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    swift_retain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_retain();
      v19 = AttachmentLedgerTopic.description.getter();
      v21 = v20;
      swift_release();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v15, v16, "%s not retrying due to invalid state.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v18, -1, -1);
      MEMORY[0x1A1B05CC4](v17, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
    goto LABEL_11;
  }
  result = (uint64_t (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v0 + 56);
  if (!__OFADD__(*v12, 1))
  {
    ++*v12;
    v13 = result(v0 + 56, 0);
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 400))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 432))(v0 + 16, v14);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for TopicCryptorProvider?);
LABEL_11:
    swift_task_dealloc();
    return (uint64_t (*)(uint64_t, _QWORD))(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall AttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;

  v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_retain();
    v7 = AttachmentLedgerTopic.description.getter();
    v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "Received request to unsubscribe topic %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = *(void **)(v1 + 32);
  objc_msgSend(v10, sel_lock);
  closure #1 in AttachmentLedgerTopic.unsubscribe()(v1);
  objc_msgSend(v10, sel_unlock);
}

void closure #1 in AttachmentLedgerTopic.unsubscribe()(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  BOOL v29;
  uint8_t *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  _BYTE v52[40];
  _BYTE v53[40];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v51 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v48 = v8;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v49 = v4;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    *(_QWORD *)&v57 = v12;
    v13 = a1;
    v50 = v1;
    *(_DWORD *)v11 = 136315138;
    swift_retain();
    v14 = AttachmentLedgerTopic.description.getter();
    v47 = v5;
    v16 = v15;
    swift_release();
    *(_QWORD *)&v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)&v57);
    v4 = v49;
    v2 = v50;
    a1 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v5 = v47;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v9, v10, "Processing request to unsubscribe topic %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v12, -1, -1);
    MEMORY[0x1A1B05CC4](v11, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  LOBYTE(v57) = 2;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_waitingForTopicCancellables);
    swift_beginAccess();
    v18 = MEMORY[0x1E0DEE9E8];
    *v17 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRelease();
    v19 = (_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_subscribingCancellables);
    swift_beginAccess();
    *v19 = v18;
    swift_bridgeObjectRelease();
    v20 = (_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_pluginTopicCancellables);
    swift_beginAccess();
    *v20 = v18;
    swift_bridgeObjectRelease();
    v21 = a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23 = v51;
    v22(v51, a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
    CurrentSubject.wrappedValue.getter();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v23, v4);
    if (*((_QWORD *)&v58 + 1))
    {
      v49 = v4;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)&v57, (uint64_t)&v54);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v57, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
      v25 = v55;
      v26 = v56;
      __swift_project_boxed_opaque_existential_1(&v54, v55);
      (*(void (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
      if (!v2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v54);
LABEL_21:
        v4 = v49;
        goto LABEL_22;
      }
      v50 = 0;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v54);
      swift_retain_n();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
      v4 = v49;
      if (v29)
      {
        LODWORD(v47) = v28;
        v48 = v27;
        v30 = (uint8_t *)swift_slowAlloc();
        v46 = swift_slowAlloc();
        v60 = v46;
        *(_DWORD *)v30 = 136315138;
        v31 = v51;
        v22(v51, v21, v4);
        CurrentSubject.wrappedValue.getter();
        v24(v31, v4);
        outlined init with copy of URL?((uint64_t)&v57, (uint64_t)&v54, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
        if (v55)
        {
          outlined init with take of TypedPayloadDecoding(&v54, (uint64_t)v53);
          outlined init with copy of AudioSessionAssertionManager((uint64_t)v53, (uint64_t)v52);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
          v32 = String.init<A>(reflecting:)();
          v34 = v33;
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
        }
        else
        {
          v34 = 0xE300000000000000;
          v32 = 7104878;
        }
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v57, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
        *(_QWORD *)&v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        v42 = v48;
        _os_log_impl(&dword_1A0DB3000, v48, (os_log_type_t)v47, "Failed to unsubscribe %s", v30, 0xCu);
        v43 = v46;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v43, -1, -1);
        MEMORY[0x1A1B05CC4](v30, -1, -1);

        goto LABEL_21;
      }

      swift_release_n();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v57, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    }
LABEL_22:
    v59 = 0;
    v57 = 0u;
    v58 = 0u;
    v44 = v51;
    v22(v51, v21, v4);
    CurrentSubject.wrappedValue.getter();
    v24(v44, v4);
    v22(v44, v21, v4);
    outlined init with copy of URL?((uint64_t)&v57, (uint64_t)v53, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    CurrentSubject.wrappedValue.setter();
    v24(v44, v4);
    AttachmentLedgerTopic.topic.didset((uint64_t)&v54);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v57, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v54, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRef) = 0;
    swift_unknownObjectRelease();
    return;
  }
  swift_retain_n();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_QWORD *)&v57 = v38;
    *(_DWORD *)v37 = 136315138;
    v50 = v2;
    swift_retain();
    v39 = AttachmentLedgerTopic.description.getter();
    v41 = v40;
    swift_release();
    *(_QWORD *)&v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v35, v36, "Invalid state, can't unsubscribe topic: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v38, -1, -1);
    MEMORY[0x1A1B05CC4](v37, -1, -1);
  }
  else
  {
    swift_release_n();
  }

}

uint64_t AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31[40];
  _QWORD v32[5];
  uint64_t v33[5];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a1, (uint64_t)v33);
  v12 = v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13(v11, v2 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v8);
  CurrentSubject.wrappedValue.getter();
  v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  v14(v11, v8);
  v13(v11, v12, v8);
  outlined init with copy of URL?((uint64_t)v33, (uint64_t)v31, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  CurrentSubject.wrappedValue.setter();
  v14(v11, v8);
  AttachmentLedgerTopic.topic.didset((uint64_t)v32);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v33, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v32, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v29 = v4;
    v20 = v19;
    v33[0] = v19;
    v28 = v7;
    *(_DWORD *)v18 = 136315138;
    swift_retain();
    v21 = AttachmentLedgerTopic.description.getter();
    v23 = v22;
    swift_release();
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v33);
    v7 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v16, v17, "Topic %s successfully subscribed and updated Topic!", v18, 0xCu);
    swift_arrayDestroy();
    v24 = v20;
    v4 = v29;
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)v2 + 408))(0, 2, MEMORY[0x1E0DEE9D8], 1.0);
  v25 = v30[3];
  v26 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v25);
  v33[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic.State, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic.State, Never>, MEMORY[0x1E0C95D90]);
  Publisher.dropFirst(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<AnyPublisher<PluginAttachmentLedgerTopic.State, Never>>, MEMORY[0x1E0C95988]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint8_t *v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PluginAttachmentLedgerTopic.State();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v51 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v51 - v16;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v54 = v12;
    v59 = v15;
    v61 = result;
    objc_msgSend(*(id *)(result + 32), sel_lock);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    v20 = __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v60 = a1;
    v57 = v21;
    v21(v17, a1, v8);
    v53 = v20;
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v52 = v4;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc();
      v56 = v6;
      v27 = v26;
      v63 = v26;
      v55 = v5;
      *(_DWORD *)v25 = 136315138;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, (uint64_t (*)(uint64_t))MEMORY[0x1E0D15018], MEMORY[0x1E0D15028]);
      v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v63);
      v5 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v17, v8);
      _os_log_impl(&dword_1A0DB3000, v22, v23, "Observed topic change to state %s", v25, 0xCu);
      swift_arrayDestroy();
      v31 = v27;
      v6 = v56;
      MEMORY[0x1A1B05CC4](v31, -1, -1);
      v32 = v25;
      v4 = v52;
      MEMORY[0x1A1B05CC4](v32, -1, -1);
    }
    else
    {
      v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v17, v8);
    }

    v33 = v59;
    v34 = v57;
    v57(v59, v60, v8);
    v35 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v33, v8);
    v36 = v61;
    if (v35 == *MEMORY[0x1E0D15000])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v33, v8);
      v37 = v58;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v58, v33, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v37, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)((uint64_t)v4);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v37, v5);
    }
    else if (v35 != *MEMORY[0x1E0D15008] && v35 != *MEMORY[0x1E0D14FF0] && v35 != *MEMORY[0x1E0D14FE8])
    {
      v56 = v6;
      v38 = v54;
      v34(v54, v60, v8);
      swift_retain_n();
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.fault.getter();
      v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        v42 = swift_slowAlloc();
        v60 = swift_slowAlloc();
        v63 = v60;
        *(_DWORD *)v42 = 136315394;
        swift_retain();
        LODWORD(v58) = v41;
        v43 = AttachmentLedgerTopic.description.getter();
        v44 = v4;
        v46 = v45;
        swift_release();
        v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v46, &v63);
        v55 = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v4 = v44;
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v42 + 12) = 2080;
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State, (uint64_t (*)(uint64_t))MEMORY[0x1E0D15018], MEMORY[0x1E0D15028]);
        v47 = dispatch thunk of CustomStringConvertible.description.getter();
        v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v63);
        v5 = v55;
        v36 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v30(v38, v8);
        _os_log_impl(&dword_1A0DB3000, v39, (os_log_type_t)v58, "Topic %s Hit unexpected state. state: %s", (uint8_t *)v42, 0x16u);
        v49 = v60;
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v49, -1, -1);
        v50 = v42;
        v33 = v59;
        MEMORY[0x1A1B05CC4](v50, -1, -1);
      }
      else
      {
        swift_release_n();
        v30(v38, v8);
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v4, 1, 1, v5);
      AttachmentLedgerTopic.processShutdown(shutdownInfo:)((uint64_t)v4);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4, &demangling cache variable for type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo?);
      v30(v33, v8);
    }
    objc_msgSend(*(id *)(v36 + 32), sel_unlock);
    return swift_release();
  }
  return result;
}

uint64_t AttachmentLedgerTopic.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_retainRefOnStart));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic_dataCryptor, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v3 = v0 + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__attachments;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AttachmentLedgerTopic.__deallocating_deinit()
{
  AttachmentLedgerTopic.deinit();
  return swift_deallocClassInstance();
}

uint64_t AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = v0[6];
  v6 = *(void **)(v2 + 32);
  objc_msgSend(v6, sel_lock);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v5;
  v8[6] = v3;
  v8[7] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  v0[11] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities35PluginAttachmentLedgerTopicProvider_p_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:), (uint64_t)v8);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  v9 = AnyCancellable.init(_:)();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v12, v9);
  swift_endAccess();
  swift_release();
  objc_msgSend(v6, sel_unlock);
  v10 = (_QWORD *)swift_task_alloc();
  v0[12] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v10 = v0;
  v10[1] = AttachmentLedgerTopic.fetchTopic(function:line:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[50] = a6;
  v7[51] = a7;
  v7[48] = a4;
  v7[49] = a5;
  v7[47] = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>);
  v7[52] = v8;
  v7[53] = *(_QWORD *)(v8 - 8);
  v7[54] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>);
  v7[55] = v9;
  v7[56] = *(_QWORD *)(v9 - 8);
  v7[57] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator);
  v7[58] = v10;
  v7[59] = *(_QWORD *)(v10 - 8);
  v7[60] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[56];
  v1 = v0[57];
  v3 = v0[54];
  v4 = v0[55];
  v6 = v0[52];
  v5 = v0[53];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[48] + OBJC_IVAR____TtC15GroupActivities21AttachmentLedgerTopic__topic, v4);
  v7 = CurrentSubject.projectedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  v0[46] = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>);
  v9 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1A1B04650](v8, v9);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  v0[61] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopicProvider?, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v10 = (_QWORD *)swift_task_alloc();
  v0[62] = v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 504) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *log;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35[2];

  if (*(_QWORD *)(v0 + 80) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 464));
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = *(_QWORD *)(v0 + 400);
      v32 = *(_QWORD *)(v0 + 408);
      v5 = *(_QWORD *)(v0 + 392);
      v6 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)v6 = 136315650;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v6 + 12) = 2048;
      *(_QWORD *)(v0 + 304) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2080;
      swift_retain();
      v7 = AttachmentLedgerTopic.description.getter();
      v9 = v8;
      swift_release();
      *(_QWORD *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v2, v3, "%s:%ld Received signal that there will be no more topics on %s", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v33, -1, -1);
      MEMORY[0x1A1B05CC4](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }

    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  v10 = (__int128 *)(v0 + 16);
  v11 = v0 + 256;
  outlined init with take of Date?(v0 + 56, v0 + 256, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of URL?(v0 + 256, v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v30 = v14;
    log = v13;
    v16 = *(_QWORD *)(v0 + 400);
    v15 = *(_QWORD *)(v0 + 408);
    v17 = *(_QWORD *)(v0 + 392);
    v18 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_QWORD *)(v0 + 312) = v29;
    *(_DWORD *)v18 = 136315906;
    swift_bridgeObjectRetain();
    v34 = (uint64_t *)(v0 + 312);
    *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, (uint64_t *)(v0 + 312));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2048;
    *(_QWORD *)(v0 + 328) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 22) = 2080;
    outlined init with copy of URL?(v0 + 216, v0 + 136, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    if (*(_QWORD *)(v0 + 160))
    {
      outlined init with take of TypedPayloadDecoding((__int128 *)(v0 + 136), v0 + 96);
      outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      v19 = String.init<A>(reflecting:)();
      v21 = v20;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
    }
    else
    {
      v21 = 0xE300000000000000;
      v19 = 7104878;
    }
    *(_QWORD *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    *(_WORD *)(v18 + 32) = 2080;
    swift_retain();
    v23 = AttachmentLedgerTopic.description.getter();
    v25 = v24;
    swift_release();
    *(_QWORD *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, log, v30, "%s:%ld Received updated topic: %s on %s", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v29, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);

    v10 = (__int128 *)(v0 + 16);
    v11 = v0 + 256;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 216, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
    swift_release_n();

  }
  outlined init with take of Date?(v11, (uint64_t)v10, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (*(_QWORD *)(v0 + 40))
  {
    v26 = *(_QWORD *)(v0 + 376);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 472) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 464));
    outlined init with take of TypedPayloadDecoding(v10, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 512) = v28;
  *v28 = v0;
  v28[1] = closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 360) = *(_QWORD *)(v0 + 504);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 504) = v0;
  return swift_task_switch();
}

void closure #2 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  JUMPOUT(0x1A1B04B54);
}

uint64_t AttachmentLedgerTopic.requestUploadToken()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = v1;
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.requestUploadToken()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    v6 = AttachmentLedgerTopic.description.getter();
    v8 = v7;
    swift_release();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Received request for uploadToken %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[12] = v9;
  *v9 = v0;
  v9[1] = AttachmentLedgerTopic.requestUploadToken();
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000014, 0x80000001A0F1A2D0, 340);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t);
  uint64_t v13;

  *(_BYTE *)(v0 + 128) = 7;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v2 + 48) + *(_QWORD *)(v2 + 48));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v3;
    *v3 = v0;
    v3[1] = AttachmentLedgerTopic.requestUploadToken();
    return v12(*(_QWORD *)(v0 + 72), v1, v2);
  }
  else
  {
    swift_retain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_retain();
      v9 = AttachmentLedgerTopic.description.getter();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Dropping request for uploadToken because state of AttachmentLedgerTopic is invalid %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 80) = __swift_project_value_buffer(v1, (uint64_t)static Log.attachmentLedgerTopic);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A0DB3000, v2, v3, "Received request to refresh uploadToken", v4, 2u);
    MEMORY[0x1A1B05CC4](v4, -1, -1);
  }

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = AttachmentLedgerTopic.refreshUploadToken();
  return AttachmentLedgerTopic.fetchTopic(function:line:)(v0 + 16, 0xD000000000000014, 0x80000001A0F1A2F0, 352);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t);
  uint64_t v13;

  *(_BYTE *)(v0 + 120) = 8;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v2 + 56) + *(_QWORD *)(v2 + 56));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v3;
    *v3 = v0;
    v3[1] = AttachmentLedgerTopic.refreshUploadToken();
    return v12(*(_QWORD *)(v0 + 64), v1, v2);
  }
  else
  {
    swift_retain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_retain();
      v9 = AttachmentLedgerTopic.description.getter();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Dropping to refresh uploadToken because state of AttachmentLedgerTopic is invalid %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.requestDownloadToken(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  v4 = v0[10];
  v5 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = v0[13];
  v9 = v0[14];
  v11 = v0[12];
  if (v8)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A0DB3000, v6, v7, "Received request for downloadToken on attachment: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v13, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(v0[14], v0[12]);
  }

  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = AttachmentLedgerTopic.requestDownloadToken(for:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD00000000000001ALL, 0x80000001A0F1A310, 364);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v13;

  *(_BYTE *)(v0 + 160) = 7;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v12 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v2 + 64) + *(_QWORD *)(v2 + 64));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = AttachmentLedgerTopic.requestDownloadToken(for:);
    return v12(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v1, v2);
  }
  else
  {
    swift_retain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_retain();
      v9 = AttachmentLedgerTopic.description.getter();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Dropping request for downloadToken because state machine of AttachmentLedgerTopic is invalid %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedgerTopic.UploadRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AttachmentLedgerTopic.UploadRequest.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.id.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 20);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AttachmentLedgerTopic.UploadRequest.key.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 20);
  v4 = type metadata accessor for SymmetricKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.key.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.assetSkeleton.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.assetSkeleton.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 24);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.assetSkeleton.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.developerMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 28);
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.developerMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 28);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.developerMetadata.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.storageLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 32);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AttachmentLedgerTopic.UploadRequest.storageLocation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 32);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.storageLocation.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.fileHash.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 36);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.fileHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 36);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.fileHash.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.refSignature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 40);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AttachmentLedgerTopic.UploadRequest.refSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) + 40);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedgerTopic.UploadRequest.refSignature.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AttachmentLedgerTopic.UploadRequest.init(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;

  v20 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a9, a1, v20);
  v21 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  v22 = a9 + v21[5];
  v23 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a2, v23);
  v24 = (_QWORD *)(a9 + v21[6]);
  *v24 = a3;
  v24[1] = a4;
  v25 = (_QWORD *)(a9 + v21[7]);
  *v25 = a5;
  v25[1] = a6;
  v26 = a9 + v21[8];
  v27 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a7, v27);
  v29 = (_QWORD *)(a9 + v21[9]);
  *v29 = a8;
  v29[1] = a10;
  v30 = (_QWORD *)(a9 + v21[10]);
  *v30 = a11;
  v30[1] = a12;
  return result;
}

uint64_t AttachmentLedgerTopic.upload(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for TaskPriority();
  v2[13] = v3;
  v2[14] = *(_QWORD *)(v3 - 8);
  v2[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  v2[20] = v4;
  v2[21] = *(_QWORD *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.upload(request:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = v0[11];
  v2 = v0[25];
  v3 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v3, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of Participant(v1, v2, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[25];
  if (v6)
  {
    v28 = v5;
    v9 = v0[20];
    v8 = v0[21];
    v11 = v0[18];
    v10 = v0[19];
    v12 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v29 = v27;
    *(_DWORD *)v12 = 136315394;
    outlined init with copy of Participant(v7, v10, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    outlined init with copy of URL?(v10, v11, &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v9) == 1)
    {
      v13 = 0xE300000000000000;
      v14 = 7104878;
    }
    else
    {
      v15 = v0[23];
      v16 = v0[24];
      outlined init with take of Participant(v0[18], v16, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      outlined init with copy of Participant(v16, v15, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      v14 = String.init<A>(reflecting:)();
      v13 = v17;
      outlined destroy of Participant(v16, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    }
    v18 = v0[25];
    v19 = v0[15];
    v26 = v0[14];
    v20 = v0[13];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[19], &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v18, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    *(_WORD *)(v12 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v19, v20);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v4, v28, "Received uploadRequest %s with priority: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v27, -1, -1);
    MEMORY[0x1A1B05CC4](v12, -1, -1);
  }
  else
  {
    outlined destroy of Participant(v0[25], type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  }

  v24 = (_QWORD *)swift_task_alloc();
  v0[27] = v24;
  *v24 = v0;
  v24[1] = AttachmentLedgerTopic.upload(request:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000010, 0x80000001A0F1A330, 387);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32[18];

  *(_BYTE *)(v0 + 248) = 9;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 160);
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v3);
    v5 = *(_QWORD *)(v2 + *(int *)(v1 + 36) + 8);
    v6 = (uint64_t *)(v2 + *(int *)(v1 + 40));
    v29 = **(int **)(v4 + 72) + *(_QWORD *)(v4 + 72);
    v7 = *v6;
    v8 = v6[1];
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v9;
    *v9 = v0;
    v9[1] = AttachmentLedgerTopic.upload(request:);
    v32[15] = v3;
    v32[16] = v4;
    v32[13] = v7;
    v32[14] = v8;
    v32[12] = v5;
    __asm { BR              X8 }
  }
  outlined init with copy of Participant(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 176), type metadata accessor for AttachmentLedgerTopic.UploadRequest);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 176);
  if (v12)
  {
    v30 = v11;
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)v18 = 136315394;
    outlined init with copy of Participant(v13, v17, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
    outlined init with copy of URL?(v17, v16, &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
    {
      v19 = 0xE300000000000000;
      v20 = 7104878;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 184);
      v22 = *(_QWORD *)(v0 + 192);
      outlined init with take of Participant(*(_QWORD *)(v0 + 128), v22, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      outlined init with copy of Participant(v22, v21, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
      v20 = String.init<A>(reflecting:)();
      v19 = v23;
      outlined destroy of Participant(v22, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    }
    v24 = *(_QWORD *)(v0 + 176);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AttachmentLedgerTopic.UploadRequest?);
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Participant(v24, type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    *(_WORD *)(v18 + 12) = 2080;
    swift_retain();
    v25 = AttachmentLedgerTopic.description.getter();
    v27 = v26;
    swift_release();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v10, v30, "Dropping request %s because state of AttachmentLedgerTopic is invalid %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    MEMORY[0x1A1B05CC4](v18, -1, -1);
  }
  else
  {
    outlined destroy of Participant(*(_QWORD *)(v0 + 176), type metadata accessor for AttachmentLedgerTopic.UploadRequest);
    swift_release_n();
  }

  lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
  swift_allocError();
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedgerTopic.updateProgress(on:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = type metadata accessor for TaskPriority();
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v5 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v3[19] = v5;
  v3[20] = *(_QWORD *)(v5 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.updateProgress(on:with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  NSObject *log;
  uint64_t v39;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = v0[23];
  v2 = v0[19];
  v3 = v0[20];
  v4 = v0[12];
  v5 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[23];
  v12 = v0[19];
  v11 = v0[20];
  if (v9)
  {
    v37 = v8;
    log = v7;
    v13 = v0[18];
    v34 = v0[17];
    v14 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v39 = v36;
    *(_DWORD *)v14 = 136315650;
    v15 = AttachmentLedgerTopic.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v14 + 12) = 2080;
    v6(v13, v10, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);
    outlined init with copy of URL?(v13, v34, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v34, 1, v12) == 1)
    {
      v17 = 0xE300000000000000;
      v18 = 7104878;
    }
    else
    {
      v19 = v0[21];
      v20 = v0[22];
      v21 = v0[19];
      v22 = v0[20];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 32))(v20, v0[17], v21);
      v6(v19, v20, v21);
      v18 = String.init<A>(reflecting:)();
      v17 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    v24 = v0[23];
    v25 = v0[19];
    v26 = v0[20];
    v27 = v0[16];
    v35 = v0[15];
    v28 = v0[14];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[18], &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    *(_WORD *)(v14 + 22) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], MEMORY[0x1E0DF0768]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v27, v28);
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v7 = log;
    _os_log_impl(&dword_1A0DB3000, log, v37, "%s Received request to update progressBlob with status: %s with priority: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v36, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  v32 = (_QWORD *)swift_task_alloc();
  v0[25] = v32;
  *v32 = v0;
  v32[1] = AttachmentLedgerTopic.updateProgress(on:with:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0xD000000000000018, 0x80000001A0F1A350, 399);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v13;

  *(_BYTE *)(v0 + 232) = 10;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v12 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v2 + 80) + *(_QWORD *)(v2 + 80));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v3;
    *v3 = v0;
    v3[1] = AttachmentLedgerTopic.updateProgress(on:with:);
    return v12(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), v1, v2);
  }
  else
  {
    swift_retain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_retain();
      v9 = AttachmentLedgerTopic.description.getter();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v5, v6, "Dropping request to update progressBlob because state of AttachmentLedgerTopic is invalid %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v8, -1, -1);
      MEMORY[0x1A1B05CC4](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedgerTopic.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(51);
  v1._object = (void *)0x80000001A0F1A370;
  v1._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A656D616E202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x203A657461747320;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  dispatch thunk of StateMachine.currentState.getter();
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t AttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for UUID();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerTopic.remove(id:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = v0[10];
  v2 = v0[15];
  v3 = v0[12];
  v4 = v0[13];
  v5 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v5, (uint64_t)static Log.attachmentLedgerTopic);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[17] = v6;
  v6(v2, v1, v3);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[15];
  v11 = v0[12];
  v12 = v0[13];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v13 = 136315138;
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Received removal request %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v19, -1, -1);
    MEMORY[0x1A1B05CC4](v13, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[18] = v16;
  v17 = (_QWORD *)swift_task_alloc();
  v0[19] = v17;
  *v17 = v0;
  v17[1] = AttachmentLedgerTopic.remove(id:);
  return AttachmentLedgerTopic.fetchTopic(function:line:)((uint64_t)(v0 + 2), 0x692865766F6D6572, 0xEB00000000293A64, 411);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20[2];

  *(_BYTE *)(v0 + 184) = 11;
  v1 = v0 + 16;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
    v19 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 88) + *(_QWORD *)(v3 + 88));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v4;
    *v4 = v0;
    v4[1] = AttachmentLedgerTopic.remove(id:);
    return v19(*(_QWORD *)(v0 + 80), v2, v3);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 136))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96));
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 96);
    if (v8)
    {
      v12 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v20[0] = v18;
      *(_DWORD *)v12 = 136315394;
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v9(v10, v11);
      *(_WORD *)(v12 + 12) = 2080;
      swift_retain();
      v15 = AttachmentLedgerTopic.description.getter();
      v17 = v16;
      swift_release();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v20);
      v1 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A0DB3000, v6, v7, "Dropping request to remove attachment %s because state of AttachmentLedgerTopic is invalid %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v18, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);
    }
    else
    {
      v9(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
      swift_release_n();
    }

    lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttachmentLedgerTopic()
{
  return AttachmentLedgerTopic.description.getter();
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

uint64_t AttachmentLedgerTopic.BootstrapTopicInfo.attachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static AttachmentLedgerTopic.Errors.== infix(_:_:)()
{
  return 1;
}

void AttachmentLedgerTopic.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int AttachmentLedgerTopic.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedgerTopic.Errors()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttachmentLedgerTopic.Errors()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedgerTopic.Errors()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL static AttachmentLedgerTopic.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AttachmentLedgerTopic.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AttachmentLedgerTopic.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for DownloadAttachmentTopic.requestDownloadToken(for:) in conformance AttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return AttachmentLedgerTopic.requestDownloadToken(for:)(a1, a2);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for Participant();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int isUniquelyReferenced_nonNull_native;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  BOOL v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  unsigned int v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;

  v70 = type metadata accessor for Participant();
  v4 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v69 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v68 = (uint64_t)&v58 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v58 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *v1;
  v17 = *(_QWORD *)(*v1 + 16);
  v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v16;
  if (!isUniquelyReferenced_nonNull_native || (v20 = *(_QWORD *)(v16 + 24) >> 1, v20 < v18))
  {
    if (v17 <= v18)
      v21 = v17 + v15;
    else
      v21 = v17;
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v16);
    *v1 = v16;
    v20 = *(_QWORD *)(v16 + 24) >> 1;
  }
  v22 = *(_QWORD *)(v16 + 16);
  v2 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = *(_QWORD *)(v4 + 72);
  v23 = v20 - v22;
  v24 = specialized Sequence._copySequenceContents(initializing:)(&v71, v16 + v2 + v17 * v22, v20 - v22, a1);
  if (v24 < v15)
    goto LABEL_15;
  if (v24)
  {
    v26 = *(_QWORD *)(v16 + 16);
    v27 = __OFADD__(v26, v24);
    v28 = v26 + v24;
    if (v27)
    {
      __break(1u);
      goto LABEL_20;
    }
    *(_QWORD *)(v16 + 16) = v28;
  }
  if (v24 != v23)
    return outlined consume of [AnyHashable : Any].Iterator._Variant();
LABEL_16:
  v16 = *(_QWORD *)(v16 + 16);
  v15 = v71;
  v25 = v73;
  v23 = v74;
  v66 = v73;
  v67 = v72;
  if (v75)
  {
    v65 = (v75 - 1) & v75;
    v30 = __clz(__rbit64(v75)) | (v74 << 6);
LABEL_18:
    outlined init with copy of Participant(*(_QWORD *)(v15 + 48) + v30 * v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v31 = v15;
    v32 = v70;
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v59(v14, 0, 1, v70);
    v33 = v23;
    goto LABEL_42;
  }
LABEL_20:
  v34 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
LABEL_40:
    v15 = v12;
    goto LABEL_41;
  }
  v35 = (unint64_t)(v25 + 64) >> 6;
  v61 = v23;
  if (v34 < v35)
  {
    v36 = *(_QWORD *)(v67 + 8 * v34);
    if (v36)
    {
LABEL_23:
      v65 = (v36 - 1) & v36;
      v30 = __clz(__rbit64(v36)) + (v34 << 6);
      v23 = v34;
      goto LABEL_18;
    }
    v37 = v23 + 2;
    v61 = v23 + 1;
    if (v23 + 2 < v35)
    {
      v12 = v15;
      v36 = *(_QWORD *)(v67 + 8 * v37);
      if (v36)
      {
LABEL_26:
        v34 = v37;
        goto LABEL_23;
      }
      v61 = v23 + 2;
      if (v23 + 3 < v35)
      {
        v36 = *(_QWORD *)(v67 + 8 * (v23 + 3));
        if (v36)
        {
          v34 = v23 + 3;
          goto LABEL_23;
        }
        v37 = v23 + 4;
        v61 = v23 + 3;
        if (v23 + 4 < v35)
        {
          v36 = *(_QWORD *)(v67 + 8 * v37);
          if (v36)
            goto LABEL_26;
          v34 = v23 + 5;
          v61 = v23 + 4;
          if (v23 + 5 < v35)
          {
            v36 = *(_QWORD *)(v67 + 8 * v34);
            if (v36)
              goto LABEL_23;
            v61 = v35 - 1;
            v38 = v23 + 6;
            while (v35 != v38)
            {
              v36 = *(_QWORD *)(v67 + 8 * v38++);
              if (v36)
              {
                v34 = v38 - 1;
                goto LABEL_23;
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
  }
LABEL_41:
  v31 = v15;
  v32 = v70;
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v59(v14, 1, 1, v70);
  v65 = 0;
  v33 = v61;
LABEL_42:
  v60 = v31;
  v61 = v33;
  v39 = v68;
  v71 = v31;
  v72 = v67;
  v73 = v66;
  v74 = v33;
  v75 = v65;
  outlined init with copy of URL?((uint64_t)v14, v68, &demangling cache variable for type metadata for Participant?);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v64(v39, 1, v32) == 1)
  {
LABEL_43:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?(v39, &demangling cache variable for type metadata for Participant?);
  }
  v40 = v69;
  while (1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v39, &demangling cache variable for type metadata for Participant?);
    v42 = *v1;
    v43 = *(_QWORD *)(*v1 + 24);
    v44 = v43 >> 1;
    if ((uint64_t)(v43 >> 1) < v16 + 1)
    {
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v16 + 1, 1, *v1);
      *v1 = v42;
      v44 = *(_QWORD *)(v42 + 24) >> 1;
    }
    outlined init with copy of URL?((uint64_t)v14, (uint64_t)v9, &demangling cache variable for type metadata for Participant?);
    if (v64((uint64_t)v9, 1, v70) == 1)
    {
      v39 = v68;
LABEL_83:
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Participant?);
      v41 = v70;
      goto LABEL_46;
    }
    v62 = v42 + v2;
    outlined init with take of Participant((uint64_t)v9, v40, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v45 = v16 < v44;
    v46 = v16 <= v44 ? v44 : v16;
    v63 = v46;
    v47 = v66;
    if (v45)
      break;
LABEL_45:
    v66 = v47;
    outlined destroy of Participant(v40, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v16 = v63;
    v41 = v70;
    v39 = v68;
LABEL_46:
    *(_QWORD *)(*v1 + 16) = v16;
    outlined init with copy of URL?((uint64_t)v14, v39, &demangling cache variable for type metadata for Participant?);
    if (v64(v39, 1, v41) == 1)
      goto LABEL_43;
  }
  while (1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for Participant?);
    result = outlined init with take of Participant(v40, v62 + v16 * v17, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    v48 = v71;
    v49 = v74;
    v66 = v73;
    v67 = v72;
    if (v75)
    {
      v65 = (v75 - 1) & v75;
      v50 = __clz(__rbit64(v75)) | (v74 << 6);
      goto LABEL_58;
    }
    v53 = v74 + 1;
    if (__OFADD__(v74, 1))
      break;
    v54 = (unint64_t)(v73 + 64) >> 6;
    v52 = v74;
    if (v53 < v54)
    {
      v55 = *(_QWORD *)(v67 + 8 * v53);
      if (v55)
        goto LABEL_62;
      v52 = v74 + 1;
      if (v74 + 2 < v54)
      {
        v55 = *(_QWORD *)(v67 + 8 * (v74 + 2));
        if (v55)
        {
          v53 = v74 + 2;
          goto LABEL_62;
        }
        v52 = v74 + 2;
        if (v74 + 3 < v54)
        {
          v55 = *(_QWORD *)(v67 + 8 * (v74 + 3));
          if (v55)
          {
            v53 = v74 + 3;
            goto LABEL_62;
          }
          v52 = v74 + 3;
          if (v74 + 4 < v54)
          {
            v55 = *(_QWORD *)(v67 + 8 * (v74 + 4));
            if (v55)
            {
              v53 = v74 + 4;
LABEL_62:
              v65 = (v55 - 1) & v55;
              v50 = __clz(__rbit64(v55)) + (v53 << 6);
              v49 = v53;
LABEL_58:
              outlined init with copy of Participant(*(_QWORD *)(v71 + 48) + v50 * v17, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
              v51 = v70;
              v59(v14, 0, 1, v70);
              v52 = v49;
              goto LABEL_79;
            }
            v53 = v74 + 5;
            v52 = v74 + 4;
            if (v74 + 5 < v54)
            {
              v55 = *(_QWORD *)(v67 + 8 * v53);
              if (v55)
                goto LABEL_62;
              v52 = v54 - 1;
              v56 = v74 + 6;
              while (v54 != v56)
              {
                v55 = *(_QWORD *)(v67 + 8 * v56++);
                if (v55)
                {
                  v53 = v56 - 1;
                  goto LABEL_62;
                }
              }
            }
          }
        }
      }
    }
    v51 = v70;
    v59(v14, 1, 1, v70);
    v65 = 0;
LABEL_79:
    ++v16;
    v60 = v48;
    v71 = v48;
    v72 = v67;
    v47 = v66;
    v73 = v66;
    v74 = v52;
    v75 = v65;
    outlined init with copy of URL?((uint64_t)v14, (uint64_t)v9, &demangling cache variable for type metadata for Participant?);
    v57 = v64((uint64_t)v9, 1, v51);
    v61 = v52;
    if (v57 == 1)
    {
      v39 = v68;
      v40 = v69;
      goto LABEL_83;
    }
    v40 = v69;
    outlined init with take of Participant((uint64_t)v9, v69, (uint64_t (*)(_QWORD))type metadata accessor for Participant);
    if (v16 == v63)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1A1B0501C](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  v4 = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x1A1B050D0](v0 + 5, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v5;
  v5(v1, v2);
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = specialized Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for PlaybackSyncerLink.receivedMessageHandler.modify in conformance GroupSession<A>.GroupSessionPlaybackSyncerLink<A1>;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1A1B05010](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1A1B05010](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.State, &type metadata for AttachmentLedgerTopic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.State, &type metadata for AttachmentLedgerTopic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.State and conformance AttachmentLedgerTopic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.Event, &unk_1E44F8CB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.Event, &unk_1E44F8CB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Event and conformance AttachmentLedgerTopic.Event);
  }
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [Attachment] and conformance [A], &demangling cache variable for type metadata for [Attachment], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for Attachment();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [GroupSession<AnyGroupActivity>] and conformance [A], &demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>], MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSession<AnyGroupActivity>]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<AnyGroupActivity>);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AttachmentLedgerTopic(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopic);
}

uint64_t sub_1A0E24FE0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(void **a1)
{
  return closure #1 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(a1);
}

void partial apply for closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(_QWORD *a1)
{
  closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(a1);
}

uint64_t outlined destroy of AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A0E25040()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)(a1, v4, v5, v6, v7, v9, v8);
}

void partial apply for closure #2 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)()
{
  closure #2 in closure #1 in AttachmentLedgerTopic.fetchTopic(function:line:)();
}

unint64_t lazy protocol witness table accessor for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.Errors, &type metadata for AttachmentLedgerTopic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AttachmentLedgerTopic.Errors, &type metadata for AttachmentLedgerTopic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedgerTopic.Errors and conformance AttachmentLedgerTopic.Errors);
  }
  return result;
}

uint64_t type metadata accessor for AttachmentLedgerTopic.UploadRequest(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopic.UploadRequest);
}

uint64_t sub_1A0E251F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
}

uint64_t sub_1A0E25218(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of URL?(a1, (uint64_t)v4, &demangling cache variable for type metadata for TopicCryptorProvider?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 352))(v4);
}

uint64_t sub_1A0E25260@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E25290(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 376);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0E252C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t sub_1A0E252F8(double *a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t, double);

  v2 = *a1;
  v3 = a1[1];
  v5 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, double))(**(_QWORD **)a2 + 408);
  swift_bridgeObjectRetain();
  return v6(*(_QWORD *)&v2, v5, v4, v3);
}

uint64_t ObjC metadata update function for AttachmentLedgerTopic()
{
  return type metadata accessor for AttachmentLedgerTopic(0);
}

void type metadata completion function for AttachmentLedgerTopic()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, &lazy cache variable for type metadata for CurrentSubject<PluginAttachmentLedgerTopicProvider?>, &demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, &lazy cache variable for type metadata for CurrentSubject<[Attachment]>, &demangling cache variable for type metadata for [Attachment]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AttachmentLedgerTopic()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.dataCryptor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.attachments.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.$attachments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.retryInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.__allocating_init(name:retainRefOnStart:pluginGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.subscribe(with:pendingAttachments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of AttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

void type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = type metadata accessor for CurrentSubject();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for AttachmentLedgerTopic.RetryInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.RetryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedgerTopic.RetryInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for AttachmentLedgerTopic.RetryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.RetryInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.RetryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.RetryInfo()
{
  return &type metadata for AttachmentLedgerTopic.RetryInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedgerTopic.UploadRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = *v14;
    v16 = v14[1];
    outlined copy of Data._Representation(*v14, v16);
    *v13 = v15;
    v13[1] = v16;
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_QWORD *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v22 = *(_QWORD *)v19;
      outlined copy of Data._Representation(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      *(_QWORD *)v18 = v22;
      *((_QWORD *)v18 + 1) = v20;
    }
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
    v27 = a3[9];
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = *v29;
    v31 = v29[1];
    outlined copy of Data._Representation(*v29, v31);
    *v28 = v30;
    v28[1] = v31;
    v32 = a3[10];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = *v34;
    v36 = v34[1];
    outlined copy of Data._Representation(*v34, v36);
    *v33 = v35;
    v33[1] = v36;
  }
  return a1;
}

uint64_t destroy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v7 = (uint64_t *)(a1 + a2[7]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    outlined consume of Data._Representation(*v7, v8);
  v9 = a1 + a2[8];
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  outlined copy of Data._Representation(*v13, v15);
  *v12 = v14;
  v12[1] = v15;
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = (uint64_t *)(a2 + v16);
  v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    outlined copy of Data._Representation(*v18, v18[1]);
    *(_QWORD *)v17 = v20;
    *(_QWORD *)(v17 + 8) = v19;
  }
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = a3[9];
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  outlined copy of Data._Representation(*v27, v29);
  *v26 = v28;
  v26[1] = v29;
  v30 = a3[10];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  v34 = v32[1];
  outlined copy of Data._Representation(*v32, v34);
  *v31 = v33;
  v31[1] = v34;
  return a1;
}

uint64_t assignWithCopy for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  outlined copy of Data._Representation(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  outlined consume of Data._Representation(v16, v17);
  v18 = a3[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *(_QWORD *)(a2 + v18 + 8);
  if (*(_QWORD *)(a1 + v18 + 8) >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      v23 = *v20;
      outlined copy of Data._Representation(v23, v21);
      v24 = *v19;
      v25 = v19[1];
      *v19 = v23;
      v19[1] = v21;
      outlined consume of Data._Representation(v24, v25);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v19);
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_8;
  }
  v22 = *v20;
  outlined copy of Data._Representation(v22, v21);
  *v19 = v22;
  v19[1] = v21;
LABEL_8:
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[9];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  v34 = v32[1];
  outlined copy of Data._Representation(*v32, v34);
  v35 = *v31;
  v36 = v31[1];
  *v31 = v33;
  v31[1] = v34;
  outlined consume of Data._Representation(v35, v36);
  v37 = a3[10];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  v42 = *v38;
  v43 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  outlined consume of Data._Representation(v42, v43);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  return a1;
}

uint64_t assignWithTake for AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  outlined consume of Data._Representation(v12, v13);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14 + 8);
  if (v17 >> 60 != 15)
  {
    v18 = v16[1];
    if (v18 >> 60 != 15)
    {
      v19 = *v15;
      *v15 = *v16;
      v15[1] = v18;
      outlined consume of Data._Representation(v19, v17);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v15);
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
LABEL_6:
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[9];
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  outlined consume of Data._Representation(v25, v26);
  v27 = a3[10];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  outlined consume of Data._Representation(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.UploadRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E25E50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 12)
  {
    v11 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 8) >> 60;
  if (((4 * (_DWORD)v13) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v13) & 0xC | (v13 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.UploadRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E25F38(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for SymmetricKey();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 12)
      {
        v16 = (_QWORD *)(a1 + a4[6]);
        *v16 = 0;
        v16[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
        return result;
      }
      v10 = type metadata accessor for URL();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for AttachmentLedgerTopic.UploadRequest()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymmetricKey();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.BootstrapTopicInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.BootstrapTopicInfo()
{
  return &type metadata for AttachmentLedgerTopic.BootstrapTopicInfo;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerTopic.Errors(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0E262FC + 4 * byte_1A0F0FF70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0E2631C + 4 * byte_1A0F0FF75[v4]))();
}

_BYTE *sub_1A0E262FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0E2631C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E26324(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E2632C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E26334(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E2633C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.Errors()
{
  return &type metadata for AttachmentLedgerTopic.Errors;
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A0E263A4 + 4 * byte_1A0F0FF7F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A0E263D8 + 4 * byte_1A0F0FF7A[v4]))();
}

uint64_t sub_1A0E263D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E263E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E263E8);
  return result;
}

uint64_t sub_1A0E263F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E263FCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A0E26400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E26408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedgerTopic.State()
{
  return &type metadata for AttachmentLedgerTopic.State;
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerTopic.Event(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1A0E26470 + 4 * byte_1A0F0FF89[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1A0E264A4 + 4 * byte_1A0F0FF84[v4]))();
}

uint64_t sub_1A0E264A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E264AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E264B4);
  return result;
}

uint64_t sub_1A0E264C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E264C8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1A0E264CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E264D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttachmentLedgerTopic.Event()
{
  return &unk_1E44F8CB0;
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(uint64_t a1)
{
  return closure #1 in AttachmentLedgerTopic.setSubscribedPluginTopic(_:)(a1);
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.topic.didset()
{
  return closure #1 in AttachmentLedgerTopic.topic.didset();
}

uint64_t sub_1A0E26548()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentLedgerTopic.processShutdown(shutdownInfo:)(v7, a1, v4, v5, v6);
}

uint64_t sub_1A0E265F0()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in AttachmentLedgerTopic.subscribe(with:pendingAttachments:)(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24));
}

uint64_t static ImageRepresentationEncodingErrors.== infix(_:_:)()
{
  return 1;
}

void ImageRepresentationEncodingErrors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ImageRepresentationEncodingErrors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t ImageRepresentation.Image.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ImageRepresentation.Image.image.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ImageRepresentation.Image.image.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t ImageRepresentation.Image.init(image:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t ImageRepresentation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v4 = type metadata accessor for UTType();
  MEMORY[0x1E0C80A78](v4);
  v23 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for DataRepresentation();
  v25 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v24 = (char *)&v23 - v12;
  v13 = *v2;
  v14 = v2[1];
  v16 = v2[2];
  v15 = v2[3];
  static UTType.data.getter();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v7;
  v17[3] = v6;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v16;
  v17[7] = v15;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v7;
  v18[3] = v6;
  v18[4] = v13;
  v18[5] = v14;
  v18[6] = v16;
  v18[7] = v15;
  swift_retain_n();
  swift_retain_n();
  DataRepresentation.init(contentType:exporting:importing:)();
  v19 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0CA8780], v8);
  v20 = (uint64_t)v24;
  static TransferRepresentationBuilder.buildExpression<A>(_:)(v11, v7, v8, v19);
  v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v11, v8);
  static TransferRepresentationBuilder.buildBlock<A>(_:)(v20, v8, v26);
  return ((uint64_t (*)(uint64_t, uint64_t))v21)(v20, v8);
}

uint64_t closure #1 in ImageRepresentation.body.getter(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = closure #1 in ImageRepresentation.body.getter;
  return v6(a1);
}

uint64_t closure #1 in ImageRepresentation.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 24) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

id closure #1 in ImageRepresentation.body.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id result;
  void *v5;
  Class isa;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDC8]), sel_initWithCGImage_, *(_QWORD *)(v0 + 24));
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
  v3 = objc_msgSend(v2, sel_workingFormat);
  result = objc_msgSend(v2, sel_workingColorSpace);
  if (result)
  {
    v5 = result;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for CIImageRepresentationOption(0);
    lazy protocol witness table accessor for type CIImageRepresentationOption and conformance CIImageRepresentationOption();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v2, sel_HEIFRepresentationOfImage_format_colorSpace_options_, v1, v3, v5, isa);

    v8 = *(void **)(v0 + 24);
    if (v7)
    {
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v11);
    }
    else
    {
      lazy protocol witness table accessor for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors();
      swift_allocError();
      swift_willThrow();

      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in ImageRepresentation.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = closure #1 in ImageRepresentation.body.getter;
  return v8(a1);
}

uint64_t closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[5] = a6;
  v8[6] = a7;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation.BufferingPolicy);
  v8[7] = v10;
  v8[8] = *(_QWORD *)(v10 - 8);
  v8[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  v8[10] = swift_task_alloc();
  v12 = type metadata accessor for ImageRepresentation.Image(0, a8, v14, v11);
  v8[11] = v12;
  v8[12] = *(_QWORD *)(v12 - 8);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in ImageRepresentation.body.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v13;

  v1 = v0[13];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v5 = v0[8];
  v6 = v0[4];
  v7 = (int *)v0[5];
  v8 = v0[3];
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v6;
  type metadata accessor for CGImageRef(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, *MEMORY[0x1E0DF07B8], v4);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v1, v2, v10);
  v13 = (int *)((char *)v7 + *v7);
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  *v11 = v0;
  v11[1] = closure #2 in ImageRepresentation.body.getter;
  return ((uint64_t (*)(_QWORD, _QWORD))v13)(v0[2], v0[13]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 104);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = v3[2];
  v9 = v3[4];
  v10 = v3[5];
  v12 = v3[6];
  v11 = v3[7];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v13;
  *v13 = v4;
  v13[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #2 in ImageRepresentation.body.getter(a1, a2, a3, v9, v10, v12, v11, v8);
}

void closure #1 in closure #2 in ImageRepresentation.body.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Class isa;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  os_log_t v21[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation.YieldResult);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_allocWithZone(MEMORY[0x1E0C9DDC8]);
  outlined copy of Data._Representation(a2, a3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v9, sel_initWithData_, isa);
  outlined consume of Data._Representation(a2, a3);

  if (v11)
  {
    v21[0] = (os_log_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
    objc_msgSend(v11, sel_extent);
    v12 = -[NSObject createCGImage:fromRect:](v21[0], sel_createCGImage_fromRect_, v11);
    if (v12)
    {
      v21[1] = v12;
      v13 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>.Continuation);
      AsyncStream.Continuation.yield(_:)();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return;
    }
    if (one-time initialization token for ledger != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.ledger);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1A0DB3000, v18, v19, "Failed to create CGImage from CIImage", v20, 2u);
      MEMORY[0x1A1B05CC4](v20, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for ledger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.ledger);
    v21[0] = (os_log_t)Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21[0], v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1A0DB3000, v21[0], v15, "Failed to create CIImage from Data", v16, 2u);
      MEMORY[0x1A1B05CC4](v16, -1, -1);
    }
  }

}

uint64_t ImageRepresentation.init(exporting:importing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors;
  if (!lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for ImageRepresentationEncodingErrors, &type metadata for ImageRepresentationEncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors;
  if (!lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for ImageRepresentationEncodingErrors, &type metadata for ImageRepresentationEncodingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageRepresentationEncodingErrors and conformance ImageRepresentationEncodingErrors);
  }
  return result;
}

uint64_t associated type witness table accessor for TransferRepresentation.Body : TransferRepresentation in ImageRepresentation<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for ImageRepresentationEncodingErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A0E273D4 + 4 * byte_1A0F102C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A0E273F4 + 4 * byte_1A0F102C5[v4]))();
}

_BYTE *sub_1A0E273D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A0E273F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E273FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E27404(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A0E2740C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A0E27414(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ImageRepresentationEncodingErrors()
{
  return &type metadata for ImageRepresentationEncodingErrors;
}

uint64_t destroy for ImageRepresentation()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ImageRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ImageRepresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ImageRepresentation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageRepresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ImageRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImageRepresentation);
}

void type metadata completion function for ImageRepresentation.Image()
{
  unint64_t v0;

  type metadata accessor for AsyncStream<CGImageRef>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for ImageRepresentation.Image(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ImageRepresentation.Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageRepresentation.Image()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E277E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ImageRepresentation.Image()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E2782C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CGImageRef>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ImageRepresentation.Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImageRepresentation.Image);
}

void type metadata accessor for AsyncStream<CGImageRef>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AsyncStream<CGImageRef>)
  {
    type metadata accessor for CGImageRef(255);
    v0 = type metadata accessor for AsyncStream();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<CGImageRef>);
  }
}

void sub_1A0E278D0()
{
  type metadata accessor for DataRepresentation();
  JUMPOUT(0x1A1B05BECLL);
}

void partial apply for closure #1 in closure #2 in ImageRepresentation.body.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #2 in ImageRepresentation.body.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type CIImageRepresentationOption and conformance CIImageRepresentationOption()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption;
  if (!lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption)
  {
    type metadata accessor for CIImageRepresentationOption(255);
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CIImageRepresentationOption, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption);
  }
  return result;
}

uint64_t SystemCoordinatorConfiguration.spatialTemplatePreferenceOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD **)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (v3)
  {
    swift_getKeyPath();
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90))(&v10);
    result = swift_release();
    v5 = v10;
    v6 = v11;
    v7 = v12;
    v8 = v13;
    v9 = v14;
  }
  else
  {
    v5 = 0;
    v8 = 0;
    v7 = xmmword_1A0F10450;
    v9 = 2;
    v6 = 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  return result;
}

uint64_t SystemCoordinatorConfiguration.supportsGroupImmersiveSpace.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
}

uint64_t SystemCoordinatorConfiguration.isObservingGroupImmersionStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
}

uint64_t SystemCoordinatorConfiguration.faceAppTowardsEachParticipant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant);
}

uint64_t SystemCoordinatorConfiguration.localParticipantRoleAssignmentRequest.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD **)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (v3)
  {
    swift_getKeyPath();
    (*(void (**)(__int128 *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90))(&v6);
    result = swift_release();
    v5 = v6;
  }
  else
  {
    v5 = 0uLL;
  }
  *a1 = v5;
  return result;
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter()
{
  return SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter((uint64_t)&unk_1A0F104B0, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:));
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplateRoles.getter()
{
  return SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter((uint64_t)&unk_1A0F104D0, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:));
}

uint64_t SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = *(_QWORD **)(v2 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  if (!v3)
    return a2(MEMORY[0x1E0DEE9D8]);
  swift_getKeyPath();
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90))(&v5);
  swift_release();
  return v5;
}

id SystemCoordinatorConfiguration.__allocating_init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)(char a1, char a2)
{
  objc_class *v2;
  _BYTE *v5;
  objc_super v7;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a2;
  v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = 0;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SystemCoordinatorConfiguration.init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)(char a1, char a2)
{
  _BYTE *v2;
  objc_super v4;

  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a2;
  v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = 0;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SystemCoordinatorConfiguration()
{
  return objc_opt_self();
}

id SystemCoordinatorConfiguration.__allocating_init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(uint64_t *a1, char a2, char a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(a1, a2, a3, a4, a5, a6, a7);
}

id SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(uint64_t *a1, char a2, char a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  _QWORD *v17;
  uint64_t v19;
  objc_super v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a7;
  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  v11 = *((char *)a1 + 9);
  v12 = *a4;
  v19 = a4[1];
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = a2;
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = a3;
  v7[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = a5;
  v13 = qword_1A0F106D8[v11];
  v14 = specialized _NativeDictionary.mapValues<A>(_:)(a6);
  v15 = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21 = v9;
  BYTE8(v21) = v10;
  v23 = 0;
  v24 = 0;
  v22 = v13;
  v25 = 2;
  v26 = v12;
  v27 = v19;
  v28 = v14;
  v29 = v30;
  v16 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>));
  v17 = specialized XPCWrapper.init(_:)(&v21);
  if (v8)
  {

    type metadata accessor for SystemCoordinatorConfiguration();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)&v15[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = v17;

    v20.receiver = v15;
    v20.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
    return objc_msgSendSuper2(&v20, sel_init);
  }
}

__n128 SystemCoordinatorConfiguration.Wrapped.init(spatialTemplatePreferenceOutput:localParticipantRoleAssignmentRequest:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  uint64_t v6;
  char v7;
  __n128 result;

  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_BYTE *)(a5 + 8) = v5;
  *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a5 + 32) = v6;
  *(_BYTE *)(a5 + 40) = v7;
  result = *a2;
  *(__n128 *)(a5 + 48) = *a2;
  *(_QWORD *)(a5 + 64) = a3;
  *(_QWORD *)(a5 + 72) = a4;
  return result;
}

uint64_t SystemCoordinatorConfiguration.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(145);
  v15 = 0;
  v16 = 0xE000000000000000;
  v1._object = (void *)0x80000001A0F1A480;
  v1._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v1);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))(&v13);
  v3._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  v4._object = (void *)0x80000001A0F1A4B0;
  String.append(_:)(v4);
  LOBYTE(v13) = *((_BYTE *)v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001A0F1A4D0;
  v6._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v6);
  LOBYTE(v13) = *((_BYTE *)v0 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
  v7._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000028;
  v8._object = (void *)0x80000001A0F1A500;
  String.append(_:)(v8);
  (*(void (**)(uint64_t *__return_ptr))((*v2 & *v0) + 0x78))(&v13);
  v9 = v13;
  v10 = v14;
  _print_unlocked<A, B>(_:_:)();
  outlined consume of SystemCoordinatorParticipantRoleRequest(v9, v10);
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v15;
}

uint64_t static SystemCoordinatorConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorConfiguration.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace);
  v4 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001BLL, 0x80000001A0F1A530);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle);
  v6 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001ELL, 0x80000001A0F1A550);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v5, v6);

  v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant);
  v8 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001DLL, 0x80000001A0F1A570);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped);
  v10 = (id)MEMORY[0x1A1B048B4](0x64657070617277, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

}

id SystemCoordinatorConfiguration.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized SystemCoordinatorConfiguration.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorConfiguration.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized SystemCoordinatorConfiguration.init(coder:)(a1);

  return v2;
}

void SystemCoordinatorConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SystemCoordinatorConfiguration.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorConfiguration);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.spatialTemplatePreferenceOutput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  return outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v3, v4, v5, v6);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.localParticipantRoleAssignmentRequest.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of SystemCoordinatorParticipantRoleRequest(v2, v3);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.defaultSpatialTemplatePreferences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinatorConfiguration.Wrapped.defaultSpatialTemplateRoles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinatorConfiguration.Wrapped.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A0E283E8 + 4 * byte_1A0F10460[a1]))(0xD00000000000001FLL, 0x80000001A0F1A6E0);
}

uint64_t sub_1A0E283E8()
{
  uint64_t v0;

  return v0 + 10;
}

unint64_t sub_1A0E28410()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  unsigned __int8 *v0;

  return SystemCoordinatorConfiguration.Wrapped.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SystemCoordinatorConfiguration.Wrapped.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SystemCoordinatorConfiguration.Wrapped.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorConfiguration.Wrapped.CodingKeys>);
  v24 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = *v1;
  v6 = *((_BYTE *)v1 + 8);
  v25 = *((_OWORD *)v1 + 1);
  v7 = v1[4];
  v8 = *((_BYTE *)v1 + 40);
  v9 = v1[6];
  v22 = v1[7];
  v23 = v9;
  v10 = v1[8];
  v20 = v1[9];
  v21 = v10;
  v11 = a1[3];
  v12 = a1;
  v13 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27 = v5;
  LOBYTE(v28) = v6;
  v29 = v25;
  v30 = v7;
  v31 = v8;
  v32 = 0;
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput();
  v14 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v3);
  v16 = v20;
  v17 = v21;
  v18 = v24;
  v27 = v23;
  v28 = v22;
  v32 = 1;
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v27 = v17;
  v32 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : SpatialTemplatePreferenceOutput]);
  lazy protocol witness table accessor for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v27 = v16;
  v32 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v3);
}

uint64_t SystemCoordinatorConfiguration.Wrapped.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24[2];
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorConfiguration.Wrapped.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v40 = 0;
  lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v29 = v33;
  v30 = a2;
  v39 = v34;
  v9 = v36;
  v10 = v37;
  v11 = v38;
  v40 = 1;
  v32 = v35;
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v35, v36, v37, v38);
  lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v27 = v11;
  v25 = v9;
  v26 = v10;
  v12 = v33;
  v13 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : SpatialTemplatePreferenceOutput]);
  v40 = 2;
  outlined copy of SystemCoordinatorParticipantRoleRequest(v12, v13);
  lazy protocol witness table accessor for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : SpatialTemplatePreferenceOutput] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  v24[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v28 = v12;
  v24[0] = v13;
  v14 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  v40 = 3;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  v31 = v14;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v32;
  v16 = v33;
  v18 = v25;
  v19 = v26;
  v20 = v27;
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v32, v25, v26, v27);
  v21 = v28;
  v22 = v24[0];
  outlined copy of SystemCoordinatorParticipantRoleRequest(v28, v24[0]);
  swift_bridgeObjectRetain();
  outlined consume of SystemCoordinatorParticipantRoleRequest(v21, v22);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v17, v18, v19, v20);
  v23 = v30;
  *v30 = v29;
  *((_BYTE *)v23 + 8) = v39;
  v23[2] = v17;
  v23[3] = v18;
  v23[4] = v19;
  *((_BYTE *)v23 + 40) = v20;
  v23[6] = v21;
  v23[7] = v22;
  v23[8] = v31;
  v23[9] = v16;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v17, v18, v19, v20);
  outlined consume of SystemCoordinatorParticipantRoleRequest(v21, v22);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemCoordinatorConfiguration.Wrapped@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SystemCoordinatorConfiguration.Wrapped.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemCoordinatorConfiguration.Wrapped(_QWORD *a1)
{
  return SystemCoordinatorConfiguration.Wrapped.encode(to:)(a1);
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.storage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.contentExtent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(_:)(uint64_t *a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  char v5;
  char *v6;
  objc_super v8;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = *((unsigned __int8 *)a1 + 9);
  v6 = &v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent];
  *(_QWORD *)v6 = v4;
  v6[8] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.init(_:)(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  char v3;
  char *v4;
  objc_super v6;

  v2 = *a1;
  *(_QWORD *)&v1[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = *((unsigned __int8 *)a1 + 9);
  v3 = *((_BYTE *)a1 + 8);
  v4 = &v1[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent];
  *(_QWORD *)v4 = v2;
  v4[8] = v3;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference();
  return objc_msgSendSuper2(&v6, sel_init);
}

void SystemCoordinatorConfiguration._SpatialTemplatePreference.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
  if (v2 >= 5)
    LOBYTE(v2) = 0;
  v3 = *(_BYTE *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v2;
}

id @objc SystemCoordinatorConfiguration.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x1A1B048B4](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t SystemCoordinatorConfiguration._SpatialTemplatePreference.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;

  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001A0F1A5C0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  if ((*(_BYTE *)(v0 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8) & 1) != 0)
  {
    v3 = 0xE300000000000000;
    v4 = 7104878;
  }
  else
  {
    v4 = String.init<A>(reflecting:)();
    v3 = v5;
  }
  v6 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x656761726F747328;
}

uint64_t static SystemCoordinatorConfiguration._SpatialTemplatePreference.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorConfiguration._SpatialTemplatePreference.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  double *v5;
  id v6;
  id v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage);
  v4 = (void *)MEMORY[0x1A1B048B4](0x656761726F7473, 0xE700000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  if ((*(_BYTE *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent + 8) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v5 = (double *)(v1 + OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent);
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *v5);
  }
  v7 = (id)MEMORY[0x1A1B048B4](0x45746E65746E6F63, 0xED0000746E657478);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);
  swift_unknownObjectRelease();

}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(a1);

  return v2;
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SystemCoordinatorConfiguration._SpatialTemplatePreference.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SystemCoordinatorConfiguration._SpatialTemplatePreference.__deallocating_deinit()
{
  return SystemCoordinatorConfiguration.__deallocating_deinit(type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference);
}

id SystemCoordinatorConfiguration.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

_QWORD *specialized XPCWrapper.init(_:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  objc_super v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = a1[3];
  v21 = a1[2];
  v22 = v4;
  v23 = a1[4];
  v5 = v23;
  v6 = a1[1];
  v19 = *a1;
  v7 = v19;
  v20 = v6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68);
  *((_OWORD *)v9 + 2) = v21;
  *((_OWORD *)v9 + 3) = v4;
  *((_OWORD *)v9 + 4) = v5;
  *(_OWORD *)v9 = v7;
  *((_OWORD *)v9 + 1) = v6;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  outlined retain of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
  v10 = v1;
  JSONEncoder.init()();
  lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped();
  v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v13 = v12;
  swift_release();
  if (v2)
  {
    outlined release of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
    v14 = *((_QWORD *)v9 + 6);
    v15 = *((_QWORD *)v9 + 7);
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), v9[40]);
    outlined consume of SystemCoordinatorParticipantRoleRequest(v14, v15);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v16 = (_QWORD *)((char *)v10 + *(_QWORD *)((*v8 & *v10) + 0x70));
    *v16 = v11;
    v16[1] = v13;

    v18.receiver = v10;
    v18.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
    v10 = objc_msgSendSuper2(&v18, sel_init);
    outlined release of SystemCoordinatorConfiguration.Wrapped((uint64_t)a1);
  }
  return v10;
}

_QWORD *specialized XPCWrapper.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  objc_super v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(_OWORD *)(a1 + 48);
  v20 = *(_OWORD *)(a1 + 32);
  v4 = v20;
  v21 = v5;
  v22 = *(_OWORD *)(a1 + 64);
  v6 = v22;
  v23 = *(_QWORD *)(a1 + 80);
  v7 = v23;
  v8 = *(_OWORD *)(a1 + 16);
  v18 = *(_OWORD *)a1;
  v19 = v8;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68);
  *(_OWORD *)v10 = v18;
  *((_OWORD *)v10 + 1) = v8;
  *((_OWORD *)v10 + 2) = v4;
  *((_OWORD *)v10 + 3) = v5;
  *((_OWORD *)v10 + 4) = v6;
  *((_QWORD *)v10 + 10) = v7;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  outlined retain of SystemCoordinatorState.ParticipantState.Seat(a1);
  v11 = v1;
  JSONEncoder.init()();
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat();
  v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v14 = v13;
  swift_release();
  if (v2)
  {
    outlined release of SystemCoordinatorState.ParticipantState.Seat(a1);

    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v15 = (_QWORD *)((char *)v11 + *(_QWORD *)((*v9 & *v11) + 0x70));
    *v15 = v12;
    v15[1] = v14;

    v17.receiver = v11;
    v17.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
    v11 = objc_msgSendSuper2(&v17, sel_init);
    outlined release of SystemCoordinatorState.ParticipantState.Seat(a1);
  }
  return v11;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreferenceOutput>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    result = v16[1];
    v18 = *(_QWORD *)(a1 + 56) + 16 * i;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    v21 = qword_1A0F106D8[*(char *)(v18 + 9)];
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v17;
    v22[1] = result;
    v23 = v3[7] + 48 * i;
    *(_QWORD *)v23 = v19;
    *(_BYTE *)(v23 + 8) = v20;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 16) = v21;
    *(_BYTE *)(v23 + 40) = 2;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = 0;
  v38 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v31 = v5;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v33 = (_QWORD *)result;
  v34 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v11 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    outlined init with copy of AudioSessionAssertionManager(*(_QWORD *)(v38 + 56) + 40 * i, (uint64_t)v35);
    v20 = v36;
    v21 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 16);
    swift_bridgeObjectRetain();
    v23 = v22(v20, v21);
    v25 = v24;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    result = (uint64_t)v33;
    *(_QWORD *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v26 = (_QWORD *)(v33[6] + 16 * i);
    *v26 = v18;
    v26[1] = v19;
    v27 = (uint64_t *)(v33[7] + 16 * i);
    *v27 = v23;
    v27[1] = v25;
    v28 = v33[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v30;
    v3 = v11;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v13 >= v32)
      return result;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v15 = v3 + 1;
    if (!v14)
    {
      v15 = v3 + 2;
      if (v3 + 2 >= v32)
        return result;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (!v14)
      {
        v15 = v3 + 3;
        if (v3 + 3 >= v32)
          return result;
        v14 = *(_QWORD *)(v31 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
    v11 = v15;
  }
  v16 = v3 + 4;
  if (v3 + 4 >= v32)
    return result;
  v14 = *(_QWORD *)(v31 + 8 * v16);
  if (v14)
  {
    v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v32)
      return result;
    v14 = *(_QWORD *)(v31 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined consume of SystemCoordinatorParticipantRoleRequest(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

id specialized SystemCoordinatorConfiguration.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  unsigned __int8 v9;
  objc_super v11;

  v3 = v1;
  v4 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001BLL, 0x80000001A0F1A530);
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_supportsGroupImmersiveSpace] = v5;
  v6 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001ELL, 0x80000001A0F1A550);
  v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_isObservingGroupImmersionStyle] = v7;
  v8 = (void *)MEMORY[0x1A1B048B4](0xD00000000000001DLL, 0x80000001A0F1A570);
  v9 = objc_msgSend(a1, sel_decodeBoolForKey_, v8);

  v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_faceAppTowardsEachParticipant] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorConfiguration.Wrapped>);
  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorConfiguration_wrapped] = NSCoder.decodeObject<A>(of:forKey:)();

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t outlined copy of SystemCoordinatorParticipantRoleRequest(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorConfiguration.Wrapped.CodingKeys, &unk_1E44F52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorConfiguration.Wrapped.CodingKeys, &unk_1E44F52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorConfiguration.Wrapped.CodingKeys, &unk_1E44F52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorConfiguration.Wrapped.CodingKeys, &unk_1E44F52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped.CodingKeys and conformance SystemCoordinatorConfiguration.Wrapped.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput, &type metadata for SpatialTemplatePreferenceOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput, &type metadata for SpatialTemplatePreferenceOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput;
  if (!lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SpatialTemplatePreferenceOutput, &type metadata for SpatialTemplatePreferenceOutput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplatePreferenceOutput and conformance SpatialTemplatePreferenceOutput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest, &type metadata for SystemCoordinatorParticipantRoleRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest, &type metadata for SystemCoordinatorParticipantRoleRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorParticipantRoleRequest, &type metadata for SystemCoordinatorParticipantRoleRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorParticipantRoleRequest and conformance SystemCoordinatorParticipantRoleRequest);
  }
  return result;
}

uint64_t outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (!a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference()
{
  return objc_opt_self();
}

uint64_t specialized SystemCoordinatorConfiguration.Wrapped.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001FLL && a2 == 0x80000001A0F1A6E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001A0F1A700
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001A0F1A730
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001A0F1A760)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

id specialized SystemCoordinatorConfiguration._SpatialTemplatePreference.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;

  v3 = v1;
  v4 = (void *)MEMORY[0x1A1B048B4](0x656761726F7473, 0xE700000000000000);
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_storage] = v5;
  type metadata accessor for NSNumber();
  v6 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, sel_doubleValue);
    v9 = v8;

    v10 = OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent;
    *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent] = v9;
  }
  else
  {
    v10 = OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent;
    *(_QWORD *)&v3[OBJC_IVAR___CPSystemCoordinatorConfigurationTemplatePreference_contentExtent] = 0;
  }
  v3[v10 + 8] = v7 == 0;

  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for SystemCoordinatorConfiguration._SpatialTemplatePreference();
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t method lookup function for SystemCoordinatorConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.spatialTemplatePreferenceOutput.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.localParticipantRoleAssignmentRequest.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.defaultSpatialTemplatePreferences.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.defaultSpatialTemplateRoles.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t destroy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  if (*(_QWORD *)(a1 + 56) >= 2uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = (_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >= 2)
  {
    *(_QWORD *)(a1 + 48) = *v8;
    *(_QWORD *)(a1 + 56) = v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v8;
  }
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v12 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v9, v10, v11, v12);
  v13 = a2[7];
  if (*(_QWORD *)(a1 + 56) >= 2uLL)
  {
    if (v13 >= 2)
    {
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_QWORD *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of (roleIdentifier: String)(a1 + 48);
    goto LABEL_6;
  }
  if (v13 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (roleIdentifier: String)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (roleIdentifier: String));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v6, v7, v8, v9);
  v10 = (_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 56) >= 2uLL)
  {
    v11 = *(_QWORD *)(a2 + 56);
    if (v11 >= 2)
    {
      *(_QWORD *)(a1 + 48) = *v10;
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of (roleIdentifier: String)(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinatorConfiguration.Wrapped()
{
  return &type metadata for SystemCoordinatorConfiguration.Wrapped;
}

uint64_t method lookup function for SystemCoordinatorConfiguration._SpatialTemplatePreference()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.spatialTemplatePreference.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorConfiguration._SpatialTemplatePreference.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorConfiguration.Wrapped.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A0E2A208 + 4 * byte_1A0F10469[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A0E2A23C + 4 * byte_1A0F10464[v4]))();
}

uint64_t sub_1A0E2A23C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E2A244(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E2A24CLL);
  return result;
}

uint64_t sub_1A0E2A258(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E2A260);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A0E2A264(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E2A26C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SystemCoordinatorConfiguration.Wrapped.CodingKeys()
{
  return &unk_1E44F52F8;
}

uint64_t outlined retain of SystemCoordinatorState.ParticipantState.Seat(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat, &type metadata for SystemCoordinatorState.ParticipantState.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorState.ParticipantState.Seat, &type metadata for SystemCoordinatorState.ParticipantState.Seat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat and conformance SystemCoordinatorState.ParticipantState.Seat);
  }
  return result;
}

uint64_t outlined release of SystemCoordinatorState.ParticipantState.Seat(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined retain of SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  outlined copy of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  outlined copy of SystemCoordinatorParticipantRoleRequest(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for SystemCoordinatorConfiguration.Wrapped, &type metadata for SystemCoordinatorConfiguration.Wrapped);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorConfiguration.Wrapped and conformance SystemCoordinatorConfiguration.Wrapped);
  }
  return result;
}

uint64_t outlined release of SystemCoordinatorConfiguration.Wrapped(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  outlined consume of SystemCoordinatorParticipantRoleRequest(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AssertionManager.updateCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t AssertionManager.assertionCount.getter()
{
  uint64_t v1;

  Lock.withLock<A>(_:)();
  return v1;
}

void partial apply for closure #1 in AssertionManager.assertionCount.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
}

void AssertionManager.assertionCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  Lock.lock()();
  v3 = *(_QWORD *)(v1 + 40);
  if (v3 == a1)
  {
    Lock.unlock()();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = a1;
    Lock.unlock()();
    if (v3)
      v4 = 1;
    else
      v4 = a1 <= 0;
    if (!v4 || (v3 >= 1 ? (v5 = a1 == 0) : (v5 = 0), v5))
      (*(void (**)(void))(v1 + 16))();
  }
  Lock.assertNotOwned()();
}

_QWORD *AssertionManager.__allocating_init(callback:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  v4[4] = Lock.init()();
  v4[5] = 0;
  v4[2] = a1;
  v4[3] = a2;
  return v4;
}

_QWORD *AssertionManager.init(callback:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  type metadata accessor for Lock();
  swift_allocObject();
  v2[4] = Lock.init()();
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t AssertionManager.subscribe()()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for AssertionManager.Assertion();
  swift_allocObject();
  v0 = swift_retain();
  v1 = specialized AssertionManager.Assertion.init(manager:)(v0);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.__allocating_init(manager:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v2;
}

uint64_t type metadata accessor for AssertionManager.Assertion()
{
  return objc_opt_self();
}

uint64_t AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.deinit()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return v0;
  }
  v2 = Strong;
  result = Lock.withLock<A>(_:)();
  v4 = v6 - 1;
  if (!__OFSUB__(v6, 1))
  {
    Lock.lock()();
    v5 = *(_QWORD *)(v2 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(_QWORD *)(v2 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 >= 1 || v5 >= 1 && v6 == 1)
        (*(void (**)(void))(v2 + 16))();
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.Assertion.__deallocating_deinit()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return swift_deallocClassInstance();
  }
  v1 = Strong;
  result = Lock.withLock<A>(_:)();
  v3 = v5 - 1;
  if (!__OFSUB__(v5, 1))
  {
    Lock.lock()();
    v4 = *(_QWORD *)(v1 + 40);
    if (v4 == v3)
    {
      Lock.unlock()();
    }
    else
    {
      *(_QWORD *)(v1 + 40) = v3;
      Lock.unlock()();
      if (!v4 && v3 >= 1 || v4 >= 1 && v5 == 1)
        (*(void (**)(void))(v1 + 16))();
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t AssertionManager.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_weakInit();
  swift_weakAssign();
  result = Lock.withLock<A>(_:)();
  v4 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    Lock.lock()();
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 > 0 || v5 >= 1 && v6 == -1)
        (*(void (**)(void))(a1 + 16))();
    }
    Lock.assertNotOwned()();
    return v1;
  }
  return result;
}

uint64_t sub_1A0E2AB04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

void sub_1A0E2AB34(uint64_t *a1)
{
  AssertionManager.assertionCount.setter(*a1);
}

uint64_t type metadata accessor for AssertionManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for AssertionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssertionManager.assertionCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AssertionManager.__allocating_init(callback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AssertionManager.subscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t method lookup function for AssertionManager.Assertion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssertionManager.Assertion.__allocating_init(manager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void closure #1 in AssertionManager.assertionCount.getterpartial apply(_QWORD *a1@<X8>)
{
  partial apply for closure #1 in AssertionManager.assertionCount.getter(a1);
}

uint64_t SecTaskRef.value<A>(_:forEntitlement:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __SecTask *v3;
  __SecTask *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __CFString *v23;
  CFTypeRef v24;
  int v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __SecTask *v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  __SecTask *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  CFErrorRef v66;
  uint64_t v67;
  uint64_t v68;
  CFErrorRef error[2];

  v4 = v3;
  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v62 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)&v55 - v11;
  v12 = type metadata accessor for Entitlement();
  v65 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)&v55 - v16;
  MEMORY[0x1E0C80A78](v15);
  v64 = (char *)&v55 - v17;
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v55 - v20;
  error[0] = 0;
  v22 = Entitlement.rawValue.getter();
  v23 = (__CFString *)MEMORY[0x1A1B048B4](v22);
  swift_bridgeObjectRelease();
  v24 = SecTaskCopyValueForEntitlement(v4, v23, error);

  v67 = (uint64_t)v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  v25 = swift_dynamicCast();
  v26 = *(_QWORD *)(a2 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v25)
  {
    v27(v21, 0, 1, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a3, v21, a2);
    v28 = a3;
    v29 = 0;
  }
  else
  {
    v27(v21, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    if (one-time initialization token for default != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.default);
    v31 = v64;
    v32 = v65;
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    v59(v64, a1, v12);
    v33 = v4;
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      v56 = v35;
      v57 = a3;
      v58 = v27;
      v36 = swift_slowAlloc();
      v55 = swift_slowAlloc();
      v68 = v55;
      *(_DWORD *)v36 = 136315650;
      v67 = (uint64_t)v33;
      type metadata accessor for SecTaskRef(0);
      v37 = v33;
      v38 = String.init<A>(reflecting:)();
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v40 = v65;
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      v41 = (uint64_t)v63;
      v42 = (void (*)(char *, char *, uint64_t))v59;
      v59(v63, (uint64_t)v31, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v12);
      v43 = v62;
      outlined init with copy of Entitlement?(v41, v62);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v43, 1, v12) == 1)
      {
        v44 = 0xE300000000000000;
        v45 = v40;
        v46 = 7104878;
      }
      else
      {
        v47 = v61;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v61, v43, v12);
        v42(v60, v47, v12);
        v45 = v40;
        v46 = String.init<A>(reflecting:)();
        v44 = v48;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v12);
      }
      outlined destroy of Entitlement?((uint64_t)v63);
      v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v44, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v64, v12);
      *(_WORD *)(v36 + 22) = 2080;
      swift_beginAccess();
      if (error[0])
      {
        v66 = error[0];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
        v49 = String.init<A>(reflecting:)();
        v51 = v50;
        a3 = v57;
        v27 = v58;
        v52 = v56;
      }
      else
      {
        v51 = 0xE300000000000000;
        a3 = v57;
        v27 = v58;
        v52 = v56;
        v49 = 7104878;
      }
      v66 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v34, v52, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v36, 0x20u);
      v53 = v55;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v53, -1, -1);
      MEMORY[0x1A1B05CC4](v36, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v12);
    }

    v28 = a3;
    v29 = 1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v27)(v28, v29, 1, a2);
}

uint64_t outlined init with copy of Entitlement?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Entitlement?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static Encodable.messageIdentifier.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_conformsToProtocol2();
  if (v2)
    v3 = v2;
  else
    v3 = 0;
  if (v2)
    v4 = a1;
  else
    v4 = 0;
  if (v4)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return _typeName(_:qualified:)();
}

uint64_t _PublisherElements.Iterator.Inner.lock.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _PublisherElements.Iterator.Inner.pending.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t _PublisherElements.Iterator.Inner.pending.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*_PublisherElements.Iterator.Inner.pending.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t _PublisherElements.Iterator.Inner.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  v5 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v1 + 4, v5);
}

uint64_t _PublisherElements.Iterator.Inner.state.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  v5 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v1 + 4, a1, v5);
  return swift_endAccess();
}

uint64_t (*_PublisherElements.Iterator.Inner.state.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t _PublisherElements.Iterator.Inner.pendingDemand.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 72);
}

uint64_t _PublisherElements.Iterator.Inner.pendingDemand.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*_PublisherElements.Iterator.Inner.pendingDemand.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t _PublisherElements.Iterator.Inner.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  _PublisherElements.Iterator.Inner.init()();
  return v0;
}

uint64_t *_PublisherElements.Iterator.Inner.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  MEMORY[0x1A1B05CC4](v0[2], -1, -1);
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + 4, v3);
  return v0;
}

uint64_t _PublisherElements.Iterator.Inner.__deallocating_deinit()
{
  _PublisherElements.Iterator.Inner.deinit();
  return swift_deallocClassInstance();
}

uint64_t _PublisherElements.Iterator.Inner.receive(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Bool IsNativeType;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  _BYTE v26[24];
  unint64_t v27;

  v4 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - v8;
  v10 = v1[2];
  os_unfair_lock_lock((os_unfair_lock_t)v10);
  swift_beginAccess();
  v12 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, v4, v3, v11);
  v25[0] = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v25[0] + 16))(v26, v1 + 4, v12);
  v13 = (uint64_t)(v1 + 3);
  if (v27 >= 2)
  {
LABEL_11:
    swift_beginAccess();
    v25[2] = *(_QWORD *)v13;
    type metadata accessor for UnsafeContinuation();
    v19 = type metadata accessor for Array();
    MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF50], v19);
    if ((Collection.isEmpty.getter() & 1) != 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v10);
    }
    else
    {
      swift_beginAccess();
      MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF58], v19);
      RangeReplaceableCollection.removeFirst()();
      swift_endAccess();
      v20 = v25[1];
      os_unfair_lock_unlock((os_unfair_lock_t)v10);
      v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v9, a1, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, AssociatedTypeWitness);
      (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v20 + 64) + 40), v9, v6);
      swift_continuation_resume();
    }
  }
  else
  {
    swift_beginAccess();
    a1 = *(_QWORD *)v13;
    swift_beginAccess();
    v14 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
    if (MEMORY[0x1A1B04A34](a1, v14))
    {
      v13 = 4;
      do
      {
        v15 = v13 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v10 = *(_QWORD *)(a1 + 8 * v13);
          v17 = __OFADD__(v15, 1);
          v18 = v13 - 3;
          if (v17)
            goto LABEL_10;
        }
        else
        {
          v10 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v17 = __OFADD__(v15, 1);
          v18 = v13 - 3;
          if (v17)
          {
LABEL_10:
            __break(1u);
            goto LABEL_11;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 64) + 40), v9, v6);
        swift_continuation_resume();
        ++v13;
      }
      while (v18 != MEMORY[0x1A1B04A34](a1, v14));
    }
    swift_bridgeObjectRelease();
  }
  v22 = v25[0];
  v23 = static Subscribers.Demand.none.getter();
  (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v26, v12);
  return v23;
}

Swift::Void __swiftcall _PublisherElements.Iterator.Inner.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__int128 *, _QWORD *, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  uint8_t *v27;
  uint8_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Bool v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  os_log_t v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Bool IsNativeType;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  uint64_t v47;
  uint8_t *v48;
  os_log_t v49;
  os_log_t v50;
  os_unfair_lock_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[40];
  __int128 v57;
  uint64_t v58;
  _QWORD v59[5];
  uint8_t *v60;
  uint64_t v61[3];
  __int128 v62;
  _QWORD v63[3];
  __int128 v64;
  __int128 v65;
  unint64_t v66;

  v1 = *(_QWORD *)(*v0 + 88);
  v53 = *(_QWORD *)(*v0 + 80);
  v54 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v46 - v5;
  v51 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v51);
  swift_beginAccess();
  v7 = v0[3];
  swift_beginAccess();
  v8 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  swift_beginAccess();
  v10 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, v53, v54, v9);
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  v11 = *(void (**)(__int128 *, _QWORD *, uint64_t))(v53 + 16);
  v11(&v65, v0 + 4, v10);
  v52 = v0 + 4;
  if (v66 >= 2)
  {
    outlined init with take of TypedPayloadDecoding(&v65, (uint64_t)v63);
    if (one-time initialization token for default != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.default);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)v63, (uint64_t)v61);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    v50 = v25;
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = (uint8_t *)swift_slowAlloc();
      v60 = v28;
      *(_DWORD *)v27 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v61, (uint64_t)v59);
      outlined init with copy of Subscription?((uint64_t)v59, (uint64_t)&v57);
      LODWORD(v49) = v26;
      v48 = v28;
      if (v58)
      {
        outlined init with take of TypedPayloadDecoding(&v57, (uint64_t)v56);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v56, (uint64_t)&v55);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Subscription);
        v47 = String.init<A>(reflecting:)();
        v30 = v29;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
      }
      else
      {
        v30 = 0xE300000000000000;
        v47 = 7104878;
      }
      outlined destroy of Subscription?((uint64_t)v59);
      v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v30, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
      v37 = v50;
      _os_log_impl(&dword_1A0DB3000, v50, (os_log_type_t)v49, "Handling cancellation by terminating upstream subscription: %s", v27, 0xCu);
      v38 = v48;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v38, -1, -1);
      MEMORY[0x1A1B05CC4](v27, -1, -1);

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);

    }
    v39 = v54;
    memset(v61, 0, sizeof(v61));
    v62 = xmmword_1A0F10770;
    v40 = v52;
    swift_beginAccess();
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v53 + 40))(v40, v61, v39);
    swift_endAccess();
    os_unfair_lock_unlock(v51);
    __swift_project_boxed_opaque_existential_1(v63, v64);
    dispatch thunk of Cancellable.cancel()();
    if (MEMORY[0x1A1B04A34](v7, v8))
    {
      v41 = 4;
      do
      {
        v42 = v41 - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v44 = *(_QWORD *)(v7 + 8 * v41);
          v35 = __OFADD__(v42, 1);
          v45 = v41 - 3;
          if (v35)
            goto LABEL_33;
        }
        else
        {
          v44 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v35 = __OFADD__(v42, 1);
          v45 = v41 - 3;
          if (v35)
          {
LABEL_33:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v4 + 32))(*(_QWORD *)(*(_QWORD *)(v44 + 64) + 40), v6, v3);
        swift_continuation_resume();
        ++v41;
      }
      while (v45 != MEMORY[0x1A1B04A34](v7, v8));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v63);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    swift_retain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    LODWORD(v50) = v14;
    if (os_log_type_enabled(v13, v14))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v61[0] = v47;
      v49 = v13;
      v15 = v48;
      v16 = v48;
      *(_DWORD *)v48 = 136315138;
      v46[1] = (uint64_t)(v15 + 4);
      v46[2] = (uint64_t)(v16 + 12);
      v17 = v54;
      v11((__int128 *)v63, v52, v54);
      v46[0] = >> prefix<A>(_:)((uint64_t)v63, v17);
      v19 = v18;
      v20 = type metadata accessor for Optional();
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v63, v20);
      v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46[0], v19, v61);
      v21 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v22 = v48;
      _os_log_impl(&dword_1A0DB3000, v49, (os_log_type_t)v50, "Terminating sequence from state: %s", v48, 0xCu);
      v23 = v47;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v23, -1, -1);
      MEMORY[0x1A1B05CC4](v22, -1, -1);

    }
    else
    {

      swift_release_n();
      v21 = v52;
    }
    memset(v63, 0, sizeof(v63));
    v64 = xmmword_1A0F10770;
    swift_beginAccess();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v53 + 40))(v21, v63, v54);
    swift_endAccess();
    os_unfair_lock_unlock(v51);
    if (MEMORY[0x1A1B04A34](v7, v8))
    {
      v31 = 4;
      do
      {
        v32 = v31 - 4;
        v33 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v33)
        {
          v34 = *(_QWORD *)(v7 + 8 * v31);
          v35 = __OFADD__(v32, 1);
          v36 = v31 - 3;
          if (v35)
            goto LABEL_20;
        }
        else
        {
          v34 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          v35 = __OFADD__(v32, 1);
          v36 = v31 - 3;
          if (v35)
          {
LABEL_20:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
        (*(void (**)(_QWORD, char *, uint64_t))(v4 + 32))(*(_QWORD *)(*(_QWORD *)(v34 + 64) + 40), v6, v3);
        swift_continuation_resume();
        ++v31;
      }
      while (v36 != MEMORY[0x1A1B04A34](v7, v8));
    }
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *, uint64_t))(v53 + 8))(&v65, v54);
  }
}

uint64_t _PublisherElements.Iterator.Inner.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance _PublisherElements<A>.Iterator.Inner(uint64_t a1)
{
  return _PublisherElements.Iterator.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance _PublisherElements<A>.Iterator.Inner()
{
  return specialized _PublisherElements.Iterator.Inner.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance _PublisherElements<A>.Iterator.Inner()
{
  _PublisherElements.Iterator.Inner.cancel()();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance _PublisherElements<A>.Iterator.Inner()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t _PublisherElements.Iterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = specialized _PublisherElements.Iterator.init(_:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

uint64_t closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance _PublisherElements<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s15GroupActivities18_PublisherElementsV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _PublisherElements.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance _PublisherElements<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t result;

  v8 = _PublisherElements.makeAsyncIterator()(a1, a2, a3, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v5, a1);
  *a5 = v8;
  return result;
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 24) = v17;
    *v17 = v8;
    v17[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:) + async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:));
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v19;
    *v19 = v8;
    v19[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
    return v20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[5] = a4;
  v6[6] = a5;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  if (a6)
  {
    swift_getObjectType();
    v7 = dispatch thunk of Actor.unownedExecutor.getter();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v6[7] = v7;
  v6[8] = v9;
  return swift_task_switch();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[10] = v2;
  *v2 = v0;
  v2[1] = back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized _PublisherElements.Iterator.Inner.receive(completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool IsNativeType;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v20[24];
  _QWORD v21[3];
  __int128 v22;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v20[-v6];
  v8 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v8);
  memset(v21, 0, sizeof(v21));
  v22 = xmmword_1A0F10770;
  swift_beginAccess();
  v10 = type metadata accessor for _PublisherElements.Iterator.Inner.State(0, v2, v1, v9);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v0 + 4, v21, v10);
  swift_endAccess();
  swift_beginAccess();
  v11 = v0[3];
  swift_beginAccess();
  v12 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v8);
  if (MEMORY[0x1A1B04A34](v11, v12))
  {
    v13 = 4;
    do
    {
      v14 = v13 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v16 = *(_QWORD *)(v11 + 8 * v13);
        v17 = __OFADD__(v14, 1);
        v18 = v13 - 3;
        if (v17)
          goto LABEL_9;
      }
      else
      {
        v16 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        v17 = __OFADD__(v14, 1);
        v18 = v13 - 3;
        if (v17)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v16 + 64) + 40), v7, v4);
      swift_continuation_resume();
      ++v13;
    }
    while (v18 != MEMORY[0x1A1B04A34](v11, v12));
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Subscription?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in _PublisherElements<A>()
{
  JUMPOUT(0x1A1B05BECLL);
}

uint64_t *initializeBufferWithCopyOfBuffer for _PublisherElements(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _PublisherElements(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for _PublisherElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for _PublisherElements(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A0E2CDA0 + 4 * byte_1A0F10780[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _PublisherElements(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t method lookup function for _PublisherElements.Iterator.Inner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _PublisherElements.Iterator.Inner.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t assignWithCopy for _PublisherElements.Iterator.Inner.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PublisherElements.Iterator.Inner.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _PublisherElements.Iterator.Inner.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for _PublisherElements.Iterator.Inner.State(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for _PublisherElements.Iterator.Inner.State(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

uint64_t dispatch thunk of AnyTransportSession.receivedDataPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyTransportSession.sendData(_:to:reliability:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of AnyTransportSession.attachmentsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyTransportSession.receivedAttachmentPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyTransportSession.uploadAttachment(id:attachment:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 40)
                                                                                     + *(_QWORD *)(a6 + 40));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AnyTransportSession.downloadAttachment(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 48) + *(_QWORD *)(a4 + 48));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AnyTransportSession.fetchMetadata(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 56) + *(_QWORD *)(a3 + 56));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.body.getter;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of AnyTransportSession.removeAttachment(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 64) + *(_QWORD *)(a3 + 64));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t PresenceSession.__allocating_init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t ObjectType;

  v8 = swift_allocObject();
  ObjectType = swift_getObjectType();
  return specialized PresenceSession.init(provider:serviceProvider:)(a1, a2, a3, v8, ObjectType, a4);
}

BOOL static PresenceSession.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t PresenceSessionInfo.Participant.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PresenceSessionInfo.Participant.handle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PresenceSessionInfo.Participant(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PresenceSessionInfo.Participant.isCurrentDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PresenceSessionInfo.Participant(0) + 24));
}

uint64_t PresenceSessionInfo.Participant.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;

  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x80000001A0F1A820;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x656C646E6168202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v5 = (uint64_t *)(v0 + *(int *)(v4 + 20));
  v6 = *v5;
  v7 = (void *)v5[1];
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000013;
  v9._object = (void *)0x80000001A0F1A840;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + *(int *)(v4 + 24)))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v4 + 24)))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

void PresenceSessionInfo.Participant.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = type metadata accessor for PresenceSessionInfo.Participant(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int PresenceSessionInfo.Participant.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = type metadata accessor for PresenceSessionInfo.Participant(0);
  String.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

uint64_t PresenceSessionInfo.Participant.init(id:handle:isCurrentDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for PresenceSessionInfo.Participant(0);
  v12 = (_QWORD *)(a5 + *(int *)(result + 20));
  *v12 = a2;
  v12[1] = a3;
  *(_BYTE *)(a5 + *(int *)(result + 24)) = a4;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresenceSessionInfo.Participant(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceSessionInfo.Participant@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PresenceSessionInfo.activeParticipants.getter()
{
  return swift_bridgeObjectRetain();
}

void one-time initialization function for default()
{
  static PresenceSessionInfo.default = MEMORY[0x1E0DEE9E8];
}

uint64_t PresenceSessionInfo.init(activeParticipants:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static PresenceSessionInfo.default.getter@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for default != -1)
    swift_once();
  *a1 = static PresenceSessionInfo.default;
  return swift_bridgeObjectRetain();
}

BOOL static PresenceSession.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PresenceSession.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int PresenceSession.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void PresenceSession.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PresenceSession.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t PresenceSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path setter for PresenceSession.state : PresenceSession(_BYTE *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(a1) = *a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, *a2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v4);
  v9[15] = (_BYTE)a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t PresenceSession.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  return v6[15];
}

uint64_t PresenceSession.$state.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__state);
}

uint64_t key path setter for PresenceSession.activeParticipants : PresenceSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *a2;
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants);
  swift_beginAccess();
  *v4 = v2;
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 392))(v5);
}

uint64_t PresenceSession.activeParticipants.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PresenceSession.members.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v6[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t PresenceSession.members.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*PresenceSession.members.modify(_QWORD *a1))()
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = malloc(*(_QWORD *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return PresenceSession.members.modify;
}

uint64_t PresenceSession.$members.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__members);
}

uint64_t PresenceSession.sessionInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo, v1);
  CurrentSubject.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t PresenceSession.sessionInfo.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo, v3);
  v9[1] = v7;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*PresenceSession.sessionInfo.modify(_QWORD *a1))()
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = malloc(*(_QWORD *)(v4 + 64));
  (*(void (**)(void))(v4 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return PresenceSession.members.modify;
}

uint64_t PresenceSession.$sessionInfo.getter()
{
  return PresenceSession.$state.getter(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>, &OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo);
}

uint64_t PresenceSession.$state.getter(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *a2, v4);
  v8 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t PresenceSession.observers.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PresenceSession.observers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_observers);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PresenceSession.observers.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t PresenceSession.provider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  swift_beginAccess();
  return MEMORY[0x1A1B05DC0](v1);
}

uint64_t PresenceSession.provider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PresenceSession.provider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1A1B05DC0](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SystemCoordinatorHost.delegate.modify;
}

uint64_t PresenceSession.serviceProvider.getter()
{
  return swift_unknownObjectRetain();
}

void *PresenceSession.connection.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PresenceSession.connection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = v4;
    dispatch thunk of XPCClient.destroyConnection()();

    v4 = *v3;
  }
  *v3 = a1;

}

void (*PresenceSession.connection.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return PresenceSession.connection.modify;
}

void PresenceSession.connection.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v2 = *(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(v6 + v5);
  if ((a2 & 1) != 0)
  {
    v8 = v3;
    if (v7)
    {
      v9 = v7;
      dispatch thunk of XPCClient.destroyConnection()();

      v10 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;

    v12 = *v4;
  }
  else
  {
    if (v7)
    {
      v11 = v7;
      dispatch thunk of XPCClient.destroyConnection()();

      v12 = *(void **)(v6 + v5);
      v6 = v2[4];
      v5 = v2[5];
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(v6 + v5) = v3;
  }

  free(v2);
}

uint64_t PresenceSession.__allocating_init(provider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, _UNKNOWN **);

  if (one-time initialization token for shared != -1)
    swift_once();
  v5 = static BackgroundGroupSessionManager.shared;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))(v2 + 352);
  swift_retain();
  return v7(a1, a2, v5, &protocol witness table for BackgroundGroupSessionManager);
}

uint64_t PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized PresenceSession.init(provider:serviceProvider:)(a1, a2, a3, v4, ObjectType, a4);
}

uint64_t closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18[3];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.presenceSession);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17 = v5;
    v18[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
    v11 = String.init<A>(reflecting:)();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A0DB3000, v7, v8, "Received updated membership list: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v10, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = result;
    v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v14;
    v16[5] = v5;
    swift_bridgeObjectRetain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:), (uint64_t)v16);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v9 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)a4 + 376) + *(_QWORD *)(*(_QWORD *)a4 + 376));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a5);
}

uint64_t PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    v6 = PresenceSession.description.getter();
    v8 = v7;
    swift_release();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s received request to join", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v9;
  *v9 = v0;
  v9[1] = PresenceSession.join();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PresenceSession.join()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void *);

  v1 = *(int **)(**(_QWORD **)(v0 + 16) + 384);
  v4 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = closure #1 in PresenceSession.join();
  return v4(&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.join());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PresenceSession.join()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[8] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  uint64_t ObjectType;
  _QWORD *v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD, uint64_t, uint64_t);
  uint64_t v31[2];

  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v1 = v0 + 64;
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 96) = __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v29 = v0;
    v5 = (uint64_t *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v31[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_retain();
    v8 = PresenceSession.description.getter();
    v10 = v9;
    swift_release();
    *v5 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v31);
    v0 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "%s Starting to process request to join", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);

  }
  else
  {

    v11 = swift_release_n();
  }
  if ((*(unsigned __int8 (**)(uint64_t))(**(_QWORD **)v1 + 160))(v11))
  {
    swift_retain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_DWORD *)v14 = 136315138;
      v31[0] = v15;
      swift_retain();
      v16 = PresenceSession.description.getter();
      v18 = v17;
      swift_release();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v19 = "%s Failed to join due to invalid state";
LABEL_12:
      _os_log_impl(&dword_1A0DB3000, v12, v13, v19, v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v15, -1, -1);
      MEMORY[0x1A1B05CC4](v14, -1, -1);

LABEL_14:
      lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
      swift_allocError();
      *v24 = 0;
      swift_willThrow();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_13;
  }
  v20 = (void *)(*(uint64_t (**)(void))(**(_QWORD **)v1 + 328))();

  if (v20)
  {
    swift_retain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v31[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_retain();
      v21 = PresenceSession.description.getter();
      v23 = v22;
      swift_release();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v19 = "%s has existing connection. Failing.";
      goto LABEL_12;
    }
LABEL_13:

    swift_release_n();
    goto LABEL_14;
  }
  v26 = *(_QWORD *)(*(_QWORD *)v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_serviceProvider + 8);
  ObjectType = swift_getObjectType();
  v30 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v26 + 48) + *(_QWORD *)(v26 + 48));
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v28;
  *v28 = v0;
  v28[1] = closure #1 in closure #1 in PresenceSession.join();
  return v30(*(_QWORD *)(v0 + 64), ObjectType, v26);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (void *)v0[14];
  v2 = v0[8];
  type metadata accessor for PresenceSessionClientConnection();
  v3 = v1;
  PresenceSessionConnectionInfo.endpoint.getter();

  v4 = XPCClient.__allocating_init(listenerEndpoint:)();
  v0[16] = v4;
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  PresenceSessionClientConnection.handleUpdatedPresentDevices.setter();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  PresenceSessionClientConnection.handleServerDisconnectClosure.setter();
  swift_release();
  v5 = swift_task_alloc();
  v0[17] = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[18] = v6;
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in PresenceSession.join();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *);
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v1 = *(void **)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(void (**)(void *))(*(_QWORD *)v5 + 336);
  v7 = v1;
  v6(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v4);
  *(_BYTE *)(v0 + 184) = 1;
  CurrentSubject.wrappedValue.setter();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v8);
  *(_QWORD *)(v0 + 160) = v9;
  v12 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v5 + 376) + *(_QWORD *)(*(_QWORD *)v5 + 376));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in PresenceSession.join();
  return v12(v9);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17[2];

  v1 = *(void **)(v0 + 120);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 120);
    v7 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)v7 = 136315394;
    swift_retain();
    v8 = PresenceSession.description.getter();
    v10 = v9;
    swift_release();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 40) = v6;
    v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s failed to create remote presence session, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v16, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 120);
    swift_release_n();

  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in PresenceSession.join()(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  id *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  v47 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v44 - v6;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v46 = result;
    if (one-time initialization token for presenceSession != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.presenceSession);
    swift_bridgeObjectRetain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v49[0] = v45;
      *(_DWORD *)v12 = 136315138;
      v44[1] = v12 + 4;
      v13 = type metadata accessor for PresenceSessionParticipant();
      v14 = swift_bridgeObjectRetain();
      v15 = MEMORY[0x1A1B049D4](v14, v13);
      v17 = v16;
      swift_bridgeObjectRelease();
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v10, v11, "Received updated participants: %s", v12, 0xCu);
      v18 = v45;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v18, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v20 = MEMORY[0x1E0DEE9D8];
    if (v19)
    {
      v49[0] = MEMORY[0x1E0DEE9D8];
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
      if (v19 < 0)
      {
        __break(1u);
        return result;
      }
      v20 = v49[0];
      if ((a1 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v19; ++i)
        {
          MEMORY[0x1A1B05010](i, a1);
          v22 = (void *)PresenceSessionParticipant.id.getter();
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v23 = PresenceSessionParticipant.handle.getter();
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v26 = v25;

          LOBYTE(v23) = PresenceSessionParticipant.isCurrentDevice.getter();
          swift_unknownObjectRelease();
          v27 = (uint64_t *)&v7[*(int *)(v2 + 20)];
          *v27 = v24;
          v27[1] = v26;
          v7[*(int *)(v2 + 24)] = v23 & 1;
          v49[0] = v20;
          v29 = *(_QWORD *)(v20 + 16);
          v28 = *(_QWORD *)(v20 + 24);
          if (v29 >= v28 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
            v20 = v49[0];
          }
          *(_QWORD *)(v20 + 16) = v29 + 1;
          outlined init with take of PresenceSessionInfo.Participant((uint64_t)v7, v20+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v29);
        }
      }
      else
      {
        v30 = (id *)(a1 + 32);
        do
        {
          v31 = *v30;
          v32 = (void *)PresenceSessionParticipant.id.getter();
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v33 = PresenceSessionParticipant.handle.getter();
          v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v36 = v35;

          LOBYTE(v33) = PresenceSessionParticipant.isCurrentDevice.getter();
          v37 = (uint64_t *)&v5[*(int *)(v2 + 20)];
          *v37 = v34;
          v37[1] = v36;
          v5[*(int *)(v2 + 24)] = v33 & 1;
          v49[0] = v20;
          v39 = *(_QWORD *)(v20 + 16);
          v38 = *(_QWORD *)(v20 + 24);
          if (v39 >= v38 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
            v20 = v49[0];
          }
          *(_QWORD *)(v20 + 16) = v39 + 1;
          outlined init with take of PresenceSessionInfo.Participant((uint64_t)v5, v20+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v39);
          ++v30;
          --v19;
        }
        while (v19);
      }
    }
    v40 = specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    v41 = v46;
    v42 = (uint64_t *)(v46 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants);
    swift_beginAccess();
    *v42 = v40;
    v43 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 392))(v43);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[8];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    if (one-time initialization token for presenceSession != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.presenceSession);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1A0DB3000, v7, v8, "Server disconnected. Invalidating session.", v9, 2u);
      MEMORY[0x1A1B05CC4](v9, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v3, v5 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v0);
    v10[7] = 2;
    CurrentSubject.wrappedValue.setter();
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(_QWORD *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join();
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_79;
  v13 = _Block_copy(aBlock);
  v14 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v12 = a2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

uint64_t PresenceSession.leave()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.presenceSession);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    v6 = PresenceSession.description.getter();
    v8 = v7;
    swift_release();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s received request to leave", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    MEMORY[0x1A1B05CC4](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v9;
  *v9 = v0;
  v9[1] = PresenceSession.leave();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in PresenceSession.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceSession.leave()()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void *);

  v1 = *(int **)(**(_QWORD **)(v0 + 16) + 384);
  v4 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = closure #1 in PresenceSession.leave();
  return v4(&async function pointer to partial apply for closure #1 in closure #1 in PresenceSession.leave());
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[3] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PresenceSession.leave()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(unsigned __int8 (**)(void))(**(_QWORD **)(v0 + 24) + 160))() == 1)
  {
    v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 328))();
    *(_QWORD *)(v0 + 56) = v1;
    if (v1)
    {
      v2 = v1;
      v3 = *(_QWORD *)(v0 + 24);
      v4 = swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v4;
      *(_QWORD *)(v4 + 16) = v2;
      *(_QWORD *)(v4 + 24) = v3;
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v5;
      *v5 = v0;
      v5[1] = closure #1 in closure #1 in PresenceSession.leave();
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
    if (one-time initialization token for presenceSession != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.presenceSession);
    swift_retain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20 = v13;
      *(_DWORD *)v12 = 136315138;
      swift_retain();
      v14 = PresenceSession.description.getter();
      v16 = v15;
      swift_release();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v10, v11, "%s couldn't leave because we don't have an XPC connection. Daemon would've torn down when the connection went away so returning success.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v13, -1, -1);
      MEMORY[0x1A1B05CC4](v12, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v18 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v19);
    *(_BYTE *)(v0 + 88) = 2;
    CurrentSubject.wrappedValue.setter();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 24) + 336))(0);
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *v7 = 0;
    swift_willThrow();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v2);
  *(_BYTE *)(v0 + 90) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 24) + 336))(0);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);

  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v3);
  *(_BYTE *)(v0 + 89) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 336))(0);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v12 = a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v6 + 32))(v9 + v8, &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  SEL *v18;
  _QWORD aBlock[6];

  v18 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = a4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = a5;
  v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v13, *v18, v16);
  _Block_release(v16);
}

uint64_t PresenceSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

uint64_t PresenceSession.updateMembers(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36[2];

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224);
  v3 = swift_bridgeObjectRetain();
  v4 = v2(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v4);
  *(_QWORD *)(v0 + 56) = v5;
  if (v5)
  {
    v6 = (void *)v5;
    specialized Sequence.compactMap<A>(_:)(*(_QWORD *)(v0 + 40));
    v8 = specialized Set.init<A>(_:)(v7);
    *(_QWORD *)(v0 + 64) = v8;
    swift_bridgeObjectRelease();
    if ((v8 & 0xC000000000000001) != 0)
      v9 = __CocoaSet.count.getter();
    else
      v9 = *(_QWORD *)(v8 + 16);
    if (v9 == *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16))
    {
      v18 = *(_QWORD *)(v0 + 48);
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v19;
      v19[2] = v6;
      v19[3] = v8;
      v19[4] = v18;
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 80) = v20;
      *v20 = v0;
      v20[1] = PresenceSession.updateMembers(_:);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      type = v24;
      v25 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v36[0] = v34;
      *(_DWORD *)v25 = 136315394;
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      swift_bridgeObjectRetain();
      v26 = Set.description.getter();
      v28 = v27;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for TUHandle();
      lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle, MEMORY[0x1E0DEFCF8]);
      swift_bridgeObjectRetain();
      v29 = Set.description.getter();
      v31 = v30;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v23, type, "Failed to convert members types: %s vs convertedMembers: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v34, -1, -1);
      MEMORY[0x1A1B05CC4](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *v33 = 1;
    swift_willThrow();

  }
  else
  {
    if (one-time initialization token for presenceSession != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.presenceSession);
    swift_retain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v36[0] = v14;
      *(_DWORD *)v13 = 136315138;
      swift_retain();
      v15 = PresenceSession.description.getter();
      v17 = v16;
      swift_release();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v11, v12, "%s Dropping update due to no connection existing", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v14, -1, -1);
      MEMORY[0x1A1B05CC4](v13, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors();
    swift_allocError();
    *v32 = 0;
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t result;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(_QWORD *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in closure #2 in PresenceSession.updateMembers(_:);
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3;
  v15 = _Block_copy(aBlock);
  v16 = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v15);

  _Block_release(v15);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a4 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v14 = a2;
  v15 = a3;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a4;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v8 + 32))(v11 + v10, &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = *a1;
  type metadata accessor for TUHandle();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle, MEMORY[0x1E0DEFCF8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
  aBlock[3] = &block_descriptor_44;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel_updateMembers_completion_, isa, v12);
  _Block_release(v12);

}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v17;

  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain();
  v3 = a1;
  swift_retain();
  v4 = a1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_retain();
    v9 = PresenceSession.description.getter();
    v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A0DB3000, v5, v6, "%s had its error handler triggered for the XPC message. Error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v8, -1, -1);
    MEMORY[0x1A1B05CC4](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v17 = (uint64_t)a1;
  v15 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t PresenceSession.invalidation(block:)(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2[5] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v2[6] = v4;
  v2[7] = *(_QWORD *)(v4 - 8);
  v2[8] = swift_task_alloc();
  v7 = (uint64_t (*)(void))((char *)a1 + *a1);
  v5 = (_QWORD *)swift_task_alloc();
  v2[9] = v5;
  *v5 = v2;
  v5[1] = PresenceSession.invalidation(block:);
  return v7();
}

uint64_t PresenceSession.invalidation(block:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *log;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24[2];

  if (one-time initialization token for presenceSession != -1)
    swift_once();
  v1 = *(void **)(v0 + 80);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.presenceSession);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)v9 = 136315394;
    swift_retain();
    type = v6;
    v10 = PresenceSession.description.getter();
    log = v5;
    v12 = v11;
    swift_release();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v8;
    v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v14 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v5 = log;
    _os_log_impl(&dword_1A0DB3000, log, type, "Invalidating %s due to invalidation block throwing error. %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v23, -1, -1);
    MEMORY[0x1A1B05CC4](v9, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v17 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 40);
  v18 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state, v18);
  *(_BYTE *)(v0 + 88) = 2;
  CurrentSubject.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(_QWORD))(*(_QWORD *)v19 + 336))(0);
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PresenceSession.updateSessionInfo()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  (*(void (**)(uint64_t *))(*(_QWORD *)v0 + 256))(&v1);
}

uint64_t PresenceSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  v5 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_workQueue;
  v10 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider);
  swift_unknownObjectRelease();

  return v0;
}

uint64_t PresenceSession.__deallocating_deinit()
{
  PresenceSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceSession@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PresenceSession.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(36);
  v1._object = (void *)0x80000001A0F1A880;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x3A6574617473202CLL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  (*(void (**)(void))(*(_QWORD *)v0 + 160))();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceSession()
{
  return PresenceSession.description.getter();
}

uint64_t specialized PresenceSession.init(provider:serviceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v49 = a3;
  v50 = a6;
  v45 = a1;
  v46 = a2;
  v7 = type metadata accessor for UUID();
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  MEMORY[0x1E0C80A78](v7);
  v44 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x1E0C80A78](v9);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<PresenceSession.State>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__state;
  LOBYTE(v52) = 0;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v24, v21);
  v26 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_activeParticipants) = MEMORY[0x1E0DEE9E8];
  v27 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__members;
  v52 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27, v20, v17);
  v28 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession__sessionInfo;
  v52 = v26;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v28, v16, v40);
  v29 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, *MEMORY[0x1E0DF07B8], v43);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_observers) = v26;
  v30 = a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_provider + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_connection) = 0;
  ObjectType = swift_getObjectType();
  v32 = v46;
  v33 = *(_QWORD *)(v46 + 8);
  v34 = v44;
  GroupSessionProvider.uuid.getter(ObjectType, v33, v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_id, v34, v48);
  swift_beginAccess();
  *(_QWORD *)(v30 + 8) = v32;
  swift_unknownObjectWeakAssign();
  v35 = (_QWORD *)(a4 + OBJC_IVAR____TtC15GroupActivities15PresenceSession_serviceProvider);
  v36 = v50;
  *v35 = v49;
  v35[1] = v36;
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 72);
  swift_unknownObjectRetain();
  v51 = v37(ObjectType, v33);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return a4;
}

uint64_t type metadata accessor for PresenceSessionInfo.Participant(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceSessionInfo.Participant);
}

uint64_t specialized static PresenceSessionInfo.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  char v10;
  char v11;

  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
    v5 = *(int *)(v4 + 20);
    v6 = *(_QWORD *)(a1 + v5);
    v7 = *(_QWORD *)(a1 + v5 + 8);
    v8 = (_QWORD *)(a2 + v5);
    v9 = v6 == *v8 && v7 == v8[1];
    if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0))
      v11 = *(_BYTE *)(a1 + *(int *)(v4 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t partial apply for closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in PresenceSession.leave()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type PresenceSession.Errors and conformance PresenceSession.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresenceSession.Errors, &type metadata for PresenceSession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresenceSession.Errors, &type metadata for PresenceSession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.Errors and conformance PresenceSession.Errors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AddressableMember, &type metadata for AddressableMember);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AddressableMember, &type metadata for AddressableMember);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AddressableMember, &type metadata for AddressableMember);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember;
  if (!lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AddressableMember, &type metadata for AddressableMember);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  }
  return result;
}

unint64_t type metadata accessor for TUHandle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUHandle;
  if (!lazy cache variable for type metadata for TUHandle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  }
  return result;
}

uint64_t partial apply for closure #2 in PresenceSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PresenceSession.updateMembers(_:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t base witness table accessor for Equatable in PresenceSessionInfo.Participant()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type PresenceSessionInfo.Participant and conformance PresenceSessionInfo.Participant, type metadata accessor for PresenceSessionInfo.Participant, (uint64_t)&protocol conformance descriptor for PresenceSessionInfo.Participant);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PresenceSessionInfo.Participant()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

unint64_t lazy protocol witness table accessor for type PresenceSession.State and conformance PresenceSession.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State;
  if (!lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for PresenceSession.State, &type metadata for PresenceSession.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSession.State and conformance PresenceSession.State);
  }
  return result;
}

uint64_t sub_1A0E32D78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E32DAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E32DE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E32E10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 224);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

_QWORD *sub_1A0E32E40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 248))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1A0E32E80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 256);
  swift_bridgeObjectRetain();
  return v3(&v5);
}

uint64_t sub_1A0E32EC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 280))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E32EF0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 288);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0E32F20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E32F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 312);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A0E32F90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E32FC0(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 336);
  v4 = *a1;
  return v3(v2);
}

ValueMetadata *type metadata accessor for PresenceSessionInfo()
{
  return &type metadata for PresenceSessionInfo;
}

_QWORD *initializeBufferWithCopyOfBuffer for PresenceSessionInfo.Participant(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PresenceSessionInfo.Participant(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceSessionInfo.Participant()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E332D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceSessionInfo.Participant()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E3335C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for PresenceSessionInfo.Participant()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PresenceSession()
{
  return type metadata accessor for PresenceSession(0);
}

uint64_t type metadata accessor for PresenceSession(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceSession);
}

void type metadata completion function for PresenceSession()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PresenceSession.State>(319, &lazy cache variable for type metadata for CurrentSubject<PresenceSession.State>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CurrentSubject<Set<AddressableMember>>();
      if (v2 <= 0x3F)
      {
        type metadata accessor for CurrentSubject<PresenceSession.State>(319, &lazy cache variable for type metadata for CurrentSubject<PresenceSessionInfo>);
        if (v3 <= 0x3F)
        {
          type metadata accessor for AsyncSerialQueue();
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for PresenceSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceSession.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PresenceSession.$state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PresenceSession.activeParticipants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PresenceSession.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PresenceSession.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PresenceSession.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PresenceSession.$members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PresenceSession.sessionInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PresenceSession.$sessionInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of PresenceSession.observers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PresenceSession.observers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of PresenceSession.observers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of PresenceSession.provider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PresenceSession.provider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of PresenceSession.provider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of PresenceSession.connection.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of PresenceSession.connection.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of PresenceSession.connection.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of PresenceSession.__allocating_init(provider:serviceProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 360) + *(_QWORD *)(*(_QWORD *)v0 + 360));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceSession.leave()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 368) + *(_QWORD *)(*(_QWORD *)v0 + 368));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of PresenceSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 376) + *(_QWORD *)(*(_QWORD *)v1 + 376));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of PresenceSession.invalidation(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 384) + *(_QWORD *)(*(_QWORD *)v2 + 384));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v8(a1, a2);
}

uint64_t dispatch thunk of PresenceSession.updateSessionInfo()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

void type metadata accessor for CurrentSubject<Set<AddressableMember>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CurrentSubject<Set<AddressableMember>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<AddressableMember>);
    v0 = type metadata accessor for CurrentSubject();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<Set<AddressableMember>>);
  }
}

void type metadata accessor for CurrentSubject<PresenceSession.State>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for CurrentSubject();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t storeEnumTagSinglePayload for PresenceSession.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E33914 + 4 * byte_1A0F109D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E33948 + 4 * asc_1A0F109D0[v4]))();
}

uint64_t sub_1A0E33948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E33950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E33958);
  return result;
}

uint64_t sub_1A0E33964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E3396CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E33970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E33978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresenceSession.Errors()
{
  return &type metadata for PresenceSession.Errors;
}

uint64_t storeEnumTagSinglePayload for PresenceSession.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A0E339E0 + 4 * byte_1A0F109DF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A0E33A14 + 4 * byte_1A0F109DA[v4]))();
}

uint64_t sub_1A0E33A14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E33A1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E33A24);
  return result;
}

uint64_t sub_1A0E33A30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E33A38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A0E33A3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E33A44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresenceSession.State()
{
  return &type metadata for PresenceSession.State;
}

uint64_t sub_1A0E33A60()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.init(provider:serviceProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v2 + 376) + *(_QWORD *)(*(_QWORD *)v2 + 376));
  v5 = (_QWORD *)swift_task_alloc();
  v4[2] = v5;
  *v5 = v4;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v7(v3);
}

uint64_t sub_1A0E33B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in PresenceSession.updateMembers(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in closure #2 in PresenceSession.updateMembers(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1A0E33C04()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.leave()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in PresenceSession.leave()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PresenceSession.leave()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in PresenceSession.leave()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PresenceSession.leave()(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(_QWORD *)(v1 + 16), (uint64_t)&unk_1E44FD728, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:), (uint64_t)&block_descriptor_58, (SEL *)&selRef_leaveWithCompletion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #2 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in PresenceSession.join()(v0);
}

uint64_t sub_1A0E33DB8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PresenceSession.join()(unint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PresenceSession.join()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in PresenceSession.join()()
{
  return closure #2 in closure #1 in closure #1 in PresenceSession.join()();
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in PresenceSession.join()(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A0E33DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1A0E33ED0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #3 in closure #1 in closure #1 in PresenceSession.join()(a1, *(_QWORD *)(v1 + 16), (uint64_t)&unk_1E44FD818, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PresenceSession.updateMembers(_:), (uint64_t)&block_descriptor_88, (SEL *)&selRef_joinWithCompletion_);
}

uint64_t objectdestroy_37Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t outlined init with take of PresenceSessionInfo.Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PresenceSessionInfo.Participant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PresenceSession.init(provider:serviceProvider:)(uint64_t *a1)
{
  return closure #1 in PresenceSession.init(provider:serviceProvider:)(a1);
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>);
  }
  return result;
}

uint64_t dispatch thunk of AnyGroupSession.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyGroupSession.initiator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGroupSession.isInvalid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGroupSession.distributionCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyGroupSession.invalidateIfWaiting()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

BOOL static CKShareGroupSessionProvider.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CKShareGroupSessionProvider.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int CKShareGroupSessionProvider.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CKShareGroupSessionProvider<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CKShareGroupSessionProvider.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CKShareGroupSessionProvider<A>.Errors()
{
  char *v0;

  return CKShareGroupSessionProvider.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CKShareGroupSessionProvider<A>.Errors(uint64_t a1)
{
  char *v1;

  CKShareGroupSessionProvider.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CKShareGroupSessionProvider<A>.Errors()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  CKShareGroupSessionProvider.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t CKShareGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
}

uint64_t CKShareGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Member?(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128), a1);
}

uint64_t CKShareGroupSessionProvider.presenceInfo.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136));
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.presenceInfo.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path setter for CKShareGroupSessionProvider.queue : <A>CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 280))(v6);
}

uint64_t CKShareGroupSessionProvider.queue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess();
  v4 = type metadata accessor for AsyncSerialQueue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CKShareGroupSessionProvider.queue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess();
  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*CKShareGroupSessionProvider.queue.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

id CKShareGroupSessionProvider.container.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_beginAccess();
  return *v1;
}

void CKShareGroupSessionProvider.container.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*CKShareGroupSessionProvider.container.modify())()
{
  swift_beginAccess();
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for CKShareGroupSessionProvider.share : <A>CKShareGroupSessionProvider<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CKShareGroupSessionProvider.share : <A>CKShareGroupSessionProvider<A>(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 328))(*a1);
}

uint64_t CKShareGroupSessionProvider.share.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A0E34624@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E34654(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 328))(*a1);
}

uint64_t sub_1A0E34684()
{
  return 16;
}

__n128 sub_1A0E34690(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t CKShareGroupSessionProvider.share.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*CKShareGroupSessionProvider.share.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t key path setter for CKShareGroupSessionProvider.$share : <A>CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 352))(v6);
}

uint64_t CKShareGroupSessionProvider.$share.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t CKShareGroupSessionProvider.$share.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*CKShareGroupSessionProvider.$share.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  CKShareGroupSessionProvider.$share.getter();
  return CKShareGroupSessionProvider.$share.modify;
}

void CKShareGroupSessionProvider.$share.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    CKShareGroupSessionProvider.$share.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CKShareGroupSessionProvider.$share.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CKShareGroupSessionProvider.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CKShareGroupSessionProvider.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 168));
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*CKShareGroupSessionProvider.cancellables.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)(void *a1, char *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, a2, a3, a4, a5);
  return v10;
}

_QWORD *CKShareGroupSessionProvider.init(id:activity:share:container:)(void *a1, char *a2, uint64_t a3, void *a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  void (*v70)(uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  id v81;
  id v82;
  char *v83;
  id v84;
  uint64_t v85[5];
  uint64_t v86;

  v6 = v5;
  v81 = a5;
  v82 = a1;
  v83 = a2;
  v84 = a4;
  v8 = *v5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  v16 = *(_QWORD *)(*v5 + 136);
  if (one-time initialization token for default != -1)
    swift_once();
  v85[0] = static PresenceSessionInfo.default;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(_QWORD *)((char *)v5 + v16) = CurrentValueSubject.init(_:)();
  static TaskPriority.userInitiated.getter();
  v17 = type metadata accessor for TaskPriority();
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v79((uint64_t)v15, 0, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DF07B8], v9);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 + 168)) = MEMORY[0x1E0DEE9E8];
  v18 = v83;
  v5[2] = v82;
  v5[3] = v18;
  v19 = *(_QWORD *)(v8 + 80);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(void))(v20 + 16);
  v83 = (char *)v5 + *(_QWORD *)(*v5 + 120);
  v21();
  v22 = a3;
  v23 = v84;
  v24 = objc_msgSend(v84, sel_containerID);

  v82 = v24;
  v80 = v8;
  if (!v24)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Log.ckShareGroupSessionProvider);
    v45 = v23;
    v46 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v58))
    {
      v77 = v19;
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      v76 = v20;
      v61 = v60;
      v85[0] = v60;
      v78 = v22;
      *(_DWORD *)v59 = 136315138;
      v86 = (uint64_t)v45;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v62 = v45;
      v63 = String.init<A>(reflecting:)();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v85);
      v22 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v19 = v77;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v46, v58, "Share %s doesn't have a containerID", v59, 0xCu);
      swift_arrayDestroy();
      v65 = v61;
      v20 = v76;
      MEMORY[0x1A1B05CC4](v65, -1, -1);
      v56 = v59;
      goto LABEL_17;
    }
LABEL_18:

    goto LABEL_19;
  }
  v75 = v15;
  v85[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v6[5] = CurrentValueSubject.init(_:)();
  v25 = objc_msgSend(v23, sel_currentUserParticipant);
  if (v25)
  {
    v26 = v25;
    v27 = CKShareParticipant.handle.getter();

    if (v27)
    {
      v28 = v23;
      v76 = v20;
      v77 = v19;
      v78 = v22;
      v29 = objc_msgSend(v27, sel_normalizedValue);
      if (!v29)
        v29 = objc_msgSend(v27, sel_value);
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      v85[3] = (uint64_t)&type metadata for AddressableMember;
      v85[4] = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      v85[0] = v30;
      v85[1] = v32;
      outlined init with take of Member?((uint64_t)v85, (uint64_t)v6 + *(_QWORD *)(*v6 + 128));
      v33 = v81;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 152)) = v81;
      swift_beginAccess();
      v34 = v28;
      v83 = (char *)v33;
      v86 = (uint64_t)v34;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      Published.init(initialValue:)();
      swift_endAccess();
      v84 = v27;
      v35 = (uint64_t)v75;
      v36 = v79;
      v79((uint64_t)v75, 1, 1, v17);
      v37 = (_QWORD *)swift_allocObject();
      v37[2] = 0;
      v37[3] = 0;
      v37[4] = v6;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v37);
      swift_beginAccess();
      type metadata accessor for AnyCancellable();
      swift_allocObject();
      swift_retain();
      v38 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v86, v38);
      swift_release();
      swift_endAccess();
      swift_release();
      v36(v35, 1, 1, v17);
      v39 = (_QWORD *)swift_allocObject();
      v39[2] = 0;
      v39[3] = 0;
      v39[4] = v6;
      v39[5] = v34;
      v40 = v83;
      v39[6] = v83;
      v41 = v34;
      v42 = v40;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v39);
      swift_beginAccess();
      swift_allocObject();
      swift_retain();
      v43 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v86, v43);
      swift_release();
      swift_endAccess();

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v78, v77);
      return v6;
    }
  }
  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Log.ckShareGroupSessionProvider);
  v45 = v23;
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v46, v47))
    goto LABEL_18;
  v78 = v22;
  v48 = swift_slowAlloc();
  v77 = v19;
  v49 = (uint8_t *)v48;
  v50 = swift_slowAlloc();
  v76 = v20;
  v51 = v50;
  v85[0] = v50;
  *(_DWORD *)v49 = 136315138;
  v86 = (uint64_t)v45;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  v52 = v45;
  v53 = String.init<A>(reflecting:)();
  v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v22 = v78;
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1A0DB3000, v46, v47, "Share %s doesn't have a currentUserParticipant", v49, 0xCu);
  swift_arrayDestroy();
  v55 = v51;
  v20 = v76;
  MEMORY[0x1A1B05CC4](v55, -1, -1);
  v56 = v49;
  v19 = v77;
LABEL_17:
  MEMORY[0x1A1B05CC4](v56, -1, -1);
LABEL_19:

  v66 = *(_QWORD *)(v80 + 88);
  v68 = type metadata accessor for CKShareGroupSessionProvider.Errors(0, v19, v66, v67);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors, v68);
  swift_allocError();
  *v69 = 0;
  swift_willThrow();

  v70 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v70(v22, v19);
  swift_bridgeObjectRelease();
  swift_release();
  if (v82)
    swift_release();
  v70((uint64_t)v83, v19);
  swift_release();
  v71 = (char *)v6 + *(_QWORD *)(*v6 + 144);
  v72 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v71, v72);
  swift_bridgeObjectRelease();
  type metadata accessor for CKShareGroupSessionProvider(0, v19, v66, v73);
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t CKShare.members.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **p_name;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = objc_msgSend(v0, sel_participants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = MEMORY[0x1E0DEE9D8];
  v38 = MEMORY[0x1E0DEE9D8];
  if (v2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = v2 & 0xC000000000000001;
    v5 = 4;
    p_name = &SystemCoordinator.name;
    v36 = v2;
    while (1)
    {
      v7 = v3 ? (id)MEMORY[0x1A1B05010](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v8 = v7;
      v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if (objc_msgSend(v7, p_name[480]) == (id)2)
      {
        v10 = CKShareParticipant.handle.getter();

        if (v10)
        {
          MEMORY[0x1A1B049B0]();
          if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v11 = type metadata accessor for Logger();
        __swift_project_value_buffer(v11, (uint64_t)static Log.default);
        v12 = v8;
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc();
          v16 = swift_slowAlloc();
          v37 = v16;
          *(_DWORD *)v15 = 136315138;
          v17 = v12;
          v18 = String.init<A>(reflecting:)();
          *(_QWORD *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v37);

          v2 = v36;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A0DB3000, v13, v14, "Skipping participant due to status: %s", (uint8_t *)v15, 0xCu);
          swift_arrayDestroy();
          v20 = v16;
          p_name = (char **)(&SystemCoordinator + 24);
          MEMORY[0x1A1B05CC4](v20, -1, -1);
          MEMORY[0x1A1B05CC4](v15, -1, -1);

        }
        else
        {

        }
      }
      ++v5;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        v21 = v38;
        v3 = MEMORY[0x1E0DEE9D8];
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  swift_bridgeObjectRelease();
  if (!(v21 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_25;
LABEL_37:
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
LABEL_38:
    v35 = specialized Set.init<A>(_:)(v25);
    swift_bridgeObjectRelease();
    return v35;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_37;
LABEL_25:
  v38 = v3;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v25 = v38;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
        v26 = (id)MEMORY[0x1A1B05010](v24, v21);
      else
        v26 = *(id *)(v21 + 8 * v24 + 32);
      v27 = v26;
      v28 = objc_msgSend(v26, sel_normalizedValue);
      if (!v28)
        v28 = objc_msgSend(v27, sel_value);
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

      v38 = v25;
      v33 = *(_QWORD *)(v25 + 16);
      v32 = *(_QWORD *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v25 = v38;
      }
      ++v24;
      *(_QWORD *)(v25 + 16) = v33 + 1;
      v34 = v25 + 16 * v33;
      *(_QWORD *)(v34 + 32) = v29;
      *(_QWORD *)(v34 + 40) = v31;
    }
    while (v22 != v24);
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

id CKShareParticipant.handle.getter()
{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37[2];
  uint64_t v38;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_userIdentity);
  v3 = objc_msgSend(v2, sel_lookupInfo);

  if (!v3)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v8 = v1;
    v3 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v9))
    {

      return 0;
    }
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v37[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v38 = (uint64_t)v8;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
    v12 = v8;
    v13 = String.init<A>(reflecting:)();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v9, "Missing user identity for participant: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v11, -1, -1);
    MEMORY[0x1A1B05CC4](v10, -1, -1);
LABEL_22:

    return 0;
  }
  v4 = -[NSObject emailAddress](v3, sel_emailAddress);
  if (!v4)
  {
    v15 = -[NSObject phoneNumber](v3, sel_phoneNumber);
    if (!v15)
      goto LABEL_17;
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;
    v20 = PNCopyBestGuessCountryCodeForNumber();
    if (v20)
    {
      v21 = (void *)v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      v37[0] = 43;
      v37[1] = 0xE100000000000000;
      v22._countAndFlagsBits = v17;
      v22._object = v19;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23 = (void *)MEMORY[0x1A1B048B4](43, 0xE100000000000000);
      swift_bridgeObjectRelease();
      v21 = (void *)PNCopyBestGuessCountryCodeForNumber();

      if (!v21)
        goto LABEL_15;
    }
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    v21 = (void *)MEMORY[0x1A1B048B4](v24, v26);
    swift_bridgeObjectRelease();
LABEL_15:
    v6 = objc_msgSend((id)objc_opt_self(), sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v16, v21);

    if (v6)
      goto LABEL_16;
LABEL_17:
    if (one-time initialization token for default != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.default);
    v28 = v1;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v38 = (uint64_t)v28;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      v33 = v28;
      v34 = String.init<A>(reflecting:)();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v29, v30, "Missing handle for participant: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v32, -1, -1);
      MEMORY[0x1A1B05CC4](v31, -1, -1);

    }
    else
    {

    }
    goto LABEL_22;
  }
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(), sel_normalizedEmailAddressHandleForValue_, v4);

  if (!v6)
    goto LABEL_17;
LABEL_16:

  return v6;
}

uint64_t closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[7] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>);
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v4[11] = v6;
  v4[12] = *(_QWORD *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  v4[14] = v7;
  v4[15] = *(_QWORD *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  (*(void (**)(void))(**(_QWORD **)(v0 + 56) + 344))();
  v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<CKShare>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CKShare>.Publisher, MEMORY[0x1E0C96190]);
  MEMORY[0x1A1B04650](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  *(_QWORD *)(v0 + 136) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator, MEMORY[0x1E0C95E78]);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v8;
  *v8 = v0;
  v8[1] = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27;

  v1 = *(void **)(v0 + 152);
  if (v1)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain_n();
    v3 = v1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 56);
    if (v6)
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v27 = v9;
      *(_DWORD *)v8 = 136315394;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 408))(v9);
      v12 = v11;
      swift_release();
      *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v8 + 12) = 2080;
      *(_QWORD *)(v0 + 48) = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v13 = v3;
      v14 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v27);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Saw an updated CKShare: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v9, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    (*(void (**)(void))(**(_QWORD **)(v0 + 56) + 224))();
    *(_QWORD *)(v0 + 40) = CKShare.members.getter();
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v25;
    *v25 = v0;
    v25[1] = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    if (one-time initialization token for ckShareGroupSessionProvider != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v0 + 56);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v27 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 408))(v22);
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "%s Stopped listening for updated CKShares", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

uint64_t closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  v7 = type metadata accessor for AsyncSerialQueue();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>);
  v6[18] = v8;
  v6[19] = *(_QWORD *)(v8 - 8);
  v6[20] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Iterator);
  v6[21] = v9;
  v6[22] = *(_QWORD *)(v9 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v2 = (void *)v0[13];
  v1 = (void *)v0[14];
  v3 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = (void *)v0[13];
  v12 = (void *)v0[14];
  v13 = v0[12];
  if (v10)
  {
    v32 = (void *)v0[14];
    type = v9;
    v14 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35 = v34;
    *(_DWORD *)v14 = 136315650;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 408))();
    v17 = v16;
    swift_release();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v0[8] = v11;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
    v18 = v11;
    v19 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2080;
    v0[10] = v32;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainer);
    v21 = v32;
    v22 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v8, type, "%s Starting task to listen for CKShare updates on share: %s, container: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v34, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v25 = v0[19];
  v24 = v0[20];
  v26 = v0[18];
  v27 = (void *)v0[13];
  v28 = (void *)v0[14];
  type metadata accessor for ShareChangeObserver();
  swift_allocObject();
  v29 = ShareChangeObserver.init(share:container:)(v27, v28);
  v0[25] = v29;
  (*(void (**)(void))(*v29 + 128))();
  MEMORY[0x1A1B04BE4](v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  v30 = (_QWORD *)swift_task_alloc();
  v0[26] = v30;
  *v30 = v0;
  v30[1] = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v1;
    swift_retain_n();
    v3 = v2;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 96);
    if (v6)
    {
      v8 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29 = v28;
      *(_DWORD *)v8 = 136315650;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 408))();
      v11 = v10;
      swift_release();
      *(_QWORD *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v29);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      *(_QWORD *)(v0 + 40) = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      v12 = v3;
      v13 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v29);

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 22) = 2080;
      v15 = objc_msgSend(v12, sel_participants);
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)(v0 + 48) = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CKShareParticipant]);
      v17 = String.init<A>(reflecting:)();
      *(_QWORD *)(v8 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Saw share %s updated with participants: %s", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v28, -1, -1);
      MEMORY[0x1A1B05CC4](v8, -1, -1);

    }
    else
    {

      v19 = swift_release_n();
    }
    v22 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 272))(v19);
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 24) = v3;
    swift_retain();
    v26 = v3;
    AsyncSerialQueue.perform(_:)();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v27;
    *v27 = v0;
    v27[1] = closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  v1 = *(void **)(v0 + 24);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 408))();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Share ended", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);
    swift_release();

  }
  else
  {
    swift_release();

    swift_release();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 400))(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CKShareGroupSessionProvider.updateShare(with:)(CKShare with)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char **p_name;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  objc_class *v19;
  objc_class *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;

  v2 = v1;
  v4 = *v1;
  p_name = &SystemCoordinator.name;
  v6 = -[objc_class recordChangeTag](with.super.super.isa, sel_recordChangeTag);
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11 = (void *)(*(uint64_t (**)(void))(*v2 + 320))();
  v12 = objc_msgSend(v11, sel_recordChangeTag);

  if (!v12)
    goto LABEL_10;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  if (v13 == v8 && v15 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    p_name = &SystemCoordinator.name;
    goto LABEL_11;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  p_name = (char **)(&SystemCoordinator + 24);
  if ((v17 & 1) != 0)
  {
    (*(void (**)(Class))(*v2 + 328))(with.super.super.isa);
    return;
  }
LABEL_11:
  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.ckShareGroupSessionProvider);
  v19 = with.super.super.isa;
  swift_retain_n();
  v20 = v19;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v38 = v24;
    *(_DWORD *)v23 = 136315394;
    v25 = objc_msgSend(v20, p_name[487]);
    if (v25)
    {
      v26 = v25;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v27 = String.init<A>(reflecting:)();
      v29 = v28;
    }
    else
    {
      v29 = 0xE300000000000000;
      v27 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v23 + 12) = 2080;
    v31 = (void *)(*(uint64_t (**)(void))(*v2 + 320))();
    v32 = objc_msgSend(v31, sel_recordChangeTag);

    if (v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = String.init<A>(reflecting:)();
      v35 = v34;
    }
    else
    {
      v35 = 0xE300000000000000;
      v33 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A0DB3000, v21, v22, "Dropping share because recordChangeTag %s <= %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v24, -1, -1);
    MEMORY[0x1A1B05CC4](v23, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v36 = type metadata accessor for CKShareGroupSessionProvider.Errors(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v30);
  MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors, v36);
  swift_allocError();
  *v37 = 0;
  swift_willThrow();
}

uint64_t *CKShareGroupSessionProvider.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = *v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = (*(uint64_t (**)(void))(*v0 + 408))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s Deinit'd", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 120));
  outlined destroy of Member?((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  swift_release();
  v10 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v11 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);

  v12 = (uint64_t)v1 + *(_QWORD *)(*v1 + 160);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CKShareGroupSessionProvider.__deallocating_deinit()
{
  CKShareGroupSessionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t CKShareGroupSessionProvider.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(49);
  v1._object = (void *)0x80000001A0F1A930;
  v1._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 408))();
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 176))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[3] = v0;
  v2 = type metadata accessor for AsyncSerialQueue();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[3];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 408))();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A0DB3000, v2, v3, "%s Received request to force fetch membership.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v7, -1, -1);
    MEMORY[0x1A1B05CC4](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  (*(void (**)(void))(*(_QWORD *)v0[3] + 272))();
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v0[7] = v10;
  *v10 = v0;
  v10[1] = CKShareGroupSessionProvider.fetchMembershipUpdate();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a2;
  *(_QWORD *)(v2 + 136) = *a2;
  return swift_task_switch();
}

uint64_t closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v3;
  id v4;
  uint64_t (*v5)(void);
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0[16];
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 296);
  v3 = (void *)v2();
  v4 = objc_msgSend(v3, sel_sharedCloudDatabase);

  v5 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 320);
  v6 = (void *)v5();
  v7 = objc_msgSend(v6, sel_recordID);

  v8 = objc_msgSend(v7, sel_zoneID);
  v9 = objc_msgSend(v8, sel_ownerName);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    v16 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      goto LABEL_9;
  }
  v17 = (void *)((uint64_t (*)(uint64_t))v2)(v16);
  v18 = objc_msgSend(v17, sel_privateCloudDatabase);

  v4 = v18;
LABEL_9:
  v0[18] = v4;
  v19 = (void *)((uint64_t (*)(uint64_t))v5)(v16);
  v20 = objc_msgSend(v19, sel_recordID);
  v0[19] = v20;

  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate();
  v21 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v22 = v0 + 10;
  v22[1] = 0x40000000;
  v22[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) @Sendable (@unowned CKRecord?, @unowned NSError?) -> () with result type CKRecord;
  v22[3] = &block_descriptor_4;
  v22[4] = v21;
  objc_msgSend(v4, sel_fetchRecordWithID_completionHandler_, v20, v22);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32[2];

  v1 = *(void **)(v0 + 120);

  if (one-time initialization token for ckShareGroupSessionProvider != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v30 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)v8 = 136315394;
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 408))();
    v11 = v10;
    swift_release();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2112;
    *(_QWORD *)(v0 + 80) = v3;
    v12 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v30 = v3;

    _os_log_impl(&dword_1A0DB3000, v4, v5, "%s received manually fetched record: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v30, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v31, -1, -1);
    MEMORY[0x1A1B05CC4](v8, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    v14 = v13;
    v15 = *(void (**)(uint64_t))(**(_QWORD **)(v0 + 128) + 400);
    v16 = v3;
    v15(v14);

  }
  else
  {
    swift_retain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v0 + 128);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v32[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 408))();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A0DB3000, v17, v18, "%s Received invalid record (non-share) from manual fetch.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v22, -1, -1);
      MEMORY[0x1A1B05CC4](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    v25 = *(void **)(v0 + 144);
    v27 = type metadata accessor for CKShareGroupSessionProvider.Errors(0, *(_QWORD *)(*(_QWORD *)(v0 + 136) + 80), *(_QWORD *)(*(_QWORD *)(v0 + 136) + 88), v26);
    MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors, v27);
    swift_allocError();
    *v28 = 1;
    swift_willThrow();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) @Sendable (@unowned CKRecord?, @unowned NSError?) -> () with result type CKRecord(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ErrorRecoveryGroupSessionProvider.fetchMembershipUpdate() in conformance CKShareGroupSessionProvider<A>()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return CKShareGroupSessionProvider.fetchMembershipUpdate()();
}

void specialized closure #1 in Task.store(in:)()
{
  JUMPOUT(0x1A1B04B54);
}

uint64_t type metadata accessor for CKShareGroupSessionProvider.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareGroupSessionProvider.Errors);
}

uint64_t type metadata accessor for CKShareGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareGroupSessionProvider);
}

uint64_t outlined init with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A0E385B4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6);
}

void partial apply for specialized closure #1 in Task.store(in:)()
{
  JUMPOUT(0x1A1B04B54);
}

uint64_t sub_1A0E38670()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in CKShareGroupSessionProvider.fetchMembershipUpdate()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  v2[16] = v0;
  v2[17] = *v0;
  return swift_task_switch();
}

void base witness table accessor for Equatable in CKShareGroupSessionProvider<A>.Errors()
{
  JUMPOUT(0x1A1B05BECLL);
}

uint64_t instantiation function for generic protocol witness table for CKShareGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A0E387F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A0E38828(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 184);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A0E3886C()
{
  return 16;
}

__n128 sub_1A0E38878(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E388B4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 208);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E388E4()
{
  return 16;
}

__n128 sub_1A0E388F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E388FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E3892C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E3895C()
{
  return 16;
}

__n128 sub_1A0E38968(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38974@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E389A4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 256);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A0E389D4()
{
  return 16;
}

__n128 sub_1A0E389E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E389EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
}

uint64_t sub_1A0E38A18()
{
  return 16;
}

__n128 sub_1A0E38A24(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38A30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E38A60(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 304))(*a1);
}

uint64_t sub_1A0E38A90()
{
  return 16;
}

__n128 sub_1A0E38A9C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38AA8()
{
  return 16;
}

__n128 sub_1A0E38AB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38AC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
}

uint64_t sub_1A0E38AEC()
{
  return 16;
}

__n128 sub_1A0E38AF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1A0E38B04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1A0E38B34(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 376);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A0E38B64()
{
  return 16;
}

__n128 sub_1A0E38B70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for CKShareGroupSessionProvider()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncSerialQueue();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<CKShare>();
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for CKShareGroupSessionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.queue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.container.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.$share.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:container:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.updateShare(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

void type metadata accessor for Published<CKShare>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<CKShare>)
  {
    type metadata accessor for OS_dispatch_queue(255, &lazy cache variable for type metadata for CKShare);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CKShare>);
  }
}

uint64_t storeEnumTagSinglePayload for CKShareGroupSessionProvider.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E38EA0 + 4 * byte_1A0F10D15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E38ED4 + 4 * byte_1A0F10D10[v4]))();
}

uint64_t sub_1A0E38ED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E38EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E38EE4);
  return result;
}

uint64_t sub_1A0E38EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E38EF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E38EFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E38F04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E38F10()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v73 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v73 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v73 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v73 - v20;
  if (!*(_QWORD *)(a3 + 16) || (v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v23 & 1) == 0))
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v21, a1, v6);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v81 = (uint8_t *)a2;
      v42 = v41;
      v83[0] = v41;
      *(_DWORD *)v40 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
      v43 = dispatch thunk of CustomStringConvertible.description.getter();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
      _os_log_impl(&dword_1A0DB3000, v38, v39, "Allowing session id: %s to be cleaned up and invalidated because session is not present in the list", v40, 0xCu);
      swift_arrayDestroy();
      v45 = v42;
      a2 = (uint64_t)v81;
      MEMORY[0x1A1B05CC4](v45, -1, -1);
      MEMORY[0x1A1B05CC4](v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
    }

    if (MEMORY[0x1A1B05DC0](a2))
    {
      v46 = *(_QWORD *)(a2 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v46 + 40))(ObjectType, v46);
      swift_unknownObjectRelease();
    }
    return 1;
  }
  v80 = v16;
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v22);
  if (one-time initialization token for default != -1)
    swift_once();
  v75 = v13;
  v76 = v10;
  v25 = type metadata accessor for Logger();
  v26 = __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  outlined init with copy of GroupSessionTable.Storage(a2, (uint64_t)v83);
  v77 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v77(v19, a1, v6);
  v78 = v26;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    v79 = v24;
    v30 = v29;
    v74 = swift_slowAlloc();
    v84 = v74;
    *(_DWORD *)v30 = 134218498;
    v82 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2048;
    v81 = (uint8_t *)a2;
    v31 = v83[2];
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v83);
    v82 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 22) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v84);
    a2 = (uint64_t)v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v19, v6);
    _os_log_impl(&dword_1A0DB3000, v27, v28, "Comparing the current distributionCount %ld to the cached distribution count %ld for sessionID %s", (uint8_t *)v30, 0x20u);
    v35 = v74;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v35, -1, -1);
    v36 = v30;
    v24 = v79;
    MEMORY[0x1A1B05CC4](v36, -1, -1);
  }
  else
  {
    outlined destroy of weak SystemCoordinatorHostDelegate?((uint64_t)v83);
    v34 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34(v19, v6);
  }

  v50 = v80;
  if (*(_QWORD *)(a2 + 16) >= v24)
    return 0;
  if (!MEMORY[0x1A1B05DC0](a2))
  {
    v77(v50, a1, v6);
    v54 = Logger.logObject.getter();
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v83[0] = v62;
      *(_DWORD *)v61 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
      v63 = dispatch thunk of CustomStringConvertible.description.getter();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34(v50, v6);
      _os_log_impl(&dword_1A0DB3000, v54, v60, "Allowing session id: %s to be cleaned up because we don't have a session tracked.", v61, 0xCu);
      v48 = 1;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v62, -1, -1);
      MEMORY[0x1A1B05CC4](v61, -1, -1);

      return v48;
    }
    v72 = v50;
LABEL_30:
    v34(v72, v6);

    return 1;
  }
  v51 = *(_QWORD *)(a2 + 8);
  v52 = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v52, v51) & 1) != 0)
  {
    v53 = v76;
    v77(v76, a1, v6);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v83[0] = v57;
      *(_DWORD *)v56 = 136315138;
      v81 = v56 + 4;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
      v58 = dispatch thunk of CustomStringConvertible.description.getter();
      v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34(v53, v6);
      _os_log_impl(&dword_1A0DB3000, v54, v55, "Allowing session id: %s to be cleaned up because the session is invalid", v56, 0xCu);
      v48 = 1;
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v57, -1, -1);
      MEMORY[0x1A1B05CC4](v56, -1, -1);
      swift_unknownObjectRelease();

      return v48;
    }
    swift_unknownObjectRelease();
    v72 = v53;
    goto LABEL_30;
  }
  v65 = v75;
  v77(v75, a1, v6);
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    v69 = swift_slowAlloc();
    v83[0] = v69;
    *(_DWORD *)v68 = 136315138;
    v81 = v68 + 4;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
    v70 = dispatch thunk of CustomStringConvertible.description.getter();
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v65, v6);
    _os_log_impl(&dword_1A0DB3000, v66, v67, "Not allowing session id: %s to be cleaned up because app already has an un-joined valid session", v68, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v69, -1, -1);
    MEMORY[0x1A1B05CC4](v68, -1, -1);
    swift_unknownObjectRelease();

  }
  else
  {
    v34(v65, v6);

    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v18 = a3;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v21[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v19 = a1;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v21);
    a1 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_1A0DB3000, v10, v11, "Session %s is no longer tracked. Cleaning up session.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    MEMORY[0x1A1B05CC4](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1, (uint64_t)v21);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for GroupSessionTable.Storage?);
  return swift_endAccess();
}

uint64_t GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  v23[1] = a5;
  v24 = a4;
  v25 = a3;
  v26 = a1;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  Lock.lock()();
  swift_release();
  v14 = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16)
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v26),
        v16 = v15,
        v14 = swift_bridgeObjectRelease(),
        (v16 & 1) == 0))
  {
    MEMORY[0x1E0C80A78](v14);
    v23[-4] = a6;
    v23[-3] = a7;
    v22 = v25;
    v21 = a6;
    tryLog<A>(_:_:function:line:)();
    v17 = v27[0];
    if (v27[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v26, v10);
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 32);
      swift_unknownObjectRetain();
      v19 = v18(a6, a7);
      v27[1] = a7;
      swift_unknownObjectWeakInit();
      swift_unknownObjectRelease();
      v27[2] = v19;
      swift_beginAccess();
      specialized Dictionary.subscript.setter(v27, (uint64_t)v13);
      swift_endAccess();
      v24(v17);
      swift_unknownObjectRelease();
    }
  }
  swift_retain();
  Lock.unlock()();
  return swift_release();
}

uint64_t GroupSessionTable.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionTable.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t GroupSessionTable.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(v0 + 16) = Lock.init()();
  *(_QWORD *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return v0;
}

uint64_t GroupSessionTable.init()()
{
  uint64_t v0;

  type metadata accessor for Lock();
  swift_allocObject();
  *(_QWORD *)(v0 + 16) = Lock.init()();
  *(_QWORD *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  return v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t partial apply for implicit closure #1 in GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 32))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t method lookup function for GroupSessionTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupSessionTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of GroupSessionTable.registerIfNotPresent<A>(identifier:initialValue:registrationHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of GroupSessionTable.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t initializeWithCopy for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t assignWithCopy for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t initializeWithTake for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakTakeInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t assignWithTake for GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupSessionTable.Storage(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionTable.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1A1B053D0](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  Swift::Int v3;

  v2 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 0xFFFFFFFFFFFFLL, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(_QWORD *)(v2 + 48) + 8 * result;
      v8 = *(_DWORD *)v7;
      v9 = *(unsigned __int16 *)(v7 + 4);
      if (v8 == (_DWORD)a1 && v9 == WORD2(a1))
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0xD000000000000013;
          v8 = 0x80000001A0F18DB0;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v8 = 0x80000001A0F18DD0;
          v7 = 0xD000000000000010;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE600000000000000;
            if (v7 != 0x627553627550)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v8 = 0xE600000000000000;
        v7 = 0x627553627550;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 0xD000000000000013;
      else
        v10 = 0xD000000000000010;
      if (v9 == 1)
        v11 = 0x80000001A0F18DB0;
      else
        v11 = 0x80000001A0F18DD0;
      if (v7 != v10)
        goto LABEL_19;
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: GroupSessionTable.Storage));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v24 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v24)
      return swift_release();
    v20 = *(_QWORD *)(v23 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v24)
        return swift_release();
      v20 = *(_QWORD *)(v23 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v24)
          return swift_release();
        v20 = *(_QWORD *)(v23 + 8 * v12);
        if (!v20)
        {
          v12 = v19 + 3;
          if (v19 + 3 >= v24)
            return swift_release();
          v20 = *(_QWORD *)(v23 + 8 * v12);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = *(_QWORD *)(a1 + 56) + 24 * v14;
    v18 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of GroupSessionTable.Storage(v17, v18);
    a2(v6, v18);
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: GroupSessionTable.Storage));
  }
  v21 = v19 + 4;
  if (v21 >= v24)
    return swift_release();
  v20 = *(_QWORD *)(v23 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v24)
      return swift_release();
    v20 = *(_QWORD *)(v23 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v23)
        return swift_release();
      v19 = *(_QWORD *)(v22 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v23)
          return swift_release();
        v19 = *(_QWORD *)(v22 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 3;
          if (v18 + 3 >= v23)
            return swift_release();
          v19 = *(_QWORD *)(v22 + 8 * v12);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
    *(_QWORD *)&v6[*(int *)(v4 + 48)] = v17;
    swift_retain();
    a2(v6, v17);
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for (key: UUID, value: GroupSessionProviderObserver));
  }
  v20 = v18 + 4;
  if (v20 >= v23)
    return swift_release();
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in closure #1 in GroupSessionTable.cleanUpIfNotPresent(_:)(a1, a2, v2);
}

uint64_t outlined init with copy of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v4;
  return a2;
}

void *Archived.wrappedValue.getter(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

void Archived.wrappedValue.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*Archived.wrappedValue.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t Archived.init(from:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v5 = v13;
    v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    if ((MEMORY[0x1A1B0531C](v5, v6) & 1) != 0)
    {
      a2 = 0;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v12, v13);
      lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
      v7 = objc_allocWithZone(MEMORY[0x1E0CB3710]);
      outlined copy of Data._Representation(v10, v11);
      v8 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
      outlined consume of Data._Representation(v10, v11);
      objc_msgSend(v8, sel__enableStrictSecureDecodingMode);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      a2 = NSCoder.decodeTopLevelObject<A>(of:forKey:)();
      outlined consume of Data._Representation(v10, v11);
      swift_bridgeObjectRelease();

    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return a2;
}

uint64_t Archived.encode(to:)(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v12[2];
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  if (a2)
  {
    v3 = (void *)objc_opt_self();
    v12[0] = 0;
    v4 = a2;
    v5 = objc_msgSend(v3, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v4, 1, v12);
    v6 = v12[0];
    if (v5)
    {
      v7 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      v12[0] = v7;
      v12[1] = v9;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
      lazy protocol witness table accessor for type Data and conformance Data();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      outlined consume of Data._Representation((uint64_t)v7, (unint64_t)v9);
    }
    else
    {
      v10 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

uint64_t static Archived.== infix(_:_:)(void *a1, void *a2)
{
  id v3;
  id v4;
  char v5;

  if (a1)
  {
    if (a2)
    {
      v3 = a2;
      v4 = a1;
      v5 = static NSObject.== infix(_:_:)();

      if ((v5 & 1) != 0)
        return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Archived<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = Archived.init(from:)(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Archived<A>(_QWORD *a1)
{
  void **v1;

  return Archived.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Archived<A>(void **a1, void **a2)
{
  return static Archived.== infix(_:_:)(*a1, *a2);
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for Archived(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for Archived(id *a1)
{

}

void **assignWithCopy for Archived(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for Archived(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for Archived(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Archived(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for Archived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Archived);
}

uint64_t dispatch thunk of BinaryEncodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BinaryDecodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ShareChangeObserver.__allocating_init(share:container:)(void *a1, void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ShareChangeObserver.init(share:container:)(a1, a2);
  return v4;
}

uint64_t ShareChangeObserver.shareChanges.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DF0A50], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], v7, v4);
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter, (uint64_t)v13);
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[12] = a4;
  v5[13] = a5;
  v6 = type metadata accessor for CKRecordChange.ChangeType();
  v5[14] = v6;
  v5[15] = *(_QWORD *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
  v5[17] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>.Iterator);
  v5[18] = v7;
  v5[19] = *(_QWORD *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>);
  v5[21] = v8;
  v5[22] = *(_QWORD *)(v8 - 8);
  v5[23] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  v5[24] = v9;
  v5[25] = *(_QWORD *)(v9 - 8);
  v5[26] = swift_task_alloc();
  v10 = type metadata accessor for CKRecordObserver.RecordChanges();
  v5[27] = v10;
  v5[28] = *(_QWORD *)(v10 - 8);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);

  v1 = v0[25];
  v2 = v0[26];
  v3 = v0[24];
  v5 = v0[12];
  v4 = v0[13];
  CKRecordObserver.recordChanges.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  v6 = (unint64_t *)(v5 + 32);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
    *v6 = v7;
  }
  v10 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v7);
    *v6 = v7;
  }
  v12 = v0[29];
  v11 = v0[30];
  v13 = v0[27];
  v14 = v0[28];
  v16 = v0[25];
  v15 = v0[26];
  v17 = v0[24];
  v20 = v0[21];
  *(_QWORD *)(v7 + 16) = v10 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v7+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v10, v15, v17);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges and conformance CKRecordObserver.RecordChanges, (uint64_t (*)(uint64_t))MEMORY[0x1E0D111E8], MEMORY[0x1E0D111F8]);
  swift_retain();
  AsyncFilterSequence.init(_:isIncluded:)();
  MEMORY[0x1A1B05190](v20);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncFilterSequence.isIncluded.getter();
  AsyncFilterSequence.Iterator.init(_:isIncluded:)();
  v21 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu
                                                 + _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu);
  v18 = (_QWORD *)swift_task_alloc();
  v0[31] = v18;
  *v18 = v0;
  v18[1] = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
  return v21(0, 0);
}

{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void **v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;

  v1 = *(void **)(v0 + 256);
  if (v1)
  {
    v2 = *(_DWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    CKRecordChange.changeType.getter();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5);
    if (v6 == v2 || v6 == *(_DWORD *)(v0 + 284))
    {
      v7 = *(void ***)(v0 + 128);
      (*(void (**)(void **, _QWORD))(*(_QWORD *)(v0 + 120) + 96))(v7, *(_QWORD *)(v0 + 112));
      v8 = *v7;
      v9 = v8;
      yieldShareFromRecord #1 (_:) in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(v8, v1);

LABEL_5:
      v50 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu
                                                     + _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5Tu);
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 264) = v10;
      *v10 = v0;
      v10[1] = closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter;
      return v50(0, 0);
    }
    if (v6 == *(_DWORD *)(v0 + 288))
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Log.default);
      swift_retain_n();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.default.getter();
      v21 = os_log_type_enabled(v19, v20);
      v22 = *(_QWORD *)(v0 + 96);
      if (v21)
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = swift_slowAlloc();
        *(_QWORD *)(v0 + 72) = v24;
        *(_DWORD *)v23 = 136315138;
        v25 = objc_msgSend(*(id *)(v22 + 16), sel_recordID);
        if (v25)
        {
          *(_QWORD *)(v0 + 88) = v25;
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordID);
          v26 = String.init<A>(reflecting:)();
          v28 = v27;
        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, (uint64_t *)(v0 + 72));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1A0DB3000, v19, v20, "Share was deleted on activity: %s", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1B05CC4](v24, -1, -1);
        MEMORY[0x1A1B05CC4](v23, -1, -1);

      }
      else
      {
        swift_release_n();

      }
      *(_QWORD *)(v0 + 64) = 0;
      AsyncThrowingStream.Continuation.finish(throwing:)();

      goto LABEL_5;
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.default);
    v30 = v1;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 224);
    v37 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 160);
    v49 = *(_QWORD *)(v0 + 176);
    v46 = *(_QWORD *)(v0 + 152);
    v47 = *(_QWORD *)(v0 + 144);
    if (v33)
    {
      v45 = *(_QWORD *)(v0 + 168);
      v39 = (uint8_t *)swift_slowAlloc();
      v44 = v34;
      v40 = swift_slowAlloc();
      v51 = v40;
      *(_DWORD *)v39 = 136315138;
      *(_QWORD *)(v0 + 48) = v30;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordChange);
      v41 = v30;
      v42 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A0DB3000, v31, v32, "Unknown record change type: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v40, -1, -1);
      MEMORY[0x1A1B05CC4](v39, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v37, v45);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v44, v35);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v37, v38);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    *(_QWORD *)(v0 + 40) = 0;
    AsyncThrowingStream.Continuation.finish(throwing:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(_QWORD *)(v4 + 272) = v1;
  }
  else
  {
    *(_DWORD *)(v4 + 280) = *MEMORY[0x1E0D111B0];
    *(_DWORD *)(v4 + 284) = *MEMORY[0x1E0D111C0];
    *(_DWORD *)(v4 + 288) = *MEMORY[0x1E0D111B8];
    *(_QWORD *)(v4 + 256) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    *(_QWORD *)(v4 + 272) = v1;
  else
    *(_QWORD *)(v4 + 256) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v3 = objc_msgSend(*(id *)(v2 + 16), sel_recordID);
  v4 = objc_msgSend(v1, sel_recordID);
  LOBYTE(v1) = static NSObject.== infix(_:_:)();

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncFilterSequence<CKRecordObserver.RecordChanges>.Iterator);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  if (a1)
  {
    swift_getObjectType();
    v6 = dispatch thunk of Actor.unownedExecutor.getter();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v3[15] = v6;
  v3[16] = v8;
  return swift_task_switch();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY0_()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 136) = AsyncFilterSequence.Iterator.baseIterator.modify();
  type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges.Iterator and conformance CKRecordObserver.RecordChanges.Iterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0D111D8], MEMORY[0x1E0D111E0]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(uint64_t, _QWORD))(v2 + 136))(v2 + 16, 0);
  return swift_task_switch();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY2_()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t (*v12)(_QWORD *);

  v1 = v0[7];
  if (v1)
  {
    v3 = v0[13];
    v2 = v0[14];
    v4 = v0[11];
    v5 = v0[12];
    v0[6] = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4, v5);
    v6 = (int *)AsyncFilterSequence.isIncluded.getter();
    v0[19] = v7;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
    v12 = (uint64_t (*)(_QWORD *))((char *)v6 + *v6);
    v8 = (_QWORD *)swift_task_alloc();
    v0[20] = v8;
    *v8 = v0;
    v8[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ4_;
    v9 = v0 + 6;
    v10 = v12;
  }
  else
  {
    swift_task_dealloc();
    v10 = (uint64_t (*)(_QWORD *))v0[1];
    v9 = 0;
  }
  return v10(v9);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY3_()
{
  uint64_t v0;

  (*(void (**)(uint64_t, uint64_t))(v0 + 136))(v0 + 16, 1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ4_(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TY5_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if (*(_BYTE *)(v0 + 168) == 1)
  {
    v1 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {

    *(_QWORD *)(v0 + 136) = AsyncFilterSequence.Iterator.baseIterator.modify();
    type metadata accessor for CKRecordObserver.RecordChanges.Iterator();
    lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type CKRecordObserver.RecordChanges.Iterator and conformance CKRecordObserver.RecordChanges.Iterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0D111D8], MEMORY[0x1E0D111E0]);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo16CKRecordObserverC12CloudKitCodeE13RecordChangesV_Tg5TQ1_;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
  }
}

void yieldShareFromRecord #1 (_:) in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation.YieldResult);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (objc_opt_self(), (v8 = swift_dynamicCastObjCClass()) != 0))
  {
    v21 = v8;
    v9 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    v19 = a2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v21 = v14;
      *(_DWORD *)v13 = 136315138;
      v20 = (uint64_t)v19;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordChange);
      v15 = v19;
      v16 = String.init<A>(reflecting:)();
      v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A0DB3000, v11, v12, "Share missing from record change: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1B05CC4](v14, -1, -1);
      MEMORY[0x1A1B05CC4](v13, -1, -1);

    }
    else
    {

    }
  }
}

_QWORD *ShareChangeObserver.init(share:container:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v3 = v2;
  v3[4] = MEMORY[0x1E0DEE9D8];
  v3[2] = a1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKRecordObserver);
  v6 = a1;
  v7 = a2;
  static CKRecord.SystemType.share.getter();
  v3[3] = CKRecordObserver.init(container:recordType:)();
  if (one-time initialization token for shareChangeObserver != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.shareChangeObserver);
  v9 = v7;
  swift_retain_n();
  v10 = v9;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v24 = v22;
    *(_DWORD *)v13 = 136315394;
    v23 = v6;
    v15 = *(uint64_t (**)(uint64_t))(*v3 + 144);
    v16 = swift_retain();
    v17 = v15(v16);
    v19 = v18;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2112;
    v20 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v10;

    _os_log_impl(&dword_1A0DB3000, v11, v12, "%s Init with container: %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v22, -1, -1);
    MEMORY[0x1A1B05CC4](v13, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v3;
}

uint64_t partial apply for closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ShareChangeObserver.shareChanges.getter(a1, v1);
}

uint64_t ShareChangeObserver.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = v0;
  if (one-time initialization token for shareChangeObserver != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.shareChangeObserver);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 144);
    v8 = swift_retain();
    v9 = v7(v8);
    v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v3, v4, "%s Deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v6, -1, -1);
    MEMORY[0x1A1B05CC4](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ShareChangeObserver.__deallocating_deinit()
{
  ShareChangeObserver.deinit();
  return swift_deallocClassInstance();
}

uint64_t ShareChangeObserver.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(48);
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  v1._object = (void *)0x80000001A0F1AA60;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000001A0F1AA80;
  v2._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  v3 = objc_msgSend(*(id *)(v0 + 16), sel_recordID);
  v4 = objc_msgSend(v3, sel_description);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShareChangeObserver()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t type metadata accessor for ShareChangeObserver()
{
  return objc_opt_self();
}

uint64_t method lookup function for ShareChangeObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShareChangeObserver.shareChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ShareChangeObserver.__allocating_init(share:container:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ShareChangeObserver.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ShareProviderProtocol.shareChanges.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ShareProviderProtocol.update(share:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1A0E3D080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ShareChangeObserver.shareChanges.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = SystemCoordinatorTable.systemCoordinator(for:);
  v5 = *a1;
  v4[2] = v1;
  v4[3] = v5;
  return swift_task_switch();
}

uint64_t Publisher.dynamicThrottle<A>(for:after:scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t AssociatedTypeWitness;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v117 = a3;
  v91 = a2;
  v116 = a1;
  v112 = a4;
  v118 = a6;
  v9 = type metadata accessor for Publishers.Share();
  v10 = MEMORY[0x1E0C95AA0];
  v111 = v9;
  v115 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95AA0], v9);
  v119 = type metadata accessor for Publishers.MeasureInterval();
  v114 = type metadata accessor for PublishRate(255, a5, a7, v11);
  v92 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C958A8], v119);
  v12 = type metadata accessor for Publishers.Scan();
  v93 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C959B8], v12);
  v108 = v12;
  v13 = type metadata accessor for Publishers.Zip();
  v89 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95970], v13);
  v85 = v13;
  v99 = type metadata accessor for Publishers.Share();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v97 = MEMORY[0x1A1B05BEC](v10, v99);
  v14 = type metadata accessor for Publishers.CompactMap();
  v102 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95708], v14);
  v15 = type metadata accessor for Publishers.Throttle();
  v104 = MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95C28], v15);
  v120 = v14;
  v121 = v15;
  v95 = v14;
  v101 = v15;
  v122 = v102;
  v123 = v104;
  v103 = type metadata accessor for Publishers.Merge();
  v106 = *(_QWORD *)(v103 - 8);
  v16 = MEMORY[0x1E0C80A78](v103);
  v100 = (char *)&v77 - v17;
  v105 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v94 = (char *)&v77 - v19;
  v96 = *(_QWORD *)(v14 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v90 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v113 = (char *)&v77 - v23;
  v86 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v22);
  v84 = (char *)&v77 - v24;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v82 = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(v82 - 8);
  v25 = *(_QWORD *)(v80 + 64);
  v26 = MEMORY[0x1E0C80A78](v82);
  v81 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v77 - v28;
  v83 = *(_QWORD *)(v114 - 8);
  v30 = MEMORY[0x1E0C80A78](v27);
  v79 = (uint64_t)&v77 - v31;
  v88 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v30);
  v107 = (char *)&v77 - v32;
  v33 = swift_getAssociatedTypeWitness();
  v34 = type metadata accessor for Optional();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v77 - v37;
  v87 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v36);
  v109 = (char *)&v77 - v39;
  v110 = Publisher.share()();
  v120 = v110;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v38, 1, 1, v33);
  Publisher.measureInterval<A>(using:options:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
  v40 = v29;
  v77 = v29;
  default argument 0 of PublishRate.init(timeInGracePeriod:isThrottled:)();
  v41 = v79;
  v42 = (uint64_t)v29;
  v43 = a7;
  v78 = a7;
  PublishRate.init(timeInGracePeriod:isThrottled:)(v42, 0, a5, a7, v79);
  v44 = v80;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  v46 = v82;
  v45(v40, v116, v82);
  v47 = v81;
  v45(v81, v91, v46);
  v48 = *(unsigned __int8 *)(v44 + 80);
  v49 = (v48 + 48) & ~v48;
  v50 = (v25 + v48 + v49) & ~v48;
  v51 = (char *)swift_allocObject();
  v52 = v112;
  *((_QWORD *)v51 + 2) = v112;
  *((_QWORD *)v51 + 3) = a5;
  *((_QWORD *)v51 + 4) = v118;
  *((_QWORD *)v51 + 5) = v43;
  v53 = &v51[v49];
  v54 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  v54(v53, v77, v46);
  v54(&v51[v50], v47, v46);
  v55 = v114;
  Publisher.scan<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v41, v55);
  v120 = v110;
  v56 = v84;
  Publisher.zip<A>(_:)();
  v57 = v85;
  v58 = Publisher.share()();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v56, v57);
  v120 = v58;
  v59 = v58;
  v60 = (_QWORD *)swift_allocObject();
  v60[2] = v52;
  v60[3] = a5;
  v61 = v118;
  v62 = v78;
  v60[4] = v118;
  v60[5] = v62;
  v63 = (_QWORD *)swift_allocObject();
  v63[2] = v52;
  v63[3] = a5;
  v63[4] = v61;
  v63[5] = v62;
  v63[6] = partial apply for closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:);
  v63[7] = v60;
  Publisher.compactMap<A>(_:)();
  swift_release();
  v120 = v59;
  v64 = (_QWORD *)swift_allocObject();
  v64[2] = v52;
  v64[3] = a5;
  v64[4] = v61;
  v64[5] = v62;
  v65 = (_QWORD *)swift_allocObject();
  v65[2] = v52;
  v65[3] = a5;
  v65[4] = v61;
  v65[5] = v62;
  v65[6] = partial apply for closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:);
  v65[7] = v64;
  v66 = v90;
  Publisher.compactMap<A>(_:)();
  swift_release();
  v67 = v94;
  v68 = v95;
  Publisher.throttle<A>(for:scheduler:latest:)();
  v69 = *(void (**)(char *, uint64_t))(v96 + 8);
  v69(v66, v68);
  v70 = v100;
  v71 = v68;
  v72 = v101;
  v73 = v113;
  Publisher.merge<A>(with:)();
  v74 = v103;
  MEMORY[0x1A1B05BEC](MEMORY[0x1E0C95A60], v103);
  v75 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v70, v74);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v67, v72);
  v69(v73, v71);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v107, v108);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v109, v119);
  return v75;
}

uint64_t type metadata accessor for PublishRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishRate);
}

uint64_t default argument 0 of PublishRate.init(timeInGracePeriod:isThrottled:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x1A1B0513C](AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8));
}

uint64_t PublishRate.init(timeInGracePeriod:isThrottled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  result = type metadata accessor for PublishRate(0, a3, a4, v11);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v33[1] = a4;
  v40 = a7;
  v41 = a3;
  v35 = a1;
  v10 = type metadata accessor for PublishRate(0, a5, a6, a4);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  MEMORY[0x1E0C80A78](v10);
  v34 = (char *)v33 - v11;
  swift_getAssociatedTypeWitness();
  v38 = a5;
  v39 = a6;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v33 - v17;
  swift_getAssociatedConformanceWitness();
  v19 = a2;
  LOBYTE(a2) = dispatch thunk of static Comparable.< infix(_:_:)();
  v20 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  if ((a2 & 1) == 0)
  {
    MEMORY[0x1A1B0513C](AssociatedTypeWitness, v20);
    v31 = 0;
    v28 = v39;
    v29 = v40;
    v30 = v38;
    return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v16, v31, v30, v28, v29);
  }
  v21 = v35;
  MEMORY[0x1A1B05130](v35, v19, AssociatedTypeWitness, v20);
  v22 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v23 = v36;
  v24 = v34;
  v25 = v21;
  v26 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v25, v37);
  if ((v22 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v26);
    v28 = v39;
    v29 = v40;
    v30 = v38;
    goto LABEL_7;
  }
  v27 = v24[*(int *)(v26 + 36)];
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v26);
  v28 = v39;
  v29 = v40;
  v30 = v38;
  if ((v27 & 1) != 0)
  {
LABEL_7:
    MEMORY[0x1A1B0513C](AssociatedTypeWitness, v20);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, AssociatedTypeWitness);
    v31 = 1;
    return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v16, v31, v30, v28, v29);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, AssociatedTypeWitness);
  v31 = 0;
  return PublishRate.init(timeInGracePeriod:isThrottled:)((uint64_t)v16, v31, v30, v28, v29);
}

uint64_t sub_1A0E3DFE4()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, AssociatedTypeWitness);
  v6(v0 + v5, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  return closure #1 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, v3 + ((v10 + 48) & ~v10), v3 + ((*(_QWORD *)(v9 + 64) + v10 + ((v10 + 48) & ~v10)) & ~v10), v7, v8, a3);
}

uint64_t closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for PublishRate(0, a3, a4, a3) + 36));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((v7 & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a5, a2, AssociatedTypeWitness);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a5, v10, 1, AssociatedTypeWitness);
}

uint64_t sub_1A0E3E270()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 40), a3);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;

  type metadata accessor for PublishRate(255, a5, a7, a4);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v7 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for PublishRate(0, a3, a4, a3) + 36));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a5, a2, AssociatedTypeWitness);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a5, v10, 1, AssociatedTypeWitness);
}

uint64_t sub_1A0E3E3F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #3 in Publisher.dynamicThrottle<A>(for:after:scheduler:)(a1, a2, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_1A0E3E40C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed PublishRate<A1>, @in_guaranteed A.Publisher.Output) -> (@out A.Publisher.Output?)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata completion function for PublishRate()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PublishRate(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for PublishRate(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for PublishRate(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for PublishRate(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for PublishRate(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for PublishRate(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishRate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v15;
  int v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
  }
  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2)
        goto LABEL_23;
LABEL_7:
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_23;
LABEL_14:
      v12 = (v10 - 1) << v9;
      if (v8 > 3)
        v12 = 0;
      if ((_DWORD)v7 != -1)
      {
        if (v8 <= 3)
          v13 = v7 + 1;
        else
          v13 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v12;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
  }
LABEL_23:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  v16 = (v15 + 2147483646) & 0x7FFFFFFF;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for PublishRate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  GroupActivities::TypedPayloadBox::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_value;
  else
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  GroupActivities::TypedPayloadBox::CodingKeys_optional v4;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_value;
  else
    v4.value = GroupActivities_TypedPayloadBox_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

GroupActivities::TypedPayloadBox::CodingKeys_optional __swiftcall TypedPayloadBox.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupActivities::TypedPayloadBox::CodingKeys_optional)2;
}

uint64_t TypedPayloadBox.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TypedPayloadBox.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 118;
  else
    return 110;
}

uint64_t TypedPayloadBox.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 118;
  else
    return 110;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedPayloadBox.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*a1)
    v2 = 118;
  else
    v2 = 110;
  if (*a2)
    v3 = 118;
  else
    v3 = 110;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TypedPayloadBox.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedPayloadBox.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TypedPayloadBox.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TypedPayloadBox.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TypedPayloadBox.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 110;
  if (*v1)
    v2 = 118;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TypedPayloadBox.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 118;
  else
    return 110;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TypedPayloadBox.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TypedPayloadBox.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TypedPayloadBox.CodingKeys()
{
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TypedPayloadBox.CodingKeys()
{
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_OWORD *TypedPayloadBox.init(value:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  return outlined init with take of Decodable & Encodable(a1, a2);
}

_OWORD *outlined init with take of Decodable & Encodable(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t TypedPayloadBox.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  __int128 v31;
  _OWORD *v32;
  _QWORD v33[2];
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];
  uint64_t v43;

  v34 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TypedPayloadBox.CodingKeys>);
  v35 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CodingUserInfoKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10 = dispatch thunk of Hashable.hashValue.getter();
  if (one-time initialization token for typedPayloadDecoderMap != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v6, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  if (*(_QWORD *)(v10 + 16) && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!*((_QWORD *)&v37 + 1))
  {
    result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
    __break(1u);
    goto LABEL_23;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
  v14 = MEMORY[0x1E0DEE9B8];
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v16 = v39[0];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v36) = 0;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = v18;
    if (*(_QWORD *)(v16 + 16))
    {
      swift_bridgeObjectRetain();
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, (uint64_t)v19);
      if ((v21 & 1) != 0)
      {
        outlined init with copy of AudioSessionAssertionManager(*(_QWORD *)(v16 + 56) + 40 * v20, (uint64_t)&v36);
      }
      else
      {
        v38 = 0;
        v36 = 0u;
        v37 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v37 + 1))
    {
      swift_bridgeObjectRelease();
      outlined init with take of TypedPayloadDecoding(&v36, (uint64_t)v39);
      v22 = v40;
      v23 = v41;
      __swift_project_boxed_opaque_existential_1(v39, v40);
      (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v23 + 8))(&v36, v5, v22, v23);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v43);
      outlined init with take of Decodable & Encodable(&v36, v42);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
      v31 = v42[1];
      v32 = v34;
      *v34 = v42[0];
      v32[1] = v31;
      v32[2] = v42[2];
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v36, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      v34 = (_OWORD *)type metadata accessor for DecodingError();
      swift_allocError();
      v25 = v24;
      v33[1] = (char *)v24
             + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                      + 48);
      *v25 = v14 + 8;
      v26 = v17;
      v27 = a1[3];
      v28 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v27);
      MEMORY[0x1A1B05460](v27, v28);
      *(_QWORD *)&v36 = 0;
      *((_QWORD *)&v36 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v36 = 0xD000000000000015;
      *((_QWORD *)&v36 + 1) = 0x80000001A0F1AAF0;
      v29._countAndFlagsBits = v26;
      v29._object = v19;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._object = (void *)0x80000001A0F1AB10;
      v30._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v30);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD))(*((_QWORD *)v34 - 1) + 104))(v25, *MEMORY[0x1E0DEC460]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v43);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t TypedPayloadBox.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8 = v2[3];
  v9 = __swift_project_boxed_opaque_existential_1(v2, v8);
  specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)((uint64_t)v9, (uint64_t)v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  static Encodable.messageIdentifier.getter(a3);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  KeyedEncodingContainer.encode(_:forKey:)();
  swift_endAccess();
  if (v3)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return swift_endAccess();
}

uint64_t TypedPayloadBox.unbox<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v8;

  v3 = v2;
  outlined init with copy of Decodable & Encodable(v3, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  v6 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v6 ^ 1u, 1, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TypedPayloadBox@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return TypedPayloadBox.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TypedPayloadBox(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TypedPayloadBox.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8 = v2[3];
  v9 = __swift_project_boxed_opaque_existential_1(v2, v8);
  specialized encode #1 <A>(openedValue:) in TypedPayloadBox.encode(to:)((uint64_t)v9, (uint64_t)v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox.CodingKeys, &type metadata for TypedPayloadBox.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox.CodingKeys, &type metadata for TypedPayloadBox.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox.CodingKeys, &type metadata for TypedPayloadBox.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for TypedPayloadBox.CodingKeys, &type metadata for TypedPayloadBox.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox.CodingKeys and conformance TypedPayloadBox.CodingKeys);
  }
  return result;
}

uint64_t destroy for TypedPayloadBox(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t initializeWithCopy for TypedPayloadBox(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  (**(void (***)(void))(v4 - 8))();
  return a1;
}

uint64_t *assignWithCopy for TypedPayloadBox(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_2(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

_OWORD *assignWithTake for TypedPayloadBox(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for TypedPayloadBox()
{
  return &type metadata for TypedPayloadBox;
}

uint64_t storeEnumTagSinglePayload for TypedPayloadBox.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A0E3FD70 + 4 * byte_1A0F11175[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A0E3FDA4 + 4 * byte_1A0F11170[v4]))();
}

uint64_t sub_1A0E3FDA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E3FDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A0E3FDB4);
  return result;
}

uint64_t sub_1A0E3FDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A0E3FDC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A0E3FDCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A0E3FDD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TypedPayloadBox.CodingKeys()
{
  return &type metadata for TypedPayloadBox.CodingKeys;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_Sis5NeverOTg504_s15d15Activities18Anyfg33V4hash4intoys6HasherVz_tFSiAA0dE7B58_pcfu_33_566d7d6091ff79e655ff2a961c0070a4AaH_pSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      v5 = dispatch thunk of Hashable.hashValue.getter();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AnySpatialTemplate.spatialTemplate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

double AnySpatialTemplate.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((__int128 *)a1, (uint64_t)v4);
    outlined init with take of TypedPayloadDecoding(v4, a2);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for SpatialTemplate?);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t AnySpatialTemplate.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt *v19;
  Swift::UInt v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  unsigned __int128 v31;
  char v32;

  v2 = v1;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v30, v4, v5);
  outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v25, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((_QWORD *)&v26 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v25, (uint64_t)v28);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v25, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v28, 0, sizeof(v28));
    v29 = 0;
  }
  outlined init with copy of URL?((uint64_t)v28, (uint64_t)&v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((_QWORD *)&v26 + 1))
  {
    v22 = v25;
    v23 = v26;
    v24 = v27;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v22);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v28, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)&v30);
  v6 = v1[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  SpatialTemplate.output.getter(v6, v7, (uint64_t)&v30);
  v8 = v30;
  v9 = v31;
  if (v32)
  {
    if (v32 == 1)
    {
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(v8 & 1);
    }
    else
    {
      if (*((_QWORD *)&v31 + 1) | (unint64_t)v31 | v30)
      {
        if (v30 == 1 && v31 == 0)
        {
          v13 = 2;
        }
        else if (v30 == 2 && v31 == 0)
        {
          v13 = 3;
        }
        else
        {
          v13 = 4;
        }
      }
      else
      {
        v13 = 1;
      }
      Hasher._combine(_:)(v13);
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v8);
    if (*((_QWORD *)&v9 + 1))
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v10 = v8;
      v12 = v9 >> 64;
      v11 = v9;
    }
    else
    {
      Hasher._combine(_:)(0);
      v10 = v8;
      v11 = v9;
      v12 = 0;
    }
    outlined consume of SpatialTemplatePreferenceOutput.SpatialTemplate(v10, v11, v12, 0);
  }
  v14 = v2[3];
  v15 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15GroupActivities015SpatialTemplateB0_pG_Sis5NeverOTg504_s15d15Activities18Anyfg33V4hash4intoys6HasherVz_tFSiAA0dE7B58_pcfu_33_566d7d6091ff79e655ff2a961c0070a4AaH_pSiTf3nnnpk_nTf1cn_n(v16);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v17 + 16));
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = (Swift::UInt *)(v17 + 32);
    do
    {
      v20 = *v19++;
      Hasher._combine(_:)(v20);
      --v18;
    }
    while (v18);
  }
  return swift_bridgeObjectRelease();
}

Swift::Int AnySpatialTemplate.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnySpatialTemplate()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnySpatialTemplate()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AnySpatialTemplate.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t outlined destroy of SpatialTemplateConfiguration(uint64_t a1)
{
  destroy for SpatialTemplateConfiguration(a1);
  return a1;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = a2 + 64;
    do
    {
      v5 = *(_QWORD *)(v4 - 24);
      v6 = *(_QWORD *)(v4 + 32);
      v7 = *(_BYTE *)(v4 + 64);
      Hasher._combine(_:)(0);
      if (v5)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(0);
      SPVector3D.hash(into:)();
      SPAngle.hash(into:)();
      if ((v7 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(0);
        SPVector3D.hash(into:)();
      }
      swift_bridgeObjectRelease();
      v4 += 112;
      --v3;
    }
    while (v3);
  }
}

uint64_t specialized static AnySpatialTemplate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];
  _BYTE v34[40];
  _QWORD v35[5];
  __int128 v36[2];
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v42);
  outlined init with copy of AudioSessionAssertionManager(a2, (uint64_t)v39);
  v3 = v43;
  v4 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v35, v3, v4);
  v5 = v40;
  v6 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v37, v5, v6);
  LOBYTE(a2) = specialized static SpatialTemplateConfiguration.== infix(_:_:)((uint64_t)v35, (uint64_t)&v37);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)&v37);
  outlined destroy of SpatialTemplateConfiguration((uint64_t)v35);
  if ((a2 & 1) == 0)
    goto LABEL_14;
  v7 = v43;
  v8 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8) + 16);
  swift_bridgeObjectRelease();
  v10 = v40;
  v11 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11) + 16);
  swift_bridgeObjectRelease();
  if (v9 != v12)
  {
LABEL_14:
    v30 = 0;
    goto LABEL_15;
  }
  v13 = v43;
  v14 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  v16 = v40;
  v17 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  v19 = result;
  v32 = *(_QWORD *)(v15 + 16);
  if (!v32)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = 1;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
    return v30;
  }
  v20 = 0;
  v21 = 32;
  while (v20 < *(_QWORD *)(v15 + 16))
  {
    result = outlined init with copy of AudioSessionAssertionManager(v15 + v21, (uint64_t)&v37);
    v22 = *(_QWORD *)(v19 + 16);
    if (v20 == v22)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
      goto LABEL_12;
    }
    if (v20 >= v22)
      goto LABEL_17;
    outlined init with take of TypedPayloadDecoding(&v37, (uint64_t)v35);
    outlined init with copy of AudioSessionAssertionManager(v19 + v21, (uint64_t)v36);
    outlined init with take of TypedPayloadDecoding(v36, (uint64_t)&v37);
    v23 = __swift_project_boxed_opaque_existential_1(v35, v35[3]);
    MEMORY[0x1E0C80A78](v23);
    (*(void (**)(char *))(v25 + 16))((char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    AnyHashable.init<A>(_:)();
    v26 = __swift_project_boxed_opaque_existential_1(&v37, v38);
    MEMORY[0x1E0C80A78](v26);
    (*(void (**)(char *))(v28 + 16))((char *)&v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    AnyHashable.init<A>(_:)();
    v29 = MEMORY[0x1A1B04F8C](v34, v33);
    outlined destroy of AnyHashable((uint64_t)v33);
    outlined destroy of AnyHashable((uint64_t)v34);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
      goto LABEL_14;
    }
    ++v20;
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v37);
    v21 += 40;
    if (v32 == v20)
      goto LABEL_12;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySpatialTemplate and conformance AnySpatialTemplate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate;
  if (!lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate)
  {
    result = MEMORY[0x1A1B05BEC](&protocol conformance descriptor for AnySpatialTemplate, &type metadata for AnySpatialTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySpatialTemplate and conformance AnySpatialTemplate);
  }
  return result;
}

uint64_t initializeWithCopy for AnySpatialTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnySpatialTemplate(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for AnySpatialTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySpatialTemplate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySpatialTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySpatialTemplate()
{
  return &type metadata for AnySpatialTemplate;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

id AddressableMember.tuHandle.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v3 = (void *)objc_opt_self();
  v4 = (void *)MEMORY[0x1A1B048B4](v1, v2);
  v5 = objc_msgSend(v3, sel_normalizedHandleWithDestinationID_, v4);

  return v5;
}

GroupActivities::AddressableMember __swiftcall AddressableMember.init(handle:)(GroupActivities::AddressableMember handle)
{
  GroupActivities::AddressableMember *v1;

  *v1 = handle;
  return handle;
}

uint64_t AddressableMember.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AddressableMember.handle.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AddressableMember.handle.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t AddressableMember.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static AddressableMember.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int AddressableMember.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AddressableMember()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AddressableMember()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AddressableMember()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t LocalAccountMember.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t LocalAccountMember.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*LocalAccountMember.id.modify())(_QWORD, _QWORD, _QWORD)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LocalAccountMember.hash(into:)()
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int LocalAccountMember.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t LocalAccountMember.init(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalAccountMember()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalAccountMember()
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalAccountMember()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for AddressableMember(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  result = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for LocalAccountMember(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (uint64_t (*)(uint64_t))type metadata accessor for LocalAccountMember, (uint64_t)&protocol conformance descriptor for LocalAccountMember);
  result = lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (uint64_t (*)(uint64_t))type metadata accessor for LocalAccountMember, (uint64_t)&protocol conformance descriptor for LocalAccountMember);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LocalAccountMember()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LocalAccountMember;
  if (!type metadata singleton initialization cache for LocalAccountMember)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t base witness table accessor for Equatable in LocalAccountMember()
{
  return lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey(&lazy protocol witness table cache variable for type LocalAccountMember and conformance LocalAccountMember, (uint64_t (*)(uint64_t))type metadata accessor for LocalAccountMember, (uint64_t)&protocol conformance descriptor for LocalAccountMember);
}

ValueMetadata *type metadata accessor for AddressableMember()
{
  return &type metadata for AddressableMember;
}

uint64_t initializeBufferWithCopyOfBuffer for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for LocalAccountMember(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for LocalAccountMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalAccountMember()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E4118C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LocalAccountMember()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A0E411D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for LocalAccountMember()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Task.store(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  v9[5] = a2;
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  v10 = AnyCancellable.init(_:)();
  specialized Set._Variant.insert(_:)(&v12, v10);
  return swift_release();
}

uint64_t sub_1A0E41328()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Task.store(in:)()
{
  JUMPOUT(0x1A1B04B54);
}

uint64_t SystemCoordinatorHostManager.state.getter()
{
  uint64_t v1;

  type metadata accessor for SystemCoordinatorState();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t key path getter for SystemCoordinatorHostManager.state : SystemCoordinatorHostManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for SystemCoordinatorState();
  result = OS_dispatch_queue.sync<A>(execute:)();
  *a1 = v3;
  return result;
}

uint64_t SystemCoordinatorHostManager.state.setter(void *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t result;
  _QWORD v9[6];

  v3 = *(NSObject **)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in SystemCoordinatorHostManager.state.setter;
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = _sIg_Ieg_TRTA_0;
  v9[5] = v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_5;
  v6 = _Block_copy(v9);
  swift_retain();
  v7 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
  return result;
}

id partial apply for closure #1 in SystemCoordinatorHostManager.state.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  *a1 = v2;
  return v2;
}

void closure #1 in SystemCoordinatorHostManager.state.setter(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state) = a2;
  v3 = a2;
  SystemCoordinatorHostManager._state.didset();

}

uint64_t sub_1A0E415EC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in SystemCoordinatorHostManager.state.setter()
{
  uint64_t v0;

  closure #1 in SystemCoordinatorHostManager.state.setter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A0E41620()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void (*SystemCoordinatorHostManager.state.modify(uint64_t a1))(void **a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  type metadata accessor for SystemCoordinatorState();
  OS_dispatch_queue.sync<A>(execute:)();
  return SystemCoordinatorHostManager.state.modify;
}

void SystemCoordinatorHostManager.state.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    SystemCoordinatorHostManager.state.setter(v3);

  }
  else
  {
    SystemCoordinatorHostManager.state.setter(v2);
  }
}

uint64_t SystemCoordinatorHostManager.configurations.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for SystemCoordinatorHostManager.configurations : SystemCoordinatorHostManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for SystemCoordinatorHostManager.configurations : SystemCoordinatorHostManager()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t SystemCoordinatorHostManager.configurations.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*SystemCoordinatorHostManager.configurations.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t SystemCoordinatorHostManager.$configurations.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path getter for SystemCoordinatorHostManager.$configurations : SystemCoordinatorHostManager()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for SystemCoordinatorHostManager.$configurations : SystemCoordinatorHostManager(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t SystemCoordinatorHostManager.$configurations.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*SystemCoordinatorHostManager.$configurations.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return SystemCoordinatorHostManager.$configurations.modify;
}

void SystemCoordinatorHostManager.$configurations.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t SystemCoordinatorHostManager.hosts.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinatorHostManager.hosts.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SystemCoordinatorHostManager.hosts.modify())()
{
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

id SystemCoordinatorHostManager.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
}

void SystemCoordinatorHostManager._state.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
    type metadata accessor for SystemCoordinatorState();
    v8 = v7;
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      swift_beginAccess();
      v10 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v10, (void (*)(char *, void *))partial apply for closure #1 in SystemCoordinatorHostManager._state.didset);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in SystemCoordinatorHostManager._state.didset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void **v4;
  void *v5;
  id v6;

  v3 = *(void **)(a3 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
  v4 = (void **)(a2 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
  swift_beginAccess();
  v5 = *v4;
  *v4 = v3;
  v6 = v3;
  SystemCoordinatorHost.currentState.didset();

}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.debounceInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.throttleInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0) + 20);
  v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.gracePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0) + 24);
  v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit.init(throttleInterval:gracePeriod:debounceInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v8 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  v9 = a4 + *(int *)(v8 + 20);
  v10 = type metadata accessor for DispatchTimeInterval();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v12(v9, a1, v10);
  v12(a4 + *(int *)(v8 + 24), a2, v10);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(a4, a3, v10);
}

uint64_t SystemCoordinatorHostManager.configurationUpdatesRateLimit.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Participant(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, a1, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
}

uint64_t SystemCoordinatorHostManager.__allocating_init(configurationUpdatesRateLimit:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SystemCoordinatorHostManager.init(configurationUpdatesRateLimit:)(a1);
  return v2;
}

uint64_t SystemCoordinatorHostManager.init(configurationUpdatesRateLimit:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  _BYTE *v17;
  _QWORD *v18;
  id v19;
  objc_class *v20;
  _BYTE *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  objc_super v30;
  objc_super v31;

  v2 = v1;
  v28 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  v13 = MEMORY[0x1E0DEE9D8];
  v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SystemCoordinatorConfiguration]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts) = MEMORY[0x1E0DEE9E0];
  v14 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v29 = v13;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v5, *MEMORY[0x1E0DEF8D0], v27);
  *(_QWORD *)(v1 + v14) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v15 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state;
  v16 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  v17 = objc_allocWithZone(v16);
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  v18 = &v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)&v17[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v31.receiver = v17;
  v31.super_class = v16;
  v19 = objc_msgSendSuper2(&v31, sel_init);
  v20 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  v21 = objc_allocWithZone(v20);
  *(_QWORD *)&v21[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v19;
  v21[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(_QWORD *)&v21[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v30.receiver = v21;
  v30.super_class = v20;
  *(_QWORD *)(v2 + v15) = objc_msgSendSuper2(&v30, sel_init);
  v22 = v28;
  outlined init with copy of Participant(v28, v2 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
  type metadata accessor for ConversationManagerClient();
  v23 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v24, (uint64_t (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider, (uint64_t)&protocol conformance descriptor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v22);
  return v2;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x1A1B05BEC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

Swift::Void __swiftcall SystemCoordinatorHostManager.registerEndpointProvider()()
{
  void *v0;
  uint64_t v1;

  type metadata accessor for ConversationManagerClient();
  v0 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v1, (uint64_t (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider, (uint64_t)&protocol conformance descriptor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
}

uint64_t SystemCoordinatorHostManager.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SystemCoordinatorHostManager.init()();
  return v0;
}

uint64_t SystemCoordinatorHostManager.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  _BYTE *v16;
  _QWORD *v17;
  id v18;
  objc_class *v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  objc_super v35;
  objc_super v36;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  v12 = MEMORY[0x1E0DEE9D8];
  v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SystemCoordinatorConfiguration]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v11, v10, v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts) = MEMORY[0x1E0DEE9E0];
  v13 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v34 = v12;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v4, *MEMORY[0x1E0DEF8D0], v33);
  *(_QWORD *)(v0 + v13) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v14 = OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state;
  v15 = (objc_class *)type metadata accessor for SystemCoordinatorState.ParticipantState();
  v16 = objc_allocWithZone(v15);
  v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = 0;
  v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = 0;
  v17 = &v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v36.receiver = v16;
  v36.super_class = v15;
  v18 = objc_msgSendSuper2(&v36, sel_init);
  v19 = (objc_class *)type metadata accessor for SystemCoordinatorState();
  v20 = objc_allocWithZone(v19);
  *(_QWORD *)&v20[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v18;
  v20[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = 3;
  *(_QWORD *)&v20[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v35.receiver = v20;
  v35.super_class = v19;
  *(_QWORD *)(v1 + v14) = objc_msgSendSuper2(&v35, sel_init);
  v21 = (_QWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit);
  v22 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  v23 = (_QWORD *)((char *)v21 + *(int *)(v22 + 20));
  *v23 = 1;
  v24 = *MEMORY[0x1E0DEF4A0];
  v25 = type metadata accessor for DispatchTimeInterval();
  v26 = *(void (**)(void))(*(_QWORD *)(v25 - 8) + 104);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v26)(v23, v24, v25);
  *(_QWORD *)((char *)v21 + *(int *)(v22 + 24)) = 500;
  v27 = *MEMORY[0x1E0DEF490];
  v26();
  *v21 = 100;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v26)(v21, v27, v25);
  type metadata accessor for ConversationManagerClient();
  v28 = (void *)static ConversationManagerClient.shared.getter();
  type metadata accessor for SystemCoordinatorHostManager.EndpointProvider();
  swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type SystemCoordinatorHostManager.EndpointProvider and conformance SystemCoordinatorHostManager.EndpointProvider, v29, (uint64_t (*)(uint64_t))type metadata accessor for SystemCoordinatorHostManager.EndpointProvider, (uint64_t)&protocol conformance descriptor for SystemCoordinatorHostManager.EndpointProvider);
  ConversationManagerClient.registerEndpointProvider(_:)();

  swift_release();
  return v1;
}

uint64_t SystemCoordinatorHostManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  type metadata accessor for ConversationManagerClient();
  v2 = (void *)static ConversationManagerClient.shared.getter();
  v3._object = (void *)0x80000001A0F1AB70;
  v3._countAndFlagsBits = 0xD00000000000002CLL;
  ConversationManagerClient.unregisterEndpointProvider(identifier:)(v3);

  v4 = v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__configurations;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : SystemCoordinatorConfiguration]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  outlined destroy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(v1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit);
  return v1;
}

Swift::Void __swiftcall SystemCoordinatorHostManager.unregisterEndpointProvider()()
{
  Swift::String v0;
  id v1;

  type metadata accessor for ConversationManagerClient();
  v1 = (id)static ConversationManagerClient.shared.getter();
  v0._object = (void *)0x80000001A0F1AB70;
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  ConversationManagerClient.unregisterEndpointProvider(identifier:)(v0);

}

uint64_t SystemCoordinatorHostManager.__deallocating_deinit()
{
  SystemCoordinatorHostManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.__allocating_init(_:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

unint64_t static SystemCoordinatorHostManager.EndpointProvider.identifier.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t SystemCoordinatorHostManager.host(for:)()
{
  uint64_t v1;

  type metadata accessor for SystemCoordinatorHost();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

objc_class *closure #1 in SystemCoordinatorHostManager.host(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  objc_class *v16;
  objc_class *result;
  void (*v18)(char *, uint64_t, uint64_t);
  void *v19;
  id v20;
  id v21;
  objc_class *v22;
  char *v23;
  void *v24;
  void **v25;
  void *v26;
  id v27;
  objc_class *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  objc_class **v31;
  uint64_t v32;

  v31 = a3;
  v5 = type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_hosts);
  swift_beginAccess();
  v13 = *v12;
  if (*(_QWORD *)(*v12 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v15 & 1) != 0))
  {
    v16 = *(objc_class **)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_endAccess();
    *v31 = v16;
    return v16;
  }
  else
  {
    swift_endAccess();
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v18(v11, a2, v8);
    v30 = a2;
    v19 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
    outlined init with copy of Participant(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_configurationUpdatesRateLimit, (uint64_t)v7, type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit);
    v20 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorHost());
    v21 = v19;
    v22 = specialized SystemCoordinatorHost.init(uuid:queue:configurationUpdatesRateLimit:)((uint64_t)v11, v21, (uint64_t)v7);

    v23 = (char *)v22 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate;
    swift_beginAccess();
    *((_QWORD *)v23 + 1) = &protocol witness table for SystemCoordinatorHostManager;
    swift_unknownObjectWeakAssign();
    v24 = *(void **)(a1 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager__state);
    v25 = (void **)((char *)v22 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState);
    swift_beginAccess();
    v26 = *v25;
    *v25 = v24;
    v27 = v24;
    SystemCoordinatorHost.currentState.didset();

    v18(v11, v30, v8);
    swift_beginAccess();
    v28 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = *v12;
    *v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v28, (uint64_t)v11, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorHost>);
    *v12 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    result = (objc_class *)swift_endAccess();
    *v31 = v28;
  }
  return result;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.manager.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.manager.setter()
{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

void (*SystemCoordinatorHostManager.EndpointProvider.manager.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return SystemCoordinatorHostManager.EndpointProvider.manager.modify;
}

void SystemCoordinatorHostManager.EndpointProvider.manager.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_weakAssign();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.init(_:)()
{
  uint64_t v0;

  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

id SystemCoordinatorHostManager.EndpointProvider.customEndpoint(for:activity:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  void *v21;
  id v22;
  _QWORD v24[2];
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for systemCoordinator != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.systemCoordinator);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = a2;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v27 = a1;
    v13 = v12;
    v25 = (_QWORD *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v29[0] = v26;
    *(_DWORD *)v13 = 136315394;
    v24[1] = v13 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v13 + 12) = 2112;
    v28 = (uint64_t)v9;
    v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v17 = v25;
    *v25 = v9;

    _os_log_impl(&dword_1A0DB3000, v10, v11, "SystemCoordinatorHostManager: Received custom endpoint request for %s %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v17, -1, -1);
    v18 = v26;
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v18, -1, -1);
    v19 = v13;
    a1 = v27;
    MEMORY[0x1A1B05CC4](v19, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  }
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v24[-2] = MEMORY[0x1E0C80A78](Strong);
  v24[-1] = a1;
  type metadata accessor for SystemCoordinatorHost();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v21 = (void *)v28;
  v22 = *(id *)(v28 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_endpoint);

  return v22;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  return v0;
}

uint64_t SystemCoordinatorHostManager.EndpointProvider.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for static CustomEndpointProvider.identifier.getter in conformance SystemCoordinatorHostManager.EndpointProvider()
{
  return 0xD00000000000002CLL;
}

void SystemCoordinatorHostManager.systemCoordinatorHost(_:didUpdateConfiguration:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  id v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  void (*v37)(uint64_t *, _QWORD);
  uint64_t *v38;
  uint64_t *v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_8;
  }
  v3 = (uint64_t)a1 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v13 = v43[0];
  if (*(_QWORD *)(v43[0] + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v15 & 1) != 0))
  {
    v16 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    type metadata accessor for SystemCoordinatorConfiguration();
    v17 = v16;
    v18 = a2;
    v19 = static NSObject.== infix(_:_:)();

    if ((v19 & 1) != 0)
      return;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for systemCoordinator != -1)
    goto LABEL_13;
LABEL_8:
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.systemCoordinator);
  v21 = a2;
  v22 = a1;
  v23 = v21;
  v24 = v22;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v41 = v3;
    v29 = v28;
    v43[0] = v28;
    *(_DWORD *)v27 = 136315394;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    v42 = (uint64_t)v23;
    type metadata accessor for SystemCoordinatorConfiguration();
    v32 = v23;
    v33 = String.init<A>(reflecting:)();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v25, v26, "SystemCoordinatorHostManager: Updating configuration for %s to %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    v35 = v29;
    v3 = v41;
    MEMORY[0x1A1B05CC4](v35, -1, -1);
    MEMORY[0x1A1B05CC4](v27, -1, -1);

  }
  else
  {

  }
  swift_getKeyPath();
  swift_getKeyPath();
  v36 = v23;
  v37 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
  v39 = v38;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v42 = *v39;
  *v39 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v36, v3, isUniquelyReferenced_nonNull_native, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
  *v39 = v42;
  swift_bridgeObjectRelease();
  v37(v43, 0);
  swift_release();
  swift_release();
}

uint64_t SystemCoordinatorHostManager.systemCoordinatorHostDidInvalidate(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void (*v20)(uint64_t *, _QWORD);
  _QWORD v22[2];
  uint64_t v23[4];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR____TtC15GroupActivities28SystemCoordinatorHostManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for systemCoordinator == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.systemCoordinator);
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v23[0] = v15;
    *(_DWORD *)v14 = 136315138;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v22[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A0DB3000, v12, v13, "SystemCoordinatorHostManager: Host connection invalidated for %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1B05CC4](v15, -1, -1);
    MEMORY[0x1A1B05CC4](v14, -1, -1);

  }
  else
  {

  }
  v18 = (uint64_t)v11 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_uuid;
  swift_beginAccess();
  v19 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v18);
  swift_endAccess();

  swift_getKeyPath();
  swift_getKeyPath();
  v20 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();

  v20(v23, 0);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for SystemCoordinatorHostManager.EndpointProvider()
{
  return objc_opt_self();
}

objc_class *partial apply for closure #1 in SystemCoordinatorHostManager.host(for:)@<X0>(objc_class **a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SystemCoordinatorHostManager.host(for:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v5 = type metadata accessor for LinkManager.Attachment(0);
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LinkManager.Attachment>);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v21 = v11;
  for (i = v11; ; v21 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_35:
          swift_release();
          v3 = v43;
          if ((v48 & 1) == 0)
            goto LABEL_42;
          goto LABEL_36;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_44;
            if (v20 >= v44)
              goto LABEL_35;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v8 + 72);
    v30 = *(_QWORD *)(v21 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v30, v7);
      v31 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      outlined init with take of Participant(v31 + v32 * v24, v49, type metadata accessor for LinkManager.Attachment);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      v33 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      outlined init with copy of Participant(v33 + v32 * v24, v49, type metadata accessor for LinkManager.Attachment);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v10, v7);
    result = outlined init with take of Participant(v49, *(_QWORD *)(v13 + 56) + v32 * v22, type metadata accessor for LinkManager.Attachment);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v43;
  v26 = v45;
  if ((v48 & 1) == 0)
    goto LABEL_42;
LABEL_36:
  v41 = 1 << *(_BYTE *)(i + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(i + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)outlined init with take of Any(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;
  uint64_t v45;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorTable.Storage>);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v42 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v40 = v2;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  for (i = v8; ; v8 = i)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_34;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v41)
              goto LABEL_34;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v45 + 72);
    v27 = *(_QWORD *)(v8 + 48) + v26 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 32))(v7, v27, v5);
      v28 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v21);
      v30 = *v28;
      v29 = v28[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v7, v27, v5);
      v31 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v21);
      v30 = *v31;
      v29 = v31[1];
      swift_retain();
      swift_retain();
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v18, v7, v5);
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v18);
    *v19 = v30;
    v19[1] = v29;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v8 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  _BYTE v41[24];

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  v40 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v2;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of GroupSessionTable.Storage(*(_QWORD *)(v9 + 56) + 24 * v21, (uint64_t)v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of GroupSessionTable.Storage(*(_QWORD *)(v9 + 56) + 24 * v21, (uint64_t)v41);
    }
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = outlined init with take of GroupSessionTable.Storage((uint64_t)v41, *(_QWORD *)(v11 + 56) + 24 * v19);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v2;
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    v35 = v38;
LABEL_42:
    *v35 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v40 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  HIDWORD(v37) = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v41 = v17;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= v39)
    {
      swift_release();
      v35 = v38;
      v22 = v40;
      if ((v37 & 0x100000000) != 0)
      {
LABEL_37:
        v36 = 1 << *(_BYTE *)(v7 + 32);
        if (v36 >= 64)
          bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v22 = -1 << v36;
        *(_QWORD *)(v7 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v22 = v40;
    v23 = v40[v21];
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_34;
      v23 = v40[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + v41))(v6, *(_QWORD *)(v7 + 48) + v25 * v20, v4);
    v26 = v7;
    v27 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v20);
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v42 + 32))(*(_QWORD *)(v9 + 48) + v25 * v18, v6, v4);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v9 + 16);
    v7 = v26;
  }
  v24 = v21 + 2;
  if (v24 >= v39)
  {
LABEL_34:
    swift_release();
    v35 = v38;
    if ((v37 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v23 = v40[v24];
  if (v23)
  {
    v16 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v39)
      goto LABEL_34;
    v23 = v40[v16];
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  Swift::UInt16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v5 = type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest(0);
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ReliableBroadcastPacket.PacketIdentifier, ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest>);
  v41 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v39 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v37 = v2;
    v38 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v20 = v19 | (v11 << 6);
      }
      else
      {
        v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v21 >= v38)
          goto LABEL_34;
        v22 = v39[v21];
        ++v11;
        if (!v22)
        {
          v11 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_34;
          v22 = v39[v11];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_34:
              if ((v41 & 1) == 0)
              {
                result = swift_release();
                v3 = v37;
                goto LABEL_41;
              }
              v36 = 1 << *(_BYTE *)(v8 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v37;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v11 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v11 >= v38)
                  goto LABEL_34;
                v22 = v39[v11];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v11 = v23;
          }
        }
LABEL_21:
        v15 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      v24 = *(_QWORD *)(v8 + 48) + 8 * v20;
      v25 = *(_DWORD *)v24;
      v26 = *(_WORD *)(v24 + 4);
      v27 = *(_QWORD *)(v40 + 72);
      v28 = *(_QWORD *)(v8 + 56) + v27 * v20;
      if ((v41 & 1) != 0)
        outlined init with take of Participant(v28, (uint64_t)v7, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      else
        outlined init with copy of Participant(v28, (uint64_t)v7, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v10 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        v17 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = *(_QWORD *)(v10 + 48) + 8 * v17;
      *(_DWORD *)v18 = v25;
      *(_WORD *)(v18 + 4) = v26;
      result = outlined init with take of Participant((uint64_t)v7, *(_QWORD *)(v10 + 56) + v27 * v17, type metadata accessor for ReliableBroadcastLink.SenderContext.PendingRetransmissionRequest);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AsyncStream<Int>.Continuation>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = static Hasher._hash(seed:_:)();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
}

