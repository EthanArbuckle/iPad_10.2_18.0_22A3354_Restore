uint64_t CVPixelBufferBacking::getPixelBufferOptions(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 136);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  if (texture)
    CFRelease(texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  if (texture)
    CFRetain(texture);
  return texture;
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 344))(*(_QWORD *)(result + 120));
  return result;
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD, size_t))(**(_QWORD **)(result + 120) + 352))(*(_QWORD *)(result + 120), planeIndex);
  return result;
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD, CVPixelBufferLockFlags))(*(_QWORD *)CVPixelBuffer[15] + 424))(CVPixelBuffer[15], unlockFlags);
  else
    return -6661;
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD, size_t))(**(_QWORD **)(result + 120) + 360))(*(_QWORD *)(result + 120), planeIndex);
  return result;
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD, size_t))(**(_QWORD **)(result + 120) + 376))(*(_QWORD *)(result + 120), planeIndex);
  return result;
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  CFTypeRef result;

  result = _getCVBuffer(buffer);
  if (result)
    return (CFTypeRef)(*(uint64_t (**)(CFTypeRef, CFStringRef, CVAttachmentMode *))(*(_QWORD *)result + 96))(result, key, attachmentMode);
  return result;
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  void *result;

  result = _getCVPixelBuffer(pixelBuffer);
  if (result)
    return (void *)(*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)result + 15) + 368))(*((_QWORD *)result + 15), planeIndex, 1);
  return result;
}

_QWORD *CVPixelBufferGetAttributes(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVPixelBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[15] + 256))(result[15]);
  return result;
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  uint64_t v3;
  _QWORD *CVBuffer;

  v3 = *(_QWORD *)&attachmentMode;
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
    (*(void (**)(_QWORD *, CFDictionaryRef, uint64_t))(*CVBuffer + 136))(CVBuffer, theAttachments, v3);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  uint64_t v4;
  _QWORD *CVBuffer;

  v4 = *(_QWORD *)&attachmentMode;
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
    (*(void (**)(_QWORD *, CFStringRef, CFTypeRef, uint64_t))(*CVBuffer + 104))(CVBuffer, key, value, v4);
}

uint64_t CVPixelBufferBacking::unlockBaseAddress(CVPixelBufferBacking *this, char a2)
{
  pthread_mutex_t *v4;
  int v5;
  BOOL v6;
  int v7;
  __IOSurface *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __IOSurface *v13;

  v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v5 = *((_DWORD *)this + 42);
  v6 = __OFSUB__(v5, 1);
  v7 = v5 - 1;
  if (v7 < 0 != v6)
  {
    v10 = 4294960636;
  }
  else
  {
    *((_DWORD *)this + 42) = v7;
    v8 = (__IOSurface *)*((_QWORD *)this + 57);
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (IOSurfaceUnlock(v8, a2 & 1, 0))
        v10 = 4294960636;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
  }
  pthread_mutex_unlock(v4);
  if (gCVKTraceEnabled)
  {
    v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 160))(this);
    v12 = *(_QWORD *)this;
    if (v11)
    {
      v13 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v12 + 160))(this);
      IOOrEXSurfaceGetID(v13);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v12 + 24))(this);
    }
    kdebug_trace();
  }
  return v10;
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  uint64_t v2;
  CFDictionaryRef result;

  v2 = *(_QWORD *)&attachmentMode;
  result = (CFDictionaryRef)_getCVBuffer(buffer);
  if (result)
    return (CFDictionaryRef)(*(uint64_t (**)(CFDictionaryRef, uint64_t))(*(_QWORD *)result + 72))(result, v2);
  return result;
}

const void *CVBuffer::getAttachment(CFDictionaryRef *this, const __CFString *a2, CVAttachmentMode *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  const void *Value;

  v6 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  v7 = 0;
  v8 = 1;
  while (1)
  {
    v9 = v8;
    Value = CFDictionaryGetValue(this[v7 + 10], a2);
    if (Value)
      break;
    v8 = 0;
    v7 = 1;
    if ((v9 & 1) == 0)
      goto LABEL_7;
  }
  if (a3)
    *a3 = v7;
LABEL_7:
  pthread_mutex_unlock(v6);
  return Value;
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  _QWORD *CVPixelBuffer;
  CVReturn result;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (!CVPixelBuffer)
    return -6661;
  result = (*(uint64_t (**)(_QWORD, CVPixelBufferLockFlags))(*(_QWORD *)CVPixelBuffer[15] + 416))(CVPixelBuffer[15], lockFlags);
  if (lockFlags != 1 && !result)
  {
    CVBufferRemoveAttachment(pixelBuffer, CFSTR("ExtendedPixelsFilledKey"));
    return 0;
  }
  return result;
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  _QWORD *CVBuffer;

  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
    (*(void (**)(_QWORD *, CFStringRef))(*CVBuffer + 112))(CVBuffer, key);
}

uint64_t CVPixelBufferBacking::lockBaseAddress(CVPixelBufferBacking *this, char a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  __IOSurface *v7;
  __IOSurface *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __IOSurface *v13;

  if ((v4 & 1) == 0
  {
    CVPixelBufferBacking::lockBaseAddress(unsigned long long)::ktrace_seed = arc4random();
  }
  if (gCVKTraceEnabled)
  {
    ++CVPixelBufferBacking::lockBaseAddress(unsigned long long)::ktrace_seed;
    if (this)
    {
      v5 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 160))(this);
      v6 = *(_QWORD *)this;
      if (v5)
      {
        v7 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v6 + 160))(this);
        IOOrEXSurfaceGetID(v7);
      }
      else
      {
        (*(void (**)(CVPixelBufferBacking *))(v6 + 24))(this);
      }
    }
    kdebug_trace();
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v8 = (__IOSurface *)*((_QWORD *)this + 57);
  v9 = *((_DWORD *)this + 42);
  if (v8 && !v9)
  {
    if (IOSurfaceLock(v8, a2 & 1, 0))
    {
      v10 = 4294960636;
      goto LABEL_15;
    }
    v9 = *((_DWORD *)this + 42);
  }
  v10 = 0;
  *((_DWORD *)this + 42) = v9 + 1;
LABEL_15:
  (*(void (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 224))(this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
  if (gCVKTraceEnabled)
  {
    v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 160))(this);
    v12 = *(_QWORD *)this;
    if (v11)
    {
      v13 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v12 + 160))(this);
      IOOrEXSurfaceGetID(v13);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v12 + 24))(this);
    }
    kdebug_trace();
  }
  return v10;
}

void sub_1A2C44164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CVImageBacking::flushCachedGLESTexture(CVImageBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 19);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 328))(result);
    *((_QWORD *)this + 19) = 0;
  }
  return result;
}

void applySetAttachments(const void *key, const void *a2, CFDictionaryRef *a3)
{
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a2)
  {
    Value = CFDictionaryGetValue(*a3, key);
    v7 = Value;
    if (Value)
      CFRetain(Value);
    CFDictionaryRemoveValue(*a3, key);
    v8 = CFDictionaryGetValue(a3[1], key);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    CFDictionaryRemoveValue(a3[1], key);
    CFDictionarySetValue(a3[*((unsigned int *)a3 + 4)], key, a2);
    if (v7)
      CFRelease(v7);
    if (v9)
      CFRelease(v9);
  }
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 272))(*(_QWORD *)(result + 120));
  return result;
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 280))(*(_QWORD *)(result + 120));
  return result;
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  IOSurfaceRef result;

  result = (IOSurfaceRef)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (IOSurfaceRef)(*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 15) + 152))(*((_QWORD *)result + 15));
  return result;
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
    LODWORD(CVPixelBuffer) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 192))(CVPixelBuffer[15]);
  return CVPixelBuffer;
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  CFTypeRef result;

  result = _getCVBuffer(buffer);
  if (result)
    return (CFTypeRef)(*(uint64_t (**)(CFTypeRef, CFStringRef, CVAttachmentMode *))(*(_QWORD *)result + 80))(result, key, attachmentMode);
  return result;
}

_QWORD *_getCVBuffer(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID() || v2 == CVDataBufferGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

_QWORD *_getCVPixelBuffer(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  if (CVPixelBufferGetTypeID::once != -1)
    dispatch_once_f(&CVPixelBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBuffer);
  return kCVPixelBufferID;
}

uint64_t CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(CVPixelBufferBacking *this, void *a2, uint64_t a3, const __CFAllocator *a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unint64_t a9, __int128 a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t *a17, void **a18, unint64_t *a19, unint64_t *a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,__IOSurface **a24,__IOSurface *a25,__CVBuffer *a26,unsigned int *a27,unint64_t *a28,void **a29,const __CFDictionary **a30)
{
  __CFString *v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  const __CFAllocator *v36;
  const __CFAllocator *v37;
  int v38;
  int v39;
  int v41;
  uint64_t v42;
  _QWORD *BufferBacking;
  const __CFArray *Value;
  const __CFArray *v45;
  unint64_t Count;
  unint64_t v47;
  const void *ValueAtIndex;
  __CFDictionary *v49;
  CFMutableDictionaryRef Mutable;
  uint64_t IntValueWithDefault;
  BOOL v52;
  __CFString *v53;
  __CFString *v54;
  const __CFBoolean *v55;
  int v56;
  BOOL v57;
  int DefaultBytesPerRowAlignment;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  CFIndex v63;
  unint64_t v64;
  const void *v65;
  const void *v66;
  unint64_t v67;
  unint64_t v68;
  __CFString *v69;
  CFIndex v70;
  int v71;
  const void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  const __CFArray *v78;
  const __CFArray *v79;
  unint64_t v80;
  const void *v81;
  unint64_t v82;
  BOOL v83;
  int v84;
  const void *v85;
  const void *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t IntInArrayWithDefault;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  CFIndex v107;
  int v108;
  __CFString *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t v122;
  unint64_t v123;
  uint8x8_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint8x8_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8x8_t v144;
  const void *v145;
  int BoolValueWithDefault;
  uint64_t v147;
  size_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  char v161;
  char v162;
  char v163;
  unsigned int v164;
  char v165;
  char v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  size_t AllocSize;
  uint64_t v187;
  unint64_t v188;
  unint64_t v190;
  void *v191;
  unint64_t v192;
  uint64_t v193;
  void **v194;
  _DWORD *v195;
  unsigned int v196;
  CFTypeID v197;
  __CFDictionary *MutableCopy;
  const void *v199;
  const __CFString *v200;
  int v201;
  const void *v202;
  uint64_t v203;
  unint64_t v204;
  const __CFString *v205;
  int v206;
  const __CFString *v207;
  int v208;
  const __CFString *v209;
  int v210;
  uint64_t v211;
  BOOL v212;
  int v213;
  const void *v214;
  CFIndex v215;
  const void *v216;
  __CFDictionary *v217;
  unint64_t v218;
  int v219;
  const void *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  const __CFArray *v233;
  const __CFArray *v234;
  CFTypeID TypeID;
  const void *v236;
  const void *v237;
  void **v238;
  uint64_t ChildIOSurface;
  __IOSurface *v240;
  char v241;
  CFIndex i;
  const __CFDictionary *v243;
  int v244;
  BOOL v245;
  void *BaseAddressOfCompressedTileHeaderRegionOfPlane;
  const __CFNumber *v247;
  const __CFNumber *v248;
  CFTypeID v249;
  int v250;
  unint64_t v251;
  IOSurfaceRef BaseAddress;
  _DWORD *v253;
  unsigned int *v254;
  unint64_t *v255;
  unsigned int v256;
  unsigned int v257;
  unint64_t *v258;
  CFTypeRef v259;
  const void *v260;
  const void *v261;
  const void *v262;
  const void *v263;
  int v264;
  int v265;
  const void *v266;
  const void *v267;
  int v268;
  int v269;
  unint64_t v270;
  BOOL v271;
  uint64_t v272;
  const void *v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  __CFString *v277;
  __CFString *v278;
  __CFString *v279;
  _BOOL4 v280;
  char v281;
  const __CFDictionary *v282;
  __CFString *v283;
  BOOL v284;
  __CFString *v285;
  const __CFAllocator *allocator;
  const __CFString *allocatora;
  __CFString *v288;
  __CFString *v289;
  unint64_t v290;
  char *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  const void *v295;
  __CFString *v296;
  __CFString *v297;
  int v298;
  __CFString *v299;
  int v300;
  uint64_t v301;
  int v302;
  unint64_t v303;
  __CFString *v304;
  __CFString *v305;
  __CFString *v306;
  unint64_t v307;
  __CFString *v308;
  unint64_t v309;
  __CFString *v310;
  __CFString *v311;
  __CFString *v312;
  unint64_t v313;
  __CFString *v314;
  unint64_t v315;
  __CFString *v316;
  __CFString *v317;
  __CFString *v318;
  unint64_t v319;
  __CFString *v320;
  unint64_t v321;
  char v322;
  __CFString *v323;
  __CFString *v324;
  __CFString *v325;
  __CFString *v326;
  __CFString *v327;
  unint64_t v328;
  __CFString *v329;
  const void *v330;
  __CFDictionary *cf;
  __CFDictionary *cfa;
  const void *v333;
  __IOSurface **buffer;
  const void *v335;
  const void *v336;
  const void *v337;
  CFDictionaryRef v338;
  CFDictionaryRef v339;
  CFIndex v340;
  __CFArray *v341;
  const void *v342;
  unint64_t v343;
  unint64_t v344;
  CFDictionaryRef theDict;
  __CFDictionary *properties;
  __CFString *v347;
  const __CFArray *theArray;
  __CFString *v349;
  __CFString *v350;
  unsigned __int8 valuePtr;
  IOSurfaceSubsampling v352[2];
  __CFString *v353;
  unint64_t v354;
  unint64_t v355;
  _OWORD v356[8];
  _DWORD v357[32];
  _QWORD v358[16];
  _QWORD v359[16];
  _QWORD v360[16];
  _QWORD v361[16];
  _QWORD v362[16];
  _DWORD v363[32];
  _DWORD v364[32];
  _DWORD v365[32];
  _DWORD v366[32];
  _QWORD v367[16];
  _DWORD v368[32];
  _DWORD v369[32];
  _DWORD v370[32];
  _DWORD v371[32];
  _DWORD v372[32];
  _DWORD v373[32];
  _DWORD v374[32];
  _DWORD v375[32];
  _DWORD v376[32];
  _DWORD v377[16];
  _DWORD v378[32];
  _QWORD v379[16];
  _QWORD v380[16];
  unint64_t v381[2];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  _QWORD v389[20];

  MEMORY[0x1E0C80A78](this, a2, a3, a4, a5, a6, a7, a8);
  v311 = v30;
  v32 = v31;
  v282 = v33;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v389[17] = *MEMORY[0x1E0C80C00];
  memset(v389, 0, 128);
  v388 = 0u;
  v387 = 0u;
  v386 = 0u;
  v385 = 0u;
  v384 = 0u;
  v383 = 0u;
  v382 = 0u;
  *(_OWORD *)v381 = 0u;
  memset(v380, 0, sizeof(v380));
  memset(v379, 0, sizeof(v379));
  memset(v378, 0, sizeof(v378));
  memset(v377, 0, sizeof(v377));
  memset(v376, 0, sizeof(v376));
  memset(v375, 0, sizeof(v375));
  memset(v374, 0, sizeof(v374));
  memset(v373, 0, sizeof(v373));
  memset(v372, 0, sizeof(v372));
  memset(v371, 0, sizeof(v371));
  memset(v370, 0, sizeof(v370));
  memset(v369, 0, sizeof(v369));
  memset(v368, 0, sizeof(v368));
  memset(v367, 0, sizeof(v367));
  memset(v366, 0, sizeof(v366));
  memset(v365, 0, sizeof(v365));
  memset(v364, 0, sizeof(v364));
  memset(v363, 0, sizeof(v363));
  memset(v362, 0, sizeof(v362));
  memset(v361, 0, sizeof(v361));
  memset(v360, 0, sizeof(v360));
  memset(v359, 0, sizeof(v359));
  memset(v358, 0, sizeof(v358));
  v355 = 0;
  v354 = 0;
  v353 = 0;
  memset(v357, 0, sizeof(v357));
  v41 = _os_feature_enabled_impl();
  v42 = 8;
  memset(&v356[6], 0, 32);
  if (v41)
    v42 = 1;
  v328 = v42;
  memset(v356, 0, 96);
  if (a25)
  {
    BufferBacking = CVPixelBufferGetBufferBacking(a25);
    if (BufferBacking)
      a24 = *(__IOSurface ***)(BufferBacking[2] + 456);
  }
  buffer = a24;
  if (a29)
    *a29 = 0;
  Value = (const __CFArray *)CFDictionaryGetValue(v32, CFSTR("Planes"));
  v45 = Value;
  theDict = v32;
  v300 = v39;
  allocator = v37;
  if (Value)
  {
    Count = CFArrayGetCount(Value);
    v47 = Count;
    if (Count == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v45, 0);
    }
    else
    {
      if (Count > 0x10)
        return 4294960635;
      ValueAtIndex = 0;
    }
  }
  else
  {
    v47 = 0;
    ValueAtIndex = v32;
  }
  v49 = (__CFDictionary *)CFDictionaryGetValue(v35, CFSTR("IOSurfaceProperties"));
  if (v49)
  {
    Mutable = v49;
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v49, (const void *)local_kIOSurfaceProtectionOptions, 0);
    v52 = IntValueWithDefault == 0;
    v280 = IntValueWithDefault != 0;
    v284 = CVDictionaryGetBoolValueWithDefault(Mutable, (const void *)local_kIOSurfaceProhibitUseCount, 0) == 0;
    CFRetain(Mutable);
LABEL_16:
    v281 = v52;
    v53 = (__CFString *)CFDictionaryGetValue(Mutable, CFSTR("Planes"));
    v54 = v53;
    v52 = 0;
    goto LABEL_31;
  }
  v55 = (const __CFBoolean *)CFDictionaryGetValue(v35, CFSTR("IOSurfaceCoreAnimationCompatibility"));
  if (!v55)
  {
    v53 = (__CFString *)CFDictionaryGetValue(v35, CFSTR("MetalCompatibility"));
    v57 = 0;
    if (!v53)
    {
      v280 = 0;
      Mutable = 0;
      goto LABEL_29;
    }
LABEL_22:
    v53 = (__CFString *)CFBooleanGetValue((CFBooleanRef)v53);
    if (!(_DWORD)v53 && !v57)
      goto LABEL_24;
    goto LABEL_25;
  }
  v56 = CFBooleanGetValue(v55);
  v57 = v56 != 0;
  v53 = (__CFString *)CFDictionaryGetValue(v35, CFSTR("MetalCompatibility"));
  if (v53)
    goto LABEL_22;
  if (!v56)
  {
LABEL_24:
    Mutable = 0;
    v280 = 0;
LABEL_29:
    v54 = 0;
    v52 = 1;
    goto LABEL_30;
  }
LABEL_25:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("IOSurfacePurgeWhenNotInUse"), (const void *)*MEMORY[0x1E0C9AE50]);
  v280 = 0;
  v52 = 1;
  if (Mutable)
  {
    v284 = 1;
    goto LABEL_16;
  }
  v54 = 0;
LABEL_30:
  v281 = 1;
  v284 = 1;
LABEL_31:
  DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment((CVPixelBufferBacking *)v53);
  if (DefaultBytesPerRowAlignment >= 0)
    v59 = DefaultBytesPerRowAlignment;
  else
    v59 = -DefaultBytesPerRowAlignment;
  if ((a13 & 0x80000000) == 0)
    v60 = a13;
  else
    v60 = -(int)a13;
  if (v59 <= v60)
    v61 = v60;
  else
    v61 = v59;
  if (v59 < v60)
    v60 = v59;
  if (v60)
  {
    if (v60 < 1)
    {
      v62 = v61;
    }
    else
    {
      do
      {
        v62 = v60;
        v60 = (int)v61 % v60;
        v61 = v62;
      }
      while (v60 > 0);
    }
  }
  else if (v61 <= 1)
  {
    v62 = 1;
  }
  else
  {
    v62 = v61;
  }
  v315 = DefaultBytesPerRowAlignment * (int)a13 / v62;
  theArray = v45;
  if (!v47)
  {
    v178 = v52;
    if (a20)
      *a20 = 0;
    v179 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BitsPerBlock"), 1);
    CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("HorizontalSubsampling"), 1);
    CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("VerticalSubsampling"), 1);
    v180 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockWidth"), 1);
    v181 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockHeight"), 1);
    v182 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockHorizontalAlignment"), 1);
    v183 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockVerticalAlignment"), 1);
    v184 = CVDictionaryGetIntValueWithDefault(v35, CFSTR("ExactBytesPerRow"), 0);
    v185 = CVDictionaryGetIntValueWithDefault(v35, CFSTR("ExactHeight"), 0);
    if ((!v185 || v185 == *((_QWORD *)&a10 + 1) + a9 + a12)
      && (!CVDictionaryGetBoolValueWithDefault(theDict, CFSTR("ContainsSenselArray"), 0)
       || (a9 & 1) == 0 && ((a12 | DWORD2(a10)) & 1) == 0))
    {
      v355 = 0;
      v380[0] = 0;
      if (!a27 || !buffer)
      {
        v190 = 8;
        if (!v184)
          v190 = 16;
        v102 = _CVPixelBufferLayoutPlane(v180, v181, v179, v182, v183, (uint64_t)v311, a9, a10, *((unint64_t *)&a10 + 1), a11, a12, v190, v328, v315, a15, a16, v184, (unint64_t *)&v353, v381,
                 &v355,
                 &v354);
        if (!(_DWORD)v102)
        {
          v77 = 0;
          v177 = 0;
          v176 = v355;
          v379[0] = v355;
          v290 = 1;
          a24 = buffer;
          goto LABEL_221;
        }
        goto LABEL_226;
      }
      v353 = (__CFString *)a13;
      v176 = a13 * a9;
      v355 = a13 * a9;
      a24 = buffer;
      AllocSize = IOSurfaceGetAllocSize((IOSurfaceRef)buffer);
      v187 = *(_QWORD *)a27;
      if (*(_QWORD *)a27 + a13 * a9 <= AllocSize)
      {
        v381[0] = *(_QWORD *)a27;
        if (((v187 + 63) & 0xFFFFFFFFFFFFFFC0) == v187)
        {
          LODWORD(v102) = 0;
          v177 = 0;
          v77 = 0;
          v302 = 1;
          v290 = 1;
          v188 = v315;
          goto LABEL_233;
        }
      }
    }
    goto LABEL_225;
  }
  v325 = v54;
  v271 = v52;
  v63 = 0;
  v64 = 0;
  v349 = 0;
  *(_QWORD *)v352 = 0;
  do
  {
    v65 = CFArrayGetValueAtIndex(v45, v63);
    if (v65)
    {
      v66 = v65;
      v67 = CVDictionaryGetIntValueWithDefault(v65, CFSTR("HorizontalSubsampling"), 1);
      v68 = CVDictionaryGetIntValueWithDefault(v66, CFSTR("VerticalSubsampling"), 1);
      v69 = v349;
      if (v67 > (unint64_t)v349)
        v69 = (__CFString *)v67;
      v349 = v69;
      if (v68 > v64)
        v64 = v68;
    }
    ++v63;
  }
  while (v47 != v63);
  v270 = v64;
  cf = Mutable;
  v338 = v35;
  v313 = CVDictionaryGetIntValueWithDefault(v35, CFSTR("CompressedDataRegionAlignment"), 512);
  v70 = 0;
  v71 = 0;
  do
  {
    v72 = CFArrayGetValueAtIndex(theArray, v70);
    v73 = CVDictionaryGetIntValueWithDefault(v72, CFSTR("CompressionType"), 0);
    v377[v70] = v73;
    v74 = CVDictionaryGetIntValueWithDefault(v72, CFSTR("TiledAddressFormat"), 0);
    v362[v70] = v74;
    if (v73 || v74 == 5)
    {
      if (v73 > 4)
      {
LABEL_217:
        v102 = 4294960634;
LABEL_218:
        Mutable = cf;
        goto LABEL_226;
      }
      v71 = 1;
    }
    ++v70;
  }
  while (v47 != v70);
  v75 = 8 * v47;
  if (v47 <= 1)
    v76 = 0;
  else
    v76 = v47;
  if (v71)
  {
    v75 = 0;
    v77 = v47;
  }
  else
  {
    v77 = v76;
  }
  if (a20)
    *a20 = v77;
  *(_QWORD *)v352 = (a14 - 1 + v75) / a14 * a14;
  v78 = theArray;
  v79 = (const __CFArray *)v325;
  if (v77)
  {
    v80 = 0;
    v264 = 0;
    v268 = 0;
    v81 = 0;
    v82 = 0;
    v291 = (char *)&v311[-1].length + 7;
    if (a27)
      v83 = a24 == 0;
    else
      v83 = 1;
    v266 = (const void *)*MEMORY[0x1E0CBC170];
    v267 = (const void *)*MEMORY[0x1E0CBC150];
    v262 = (const void *)*MEMORY[0x1E0CBC088];
    v263 = (const void *)*MEMORY[0x1E0CBC128];
    v260 = (const void *)*MEMORY[0x1E0CBC0A0];
    v261 = (const void *)*MEMORY[0x1E0CBC130];
    v301 = a9 - 1;
    v84 = !v83;
    v265 = v84;
    v272 = 8 * v77;
    v273 = (const void *)*MEMORY[0x1E0CBBED8];
    v290 = 1;
    v305 = v353;
    v35 = v338;
    v343 = v77;
    while (1)
    {
      v85 = CFArrayGetValueAtIndex(v78, v82);
      v86 = cf;
      if (v79)
      {
        v86 = v81;
        if (v82 < CFArrayGetCount(v79))
          v86 = CFArrayGetValueAtIndex(v79, v82);
      }
      v340 = v82;
      v319 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("BitsPerBlock"), 1);
      *(_QWORD *)&v378[v80 / 4] = v319;
      v87 = 1;
      v88 = 1;
      if (v77 != 1)
      {
        v87 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("HorizontalSubsampling"), 1);
        v88 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("VerticalSubsampling"), 1);
      }
      v307 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("BlockWidth"), 1);
      v321 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("BlockHeight"), 1);
      CVDictionaryGetIntValueWithDefault(v85, CFSTR("BlockHorizontalAlignment"), 1);
      CVDictionaryGetIntValueWithDefault(v85, CFSTR("BlockVerticalAlignment"), 1);
      if (v87 <= 1)
        v89 = 1;
      else
        v89 = v87;
      if (v88 <= 1)
        v90 = 1;
      else
        v90 = v88;
      IntInArrayWithDefault = CVDictionaryGetIntInArrayWithDefault(v35, CFSTR("ExactBytesPerRow"), v340, 0);
      v92 = CVDictionaryGetIntValueWithDefault(theDict, CFSTR("ExactRatioBetweenBytesPerRowOfPlanes"), 0);
      if (v343 == 2)
      {
        v93 = a12;
        v94 = a11;
        if (v80 == 8 && v92)
        {
          if (IntInArrayWithDefault)
          {
            if (v389[0] * v92 != IntInArrayWithDefault)
              goto LABEL_217;
          }
          else
          {
            IntInArrayWithDefault = v389[0] * v92;
          }
        }
      }
      else
      {
        v93 = a12;
        v94 = a11;
      }
      v342 = v86;
      v292 = IntInArrayWithDefault;
      v95 = 8;
      if (!IntInArrayWithDefault)
        v95 = 16;
      if (v89 > v95)
        v96 = 1;
      else
        v96 = v95 / v89;
      v97 = v328 / v90;
      if (v90 > v328)
        v97 = 1;
      v274 = v97;
      v277 = (__CFString *)v96;
      v98 = __CFADD__(v291, v89);
      v99 = __CFADD__(v301, v90);
      v100 = (unint64_t)a10 / v89;
      v361[v80 / 8] = (unint64_t)a10 / v89;
      v360[v80 / 8] = v94 / v89;
      v101 = *((_QWORD *)&a10 + 1) / v90;
      v359[v80 / 8] = *((_QWORD *)&a10 + 1) / v90;
      v309 = v93 / v90;
      v358[v80 / 8] = v93 / v90;
      v102 = 4294960634;
      if (v98 || v99)
        goto LABEL_218;
      v103 = v94 / v89;
      v104 = (v301 + v90) / v90;
      if (CVDictionaryGetBoolValueWithDefault(theDict, CFSTR("ContainsSenselArray"), 0)
        && v343 != 4
        && (v104 & 1) != 0)
      {
        goto LABEL_217;
      }
      a21[v80 / 8] = (unint64_t)&v291[v89] / v89;
      a22[v80 / 8] = v104;
      v105 = CVDictionaryGetIntValueWithDefault(v338, CFSTR("ExactHeight"), 0);
      if (v105)
      {
        if (v105 != *((_QWORD *)&a10 + 1) + a9 + a12)
          goto LABEL_217;
      }
      v303 = (unint64_t)&v291[v89] / v89;
      v106 = (a14 - 1 + *(_QWORD *)v352) / a14 * a14;
      *(_QWORD *)v352 = v106;
      v107 = v340;
      v108 = v377[v340];
      v78 = theArray;
      v317 = (__CFString *)v104;
      if ((v108 - 1) >= 2)
      {
        if (v108)
        {
          if ((v108 - 3) > 1)
            goto LABEL_129;
          v110 = v106;
          if (areUniversalCompressedBuffers2KAligned())
          {
            v111 = (v110 + v313 - 1) / v313 * v313;
            v313 = (v313 + 2047) & 0xFFFFFFFFFFFFF800;
            if (v111 != v110)
              CVDictionaryGetIntValueWithDefault(theDict, CFSTR("PixelFormat"), 0);
          }
          v106 = v110;
        }
        else if (v362[v80 / 8] != 5)
        {
          v380[v80 / 8] = v106;
          v109 = (__CFString *)&v380[v340];
          goto LABEL_166;
        }
      }
      v106 = (v106 + v313 - 1) / v313 * v313;
      *(_QWORD *)v352 = v106;
LABEL_129:
      v109 = (__CFString *)&v380[v80 / 8];
      v380[v80 / 8] = v106;
      if ((v108 - 2) < 3)
        goto LABEL_130;
      if (v108)
      {
        if (v108 == 1)
        {
          v294 = v106;
          v278 = (__CFString *)LODWORD(v362[v80 / 8]);
          v116 = CVDictionaryGetIntValueWithDefault(v338, CFSTR("CompressedTileHeaderGroupBytesPerRowAlignment"), 128);
          *(_QWORD *)&v365[v80 / 4] = CVDictionaryGetIntValueWithDefault(v342, v263, 1);
          v117 = CVDictionaryGetIntValueWithDefault(v342, v262, 4);
          v118 = v117;
          *(_QWORD *)&v370[v80 / 4] = v117;
          if (v117 != 8 && v117 != 4)
            goto LABEL_217;
          v288 = (__CFString *)&v380[v80 / 8];
          v119 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("TileWidth"), 1);
          *(_QWORD *)&v376[v80 / 4] = v119;
          v102 = 4294960634;
          if ((unint64_t)(v119 - 1) > 0x3FE)
            goto LABEL_218;
          v120 = v119;
          v121 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
          v121.i16[0] = vaddlv_u8(v121);
          if (v121.u32[0] > 1uLL)
            goto LABEL_218;
          v122 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("TileHeight"), 1);
          *(_QWORD *)&v375[v80 / 4] = v122;
          if ((unint64_t)(v122 - 1) > 0x3FE)
            goto LABEL_218;
          v123 = v122;
          v124 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
          v124.i16[0] = vaddlv_u8(v124);
          if (v124.u32[0] > 1uLL)
            goto LABEL_218;
          v125 = CVDictionaryGetIntValueWithDefault(v342, v267, 0);
          *(_QWORD *)&v372[v80 / 4] = v125;
          if (v125 > v120)
            goto LABEL_218;
          v126 = v125;
          v275 = v116;
          v127 = CVDictionaryGetIntValueWithDefault(v342, v266, 0);
          *(_QWORD *)&v371[v80 / 4] = v127;
          if (v127 > v123)
            goto LABEL_218;
          v128 = v127;
          v129 = CVDictionaryGetIntValueWithDefault(v342, v261, 0);
          *(_QWORD *)&v363[v80 / 4] = v129;
          if (v129 > 3)
            goto LABEL_218;
          if (a10 != 0)
            goto LABEL_218;
          if (v120 % v307)
            goto LABEL_218;
          v130 = (v120 + v303 + v103 + v126 - 1) / v120;
          if (v130 * v120 < v120)
            goto LABEL_218;
          *(_QWORD *)&v369[v80 / 4] = v130;
          if (v123 % v321)
            goto LABEL_218;
          v131 = v129;
          v132 = ((unint64_t)v317 + (v123 << v129) + v309 + v128 - 1) / (v123 << v129) * (v123 << v129);
          if (v132 < v123 << v129)
            goto LABEL_217;
          v133 = v132 / v123;
          *(_QWORD *)&v368[v80 / 4] = v132 / v123;
          v134 = (v118 * v130) << v129;
          v135 = CVDictionaryGetIntValueWithDefault(v342, v260, (v134 + v275 - 1) / v275 * v275);
          *(_QWORD *)&v364[v80 / 4] = v135;
          if (v135 < v134)
            goto LABEL_217;
          v381[v80 / 8] = v294;
          v136 = (v313 + v135 * (v133 >> v131) + v294 - 1) / v313 * v313;
          *(_QWORD *)&v366[v80 / 4] = v136;
          v137 = (v123 * v120 * v319 + 7) >> 3;
          *(_QWORD *)&v357[v80 / 4] = v137;
          *(_QWORD *)v352 = v136 + v133 * v130 * v137;
          v268 = 1;
          a24 = buffer;
          v35 = v338;
          v78 = theArray;
          v77 = v343;
          v107 = v340;
          v138 = (unint64_t)v305;
LABEL_197:
          v153 = (uint64_t)v278;
          goto LABEL_198;
        }
      }
      else if (v362[v80 / 8] == 5)
      {
LABEL_130:
        v293 = v106;
        v278 = (__CFString *)LODWORD(v362[v80 / 8]);
        v112 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("BytesPerTileHeader"), 2);
        v113 = v112;
        *(_QWORD *)&v370[v80 / 4] = v112;
        v288 = (__CFString *)&v380[v80 / 8];
        switch(v112)
        {
          case 32:
            v115 = 32;
            v114 = 32;
            break;
          case 8:
            v115 = 16;
            v114 = 16;
            break;
          case 2:
            v114 = 16;
            if (v319 <= 0x20)
              v115 = 16;
            else
              v115 = 8;
            break;
          default:
            goto LABEL_217;
        }
        v139 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("TileWidth"), 1);
        *(_QWORD *)&v376[v80 / 4] = v139;
        v102 = 4294960634;
        if ((unint64_t)(v139 - 1) > 0x3FE)
          goto LABEL_218;
        v140 = v139;
        v141 = (uint8x8_t)vcnt_s8((int8x8_t)v139);
        v141.i16[0] = vaddlv_u8(v141);
        if (v141.u32[0] > 1uLL)
          goto LABEL_218;
        v142 = CVDictionaryGetIntValueWithDefault(v85, CFSTR("TileHeight"), 1);
        *(_QWORD *)&v375[v80 / 4] = v142;
        if ((unint64_t)(v142 - 1) > 0x3FE)
          goto LABEL_218;
        v143 = v142;
        v144 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
        v144.i16[0] = vaddlv_u8(v144);
        if (v144.u32[0] > 1uLL)
          goto LABEL_218;
        v276 = v115;
        if (v108 == 2)
        {
          v145 = v342;
        }
        else
        {
          BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(theDict, CFSTR("MultiSlice"), 0);
          v145 = v342;
          if (BoolValueWithDefault)
          {
            v264 = BoolValueWithDefault;
            v290 = CVDictionaryGetIntValueWithDefault(v338, CFSTR("NumberOfSlices"), 0);
            if (v290 < 2)
            {
              v102 = 4294960635;
              goto LABEL_218;
            }
          }
          else
          {
            v264 = 0;
          }
        }
        v154 = CVDictionaryGetIntValueWithDefault(v145, v267, 0);
        *(_QWORD *)&v372[v80 / 4] = v154;
        if (v154 > v140)
          goto LABEL_218;
        v155 = v154;
        v156 = CVDictionaryGetIntValueWithDefault(v145, v266, 0);
        *(_QWORD *)&v371[v80 / 4] = v156;
        if (v156 > v143)
          goto LABEL_217;
        v157 = (v103 + v303 + v155 + v140 - 1) / v140;
        if (v157 * v140 < v140)
          goto LABEL_217;
        v158 = v114;
        *(_QWORD *)&v369[v80 / 4] = v157;
        v159 = ((unint64_t)v317 + v156 + v143 + v309 - 1) / v143;
        if (v159 * v143 < v143)
          goto LABEL_217;
        *(_QWORD *)&v368[v80 / 4] = v159;
        if (a10 != 0 || v140 % v307 || v143 % v321)
          goto LABEL_217;
        v160 = (int)v157 * (int)v140 / v276;
        v161 = __clz(v160);
        if (0x80000000 >> v161 >= v160)
          v162 = 31;
        else
          v162 = 32;
        v163 = v162 - v161;
        v164 = (int)v159 * (int)v143 / v158;
        v165 = __clz(v164);
        if (0x80000000 >> v165 >= v164)
          v166 = 31;
        else
          v166 = 32;
        v322 = v166;
        v167 = v113 << v163;
        *(_QWORD *)&v364[v80 / 4] = v113 << v163;
        v168 = (v140 * v143 * v319 + 7) >> 3;
        *(_QWORD *)&v357[v80 / 4] = v168;
        if ((v108 - 3) > 1)
        {
          v170 = 128;
        }
        else
        {
          v169 = areUniversalCompressedBuffers2KAligned();
          v170 = 128;
          if (v169)
            v170 = 2048;
        }
        v35 = v338;
        v77 = v343;
        v138 = (unint64_t)v305;
        v171 = v159 * v157 * v168;
        v172 = (v171 + v170 - 1) & -v170;
        if (((v171 + 127) & 0xFFFFFFFFFFFFFF80) != v172)
          CVDictionaryGetIntValueWithDefault(theDict, CFSTR("PixelFormat"), 0);
        v173 = ((v167 << (v322 - v165)) + 127) & 0xFFFFFFFFFFFFFF80;
        *(_QWORD *)((char *)v356 + v80) = v173;
        v381[v80 / 8] = v293;
        *(_QWORD *)&v366[v80 / 4] = v293;
        *(_QWORD *)&v374[v80 / 4] = v172;
        v367[v80 / 8] = v293 + v172 * v290;
        *(_QWORD *)&v373[v80 / 4] = v173;
        *(_QWORD *)v352 = v293 + (v172 + v173) * v290;
        v268 = 1;
        a24 = buffer;
        v78 = theArray;
        v107 = v340;
        goto LABEL_197;
      }
LABEL_166:
      v77 = v343;
      v288 = v109;
      if (v265)
      {
        if (v292)
          v138 = v292;
        else
          v138 = a13;
        v353 = (__CFString *)v138;
        v147 = CVDictionaryGetIntValueWithDefault(v342, CFSTR("BytesPerRowAlignment"), v138);
        v389[v80 / 8] = v147;
        v148 = IOSurfaceGetAllocSize((IOSurfaceRef)buffer);
        v149 = ((unint64_t)v317 + v321 - 1) / v321 * v147;
        *(_QWORD *)v352 = v149;
        v150 = *(_QWORD *)&a27[v80 / 4];
        v35 = v338;
        v79 = (const __CFArray *)v325;
        if (v150 + v149 > v148)
          goto LABEL_217;
        v381[v80 / 8] = v150;
        if (((v150 + 63) & 0xFFFFFFFFFFFFFFC0) != v150)
          goto LABEL_217;
        v288->isa = (void *)v150;
        v379[v80 / 8] = v149;
        v362[v80 / 8] = CVDictionaryGetIntValueWithDefault(v342, v273, 0);
        v151 = a9;
        a24 = buffer;
        goto LABEL_202;
      }
      v152 = _CVPixelBufferLayoutPlane(v307, v321, v319, (uint64_t)v349, v270, v303, (unint64_t)v317, v100, v101, v103, v309, (unint64_t)v277, v274, v315, 0, 0, v292, &v389[v80 / 8], &v381[v80 / 8],
               (unint64_t *)v352,
               0);
      v153 = 0;
      v35 = v338;
      v138 = (unint64_t)v305;
      a24 = buffer;
      if ((_DWORD)v152)
      {
        v102 = v152;
        goto LABEL_218;
      }
LABEL_198:
      v362[v80 / 8] = CVDictionaryGetIntValueWithDefault(v342, v273, v153);
      if (a24)
      {
        v151 = a9;
      }
      else
      {
        v174 = *(_QWORD *)v352;
        v379[v80 / 8] = *(_QWORD *)v352 - (unint64_t)v288->isa;
        v151 = a9;
        v138 = (v301 + v174) / a9;
      }
      v79 = (const __CFArray *)v325;
LABEL_202:
      v175 = (v138 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v353 = (__CFString *)v175;
      if (!is_mul_ok(v151, v175))
        goto LABEL_217;
      v305 = (__CFString *)((v138 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v176 = v175 * v151;
      v355 = v175 * v151;
      v82 = v107 + 1;
      v80 += 8;
      v81 = v342;
      if (v272 == v80)
      {
        v177 = v268;
        LODWORD(v102) = v264;
        goto LABEL_220;
      }
    }
  }
  v176 = 0;
  v177 = 0;
  LODWORD(v102) = 0;
  v290 = 1;
  v35 = v338;
LABEL_220:
  v354 = v176;
  Mutable = cf;
  v178 = v271;
LABEL_221:
  v188 = v315;
  if (a24)
  {
    v302 = 1;
    goto LABEL_233;
  }
  v245 = __CFADD__(v176, v315);
  v176 += v315;
  if (v245)
  {
LABEL_225:
    v102 = 4294960634;
LABEL_226:
    if (Mutable)
      CFRelease(Mutable);
    return v102;
  }
  v302 = 0;
  v355 = v176;
LABEL_233:
  if (!v178)
  {
    v352[0] = kIOSurfaceSubsamplingNone;
    v197 = CFGetTypeID(Mutable);
    if (v197 == CFDictionaryGetTypeID())
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Mutable);
      v199 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v199 != CFDictionaryGetValue(v35, CFSTR("IOSurfacePurgeable")))
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC050], v199);
      if (!v284)
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC198], v199);
      CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC1E0], (uint64_t)v311);
      CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC008], a9);
      v269 = v177;
      if (!v177)
        CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBF08], (uint64_t)v353);
      v200 = (const __CFString *)*MEMORY[0x1E0CBC058];
      if (v77)
        v201 = 0;
      else
        v201 = v381[0];
      setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E0CBC058], v201);
      v202 = (const void *)*MEMORY[0x1E0CBBEE0];
      if (v302)
      {
        v203 = v355;
      }
      else
      {
        v204 = CVDictionaryGetIntValueWithDefault(MutableCopy, v202, 0);
        if (v355 <= v204)
          v203 = v204;
        else
          v203 = v355;
        v355 = v203;
      }
      CVDictionarySetSInt64Value(MutableCopy, v202, v203);
      if (!v269)
      {
        v205 = (const __CFString *)*MEMORY[0x1E0CBBF00];
        v206 = CVDictionaryGetIntValueWithDefault(theDict, CFSTR("BitsPerBlock"), 8);
        setIntValue(MutableCopy, v205, v206 / 8);
      }
      v207 = (const __CFString *)*MEMORY[0x1E0CBBFC0];
      v208 = CVDictionaryGetIntValueWithDefault(theDict, CFSTR("BlockWidth"), 1);
      setIntValue(MutableCopy, v207, v208);
      v209 = (const __CFString *)*MEMORY[0x1E0CBBFB8];
      v210 = CVDictionaryGetIntValueWithDefault(theDict, CFSTR("BlockHeight"), 1);
      setIntValue(MutableCopy, v209, v210);
      if (a24)
      {
        v211 = CVDictionaryGetIntValueWithDefault(Mutable, v200, 0);
        if (((v211 + 63) & 0xFFFFFFFFFFFFFFC0) != v211)
          goto LABEL_377;
        setIntValue(MutableCopy, v200, v211);
      }
      if ((_DWORD)v102)
        v212 = v290 > 1;
      else
        v212 = 0;
      v213 = v212;
      v298 = v213;
      if (v213 == 1)
        setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E0CBC1B0], v290);
      v214 = CFDictionaryGetValue(theDict, CFSTR("PixelFormat"));
      if (v214)
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC070], v214);
      properties = MutableCopy;
      v344 = v77;
      if (v77)
      {
        v339 = v35;
        cfa = Mutable;
        v341 = CFArrayCreateMutable(0, v77, MEMORY[0x1E0C9B378]);
        v215 = 0;
        v337 = (const void *)*MEMORY[0x1E0CBC178];
        v336 = (const void *)*MEMORY[0x1E0CBC140];
        v335 = (const void *)*MEMORY[0x1E0CBC080];
        v333 = (const void *)*MEMORY[0x1E0CBC160];
        v330 = (const void *)*MEMORY[0x1E0CBC168];
        v350 = (__CFString *)*MEMORY[0x1E0CBC110];
        v347 = (__CFString *)*MEMORY[0x1E0CBC108];
        v312 = (__CFString *)*MEMORY[0x1E0CBBED8];
        v329 = (__CFString *)*MEMORY[0x1E0CBC0F8];
        v327 = (__CFString *)*MEMORY[0x1E0CBC0A0];
        v326 = (__CFString *)*MEMORY[0x1E0CBC088];
        v324 = (__CFString *)*MEMORY[0x1E0CBC0E8];
        v323 = (__CFString *)*MEMORY[0x1E0CBC0E0];
        v320 = (__CFString *)*MEMORY[0x1E0CBC150];
        v318 = (__CFString *)*MEMORY[0x1E0CBC170];
        v316 = (__CFString *)*MEMORY[0x1E0CBC180];
        v314 = (__CFString *)*MEMORY[0x1E0CBC148];
        v299 = (__CFString *)(v369[0] * v357[0]);
        v310 = (__CFString *)*MEMORY[0x1E0CBC0D0];
        v308 = (__CFString *)*MEMORY[0x1E0CBC0D8];
        v296 = (__CFString *)*MEMORY[0x1E0CBC0A8];
        v297 = (__CFString *)*MEMORY[0x1E0CBC0B0];
        v306 = (__CFString *)*MEMORY[0x1E0CBC090];
        allocatora = (const __CFString *)*MEMORY[0x1E0CBC138];
        v289 = (__CFString *)*MEMORY[0x1E0CBC100];
        v279 = (__CFString *)*MEMORY[0x1E0CBC0F0];
        v285 = (__CFString *)*MEMORY[0x1E0CBC128];
        v283 = (__CFString *)*MEMORY[0x1E0CBC130];
        v295 = (const void *)*MEMORY[0x1E0CBC098];
        v304 = v353;
        while (1)
        {
          v216 = CFArrayGetValueAtIndex(theArray, v215);
          v217 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CVDictionarySetSInt64Value(v217, v337, a21[v215]);
          CVDictionarySetSInt64Value(v217, v336, a22[v215]);
          CVDictionarySetSInt64Value(v217, v335, v380[v215]);
          v218 = v381[v215];
          CVDictionarySetSInt64Value(v217, v333, v218);
          CVDictionarySetSInt64Value(v217, v330, v379[v215]);
          v219 = CVDictionaryGetIntValueWithDefault(v216, CFSTR("BlockWidth"), 1);
          setIntValue(v217, v350, v219);
          v220 = v216;
          v221 = CVDictionaryGetIntValueWithDefault(v216, CFSTR("BlockHeight"), 1);
          setIntValue(v217, v347, v221);
          v222 = v361[v215];
          if (v222)
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnLeft, v222);
          v223 = v360[v215];
          if (v223)
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnRight, v223);
          v224 = v359[v215];
          if (v224)
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnTop, v224);
          v225 = v358[v215];
          if (v225)
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnBottom, v225);
          v226 = v362[v215];
          if (v226)
            setIntValue(v217, v312, v362[v215]);
          v227 = v377[v215];
          if ((v227 - 1) >= 4 && (v227 || v226 != 5))
          {
            setIntValue(v217, v306, v378[2 * v215] / 8);
            CVDictionarySetSInt64Value(v217, v295, v389[v215]);
            goto LABEL_301;
          }
          setIntValue(v217, v329, v377[v215]);
          setIntValue(v217, v327, v364[2 * v215]);
          setIntValue(v217, v326, v370[2 * v215]);
          v228 = v376[2 * v215];
          setIntValue(v217, v324, v228);
          v229 = v375[2 * v215];
          setIntValue(v217, v323, v229);
          setIntValue(v217, v320, v372[2 * v215]);
          setIntValue(v217, v318, v371[2 * v215]);
          v230 = *(_QWORD *)&v369[2 * v215];
          setIntValue(v217, v316, v230);
          setIntValue(v217, v314, v368[2 * v215]);
          setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneBitsPerElement, v378[2 * v215]);
          if ((v227 - 2) < 3)
            break;
          if (v227)
          {
            if (v227 == 1)
            {
              setIntValue(v217, v285, v365[2 * v215]);
              setIntValue(v217, v283, v363[2 * v215]);
              setIntValue(v217, v308, v218);
              setIntValue(v217, v310, v366[2 * v215]);
            }
            goto LABEL_301;
          }
          if (v226 == 5)
          {
            setIntValue(v217, v310, v218);
            setIntValue(v217, v308, v367[v215]);
LABEL_296:
            v231 = *(_QWORD *)&v357[2 * v215];
            setIntValue(v217, v297, v231);
            setIntValue(v217, v296, v231 * v230);
            setIntValue(v217, v350, v228);
            setIntValue(v217, v347, v229);
            setIntValue(v217, v306, v231);
            if (v298)
            {
              setIntValue(v217, v289, v374[2 * v215]);
              setIntValue(v217, allocatora, v373[2 * v215]);
            }
            v304 = v299;
            if (v227 == 4)
            {
              v232 = CVDictionaryGetIntValueWithDefault(v220, CFSTR("CompressionFootprint"), 0);
              if (!v232)
              {
                v353 = v299;
                Mutable = cfa;
                goto LABEL_376;
              }
              setIntValue(v217, v279, v232);
              v304 = v299;
            }
          }
LABEL_301:
          v77 = v344;
          setComponentsProperties(theDict, v217, v215, v344, properties);
          getSubsamplingForIOSurfaceProperty((const __CFDictionary *)v220, theDict, v352);
          CFArrayAppendValue(v341, v217);
          CFRelease(v217);
          if (v344 == ++v215)
          {
            v353 = v304;
            CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBC158], v341);
            setIntValue(properties, (const __CFString *)*MEMORY[0x1E0CBC1B8], v352[0]);
            CFRelease(v341);
            Mutable = cfa;
            a24 = buffer;
            v35 = v339;
            goto LABEL_324;
          }
        }
        setIntValue(v217, v310, v218);
        setIntValue(v217, v308, v367[v215]);
        if ((v227 - 3) > 1)
          goto LABEL_301;
        goto LABEL_296;
      }
      setComponentsProperties(theDict, 0, 0, 1uLL, MutableCopy);
      getSubsamplingForIOSurfaceProperty(theDict, theDict, v352);
      setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E0CBC1B8], v352[0]);
      if ((_QWORD)a10)
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnLeft, a10);
      if (*((_QWORD *)&a10 + 1))
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnTop, SDWORD2(a10));
      if (a11)
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnRight, a11);
      if (a12)
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnBottom, a12);
LABEL_324:
      v233 = (const __CFArray *)CFDictionaryGetValue(v35, CFSTR("CacheMode"));
      if (v233)
      {
        v234 = v233;
        TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v234) && CFArrayGetCount(v234) >= 1)
        {
          v236 = CFArrayGetValueAtIndex(v234, 0);
          CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBBF10], v236);
        }
      }
      if (v282)
      {
        v237 = CFDictionaryGetValue(v282, CFSTR("PixelBufferPoolNameKey"));
        if (v237)
          CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBC048], v237);
      }
      v238 = a29;
      if (!v300)
        goto LABEL_371;
      if (a24)
      {
        if (a25)
          ChildIOSurface = (uint64_t)CreateChildIOSurface(a25, properties, v77, (unsigned int *)a26);
        else
          ChildIOSurface = IOSurfaceCreateChildSurface();
      }
      else
      {
        ChildIOSurface = (uint64_t)IOOrEXSurfaceCreate(properties);
      }
      v240 = (__IOSurface *)ChildIOSurface;
      if (ChildIOSurface)
      {
        v241 = v281 ^ 1;
        if (!v269)
          v241 = 1;
        if ((v241 & 1) == 0 && v344)
        {
          for (i = 0; v344 != i; ++i)
          {
            v243 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
            v244 = v377[i];
            if (v244 == 3)
            {
              if (v290 <= 1)
                goto LABEL_350;
            }
            else
            {
              v245 = v244 != 4 || v290 >= 2;
              if (!v245)
              {
LABEL_350:
                BaseAddressOfCompressedTileHeaderRegionOfPlane = (void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
                valuePtr = 0;
                v247 = (const __CFNumber *)CFDictionaryGetValue(v243, CFSTR("CompressionMetadataPatternSignallingConstant"));
                if (v247)
                {
                  v248 = v247;
                  v249 = CFGetTypeID(v247);
                  if (v249 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue(v248, kCFNumberSInt8Type, &valuePtr);
                    memset(BaseAddressOfCompressedTileHeaderRegionOfPlane, valuePtr, *((_QWORD *)v356 + i));
                  }
                }
              }
            }
          }
        }
        v250 = v280;
        if (v269)
          v250 = 1;
        v251 = v344;
        if (((v302 | v250) & 1) == 0)
        {
          BaseAddress = IOOrEXSurfaceGetBaseAddress(v240);
          if (v344)
          {
            v253 = (_DWORD *)((char *)BaseAddress + 4);
            v254 = (unsigned int *)v389;
            v255 = v381;
            do
            {
              v256 = *(_DWORD *)v255++;
              *(v253 - 1) = bswap32(v256);
              v257 = *v254;
              v254 += 2;
              *v253 = bswap32(v257);
              v253 += 2;
              --v251;
            }
            while (v251);
          }
        }
        if (a17)
          *a17 = 0;
        v238 = a29;
        v258 = a28;
        if (a18)
          *a18 = v353;
        if (a19)
          *a19 = v354;
        if (a23)
        {
          v259 = CFRetain(v240);
          v258 = a28;
          *a23 = (unint64_t)v259;
        }
        if (v258)
          *v258 = 0;
        CFRelease(v240);
LABEL_371:
        v102 = 0;
        if (v238)
        {
          MutableCopy = properties;
          if (properties)
          {
            v102 = 0;
            *v238 = (void *)CFRetain(properties);
            goto LABEL_379;
          }
        }
        else
        {
          MutableCopy = properties;
        }
LABEL_378:
        if (!MutableCopy)
          goto LABEL_226;
LABEL_379:
        CFRelease(MutableCopy);
        goto LABEL_226;
      }
LABEL_376:
      MutableCopy = properties;
    }
    else
    {
      MutableCopy = 0;
    }
LABEL_377:
    v102 = 4294960634;
    goto LABEL_378;
  }
  if (!v300)
    goto LABEL_315;
  v191 = CFAllocatorAllocate(allocator, v176, 0);
  if (v191)
  {
    v192 = ((unint64_t)v191 + v188 - 1) / v188 * v188;
    if (v77)
    {
      v193 = 0;
      v194 = a18;
      do
      {
        v195 = (_DWORD *)(v192 + v193 * 8);
        v196 = bswap32(v389[v193]);
        *v195 = bswap32(v381[v193]);
        v195[1] = v196;
        ++v193;
      }
      while (v77 != v193);
    }
    else
    {
      v192 += v381[0];
      v194 = a18;
    }
    if (a17)
      *a17 = v192;
    if (v194)
      *v194 = v353;
    if (a19)
      *a19 = v354;
    if (a23)
      *a23 = 0;
    if (a28)
    {
      v102 = 0;
      *a28 = (unint64_t)v191;
      goto LABEL_226;
    }
LABEL_315:
    v102 = 0;
    goto LABEL_226;
  }
  return 4294960634;
}

uint64_t CVDictionaryGetIntValueWithDefault(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeID v6;
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  uint64_t valuePtr;

  v3 = a3;
  valuePtr = a3;
  if (a1)
  {
    v6 = CFGetTypeID(a1);
    TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v6 == TypeID)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          v9 = Value;
          v10 = CFGetTypeID(Value);
          if (v10 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v9, kCFNumberLongType, &valuePtr);
            return valuePtr;
          }
        }
      }
    }
  }
  return v3;
}

void setIntValue(__CFDictionary *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

const void *CVBuffer::copyAttachment(CFDictionaryRef *this, const __CFString *a2, CVAttachmentMode *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  const void *Value;
  const void *v11;

  v6 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  v7 = 0;
  v8 = 1;
  while (1)
  {
    v9 = v8;
    Value = CFDictionaryGetValue(this[v7 + 10], a2);
    v11 = Value;
    if (Value)
      break;
    v8 = 0;
    v7 = 1;
    if ((v9 & 1) == 0)
      goto LABEL_8;
  }
  if (a3)
    *a3 = v7;
  CFRetain(Value);
LABEL_8:
  pthread_mutex_unlock(v6);
  return v11;
}

uint64_t CVPixelBufferBacking::getDefaultBytesPerRowAlignment(CVPixelBufferBacking *this)
{
  CFIndex AppIntegerValue;
  Boolean keyExistsAndHasValidFormat;

  if ((CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::didCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("corevideo_minimum_alignment"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::result = AppIntegerValue;
    CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::didCheck = 1;
  }
  return CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::result;
}

uint64_t getSubsamplingForIOSurfaceProperty(const __CFDictionary *a1, const __CFDictionary *a2, IOSurfaceSubsampling *a3)
{
  unint64_t IntValueWithDefault;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  IOSurfaceSubsampling v15;

  IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a1, CFSTR("HorizontalSubsampling"), 1);
  v7 = CVDictionaryGetIntValueWithDefault(a1, CFSTR("VerticalSubsampling"), 1);
  result = CVDictionaryGetBoolValueWithDefault(a2, CFSTR("ContainsSenselArray"), 0);
  if (IntValueWithDefault <= 1)
    v9 = 1;
  else
    v9 = IntValueWithDefault;
  if (v7 <= 1)
    v10 = 1;
  else
    v10 = v7;
  if (v9 == 2 && v10 == 2 && (_DWORD)result == 0)
  {
    v15 = kIOSurfaceSubsampling420;
    goto LABEL_25;
  }
  if (v9 == 2 && v7 < 2)
  {
    v15 = kIOSurfaceSubsampling422;
LABEL_25:
    *a3 = v15;
    return result;
  }
  if (v9 == 4 && v7 <= 1)
  {
    v15 = kIOSurfaceSubsampling411;
    goto LABEL_25;
  }
  return result;
}

const __CFDictionary *setComponentsProperties(const __CFDictionary *theDict, __CFDictionary *a2, CFIndex a3, unint64_t a4, __CFDictionary *a5)
{
  const __CFDictionary *v9;
  const __CFArray *Value;
  const void *ValueAtIndex;
  int BoolValueWithDefault;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  BOOL v23;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t IntValueWithDefault;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFDictionary *v35;
  const void *v36;
  const void *v37;
  int v38;
  int *v39;
  CFIndex v40;
  __CFDictionary *v41;
  uint64_t v42;
  int v43;
  __CFDictionary *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  CFIndex capacity;
  __int128 v51;
  uint64_t v52;

  v9 = theDict;
  v52 = *MEMORY[0x1E0C80C00];
  v51 = 0uLL;
  if (!a2 && a4 > 1 || a4 == 1 && !a5)
    return theDict;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Planes"));
  ValueAtIndex = v9;
  if (Value)
    ValueAtIndex = CFArrayGetValueAtIndex(Value, a3);
  BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(v9, CFSTR("ContainsYCbCr"), 0);
  v13 = CVDictionaryGetBoolValueWithDefault(v9, CFSTR("ContainsRGB"), 0);
  v14 = CVDictionaryGetBoolValueWithDefault(v9, CFSTR("ContainsAlpha"), 0);
  v15 = CVDictionaryGetBoolValueWithDefault(v9, CFSTR("ContainsGrayscale"), 0);
  v16 = CVDictionaryGetBoolValueWithDefault(v9, CFSTR("ContainsSenselArray"), 0);
  if (a3)
    v17 = 1;
  else
    v17 = BoolValueWithDefault == 0;
  v18 = !v17;
  if (a4 >= 2 && (v18 & 1) != 0 || (v19 = 0, a4 >= 3) && a3 && BoolValueWithDefault && !v14)
    v19 = 1;
  if (((a4 == 1) & v18) != 0)
    v20 = v19 + 3;
  else
    v20 = v19;
  if (a3 == 1 && BoolValueWithDefault && (a4 == 2 || a4 == 3 && v14))
    v20 += 2;
  v21 = v13 && v14 == 0;
  v22 = v21;
  if (a4 == 2 && !a3 && v22)
  {
    ++v20;
  }
  else
  {
    if (a3 != 1)
      v22 = 0;
    if (a4 == 2 && v22)
    {
      v20 += 2;
    }
    else
    {
      if (v13)
        v23 = a4 >= 3;
      else
        v23 = 1;
      if (!v23 && a3 == 0)
        v20 += 3;
    }
  }
  HIDWORD(v47) = v15;
  v48 = v13;
  v26 = a4 > 2 && v13 != 0;
  v46 = v16;
  LODWORD(v47) = v14;
  if (v14)
    v27 = a3 + 1 == a4;
  else
    v27 = 0;
  if (v27)
    ++v26;
  if (v15)
    ++v26;
  v28 = v26 + v20;
  v49 = BoolValueWithDefault;
  if (v16)
  {
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockWidth"), 1);
    v30 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockHeight"), 1);
    v31 = v28 + 2;
    if (IntValueWithDefault != 2)
      v31 = v28;
    if (v30 == 2)
      v28 = v31 + 2;
    else
      v28 = v31;
  }
  v32 = 0;
  v33 = v28 <= 1 ? 1 : v28;
  capacity = v33;
  v34 = 4 * v33;
  do
  {
    *(_DWORD *)((char *)&v51 + v32) = CVDictionaryGetIntValueWithDefault(v9, CFSTR("BitsPerComponent"), 8);
    v32 += 4;
  }
  while (v34 != v32);
  v35 = a2 ? a2 : a5;
  theDict = (const __CFDictionary *)CVDictionarySetSInt32Array(v35, (const void *)*MEMORY[0x1E0CBC0B8], (char *)&v51, capacity);
  if ((_DWORD)theDict)
    return theDict;
  v36 = CFDictionaryGetValue(v9, CFSTR("ComponentRange"));
  if (v36)
  {
    v37 = v36;
    if (CFEqual(v36, CFSTR("VideoRange")))
    {
      v38 = 2;
LABEL_87:
      LODWORD(v51) = v38;
      goto LABEL_89;
    }
    if (CFEqual(v37, CFSTR("FullRange")))
    {
      v38 = 1;
      goto LABEL_87;
    }
    if (CFEqual(v37, CFSTR("WideRange")))
    {
      v38 = 3;
      goto LABEL_87;
    }
  }
  v38 = 0;
  LODWORD(v51) = 0;
LABEL_89:
  if (v28 >= 2)
  {
    v39 = (int *)&v51 + 1;
    v40 = capacity - 1;
    do
    {
      *v39++ = v38;
      --v40;
    }
    while (v40);
  }
  if (a2)
    v41 = a2;
  else
    v41 = a5;
  theDict = (const __CFDictionary *)CVDictionarySetSInt32Array(v41, (const void *)*MEMORY[0x1E0CBC0C8], (char *)&v51, capacity);
  if (!(_DWORD)theDict)
  {
    if (v49)
    {
      if (!a3)
      {
        LODWORD(v51) = 5;
        if ((_DWORD)capacity == 3)
          *(_QWORD *)((char *)&v51 + 4) = 0x600000007;
        goto LABEL_116;
      }
      if (a3 == 1)
      {
        v42 = 0x600000007;
LABEL_100:
        *(_QWORD *)&v51 = v42;
        goto LABEL_116;
      }
      if (a3 != 2 || !(_DWORD)v47)
        goto LABEL_116;
    }
    else if (v48)
    {
      if (!a3)
      {
        if (a4 != 2 || (_DWORD)v47)
        {
          *(_QWORD *)&v51 = 0x300000004;
          DWORD2(v51) = 2;
          if ((_DWORD)capacity == 4)
            HIDWORD(v51) = 1;
          goto LABEL_116;
        }
        v43 = 2;
        goto LABEL_115;
      }
      if (a3 != 1 || (v47 & 1) == 0)
      {
        if (a3 == 1 && !(_DWORD)v47)
        {
          v42 = 0x400000003;
          goto LABEL_100;
        }
LABEL_116:
        if (a2)
          v44 = a2;
        else
          v44 = a5;
        return (const __CFDictionary *)CVDictionarySetSInt32Array(v44, (const void *)*MEMORY[0x1E0CBC0C0], (char *)&v51, capacity);
      }
    }
    else if (!v47)
    {
      if (v46)
      {
        if (v28 <= 1)
          v45 = 1;
        else
          v45 = v28;
        bzero(&v51, 4 * v45);
      }
      else
      {
        LODWORD(v51) = 0;
      }
      goto LABEL_116;
    }
    v43 = 1;
LABEL_115:
    LODWORD(v51) = v43;
    goto LABEL_116;
  }
  return theDict;
}

uint64_t CVDictionaryGetBoolValueWithDefault(const void *a1, const void *a2, uint64_t a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  const void *Value;
  const void *v9;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v6 == TypeID)
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          v9 = Value;
          if (CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            return 1;
          }
          else if (CFEqual(v9, (CFTypeRef)*MEMORY[0x1E0C9AE40]))
          {
            return 0;
          }
          else
          {
            return a3;
          }
        }
      }
    }
  }
  return a3;
}

uint64_t CVDictionarySetSInt32Array(__CFDictionary *a1, const void *a2, char *a3, CFIndex capacity)
{
  uint64_t v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  uint64_t v12;

  if (!(_DWORD)capacity)
    return 0;
  v7 = capacity;
  Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294960634;
  v9 = Mutable;
  while (1)
  {
    v10 = CFNumberCreate(0, kCFNumberSInt32Type, a3);
    if (!v10)
      break;
    v11 = v10;
    CFArrayAppendValue(v9, v10);
    CFRelease(v11);
    a3 += 4;
    if (!--v7)
    {
      CFDictionarySetValue(a1, a2, v9);
      v12 = 0;
      goto LABEL_10;
    }
  }
  v12 = 4294960634;
LABEL_10:
  CFRelease(v9);
  return v12;
}

IOSurfaceRef IOOrEXSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBaseAddress(buffer);
  return buffer;
}

uint64_t _CVPixelBufferLayoutPlane(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t a17, unint64_t *a18, unint64_t *a19, unint64_t *a20,unint64_t *a21)
{
  uint64_t v22;
  uint64_t result;
  unint64_t v27;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v22 = a15;
  v60 = a8;
  result = 4294960634;
  if (a4)
  {
    if (a2)
    {
      if (a1)
      {
        if (a6)
        {
          if (a7)
          {
            v27 = a12;
            if (a12)
            {
              v58 = 0;
              v56 = 0;
              if (CVRoundToMultipleDidOverflow(a8, a1, &v60))
                return 4294960634;
              if (CVRoundToMultipleDidOverflow(a10, a1, &a10))
                return 4294960634;
              if (CVRoundToMultipleDidOverflow(a9, a2, &a9))
                return 4294960634;
              if (CVRoundToMultipleDidOverflow(a11, a2, &a11))
                return 4294960634;
              if (__CFADD__(a10, v60))
                return 4294960634;
              v31 = a10 + v60;
              if (__CFADD__(a10 + v60, a6))
                return 4294960634;
              v58 = v31 + a6;
              if (CVRoundToMultipleDidOverflow(v31 + a6, a4 * a1, &v58)
                || CVRoundToMultipleDidOverflow(v58, v27, &v58))
              {
                return 4294960634;
              }
              v32 = a14;
              v33 = (unint64_t)(a3 + 7) >> 3;
              v34 = v33 * a4;
              if ((a14 & 0x80000000) == 0)
                v35 = a14;
              else
                v35 = -(int)a14;
              if ((v34 & 0x80000000) == 0)
                v36 = v33 * a4;
              else
                v36 = -(int)v34;
              if (v35 <= v36)
                v37 = v36;
              else
                v37 = v35;
              if (v35 < v36)
                v36 = v35;
              v38 = v58 / a1;
              if (v36)
              {
                if (v36 < 1)
                {
                  v39 = v37;
                }
                else
                {
                  do
                  {
                    v39 = v36;
                    v36 = v37 % v36;
                    v37 = v39;
                  }
                  while (v36 > 0);
                }
              }
              else
              {
                v39 = v37 <= 1 ? 1 : v37;
              }
              if (!is_mul_ok(v33, v38))
                return 4294960634;
              v40 = a17;
              v41 = (int)a14 * (int)v34 / v39;
              v42 = v41;
              v43 = v38 * v33;
              v59 = v38 * v33;
              if (a17)
              {
                if (v43 > a17)
                  return 4294960634;
                v59 = a17;
              }
              else if (CVRoundToMultipleDidOverflow(v43, v41, &v59))
              {
                return 4294960634;
              }
              if (v22)
              {
                if (CVRoundToMultipleDidOverflow(v22, v42, &a15))
                  return 4294960634;
                v44 = v59;
                if (v59 <= a15)
                  v44 = a15;
                v59 = v44;
              }
              if (!v40)
              {
                if (v59 % v34)
                  _CVPixelBufferLayoutPlane();
                if (v59 % v32)
                  _CVPixelBufferLayoutPlane();
                if (v59 % v33)
                  _CVPixelBufferLayoutPlane();
              }
              if (__CFADD__(a11, a9))
                return 4294960634;
              v45 = a11 + a9;
              if (__CFADD__(a11 + a9, a7))
                return 4294960634;
              v57 = v45 + a7;
              v46 = CVRoundToMultipleDidOverflow(v45 + a7, a5 * a2, &v57);
              if (v46 || CVRoundToMultipleDidOverflow(v57, a13, &v57))
                return 4294960634;
              v47 = v57;
              result = 4294960634;
              if (v57 && v58)
              {
                v48 = v60 / a1 * v33;
                if (!CVRoundToMultipleDidOverflow(v48, v32, &v56))
                {
                  v49 = v56;
                  v50 = v57;
                  v51 = v48 >= v56 ? 0 : v32;
                  v52 = v59;
                  *a18 = v59;
                  if (v52 <= ~v51 / v50)
                  {
                    v54 = a20;
                    v53 = a21;
                    v55 = a16;
                    *a19 = *a20 + v49 + a9 * v52;
                    *v54 += v51 + v55 + v52 * (v47 / a2);
                    result = 0;
                    if (v53)
                      *v53 = a7 / a2 * v52 - v48;
                    return result;
                  }
                }
                return 4294960634;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVDictionaryGetIntInArrayWithDefault(const void *a1, const void *a2, CFIndex a3, uint64_t a4)
{
  uint64_t v4;
  CFTypeID v8;
  CFTypeID TypeID;
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  CFTypeID v13;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v15;
  CFTypeID v16;
  uint64_t valuePtr;

  v4 = a4;
  valuePtr = a4;
  if (a1)
  {
    v8 = CFGetTypeID(a1);
    TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v8 == TypeID)
      {
        Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          v11 = Value;
          v12 = CFGetTypeID(Value);
          v13 = CFArrayGetTypeID();
          if ((a3 & 0x8000000000000000) == 0 && v12 == v13 && CFArrayGetCount(v11) > a3)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, a3);
            if (ValueAtIndex)
            {
              v15 = ValueAtIndex;
              v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v15, kCFNumberLongType, &valuePtr);
                return valuePtr;
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t CVDataBufferGetTypeID()
{
  if (CVDataBufferGetTypeID::once != -1)
    dispatch_once_f(&CVDataBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBuffer);
  return kCVDataBufferID;
}

uint64_t classFinalize_CVPixelBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

BOOL CVPixelBufferBacking::isPlanar(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 130) != 0;
}

void CVBufferRelease(CVBufferRef buffer)
{
  if (buffer)
    CFRelease(buffer);
}

uint64_t calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(uint64_t a1, int *a2, _DWORD *a3, char a4)
{
  _DWORD *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int AppBooleanValue;
  const char *v17;
  const char *v18;
  Boolean keyExistsAndHasValidFormat;

  if (a1)
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v8 = a2;
    v9 = a1;
    v10 = a3;
    do
    {
      v12 = *v8;
      v8 += 3;
      v11 = v12;
      if (((v12 - 2) < 3 || !v11 && *v10 == 5)
        && !areUniversalCompressionFormatsSupported()
        && !areUniversalLossyCompressionFormatsSupported())
      {
        v13 = 0x10000;
        goto LABEL_13;
      }
      ++v10;
      --v9;
    }
    while (v9);
    v13 = 0;
LABEL_13:
    while (1)
    {
      v15 = *v6;
      v6 += 3;
      v14 = v15;
      if (((v15 - 2) < 3 || !v14 && *v5 == 5)
        && (areUniversalCompressionFormatsSupported()
         || areUniversalLossyCompressionFormatsSupported()))
      {
        break;
      }
      ++v5;
      if (!--v7)
      {
        if ((a4 & 0x20) != 0)
          goto LABEL_23;
        goto LABEL_36;
      }
    }
    v13 = v13 | 0x20000;
    if ((a4 & 0x20) == 0)
      goto LABEL_36;
  }
  else
  {
    v13 = 0;
    if ((a4 & 0x20) == 0)
      goto LABEL_36;
  }
LABEL_23:
  if (areUniversalCompressionFormatsSupported()
    || areUniversalLossyCompressionFormatsSupported())
  {
    if ((shouldSupportCAForInterchange(void)::didCheckCAForInterchange & 1) == 0)
    {
      keyExistsAndHasValidFormat = 0;
      AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("support_ca_interchange"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat)
      {
        shouldSupportCAForInterchange(void)::supportCAForInterchange = AppBooleanValue;
        v17 = "enable";
        if (!AppBooleanValue)
          v17 = "disable";
        v18 = "YES";
        if (!AppBooleanValue)
          v18 = "NO";
        syslog(3, "CoreVideo: Will %s kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey for Interchange compressed and tiled uncompressed formats  -- thank you for setting \"defaults write com.apple.corevideo support_ca_interchange -BOOL %s\"\n", v17, v18);
      }
      shouldSupportCAForInterchange(void)::didCheckCAForInterchange = 1;
    }
    if (shouldSupportCAForInterchange(void)::supportCAForInterchange)
      v13 = v13 | 0x40000;
    else
      v13 = v13;
  }
LABEL_36:
  if ((a4 & 0x10) != 0)
  {
    if (areHTPCFormatsSupportedByCA())
      return v13 | 0x80000;
    else
      return v13;
  }
  return v13;
}

uint64_t areUniversalCompressionFormatsSupported(void)
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *v2;

  if ((areUniversalCompressionFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        v1 = v0;
        v2 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v2 == CFDictionaryGetValue(v0, CFSTR("universal-buffer-compression")))
          areUniversalCompressionFormatsSupported(void)::result = 1;
        CFRelease(v1);
      }
      areUniversalCompressionFormatsSupported(void)::didCheck = 1;
    }
  }
  return areUniversalCompressionFormatsSupported(void)::result;
}

uint64_t areUniversalLossyCompressionFormatsSupported(void)
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *v2;
  int AppBooleanValue;
  char v4;
  const char *v5;
  const char *v6;
  Boolean keyExistsAndHasValidFormat;

  if ((areUniversalLossyCompressionFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        v1 = v0;
        v2 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v2 == CFDictionaryGetValue(v0, CFSTR("universal-lossy-buffer-compression")))
          areUniversalLossyCompressionFormatsSupported(void)::result = 1;
        CFRelease(v1);
      }
      if (!areUniversalLossyCompressionFormatsSupported(void)::result)
      {
        keyExistsAndHasValidFormat = 0;
        AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("universal-lossy-buffer-compression"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat)
        {
          v4 = AppBooleanValue;
          v5 = "enable";
          if (!AppBooleanValue)
            v5 = "disable";
          v6 = "YES";
          if (!AppBooleanValue)
            v6 = "NO";
          syslog(3, "CoreVideo: Will %s universal buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-lossy-buffer-compression -BOOL %s\"\n", v5, v6);
          areUniversalLossyCompressionFormatsSupported(void)::result = v4;
        }
      }
      areUniversalLossyCompressionFormatsSupported(void)::didCheck = 1;
    }
  }
  return areUniversalLossyCompressionFormatsSupported(void)::result;
}

uint64_t calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(int a1, int a2)
{
  unsigned int v3;
  const __CFString *v4;
  const __CFString *v5;
  uint64_t result;

  if (a2)
  {
    if (areHTPCFormatsSupportedByCA())
      v3 = 196608;
    else
      v3 = 0x10000;
    if (!a1)
      goto LABEL_19;
  }
  else
  {
    v3 = 0;
    if (!a1)
      goto LABEL_19;
  }
  if ((isDeviceTypeH6orH7(void)::didCheck & 1) == 0)
  {
    v4 = (const __CFString *)MGCopyAnswer();
    if (v4)
    {
      v5 = v4;
      if (CFStringCompare(CFSTR("s5l8960x"), v4, 0) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("t7000"), v5, 0) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("t7001"), v5, 0) == kCFCompareEqualTo)
      {
        isDeviceTypeH6orH7(void)::deviceTypeH6orH7 = 1;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice();
    }
    isDeviceTypeH6orH7(void)::didCheck = 1;
  }
  if (isDeviceTypeH6orH7(void)::deviceTypeH6orH7)
    v3 |= 0x40000u;
LABEL_19:
  result = v3 | 0x80000;
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) != 0)
      return result;
    else
      return v3;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  return result;
}

uint64_t areHTPCFormatsSupportedByCA(void)
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *v2;

  if ((areHTPCFormatsSupportedByCA(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        v1 = v0;
        v2 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v2 == CFDictionaryGetValue(v0, CFSTR("buffer-compression")))
          areHTPCFormatsSupportedByCA(void)::result = 1;
        CFRelease(v1);
      }
      areHTPCFormatsSupportedByCA(void)::didCheck = 1;
    }
  }
  return areHTPCFormatsSupportedByCA(void)::result;
}

uint64_t disableCompression(void)
{
  int AppBooleanValue;
  char v1;
  const char *v2;
  const char *v3;
  Boolean keyExistsAndHasValidFormat;

  if ((disableCompression(void)::didCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("disable-buffer-compression"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
    {
      v1 = AppBooleanValue;
      v2 = "disable";
      if (!AppBooleanValue)
        v2 = "enable";
      v3 = "YES";
      if (!AppBooleanValue)
        v3 = "NO";
      syslog(3, "CoreVideo: Will %s  buffer compression -- thank you for setting \"defaults write com.apple.corevideo disable-buffer-compression -BOOL %s\"\n", v2, v3);
      disableCompression(void)::result = v1;
    }
    disableCompression(void)::didCheck = 1;
  }
  return disableCompression(void)::result;
}

uint64_t classFinalize_CVPixelBufferBacking(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

void addMissingValuesToDictionary(const void *a1, const __CFString *a2, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  _OWORD v7[7];
  int v8;
  uint64_t v9;

  v9 = 0;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (!convertAttachmentToIOSurfaceStruct(a1, a2, (uint64_t)v7, &v9))
  {
    Mutable = *a3;
    if (!*a3)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *a3 = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, a2);
  }
}

__IOSurface *CVPixelBuffer::removeAllAttachments(CVPixelBuffer *this)
{
  __IOSurface *result;
  __IOSurface *v3;
  int v4;
  int v5;
  unsigned int i;
  const __CFString *v7;

  if (_os_feature_enabled_impl())
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15)))
      IOSurfaceRemoveCoreVideoBridgedValues();
    CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)this + 10));
    CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)this + 11));
    return (__IOSurface *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  }
  else
  {
    CVBuffer::removeAllAttachments((CFMutableDictionaryRef *)this);
    result = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
    if (result)
    {
      v3 = result;
      v4 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
      if (v4 >= 1)
      {
        v5 = v4;
        for (i = 0; i != v5; ++i)
        {
          if (!CVDoesIOSurfacePropertyKeyAtIndexInMappingTableHaveCorrespondingBulkAttachment(i))
          {
            v7 = (const __CFString *)CVGetIOSurfacePropertyKeyAtIndexInMappingTable(i);
            IOSurfaceRemoveValue(v3, v7);
          }
        }
      }
      return (__IOSurface *)IOSurfaceSetBulkAttachments2();
    }
  }
  return result;
}

uint64_t CVDoesIOSurfacePropertyKeyAtIndexInMappingTableHaveCorrespondingBulkAttachment(unsigned int a1)
{
  if (a1 > 0x1A)
    return 0;
  else
    return LOBYTE((&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1 + 2]);
}

void CVPixelBuffer::pullAttachmentsFromIOSurface(CVPixelBuffer *this, const __CFDictionary *a2)
{
  const __CFDictionary *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  const void *v9;
  CGColorSpace *Value;
  CGColorSpaceRef v11;
  CGColorSpaceRef v12;
  const __CFString *v13;
  CFTypeRef context[2];
  CFTypeRef cf;
  _OWORD v16[7];
  int v17;
  uint8_t buf[4];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15)))
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    context[1] = (CFTypeRef)116;
    cf = 0;
    context[0] = 0;
    if (IOSurfaceGetBulkAttachments())
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v19 = "IOSurfaceGetBulkAttachments Error: mismatch in struct size in CoreVideo vs IOSurface.";
        _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
    }
    else
    {
      createAttachmentsDictionaryFromIOSurfaceStruct((uint64_t)v16, (__CFDictionary **)&cf);
      if (cf)
      {
        CVBuffer::setAttachments(this, (const __CFDictionary *)cf, 1u);
        CFRelease(cf);
      }
    }
    if (a2)
    {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)addMissingValuesToDictionary, context);
      v4 = (const __CFDictionary *)context[0];
      if (context[0])
      {
        v5 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
        if (v5 >= 1)
        {
          v6 = v5;
          v7 = 0;
          v8 = *MEMORY[0x1E0CBBF90];
          do
          {
            v9 = (const void *)CVGetIOSurfacePropertyKeyAtIndexInMappingTable(v7);
            Value = (CGColorSpace *)CFDictionaryGetValue(v4, v9);
            if (Value)
            {
              v11 = Value;
              if (v8 != CVGetIOSurfacePropertyKeyAtIndexInMappingTable(v7))
              {
                v12 = 0;
LABEL_15:
                v13 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
                CVBuffer::setAttachment(this, v13, v11, 1u);
                if (v12)
                  CFRelease(v12);
                goto LABEL_17;
              }
              v11 = CGColorSpaceCreateWithPropertyList(v11);
              v12 = v11;
              if (v11)
                goto LABEL_15;
            }
LABEL_17:
            ++v7;
          }
          while (v6 != v7);
        }
        if (context[0])
          CFRelease(context[0]);
      }
    }
  }
}

uint64_t CVGetIOSurfacePropertyKeyAtIndexInMappingTable(unsigned int a1)
{
  if (a1 > 0x1A)
    return 0;
  else
    return (uint64_t)*(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1 + 1];
}

void CVPixelBuffer::removeAttachment(CVPixelBuffer *this, const __CFString *a2)
{
  __IOSurface *v4;
  const __CFString *v5;
  BOOL v6;
  uint64_t v7;
  __IOSurface *v8;
  const __CFString *v9;
  _OWORD v10[7];
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  if (_os_feature_enabled_impl())
  {
    v4 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
    v5 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if (v4)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
      IOSurfaceRemoveValue(v4, v5);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v12 = 0;
    CVBuffer::removeAttachment((CFMutableDictionaryRef *)this, a2);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
    if (v7)
    {
      v8 = (__IOSurface *)v7;
      if (convertAttachmentToIOSurfaceStruct(a2, 0, (uint64_t)&v13, &v12))
      {
        v10[4] = v17;
        v10[5] = v18;
        v10[6] = v19;
        v11 = v20;
        v10[0] = v13;
        v10[1] = v14;
        v10[2] = v15;
        v10[3] = v16;
        setBulkAttachmentsOnIOSurface((uint64_t)v8, (uint64_t)v10, v12);
      }
      else
      {
        v9 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
        if (v9)
          IOSurfaceRemoveValue(v8, v9);
      }
    }
  }
}

uint64_t CVBuffer::removeAttachment(CFMutableDictionaryRef *this, const __CFString *a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  CFDictionaryRemoveValue(this[10], a2);
  CFDictionaryRemoveValue(this[11], a2);
  return pthread_mutex_unlock(v4);
}

uint64_t CVPixelBuffer::setAttachment(CVPixelBuffer *this, const __CFString *a2, __CFString *a3, unsigned int a4)
{
  uint64_t result;
  __IOSurface *v9;
  const __CFString *v10;
  const void *Value;
  const void *v12;
  const void *v13;
  const void *v14;
  BOOL v15;
  __CFString *v16;
  uint64_t v17;
  CFTypeID TypeID;
  _OWORD v19[7];
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  if (_os_feature_enabled_impl())
  {
    result = 4294960635;
    if (a4 <= 1 && a2 && a3)
    {
      v9 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
      v10 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
      v12 = Value;
      if (Value)
        CFRetain(Value);
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
      v13 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
      v14 = v13;
      if (v13)
        CFRetain(v13);
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
      if (a4 != 1 || (v9 ? (v15 = v10 == 0) : (v15 = 1), v15))
      {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + a4 + 10), a2, a3);
      }
      else
      {
        if ((const __CFString *)*MEMORY[0x1E0CBBF90] != v10)
        {
          v16 = 0;
LABEL_26:
          IOSurfaceSetValue(v9, v10, a3);
          goto LABEL_27;
        }
        TypeID = CGColorSpaceGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          a3 = (__CFString *)CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace((CGColorSpace *)a3);
          v16 = a3;
          if (a3)
            goto LABEL_26;
LABEL_27:
          if (v12)
            CFRelease(v12);
          if (v14)
            CFRelease(v14);
          if (v16)
            CFRelease(v16);
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
          return 0;
        }
      }
      v16 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    v21 = 0;
    result = CVBuffer::setAttachment(this, a2, a3, a4);
    if (a4 == 1 && !(_DWORD)result)
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
      if (result)
      {
        v17 = result;
        if (convertAttachmentToIOSurfaceStruct(a2, a3, (uint64_t)&v22, &v21))
        {
          v19[4] = v26;
          v19[5] = v27;
          v19[6] = v28;
          v20 = v29;
          v19[0] = v22;
          v19[1] = v23;
          v19[2] = v24;
          v19[3] = v25;
          return setBulkAttachmentsOnIOSurface(v17, (uint64_t)v19, v21);
        }
        CVPixelBuffer::setIOSurfaceAttachmentForCVBufferKey(this, a2, (CGColorSpace *)a3);
        return 0;
      }
    }
  }
  return result;
}

uint64_t CVBuffer::setAttachment(CVBuffer *this, const __CFString *a2, const void *a3, unsigned int a4)
{
  uint64_t result;
  const void *Value;
  const void *v10;
  const void *v11;
  const void *v12;

  if (a4 > 1)
    return 4294960635;
  result = 4294960635;
  if (a2 && a3)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
    v10 = Value;
    if (Value)
      CFRetain(Value);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
    v11 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
    v12 = v11;
    if (v11)
      CFRetain(v11);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + a4 + 10), a2, a3);
    if (v10)
      CFRelease(v10);
    if (v12)
      CFRelease(v12);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
    return 0;
  }
  return result;
}

uint64_t CVPixelBuffer::setAttachments(CVPixelBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  __IOSurface *v8;
  uint64_t v9;
  __IOSurface *v10;
  int v11;
  int v12;
  unsigned int v13;
  __CFDictionary *Mutable;
  const CFDictionaryKeyCallBacks *v15;
  const CFDictionaryValueCallBacks *v16;
  const void *v17;
  __CFString *Value;
  __CFString *v19;
  const void *v20;
  int v21;
  const __CFString *v22;
  _OWORD v24[7];
  int v25;
  uint64_t v26;
  __int128 context;
  CFDictionaryRef keysAndValues[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;

  if (!_os_feature_enabled_impl())
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)keysAndValues = 0u;
    v29 = 0u;
    context = 0u;
    v7 = CVBuffer::setAttachments(this, a2, a3);
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
    if (a3 != 1)
      return v7;
    if ((_DWORD)v7)
      return v7;
    v10 = (__IOSurface *)v9;
    if (!v9)
      return v7;
    v11 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
    if (v11 >= 1)
    {
      v12 = v11;
      v13 = 0;
      Mutable = 0;
      v7 = 0;
      v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v26 = 0;
        v17 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
        Value = (__CFString *)CFDictionaryGetValue(a2, v17);
        if (Value)
        {
          v19 = Value;
          v20 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
          v21 = convertAttachmentToIOSurfaceStruct(v20, v19, (uint64_t)&context, &v26);
          v7 |= v26;
          if (!v21)
          {
            if (!Mutable)
              Mutable = CFDictionaryCreateMutable(0, 0, v15, v16);
            v22 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
            CVPixelBuffer::addIOSurfaceAttachmentToDictionary(this, Mutable, v22, (CGColorSpace *)v19);
          }
        }
        ++v13;
      }
      while (v12 != v13);
      if (v7)
      {
        v24[4] = v31;
        v24[5] = v32;
        v24[6] = v33;
        v25 = v34;
        v24[0] = context;
        v24[1] = *(_OWORD *)keysAndValues;
        v24[2] = v29;
        v24[3] = v30;
        v7 = setBulkAttachmentsOnIOSurface((uint64_t)v10, (uint64_t)v24, v7);
      }
      if (Mutable)
      {
        IOSurfaceSetValues(v10, Mutable);
        CFRelease(Mutable);
      }
      return v7;
    }
    return 0;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  v7 = 4294960635;
  if (!a2 || a3 > 1)
    return v7;
  if (a3 == 1)
  {
    v8 = (__IOSurface *)v6;
    if (v6)
    {
      keysAndValues[0] = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      context = *((_OWORD *)this + 5);
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)translateCoreVideoAttachmentKeyToIOSurfaceKeyAndStoreIt, &context);
      IOSurfaceSetValues(v8, keysAndValues[0]);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
      CFRelease(keysAndValues[0]);
      return 0;
    }
  }
  return CVBuffer::setAttachments(this, a2, a3);
}

uint64_t CVGetCVBufferAttachmentKeyAtIndexInMappingTable(unsigned int a1)
{
  if (a1 > 0x1A)
    return 0;
  else
    return (uint64_t)*(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1];
}

uint64_t CVPixelBufferBacking::getIOOrEXSurface(CVPixelBufferBacking *this)
{
  pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0);
  return *((_QWORD *)this + 57);
}

uint64_t convertAttachmentToIOSurfaceStruct(const void *a1, const __CFString *a2, uint64_t a3, uint64_t *a4)
{
  CFTypeID TypeID;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  CFTypeID v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  uint64_t result;
  uint64_t v20;
  int IntegerCodePointForString;
  int v22;
  char v23;
  int v24;
  char v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  char v29;
  CFTypeID v30;
  unsigned int v31;
  char v32;
  CFTypeID v33;
  char v34;
  double v35;
  double v36;
  double v37;
  double valuePtr;
  uint8_t buf[4];
  const char *v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  CFRange v46;
  CFRange v47;

  v45 = *MEMORY[0x1E0C80C00];
  if (CFEqual(a1, CFSTR("CVCleanAperture")))
  {
    v37 = 0.0;
    valuePtr = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    if (!a2)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_18;
    }
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("Width"), &valuePtr)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("Height"), &v37)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("HorizontalOffset"), &v36)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("VerticalOffset"), &v35))
    {
      v9 = llround(v37 * 16.0);
      *(_DWORD *)a3 = llround(valuePtr * 16.0);
      *(_DWORD *)(a3 + 4) = 16;
      v10 = llround(v36 * 16.0);
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = 16;
      v11 = llround(v35 * 16.0);
      *(_DWORD *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 20) = 16;
      *(_DWORD *)(a3 + 24) = v11;
      *(_DWORD *)(a3 + 28) = 16;
LABEL_18:
      v15 = *a4 | 1;
LABEL_86:
      *a4 = v15;
      return 1;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferCleanApertureKey, attachmentValue is invalid.";
      v14 = MEMORY[0x1E0C81028];
LABEL_25:
      _os_log_impl(&dword_1A2C42000, v14, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      return 1;
    }
    return 1;
  }
  if (CFEqual(a1, CFSTR("CVPixelAspectRatio")))
  {
    v37 = 0.0;
    valuePtr = 0.0;
    if (a2)
    {
      v12 = CFDictionaryGetTypeID();
      if (v12 != CFGetTypeID(a2)
        || !cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("HorizontalSpacing"), &v37)
        || !cvGetDoubleFromDictionary((const __CFDictionary *)a2, CFSTR("VerticalSpacing"), &valuePtr))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferPixelAspectRatioKey, attachmentValue is invalid.";
          v14 = MEMORY[0x1E0C81028];
          goto LABEL_25;
        }
        return 1;
      }
      v13 = llround(valuePtr * 16.0);
      *(_DWORD *)(a3 + 32) = llround(v37 * 16.0);
      *(_DWORD *)(a3 + 36) = 16;
      *(_DWORD *)(a3 + 40) = v13;
      *(_DWORD *)(a3 + 44) = 16;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    v15 = *a4 | 2;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferGammaLevel")))
  {
    valuePtr = 0.0;
    if (a2)
    {
      v16 = CFGetTypeID(a2);
      if (v16 != CFNumberGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferGammaLevelKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, &valuePtr);
      *(_DWORD *)(a3 + 48) = llround(valuePtr * 268435456.0);
      *(_DWORD *)(a3 + 52) = 0x10000000;
    }
    else
    {
      *(_QWORD *)(a3 + 48) = 0;
    }
    v15 = *a4 | 4;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVFieldCount")))
  {
    LOBYTE(valuePtr) = 0;
    if (a2)
    {
      v17 = CFGetTypeID(a2);
      if (v17 != CFNumberGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferFieldCountKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt8Type, &valuePtr);
      if (SLOBYTE(valuePtr) < 1)
        return 1;
      *(_BYTE *)(a3 + 56) = LOBYTE(valuePtr);
    }
    else
    {
      *(_BYTE *)(a3 + 56) = 0;
    }
    v15 = *a4 | 8;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVFieldDetail")))
  {
    if (a2)
    {
      v18 = CFStringGetTypeID();
      if (v18 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferFieldDetailKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      if (CFEqual(a2, CFSTR("TemporalTopFirst")))
      {
        result = 1;
        *(_BYTE *)(a3 + 57) = 1;
        v20 = *a4 | 0x10;
LABEL_42:
        *a4 = v20;
        return result;
      }
      if (CFEqual(a2, CFSTR("TemporalBottomFirst")))
      {
        v23 = 6;
      }
      else if (CFEqual(a2, CFSTR("SpatialFirstLineEarly")))
      {
        v23 = 9;
      }
      else
      {
        if (!CFEqual(a2, CFSTR("SpatialFirstLineLate")))
          return 1;
        v23 = 14;
      }
      *(_BYTE *)(a3 + 57) = v23;
    }
    else
    {
      *(_BYTE *)(a3 + 57) = 0;
    }
    v15 = *a4 | 0x10;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferYCbCrMatrix")))
  {
    if (a2)
    {
      IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(a2);
      if ((IntegerCodePointForString & 0xFFFFFFFD) == 0)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferYCbCrMatrixKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      *(_BYTE *)(a3 + 58) = IntegerCodePointForString;
    }
    else
    {
      *(_BYTE *)(a3 + 58) = 0;
    }
    v15 = *a4 | 0x20;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferColorPrimaries")))
  {
    if (a2)
    {
      v22 = CVColorPrimariesGetIntegerCodePointForString(a2);
      if ((v22 & 0xFFFFFFFD) == 0)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferColorPrimariesKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      *(_BYTE *)(a3 + 59) = v22;
    }
    else
    {
      *(_BYTE *)(a3 + 59) = 0;
    }
    v15 = *a4 | 0x40;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferTransferFunction")))
  {
    if (a2)
    {
      v24 = CVTransferFunctionGetIntegerCodePointForString(a2);
      v25 = v24;
      if ((v24 & 0xFFFFFFFD) == 0 && !CFEqual(CFSTR("UseGamma"), a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferTransferFunctionKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      *(_BYTE *)(a3 + 60) = v25;
    }
    else
    {
      *(_BYTE *)(a3 + 60) = 0;
    }
    v15 = *a4 | 0x80;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferChromaLocationTopField")))
  {
    if (a2)
    {
      v26 = CFStringGetTypeID();
      if (v26 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaLocationTopFieldKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      if (CFEqual(a2, CFSTR("Left")))
      {
        result = 1;
        *(_BYTE *)(a3 + 61) = 1;
        v20 = *a4 | 0x100;
        goto LABEL_42;
      }
      if (CFEqual(a2, CFSTR("Center")))
      {
        v29 = 2;
      }
      else if (CFEqual(a2, CFSTR("TopLeft")))
      {
        v29 = 3;
      }
      else if (CFEqual(a2, CFSTR("Top")))
      {
        v29 = 4;
      }
      else if (CFEqual(a2, CFSTR("BottomLeft")))
      {
        v29 = 5;
      }
      else if (CFEqual(a2, CFSTR("Bottom")))
      {
        v29 = 6;
      }
      else
      {
        if (!CFEqual(a2, CFSTR("DV 4:2:0")))
          return 1;
        v29 = 7;
      }
      *(_BYTE *)(a3 + 61) = v29;
    }
    else
    {
      *(_BYTE *)(a3 + 61) = 0;
    }
    v15 = *a4 | 0x100;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferChromaLocationBottomField")))
  {
    if (a2)
    {
      v27 = CFStringGetTypeID();
      if (v27 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaLocationBottomFieldKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      if (CFEqual(a2, CFSTR("Left")))
      {
        result = 1;
        *(_BYTE *)(a3 + 62) = 1;
        v20 = *a4 | 0x200;
        goto LABEL_42;
      }
      if (CFEqual(a2, CFSTR("Center")))
      {
        v32 = 2;
      }
      else if (CFEqual(a2, CFSTR("TopLeft")))
      {
        v32 = 3;
      }
      else if (CFEqual(a2, CFSTR("Top")))
      {
        v32 = 4;
      }
      else if (CFEqual(a2, CFSTR("BottomLeft")))
      {
        v32 = 5;
      }
      else if (CFEqual(a2, CFSTR("Bottom")))
      {
        v32 = 6;
      }
      else
      {
        if (!CFEqual(a2, CFSTR("DV 4:2:0")))
          return 1;
        v32 = 7;
      }
      *(_BYTE *)(a3 + 62) = v32;
    }
    else
    {
      *(_BYTE *)(a3 + 62) = 0;
    }
    v15 = *a4 | 0x200;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("CVImageBufferChromaSubsampling")))
  {
    if (a2)
    {
      v28 = CFStringGetTypeID();
      if (v28 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaSubsamplingKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      if (CFEqual(a2, CFSTR("4:2:0")))
      {
        result = 1;
        *(_BYTE *)(a3 + 63) = 1;
        v20 = *a4 | 0x400;
        goto LABEL_42;
      }
      if (CFEqual(a2, CFSTR("4:2:2")))
      {
        v34 = 2;
      }
      else
      {
        if (!CFEqual(a2, CFSTR("4:1:1")))
          return 1;
        v34 = 3;
      }
      *(_BYTE *)(a3 + 63) = v34;
    }
    else
    {
      *(_BYTE *)(a3 + 63) = 0;
    }
    v15 = *a4 | 0x400;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("MasteringDisplayColorVolume")))
  {
    if (a2)
    {
      v30 = CFDataGetTypeID();
      if (v30 != CFGetTypeID(a2) || CFDataGetLength((CFDataRef)a2) != 24)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferMasteringDisplayColorVolumeKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      v46.location = 0;
      v46.length = 24;
      CFDataGetBytes((CFDataRef)a2, v46, buf);
      *(_WORD *)(a3 + 64) = bswap32(*(unsigned __int16 *)buf) >> 16;
      *(_WORD *)(a3 + 66) = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
      *(_WORD *)(a3 + 68) = bswap32((unsigned __int16)v40) >> 16;
      *(_WORD *)(a3 + 70) = bswap32(WORD1(v40)) >> 16;
      *(_WORD *)(a3 + 72) = bswap32(WORD2(v40)) >> 16;
      *(_WORD *)(a3 + 74) = bswap32(HIWORD(v40)) >> 16;
      *(_WORD *)(a3 + 76) = bswap32(v41) >> 16;
      *(_WORD *)(a3 + 78) = bswap32(v42) >> 16;
      v31 = bswap32(v44);
      *(_DWORD *)(a3 + 80) = bswap32(v43);
      *(_DWORD *)(a3 + 84) = v31;
    }
    else
    {
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = 0;
    }
    v15 = *a4 | 0x800;
    goto LABEL_86;
  }
  if (CFEqual(a1, CFSTR("ContentLightLevelInfo")))
  {
    if (a2)
    {
      v33 = CFDataGetTypeID();
      if (v33 != CFGetTypeID(a2) || CFDataGetLength((CFDataRef)a2) != 4)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          return 1;
        *(_DWORD *)buf = 136315138;
        v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferContentLightLevelInfoKey, attachmentValue is invalid.";
        v14 = MEMORY[0x1E0C81028];
        goto LABEL_25;
      }
      v47.location = 0;
      v47.length = 4;
      CFDataGetBytes((CFDataRef)a2, v47, buf);
      *(_WORD *)(a3 + 88) = bswap32(*(unsigned __int16 *)buf) >> 16;
      *(_WORD *)(a3 + 90) = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
    }
    else
    {
      *(_DWORD *)(a3 + 88) = 0;
    }
    v15 = *a4 | 0x1000;
    goto LABEL_86;
  }
  result = CFEqual(a1, CFSTR("AlphaChannelMode"));
  if ((_DWORD)result)
  {
    if (a2)
    {
      if (CFEqual(a2, CFSTR("StraightAlpha")))
      {
        *(_BYTE *)(a3 + 100) = 1;
        *a4 |= 0x4000uLL;
      }
      if (!CFEqual(a2, CFSTR("PremultipliedAlpha")))
        return 1;
      *(_BYTE *)(a3 + 100) = 2;
    }
    else
    {
      *(_BYTE *)(a3 + 100) = 0;
    }
    v15 = *a4 | 0x4000;
    goto LABEL_86;
  }
  return result;
}

uint64_t setBulkAttachmentsOnIOSurface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a3)
    return 0;
  if (a3 != 32)
    return IOSurfaceSetBulkAttachments2();
  result = IOSurfaceGetYCbCrMatrix();
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 58))
      return IOSurfaceSetBulkAttachments2();
  }
  return result;
}

uint64_t CVBuffer::setAttachments(CVBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  uint64_t result;
  __int128 v7;
  CVAttachmentMode v8;

  result = 4294960635;
  if (a2)
  {
    if (a3 <= 1)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      v7 = *((_OWORD *)this + 5);
      v8 = a3;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)applySetAttachments, &v7);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
      return 0;
    }
  }
  return result;
}

uint64_t CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable(void)
{
  return 27;
}

uint64_t cvGetDoubleFromDictionary(const __CFDictionary *a1, const __CFString *a2, double *a3)
{
  uint64_t result;
  CFTypeID v5;
  void *value;

  value = 0;
  result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    v5 = CFGetTypeID(value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int CVYCbCrMatrixGetIntegerCodePointForString(CFStringRef yCbCrMatrixString)
{
  CFTypeID TypeID;
  CFIndex Length;
  const __CFString *v5;
  const __CFString *v6;
  SInt32 IntValue;
  CFRange v8;

  if (!yCbCrMatrixString)
    return 2;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(yCbCrMatrixString))
    return 2;
  if (CFEqual(yCbCrMatrixString, CFSTR("ITU_R_709_2")))
    return 1;
  if (CFEqual(yCbCrMatrixString, CFSTR("ITU_R_601_4")))
    return 6;
  if (CFEqual(yCbCrMatrixString, CFSTR("SMPTE_240M_1995")))
    return 7;
  if (CFEqual(yCbCrMatrixString, CFSTR("ITU_R_2020")))
    return 9;
  if (CFEqual(yCbCrMatrixString, CFSTR("IPT")))
    return 248;
  if (CFEqual(yCbCrMatrixString, CFSTR("ITU_R_2100_ICtCp")))
    return 14;
  if (CFEqual(yCbCrMatrixString, CFSTR("IPT_C2")))
    return 15;
  if (!CFStringHasPrefix(yCbCrMatrixString, CFSTR("YCbCrMatrix#")))
    return 2;
  Length = CFStringGetLength(yCbCrMatrixString);
  v8.location = CFStringGetLength(CFSTR("YCbCrMatrix#"));
  v8.length = Length - v8.location;
  v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], yCbCrMatrixString, v8);
  if (!v5)
    return 2;
  v6 = v5;
  IntValue = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

void createAttachmentsDictionaryFromIOSurfaceStruct(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  int v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  unsigned int v27;
  const void **v28;
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v30;
  CFStringRef v31;
  const __CFString *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  int v44;
  CFDataRef v45;
  __int16 v46;
  __int16 v47;
  CFDataRef v48;
  int v49;
  const void **v50;
  double v51;
  double v52;
  double v53;
  double valuePtr;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  if (*(_DWORD *)(a1 + 4))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(_DWORD *)(a1 + 20))
      {
        if (*(_DWORD *)(a1 + 28))
        {
          v52 = 0.0;
          v53 = 0.0;
          v51 = 0.0;
          v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v6)
          {
            v7 = v6;
            valuePtr = (double)*(int *)a1 / (double)*(int *)(a1 + 4);
            v8 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
            if (v8)
            {
              v9 = v8;
              CFDictionarySetValue(v7, CFSTR("Width"), v8);
              CFRelease(v9);
            }
            v53 = (double)*(int *)(a1 + 8) / (double)*(int *)(a1 + 12);
            v10 = CFNumberCreate(v4, kCFNumberDoubleType, &v53);
            if (v10)
            {
              v11 = v10;
              CFDictionarySetValue(v7, CFSTR("Height"), v10);
              CFRelease(v11);
            }
            v52 = (double)*(int *)(a1 + 16) / (double)*(int *)(a1 + 20);
            v12 = CFNumberCreate(v4, kCFNumberDoubleType, &v52);
            if (v12)
            {
              v13 = v12;
              CFDictionarySetValue(v7, CFSTR("HorizontalOffset"), v12);
              CFRelease(v13);
            }
            v51 = (double)*(int *)(a1 + 24) / (double)*(int *)(a1 + 28);
            v14 = CFNumberCreate(v4, kCFNumberDoubleType, &v51);
            if (v14)
            {
              v15 = v14;
              CFDictionarySetValue(v7, CFSTR("VerticalOffset"), v14);
              CFRelease(v15);
            }
            CFDictionarySetValue(Mutable, CFSTR("CVCleanAperture"), v7);
            CFRelease(v7);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 36))
  {
    if (*(_DWORD *)(a1 + 44))
    {
      v53 = 0.0;
      valuePtr = 0.0;
      v16 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v16)
      {
        v17 = v16;
        valuePtr = (double)*(int *)(a1 + 32) / (double)*(int *)(a1 + 36);
        v18 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
        if (v18)
        {
          v19 = v18;
          CFDictionarySetValue(v17, CFSTR("HorizontalSpacing"), v18);
          CFRelease(v19);
        }
        v53 = (double)*(int *)(a1 + 40) / (double)*(int *)(a1 + 44);
        v20 = CFNumberCreate(v4, kCFNumberDoubleType, &v53);
        if (v20)
        {
          v21 = v20;
          CFDictionarySetValue(v17, CFSTR("VerticalSpacing"), v20);
          CFRelease(v21);
        }
        CFDictionarySetValue(Mutable, CFSTR("CVPixelAspectRatio"), v17);
        CFRelease(v17);
      }
    }
  }
  v22 = *(_DWORD *)(a1 + 52);
  if (v22)
  {
    valuePtr = (double)*(int *)(a1 + 48) / (double)v22;
    v23 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    if (v23)
    {
      v24 = v23;
      CFDictionarySetValue(Mutable, CFSTR("CVImageBufferGammaLevel"), v23);
      CFRelease(v24);
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v25 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 56));
    if (v25)
    {
      v26 = v25;
      CFDictionarySetValue(Mutable, CFSTR("CVFieldCount"), v25);
      CFRelease(v26);
    }
  }
  v27 = *(unsigned __int8 *)(a1 + 57);
  if (v27 > 8)
  {
    if (v27 == 9)
    {
      v28 = (const void **)&kCVImageBufferFieldDetailSpatialFirstLineEarly;
    }
    else
    {
      if (v27 != 14)
        goto LABEL_39;
      v28 = (const void **)&kCVImageBufferFieldDetailSpatialFirstLineLate;
    }
  }
  else if (v27 == 1)
  {
    v28 = (const void **)&kCVImageBufferFieldDetailTemporalTopFirst;
  }
  else
  {
    if (v27 != 6)
      goto LABEL_39;
    v28 = (const void **)&kCVImageBufferFieldDetailTemporalBottomFirst;
  }
  CFDictionarySetValue(Mutable, CFSTR("CVFieldDetail"), *v28);
LABEL_39:
  StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 58));
  if (StringForIntegerCodePoint)
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferYCbCrMatrix"), StringForIntegerCodePoint);
  v30 = CVColorPrimariesGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 59));
  if (v30)
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferColorPrimaries"), v30);
  v31 = CVTransferFunctionGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 60));
  if (v31)
  {
    v32 = v31;
LABEL_45:
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferTransferFunction"), v32);
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 60) == 2 && *(_DWORD *)(a1 + 52))
  {
    v32 = CFSTR("UseGamma");
    goto LABEL_45;
  }
LABEL_49:
  v33 = *(unsigned __int8 *)(a1 + 61) - 1;
  if (v33 <= 6)
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferChromaLocationTopField"), *off_1E48A7D00[(char)v33]);
  v34 = *(unsigned __int8 *)(a1 + 62) - 1;
  if (v34 <= 6)
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferChromaLocationBottomField"), *off_1E48A7D00[(char)v34]);
  v35 = *(unsigned __int8 *)(a1 + 63) - 1;
  if (v35 <= 2)
    CFDictionarySetValue(Mutable, CFSTR("CVImageBufferChromaSubsampling"), *off_1E48A7D38[(char)v35]);
  v36 = *(_WORD *)(a1 + 64);
  if (v36)
  {
    v37 = *(_WORD *)(a1 + 66);
    if (v37)
    {
      v38 = *(_WORD *)(a1 + 68);
      if (v38)
      {
        v39 = *(_WORD *)(a1 + 70);
        if (v39)
        {
          v40 = *(_WORD *)(a1 + 72);
          if (v40)
          {
            v41 = *(_WORD *)(a1 + 74);
            if (v41)
            {
              v42 = *(_WORD *)(a1 + 76);
              if (v42)
              {
                v43 = *(_WORD *)(a1 + 78);
                if (v43)
                {
                  v44 = *(_DWORD *)(a1 + 80);
                  if (v44)
                  {
                    LOBYTE(valuePtr) = HIBYTE(v36);
                    BYTE1(valuePtr) = v36;
                    BYTE2(valuePtr) = HIBYTE(v37);
                    BYTE3(valuePtr) = v37;
                    BYTE4(valuePtr) = HIBYTE(v38);
                    BYTE5(valuePtr) = v38;
                    BYTE6(valuePtr) = HIBYTE(v39);
                    HIBYTE(valuePtr) = v39;
                    v55 = HIBYTE(v40);
                    v56 = v40;
                    v57 = HIBYTE(v41);
                    v58 = v41;
                    v59 = HIBYTE(v42);
                    v60 = v42;
                    v61 = HIBYTE(v43);
                    v62 = v43;
                    v63 = HIBYTE(v44);
                    v64 = BYTE2(v44);
                    v65 = BYTE1(v44);
                    v66 = v44;
                    v67 = bswap32(*(_DWORD *)(a1 + 84));
                    v45 = CFDataCreate(v4, (const UInt8 *)&valuePtr, 24);
                    CFDictionarySetValue(Mutable, CFSTR("MasteringDisplayColorVolume"), v45);
                    CFRelease(v45);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v46 = *(_WORD *)(a1 + 88);
  if (v46)
  {
    v47 = *(_WORD *)(a1 + 90);
    if (v47)
    {
      LOBYTE(valuePtr) = HIBYTE(v46);
      BYTE1(valuePtr) = v46;
      BYTE2(valuePtr) = HIBYTE(v47);
      BYTE3(valuePtr) = v47;
      v48 = CFDataCreate(v4, (const UInt8 *)&valuePtr, 4);
      CFDictionarySetValue(Mutable, CFSTR("ContentLightLevelInfo"), v48);
      CFRelease(v48);
    }
  }
  v49 = *(unsigned __int8 *)(a1 + 100);
  if (v49 == 1)
  {
    v50 = (const void **)&kCVImageBufferAlphaChannelMode_StraightAlpha;
  }
  else
  {
    if (v49 != 2)
      goto LABEL_73;
    v50 = (const void **)&kCVImageBufferAlphaChannelMode_PremultipliedAlpha;
  }
  CFDictionarySetValue(Mutable, CFSTR("AlphaChannelMode"), *v50);
LABEL_73:
  if (a2)
    *a2 = Mutable;
}

CFStringRef CVColorPrimariesGetStringForIntegerCodePoint(int colorPrimariesCodePoint)
{
  int v1;
  CFStringRef result;
  CFStringRef *v4;
  int v5;
  __CFString *context;
  int v7;
  uint64_t v8;
  const __CFString *v9;

  v1 = colorPrimariesCodePoint;
  result = 0;
  switch(colorPrimariesCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
      v4 = &kCVImageBufferColorPrimaries_ITU_R_709_2;
      return *v4;
    case 3:
    case 4:
    case 7:
    case 8:
    case 10:
      goto LABEL_5;
    case 5:
      v4 = &kCVImageBufferColorPrimaries_EBU_3213;
      return *v4;
    case 6:
      v4 = &kCVImageBufferColorPrimaries_SMPTE_C;
      return *v4;
    case 9:
      v4 = &kCVImageBufferColorPrimaries_ITU_R_2020;
      return *v4;
    case 11:
      v4 = &kCVImageBufferColorPrimaries_DCI_P3;
      return *v4;
    case 12:
      v4 = &kCVImageBufferColorPrimaries_P3_D65;
      return *v4;
    default:
      if (v1 == 22)
      {
        v4 = &kCVImageBufferColorPrimaries_P22;
        return *v4;
      }
      else
      {
LABEL_5:
        if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
        {
          v5 = v1;
          dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
          v1 = v5;
        }
        context = CFSTR("ColorPrimaries#");
        v7 = v1;
        v8 = sCVStringsForUnrecognizedColorPrimariesCodePoints;
        dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
        return v9;
      }
  }
}

CFStringRef CVYCbCrMatrixGetStringForIntegerCodePoint(int yCbCrMatrixCodePoint)
{
  int v1;
  CFStringRef result;
  __CFString **v4;
  int v5;
  __CFString *context;
  int v7;
  uint64_t v8;
  const __CFString *v9;

  v1 = yCbCrMatrixCodePoint;
  result = 0;
  switch(yCbCrMatrixCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
      v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_709_2;
      return *v4;
    case 3:
    case 4:
    case 5:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
      goto LABEL_5;
    case 6:
      v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_601_4;
      return *v4;
    case 7:
      v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
      return *v4;
    case 9:
      v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_2020;
      return *v4;
    case 14:
      v4 = kCVImageBufferYCbCrMatrix_ITU_R_2100_ICtCp;
      return *v4;
    case 15:
      v4 = kCVImageBufferYCbCrMatrix_IPT_C2;
      return *v4;
    default:
      if (v1 == 248)
      {
        v4 = kCVImageBufferYCbCrMatrix_IPT;
        return *v4;
      }
      else
      {
LABEL_5:
        if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
        {
          v5 = v1;
          dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
          v1 = v5;
        }
        context = CFSTR("YCbCrMatrix#");
        v7 = v1;
        v8 = sCVStringsForUnrecognizedYCbCrMatrixCodePoints;
        dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
        return v9;
      }
  }
}

CFStringRef CVTransferFunctionGetStringForIntegerCodePoint(int transferFunctionCodePoint)
{
  int v1;
  CFStringRef result;
  CFStringRef *v4;
  int v5;
  __CFString *context;
  int v7;
  uint64_t v8;
  const __CFString *v9;

  v1 = transferFunctionCodePoint;
  result = 0;
  switch(transferFunctionCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
    case 6:
    case 14:
    case 15:
      v4 = &kCVImageBufferTransferFunction_ITU_R_709_2;
      goto LABEL_12;
    case 7:
      v4 = &kCVImageBufferTransferFunction_SMPTE_240M_1995;
      goto LABEL_12;
    case 8:
      v4 = &kCVImageBufferTransferFunction_Linear;
      goto LABEL_12;
    case 13:
      v4 = &kCVImageBufferTransferFunction_sRGB;
      goto LABEL_12;
    case 16:
      v4 = &kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ;
      goto LABEL_12;
    case 17:
      v4 = &kCVImageBufferTransferFunction_SMPTE_ST_428_1;
      goto LABEL_12;
    case 18:
      v4 = &kCVImageBufferTransferFunction_ITU_R_2100_HLG;
LABEL_12:
      result = *v4;
      break;
    default:
      if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
      {
        v5 = v1;
        dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
        v1 = v5;
      }
      context = CFSTR("TransferFunction#");
      v7 = v1;
      v8 = sCVStringsForUnrecognizedTransferFunctionCodePoints;
      dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
      result = v9;
      break;
  }
  return result;
}

void CVPixelBuffer::setIOSurfaceAttachmentForCVBufferKey(CVPixelBuffer *this, const __CFString *a2, CGColorSpace *a3)
{
  uint64_t v5;
  __IOSurface *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFTypeID TypeID;
  CFTypeRef v10;
  const void *v11;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (v5)
  {
    v6 = (__IOSurface *)v5;
    v7 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
    if (v7)
    {
      v8 = v7;
      if ((const __CFString *)*MEMORY[0x1E0CBBF90] == v7)
      {
        TypeID = CGColorSpaceGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          v10 = CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(a3);
          if (v10)
          {
            v11 = v10;
            IOSurfaceSetValue(v6, v8, v10);
            CFRelease(v11);
          }
        }
      }
      else
      {
        IOSurfaceSetValue(v6, v7, a3);
      }
    }
  }
}

int CVTransferFunctionGetIntegerCodePointForString(CFStringRef transferFunctionString)
{
  CFTypeID TypeID;
  CFIndex Length;
  const __CFString *v5;
  const __CFString *v6;
  SInt32 IntValue;
  CFRange v8;

  if (!transferFunctionString)
    return 2;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(transferFunctionString))
    return 2;
  if (CFEqual(transferFunctionString, CFSTR("ITU_R_709_2")))
    return 1;
  if (CFEqual(transferFunctionString, CFSTR("UseGamma")))
    return 2;
  if (CFEqual(transferFunctionString, CFSTR("SMPTE_240M_1995")))
    return 7;
  if (CFEqual(transferFunctionString, CFSTR("SMPTE_ST_2084_PQ")))
    return 16;
  if (CFEqual(transferFunctionString, CFSTR("SMPTE_ST_428_1")))
    return 17;
  if (CFEqual(transferFunctionString, CFSTR("ITU_R_2100_HLG")))
    return 18;
  if (CFEqual(transferFunctionString, CFSTR("Linear")))
    return 8;
  if (CFEqual(transferFunctionString, CFSTR("IEC_sRGB")) || CFEqual(transferFunctionString, CFSTR("sRGB")))
    return 13;
  if (CFEqual(transferFunctionString, CFSTR("ITU_R_2020")))
    return 1;
  if (!CFStringHasPrefix(transferFunctionString, CFSTR("TransferFunction#")))
    return 2;
  Length = CFStringGetLength(transferFunctionString);
  v8.location = CFStringGetLength(CFSTR("TransferFunction#"));
  v8.length = Length - v8.location;
  v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], transferFunctionString, v8);
  if (!v5)
    return 2;
  v6 = v5;
  IntValue = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

int CVColorPrimariesGetIntegerCodePointForString(CFStringRef colorPrimariesString)
{
  CFTypeID TypeID;
  CFIndex Length;
  const __CFString *v5;
  const __CFString *v6;
  SInt32 IntValue;
  CFRange v8;

  if (!colorPrimariesString)
    return 2;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(colorPrimariesString))
    return 2;
  if (CFEqual(colorPrimariesString, CFSTR("ITU_R_709_2")))
    return 1;
  if (CFEqual(colorPrimariesString, CFSTR("EBU_3213")))
    return 5;
  if (CFEqual(colorPrimariesString, CFSTR("SMPTE_C")))
    return 6;
  if (CFEqual(colorPrimariesString, CFSTR("DCI_P3")))
    return 11;
  if (CFEqual(colorPrimariesString, CFSTR("P3_D65")))
    return 12;
  if (CFEqual(colorPrimariesString, CFSTR("ITU_R_2020")))
    return 9;
  if (CFEqual(colorPrimariesString, CFSTR("P22")))
    return 22;
  if (!CFStringHasPrefix(colorPrimariesString, CFSTR("ColorPrimaries#")))
    return 2;
  Length = CFStringGetLength(colorPrimariesString);
  v8.location = CFStringGetLength(CFSTR("ColorPrimaries#"));
  v8.length = Length - v8.location;
  v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], colorPrimariesString, v8);
  if (!v5)
    return 2;
  v6 = v5;
  IntValue = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

void CVPixelBuffer::addIOSurfaceAttachmentToDictionary(CVPixelBuffer *this, __CFDictionary *a2, const __CFString *a3, CGColorSpace *a4)
{
  uint64_t v7;
  const void *v8;
  const void *v9;
  CFTypeID TypeID;
  CFTypeRef v11;
  const void *v12;

  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (a2)
  {
    if (v7)
    {
      v8 = CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a3);
      if (v8)
      {
        v9 = v8;
        if ((const void *)*MEMORY[0x1E0CBBF90] == v8)
        {
          TypeID = CGColorSpaceGetTypeID();
          if (TypeID == CFGetTypeID(a4))
          {
            v11 = CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(a4);
            if (v11)
            {
              v12 = v11;
              CFDictionaryAddValue(a2, v9, v11);
              CFRelease(v12);
            }
          }
        }
        else
        {
          CFDictionaryAddValue(a2, v8, a4);
        }
      }
    }
  }
}

uint64_t CVBuffer::removeAllAttachments(CFMutableDictionaryRef *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  CFDictionaryRemoveAllValues(this[10]);
  CFDictionaryRemoveAllValues(this[11]);
  return pthread_mutex_unlock(v2);
}

IOSurfaceRef CVPixelBufferBacking::getBaseAddressOfPlane(CVPixelBufferBacking *this, size_t a2, uint64_t a3)
{
  size_t v3;

  if (!*((_DWORD *)this + 42) && (a3 & 1) != 0)
    return 0;
  v3 = *((_QWORD *)this + 130);
  if (!(a2 | v3))
    return (IOSurfaceRef)(*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(_QWORD *)this + 320))(this, a3);
  if (v3 <= a2)
    return 0;
  if (*((_QWORD *)this + 57))
    return IOOrEXSurfaceGetBaseAddressOfPlane(*((IOSurfaceRef *)this + 57), a2);
  return (IOSurfaceRef)*((_QWORD *)this + a2 + 62);
}

uint64_t CVPixelBufferPool::finalize(CVPixelBufferPool *this)
{
  const void *v2;
  const void *v3;
  void *v4;

  (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  kdebug_trace();
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
    free(v4);
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return CVBufferPool::finalize(this);
}

uint64_t CVPixelBufferPool::scanIOSurfaces(CVPixelBufferPool *this, void (*a2)(__IOSurface *, void *), void *a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(_QWORD *, _QWORD *), _QWORD *))(**((_QWORD **)this + 2)
                                                                                                 + 248))(*((_QWORD *)this + 2), scanIOSurfacesCallback, v4);
}

uint64_t CVLocklessBunchPair::applyFunction(CVLocklessBunchPair *this, void (*a2)(const void *, void *), void *a3, char a4)
{
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  if ((a4 & 2) != 0)
  {
    v6 = *((_QWORD *)this + 28);
    if (v6)
    {
      if (CVAtomicBunchApply(v6, (uint64_t (*)(uint64_t, _QWORD))_applyFunction, (uint64_t)v8) == 2)
        return 4294960604;
    }
  }
  if ((a4 & 4) == 0)
    return 0;
  result = *((_QWORD *)this + 29);
  if (result)
  {
    if (CVAtomicBunchApply(result, (uint64_t (*)(uint64_t, _QWORD))_applyFunction, (uint64_t)v8) == 2)
      return 4294960604;
    else
      return 0;
  }
  return result;
}

uint64_t CVPixelBufferPoolPreAllocate(uint64_t a1, __CVPixelBufferPool *a2, int a3)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(a2);
  if (CVPixelBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t, BOOL))(*CVPixelBufferPool + 160))(CVPixelBufferPool, a1, a3 != 0);
  else
    return 4294960635;
}

uint64_t CVPixelBufferPoolSetMinBufferCount(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (CVPixelBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*CVPixelBufferPool + 144))(CVPixelBufferPool, a2, a3, a4, a5);
  else
    return 4294960635;
}

double CVPixelBufferPoolGetMaxBufferAge(_QWORD *a1)
{
  _QWORD *CVPixelBufferPool;
  double result;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool)
    return 0.0;
  (*(void (**)(_QWORD *))(*CVPixelBufferPool + 136))(CVPixelBufferPool);
  return result;
}

_QWORD *CVPixelBufferPoolGetMinBufferCount(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = _getCVPixelBufferPool(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 152))(result, a2);
  return result;
}

uint64_t CVPixelBufferPoolScanIOSurfaces(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (CVPixelBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*CVPixelBufferPool + 192))(CVPixelBufferPool, a2, a3, 2);
  else
    return 4294960635;
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  CFDictionaryRef result;

  result = (CFDictionaryRef)_getCVPixelBufferPool(pool);
  if (result)
    return (CFDictionaryRef)(*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)result + 120))(result);
  return result;
}

uint64_t CVPixelBufferPoolCopyIOSurfaceCreationProperties(_QWORD *a1, _QWORD *a2)
{
  _QWORD *CVPixelBufferPool;
  uint64_t v5;

  v5 = 0;
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  (*(void (**)(_QWORD *, uint64_t *))(*CVPixelBufferPool + 208))(CVPixelBufferPool, &v5);
  *a2 = v5;
  return 0;
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  _QWORD *CVPixelBufferPool;
  CVReturn v6;
  CVReturn v8;

  v8 = -6660;
  CVPixelBufferPool = _getCVPixelBufferPool(pixelBufferPool);
  v6 = -6661;
  if (pixelBufferOut && CVPixelBufferPool)
  {
    *pixelBufferOut = (CVPixelBufferRef)(*(uint64_t (**)(_QWORD *, CFAllocatorRef, _QWORD, CVReturn *))(*CVPixelBufferPool + 104))(CVPixelBufferPool, allocator, 0, &v8);
    return v8;
  }
  return v6;
}

CVReturn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CFDictionaryRef auxAttributes, CVPixelBufferRef *pixelBufferOut)
{
  _QWORD *CVPixelBufferPool;
  CVReturn v8;
  CVReturn v10;

  v10 = -6660;
  CVPixelBufferPool = _getCVPixelBufferPool(pixelBufferPool);
  v8 = -6661;
  if (pixelBufferOut && CVPixelBufferPool)
  {
    *pixelBufferOut = (CVPixelBufferRef)(*(uint64_t (**)(_QWORD *, CFAllocatorRef, CFDictionaryRef, CVReturn *))(*CVPixelBufferPool + 104))(CVPixelBufferPool, allocator, auxAttributes, &v10);
    return v10;
  }
  return v8;
}

_QWORD *_getCVPixelBufferPool(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferPoolGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

CFTypeID CVPixelBufferPoolGetTypeID(void)
{
  if (CVPixelBufferPoolGetTypeID::once != -1)
    dispatch_once_f(&CVPixelBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferPool);
  return kCVPixelBufferPoolID;
}

uint64_t CVPixelBufferPool::copyDerivedIOSurfaceCreationProperties(const void **this, const __CFDictionary **a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  CVPixelBufferBacking *v6;
  uint64_t DefaultBytesPerRowAlignment;
  unsigned int *v8;
  const __CFDictionary *PixelFormatDescription;
  const __CFDictionary *v10;
  const __CFBoolean *Value;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v20;
  __CFDictionary **v21;
  uint64_t v22;
  __CFDictionary *IntValueWithDefault;
  int v25;
  unint64_t v26;
  _OWORD v27[8];
  _OWORD v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)MEMORY[0x1E0C9AE00];
  IntValueWithDefault = (__CFDictionary *)CVDictionaryGetIntValueWithDefault(this[5], CFSTR("Width"), 0);
  v22 = CVDictionaryGetIntValueWithDefault(this[5], CFSTR("Height"), 0);
  v21 = (__CFDictionary **)CVDictionaryGetIntValueWithDefault(this[5], CFSTR("ExtendedPixelsLeft"), 0);
  v4 = CVDictionaryGetIntValueWithDefault(this[5], CFSTR("ExtendedPixelsTop"), 0);
  v5 = CVDictionaryGetIntValueWithDefault(this[5], CFSTR("ExtendedPixelsRight"), 0);
  v6 = (CVPixelBufferBacking *)CVDictionaryGetIntValueWithDefault(this[5], CFSTR("ExtendedPixelsBottom"), 0);
  DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment(v6);
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  v26 = 0;
  v25 = 0;
  PixelFormatDescription = CVPixelBufferBacking::getPixelFormatDescription((CVPixelBufferBacking *)this[5], (const __CFDictionary *)&v25, v8);
  v10 = (const __CFDictionary *)this[4];
  if (v10)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(v10, CFSTR("MetalCompatibility"));
    if (Value)
    {
      if (CFBooleanGetValue(Value))
      {
        DefaultBytesPerRowAlignment = 64;
        v12 = 64;
      }
      else
      {
        v12 = 16;
      }
    }
    else
    {
      v12 = 16;
    }
    v10 = (const __CFDictionary *)this[4];
    if (v10)
    {
      v13 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("WorstCaseBytesPerRow"), 0);
      v14 = CVDictionaryGetIntValueWithDefault(this[4], CFSTR("AdjustableBaseAddressGranularity"), 0);
      v10 = (const __CFDictionary *)this[4];
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v12 = 16;
  }
  v15 = *v3;
  v16 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("BytesPerRowAlignment"), 0);
  if (v16)
    DefaultBytesPerRowAlignment = (int)CVLowestCommonMultiple(DefaultBytesPerRowAlignment, v16);
  v17 = CVDictionaryGetIntValueWithDefault(this[4], CFSTR("PlaneAlignment"), 0);
  if (v17)
    v12 = CVLowestCommonMultiple(v12, v17);
  v18 = CVLowestCommonMultiple(v12, DefaultBytesPerRowAlignment);
  *(_QWORD *)&v20 = v21;
  *((_QWORD *)&v20 + 1) = v4;
  return CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(0, 0, v15, (const __CFAllocator *)this[5], (const __CFDictionary *)this[4], 0, PixelFormatDescription, IntValueWithDefault, v22, v20, v5, (unint64_t)v6, DefaultBytesPerRowAlignment, v18, v13, v14, 0, 0, 0,
           0,
           (unint64_t *)v28,
           (unint64_t *)v27,
           0,
           0,
           0,
           0,
           0,
           &v26,
           (void **)a2,
           v21);
}

uint64_t CVLowestCommonMultiple(int a1, int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;

  if (a1 >= 0)
    v2 = a1;
  else
    v2 = -a1;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if (v2 >= v3)
    v2 = v3;
  if (v2)
  {
    if (v2 < 1)
    {
      v5 = v4;
    }
    else
    {
      do
      {
        v5 = v2;
        v2 = (int)v4 % v2;
        v4 = v5;
      }
      while (v2 > 0);
    }
  }
  else if (v4 <= 1)
  {
    v5 = 1;
  }
  else
  {
    v5 = v4;
  }
  return (a2 * a1 / v5);
}

uint64_t CVBufferBacking::finalize(CVBufferBacking *this)
{
  __CFNotificationCenter *LocalCenter;
  _QWORD **v3;
  const void *v4;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("BufferBackingWillDeallocate"), *((const void **)this + 1), 0, 1u);
  v3 = (_QWORD **)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)this + 24))(this);
  CVTracePoolAction(1, 0, v3, "deallocated", 0, 0);
  (*(void (**)(CVBufferBacking *, _QWORD))(*(_QWORD *)this + 96))(this, 0);
  v4 = (const void *)*((_QWORD *)this + 15);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 15) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  return CVObject::finalize(this);
}

uint64_t CVMetalTextureCache::bufferBackingNotInUse(uint64_t a1, uint64_t a2)
{
  __CFArray *v4;
  const void *v5;
  const __CFArray *v6;
  CFIndex Count;
  const void *v8;
  CFIndex FirstIndexOfValue;
  __CFArray **v10;
  __CFArray *v11;
  const void *v12;
  const __CFArray *v13;
  CFIndex v14;
  const void *v15;
  CFIndex v16;
  CFRange v18;
  CFRange v19;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v4 = *(__CFArray **)(a1 + 40);
  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  v6 = *(const __CFArray **)(*(_QWORD *)(a1 + 16) + 232);
  Count = CFArrayGetCount(v6);
  v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v18.location = 0;
  v18.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v18, v8);
  CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2))
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2))
      v10 = (__CFArray **)(a1 + 64);
    else
      v10 = (__CFArray **)(*(_QWORD *)(a1 + 16) + 224);
    v11 = *v10;
    v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    CFArrayAppendValue(v11, v12);
    v13 = *(const __CFArray **)(a1 + 40);
    v14 = CFArrayGetCount(v13);
    v15 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v19.location = 0;
    v19.length = v14;
    v16 = CFArrayGetFirstIndexOfValue(v13, v19, v15);
    CFArrayRemoveValueAtIndex(v13, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVPixelBuffer::finalize(CVPixelBuffer *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  uint8_t buf[4];
  char *v9;
  char __str[200];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 456))
    {
      v3 = *(_DWORD *)(v2 + 168);
      if (v3 >= 1)
      {
        snprintf(__str, 0xC8uLL, "Finalizing CVPixelBuffer %p while lock count is %d.", *((const void **)this + 1), v3);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v9 = __str;
          _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
        v2 = *((_QWORD *)this + 15);
      }
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2))
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = v5;
        __str[0] = 0;
        do
        {
          CVDecrementAtomicCounter((unsigned int *)this + v4 + 27, (BOOL *)__str);
          if (!__str[0])
            break;
          IOSurfaceDecrementUseCountForCategory();
        }
        while (__str[0]);
        v5 = 0;
        v4 = 1;
      }
      while ((v6 & 1) != 0);
    }
    if (*((_BYTE *)this + 104))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15));
    *((_QWORD *)this + 15) = 0;
  }
  return CVImageBuffer::finalize(this);
}

uint64_t CVDecrementAtomicCounter(unsigned int *a1, BOOL *a2)
{
  uint64_t result;
  unsigned int v4;

  while (1)
  {
    result = *a1;
    if (!(_DWORD)result)
      break;
    while (1)
    {
      v4 = __ldaxr(a1);
      if (v4 != (_DWORD)result)
        break;
      if (!__stlxr(result - 1, a1))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  *a2 = (_DWORD)result != 0;
  return result;
}

void CVObject::release(CFTypeRef *this)
{
  CFRelease(this[1]);
}

uint64_t CVBuffer::finalize(CVBuffer *this)
{
  const void *v2;
  const void *v3;

  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  v2 = (const void *)*((_QWORD *)this + 10);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 11);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  return CVObject::finalize(this);
}

CVBufferBacking *CVPixelBufferBacking::releaseUsage(CVPixelBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 57);
  if (v2)
    IOOrEXSurfaceDecrementUseCount(v2);
  return CVBufferBacking::releaseUsage(this);
}

void IOOrEXSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  if (buffer)
    IOSurfaceDecrementUseCount(buffer);
}

CVBufferBacking *CVBufferBacking::releaseUsage(CVBufferBacking *this)
{
  CVBufferBacking *result;
  uint64_t v3;
  uint64_t (*v4)(CVBufferBacking *);

  result = (CVBufferBacking *)CVDecrementAtomic((unsigned int *)this + 4);
  if ((_DWORD)result == 1)
  {
    *((_QWORD *)this + 13) = CVGetCurrentHostTime();
    v3 = *((_QWORD *)this + 11);
    if (!v3 || ((*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3), !*((_QWORD *)this + 11)))
    {
      v4 = *(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)this + 112);
      result = this;
      return (CVBufferBacking *)v4(result);
    }
    (*(void (**)(CVBufferBacking *))(*(_QWORD *)this + 136))(this);
    (*(void (**)(_QWORD, CVBufferBacking *))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11), this);
    result = (CVBufferBacking *)*((_QWORD *)this + 11);
    if (result)
    {
      v4 = *(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)result + 192);
      return (CVBufferBacking *)v4(result);
    }
  }
  return result;
}

uint64_t CVDecrementAtomic(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v2;

_CVDecrementAtomic:
  v1 = *a1;
  do
  {
    v2 = __ldaxr(a1);
    if (v2 != (_DWORD)v1)
    {
      __clrex();
      goto _CVDecrementAtomic;
    }
  }
  while (__stlxr(v1 - 1, a1));
  return v1;
}

uint64_t CVBitOrAtomic(int a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;

_CVBitOrAtomic:
  v2 = *a2;
  do
  {
    v3 = __ldaxr(a2);
    if (v3 != (_DWORD)v2)
    {
      __clrex();
      goto _CVBitOrAtomic;
    }
  }
  while (__stlxr(v2 | a1, a2));
  return v2;
}

uint64_t CVBufferBacking::invalidateBacking(CVBufferBacking *this)
{
  return CVBitOrAtomic(1, (unsigned int *)this + 24);
}

void CVImageBacking::prepareToRemoveFromPool(CVImageBacking *this)
{
  const void *v2;

  CVBufferBacking::prepareToRemoveFromPool(this);
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 17) = 0;
}

uint64_t CVBunchPair::notifyPoolBufferBackingNotInUse(uint64_t this, CVBufferBacking *a2)
{
  if (*(_QWORD *)(this + 216))
    return (*(uint64_t (**)(_QWORD, CVBufferBacking *))(**(_QWORD **)(*(_QWORD *)(this + 216) + 16) + 80))(*(_QWORD *)(*(_QWORD *)(this + 216) + 16), a2);
  return this;
}

void CVPixelBufferPool::bufferBackingNotInUse(CVPixelBufferPool *this, CVBufferBacking *a2)
{
  uint64_t v4;
  uint64_t v5;
  __IOSurface *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __CFNotificationCenter *LocalCenter;
  const void *v12;

  CVBufferPool::bufferBackingNotInUse(this, a2);
  if (a2)
  {
    v4 = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 160))(a2);
    v5 = *(_QWORD *)a2;
    if (v4)
    {
      v6 = (__IOSurface *)(*(uint64_t (**)(CVBufferBacking *))(v5 + 160))(a2);
      IOOrEXSurfaceGetID(v6);
    }
    else
    {
      (*(void (**)(CVBufferBacking *))(v5 + 24))(a2);
    }
    if (!this)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (this)
LABEL_8:
    (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
LABEL_9:
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    v8 = *((_QWORD *)this + 2);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  }
  kdebug_trace();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  if ((*(unsigned int (**)(CVBufferBacking *))(*(_QWORD *)a2 + 80))(a2))
  {
    v9 = (unsigned int *)((char *)this + 48);
    while (1)
    {
      v10 = __ldxr(v9);
      if (v10 != 1)
        break;
      if (!__stxr(0, v9))
      {
        LocalCenter = CFNotificationCenterGetLocalCenter();
        v12 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
        CFNotificationCenterPostNotification(LocalCenter, CFSTR("BufferPoolFreeBufferNotification"), v12, 0, 1u);
        return;
      }
    }
    __clrex();
  }
}

_QWORD *CVPixelBufferPool::createPixelBuffer(CVPixelBufferPool *this, const __CFAllocator *a2, const __CFDictionary *a3, int *a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *Value;
  const void *v13;
  _BOOL4 v14;
  uint64_t v16;
  const __CFAllocator *v17;
  int v18;
  uint64_t v19;
  CVImageBacking **v20;
  __IOSurface *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFTypeID v29;
  CVImageBacking **v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *v34;
  uint64_t v35;
  __IOSurface *v36;
  const __CFDictionary *v37;
  _QWORD *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  int v43;
  CVImageBacking *v44;
  __IOSurface *v45;
  uint64_t v46;
  const __CFNumber *valuePtr;
  uint64_t v49;

  v49 = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
  if ((v8 & 1) == 0
  {
    CVPixelBufferPool::createPixelBuffer(__CFAllocator const*,__CFDictionary const*,int *)::ktrace_seed = arc4random();
  }
  ++CVPixelBufferPool::createPixelBuffer(__CFAllocator const*,__CFDictionary const*,int *)::ktrace_seed;
  (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    v10 = *((_QWORD *)this + 2);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  }
  kdebug_trace();
  if (a3)
  {
    v11 = (const void *)*MEMORY[0x1E0C9AE50];
    Value = CFDictionaryGetValue(a3, CFSTR("PreferIOSurfaceWithWiringAssertion"));
    v13 = CFDictionaryGetValue(a3, CFSTR("RequireIOSurfaceWithoutWiringAssertion"));
    v14 = v11 == Value;
    if (v11 == Value && v11 == v13)
    {
      v22 = 0;
      v23 = -6691;
LABEL_42:
      *a4 = v23;
      goto LABEL_62;
    }
    if (v11 == Value)
      v16 = 1;
    else
      v16 = 2 * (v11 == v13);
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v18 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), &v49, v16);
  v19 = v49;
  if (v14 && !v49)
  {
    v18 = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), &v49, 0);
    v19 = v49;
  }
  if (v19)
  {
    v20 = (CVImageBacking **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    if (v49)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 160))(v49))
      {
        v21 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 160))(v49);
        IOOrEXSurfaceGetID(v21);
      }
      else if (v49)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      }
    }
    (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
    v24 = *((_QWORD *)this + 2);
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 96))(v24);
      v25 = *((_QWORD *)this + 2);
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 104))(v25);
    }
    kdebug_trace();
    if (v20)
    {
      if ((*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v20[2] + 152))(v20[2]))
      {
        LODWORD(valuePtr) = 0;
        IOSurfaceGetYCbCrMatrix();
        IOSurfaceClearDataProperties();
      }
      v35 = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v20[2] + 152))(v20[2]);
      if (v35)
      {
        v36 = (__IOSurface *)v35;
        v37 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 5), CFSTR("PropagatedAttachments"));
        if (!v37 || !CFDictionaryContainsKey(v37, CFSTR("LogTransferFunction")))
          IOSurfaceRemoveValue(v36, CFSTR("LogTransferFunction"));
      }
      goto LABEL_48;
    }
  }
  if (a3)
  {
    v26 = v18;
    v27 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("BufferPoolAllocationThreshold"));
    v28 = v27;
    valuePtr = 0;
    if (v27)
    {
      v29 = CFGetTypeID(v27);
      if (v29 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v28, kCFNumberLongType, &valuePtr);
        v28 = valuePtr;
      }
      else
      {
        v28 = 0;
      }
    }
    if ((uint64_t)v28 <= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2))
                       + v26)
    {
      v22 = 0;
      v23 = -6689;
      goto LABEL_42;
    }
  }
  v30 = CVPixelBufferBacking::alloc(a2, v17);
  v20 = v30;
  if (!v30)
  {
    v22 = 0;
    v23 = -6660;
    goto LABEL_42;
  }
  if (!(*(uint64_t (**)(CVImageBacking *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int *))(*(_QWORD *)v30[2] + 248))(v30[2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, *((_QWORD *)this + 5), *((_QWORD *)this + 4), 0, 0, 0,
          0,
          a4))
  {
    v22 = 0;
    goto LABEL_62;
  }
  (*(void (**)(_QWORD, CVImageBacking *, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2), v20[2], 1, 0);
  v31 = (_QWORD *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2)) + 1;
  v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  CVTracePoolAction(1, v31, (_QWORD **)v20, "created", v32, v33);
  if (*((_BYTE *)this + 136))
    (*(void (**)(CVImageBacking *))(*(_QWORD *)v20[2] + 88))(v20[2]);
LABEL_48:
  v38 = CVPixelBuffer::alloc(a2, v34);
  v22 = v38;
  if (v38 && (*(uint64_t (**)(_QWORD, CVImageBacking *))(*(_QWORD *)v38[2] + 248))(v38[2], v20[2]))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v22[2] + 144))(v22[2], *((_QWORD *)this + 5));
    if (a3)
    {
      v39 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("BaseAddressAdjustment"));
      valuePtr = 0;
      if (v39 && (v40 = v39, v41 = CFGetTypeID(v39), v41 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v40, kCFNumberLongType, &valuePtr);
        v42 = valuePtr;
      }
      else
      {
        v42 = 0;
      }
      (*(void (**)(_QWORD, const __CFNumber *))(*(_QWORD *)v22[2] + 256))(v22[2], v42);
    }
    v43 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, CVImageBacking *))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), v20[2]);
    v43 = -6660;
  }
  *a4 = v43;
  v44 = v20[2];
  if (v44 && (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v44 + 160))(v44))
  {
    (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
    v45 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v20[2] + 160))(v20[2]);
    IOOrEXSurfaceGetID(v45);
    v46 = *((_QWORD *)this + 2);
    if (!v46)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_62:
  (*(void (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v46 = *((_QWORD *)this + 2);
  if (v46)
LABEL_63:
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 104))(v46);
LABEL_64:
  kdebug_trace();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  return v22;
}

void sub_1A2C4C09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CVObject::typeRef(CVObject *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t CVPixelBufferBacking::getIOOrEXSurfaceWithoutAssertion(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 57);
}

uint64_t CVLocklessBunchPair::getUsedBackingsCount(CVLocklessBunchPair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    return (int)CVAtomicBunchGetCount(result);
  return result;
}

uint64_t CVLocklessBunchPair::getFreeBackingsCount(CVLocklessBunchPair *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 28);
  if (result)
    return (int)CVAtomicBunchGetCount(result);
  return result;
}

uint64_t CVAtomicBunchGetCount(uint64_t a1)
{
  return (unsigned __int16)(**(int **)(a1 + 32) >> *(_BYTE *)(a1 + 40));
}

__IOSurface *IOOrEXSurfaceGetID(__IOSurface *result)
{
  if (result)
    return (__IOSurface *)IOSurfaceGetID(result);
  return result;
}

void CVTracePoolAction(int a1, _QWORD *a2, _QWORD **a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  const __CFString *v12;
  char *v13;
  __IOSurface *v14;
  __IOSurface *v15;
  __IOSurface *ID;
  const __CFString *v17;
  const __CFString *v18;
  CFTypeID v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char buffer[16];
  __int128 v26;
  char v27[64];
  char v28[64];
  char __str[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!CVTracePools(a1))
    return;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  __str[0] = 0;
  v28[0] = 0;
  v27[0] = 0;
  if (a2)
  {
    v11 = a2[2];
    if (v11 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11))
    {
      v12 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 88))(a2[2]);
      CFStringGetCString(v12, buffer, 128, 0x600u);
      asprintf(&v22, " (%s)", buffer);
      v13 = v22;
    }
    else
    {
      v13 = 0;
    }
    if (!v13)
      v13 = "";
    asprintf(&v23, " pool %p%s:", a2, v13);
  }
  if (a3)
  {
    snprintf(__str, 0x20uLL, " backing %p", a3);
    v14 = (__IOSurface *)(*(uint64_t (**)(_QWORD *))(*a3[2] + 160))(a3[2]);
    if (v14)
    {
      v15 = v14;
      ID = IOOrEXSurfaceGetID(v14);
      *(_OWORD *)buffer = xmmword_1A2C7DC90;
      v26 = unk_1A2C7DCA0;
      v17 = (const __CFString *)IOSurfaceCopyValue(v15, (CFStringRef)*MEMORY[0x1E0CBC048]);
      if (!v17)
      {
        snprintf(v28, 0x40uLL, " (IOSurface ID 0x%llx (%s))", ID, buffer);
        if (!a2)
          goto LABEL_18;
        goto LABEL_17;
      }
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 == CFStringGetTypeID())
        CFStringGetCString(v18, buffer, 32, 0);
      snprintf(v28, 0x40uLL, " (IOSurface ID 0x%llx (%s))", ID, buffer);
      CFRelease(v18);
    }
  }
  if (a2)
LABEL_17:
    snprintf(v27, 0x40uLL, " [now %ld in pool: %ld in use, %ld free]", a6 + a5, a5, a6);
LABEL_18:
  v20 = v23;
  if (!v23)
    v20 = "";
  asprintf(&v24, "CoreVideo:%s%s%s %s%s", v20, __str, v28, a4, v27);
  v21 = v24;
  if (v24)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315138;
      *(_QWORD *)&buffer[4] = v21;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buffer, 0xCu);
      v21 = v24;
    }
  }
  free(v21);
  free(v23);
  free(v22);
}

BOOL CVTracePools(int a1)
{
  int AppBooleanValue;
  int AppIntegerValue;
  int v4;
  BOOL v5;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  keyExistsAndHasValidFormat = 0;
  if ((CVTracePools(int)::sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("pools_trace"), CFSTR("com.apple.corevideo"), 0);
    CVTracePools(int)::sTracePools = AppBooleanValue != 0;
    if (AppBooleanValue)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v9 = "CoreVideo: will trace pool activity -- thank you for setting \"defaults write com.apple.corevideo pools_trace -BOOL YES\"";
        _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
      AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("pools_trace_level"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat)
        v4 = AppIntegerValue;
      else
        v4 = 3;
      CVTracePools(int)::sTraceLevel = v4;
    }
    CVTracePools(int)::sDidCheck = 1;
  }
  if (CVTracePools(int)::sTracePools)
    v5 = CVTracePools(int)::sTraceLevel < a1;
  else
    v5 = 1;
  return !v5;
}

CFTypeRef *CVPixelBuffer::initWithPixelBufferBacking(CFTypeRef *this, CVPixelBufferBacking *a2)
{
  CFTypeRef *v3;

  v3 = this;
  if (!CVImageBuffer::init(this))
    return 0;
  (*(void (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 32))(a2);
  v3[15] = a2;
  if (*((_BYTE *)v3 + 104))
    (*(void (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 64))(a2);
  return v3;
}

CFTypeRef *CVObject::retain(CFTypeRef *this)
{
  CFRetain(this[1]);
  return this;
}

CVBufferBacking *CVBufferBacking::retainUsage(CVBufferBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  if (!CVIncrementAtomic((unsigned int *)this + 4))
  {
    v3 = *((_QWORD *)this + 11);
    if (!v3)
      return this;
    (*(void (**)(uint64_t, CVBufferBacking *))(*(_QWORD *)v3 + 64))(v3, this);
  }
  v4 = *((_QWORD *)this + 11);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
  return this;
}

uint64_t CVIncrementAtomic(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v2;

_CVIncrementAtomic:
  v1 = *a1;
  do
  {
    v2 = __ldaxr(a1);
    if (v2 != (_DWORD)v1)
    {
      __clrex();
      goto _CVIncrementAtomic;
    }
  }
  while (__stlxr(v1 + 1, a1));
  return v1;
}

CFTypeRef *CVImageBuffer::init(CFTypeRef *this)
{
  if (CVBuffer::init(this))
    return this;
  else
    return 0;
}

CFTypeRef *CVBuffer::init(CFTypeRef *this)
{
  CFTypeRef *v1;
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  CFMutableDictionaryRef Mutable;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v1 = this;
  v8 = *MEMORY[0x1E0C80C00];
  v2 = CFGetAllocator(this[1]);
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_settype(&v7, 2);
  pthread_mutex_init((pthread_mutex_t *)(v1 + 2), &v7);
  pthread_mutexattr_destroy(&v7);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9AEB8];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v1[10] = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v2, 0, v3, v4);
  v1[11] = Mutable;
  if (!v1[10] || !Mutable)
  {
    (*((void (**)(CFTypeRef *))*v1 + 5))(v1);
    return 0;
  }
  return v1;
}

CVBufferBacking *CVPixelBufferBacking::retainUsage(CVPixelBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 57);
  if (v2)
    IOOrEXSurfaceIncrementUseCount(v2);
  return CVBufferBacking::retainUsage(this);
}

void IOOrEXSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  if (buffer)
    IOSurfaceIncrementUseCount(buffer);
}

uint64_t CVBunchPair::enterBackingsCriticalReadSection(CVBunchPair *this)
{
  return pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 16));
}

uint64_t CVBunchPair::exitBackingsCriticalSection(CVBunchPair *this)
{
  return pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 16));
}

CVImageBacking **CVPixelBufferBacking::alloc(CVPixelBufferBacking *this, const __CFAllocator *a2)
{
  CVImageBacking **v3;
  CVImageBacking **v4;
  uint64_t v5;

  if (_cvUseTrackingAllocator)
    this = (CVPixelBufferBacking *)_cvTrackingGetCFAllocator(CFSTR("CVPixelBufferBacking"));
  if (CVPixelBufferBackingGetTypeID(void)::once != -1)
    dispatch_once_f(&CVPixelBufferBackingGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferBacking);
  v3 = (CVImageBacking **)CVObject::alloc((CVObject *)kCVPixelBufferBackingID, (unint64_t)this, (const __CFAllocator *)0x18, 0x498uLL);
  v4 = v3;
  if (v3)
  {
    CVImageBacking::CVImageBacking(v3[2], v3);
    *(_QWORD *)v5 = off_1E48A3768;
    *(_QWORD *)(v5 + 496) = 0;
    *(_DWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 1080) = 0;
    *(_QWORD *)(v5 + 1096) = 0;
    *(_QWORD *)(v5 + 1088) = 0;
    *(_QWORD *)(v5 + 1120) = 0;
    *(_QWORD *)(v5 + 1112) = 0;
    *(_BYTE *)(v5 + 144) = 1;
    *(_QWORD *)(v5 + 1136) = 0;
    *(_QWORD *)(v5 + 448) = 0;
    *(_QWORD *)(v5 + 456) = 0;
    *(_DWORD *)(v5 + 476) = 0;
  }
  return v4;
}

void CVImageBacking::CVImageBacking(CVImageBacking *this, const void *a2)
{
  _QWORD *v2;

  CVBufferBacking::CVBufferBacking(this, a2);
  *v2 = off_1E48A2C00;
}

void CVBufferBacking::CVBufferBacking(CVBufferBacking *this, const void *a2)
{
  uint64_t v2;

  CVObject::CVObject(this, a2);
  *(_QWORD *)v2 = off_1E48A2E20;
  *(_QWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 113) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 128) = 0;
}

_QWORD *CVPixelBuffer::alloc(CVPixelBuffer *this, const __CFAllocator *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (_cvUseTrackingAllocator)
    this = (CVPixelBuffer *)_cvTrackingGetCFAllocator(CFSTR("CVPixelBuffer"));
  if (CVPixelBufferGetTypeID::once != -1)
    dispatch_once_f(&CVPixelBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBuffer);
  v3 = (_QWORD *)CVObject::alloc((CVObject *)kCVPixelBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x80uLL);
  v4 = v3;
  if (v3)
  {
    v5 = v3[2];
    CVImageBuffer::CVImageBuffer((CVImageBuffer *)v5, v3);
    *(_QWORD *)v5 = off_1E48A2AD8;
    CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(0);
    *(_BYTE *)(v5 + 104) = 1;
    *(_QWORD *)(v5 + 108) = 0;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)(v5 + 96) = 0;
  }
  return v4;
}

uint64_t CVObject::alloc(CVObject *this, unint64_t a2, const __CFAllocator *a3, size_t a4)
{
  unint64_t v5;
  uint64_t Instance;
  uint64_t v7;

  v5 = ((unint64_t)a3 + 15) & 0xFFFFFFFFFFFFFFF0;
  Instance = _CFRuntimeCreateInstance();
  v7 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = v5 + Instance;
    bzero((void *)(v5 + Instance), a4);
  }
  return v7;
}

const void *CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(const __CFString *a1)
{
  pthread_once(&intializeAndGetIOSurfaceTranslationDictionaries(__CFDictionary const**,__CFDictionary const**)::once, initCVBufferKeyToIOSurfaceKeyDictionary);
  if (a1)
    return CFDictionaryGetValue((CFDictionaryRef)cvBufferKeyToIOSurfaceKeyDictionary, a1);
  else
    return 0;
}

void CVImageBuffer::CVImageBuffer(CVImageBuffer *this, const void *a2)
{
  _QWORD *v2;

  CVBuffer::CVBuffer(this, a2);
  *v2 = off_1E48A2918;
}

void CVBuffer::CVBuffer(CVBuffer *this, const void *a2)
{
  _QWORD *v2;

  CVObject::CVObject(this, a2);
  *v2 = off_1E48A4018;
  v2[10] = 0;
  v2[11] = 0;
}

void CVObject::CVObject(CVObject *this, const void *a2)
{
  *(_QWORD *)this = off_1E48A40C8;
  *((_QWORD *)this + 1) = a2;
}

uint64_t CVBunchPair::notifyPoolBufferBackingInUse(uint64_t this, CVBufferBacking *a2)
{
  if (*(_QWORD *)(this + 216))
    return (*(uint64_t (**)(_QWORD, CVBufferBacking *))(**(_QWORD **)(*(_QWORD *)(this + 216) + 16) + 72))(*(_QWORD *)(*(_QWORD *)(this + 216) + 16), a2);
  return this;
}

uint64_t CVLocklessBunchPair::freeAgedOutBackings(uint64_t this)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5[2];
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = (unint64_t *)(this + 240);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3, v2));
  if (v3)
  {
    v8 = *(_QWORD *)(this + 216);
    v4 = CVGetCurrentHostTime();
    v5[0] = *(_QWORD *)(v1 + 224);
    v5[1] = v4 - v3;
    v6 = 0;
    v9 = v1;
    v7 = (unsigned __int16)*(_DWORD *)(v1 + 248);
    return CVAtomicBunchApply(v5[0], (uint64_t (*)(uint64_t, _QWORD))_freeAgedOutBackings, (uint64_t)v5);
  }
  return this;
}

uint64_t CVAtomicBunchApply(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;

  if (!a1)
    return 3;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return 1;
  v7 = 1;
  do
  {
    v8 = (unsigned int *)(v4 + 16);
    v16 = *(_DWORD *)(v4 + 16);
    if ((v16 & 1) != 0)
    {
      LOBYTE(v9) = 0;
      v7 = 2;
    }
    else if ((v16 & 4) != 0)
    {
      v17 = ElementModifyFlags(v4, 1, 0x10000);
      if ((v17 & 1) != 0)
      {
        v9 = 0;
        v7 = 2;
      }
      else if ((v17 & 4) != 0)
      {
        v9 = a2(a3, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v9 = 0;
      }
LABEL_13:
      v19 = *v8;
      v18 = *v8 - 0x10000;
      if ((v17 & 1) == 0)
      {
        v18 &= ~1u;
        if (*v8 & 2 | (v9 >> 1) & 1)
          v18 &= 0xFFFFFFF9;
      }
      do
      {
        v10 = __ldxr(v8);
        if (v10 != v19)
        {
          __clrex();
          goto LABEL_13;
        }
      }
      while (__stxr(v18, v8));
      if ((v9 & 2) != 0)
      {
        v11 = -1 << *(_BYTE *)(a1 + 40);
        v12 = *(unsigned int **)(a1 + 32);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + v11, v12));
      }
    }
    else
    {
      LOBYTE(v9) = 0;
    }
    v4 = *(_QWORD *)v4;
    if (v4)
      v14 = (v9 & 1) == 0;
    else
      v14 = 0;
  }
  while (v14);
  return v7;
}

uint64_t CVAtomicBunchAddObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  if (!a1)
    return 3;
  v4 = *(_QWORD *)(a1 + 16);
  v26 = v4;
  if (v4)
  {
    v5 = 3;
    do
    {
      v6 = (unsigned int *)(v4 + 16);
      v24 = *(_DWORD *)(v4 + 16);
      if ((v24 & 1) != 0)
      {
        v5 = 2;
      }
      else if ((v24 & 4) == 0 && !HIWORD(v24))
      {
        v25 = ElementModifyFlags(v4, 1, 0x10000);
        if ((v25 & 1) == 0)
        {
          if ((v25 & 4) != 0 || HIWORD(v25))
            goto LABEL_23;
          *(_QWORD *)(v4 + 8) = a2;
          CVMemoryBarrier();
          v28 = 0;
          v27 = 0;
          while (1)
          {
            v28 = *v6;
            v27 = v28 | 4;
            while (1)
            {
              v7 = __ldxr(v6);
              if (v7 != v28)
                break;
              if (!__stxr(v28 | 4, v6))
              {
                v8 = 1 << *(_BYTE *)(a1 + 40);
                v9 = *(unsigned int **)(a1 + 32);
                do
                  v10 = __ldxr(v9);
                while (__stxr(v10 + v8, v9));
                v5 = 1;
                goto LABEL_23;
              }
            }
            __clrex();
          }
        }
        v5 = 2;
LABEL_23:
        v28 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v6;
          v27 = v28 - 0x10000;
          if ((v25 & 1) == 0)
          {
            v27 &= ~1u;
            if ((v28 & 2) != 0)
              v27 &= 0xFFFFFFF9;
          }
          while (1)
          {
            v11 = __ldxr(v6);
            if (v11 != v28)
              break;
            if (!__stxr(v27, v6))
              goto LABEL_17;
          }
          __clrex();
        }
      }
LABEL_17:
      v4 = *(_QWORD *)v4;
      v26 = v4;
    }
    while (v5 != 1 && v4);
    if (v5 == 1)
      return 1;
  }
  result = CVAtomicBunchIncreaseSizeAndReserveElement(a1, 0x10u, &v26);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(v26 + 8) = a2;
    CVMemoryBarrier();
    v28 = 0;
    v27 = 0;
    v13 = (unsigned int *)(v26 + 16);
    while (1)
    {
      v28 = *v13;
      v27 = v28 | 4;
      v14 = v28;
      v15 = v28 | 4;
      while (1)
      {
        v16 = __ldxr(v13);
        if (v16 != v14)
          break;
        if (!__stxr(v15, v13))
        {
          v17 = 1 << *(_BYTE *)(a1 + 40);
          v18 = *(unsigned int **)(a1 + 32);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + v17, v18));
          v28 = 0;
          v27 = 0;
          v20 = (unsigned int *)(v26 + 16);
          while (1)
          {
            v28 = *v20;
            v27 = (v28 - 0x10000) & 0xFFFFFFFE;
            if ((v28 & 2) != 0)
            {
              v27 &= ~4u;
              v27 &= ~2u;
            }
            v21 = v28;
            v22 = v27;
            while (1)
            {
              v23 = __ldxr(v20);
              if (v23 != v21)
                break;
              if (!__stxr(v22, v20))
                return 1;
            }
            __clrex();
          }
        }
      }
      __clrex();
    }
  }
  return result;
}

uint64_t ElementModifyFlags(uint64_t a1, int a2, int a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  v3 = (unsigned int *)(a1 + 16);
LABEL_2:
  v8 = *v3;
  v4 = *v3;
  v5 = (*v3 | a2) + a3;
  do
  {
    v6 = __ldxr(v3);
    if (v6 != v4)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stxr(v5, v3));
  return v8;
}

void CVMemoryBarrier()
{
  __dmb(0xBu);
}

const void *CVPixelBuffer::setDefaultAttachments(CFMutableDictionaryRef *this, const __CFDictionary *a2)
{
  const void *result;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;

  CFDictionaryRemoveAllValues(this[10]);
  CFDictionaryRemoveAllValues(this[11]);
  result = (const void *)_os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    result = (const void *)(*(uint64_t (**)(CFMutableDictionaryRef))(*(_QWORD *)this[15] + 152))(this[15]);
    if (result)
      result = (const void *)IOSurfaceRemoveCoreVideoBridgedValues();
  }
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("PropagatedAttachments"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFDictionaryGetTypeID())
        (*((void (**)(CFMutableDictionaryRef *, const void *, uint64_t))*this + 17))(this, v6, 1);
    }
    result = CFDictionaryGetValue(a2, CFSTR("NonPropagatedAttachments"));
    if (result)
    {
      v8 = result;
      v9 = CFGetTypeID(result);
      result = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v9 == result)
        return (const void *)(*((uint64_t (**)(CFMutableDictionaryRef *, const void *, _QWORD))*this + 17))(this, v8, 0);
    }
  }
  return result;
}

uint64_t CVLocklessBunchPair::bufferBackingInUse(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 28);
  for (i = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
        CVAtomicBunchRemoveObject(v4, i, 0) == 2;
        i = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2))
  {
    sched_yield();
    v4 = *((_QWORD *)this + 28);
  }
  v6 = *((_QWORD *)this + 29);
  v7 = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  return CVAtomicBunchAddObject(v6, v7);
}

uint64_t CVAtomicBunchRemoveObject(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t result;
  _BOOL4 v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if (!a1)
    return 3;
  v4 = *(_QWORD **)(a1 + 16);
  if (!v4)
    return 3;
  do
  {
    if (v4[1] == a2)
    {
      v18 = ElementModifyFlags((uint64_t)v4, 1, 0x10000);
      v8 = (v18 & 1) == 0;
      if ((v18 & 4) == 0 || (v18 & 2) != 0 || v4[1] != a2)
        goto LABEL_8;
      if (!a3 && (v18 & 1) != 0)
      {
        result = 2;
        goto LABEL_9;
      }
      v11 = (unsigned int *)(v4 + 2);
      while (1)
      {
        v21 = *v11;
        v12 = *v11;
        v13 = *v11 | 3;
        while (1)
        {
          v14 = __ldxr(v11);
          if (v14 != v12)
            break;
          if (!__stxr(v13, v11))
          {
            v8 = (v21 & 1) == 0;
            if ((v18 & 1) == 0)
              v8 = 1;
            if ((v21 & 4) != 0 && (v21 & 2) == 0)
            {
              v15 = -1 << *(_BYTE *)(a1 + 40);
              v16 = *(unsigned int **)(a1 + 32);
              do
              {
                v17 = __ldxr(v16);
                result = 1;
              }
              while (__stxr(v17 + v15, v16));
              goto LABEL_9;
            }
LABEL_8:
            result = 3;
LABEL_9:
            v9 = (unsigned int *)(v4 + 2);
            while (1)
            {
              v20 = *v9;
              v19 = *v9 - 0x10000;
              if (v8)
              {
                v19 &= ~1u;
                if ((v20 & 2) != 0)
                  v19 &= 0xFFFFFFF9;
              }
              while (1)
              {
                v10 = __ldxr(v9);
                if (v10 != v20)
                  break;
                if (!__stxr(v19, v9))
                  goto LABEL_17;
              }
              __clrex();
            }
          }
        }
        __clrex();
      }
    }
    result = 3;
LABEL_17:
    v4 = (_QWORD *)*v4;
  }
  while ((_DWORD)result == 3 && v4);
  return result;
}

uint64_t CVBufferPool::bufferBackingInUse(CVBufferPool *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(_QWORD, CVBufferBacking *))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), a2);
}

uint64_t CVLocklessBunchPair::initNewBacking(CVLocklessBunchPair *this, CVBufferBacking *a2, char a3, char a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;

  v7 = (unsigned int *)((char *)this + 248);
  while (1)
  {
    v13 = *v7;
    v12 = *v7;
    if ((*v7 & 0xFF0000) != 0)
    {
      v12 -= 0x10000;
    }
    else if ((a4 & 1) != 0)
    {
      return 4294960597;
    }
    if (v12 == v13)
      break;
    while (1)
    {
      v8 = __ldxr(v7);
      if (v8 != v13)
        break;
      if (!__stxr(v12, v7))
        goto LABEL_10;
    }
    __clrex();
  }
LABEL_10:
  if (a2)
  {
    (*(void (**)(CVBufferBacking *, CVLocklessBunchPair *))(*(_QWORD *)a2 + 96))(a2, this);
    if ((a3 & 1) == 0)
    {
      v9 = *((_QWORD *)this + 28);
      v10 = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
      CVAtomicBunchAddObject(v9, v10);
    }
  }
  return 0;
}

void CVBufferBacking::setBunchPair(CVBufferBacking *this, CVBunchPair *a2)
{
  const void *v4;
  uint64_t v5;
  const void *v6;

  if (a2)
  {
    v4 = (const void *)(*(uint64_t (**)(CVBunchPair *))(*(_QWORD *)a2 + 24))(a2);
    CFRetain(v4);
  }
  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    CFRelease(v6);
  }
  *((_QWORD *)this + 11) = a2;
}

void _freeAgedOutBackings(_QWORD **a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFArray *v8;
  CFIndex FirstIndexOfValue;
  CFRange v10;

  if (*((_QWORD *)a2 + 3))
  {
    (*(void (**)(_QWORD *))(*a1[2] + 168))(a1[2]);
    v4 = a1[2];
    if (v4[13] < *((_QWORD *)a2 + 1))
    {
      if (*((_BYTE *)a2 + 16))
      {
        (*(void (**)(_QWORD *))(*v4 + 112))(v4);
        v5 = (_QWORD *)*((_QWORD *)a2 + 4);
        Count = CFArrayGetCount(*((CFArrayRef *)a2 + 5));
        v7 = CFArrayGetCount(*(CFArrayRef *)a2);
        CVTracePoolAction(1, v5, a1, "-> aged out", Count, v7 - 1);
        v8 = *(const __CFArray **)a2;
        v10.length = CFArrayGetCount(*(CFArrayRef *)a2);
        v10.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v10, a1);
        CFArrayRemoveValueAtIndex(v8, FirstIndexOfValue);
        --*((_QWORD *)a2 + 3);
      }
      else
      {
        *((_BYTE *)a2 + 16) = 1;
      }
    }
  }
}

uint64_t _freeAgedOutBackings(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[3];
  if (v4 >= (int)CVAtomicBunchGetCount(*a1))
    return 0;
  (*(void (**)(_QWORD *))(*a2[2] + 168))(a2[2]);
  v5 = a2[2];
  if (v5[13] >= (unint64_t)a1[1])
    return 0;
  if (*((_BYTE *)a1 + 16))
  {
    (*(void (**)(_QWORD *))(*v5 + 112))(v5);
    v6 = (_QWORD *)a1[4];
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 96))(a1[5]) + 1;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 104))(a1[5]);
    CVTracePoolAction(1, v6, a2, "-> aged out", v7, v8 - 1);
    --a1[3];
    CFRelease(a2);
    return 2;
  }
  else
  {
    result = 0;
    *((_BYTE *)a1 + 16) = 1;
  }
  return result;
}

uint64_t CVBufferBacking::okToReuse(CVBufferBacking *this)
{
  return 1;
}

uint64_t CVPixelBuffer::setBaseAddressAdjustment(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 96) = a2;
  return this;
}

__IOSurface *CVPixelBufferBacking::resetAgeForRemoteUsage(CVPixelBufferBacking *this)
{
  __IOSurface *result;

  result = (__IOSurface *)*((_QWORD *)this + 57);
  if (result)
  {
    if (*((_BYTE *)this + 113))
    {
LABEL_5:
      *((_QWORD *)this + 13) = -1;
      return result;
    }
    result = IOOrEXSurfaceIsInUse(result);
    if ((_DWORD)result)
    {
      *((_BYTE *)this + 112) = 1;
      goto LABEL_5;
    }
    if (*((_BYTE *)this + 112))
    {
      result = (__IOSurface *)CVGetCurrentHostTime();
      *((_QWORD *)this + 13) = result;
      *((_BYTE *)this + 112) = 0;
    }
  }
  return result;
}

uint64_t CVPixelBufferBacking::okToReuse(CVPixelBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 57);
  if (v2 && IOOrEXSurfaceIsInUse(v2))
    return 0;
  else
    return CVBufferBacking::okToReuse(this);
}

IOSurfaceRef IOOrEXSurfaceIsInUse(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceIsInUse(buffer);
  return buffer;
}

uint64_t CVLocklessBunchPair::bufferBackingNotInUse(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 29);
  v5 = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CVAtomicBunchRemoveObject(v4, v5, 1);
  v6 = *((_QWORD *)this + 28);
  v7 = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  return CVAtomicBunchAddObject(v6, v7);
}

uint64_t CVBufferPool::bufferBackingNotInUse(CVBufferPool *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(_QWORD, CVBufferBacking *))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), a2);
}

uint64_t _tryToReuseABacking(_DWORD *a1, _QWORD **a2)
{
  int v4;
  int v5;
  BOOL v6;
  uint64_t result;

  v4 = a1[3];
  if ((v4 & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a2[2] + 128))(a2[2]);
  }
  else if ((v4 & 2) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a2[2] + 128))(a2[2]) ^ 1;
  }
  else
  {
    v5 = 1;
  }
  if ((*(unsigned int (**)(_QWORD *))(*a2[2] + 80))(a2[2]))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    result = 0;
    ++a1[2];
  }
  else
  {
    *(_QWORD *)a1 = a2;
    return 3;
  }
  return result;
}

uint64_t _applyFunction(const void *a1, _QWORD *a2)
{
  return ((uint64_t (*)(const void *, _QWORD))*a2)(a1, a2[1]);
}

uint64_t _applyFunction(_QWORD *a1, void *a2)
{
  ((void (*)(void *, _QWORD))*a1)(a2, a1[1]);
  return 0;
}

uint64_t scanIOSurfacesCallback(_QWORD *a1, _QWORD *a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))*a2)(*(_QWORD *)(a1[2] + 456), a2[1]);
}

uint64_t CVMetalTextureBacking::getIOSurface(CVMetalTextureBacking *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t _invalidateBacking(_QWORD **a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 112))(a1[2]);
}

{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 112))(a1[2]);
}

{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 112))(a1[2]);
}

uint64_t _invalidateBacking(__CFArray *a1, void *a2)
{
  CFArrayAppendValue(a1, a2);
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 2) + 112))(*((_QWORD *)a2 + 2));
  return 2;
}

uint64_t CVMetalTextureBacking::releaseBackingUsage(CVMetalTextureBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 21);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t CVMetalTextureBacking::testTexture(CVMetalTextureBacking *this)
{
  return 1;
}

uint64_t CVMetalTextureCache::bufferBackingInUse(CVMetalTextureCache *this, CVBufferBacking *a2)
{
  CFIndex Count;
  CFIndex v5;
  __CFArray *v6;
  const void *v7;
  CFIndex v8;
  const __CFArray *v9;
  const void *v10;
  __CFArray *v11;
  const void *v12;
  const __CFArray *v13;
  CFRange v14;
  const __CFArray *v15;
  const void *v16;
  CFIndex FirstIndexOfValue;
  const __CFArray *v19;
  const void *v20;
  const __CFArray *v21;
  const void *v22;
  CFIndex v23;
  CFRange v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  Count = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
  v5 = CFArrayGetCount(*((CFArrayRef *)this + 5));
  v6 = *(__CFArray **)(*((_QWORD *)this + 2) + 232);
  v7 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v6, v7);
  v8 = CFArrayGetCount(*((CFArrayRef *)this + 8));
  v9 = (const __CFArray *)*((_QWORD *)this + 8);
  v10 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v24.location = 0;
  v24.length = v8;
  if (CFArrayContainsValue(v9, v24, v10))
  {
    v11 = (__CFArray *)*((_QWORD *)this + 8);
    v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v13 = v11;
    v14.location = 0;
    v14.length = v8;
LABEL_5:
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v13, v14, v12);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
    (*(void (**)(CVBufferBacking *))(*(_QWORD *)a2 + 312))(a2);
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  v15 = *(const __CFArray **)(*((_QWORD *)this + 2) + 224);
  v16 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v25.location = 0;
  v25.length = Count;
  if (CFArrayContainsValue(v15, v25, v16))
  {
    v11 = *(__CFArray **)(*((_QWORD *)this + 2) + 224);
    v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v13 = v11;
    v14.location = 0;
    v14.length = Count;
    goto LABEL_5;
  }
  v19 = (const __CFArray *)*((_QWORD *)this + 5);
  v20 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v26.location = 0;
  v26.length = v5;
  if (CFArrayContainsValue(v19, v26, v20))
  {
    v21 = (const __CFArray *)*((_QWORD *)this + 5);
    v22 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v27.location = 0;
    v27.length = v5;
    v23 = CFArrayGetFirstIndexOfValue(v21, v27, v22);
    CFArrayRemoveValueAtIndex(v21, v23);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVMetalTextureBacking::retainBackingUsage(CVMetalTextureBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 21);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

IOSurfaceRef CVPixelBufferBacking::getBytesPerRowOfPlane(CVPixelBufferBacking *this, size_t a2)
{
  size_t v2;

  v2 = *((_QWORD *)this + 130);
  if (!(a2 | v2))
    return (IOSurfaceRef)(*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 296))(this);
  if (v2 <= a2)
    return 0;
  if (*((_QWORD *)this + 57))
    return IOOrEXSurfaceGetBytesPerRowOfPlane(*((IOSurfaceRef *)this + 57), a2);
  return (IOSurfaceRef)*((_QWORD *)this + a2 + 78);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  if (pixelBufferPool)
    CFRelease(pixelBufferPool);
}

uint64_t CVPixelBufferPool::getPixelBufferAttributes(CVPixelBufferPool *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t CVImageBacking::finalize(CVImageBacking *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  return CVBufferBacking::finalize(this);
}

uint64_t CVDataBufferPoolGetTypeID()
{
  if (CVDataBufferPoolGetTypeID::once != -1)
    dispatch_once_f(&CVDataBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBufferPool);
  return kCVDataBufferPoolID;
}

uint64_t CVPixelBufferBacking::getHeightOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 130);
  if (!(a2 | v2))
    return (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 280))(this);
  if (v2 <= a2)
    return 0;
  return *((_QWORD *)this + a2 + 40);
}

uint64_t CVPixelBufferBacking::getWidthOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 130);
  if (!(a2 | v2))
    return (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 272))(this);
  if (v2 <= a2)
    return 0;
  return *((_QWORD *)this + a2 + 24);
}

uint64_t CVPixelBufferBacking::finalize(CVPixelBufferBacking *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const __CFString *PoolName;
  CFStringRef v10;
  unint64_t v11;
  void (*v12)(_QWORD, _QWORD);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t, CVPixelBufferBacking *))(*(_QWORD *)v2 + 256))(v2, this);
  if (*((_BYTE *)this + 1169))
  {
    v3 = *((_DWORD *)this + 118);
    v4 = *((_DWORD *)this + 122);
    pthread_once(&shouldTraceBackingSummary(void)::once, (void (*)(void))initPixelBufferBackingSummary);
    if (gPixelBufferBackingSummaryBag)
    {
      v5 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 272))(this);
      v6 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 280))(this);
      v7 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 192))(this);
      v8 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 304))(this);
      PoolName = (const __CFString *)CVBufferBacking::getPoolName(this);
      pthread_mutex_lock(&gPixelBufferBackingSummaryMutex);
      if (gPixelBufferBackingSummaryBag)
      {
        v10 = copyBackingSummaryString(v5, v6, v7, v3, v4, PoolName);
        CFBagRemoveValue((CFMutableBagRef)gPixelBufferBackingSummaryBag, v10);
        CFRelease(v10);
        v11 = gPixelBufferBackingTotalDataSize;
        if ((v3 & 2) == 0)
        {
          v11 = gPixelBufferBackingTotalDataSize - v8;
          gPixelBufferBackingTotalDataSize -= v8;
        }
        printPixelBufferBackingSummaryBag((const __CFBag *)gPixelBufferBackingSummaryBag, v11);
      }
      pthread_mutex_unlock(&gPixelBufferBackingSummaryMutex);
    }
  }
  if (!*((_QWORD *)this + 56)
    && (!*((_QWORD *)this + 130) || !*((_QWORD *)this + 62))
    && !*((_QWORD *)this + 57)
    && !*((_QWORD *)this + 142))
  {
    goto LABEL_27;
  }
  if (!*((_BYTE *)this + 1168))
  {
    v13 = *((_QWORD *)this + 138);
    if (v13)
    {
      if (v13 == 3)
      {
        v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)this + 140);
        v15 = *((_QWORD *)this + 141);
        v19 = *((_QWORD *)this + 137);
        v18 = *((_QWORD *)this + 57);
        v17 = (char *)*((_QWORD *)this + 142);
        v16 = *((_QWORD *)this + 56);
        goto LABEL_26;
      }
      if (v13 != 2)
        goto LABEL_27;
    }
    (*((void (**)(_QWORD, _QWORD, _QWORD, _QWORD))this + 140))(*((_QWORD *)this + 141), *((_QWORD *)this + 137), *((_QWORD *)this + 56), *((_QWORD *)this + 142));
    goto LABEL_27;
  }
  v12 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 143);
  if (v12)
  {
    v12(*((_QWORD *)this + 145), *((_QWORD *)this + 56));
    goto LABEL_27;
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)this + 144);
  if (v14)
  {
    v15 = *((_QWORD *)this + 145);
    v16 = *((_QWORD *)this + 129);
    v17 = (char *)this + 496;
    v18 = *((_QWORD *)this + 130);
    v19 = *((_QWORD *)this + 56);
LABEL_26:
    v14(v15, v19, v16, v18, v17);
  }
LABEL_27:
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 142) = 0;
  v20 = (const void *)*((_QWORD *)this + 135);
  if (v20)
    CFRelease(v20);
  *((_QWORD *)this + 135) = 0;
  v21 = (const void *)*((_QWORD *)this + 136);
  if (v21)
    CFRelease(v21);
  *((_QWORD *)this + 136) = 0;
  v22 = (const void *)*((_QWORD *)this + 137);
  if (v22)
    CFRelease(v22);
  *((_QWORD *)this + 137) = 0;
  v23 = (const void *)*((_QWORD *)this + 60);
  if (v23)
    CFRelease(v23);
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 1;
  v24 = (const void *)*((_QWORD *)this + 57);
  if (v24 && *((_BYTE *)this + 1168))
    CFRelease(v24);
  *((_QWORD *)this + 57) = 0;
  v25 = (const void *)*((_QWORD *)this + 58);
  if (v25)
    CFRelease(v25);
  *((_QWORD *)this + 58) = 0;
  return CVImageBacking::finalize(this);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  unsigned __int8 v12;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v14;
  const void *DescriptionWithPixelFormatType;
  const __CFAllocator *v16;
  CVImageBacking **v17;
  CVImageBacking **v18;
  const __CFAllocator *v19;
  __CVBuffer *v20;
  __CVBuffer *v21;
  int v22;
  CVImageBacking *v23;
  __IOSurface *v24;
  char v25;
  int v26;
  CVReturn v28;
  uint8_t buf[4];
  char *v30;
  char __str[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  {
    CVPixelBufferCreate::ktrace_seed = arc4random();
  }
  if (gCVKTraceEnabled)
  {
    ++CVPixelBufferCreate::ktrace_seed;
    kdebug_trace();
  }
  if (!pixelBufferOut || !width || !height)
  {
    v14 = 0;
    v18 = 0;
    v21 = 0;
    v26 = -6661;
    goto LABEL_34;
  }
  *pixelBufferOut = 0;
  if (pixelBufferAttributes)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = MutableCopy;
  if (!MutableCopy)
  {
    v18 = 0;
LABEL_46:
    v21 = 0;
    v26 = -6662;
    goto LABEL_34;
  }
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, CFSTR("PixelFormatDescription")))
      goto LABEL_15;
LABEL_32:
    v18 = 0;
    v21 = 0;
    v26 = -6680;
    goto LABEL_34;
  }
  DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType)
    goto LABEL_32;
  CFDictionarySetValue(v14, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
LABEL_15:
  if (!CFDictionaryGetValue(v14, CFSTR("IOSurfaceProperties"))
    && CVIsPixelFormatCompressed(pixelFormatType))
  {
    v28 = -6662;
    snprintf(__str, 0x80uLL, "CoreVideo: Error, CVPixelBufferCreate() for non-IOSurface backed compressed format %c%c%c%c is not allowed.", HIBYTE(pixelFormatType), BYTE2(pixelFormatType), BYTE1(pixelFormatType), pixelFormatType);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v30 = __str;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    goto LABEL_25;
  }
  v17 = CVPixelBufferBacking::alloc(allocator, v16);
  v18 = v17;
  if (!v17)
    goto LABEL_46;
  if (!(*(uint64_t (**)(CVImageBacking *, size_t, size_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __CFDictionary *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, CVReturn *))(*(_QWORD *)v17[2] + 248))(v17[2], width, height, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v14, 0, 0, 0, 0,
          0,
          &v28))
  {
    if (v28)
    {
LABEL_25:
      v18 = 0;
      v21 = 0;
LABEL_35:
      v25 = 1;
      goto LABEL_36;
    }
    v18 = 0;
    v21 = 0;
    v26 = -6660;
LABEL_34:
    v28 = v26;
    goto LABEL_35;
  }
  v20 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v19);
  v21 = v20;
  if (v20)
  {
    if ((*(uint64_t (**)(_QWORD, CVImageBacking *))(**((_QWORD **)v20 + 2) + 248))(*((_QWORD *)v20 + 2), v18[2]))
    {
      *pixelBufferOut = v21;
      v21 = 0;
      goto LABEL_28;
    }
    v22 = -6660;
  }
  else
  {
    v22 = -6662;
  }
  v28 = v22;
LABEL_28:
  v23 = v18[2];
  if (v23 && (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v23 + 160))(v23))
  {
    v24 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)v18[2] + 160))(v18[2]);
    IOOrEXSurfaceGetID(v24);
    kdebug_trace();
    v25 = 0;
    goto LABEL_37;
  }
  v25 = 0;
LABEL_36:
  kdebug_trace();
LABEL_37:
  if (v21)
    CFRelease(v21);
  if ((v25 & 1) == 0)
    CFRelease(v18);
  if (v14)
    CFRelease(v14);
  return v28;
}

void sub_1A2C4E33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  CGColorSpace *ICCBased;
  const __CFData *Value;
  const __CFData *v4;
  CFTypeID v5;
  const UInt8 *BytePtr;
  size_t Length;
  CGDataProvider *v8;
  CGDataProvider *v9;
  CGDataProvider *v10;
  int v11;
  const __CFNumber *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  OSType IntValueWithDefault;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  const ColorSyncProfile *MutableCopy;
  CFDictionaryRef v21;
  __CFData *v22;
  CFStringRef *v23;
  char *v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  const __CFString *v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  const ColorSyncProfile *Profile;
  const ColorSyncProfile *v40;
  const __CFData *v41;
  const __CFData *v42;
  UInt8 *MutableBytePtr;
  UInt8 *v44;
  double v45;
  float64x2_t v46;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  const __CFData *v57;
  const __CFData *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  CFTypeRef cf1;
  UInt8 bytes[40];
  double valuePtr;
  uint64_t v65;
  _QWORD v66[5];
  void *values;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  CFStringRef v74;
  CGFloat range[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if ((CVImageBufferCreateColorSpaceFromAttachments::sDidCheck & 1) == 0)
  {
    CVImageBufferCreateColorSpaceFromAttachments::sForceColorSyncOff = CFPreferencesGetAppBooleanValue(CFSTR("force_colorsync_off"), CFSTR("com.apple.corevideo"), 0) != 0;
    CVImageBufferCreateColorSpaceFromAttachments::sUseCGConstColorSpace = CFPreferencesGetAppBooleanValue(CFSTR("use_cg_const_colorspaces"), CFSTR("com.apple.corevideo"), 0) != 0;
    CVImageBufferCreateColorSpaceFromAttachments::sDidCheck = 1;
  }
  if (CVImageBufferCreateColorSpaceFromAttachments::sForceColorSyncOff)
    return 0;
  Value = (const __CFData *)CFDictionaryGetValue(attachments, CFSTR("CVImageBufferICCProfile"));
  if (!Value || (v4 = Value, v5 = CFGetTypeID(Value), v5 != CFDataGetTypeID()) || CFDataGetLength(v4) < 1)
  {
    v11 = CVImageBufferCreateColorSpaceFromAttachments::sUseCGConstColorSpace;
    v65 = 0;
    v66[1] = 0;
    v66[0] = 0x3FFCCCCCCCCCCCCDLL;
    v66[2] = 0x3FF0000000000000;
    v66[3] = 0;
    valuePtr = 0.0;
    memset(bytes, 0, 32);
    v12 = (const __CFNumber *)CFDictionaryGetValue(attachments, CFSTR("CVImageBufferGammaLevel"));
    v13 = CFDictionaryGetValue(attachments, CFSTR("CVImageBufferColorPrimaries"));
    v14 = CFDictionaryGetValue(attachments, CFSTR("CVImageBufferTransferFunction"));
    v15 = CFDictionaryGetValue(attachments, CFSTR("CVImageBufferYCbCrMatrix"));
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(attachments, CFSTR("PixelFormatType"), 0);
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v18 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], IntValueWithDefault);
    v19 = v18;
    MutableCopy = 0;
    if (v13)
    {
      cf1 = v15;
      v21 = 0;
      v22 = 0;
      ICCBased = 0;
      if (v14)
      {
        if (CVDictionaryGetBoolValueWithDefault(v18, CFSTR("ContainsGrayscale"), 0)
          && (CFEqual(v13, CFSTR("ITU_R_709_2")) && CFEqual(v14, CFSTR("Linear"))
           || CFEqual(v13, CFSTR("P3_D65")) && CFEqual(v14, CFSTR("Linear"))))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D9F0];
LABEL_60:
          ICCBased = CGColorSpaceCreateWithName(*v23);
          MutableCopy = 0;
          v21 = 0;
          v22 = 0;
          goto LABEL_61;
        }
        if (CFEqual(v13, CFSTR("P3_D65")) && CFEqual(v14, CFSTR("Linear")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D940];
          goto LABEL_60;
        }
        if (CFEqual(v13, CFSTR("P3_D65")) && CFEqual(v14, CFSTR("SMPTE_ST_2084_PQ")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D920];
          goto LABEL_60;
        }
        if (CFEqual(v13, CFSTR("P3_D65")) && CFEqual(v14, CFSTR("ITU_R_2100_HLG")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D910];
          goto LABEL_60;
        }
        if (CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("Linear")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D950];
          goto LABEL_60;
        }
        if (CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("ITU_R_2100_HLG")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D9C0];
          goto LABEL_60;
        }
        if (CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("SMPTE_ST_2084_PQ")))
        {
          v23 = (CFStringRef *)MEMORY[0x1E0C9D9C8];
          goto LABEL_60;
        }
        if (v11)
        {
          if (CFEqual(v13, CFSTR("ITU_R_709_2")) && CFEqual(v14, CFSTR("ITU_R_709_2"))
            || CFEqual(v13, CFSTR("ITU_R_709_2")) && CFEqual(v14, CFSTR("ITU_R_2020")))
          {
            v23 = (CFStringRef *)MEMORY[0x1E0C9D9D0];
            goto LABEL_60;
          }
          if (CFEqual(v13, CFSTR("ITU_R_709_2")) && (CFEqual(v14, CFSTR("IEC_sRGB")) || CFEqual(v14, CFSTR("sRGB"))))
          {
            v23 = (CFStringRef *)MEMORY[0x1E0C9DA10];
            goto LABEL_60;
          }
          if (CFEqual(v13, CFSTR("ITU_R_709_2")) && CFEqual(v14, CFSTR("Linear")))
          {
            v23 = (CFStringRef *)MEMORY[0x1E0C9DA00];
            goto LABEL_60;
          }
          if (CFEqual(v13, CFSTR("P3_D65")) && (CFEqual(v14, CFSTR("IEC_sRGB")) || CFEqual(v14, CFSTR("sRGB"))))
          {
LABEL_54:
            v23 = (CFStringRef *)MEMORY[0x1E0C9D908];
            goto LABEL_60;
          }
          if (CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("ITU_R_2020"))
            || CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("ITU_R_709_2")))
          {
            v23 = (CFStringRef *)MEMORY[0x1E0C9D9A0];
            goto LABEL_60;
          }
          if (CFEqual(v13, CFSTR("DCI_P3")) && CFEqual(v14, CFSTR("SMPTE_ST_428_1")))
          {
            v23 = (CFStringRef *)MEMORY[0x1E0C9D900];
            goto LABEL_60;
          }
        }
        if (CFEqual(v13, CFSTR("ITU_R_709_2")))
        {
          v59 = 1;
          v25 = (char *)&kQTPrimaries_ITU_R709_2_Info;
          goto LABEL_88;
        }
        if (CFEqual(v13, CFSTR("EBU_3213")))
        {
          v59 = 5;
          v25 = (char *)&kQTPrimaries_EBU_3213_Info;
          goto LABEL_88;
        }
        if (CFEqual(v13, CFSTR("SMPTE_C")))
        {
          v59 = 6;
          v25 = (char *)&kQTPrimaries_SMPTE_C_Info;
          goto LABEL_88;
        }
        if (CFEqual(v13, CFSTR("P22")))
        {
          v26 = 22;
LABEL_83:
          v59 = v26;
          v25 = (char *)&kQTPrimaries_GenericRGB_Info;
          goto LABEL_88;
        }
        if (CFEqual(v13, CFSTR("ITU_R_2020")))
        {
          v59 = 9;
          v25 = (char *)&kQTPrimaries_ITU_R_2020_Info;
        }
        else if (CFEqual(v13, CFSTR("DCI_P3")))
        {
          v59 = 11;
          v25 = (char *)&kQTPrimaries_DCI_P3_Info;
        }
        else
        {
          if (!CFEqual(v13, CFSTR("P3_D65")))
          {
            v26 = 2;
            goto LABEL_83;
          }
          if (CFEqual(v14, CFSTR("ITU_R_709_2")))
            goto LABEL_54;
          v59 = 12;
          v25 = (char *)&kQTPrimaries_P3_D65_Info;
        }
LABEL_88:
        v61 = v25;
        if (CFEqual(v14, CFSTR("ITU_R_709_2")))
        {
          if (v11)
            v27 = (__int16 *)&kCVCGTransferFunction_CG709_Info;
          else
            v27 = &kQTTransferFunction_ITU_R2020_Info;
          v60 = 1;
          goto LABEL_98;
        }
        if (CFEqual(v14, CFSTR("SMPTE_240M_1995")))
        {
          v28 = 7;
        }
        else
        {
          if (!CFEqual(v14, CFSTR("ITU_R_2020")))
          {
            if (CFEqual(v14, CFSTR("SMPTE_ST_428_1")))
            {
              v60 = 17;
              v27 = &kQTTransferFunction_SMPTE_ST_428_1_Info;
            }
            else if (CFEqual(v14, CFSTR("Linear")))
            {
              v60 = 8;
              v27 = &kCVTransferFunction_Linear_Info;
            }
            else if (CFEqual(v14, CFSTR("IEC_sRGB")) || CFEqual(v14, CFSTR("sRGB")))
            {
              v60 = 13;
              v27 = &kCVCGTransferFunction_sRGB_Info;
            }
            else
            {
              v60 = 2;
              v27 = &kQTTransferFunction_GenericRGB_Info;
              if (CFEqual(v14, CFSTR("UseGamma")) && v12)
              {
                CFNumberGetValue(v12, kCFNumberDoubleType, v66);
                v60 = 2;
                v27 = (__int16 *)&v65;
              }
            }
LABEL_98:
            if (cf1)
            {
              if (CFEqual(cf1, CFSTR("ITU_R_709_2")))
              {
                v29 = 1;
              }
              else if (CFEqual(cf1, CFSTR("ITU_R_601_4")))
              {
                v29 = 6;
              }
              else if (CFEqual(cf1, CFSTR("SMPTE_240M_1995")))
              {
                v29 = 7;
              }
              else if (CFEqual(cf1, CFSTR("DCI_P3")))
              {
                v29 = 11;
              }
              else if (CFEqual(cf1, CFSTR("P3_D65")))
              {
                v29 = 12;
              }
              else if (CFEqual(cf1, CFSTR("ITU_R_2020")))
              {
                v29 = 9;
              }
              else
              {
                v29 = 2;
              }
            }
            else
            {
              v29 = 2;
            }
            v30 = *((double *)v27 + 1);
            if (*v27)
              v30 = 1.0 / v30;
            valuePtr = v30;
            v79 = xmmword_1E48A7E18;
            v80 = *(_OWORD *)&off_1E48A7E28;
            v81 = xmmword_1E48A7E38;
            *(_OWORD *)range = xmmword_1E48A7DD8;
            v76 = *(_OWORD *)&off_1E48A7DE8;
            v77 = xmmword_1E48A7DF8;
            v78 = *(_OWORD *)&off_1E48A7E08;
            v74 = 0;
            v73 = 0u;
            v72 = 0u;
            v71 = 0u;
            v70 = 0u;
            v69 = 0u;
            v68 = 0u;
            values = (void *)CFRetain(CFSTR("displayRGB"));
            if (CFEqual(v13, CFSTR("ITU_R_709_2"))
              && (v31 = CFEqual(v14, CFSTR("ITU_R_709_2")), cf1)
              && v31
              && CFEqual(cf1, CFSTR("ITU_R_709_2")))
            {
              v32 = CFSTR("HDTV");
            }
            else if (CFEqual(v13, CFSTR("SMPTE_C"))
                   && (v33 = CFEqual(v14, CFSTR("ITU_R_709_2")), cf1)
                   && v33
                   && CFEqual(cf1, CFSTR("ITU_R_601_4")))
            {
              v32 = CFSTR("Composite NTSC");
            }
            else if (CFEqual(v13, CFSTR("EBU_3213"))
                   && (v34 = CFEqual(v14, CFSTR("ITU_R_709_2")), cf1)
                   && v34
                   && CFEqual(cf1, CFSTR("ITU_R_601_4")))
            {
              v32 = CFSTR("Composite PAL");
            }
            else if (CFEqual(v13, CFSTR("SMPTE_C"))
                   && (v35 = CFEqual(v14, CFSTR("SMPTE_240M_1995")), cf1)
                   && v35
                   && CFEqual(cf1, CFSTR("SMPTE_240M_1995")))
            {
              v32 = CFSTR("HDTV Interim Color Implementation");
            }
            else if (CFEqual(v13, CFSTR("DCI_P3")) && CFEqual(v14, CFSTR("SMPTE_ST_428_1")))
            {
              v32 = CFSTR("Digital Cinema P3");
            }
            else if (CFEqual(v13, CFSTR("P3_D65")) && CFEqual(v14, CFSTR("ITU_R_709_2")))
            {
              v32 = CFSTR("Apple P3");
            }
            else if (CFEqual(v13, CFSTR("ITU_R_2020")) && CFEqual(v14, CFSTR("ITU_R_2020")))
            {
              v32 = CFSTR("UHD");
            }
            else if (CFEqual(v14, CFSTR("SMPTE_ST_2084_PQ")))
            {
              v32 = CFSTR("HDR (PQ)");
            }
            else
            {
              if (!CFEqual(v14, CFSTR("ITU_R_2100_HLG")))
              {
                v36 = (void *)CFStringCreateWithFormat(v17, 0, CFSTR("QuickTime 'nclc' Video (%d,%d,%d)"), v59, v60, v29);
                goto LABEL_156;
              }
              v32 = CFSTR("HDR (HLG)");
            }
            v36 = (void *)CFRetain(v32);
LABEL_156:
            *(_QWORD *)&v68 = v36;
            v37 = 13;
            *((_QWORD *)&v68 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *(_QWORD *)&v69 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *((_QWORD *)&v69 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *(_QWORD *)&v70 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 32);
            *((_QWORD *)&v70 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 40);
            *(_QWORD *)&v71 = CFNumberCreate(0, kCFNumberDoubleType, v61);
            *((_QWORD *)&v71 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 8);
            *(_QWORD *)&v72 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 16);
            *((_QWORD *)&v72 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 24);
            *(_QWORD *)&v73 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 48);
            *((_QWORD *)&v73 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 56);
            v74 = CFStringCreateWithCString(0, "Copyright 2007 Apple Inc.", 0);
            v21 = CFDictionaryCreate(0, (const void **)range, (const void **)&values, 14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            do
            {
              CFRelease(*(&values + v37));
              v38 = v37-- + 1;
            }
            while (v38 > 1);
            if (v21 && (Profile = (const ColorSyncProfile *)ColorSyncMakeProfile()) != 0)
            {
              v40 = Profile;
              MutableCopy = ColorSyncProfileCreateMutableCopy(Profile);
              CFRelease(v40);
              if (MutableCopy)
              {
                v41 = ColorSyncProfileCopyHeader(MutableCopy);
                if (v41)
                {
                  v42 = v41;
                  v22 = CFDataCreateMutableCopy(0, 128, v41);
                  CFRelease(v42);
                  if (v22)
                  {
                    CFDataSetLength(v22, 128);
                    MutableBytePtr = CFDataGetMutableBytePtr(v22);
                    if (MutableBytePtr)
                    {
                      v44 = MutableBytePtr;
                      if (*v27 != 3)
                      {
LABEL_167:
                        *((_QWORD *)v44 + 3) = 0x10001000407D5;
                        *((_DWORD *)v44 + 8) = 65537;
                        ColorSyncProfileSetHeader(MutableCopy, v22);
                        ICCBased = CGColorSpaceCreateWithPlatformColorSpace(MutableCopy);
                        goto LABEL_61;
                      }
                      v45 = *((double *)v27 + 3);
                      v46.f64[0] = *((double *)v27 + 4) + 1.0;
                      __asm { FMOV            V4.2D, #1.0 }
                      v52.f64[0] = *((float64_t *)v27 + 1);
                      v53 = *((double *)v27 + 2);
                      v52.f64[1] = v46.f64[0];
                      v54 = vdivq_f64(_Q4, v52);
                      _Q4.f64[0] = *((float64_t *)v27 + 4);
                      *(_QWORD *)bytes = 1634886000;
                      v46.f64[1] = v45;
                      v55 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
                      __asm { FMOV            V2.2D, #0.5 }
                      *(_DWORD *)&bytes[8] = 768;
                      *(int8x16_t *)&bytes[12] = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmlaq_f64(_Q2, v55, v54)), (int32x4_t)vcvtq_u64_f64(vmlaq_f64(_Q2, v55, vdivq_f64(_Q4, v46)))));
                      *(_DWORD *)&bytes[28] = bswap32((v45 * v53 * 65535.0 + 0.5));
                      v57 = CFDataCreateWithBytesNoCopy(0, bytes, 32, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
                      if (v57)
                      {
                        v58 = v57;
                        ColorSyncProfileSetTag(MutableCopy, CFSTR("rTRC"), v57);
                        ColorSyncProfileSetTag(MutableCopy, CFSTR("gTRC"), v58);
                        ColorSyncProfileSetTag(MutableCopy, CFSTR("bTRC"), v58);
                        CFRelease(v58);
                        *((_DWORD *)v44 + 2) = 0x4000000;
                        goto LABEL_167;
                      }
                    }
                  }
LABEL_170:
                  ICCBased = 0;
                  goto LABEL_61;
                }
              }
            }
            else
            {
              MutableCopy = 0;
            }
            v22 = 0;
            goto LABEL_170;
          }
          v28 = 14;
        }
        v60 = v28;
        v27 = &kQTTransferFunction_ITU_R2020_Info;
        goto LABEL_98;
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
      ICCBased = 0;
    }
LABEL_61:
    if (v19)
      CFRelease(v19);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v22)
      CFRelease(v22);
    if (v21)
      CFRelease(v21);
    v10 = 0;
    goto LABEL_70;
  }
  range[0] = 0.0;
  *(_QWORD *)&v76 = 0;
  range[1] = 1.0;
  *((_QWORD *)&v76 + 1) = 0x3FF0000000000000;
  *(_QWORD *)&v77 = 0;
  *((_QWORD *)&v77 + 1) = 0x3FF0000000000000;
  CFRetain(v4);
  BytePtr = CFDataGetBytePtr(v4);
  Length = CFDataGetLength(v4);
  v8 = CGDataProviderCreateWithData(v4, BytePtr, Length, (CGDataProviderReleaseDataCallback)_releaseCFDataForCGDataProvider);
  if (v8)
  {
    v9 = v8;
    ICCBased = CGColorSpaceCreateICCBased(3uLL, range, v8, 0);
    v10 = v9;
LABEL_70:
    CGDataProviderRelease(v10);
    return ICCBased;
  }
  CGDataProviderRelease(0);
  CFRelease(v4);
  return 0;
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  char v8;
  CVReturn v9;
  char v10;
  CFMutableDictionaryRef MutableCopy;
  const __CFAllocator *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  _QWORD *v16;
  const void *v17;
  CFTypeID v18;
  uint64_t v19;
  CFTypeID v20;
  CVPixelBuffer *v21;
  const void *Value;
  const void *v23;
  CFTypeID v24;
  CFTypeRef cf;

  cf = 0;
  v8 = _os_feature_enabled_impl();
  v9 = -6661;
  if (!surface || !pixelBufferOut)
    return v9;
  v10 = v8;
  *pixelBufferOut = 0;
  IOOrEXSurfaceGetID(surface);
  kdebug_trace();
  if (pixelBufferAttributes)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = MutableCopy;
  if (!MutableCopy)
  {
    v16 = 0;
    v14 = 0;
    goto LABEL_40;
  }
  if ((v10 & 1) != 0)
    v14 = 0;
  else
    v14 = IOSurfaceCopyAllValues(surface);
  cf = CVPixelBufferBacking::alloc(allocator, v12);
  if (cf)
  {
    if (checkIOOrEXSurfaceAndCreatePixelBufferBacking(surface, v13, &cf))
    {
LABEL_28:
      v16 = 0;
      goto LABEL_30;
    }
    v16 = CVPixelBuffer::alloc(allocator, v15);
    if (v16)
    {
      v17 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v17 == CFDictionaryGetValue(v13, CFSTR("IOSurfaceDoNotIncrementUseCount")))
      {
        v18 = CFGetTypeID(v16);
        if (v18 == CVPixelBufferGetTypeID())
          v19 = v16[2];
        else
          v19 = 0;
        CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v19);
      }
      if ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v16[2] + 248))(v16[2], *((_QWORD *)cf + 2)))
      {
        if ((v10 & 1) == 0)
        {
          v20 = CFGetTypeID(v16);
          if (v20 == CVPixelBufferGetTypeID())
          {
            v21 = (CVPixelBuffer *)v16[2];
            if (v21)
              CVPixelBuffer::pullAttachmentsFromIOSurface(v21, v14);
          }
          if (v14)
          {
            Value = CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CBC048]);
            if (Value)
            {
              v23 = Value;
              v24 = CFGetTypeID(Value);
              if (v24 == CFStringGetTypeID())
                CVBufferBacking::setPoolName(*((CVBufferBacking **)cf + 2), v23);
            }
          }
        }
        CVTracePoolAction(1, 0, (_QWORD **)cf, "created from IOSurface", 0, 0);
        v9 = 0;
        *pixelBufferOut = (CVPixelBufferRef)v16;
        goto LABEL_28;
      }
      v9 = -6660;
LABEL_30:
      if (cf)
        CFRelease(cf);
      if (!v13)
        goto LABEL_34;
      goto LABEL_33;
    }
LABEL_40:
    v9 = -6662;
    goto LABEL_30;
  }
  v16 = 0;
  v9 = -6662;
LABEL_33:
  CFRelease(v13);
LABEL_34:
  if (v14)
    CFRelease(v14);
  if (v16)
    CFRelease(v16);
  return v9;
}

uint64_t checkIOOrEXSurfaceAndCreatePixelBufferBacking(__IOSurface *a1, const __CFDictionary *a2, _QWORD *a3)
{
  unsigned int PixelFormat;
  IOSurfaceRef PlaneCount;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int CompressionTypeOfPlane;
  int AddressFormatOfPlane;
  BOOL v12;
  int v13;
  size_t i;
  const void *DescriptionWithPixelFormatType;
  const __CFBoolean *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  unint64_t IntValueWithDefault;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  CFTypeID TypeID;
  uint64_t v28;
  const __CFDictionary *Value;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  CFTypeID v35;
  CFIndex v36;
  uint64_t v37;
  uint64_t IntInArrayWithDefault;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int ParentID;
  const __CFArray *v43;
  int BoolValueWithDefault;
  unint64_t SliceCount;
  _QWORD *v46;
  IOSurfaceRef v47;
  char v48;
  size_t BytesPerRowOfPlane;
  int v50;
  unint64_t v51;
  size_t v52;
  const __CFDictionary *v53;
  IOSurfaceRef BytesPerElementOfPlane;
  uint64_t v55;
  uint64_t v56;
  IOSurfaceRef ElementWidthOfPlane;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  CFIndex v66;
  const __CFDictionary *ValueAtIndex;
  uint64_t NumberFromDict;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t WidthInCompressedTilesOfPlane;
  unint64_t v73;
  unint64_t HeightInCompressedTilesOfPlane;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  IOSurfaceRef BytesPerElement;
  unint64_t v82;
  IOSurfaceRef ElementWidth;
  unint64_t v84;
  IOSurfaceRef ElementHeight;
  unint64_t v86;
  const void *v87;
  const __CFArray *v88;
  char v89;
  unint64_t v90;
  __CFString *v91;
  unint64_t BytesPerRow;
  IOSurfaceRef Height;
  unint64_t Width;
  IOSurfaceRef AllocSize;
  int valuePtr;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _OWORD v103[8];
  _QWORD v104[16];
  _QWORD v105[16];
  _QWORD v106[19];

  v106[16] = *MEMORY[0x1E0C80C00];
  v102 = 0;
  memset(v103, 0, sizeof(v103));
  v100 = 0;
  v101 = 0;
  v98 = 0;
  v99 = 0;
  if (!a1)
    return -6661;
  if (!a2 || !a3 || !*a3)
    return -6662;
  Width = (unint64_t)IOOrEXSurfaceGetWidth(a1);
  Height = IOOrEXSurfaceGetHeight(a1);
  PixelFormat = IOOrEXSurfaceGetPixelFormat(a1);
  BytesPerRow = (unint64_t)IOOrEXSurfaceGetBytesPerRow(a1);
  AllocSize = IOOrEXSurfaceGetAllocSize(a1);
  PlaneCount = IOOrEXSurfaceGetPlaneCount(a1);
  if ((unint64_t)PlaneCount > 0x10)
    return -6661;
  v7 = 0;
  v8 = (unint64_t)PlaneCount;
  if (!PlaneCount)
    goto LABEL_20;
  v9 = 0;
  do
  {
    CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
    AddressFormatOfPlane = IOSurfaceGetAddressFormatOfPlane();
    if ((CompressionTypeOfPlane - 1) < 3
      || (!CompressionTypeOfPlane ? (v12 = AddressFormatOfPlane == 5) : (v12 = 0),
          !v12 ? (v13 = 0) : (v13 = 1),
          CompressionTypeOfPlane == 4 || v13))
    {
      v7 = 1;
    }
    ++v9;
  }
  while (v8 != v9);
  if (v8 >= 2)
  {
    for (i = 0; i != v8; ++i)
    {
      v106[i] = IOOrEXSurfaceGetWidthOfPlane(a1, i);
      v105[i] = IOOrEXSurfaceGetHeightOfPlane(a1, i);
      v104[i] = IOOrEXSurfaceGetBytesPerRowOfPlane(a1, i);
      *((_QWORD *)v103 + i) = IOOrEXSurfaceGetBaseAddressOfPlane(a1, i);
    }
  }
  else
  {
LABEL_20:
    v106[0] = IOOrEXSurfaceGetWidth(a1);
    v105[0] = IOOrEXSurfaceGetHeight(a1);
    v104[0] = IOOrEXSurfaceGetBytesPerRow(a1);
    v8 = 0;
    *(_QWORD *)&v103[0] = IOOrEXSurfaceGetBaseAddress(a1);
  }
  if (PixelFormat)
  {
    DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(PixelFormat);
    if (!DescriptionWithPixelFormatType)
    {
      valuePtr = 0;
      Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("PixelFormatDescription"));
      if (!Value)
        return -6680;
      DescriptionWithPixelFormatType = Value;
      v31 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("PixelFormat"));
      if (!v31)
        return -6680;
      v32 = v31;
      v33 = CFGetTypeID(v31);
      if (v33 != CFNumberGetTypeID())
        return -6680;
      CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
      if (PixelFormat != valuePtr)
        return -6680;
    }
    CFDictionarySetValue(a2, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
  }
  else
  {
    if (!CFDictionaryGetValue(a2, CFSTR("PixelFormatDescription")))
      return -6680;
    DescriptionWithPixelFormatType = 0;
  }
  v16 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("MetalCompatibility"));
  if (v16 && CFBooleanGetValue(v16))
  {
    if (v8 <= 1)
      v17 = 1;
    else
      v17 = v8;
    v18 = v103;
    v19 = (char *)v104;
    do
    {
      v20 = *v19;
      v19 += 8;
      if ((v20 & 0x3F) != 0 || (*v18 & 0x3F) != 0)
        return -6661;
      v18 += 8;
    }
    while (--v17);
  }
  IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, CFSTR("BytesPerRowAlignment"), 0);
  if (IntValueWithDefault)
  {
    if (v8 <= 1)
      v22 = 1;
    else
      v22 = v8;
    v23 = v104;
    do
    {
      v24 = *v23++;
      if (v24 % IntValueWithDefault)
        return -6661;
    }
    while (--v22);
  }
  v25 = CFDictionaryGetValue(a2, CFSTR("ExactBytesPerRow"));
  if (v25)
  {
    v26 = v25;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v26))
    {
      v28 = CVDictionaryGetIntValueWithDefault(a2, CFSTR("ExactBytesPerRow"), 0);
      if (v104[0] != v28)
        return -6661;
    }
    else
    {
      v35 = CFArrayGetTypeID();
      if (v35 == CFGetTypeID(v26))
      {
        v36 = 0;
        if (v8 <= 1)
          v37 = 1;
        else
          v37 = v8;
        do
        {
          IntInArrayWithDefault = CVDictionaryGetIntInArrayWithDefault(a2, CFSTR("ExactBytesPerRow"), v36, 0);
          if (IntInArrayWithDefault)
          {
            if (v104[v36] != IntInArrayWithDefault)
              return -6661;
          }
        }
        while (v37 != ++v36);
      }
    }
  }
  v39 = CVDictionaryGetIntValueWithDefault(a2, CFSTR("PlaneAlignment"), 0);
  if (v39)
  {
    if (v8 <= 1)
      v40 = 1;
    else
      v40 = v8;
    v41 = v103;
    while (!(*v41 % v39))
    {
      ++v41;
      if (!--v40)
        goto LABEL_69;
    }
    return -6661;
  }
LABEL_69:
  ParentID = IOSurfaceGetParentID();
  if (v7)
  {
    if (DescriptionWithPixelFormatType)
    {
      v43 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DescriptionWithPixelFormatType, CFSTR("Planes"));
      if (IOSurfaceGetCompressionTypeOfPlane() - 3 > 0xFFFFFFFD)
      {
        v48 = 1;
        LODWORD(SliceCount) = 1;
        v47 = AllocSize;
        v46 = a3;
        if (!v8)
          goto LABEL_75;
      }
      else
      {
        BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(DescriptionWithPixelFormatType, CFSTR("MultiSlice"), 0);
        SliceCount = IOSurfaceGetSliceCount();
        v47 = AllocSize;
        v46 = a3;
        if (BoolValueWithDefault)
        {
          if (SliceCount - 0x100000000 <= 0xFFFFFFFF00000001)
            return -6661;
          v48 = 0;
          if (!v8)
            goto LABEL_75;
          goto LABEL_99;
        }
        if (SliceCount >= 2)
          return -6661;
        v48 = 1;
        LODWORD(SliceCount) = 1;
        if (!v8)
        {
LABEL_75:
          BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
          goto LABEL_119;
        }
      }
LABEL_99:
      v65 = 0;
      v66 = 0;
      if (SliceCount < 2)
        v48 = 1;
      v89 = v48;
      v91 = (__CFString *)SliceCount;
      v88 = v43;
      while (1)
      {
        v90 = v65;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v43, v66);
        NumberFromDict = getNumberFromDict(ValueAtIndex, CFSTR("BytesPerTileHeader"), 1);
        v69 = getNumberFromDict(ValueAtIndex, CFSTR("TileWidth"), 1);
        v70 = getNumberFromDict(ValueAtIndex, CFSTR("TileHeight"), 1);
        v71 = getNumberFromDict(ValueAtIndex, CFSTR("BitsPerBlock"), 8);
        WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
        if (!is_mul_ok(WidthInCompressedTilesOfPlane, v69))
          break;
        v73 = WidthInCompressedTilesOfPlane;
        HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
        if (!is_mul_ok(HeightInCompressedTilesOfPlane, v70))
          break;
        v75 = ((v70 * v69 * v71 + 7) >> 3) * v73 * HeightInCompressedTilesOfPlane;
        v76 = v73 * NumberFromDict * HeightInCompressedTilesOfPlane;
        v77 = v76 + v90 + v75;
        if (v90 >= v77)
          break;
        if ((v89 & 1) == 0)
        {
          v78 = 1;
          while (1)
          {
            v79 = v75 + IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
            if (v79 != IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane())
              break;
            v80 = v76 + IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane();
            if (v80 != IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane())
              break;
            if (v91 == (__CFString *)++v78)
              goto LABEL_110;
          }
          return -6661;
        }
LABEL_110:
        ++v66;
        v65 = v76 + v90 + v75;
        v43 = v88;
        if (v66 == v8)
        {
          v47 = AllocSize;
          v64 = v77 > (unint64_t)AllocSize;
          goto LABEL_95;
        }
      }
    }
    return -6662;
  }
  if (v8)
  {
    v50 = ParentID;
    if (DescriptionWithPixelFormatType)
      DescriptionWithPixelFormatType = CFDictionaryGetValue((CFDictionaryRef)DescriptionWithPixelFormatType, CFSTR("Planes"));
    v51 = 0;
    v52 = 0;
    while (1)
    {
      v53 = DescriptionWithPixelFormatType
          ? (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)DescriptionWithPixelFormatType, v52)
          : 0;
      BytesPerElementOfPlane = IOOrEXSurfaceGetBytesPerElementOfPlane(a1, v52);
      if ((unint64_t)BytesPerElementOfPlane >> 61)
        break;
      v55 = getNumberFromDict(v53, CFSTR("BitsPerBlock"), 8 * (_QWORD)BytesPerElementOfPlane);
      v56 = v55 >= 0 ? v55 : v55 + 7;
      ElementWidthOfPlane = IOOrEXSurfaceGetElementWidthOfPlane(a1, v52);
      v58 = getNumberFromDict(v53, CFSTR("BlockWidth"), (uint64_t)ElementWidthOfPlane);
      v59 = v105[v52];
      v60 = v104[v52];
      if (!is_mul_ok(v59, v60))
        break;
      if (!v50)
      {
        v61 = v51 + v60 * v59;
        v62 = v51 >= v61;
        v51 = v61;
        if (v62)
          break;
      }
      v63 = v106[v52];
      if (!is_mul_ok(v63, v56 >> 3) || !is_mul_ok(v60, v58) || v63 * (v56 >> 3) > v60 * v58)
        break;
      if (v8 == ++v52)
      {
        v47 = AllocSize;
        v64 = v51 > (unint64_t)AllocSize;
LABEL_95:
        v46 = a3;
        BytesPerRowOfPlane = BytesPerRow;
        if (v64)
          return -6662;
        goto LABEL_119;
      }
    }
    return -6662;
  }
  BytesPerElement = IOOrEXSurfaceGetBytesPerElement(a1);
  if ((unint64_t)BytesPerElement >> 61)
    return -6662;
  v82 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, CFSTR("BitsPerBlock"), 8 * (_QWORD)BytesPerElement)/ 8;
  ElementWidth = IOOrEXSurfaceGetElementWidth(a1);
  v84 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, CFSTR("BlockWidth"), (uint64_t)ElementWidth);
  ElementHeight = IOOrEXSurfaceGetElementHeight(a1);
  v86 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, CFSTR("BlockHeight"), (uint64_t)ElementHeight);
  v47 = AllocSize;
  v46 = a3;
  if (!is_mul_ok(Width, v82))
    return -6662;
  if (!is_mul_ok(BytesPerRow, v84))
    return -6662;
  if (v82 * Width > v84 * BytesPerRow)
    return -6662;
  if (!is_mul_ok((unint64_t)Height, BytesPerRow))
    return -6662;
  BytesPerRowOfPlane = BytesPerRow;
  if (((unint64_t)Height + v86 - 1) / v86 * BytesPerRow > (unint64_t)AllocSize)
    return -6662;
LABEL_119:
  IOSurfaceGetExtendedPixelsOfPlane();
  CVDictionarySetSInt64Value(a2, CFSTR("ExtendedPixelsLeft"), v101);
  CVDictionarySetSInt64Value(a2, CFSTR("ExtendedPixelsTop"), v100);
  CVDictionarySetSInt64Value(a2, CFSTR("ExtendedPixelsRight"), v99);
  CVDictionarySetSInt64Value(a2, CFSTR("ExtendedPixelsBottom"), v98);
  if ((*(uint64_t (**)(_QWORD, unint64_t, IOSurfaceRef, _QWORD, IOSurfaceRef, size_t, unint64_t, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, const __CFDictionary *, _QWORD, __IOSurface *, _QWORD, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)(*v46 + 16) + 248))(*(_QWORD *)(*v46 + 16), Width, Height, 0, v47, BytesPerRowOfPlane, v8, 0, v106, v105, v104, 0, 0, 0, a2, 0, a1, 0, 0,
         0,
         &v102))
  {
    v87 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v87 == CFDictionaryGetValue(a2, CFSTR("IOSurfaceWiringAssertion")))
      *(_DWORD *)(*(_QWORD *)(*v46 + 16) + 488) |= 2u;
  }
  else
  {
    *v46 = 0;
  }
  return v102;
}

uint64_t getNumberFromDict(const __CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v3;
  CFTypeID v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID TypeID;
  uint64_t valuePtr;

  v3 = a3;
  valuePtr = a3;
  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFDictionaryGetTypeID())
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
      if (Value)
      {
        v8 = Value;
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v8))
        {
          CFNumberGetValue(v8, kCFNumberCFIndexType, &valuePtr);
          return valuePtr;
        }
      }
    }
  }
  return v3;
}

uint64_t CVSetValueFromDictToDict(CFDictionaryRef theDict, const void *a2, __CFDictionary *a3, const void *a4)
{
  uint64_t result;

  result = 0;
  if (a4 && a2 && theDict && a3)
  {
    result = (uint64_t)CFDictionaryGetValue(theDict, a2);
    if (result)
    {
      CFDictionarySetValue(a3, a4, (const void *)result);
      return 1;
    }
  }
  return result;
}

IOSurfaceRef IOOrEXSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBaseAddressOfPlane(buffer, planeIndex);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBytesPerRowOfPlane(buffer, planeIndex);
  return buffer;
}

CFTypeRef *CVPixelBufferBacking::initWithPixelBufferDescription(CFTypeRef *this, unint64_t a2, uint64_t a3, void *a4, unint64_t a5, unint64_t a6, unint64_t a7, void **a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, void (*a12)(void *, const void *), void (*a13)(void *, const void *, unint64_t, unint64_t, const void **), void *a14, const __CFDictionary *a15, const __CFDictionary *a16, __IOSurface *a17, __int128 a18, unint64_t *a19, int *a20)
{
  CFTypeRef *v27;
  const __CFAllocator *v28;
  unsigned int *v29;
  CVPixelBufferBacking *v30;
  uint64_t IntValueWithDefault;
  const __CFDictionary *v32;
  const __CFDictionary *PixelFormatDescription;
  const __CFDictionary *v34;
  uint64_t DefaultBytesPerRowAlignment;
  const __CFBoolean *Value;
  const __CFBoolean *v37;
  int v38;
  int v39;
  _QWORD *v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  const void *v53;
  const __CFData *v54;
  const __CFData *v55;
  uint64_t *BytePtr;
  uint64_t v58;
  CFTypeRef v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  const __CFDictionary *v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  const __CFDictionary *v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  CFTypeRef v83;
  int v84;
  __IOSurface *v85;
  CFTypeRef v86;
  const void *v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  const __CFString *PoolName;
  char *v97;
  const __CFArray *v98;
  const __CFArray *v99;
  unint64_t v100;
  _QWORD *v101;
  unsigned int *v102;
  const void *ValueAtIndex;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  const __CFDictionary *v108;
  uint64_t v109;
  uint64_t v110;
  int v111[3];

  v27 = this;
  v28 = CFGetAllocator(this[1]);
  *a20 = 0;
  if (CVBufferBacking::init((CVBufferBacking *)v27))
  {
    v30 = a15;
    if (!a15)
    {
LABEL_39:
      v39 = -6660;
      goto LABEL_40;
    }
    v27[22] = (CFTypeRef)a2;
    v27[23] = (CFTypeRef)a3;
    if (a3 | a2)
    {
      if (!a2)
        goto LABEL_18;
    }
    else
    {
      v27[22] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(a15, CFSTR("Width"), 0);
      IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a15, CFSTR("Height"), 0);
      v30 = a15;
      a3 = IntValueWithDefault;
      v27[23] = (CFTypeRef)IntValueWithDefault;
      if (!v27[22])
      {
LABEL_18:
        v39 = -6681;
LABEL_40:
        *a20 = v39;
LABEL_41:
        (*((void (**)(CFTypeRef *))*v27 + 5))(v27);
        return 0;
      }
    }
    if (a7 > 0x10 || !a3)
      goto LABEL_18;
    v111[0] = 0;
    v32 = v30;
    PixelFormatDescription = CVPixelBufferBacking::getPixelFormatDescription(v30, (const __CFDictionary *)v111, v29);
    if (!PixelFormatDescription)
    {
      v39 = -6680;
      goto LABEL_40;
    }
    v34 = PixelFormatDescription;
    v27[135] = CFDictionaryCreateCopy(v28, PixelFormatDescription);
    v27[136] = CFDictionaryCreateCopy(v28, v32);
    v27[131] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, CFSTR("ExtendedPixelsLeft"), 0);
    v27[133] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, CFSTR("ExtendedPixelsTop"), 0);
    v27[132] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, CFSTR("ExtendedPixelsRight"), 0);
    v27[134] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, CFSTR("ExtendedPixelsBottom"), 0);
    v110 = CVDictionaryGetIntValueWithDefault(v34, CFSTR("BitsPerBlock"), 0);
    v108 = v34;
    v109 = CVDictionaryGetIntValueWithDefault(v34, CFSTR("BlockWidth"), 1);
    if (a4 || a8 || a17)
    {
      v27[143] = a12;
      v27[144] = a13;
      v27[145] = a14;
      *((_BYTE *)v27 + 1168) = 1;
      v27[57] = a17;
      if (a17)
        CFRetain(a17);
      v27[56] = a4;
      if (a7)
      {
        v27[129] = (CFTypeRef)a5;
        if (a5)
        {
          if (!a6)
            a6 = a5 / (unint64_t)v27[23];
          v27[126] = (CFTypeRef)a6;
        }
        v27[130] = (CFTypeRef)a7;
        v43 = v27 + 40;
        v44 = 78;
        v45 = a8;
        v47 = v109;
        v46 = v110;
        do
        {
          if (a8)
            v48 = *v45;
          else
            v48 = 0;
          v49 = *a11++;
          v43[38] = v49;
          v50 = *a9++;
          v43[22] = v48;
          *(v43 - 16) = v50;
          v51 = *a10++;
          *v43++ = v51;
          v52 = v44 - 77;
          ++v44;
          ++v45;
        }
        while (v52 < (unint64_t)v27[130]);
      }
      else
      {
        v27[126] = (CFTypeRef)a6;
        v27[129] = (CFTypeRef)a5;
        v47 = v109;
        v46 = v110;
      }
      *a20 = 0;
    }
    else
    {
      DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment(0);
      Value = (const __CFBoolean *)CFDictionaryGetValue(v32, CFSTR("MetalCompatibility"));
      v37 = Value;
      if (Value)
      {
        if (CFBooleanGetValue(Value))
        {
          DefaultBytesPerRowAlignment = 64;
          v38 = 64;
        }
        else
        {
          v38 = 16;
        }
      }
      else
      {
        v38 = 16;
      }
      v53 = CFDictionaryGetValue(v32, CFSTR("MemoryAllocator"));
      if (!v53)
        v53 = CFGetAllocator(v27[1]);
      v27[137] = CFRetain(v53);
      v54 = (const __CFData *)CFDictionaryGetValue(v32, CFSTR("CustomMemoryLayoutCallBacks"));
      if (v54)
      {
        v55 = v54;
        if (v37 && CFBooleanGetValue(v37))
          goto LABEL_39;
        BytePtr = (uint64_t *)CFDataGetBytePtr(v55);
        v58 = *BytePtr;
        if ((*BytePtr | 2) != 2)
        {
          *a20 = -6682;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            CVPixelBufferBacking::initWithPixelBufferDescription(v58);
          goto LABEL_41;
        }
        if (!BytePtr[1] || !BytePtr[2])
        {
          *a20 = -6682;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            CVPixelBufferBacking::initWithPixelBufferDescription();
          goto LABEL_41;
        }
        v27[138] = (CFTypeRef)v58;
        v59 = (CFTypeRef)BytePtr[1];
        v27[139] = v59;
        v27[140] = (CFTypeRef)BytePtr[2];
        v27[141] = (CFTypeRef)BytePtr[3];
      }
      else
      {
        v59 = v27[139];
      }
      if (!v59)
      {
        v27[138] = (CFTypeRef)3;
        v27[139] = _CVPixelBufferStandardMemoryLayout;
        v27[140] = _CVPixelBufferStandardMemoryDispose;
        v27[141] = 0;
      }
      if (a16)
      {
        v60 = CVDictionaryGetIntValueWithDefault(a16, CFSTR("WorstCaseBytesPerRow"), 0);
        v61 = CVDictionaryGetIntValueWithDefault(a16, CFSTR("AdjustableBaseAddressGranularity"), 0);
        v62 = CFDictionaryGetValue(a16, CFSTR("PixelBufferPoolNameKey"));
        if (v62)
          CVBufferBacking::setPoolName((CVBufferBacking *)v27, v62);
      }
      else
      {
        v60 = 0;
        v61 = 0;
      }
      v63 = CVDictionaryGetIntValueWithDefault(v32, CFSTR("BytesPerRowAlignment"), 0);
      if (v63)
      {
        if ((int)DefaultBytesPerRowAlignment >= 0)
          v64 = DefaultBytesPerRowAlignment;
        else
          v64 = -(int)DefaultBytesPerRowAlignment;
        if ((int)v63 >= 0)
          v65 = v63;
        else
          v65 = -(int)v63;
        if (v64 <= v65)
          v66 = v65;
        else
          v66 = v64;
        if (v64 >= v65)
          v64 = v65;
        if (v64)
        {
          v67 = v32;
          if (v64 < 1)
          {
            v68 = v66;
          }
          else
          {
            do
            {
              v68 = v64;
              v64 = (int)v66 % v64;
              v66 = v68;
            }
            while (v64 > 0);
          }
        }
        else
        {
          if (v66 <= 1)
            v68 = 1;
          else
            v68 = v66;
          v67 = v32;
        }
        DefaultBytesPerRowAlignment = (int)v63 * (int)DefaultBytesPerRowAlignment / v68;
      }
      else
      {
        v67 = v32;
      }
      v69 = CVDictionaryGetIntValueWithDefault(v67, CFSTR("PlaneAlignment"), 0);
      if (v69)
      {
        if ((int)v69 >= 0)
          v70 = v69;
        else
          v70 = -(int)v69;
        if (v38 <= v70)
          v71 = v70;
        else
          v71 = v38;
        if (v38 < v70)
          v70 = v38;
        if (v70)
        {
          v72 = v32;
          if (v70 < 1)
          {
            v73 = v71;
          }
          else
          {
            do
            {
              v73 = v70;
              v70 = (int)v71 % v70;
              v71 = v73;
            }
            while (v70 > 0);
          }
        }
        else
        {
          if (v71 <= 1)
            v73 = 1;
          else
            v73 = v71;
          v72 = v32;
        }
        v38 = (int)v69 * v38 / v73;
      }
      else
      {
        v72 = v32;
      }
      if (v38 >= 0)
        v74 = v38;
      else
        v74 = -v38;
      if ((int)DefaultBytesPerRowAlignment >= 0)
        v75 = DefaultBytesPerRowAlignment;
      else
        v75 = -(int)DefaultBytesPerRowAlignment;
      if (v74 <= v75)
        v76 = v75;
      else
        v76 = v74;
      if (v74 >= v75)
        v74 = v75;
      if (v74)
      {
        if (v74 < 1)
        {
          v77 = v76;
        }
        else
        {
          do
          {
            v77 = v74;
            v74 = (int)v76 % v74;
            v76 = v77;
          }
          while (v74 > 0);
        }
      }
      else if (v76 <= 1)
      {
        v77 = 1;
      }
      else
      {
        v77 = v76;
      }
      v78 = v38 * (int)DefaultBytesPerRowAlignment / v77;
      if (a18 == 0)
      {
        if (v78 >= 0)
          v79 = v38 * (int)DefaultBytesPerRowAlignment / v77;
        else
          v79 = -v78;
        if (v79 <= 512)
          v80 = 512;
        else
          v80 = v79;
        if (v79 >= 512)
          v81 = 512;
        else
          v81 = v79;
        if (v79 >= 1 && v81)
        {
          do
          {
            v82 = v81;
            v81 = v80 % v81;
            v80 = v82;
          }
          while (v81 > 0);
        }
        else
        {
          v82 = v80;
        }
        v78 = (v78 << 9) / v82;
      }
      v83 = v27[138];
      if (v83 == (CFTypeRef)2)
      {
        v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, const __CFDictionary *, _QWORD, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v27[139])(v27[141], v27[137], v72, a16, 0, v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v78, v60, v61, v27 + 56, v27 + 126, v27 + 129,
                v27 + 130,
                v27 + 24,
                v27 + 40,
                v27 + 142);
      }
      else if (v83 == (CFTypeRef)3)
      {
        v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, const __CFDictionary *, _QWORD, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, _QWORD, _QWORD, CFTypeRef *, unint64_t *, CFTypeRef *))v27[139])(v27[141], v27[137], v72, a16, 0, v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v78, v60, v61, v27 + 56, v27 + 126, v27 + 129,
                v27 + 130,
                v27 + 24,
                v27 + 40,
                v27 + 57,
                a18,
                *((_QWORD *)&a18 + 1),
                v27 + 59,
                a19,
                v27 + 142);
      }
      else
      {
        v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v27[139])(v27[141], v27[137], v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v60, v61, v27 + 56, v27 + 126, v27 + 129, v27 + 130, v27 + 24, v27 + 40, v27 + 142);
      }
      *a20 = v84;
      v85 = (__IOSurface *)v27[57];
      v47 = v109;
      v46 = v110;
      if (v85)
      {
        if ((v86 = v27[131]) == 0 && !v27[133] && !v27[132] && !v27[134]
          || (setIOSurfaceIntValue(v85, CFSTR("ExtendedPixelsLeft"), (int)v86),
              setIOSurfaceIntValue((__IOSurface *)v27[57], CFSTR("ExtendedPixelsRight"), *((_DWORD *)v27 + 264)),
              setIOSurfaceIntValue((__IOSurface *)v27[57], CFSTR("ExtendedPixelsTop"), *((_DWORD *)v27 + 266)),
              setIOSurfaceIntValue((__IOSurface *)v27[57], CFSTR("ExtendedPixelsBottom"), *((_DWORD *)v27 + 268)),
              v27[57]))
        {
          v87 = (const void *)*MEMORY[0x1E0C9AE50];
          if (v87 == CFDictionaryGetValue(v32, CFSTR("IOSurfaceWiringAssertion")))
            *((_DWORD *)v27 + 122) |= 2u;
        }
      }
      if (!*a20)
      {
        if (v27[130])
        {
          if (!v27[57])
          {
            v97 = (char *)v27[56];
            v98 = (const __CFArray *)CFDictionaryGetValue(v108, CFSTR("Planes"));
            if (v27[130])
            {
              v99 = v98;
              v100 = 0;
              v101 = v27 + 62;
              v102 = (unsigned int *)(v97 + 4);
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v99, v100);
                v104 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BitsPerBlock"), 0);
                v105 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("BlockWidth"), 1);
                *v101 = (char *)v27[56] + bswap32(*(v102 - 1));
                v106 = *v102;
                v102 += 2;
                v107 = bswap32(v106);
                v101[16] = v107;
                v101[32] = 8 * (unint64_t)v107 / (v104 / v105);
                v101[48] = v104 / v105;
                ++v100;
                ++v101;
              }
              while (v100 < (unint64_t)v27[130]);
            }
          }
        }
      }
    }
    v88 = v46 / v47;
    if (v47 <= v46)
      v89 = 8 * (uint64_t)v27[126] / v88;
    else
      v89 = 0;
    v27[127] = (CFTypeRef)v89;
    v27[128] = (CFTypeRef)v88;
    if (*a20)
      goto LABEL_41;
    if (!*((_BYTE *)v27 + 1168))
    {
      v90 = *((_DWORD *)v27 + 118);
      v91 = *((_DWORD *)v27 + 122);
      pthread_once(&shouldTraceBackingSummary(void)::once, (void (*)(void))initPixelBufferBackingSummary);
      if (gPixelBufferBackingSummaryBag)
      {
        v92 = (*((uint64_t (**)(CFTypeRef *))*v27 + 34))(v27);
        v93 = (*((uint64_t (**)(CFTypeRef *))*v27 + 35))(v27);
        v94 = (*((uint64_t (**)(CFTypeRef *))*v27 + 24))(v27);
        v95 = (*((uint64_t (**)(CFTypeRef *))*v27 + 38))(v27);
        PoolName = (const __CFString *)CVBufferBacking::getPoolName((CVBufferBacking *)v27);
        addBackingSummaryToGlobalBagAndTrace(v92, v93, v94, v95, v90, v91, PoolName);
      }
      *((_BYTE *)v27 + 1169) = 1;
    }
  }
  else
  {
    v27 = 0;
    *a20 = -6662;
  }
  return v27;
}

uint64_t CVPixelBufferBacking::getPixelFormatType(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], CFSTR("PixelFormat"), 0);
}

uint64_t CVPixelBufferBacking::getHeight(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t CVPixelBufferBacking::getWidth(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 22);
}

const __CFNumber *CVPixelBufferBacking::getPixelFormatDescription(CVPixelBufferBacking *this, const __CFDictionary *a2, unsigned int *a3)
{
  const __CFNumber *result;
  const __CFNumber *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("PixelFormatDescription"));
  if (!result)
  {
    result = (const __CFNumber *)CFDictionaryGetValue(this, CFSTR("PixelFormatType"));
    if (result)
    {
      v6 = result;
      v7 = CFGetTypeID(result);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
        result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(valuePtr);
      }
      else
      {
        v8 = CFGetTypeID(v6);
        if (v8 == CFArrayGetTypeID() && (Count = CFArrayGetCount(v6), Count >= 1))
        {
          v10 = Count;
          for (i = 0; i != v10; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, i);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(valuePtr);
            if (result)
              break;
          }
        }
        else
        {
          result = 0;
        }
      }
    }
  }
  if (a2)
    *(_DWORD *)a2 = valuePtr;
  return result;
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  CFDictionaryRef result;

  result = (CFDictionaryRef)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormat);
  if (result)
    return CFDictionaryCreateCopy(allocator, result);
  return result;
}

const void *CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(unsigned int a1)
{
  const void *Value;

  CVKTraceInit();
  if (!_pixelFormatDictionary)
    pthread_once(&once, _pixelFormatDictionaryInit);
  pthread_mutex_lock(&_pixelFormatMutex);
  Value = CFDictionaryGetValue((CFDictionaryRef)_pixelFormatDictionary, (const void *)a1);
  pthread_mutex_unlock(&_pixelFormatMutex);
  return Value;
}

void CVKTraceInit()
{
  if (initializeOnceToken != -1)
    dispatch_once_f(&initializeOnceToken, 0, (dispatch_function_t)fig_ktrace_initialize);
}

CVBufferBacking *CVBufferBacking::init(CVBufferBacking *this)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), &v3);
  return this;
}

uint64_t CVPixelBufferBacking::getDataSize(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 129);
}

uint64_t _CVPixelBufferStandardMemoryLayout(CVPixelBufferBacking *a1, const __CFAllocator *a2, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6, __CFDictionary *a7, unint64_t a8, __int128 a9, unint64_t a10, __int128 a11, unint64_t a12, __int128 a13, unint64_t *a14, __int128 a15, unint64_t *a16, void **a17, unint64_t *a18, unint64_t *a19, __IOSurface **a20,unint64_t *a21,__CVBuffer *a22,__IOSurface **a23,__IOSurface *a24,__CVBuffer *a25,unsigned int *a26,unint64_t *a27,void **a28)
{
  __CFDictionary **v29;

  return CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(a1, (void *)1, (uint64_t)a2, a3, a4, a6, a6, a7, a8, a9, a10, a11, *((unint64_t *)&a11 + 1), a12, a13, *((unint64_t *)&a13 + 1), a14, (void **)a15, *((unint64_t **)&a15 + 1),
           a16,
           (unint64_t *)a17,
           a18,
           a19,
           a20,
           (__IOSurface *)a21,
           a22,
           (unsigned int *)a23,
           (unint64_t *)a24,
           0,
           v29);
}

IOSurfaceRef IOOrEXSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetWidthOfPlane(buffer, planeIndex);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetHeightOfPlane(buffer, planeIndex);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetElementWidthOfPlane(buffer, planeIndex);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBytesPerElementOfPlane(buffer, planeIndex);
  return buffer;
}

void setIOSurfaceIntValue(__IOSurface *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  IOSurfaceSetValue(a1, a2, v5);
  CFRelease(v5);
}

IOSurfaceRef IOOrEXSurfaceGetWidth(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetWidth(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetHeight(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetHeight(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBytesPerRow(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetPlaneCount(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetPixelFormat(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetAllocSize(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetElementWidth(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetElementHeight(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetBytesPerElement(buffer);
  return buffer;
}

void _CVPixelBufferStandardMemoryDispose(void *a1, CFAllocatorRef allocator, void *a3, CFTypeRef cf, void *ptr)
{
  if (ptr)
    CFAllocatorDeallocate(allocator, ptr);
  if (cf)
    CFRelease(cf);
}

uint64_t CVBunchPair::invokeDestroyBackingkTrace(CVBunchPair *this, CVPixelBufferBacking *a2)
{
  uint64_t v4;
  uint64_t v5;
  __IOSurface *v6;

  if (a2)
  {
    v4 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 160))(a2);
    v5 = *(_QWORD *)a2;
    if (v4)
    {
      v6 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v5 + 160))(a2);
      IOOrEXSurfaceGetID(v6);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v5 + 24))(a2);
    }
  }
  (*(void (**)(CVBunchPair *))(*(_QWORD *)this + 96))(this);
  (*(void (**)(CVBunchPair *))(*(_QWORD *)this + 104))(this);
  return kdebug_trace();
}

const __CFDictionary *CVIsPixelFormatCompressed(unsigned int a1)
{
  const __CFDictionary *result;
  const __CFArray *v2;
  CFTypeID v3;
  const void *ValueAtIndex;
  unint64_t Count;
  uint64_t v6;
  int IntValueWithDefault;
  int v8;

  result = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a1);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("Planes"));
    if (result)
    {
      v2 = result;
      v3 = CFGetTypeID(result);
      if (v3 == CFArrayGetTypeID())
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
        Count = CFArrayGetCount(v2);
        if (Count <= 1)
          v6 = 1;
        else
          v6 = Count;
        while (1)
        {
          IntValueWithDefault = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("CompressionType"), 0);
          v8 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, CFSTR("TiledAddressFormat"), 0);
          if (IntValueWithDefault >= 1)
          {
            if (v8)
              break;
          }
          if (!IntValueWithDefault && v8 == 5)
            break;
          if (!--v6)
            return 0;
        }
        return (const __CFDictionary *)1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
    LOBYTE(CVPixelBuffer) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 312))(CVPixelBuffer[15]);
  return CVPixelBuffer;
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  void *result;

  result = _getCVPixelBuffer(pixelBuffer);
  if (result)
    return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 264))(result, 1);
  return result;
}

CVBufferRef CVBufferRetain(CVBufferRef buffer)
{
  if (buffer)
    CFRetain(buffer);
  return buffer;
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 296))(*(_QWORD *)(result + 120));
  return result;
}

void CVBufferRemoveAllAttachments(CVBufferRef buffer)
{
  _QWORD *CVBuffer;

  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
    (*(void (**)(_QWORD *))(*CVBuffer + 120))(CVBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  size_t result;

  result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 304))(*(_QWORD *)(result + 120));
  return result;
}

Boolean CVBufferHasAttachment(CVBufferRef buffer, CFStringRef key)
{
  _QWORD *CVBuffer;

  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
    LOBYTE(CVBuffer) = (*(uint64_t (**)(_QWORD *, CFStringRef))(*CVBuffer + 88))(CVBuffer, key);
  return CVBuffer;
}

_QWORD *CVPixelBufferGetBufferBacking(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVPixelBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[15] + 24))(result[15]);
  return result;
}

BOOL CVBuffer::hasAttachment(CFDictionaryRef *this, const __CFString *a2)
{
  pthread_mutex_t *v4;
  char v5;
  uint64_t v6;
  char v7;
  const void *Value;
  _BOOL8 v9;

  v4 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = v5;
    Value = CFDictionaryGetValue(this[v6 + 10], a2);
    if (Value)
      break;
    v5 = 1;
    v6 = 1;
  }
  while ((v7 & 1) == 0);
  v9 = Value != 0;
  pthread_mutex_unlock(v4);
  return v9;
}

CVPixelBufferPoolRef CVPixelBufferPoolRetain(CVPixelBufferPoolRef pixelBufferPool)
{
  if (pixelBufferPool)
    CFRetain(pixelBufferPool);
  return pixelBufferPool;
}

uint64_t classInitialize_CVPixelBuffer(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVPixelBufferID = result;
  return result;
}

_QWORD *CVPixelBufferBacking::getExtendedPixels(_QWORD *this, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  if (a2)
    *a2 = this[131];
  if (a3)
    *a3 = this[132];
  if (a4)
    *a4 = this[133];
  if (a5)
    *a5 = this[134];
  return this;
}

void _pixelFormatDictionaryInit(void)
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const void *v5;
  int v6;
  int v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const void *v10;
  int AppBooleanValue;
  char v12;
  const char *v13;
  const char *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const void *v17;
  int v18;
  char v19;
  const char *v20;
  const char *v21;
  int v22;
  int v23;
  const __CFAllocator *v24;
  const CFDictionaryValueCallBacks *v25;
  const __CFDictionary *Mutable;
  __CFArray *v27;
  __CFDictionary *v28;
  int v29;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent8;
  int v31;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent16;
  int v33;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent16Half;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_32ARGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_24RGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16BE555;
  int v38;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16LE565;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16LE5551;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16LE555;
  int v42;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf;
  int v45;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent10;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent12;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent12LSB;
  int v52;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_TwoComponent8;
  int v54;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_TwoComponent16;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_LuminanceAlpha8;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_LuminanceAlpha16;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_FiveComponent16;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_4444YpCbCrA8R;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_4444YpCbCrA8;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_4444AYpCbCr8;
  int v62;
  const char *v63;
  const char *v64;
  int v65;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_4444AYpCbCr16;
  int v67;
  int v68;
  int v69;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_32BGRA;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_64ARGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_48RGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_32AlphaGray;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16Gray;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGBPad2Most;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr8;
  int v78;
  const char *v79;
  const char *v80;
  int v81;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr16;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_4444AYpCbCrFloat;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_14Bayer_GRBG;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_14Bayer_RGGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_14Bayer_BGGR;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_14Bayer_GBRG;
  _BOOL4 v90;
  int v91;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange;
  int v93;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange;
  int v95;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange;
  int v97;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange;
  int v99;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange;
  int v101;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange;
  int v103;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange;
  int v105;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange;
  int v107;
  int v108;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr8Planar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar;
  int v113;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent32Float;
  int v115;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_TwoComponent16Half;
  int v117;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_TwoComponent32Float;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar;
  int v120;
  int v121;
  int v122;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_64RGBAHalf;
  int v124;
  unsigned int v125;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_RGBPlanarHalf;
  int v127;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_128RGBAFloat;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_RGBPlanarFloat;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_ARGB2101010LEPacked;
  int v131;
  int v132;
  int v133;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut;
  int v135;
  unsigned int v136;
  int v137;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_40ARGBLEWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied;
  int v140;
  int v141;
  int v142;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange;
  int v145;
  unsigned int v146;
  int v147;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange;
  int v155;
  unsigned int v156;
  int v157;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange;
  int v160;
  unint64_t v161;
  unsigned int v162;
  int v163;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut;
  __CFDictionary *v165;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange;
  int v168;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange;
  int v176;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange;
  int v180;
  unsigned int v181;
  int v182;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_SpecialPassthrough1;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_SpecialPassthrough2;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_SpecialPassthrough3;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_64RGBALE;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut;
  int v216;
  int v217;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR;
  int v219;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange;
  int v221;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange;
  int v223;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange;
  int v225;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange;
  int v227;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange;
  int v229;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange;
  int v231;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange;
  int v233;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange;
  int v235;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange;
  int v237;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange;
  int v239;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange;
  int v241;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange;
  int v243;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange;
  int v245;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange;
  int v247;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange;
  int v249;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange;
  int v251;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange;
  int v253;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange;
  int v255;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange;
  int v257;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange;
  int v259;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange;
  int v261;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange;
  int v263;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange;
  int v265;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange;
  int v267;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange;
  int v269;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange;
  int v271;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange;
  int v273;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange;
  int v275;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange;
  int v277;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange;
  int v279;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange;
  int v281;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange;
  int v283;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange;
  int v285;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange;
  int v287;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange;
  int v289;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange;
  int v291;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange;
  int v293;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange;
  int v295;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange;
  int v297;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange;
  int v299;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange;
  int v301;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange;
  int v303;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange;
  int v305;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal;
  int v307;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal;
  int v309;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal;
  int v311;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_16LE565;
  int v313;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX;
  int v315;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX;
  int v317;
  int v318;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange;
  int v320;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal;
  int v322;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal;
  int v324;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal;
  int v326;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal;
  int v328;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal;
  int v330;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal;
  int v332;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal;
  int v334;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal;
  int v336;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal;
  int v338;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange;
  int v340;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange;
  int v342;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange;
  int v344;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange;
  int v346;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange;
  int v348;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange;
  int v350;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange;
  int v352;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange;
  int v354;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange;
  int v356;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange;
  int v358;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange;
  int v360;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange;
  int v362;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange;
  int v364;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange;
  int v366;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange;
  int v368;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange;
  int v370;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange;
  int v372;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange;
  int v374;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange;
  int v376;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange;
  int v378;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange;
  int v380;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange;
  int v382;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange;
  int v384;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange;
  int v386;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange;
  int v388;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent16;
  int v390;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent16Half;
  int v392;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half;
  int v394;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked;
  int v396;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar;
  int v398;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar;
  int v400;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent12;
  int v402;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_TwoComponent8;
  int v404;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar;
  int v406;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar;
  int v408;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar;
  int v410;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar;
  int v412;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar;
  int v414;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar;
  int v416;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar;
  int v418;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar;
  int v420;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar;
  int v422;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar;
  int v424;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar;
  int v426;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar;
  int v428;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange;
  int v430;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange;
  int v432;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange;
  int v434;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange;
  int v436;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange;
  int v438;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray;
  int v440;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8;
  int v442;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8;
  const char *v444;
  uint64_t v445;
  int v446;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX;
  int v448;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX;
  int v450;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX;
  int v452;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX;
  int v454;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX;
  int v456;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX;
  int v458;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX;
  int v460;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX;
  int v462;
  int v463;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half;
  int v465;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half;
  int v467;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange;
  int v469;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange;
  int v471;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange;
  int v473;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange;
  int v475;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange;
  int v477;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange;
  int v479;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange;
  int v481;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange;
  int v483;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange;
  int v485;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange;
  int v487;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange;
  int v489;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange;
  int v491;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange;
  int v493;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange;
  int v495;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange;
  int v497;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange;
  int v499;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange;
  int v501;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange;
  int v503;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange;
  int v505;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange;
  int v507;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange;
  int v509;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_32BGRA;
  int v511;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_32BGRA;
  int v513;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_32BGRA;
  int v515;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half;
  int v517;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half;
  int v519;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half;
  int v521;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_OneComponent8;
  int v523;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_OneComponent8;
  int v525;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_OneComponent8;
  int v527;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8;
  int v529;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8;
  int v531;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half;
  int v533;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half;
  int v535;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half;
  int v537;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf;
  int v539;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf;
  int v541;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf;
  int v543;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray;
  int v545;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray;
  int v547;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray;
  int v549;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar;
  int v551;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange;
  int v554;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar;
  int v556;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar;
  int v558;
  int v559;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar;
  int v561;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar;
  int v563;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar;
  int v565;
  int v566;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar;
  int v568;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar;
  int v570;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar;
  int v572;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar;
  int v574;
  int v575;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange;
  int v577;
  int v578;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange;
  int v580;
  int v581;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange;
  int v583;
  int v584;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange;
  int v586;
  int v587;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange;
  int v589;
  int v590;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16VersatileBayer;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_48RGBLE;
  int v609;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_40ARGBLEFullRange;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_OneComponent1;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_1VersatileSensel;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_12RGBPacked_R12B;
  int v616;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3;
  int v618;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5;
  int v620;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_FixedPointSigned7_5;
  int v622;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_DisparityFloat16;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_DepthFloat16;
  int v625;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_DisparityFloat32;
  CFNumberRef v627;
  const __CFDictionary *PixelFormat_kCVPixelFormatType_DepthFloat32;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  __CFDictionary *theDict;
  Boolean keyExistsAndHasValidFormat[4];
  const char *v636;
  uint64_t v637;

  v637 = *MEMORY[0x1E0C80C00];
  if ((areHTPCFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        v1 = v0;
        v2 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v2 == CFDictionaryGetValue(v0, CFSTR("media-compression")))
          areHTPCFormatsSupported(void)::result = 1;
        CFRelease(v1);
      }
      areHTPCFormatsSupported(void)::didCheck = 1;
    }
  }
  v629 = areHTPCFormatsSupported(void)::result;
  if ((areAGXFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v3 = (const __CFDictionary *)MGCopyAnswer();
      if (v3)
      {
        v4 = v3;
        v5 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v5 == CFDictionaryGetValue(v3, CFSTR("buffer-compression")))
          areAGXFormatsSupported(void)::result = 1;
        if (v5 == CFDictionaryGetValue(v4, CFSTR("universal-buffer-compression")))
          areAGXFormatsSupported(void)::result = 1;
        CFRelease(v4);
      }
      areAGXFormatsSupported(void)::didCheck = 1;
    }
  }
  v6 = areAGXFormatsSupported(void)::result;
  v7 = areUniversalCompressionFormatsSupported();
  v632 = areUniversalLossyCompressionFormatsSupported();
  if ((areUniversalMultiSliceFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v8 = (const __CFDictionary *)MGCopyAnswer();
      if (v8)
      {
        v9 = v8;
        v10 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v10 == CFDictionaryGetValue(v8, CFSTR("universal-multislice-buffer-compression")))
          areUniversalMultiSliceFormatsSupported(void)::result = 1;
        CFRelease(v9);
      }
      if (!areUniversalMultiSliceFormatsSupported(void)::result)
      {
        keyExistsAndHasValidFormat[0] = 0;
        AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("universal-multislice-buffer-compression"), CFSTR("com.apple.corevideo"), keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat[0])
        {
          v12 = AppBooleanValue;
          v13 = "enable";
          if (!AppBooleanValue)
            v13 = "disable";
          v14 = "YES";
          if (!AppBooleanValue)
            v14 = "NO";
          syslog(3, "CoreVideo: Will %s universal multi-slice buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-multislice-buffer-compression -BOOL %s\"\n", v13, v14);
          areUniversalMultiSliceFormatsSupported(void)::result = v12;
        }
      }
      areUniversalMultiSliceFormatsSupported(void)::didCheck = 1;
    }
  }
  v631 = areUniversalMultiSliceFormatsSupported(void)::result;
  if ((areUniversalpARGB10101010FormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      v15 = (const __CFDictionary *)MGCopyAnswer();
      if (v15)
      {
        v16 = v15;
        v17 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v17 == CFDictionaryGetValue(v15, CFSTR("universal-pARGB10101010-buffer-compression")))
          areUniversalpARGB10101010FormatsSupported(void)::result = 1;
        CFRelease(v16);
      }
      if (!areUniversalpARGB10101010FormatsSupported(void)::result)
      {
        keyExistsAndHasValidFormat[0] = 0;
        v18 = CFPreferencesGetAppBooleanValue(CFSTR("universal-pARGB10101010-buffer-compression"), CFSTR("com.apple.corevideo"), keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat[0])
        {
          v19 = v18;
          v20 = "enable";
          if (!v18)
            v20 = "disable";
          v21 = "YES";
          if (!v18)
            v21 = "NO";
          syslog(3, "CoreVideo: Will %s universal pARGB10101010 buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-pARGB10101010-buffer-compression -BOOL %s\"\n", v20, v21);
          areUniversalpARGB10101010FormatsSupported(void)::result = v19;
        }
      }
      areUniversalpARGB10101010FormatsSupported(void)::didCheck = 1;
    }
  }
  v630 = areUniversalpARGB10101010FormatsSupported(void)::result;
  v22 = v6 ^ 1;
  if (v7)
    v22 = 1;
  v633 = v22;
  if (arePackedFormatsSupported(void)::didCheck == 1)
  {
    v23 = arePackedFormatsSupported(void)::result;
  }
  else
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1)
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    v23 = isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine == 0;
    arePackedFormatsSupported(void)::result = isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine == 0;
    arePackedFormatsSupported(void)::didCheck = 1;
  }
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v25 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 400, 0, MEMORY[0x1E0C9B3A0]);
  v27 = CFArrayCreateMutable(v24, 400, MEMORY[0x1E0C9B378]);
  v28 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], v25);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v29 = sGlobalVariantBitfield;
      goto LABEL_69;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v29 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_69:
  PixelFormat_kCVPixelFormatType_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent8(v29);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent8, "kCVPixelFormatType_OneComponent8", (void *)0x4C303038, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v31 = sGlobalVariantBitfield;
      goto LABEL_74;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v31 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_74:
  PixelFormat_kCVPixelFormatType_OneComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent16(v31);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent16, "kCVPixelFormatType_OneComponent16", (void *)0x4C303136, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v33 = sGlobalVariantBitfield;
      goto LABEL_79;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v33 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_79:
  PixelFormat_kCVPixelFormatType_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent16Half(v33);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent16Half, "kCVPixelFormatType_OneComponent16Half", (void *)0x4C303068, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_32ARGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32ARGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32ARGB, "kCVPixelFormatType_32ARGB", (void *)0x20, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_24RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_24RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_24RGB, "kCVPixelFormatType_24RGB", (void *)0x18, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_16BE555 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16BE555(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16BE555, "kCVPixelFormatType_16BE555", (void *)0x10, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v38 = sGlobalVariantBitfield;
      goto LABEL_84;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v38 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_84:
  PixelFormat_kCVPixelFormatType_16LE565 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE565(v38);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE565, "kCVPixelFormatType_16LE565", (void *)0x4C353635, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16LE5551 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE5551(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE5551, "kCVPixelFormatType_16LE5551", (void *)0x35353531, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16LE555 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE555(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE555, "kCVPixelFormatType_16LE555", (void *)0x4C353535, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v42 = sGlobalVariantBitfield;
      goto LABEL_89;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v42 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_89:
  PixelFormat_kCVPixelFormatType_422YpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8(v42);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8, "kCVPixelFormatType_422YpCbCr8", (void *)0x32767579, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf, "kCVPixelFormatType_422YpCbCr8FullRange_2vuf", (void *)0x32767566, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v45 = sGlobalVariantBitfield;
      goto LABEL_94;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v45 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_94:
  PixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs(v45);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs, "kCVPixelFormatType_422YpCbCr8_yuvs", (void *)0x79757673, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange, "kCVPixelFormatType_422YpCbCr8FullRange", (void *)0x79757666, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero, "kCVPixelFormatType_8IndexedGray_WhiteIsZero", (void *)0x28, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  PixelFormat_kCVPixelFormatType_OneComponent10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent10, "kCVPixelFormatType_OneComponent10", (void *)0x4C303130, Mutable, v27);
  PixelFormat_kCVPixelFormatType_OneComponent12 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent12(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent12, "kCVPixelFormatType_OneComponent12", (void *)0x4C303132, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  PixelFormat_kCVPixelFormatType_OneComponent12LSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent12LSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent12LSB, "kCVPixelFormatType_OneComponent12LSB", (void *)0x4C31324C, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v52 = sGlobalVariantBitfield;
      goto LABEL_99;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v52 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_99:
  PixelFormat_kCVPixelFormatType_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent8(v52);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent8, "kCVPixelFormatType_TwoComponent8", (void *)0x32433038, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v54 = sGlobalVariantBitfield;
      goto LABEL_104;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v54 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_104:
  PixelFormat_kCVPixelFormatType_TwoComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent16(v54);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent16, "kCVPixelFormatType_TwoComponent16", (void *)0x32433136, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_LuminanceAlpha8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_LuminanceAlpha8, "kCVPixelFormatType_LuminanceAlpha8", (void *)0x4C413038, Mutable, v27);
  PixelFormat_kCVPixelFormatType_LuminanceAlpha16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_LuminanceAlpha16, "kCVPixelFormatType_LuminanceAlpha16", (void *)0x4C413136, Mutable, v27);
  PixelFormat_kCVPixelFormatType_FiveComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FiveComponent16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FiveComponent16, "kCVPixelFormatType_FiveComponent16", (void *)0x35433136, Mutable, v27);
  PixelFormat_kCVPixelFormatType_4444YpCbCrA8R = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8R(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444YpCbCrA8R, "kCVPixelFormatType_4444YpCbCrA8R", (void *)0x72343038, Mutable, v27);
  PixelFormat_kCVPixelFormatType_4444YpCbCrA8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444YpCbCrA8, "kCVPixelFormatType_4444YpCbCrA8", (void *)0x76343038, Mutable, v27);
  PixelFormat_kCVPixelFormatType_4444AYpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCr8, "kCVPixelFormatType_4444AYpCbCr8", (void *)0x79343038, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((shouldSupporty416ForCoreAnimation(void)::sDidCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v62 = CFPreferencesGetAppBooleanValue(CFSTR("support_ca_y416"), CFSTR("com.apple.corevideo"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      shouldSupporty416ForCoreAnimation(void)::sShouldSupport16Bit = v62;
      v63 = "enable";
      if (!v62)
        v63 = "disable";
      v64 = "yes";
      if (!v62)
        v64 = "no";
      syslog(3, "CoreVideo: Will %s (y416) YCbCr 16 bit support for CoreAnimation -- thank you for setting \"defaults write com.apple.corevideo support_ca_y416 -BOOL %s\"\n", v63, v64);
    }
    shouldSupporty416ForCoreAnimation(void)::sDidCheck = 1;
  }
  v65 = sGlobalVariantBitfield;
  if (shouldSupporty416ForCoreAnimation(void)::sShouldSupport16Bit)
  {
    v65 = sGlobalVariantBitfield | 1;
    sGlobalVariantBitfield |= 1u;
  }
  PixelFormat_kCVPixelFormatType_4444AYpCbCr16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr16(v65);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCr16, "kCVPixelFormatType_4444AYpCbCr16", (void *)0x79343136, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v67 = sGlobalVariantBitfield;
      goto LABEL_119;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v67 = sGlobalVariantBitfield | 1;
LABEL_119:
  sGlobalVariantBitfield = v67 | 0x10;
  v68 = areHTPCFormatsSupportedByCA();
  v69 = sGlobalVariantBitfield;
  if (v68)
  {
    v69 = sGlobalVariantBitfield | 0x20;
    sGlobalVariantBitfield |= 0x20u;
  }
  PixelFormat_kCVPixelFormatType_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32BGRA(v69);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32BGRA, "kCVPixelFormatType_32BGRA", (void *)0x42475241, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_64ARGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64ARGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64ARGB, "kCVPixelFormatType_64ARGB", (void *)0x62363461, Mutable, v27);
  PixelFormat_kCVPixelFormatType_48RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_48RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_48RGB, "kCVPixelFormatType_48RGB", (void *)0x62343872, Mutable, v27);
  PixelFormat_kCVPixelFormatType_32AlphaGray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32AlphaGray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32AlphaGray, "kCVPixelFormatType_32AlphaGray", (void *)0x62333261, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16Gray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16Gray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16Gray, "kCVPixelFormatType_16Gray", (void *)0x62313667, Mutable, v27);
  PixelFormat_kCVPixelFormatType_30RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGB, "kCVPixelFormatType_30RGB", (void *)0x5231306B, Mutable, v27);
  PixelFormat_kCVPixelFormatType_30RGBPad2Most = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBPad2Most(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBPad2Most, "kCVPixelFormatType_30RGBPad2Most", (void *)0x72323130, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8, "kCVPixelFormatType_444YpCbCr8", (void *)0x76333038, Mutable, v27);
  if ((shouldSupportv216ForCoreAnimation(void)::sDidCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat[0] = 0;
    v78 = CFPreferencesGetAppBooleanValue(CFSTR("support_ca_v216"), CFSTR("com.apple.corevideo"), keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      shouldSupportv216ForCoreAnimation(void)::sShouldSupport16Bit = v78;
      v79 = "enable";
      if (!v78)
        v79 = "disable";
      v80 = "yes";
      if (!v78)
        v80 = "no";
      syslog(3, "CoreVideo: Will %s (v216) YCbCr 16 bit 4:2:2 support for CoreAnimation -- thank you for setting \"defaults write com.apple.corevideo support_ca_v216 -BOOL %s\"\n", v79, v80);
    }
    shouldSupportv216ForCoreAnimation(void)::sDidCheck = 1;
  }
  v81 = sGlobalVariantBitfield;
  theDict = v28;
  if (shouldSupportv216ForCoreAnimation(void)::sShouldSupport16Bit)
  {
    v81 = sGlobalVariantBitfield | 1;
    sGlobalVariantBitfield |= 1u;
  }
  PixelFormat_kCVPixelFormatType_422YpCbCr16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16(v81);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16, "kCVPixelFormatType_422YpCbCr16", (void *)0x76323136, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_422YpCbCr10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10, "kCVPixelFormatType_422YpCbCr10", (void *)0x76323130, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  PixelFormat_kCVPixelFormatType_444YpCbCr10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10, "kCVPixelFormatType_444YpCbCr10", (void *)0x76343130, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_4444AYpCbCrFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCrFloat(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCrFloat, "kCVPixelFormatType_4444AYpCbCrFloat", (void *)0x7234666C, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_14Bayer_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_GRBG, "kCVPixelFormatType_14Bayer_GRBG", (void *)0x67726234, Mutable, v27);
  PixelFormat_kCVPixelFormatType_14Bayer_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_RGGB, "kCVPixelFormatType_14Bayer_RGGB", (void *)0x72676734, Mutable, v27);
  PixelFormat_kCVPixelFormatType_14Bayer_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_BGGR, "kCVPixelFormatType_14Bayer_BGGR", (void *)0x62676734, Mutable, v27);
  PixelFormat_kCVPixelFormatType_14Bayer_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_GBRG, "kCVPixelFormatType_14Bayer_GBRG", (void *)0x67627234, Mutable, v27);
  v90 = CFPreferencesGetAppBooleanValue(CFSTR("disable_420"), CFSTR("com.apple.corevideo"), 0) == 0;
  v91 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(0, v90);
  PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange(v91);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange", (void *)0x34323076, Mutable, v27);
  v93 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(0, v90);
  PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange(v93);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr8BiPlanarFullRange", (void *)0x34323066, Mutable, v27);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) != 0)
      v95 = 0x80000;
    else
      v95 = 0;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v95 = 0x80000;
  }
  PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange(v95);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange", (void *)0x34313176, Mutable, v27);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) != 0)
      v97 = 0x80000;
    else
      v97 = 0;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v97 = 0x80000;
  }
  PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange(v97);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_411YpCbCr8BiPlanarFullRange", (void *)0x34313166, Mutable, v27);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) != 0)
      v99 = 0x80000;
    else
      v99 = 0;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v99 = 0x80000;
  }
  PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange(v99);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange", (void *)0x34323276, Mutable, v27);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) != 0)
      v101 = 0x80000;
    else
      v101 = 0;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v101 = 0x80000;
  }
  PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange(v101);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr8BiPlanarFullRange", (void *)0x34323266, Mutable, v27);
  v103 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(2, 1);
  PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange(v103);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange", (void *)0x34343476, Mutable, v27);
  v105 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(2, 1);
  PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange(v105);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr8BiPlanarFullRange", (void *)0x34343466, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v107 = 196608;
  else
    v107 = 0x10000;
  v108 = v107 | 0x80000;
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
      v108 = v107;
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  PixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar(v108);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76306138, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr8Planar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8Planar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8Planar, "kCVPixelFormatType_420YpCbCr8Planar", (void *)0x79343230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange, "kCVPixelFormatType_420YpCbCr8PlanarFullRange", (void *)0x66343230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar, "kCVPixelFormatType_422YpCbCr_4A_8BiPlanar", (void *)0x61327679, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v113 = sGlobalVariantBitfield;
      goto LABEL_163;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v113 = sGlobalVariantBitfield | 2;
LABEL_163:
  sGlobalVariantBitfield = v113 | 4;
  PixelFormat_kCVPixelFormatType_OneComponent32Float = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent32Float(v113 | 4u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent32Float, "kCVPixelFormatType_OneComponent32Float", (void *)0x4C303066, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v115 = sGlobalVariantBitfield;
      goto LABEL_168;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v115 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_168:
  PixelFormat_kCVPixelFormatType_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent16Half(v115);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent16Half, "kCVPixelFormatType_TwoComponent16Half", (void *)0x32433068, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v117 = sGlobalVariantBitfield;
      goto LABEL_173;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v117 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_173:
  PixelFormat_kCVPixelFormatType_TwoComponent32Float = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent32Float(v117);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent32Float, "kCVPixelFormatType_TwoComponent32Float", (void *)0x32433066, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar, "kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar", (void *)0x32314368, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v120 = sGlobalVariantBitfield;
      goto LABEL_178;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v120 = sGlobalVariantBitfield | 8;
LABEL_178:
  sGlobalVariantBitfield = v120 | 0x10;
  v121 = areHTPCFormatsSupportedByCA();
  v122 = sGlobalVariantBitfield;
  if (v121)
  {
    v122 = sGlobalVariantBitfield | 0x20;
    sGlobalVariantBitfield |= 0x20u;
  }
  PixelFormat_kCVPixelFormatType_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBAHalf(v122);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBAHalf, "kCVPixelFormatType_64RGBAHalf", (void *)0x52476841, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  sGlobalVariantBitfield |= 1u;
  v124 = areHTPCFormatsSupportedByCA();
  v125 = sGlobalVariantBitfield;
  if (v124)
  {
    v125 = sGlobalVariantBitfield | 2;
    sGlobalVariantBitfield |= 2u;
  }
  PixelFormat_kCVPixelFormatType_RGBPlanarHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_RGBPlanarHalf(v125);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_RGBPlanarHalf, "kCVPixelFormatType_RGBPlanarHalf", (void *)0x72673368, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      v127 = sGlobalVariantBitfield;
      goto LABEL_187;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v127 = sGlobalVariantBitfield | 8;
LABEL_187:
  sGlobalVariantBitfield = v127 | 0x20;
  PixelFormat_kCVPixelFormatType_128RGBAFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_128RGBAFloat(v127 | 0x20u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_128RGBAFloat, "kCVPixelFormatType_128RGBAFloat", (void *)0x52476641, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_RGBPlanarFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_RGBPlanarFloat(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_RGBPlanarFloat, "kCVPixelFormatType_RGBPlanarFloat", (void *)0x72673366, Mutable, v27);
  PixelFormat_kCVPixelFormatType_ARGB2101010LEPacked = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_ARGB2101010LEPacked(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_ARGB2101010LEPacked, "kCVPixelFormatType_ARGB2101010LEPacked", (void *)0x6C313072, Mutable, v27);
  if (isCoreAnimation_10BitRGBCapable(void)::didCheck == 1)
  {
    v131 = isCoreAnimation_10BitRGBCapable(void)::result;
  }
  else
  {
    v131 = MGGetBoolAnswer();
    isCoreAnimation_10BitRGBCapable(void)::result = v131;
    isCoreAnimation_10BitRGBCapable(void)::didCheck = 1;
  }
  v132 = sGlobalVariantBitfield;
  if (v131)
  {
    sGlobalVariantBitfield |= 4u;
    v133 = areHTPCFormatsSupportedByCA();
    v132 = sGlobalVariantBitfield;
    if (v133)
    {
      v132 = sGlobalVariantBitfield | 8;
      sGlobalVariantBitfield |= 8u;
    }
  }
  PixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut(v132);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut, "kCVPixelFormatType_30RGBLEPackedWideGamut", (void *)0x77333072, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v135 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v135 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v135;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v136 = sGlobalVariantBitfield;
  if (v135)
  {
    sGlobalVariantBitfield |= 1u;
    v137 = areHTPCFormatsSupportedByCA();
    v136 = sGlobalVariantBitfield;
    if (v137)
    {
      v136 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  PixelFormat_kCVPixelFormatType_40ARGBLEWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamut(v136);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEWideGamut, "kCVPixelFormatType_40ARGBLEWideGamut", (void *)0x77343061, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied, "kCVPixelFormatType_40ARGBLEWideGamutPremultiplied", (void *)0x7734306D, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) == 0)
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    goto LABEL_203;
  }
  if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES == 1)
LABEL_203:
    sGlobalVariantBitfield |= 4u;
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v140 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v140 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v140;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v141 = sGlobalVariantBitfield;
  if (v140)
  {
    sGlobalVariantBitfield |= 8u;
    v142 = areHTPCFormatsSupportedByCA();
    v141 = sGlobalVariantBitfield;
    if (v142)
    {
      v141 = sGlobalVariantBitfield | 0x10;
      sGlobalVariantBitfield |= 0x10u;
    }
  }
  PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange(v141);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange", (void *)0x78343230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr10BiPlanarFullRange", (void *)0x78663230, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v145 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v145 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v145;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v146 = sGlobalVariantBitfield;
  if (v145)
  {
    sGlobalVariantBitfield |= 1u;
    v147 = areHTPCFormatsSupportedByCA();
    v146 = sGlobalVariantBitfield;
    if (v147)
    {
      v146 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange(v146);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange", (void *)0x78343232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange", (void *)0x78343434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut", (void *)0x78773230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut", (void *)0x78773232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut", (void *)0x78773434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr10BiPlanarFullRange", (void *)0x78663232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr10BiPlanarFullRange", (void *)0x78663434, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v155 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v155 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v155;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v156 = sGlobalVariantBitfield;
  if (v155)
  {
    sGlobalVariantBitfield |= 2u;
    v157 = areHTPCFormatsSupportedByCA();
    v156 = sGlobalVariantBitfield;
    if (v157)
    {
      v156 = sGlobalVariantBitfield | 4;
      sGlobalVariantBitfield |= 4u;
    }
  }
  PixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange(v156);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange, "kCVPixelFormatType_444YpCbCr10PackedVideoRange", (void *)0x78343470, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange, "kCVPixelFormatType_444YpCbCr10PackedFullRange", (void *)0x78663470, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v160 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v160 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v160;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v161 = 0x1ECDE8000;
  v162 = sGlobalVariantBitfield;
  if (v160)
  {
    sGlobalVariantBitfield |= 2u;
    v163 = areHTPCFormatsSupportedByCA();
    v162 = sGlobalVariantBitfield;
    if (v163)
    {
      v162 = sGlobalVariantBitfield | 4;
      sGlobalVariantBitfield |= 4u;
    }
  }
  PixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut(v162);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut, "kCVPixelFormatType_444YpCbCr10PackedWideGamut", (void *)0x78773470, Mutable, v27);
  v165 = theDict;
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange, "kCVPixelFormatType_422YpCbCr10PackedVideoRange", (void *)0x78323270, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  PixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange, "kCVPixelFormatType_422YpCbCr10PackedFullRange", (void *)0x78663270, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v168 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v168 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v168;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  if (v168)
  {
    sGlobalVariantBitfield |= 1u;
    if (areHTPCFormatsSupportedByCA())
      sGlobalVariantBitfield |= 2u;
  }
  if (v23)
  {
    PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343230, Mutable, v27);
    PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343232, Mutable, v27);
    PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343434, Mutable, v27);
    PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange", (void *)0x70663230, Mutable, v27);
    PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange", (void *)0x70663232, Mutable, v27);
    PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange", (void *)0x70663434, Mutable, v27);
    cleanupContentsOfArrayOfVariants();
    PixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange, "kCVPixelFormatType_400YpCbCr10PackedVideoRange", (void *)0x70343030, Mutable, v27);
  }
  else
  {
    cleanupContentsOfArrayOfVariants();
  }
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    if (!isCoreAnimation_10BitYCbCrCapable(void)::result)
      goto LABEL_243;
  }
  else
  {
    v176 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v176;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
    if (!v176)
      goto LABEL_243;
  }
  sGlobalVariantBitfield |= 1u;
  if (areHTPCFormatsSupportedByCA())
    sGlobalVariantBitfield |= 2u;
LABEL_243:
  if (v23)
  {
    PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange", (void *)0x70773230, Mutable, v27);
    PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange", (void *)0x70773232, Mutable, v27);
    PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange", (void *)0x70773434, Mutable, v27);
  }
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    v180 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    v180 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::result = v180;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  v181 = sGlobalVariantBitfield;
  if (v180)
  {
    sGlobalVariantBitfield |= 1u;
    v182 = areHTPCFormatsSupportedByCA();
    v181 = sGlobalVariantBitfield;
    if (v182)
    {
      v181 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  PixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar(v181);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar, "kCVPixelFormatType_30RGBLE_8A_BiPlanar", (void *)0x62336138, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR, "kCVPixelFormatType_160BayerPacked10_BGGR", (void *)0x62677030, Mutable, v27);
  PixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG, "kCVPixelFormatType_160BayerPacked10_GRBG", (void *)0x67727030, Mutable, v27);
  PixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB, "kCVPixelFormatType_160BayerPacked10_RGGB", (void *)0x72677030, Mutable, v27);
  PixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG, "kCVPixelFormatType_160BayerPacked10_GBRG", (void *)0x67627030, Mutable, v27);
  PixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR, "kCVPixelFormatType_96BayerPacked12_BGGR", (void *)0x62677032, Mutable, v27);
  PixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR, "kCVPixelFormatType_224BayerPacked14_BGGR", (void *)0x62677034, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR, "kCVPixelFormatType_12BayerCompandedIn8_BGGR", (void *)0x62676338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG, "kCVPixelFormatType_12BayerCompandedIn8_GRBG", (void *)0x67726338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB, "kCVPixelFormatType_12BayerCompandedIn8_RGGB", (void *)0x72676338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG, "kCVPixelFormatType_12BayerCompandedIn8_GBRG", (void *)0x67626338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_SpecialPassthrough1 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough1(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough1, "kCVPixelFormatType_SpecialPassthrough1", (void *)0x3D3D3D31, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  PixelFormat_kCVPixelFormatType_SpecialPassthrough2 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough2(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough2, "kCVPixelFormatType_SpecialPassthrough2", (void *)0x3D3D3D32, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  PixelFormat_kCVPixelFormatType_SpecialPassthrough3 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough3(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough3, "kCVPixelFormatType_SpecialPassthrough3", (void *)0x3D3D3D33, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  PixelFormat_kCVPixelFormatType_64RGBALE = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBALE(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBALE, "kCVPixelFormatType_64RGBALE", (void *)0x6C363472, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((isCoreAnimation_12BitYCbCrCapable(void)::didCheck & 1) == 0)
    isCoreAnimation_12BitYCbCrCapable(void)::didCheck = 1;
  PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange", (void *)0x74763230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange", (void *)0x74763232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange", (void *)0x74763434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr12BiPlanarFullRange", (void *)0x74663230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr12BiPlanarFullRange", (void *)0x74663232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr12BiPlanarFullRange", (void *)0x74663434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut", (void *)0x74773230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut", (void *)0x74773232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut", (void *)0x74773434, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if ((isCoreAnimation_12BitYCbCrCapable(void)::didCheck & 1) == 0)
    isCoreAnimation_12BitYCbCrCapable(void)::didCheck = 1;
  PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747630, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747632, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747634, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange", (void *)0x70746630, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange", (void *)0x70746632, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange", (void *)0x70746634, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747730, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747732, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747734, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (v7)
    v216 = 1;
  else
    v216 = v629;
  if (v216 == 1)
  {
    v217 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatLumaOnlyCompressed, 1);
    PixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR(v217);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR, "kCVPixelFormatType_HTPC128x1_14Bayer_BGGR", (void *)0x7B626734, Mutable, v27);
  }
  if (v629)
  {
    v219 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange(v219);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange", (void *)0x7D387630, Mutable, v27);
    v221 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange(v221);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange", (void *)0x7D386630, Mutable, v27);
    v223 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange(v223);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange", (void *)0x7D387632, Mutable, v27);
    v225 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange(v225);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange", (void *)0x7D386632, Mutable, v27);
    v227 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange(v227);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange", (void *)0x7D787630, Mutable, v27);
    v229 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange(v229);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange", (void *)0x7D786630, Mutable, v27);
    v231 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange(v231);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange", (void *)0x7D787730, Mutable, v27);
    v233 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange(v233);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange", (void *)0x7D787632, Mutable, v27);
    v235 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange(v235);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange", (void *)0x7D786632, Mutable, v27);
    v237 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange(v237);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange", (void *)0x7D787732, Mutable, v27);
    v239 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange(v239);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange", (void *)0x7D787634, Mutable, v27);
    v241 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange(v241);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange", (void *)0x7D786634, Mutable, v27);
    v243 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange(v243);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange", (void *)0x7D787734, Mutable, v27);
    v245 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange(v245);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange", (void *)0x5D387630, Mutable, v27);
    v247 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange(v247);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange", (void *)0x5D387632, Mutable, v27);
    v249 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange(v249);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange", (void *)0x5D387634, Mutable, v27);
    v251 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange(v251);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange", (void *)0x5D386630, Mutable, v27);
    v253 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange(v253);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange", (void *)0x5D386632, Mutable, v27);
    v255 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange(v255);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange", (void *)0x5D386634, Mutable, v27);
    v257 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange(v257);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange", (void *)0x5D787630, Mutable, v27);
    v259 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange(v259);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange", (void *)0x5D787632, Mutable, v27);
    v261 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange(v261);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange", (void *)0x5D787634, Mutable, v27);
    v263 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange(v263);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange", (void *)0x5D786630, Mutable, v27);
    v265 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange(v265);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange", (void *)0x5D786632, Mutable, v27);
    v165 = theDict;
    v161 = 0x1ECDE8000;
    v267 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange(v267);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange", (void *)0x5D786634, Mutable, v27);
    v269 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange(v269);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange", (void *)0x5B387630, Mutable, v27);
    v271 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange(v271);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange", (void *)0x5B387632, Mutable, v27);
    v273 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange(v273);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange", (void *)0x5B387634, Mutable, v27);
    v275 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange(v275);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange", (void *)0x5B386630, Mutable, v27);
    v277 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange(v277);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange", (void *)0x5B386632, Mutable, v27);
    v279 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange(v279);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange", (void *)0x5B386634, Mutable, v27);
    v281 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 18);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange(v281);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange", (void *)0x5B787630, Mutable, v27);
    v283 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange(v283);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange", (void *)0x5B787632, Mutable, v27);
    v285 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange(v285);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange", (void *)0x5B787634, Mutable, v27);
    v287 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 18);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange(v287);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange", (void *)0x5B786630, Mutable, v27);
    v289 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange(v289);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange", (void *)0x5B786632, Mutable, v27);
    v291 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange(v291);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange", (void *)0x5B786634, Mutable, v27);
    v293 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange(v293);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange", (void *)0x5B747630, Mutable, v27);
    v295 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange(v295);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange", (void *)0x5B747632, Mutable, v27);
    v297 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange(v297);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange", (void *)0x5B747634, Mutable, v27);
    v299 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange(v299);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange", (void *)0x5B746630, Mutable, v27);
    v301 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange(v301);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange", (void *)0x5B746632, Mutable, v27);
    v303 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange(v303);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange", (void *)0x5B746634, Mutable, v27);
  }
  if (v633)
  {
    if (!v7)
      goto LABEL_267;
    v305 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal(v305);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal, "kCVPixelFormatType_AGX_32BGRA", (void *)0x26424741, Mutable, v27);
    v307 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal(v307);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal, "kCVPixelFormatType_AGX_30RGBLEPackedWideGamut", (void *)0x26773372, Mutable, v27);
    v309 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal(v309);
  }
  else
  {
    v311 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 1);
    PixelFormat_kCVPixelFormatType_AGX_16LE565 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_16LE565(v311);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_16LE565, "kCVPixelFormatType_AGX_16LE565", (void *)0x264C3536, Mutable, v27);
    v313 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    PixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX(v313);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX, "kCVPixelFormatType_AGX_32BGRA", (void *)0x26424741, Mutable, v27);
    v315 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX(v315);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX, "kCVPixelFormatType_AGX_30RGBLEPackedWideGamut", (void *)0x26773372, Mutable, v27);
    v317 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_AGX(v317);
  }
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal, "kCVPixelFormatType_AGX_40ARGBLEWideGamut", (void *)0x26773461, Mutable, v27);
LABEL_267:
  if (v630)
  {
    v318 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange(v318);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange, "kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange", (void *)0x266C3461, Mutable, v27);
  }
  if (v633)
  {
    if (!v7)
      goto LABEL_274;
    v320 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal(v320);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal, "kCVPixelFormatType_AGX_OneComponent8", (void *)0x264C3038, Mutable, v27);
    v322 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal(v322);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal, "kCVPixelFormatType_AGX_OneComponent10", (void *)0x264C3130, Mutable, v27);
    v324 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal(v324);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal, "kCVPixelFormatType_AGX_64RGBAHalf", (void *)0x26526841, Mutable, v27);
    v326 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal(v326);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange", (void *)0x26387630, Mutable, v27);
    v328 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal(v328);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange", (void *)0x26387632, Mutable, v27);
    v330 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal(v330);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange", (void *)0x26387634, Mutable, v27);
    v332 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal(v332);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange", (void *)0x26386630, Mutable, v27);
    v334 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal(v334);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange", (void *)0x26386632, Mutable, v27);
    v336 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal(v336);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange", (void *)0x26386634, Mutable, v27);
    v338 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange(v338);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787630, Mutable, v27);
    v340 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange(v340);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787632, Mutable, v27);
    v342 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange(v342);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787634, Mutable, v27);
    v344 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange(v344);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange", (void *)0x26786630, Mutable, v27);
    v346 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange(v346);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange", (void *)0x26786632, Mutable, v27);
    v348 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange(v348);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange", (void *)0x26786634, Mutable, v27);
    v350 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange(v350);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange", (void *)0x26787730, Mutable, v27);
    v352 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange(v352);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange", (void *)0x26787732, Mutable, v27);
    v354 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange(v354);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange", (void *)0x26787734, Mutable, v27);
    v356 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange(v356);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747630, Mutable, v27);
    v358 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange(v358);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747632, Mutable, v27);
    v360 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange(v360);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747634, Mutable, v27);
    v362 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange(v362);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange", (void *)0x26746630, Mutable, v27);
    v364 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange(v364);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange", (void *)0x26746632, Mutable, v27);
    v366 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange(v366);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange", (void *)0x26746634, Mutable, v27);
    v368 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange(v368);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange", (void *)0x26736630, Mutable, v27);
    v370 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange(v370);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange", (void *)0x26736632, Mutable, v27);
    v372 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange(v372);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange", (void *)0x26736634, Mutable, v27);
    v374 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange(v374);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange", (void *)0x26737630, Mutable, v27);
    v376 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange(v376);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange", (void *)0x26737632, Mutable, v27);
    v378 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange(v378);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange", (void *)0x26737634, Mutable, v27);
    v380 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange(v380);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange", (void *)0x26343470, Mutable, v27);
    v382 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange(v382);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange", (void *)0x26663470, Mutable, v27);
    v384 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange(v384);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange, "kCVPixelFormatType_AGX_422YpCbCr8VideoRange", (void *)0x26797573, Mutable, v27);
    v386 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange(v386);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange, "kCVPixelFormatType_AGX_422YpCbCr8FullRange", (void *)0x26797566, Mutable, v27);
    v388 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16(v388);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent16, "kCVPixelFormatType_AGX_OneComponent16", (void *)0x264C3136, Mutable, v27);
    v390 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16Half(v390);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent16Half, "kCVPixelFormatType_AGX_OneComponent16Half", (void *)0x264C3068, Mutable, v27);
    v392 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half(v392);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half, "kCVPixelFormatType_AGX_TwoComponent16Half", (void *)0x26323068, Mutable, v27);
    v394 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked(v394);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked, "kCVPixelFormatType_AGX_ARGB2101010LEPacked", (void *)0x266C3172, Mutable, v27);
    v396 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar(v396);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar, "kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar", (void *)0x26623338, Mutable, v27);
    v398 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar(v398);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar, "kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar", (void *)0x26663338, Mutable, v27);
    v400 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent12 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent12(v400);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent12, "kCVPixelFormatType_AGX_OneComponent12", (void *)0x264C3132, Mutable, v27);
    v402 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_AGX_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent8(v402);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_TwoComponent8, "kCVPixelFormatType_AGX_TwoComponent8", (void *)0x26323038, Mutable, v27);
    v404 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar(v404);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763038, Mutable, v27);
    v406 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar(v406);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763238, Mutable, v27);
    v408 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar(v408);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763438, Mutable, v27);
    v410 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar(v410);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar", (void *)0x26783473, Mutable, v27);
    v412 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar(v412);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar", (void *)0x26743473, Mutable, v27);
    v414 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar(v414);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar", (void *)0x26733473, Mutable, v27);
    v416 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar(v416);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar", (void *)0x26783273, Mutable, v27);
    v418 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar(v418);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar", (void *)0x26743273, Mutable, v27);
    v420 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar(v420);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar", (void *)0x26733273, Mutable, v27);
    v422 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar(v422);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783038, Mutable, v27);
    v424 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar(v424);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783238, Mutable, v27);
    v426 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar(v426);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783438, Mutable, v27);
    v428 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeUncompressed, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange(v428);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange", (void *)0x23387630, Mutable, v27);
    v165 = theDict;
    v430 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeUncompressed, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange(v430);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange", (void *)0x23386630, Mutable, v27);
    v432 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange(v432);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange", (void *)0x26686630, Mutable, v27);
    v434 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange(v434);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange", (void *)0x26686632, Mutable, v27);
    v436 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange(v436);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange", (void *)0x26686634, Mutable, v27);
    v438 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray(v438);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray", (void *)0x26623668, Mutable, v27);
    v440 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8(v440);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8, "kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8", (void *)0x26746338, Mutable, v27);
    v442 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8(v442);
    v444 = "kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8";
    v445 = 645423928;
  }
  else
  {
    v446 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX(v446);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX, "kCVPixelFormatType_AGX_OneComponent8", (void *)0x264C3038, Mutable, v27);
    v448 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 4);
    PixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX(v448);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX, "kCVPixelFormatType_AGX_OneComponent10", (void *)0x264C3130, Mutable, v27);
    v450 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX(v450);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX, "kCVPixelFormatType_AGX_64RGBAHalf", (void *)0x26526841, Mutable, v27);
    v452 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX(v452);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange", (void *)0x26387630, Mutable, v27);
    v454 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX(v454);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange", (void *)0x26387632, Mutable, v27);
    v456 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX(v456);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange", (void *)0x26387634, Mutable, v27);
    v458 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX(v458);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange", (void *)0x26386630, Mutable, v27);
    v460 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX(v460);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange", (void *)0x26386632, Mutable, v27);
    v462 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_AGX(v462);
    v445 = 641230388;
    v444 = "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange";
  }
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8, v444, (void *)v445, Mutable, v27);
LABEL_274:
  if (v631)
  {
    v463 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeMultiSlice, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half(v463);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half, "kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half", (void *)0x2A264C68, Mutable, v27);
    v465 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeUncompressedMultiSlice, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half(v465);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half, "kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half", (void *)0x2A234C68, Mutable, v27);
  }
  if (v632)
  {
    v467 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange(v467);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange", (void *)0x2D387630, Mutable, v27);
    v469 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange(v469);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange", (void *)0x2D386630, Mutable, v27);
    v471 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange(v471);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange", (void *)0x2D686630, Mutable, v27);
    v473 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange(v473);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange", (void *)0x2F686630, Mutable, v27);
    v475 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange(v475);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange", (void *)0x7C686630, Mutable, v27);
    v477 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62_8bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange(v477);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange", (void *)0x2F387630, Mutable, v27);
    v479 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62_8bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange(v479);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange", (void *)0x2F386630, Mutable, v27);
    v481 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange(v481);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange", (void *)0x7C387630, Mutable, v27);
    v483 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange(v483);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange", (void *)0x7C386630, Mutable, v27);
    v485 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange(v485);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x2D787630, Mutable, v27);
    v487 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange(v487);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange", (void *)0x2D786630, Mutable, v27);
    v489 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange(v489);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x2F787630, Mutable, v27);
    v491 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange(v491);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange", (void *)0x2F786630, Mutable, v27);
    v493 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange(v493);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x7C787630, Mutable, v27);
    v495 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange(v495);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange", (void *)0x7C786630, Mutable, v27);
    v497 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange(v497);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x2D787632, Mutable, v27);
    v499 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange(v499);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange", (void *)0x2D786632, Mutable, v27);
    v501 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange(v501);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x2F787632, Mutable, v27);
    v503 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange(v503);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange", (void *)0x2F786632, Mutable, v27);
    v505 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange(v505);
    v165 = theDict;
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x7C787632, Mutable, v27);
    v507 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange(v507);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange", (void *)0x7C786632, Mutable, v27);
    v509 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy75_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_32BGRA(v509);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_32BGRA, "kCVPixelFormatType_Lossy75_32BGRA", (void *)0x2D424741, Mutable, v27);
    v511 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy62_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_32BGRA(v511);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_32BGRA, "kCVPixelFormatType_Lossy62_32BGRA", (void *)0x2F424741, Mutable, v27);
    v513 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy50_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_32BGRA(v513);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_32BGRA, "kCVPixelFormatType_Lossy50_32BGRA", (void *)0x7C424741, Mutable, v27);
    v515 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half(v515);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half, "kCVPixelFormatType_Lossy75_OneComponent16Half", (void *)0x2D4C3068, Mutable, v27);
    v517 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half(v517);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half, "kCVPixelFormatType_Lossy62_OneComponent16Half", (void *)0x2F4C3068, Mutable, v27);
    v519 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half(v519);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half, "kCVPixelFormatType_Lossy50_OneComponent16Half", (void *)0x7C4C3068, Mutable, v27);
    v521 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy75_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent8(v521);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_OneComponent8, "kCVPixelFormatType_Lossy75_OneComponent8", (void *)0x2D4C3038, Mutable, v27);
    v523 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy62_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent8(v523);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_OneComponent8, "kCVPixelFormatType_Lossy62_OneComponent8", (void *)0x2F4C3038, Mutable, v27);
    v525 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy50_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent8(v525);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_OneComponent8, "kCVPixelFormatType_Lossy50_OneComponent8", (void *)0x7C4C3038, Mutable, v27);
    v527 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8(v527);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8, "kCVPixelFormatType_Lossy75_TwoComponent8", (void *)0x2D323038, Mutable, v27);
    v529 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8(v529);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8, "kCVPixelFormatType_Lossy50_TwoComponent8", (void *)0x7C323038, Mutable, v27);
    v531 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half(v531);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half, "kCVPixelFormatType_Lossy75_TwoComponent16Half", (void *)0x2D323068, Mutable, v27);
    v533 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half(v533);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half, "kCVPixelFormatType_Lossy62_TwoComponent16Half", (void *)0x2F323068, Mutable, v27);
    v535 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half(v535);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half, "kCVPixelFormatType_Lossy50_TwoComponent16Half", (void *)0x7C323068, Mutable, v27);
    v537 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf(v537);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf, "kCVPixelFormatType_Lossy75_64RGBAHalf", (void *)0x2D526841, Mutable, v27);
    v539 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf(v539);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf, "kCVPixelFormatType_Lossy62_64RGBAHalf", (void *)0x2F526841, Mutable, v27);
    v161 = 0x1ECDE8000uLL;
    v541 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    PixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf(v541);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf, "kCVPixelFormatType_Lossy50_64RGBAHalf", (void *)0x7C526841, Mutable, v27);
  }
  if (v7)
  {
    v543 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray(v543);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray", (void *)0x2D623668, Mutable, v27);
    v545 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray(v545);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray", (void *)0x2F623668, Mutable, v27);
    v547 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, _pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    PixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray(v547);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray", (void *)0x7C623668, Mutable, v27);
  }
  if (areHTPCFormatsSupportedByCA())
    v549 = 983040;
  else
    v549 = 720896;
  PixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar(v549 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76326138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v551 = 983040;
  else
    v551 = 720896;
  PixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar(v551 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76346138, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange, "kCVPixelFormatType_444YpCbCr8PackedFullRange", (void *)0x66333038, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v554 = 983040;
  else
    v554 = 720896;
  PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar(v554 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar", (void *)0x78346173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v556 = 983040;
  else
    v556 = 720896;
  PixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar(v556 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar", (void *)0x74346173, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_294;
  }
  else
  {
    v559 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v559;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v559)
    {
LABEL_294:
      if (areHTPCFormatsSupportedByCA())
        v558 = 983040;
      else
        v558 = 720896;
      goto LABEL_299;
    }
  }
  v558 = 196608;
LABEL_299:
  PixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar(sGlobalVariantBitfield | v558);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar", (void *)0x73346173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v561 = 983040;
  else
    v561 = 720896;
  PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar(v561 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar", (void *)0x78326173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v563 = 983040;
  else
    v563 = 720896;
  PixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar(v563 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar", (void *)0x74326173, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_307;
  }
  else
  {
    v566 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v566;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v566)
    {
LABEL_307:
      if (areHTPCFormatsSupportedByCA())
        v565 = 983040;
      else
        v565 = 720896;
      goto LABEL_312;
    }
  }
  v565 = 196608;
LABEL_312:
  PixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar(sGlobalVariantBitfield | v565);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar", (void *)0x73326173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v568 = 983040;
  else
    v568 = 720896;
  PixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar(v568 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78306138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v570 = 983040;
  else
    v570 = 720896;
  PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar(v570 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78326138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v572 = 983040;
  else
    v572 = 720896;
  PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar(v572 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78346138, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_323;
LABEL_327:
    v574 = 196608;
    goto LABEL_328;
  }
  v575 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v575;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v575)
    goto LABEL_327;
LABEL_323:
  if (areHTPCFormatsSupportedByCA())
    v574 = 983040;
  else
    v574 = 720896;
LABEL_328:
  PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v574);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange", (void *)0x73763230, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_330;
LABEL_334:
    v577 = 196608;
    goto LABEL_335;
  }
  v578 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v578;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v578)
    goto LABEL_334;
LABEL_330:
  if (areHTPCFormatsSupportedByCA())
    v577 = 983040;
  else
    v577 = 720896;
LABEL_335:
  PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v577);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange", (void *)0x73763232, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_337;
LABEL_341:
    v580 = 196608;
    goto LABEL_342;
  }
  v581 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v581;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v581)
    goto LABEL_341;
LABEL_337:
  if (areHTPCFormatsSupportedByCA())
    v580 = 983040;
  else
    v580 = 720896;
LABEL_342:
  PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v580);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange", (void *)0x73763434, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_344;
LABEL_348:
    v583 = 196608;
    goto LABEL_349;
  }
  v584 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v584;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v584)
    goto LABEL_348;
LABEL_344:
  if (areHTPCFormatsSupportedByCA())
    v583 = 983040;
  else
    v583 = 720896;
LABEL_349:
  PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v583);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr16BiPlanarFullRange", (void *)0x73663230, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_351;
LABEL_355:
    v586 = 196608;
    goto LABEL_356;
  }
  v587 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v587;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v587)
    goto LABEL_355;
LABEL_351:
  if (areHTPCFormatsSupportedByCA())
    v586 = 983040;
  else
    v586 = 720896;
LABEL_356:
  PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v586);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr16BiPlanarFullRange", (void *)0x73663232, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr)
      goto LABEL_358;
  }
  else
  {
    v590 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v590;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v590)
    {
LABEL_358:
      if (areHTPCFormatsSupportedByCA())
        v589 = 983040;
      else
        v589 = 720896;
      goto LABEL_363;
    }
  }
  v589 = 196608;
LABEL_363:
  PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v589);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr16BiPlanarFullRange", (void *)0x73663434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB, "kCVPixelFormatType_12RLSB_12G12BMSB", (void *)0x72746762, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16VersatileBayer = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16VersatileBayer(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16VersatileBayer, "kCVPixelFormatType_16VersatileBayer", (void *)0x62703136, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar, "kCVPixelFormatType_16VersatileBayerQuadPlanar", (void *)0x62313671, Mutable, v27);
  PixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW, "kCVPixelFormatType_64RGBA_DownscaledProResRAW", (void *)0x62703634, Mutable, v27);
  PixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer, "kCVPixelFormatType_30RGB_DownscaledBayer", (void *)0x62703330, Mutable, v27);
  PixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange", (void *)0x68663230, Mutable, v27);
  PixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange", (void *)0x68663232, Mutable, v27);
  PixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange", (void *)0x68663434, Mutable, v27);
  PixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222, "kCVPixelFormatType_OneComponent10_Packed88882222", (void *)0x71387132, Mutable, v27);
  PixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB, "kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB", (void *)0x62753130, Mutable, v27);
  PixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222, "kCVPixelFormatType_VersatileSenselArrayPacked10_88882222", (void *)0x62713832, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray, "kCVPixelFormatType_16HalfVersatileSenselArray", (void *)0x62766568, Mutable, v27);
  PixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray, "kCVPixelFormatType_64HalfRegroupedSenselArray", (void *)0x62363468, Mutable, v27);
  PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar, "kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar", (void *)0x62766871, Mutable, v27);
  PixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8, "kCVPixelFormatType_VersatileSenselArray12CompandedIn8", (void *)0x62766338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8, "kCVPixelFormatType_VersatileSenselArray10CompandedIn8", (void *)0x62786338, Mutable, v27);
  PixelFormat_kCVPixelFormatType_48RGBLE = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_48RGBLE(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_48RGBLE, "kCVPixelFormatType_48RGBLE", (void *)0x6C343872, Mutable, v27);
  if (areHTPCFormatsSupportedByCA())
    v609 = 983040;
  else
    v609 = 720896;
  PixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar(v609 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar, "kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar", (void *)0x66336138, Mutable, v27);
  PixelFormat_kCVPixelFormatType_40ARGBLEFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEFullRange, "kCVPixelFormatType_40ARGBLEFullRange", (void *)0x6C343061, Mutable, v27);
  PixelFormat_kCVPixelFormatType_OneComponent1 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent1(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent1, "kCVPixelFormatType_OneComponent1", (void *)0x4C303031, Mutable, v27);
  PixelFormat_kCVPixelFormatType_1VersatileSensel = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_1VersatileSensel(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_1VersatileSensel, "kCVPixelFormatType_1VersatileSensel", (void *)0x62703031, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L, "kCVPixelFormatType_12RGBLEPacked_R12L", (void *)0x5231324C, Mutable, v27);
  PixelFormat_kCVPixelFormatType_12RGBPacked_R12B = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RGBPacked_R12B(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RGBPacked_R12B, "kCVPixelFormatType_12RGBPacked_R12B", (void *)0x52313242, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*(_BYTE *)(v161 + 1475))
      v616 = 0x20000;
    else
      v616 = 0;
  }
  else
  {
    *(_BYTE *)(v161 + 1475) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v616 = 0x20000;
  }
  PixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3(v616);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3, "kCVPixelFormatType_FixedPointUnsigned13_3", (void *)0x31332E33, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*(_BYTE *)(v161 + 1475))
      v618 = 0x20000;
    else
      v618 = 0;
  }
  else
  {
    *(_BYTE *)(v161 + 1475) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v618 = 0x20000;
  }
  PixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5(v618);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5, "kCVPixelFormatType_FixedPointUnsigned11_5", (void *)0x31312E35, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*(_BYTE *)(v161 + 1475))
      v620 = 0x20000;
    else
      v620 = 0;
  }
  else
  {
    *(_BYTE *)(v161 + 1475) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    v620 = 0x20000;
  }
  PixelFormat_kCVPixelFormatType_FixedPointSigned7_5 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointSigned7_5(v620);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointSigned7_5, "kCVPixelFormatType_FixedPointSigned7_5", (void *)0x73372E35, Mutable, v27);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((*(_BYTE *)(v161 + 1475) & 1) == 0)
    {
      v622 = sGlobalVariantBitfield;
      goto LABEL_386;
    }
  }
  else
  {
    *(_BYTE *)(v161 + 1475) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v622 = sGlobalVariantBitfield | 4;
LABEL_386:
  sGlobalVariantBitfield = v622 | 8;
  PixelFormat_kCVPixelFormatType_DisparityFloat16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DisparityFloat16(v622 | 8u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DisparityFloat16, "kCVPixelFormatType_DisparityFloat16", (void *)0x68646973, Mutable, v27);
  PixelFormat_kCVPixelFormatType_DepthFloat16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DepthFloat16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DepthFloat16, "kCVPixelFormatType_DepthFloat16", (void *)0x68646570, Mutable, v27);
  CFDictionaryRemoveAllValues(v165);
  cleanupContentsOfArrayOfVariants();
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) != 0)
  {
    if ((*(_BYTE *)(v161 + 1475) & 1) == 0)
    {
      v625 = sGlobalVariantBitfield;
      goto LABEL_391;
    }
  }
  else
  {
    *(_BYTE *)(v161 + 1475) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  v625 = sGlobalVariantBitfield | 4;
LABEL_391:
  sGlobalVariantBitfield = v625 | 8;
  PixelFormat_kCVPixelFormatType_DisparityFloat32 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DisparityFloat32(v625 | 8u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DisparityFloat32, "kCVPixelFormatType_DisparityFloat32", (void *)0x66646973, Mutable, v27);
  *(_DWORD *)keyExistsAndHasValidFormat = 1717855600;
  v627 = CFNumberCreate(v24, kCFNumberSInt32Type, keyExistsAndHasValidFormat);
  CFDictionarySetValue(v165, CFSTR("PixelFormat"), v627);
  CFRelease(v627);
  PixelFormat_kCVPixelFormatType_DepthFloat32 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DepthFloat32(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DepthFloat32, "kCVPixelFormatType_DepthFloat32", (void *)0x66646570, Mutable, v27);
  CFRelease(v165);
  CFRelease((CFTypeRef)sGlobalArrayOfVariants);
  sGlobalArrayOfVariants = 0;
  _pixelFormatDictionary = (uint64_t)Mutable;
  _pixelFormatTypes = (uint64_t)v27;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)keyExistsAndHasValidFormat = 136315138;
    v636 = "Pixel format registry initialized. Constant classes enabled.";
    _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", keyExistsAndHasValidFormat, 0xCu);
  }
}

void registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(const __CFDictionary *a1, void *key, CFDictionaryRef theDict, __CFArray *a4)
{
  unsigned int v6;
  unint64_t v8;
  const __CFAllocator *v9;
  CFDictionaryRef Copy;
  CFDictionaryRef v11;
  CFNumberRef v12;
  int valuePtr;
  uint8_t buf[4];
  char *v15;
  char __str[128];
  uint64_t v17;
  CFRange v18;

  v6 = key;
  v17 = *MEMORY[0x1E0C80C00];
  valuePtr = (int)key;
  v8 = key;
  if (CFDictionaryGetValue(theDict, (const void *)key))
  {
    if (v6 < 0x65)
      snprintf(__str, 0x80uLL, "Warning: Re-registering an existing pixelformat %d.");
    else
      snprintf(__str, 0x80uLL, "Warning: Re-registering an existing pixelformat %c%c%c%c.");
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v15 = __str;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
    if (Copy)
    {
      v11 = Copy;
      CFDictionarySetValue(theDict, (const void *)v8, Copy);
      v12 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
      v18.length = CFArrayGetCount(a4);
      v18.location = 0;
      if (!CFArrayContainsValue(a4, v18, v12))
        CFArrayAppendValue(a4, v12);
      if (v12)
        CFRelease(v12);
      CFRelease(v11);
    }
  }
}

void registerConstantClassesPixelFormat(const __CFDictionary *a1, const char *a2, void *key, CFDictionaryRef theDict, __CFArray *a5)
{
  uint8_t buf[4];
  char *v6;
  char __str[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(a1, key, theDict, a5);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    *(_OWORD *)__str = 0u;
    v8 = 0u;
    snprintf(__str, 0x100uLL, "Warning: Could not initialize pixel format: %s", a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v6 = __str;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
}

void cleanupContentsOfArrayOfVariants(void)
{
  const __CFArray *Mutable;
  CFRange v1;

  Mutable = (const __CFArray *)sGlobalArrayOfVariants;
  if (!sGlobalArrayOfVariants)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    sGlobalArrayOfVariants = (uint64_t)Mutable;
  }
  v1.length = CFArrayGetCount(Mutable);
  v1.location = 0;
  CFArrayApplyFunction(Mutable, v1, (CFArrayApplierFunction)cleanupContentsOfArrayOfVariantsApplierFunction, 0);
  sGlobalVariantBitfield = 0;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr16(int a1)
{
  void *v1;

  v1 = &unk_1E48AB2B8;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AB290;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent8(int a1)
{
  void *v1;

  v1 = &unk_1E48AAAC0;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAA98;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange(int a1)
{
  void *v1;

  v1 = &unk_1E48B0038;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48B0010;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange(int a1)
{
  void *v1;

  v1 = &unk_1E48B0088;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48B0060;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent8(int a1)
{
  void *v1;

  v1 = &unk_1E48AAED0;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAEA8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent32Float(int a1)
{
  void *v1;

  v1 = &unk_1E48ABE98;
  if (a1)
    v1 = 0;
  if (a1 == 2)
    return &unk_1E48ABE70;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent16Half(int a1)
{
  void *v1;

  v1 = &unk_1E48ABE48;
  if (a1)
    v1 = 0;
  if (a1 == 2)
    return &unk_1E48ABE20;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent16(int a1)
{
  void *v1;

  v1 = &unk_1E48AAF20;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAEF8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough3(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACFF0;
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough2(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACFC8;
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough1(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACFA0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_RGBPlanarHalf(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6420[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_RGBPlanarFloat(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AC0F0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_OneComponent32Float(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_1E48A63A8[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent16Half(int a1)
{
  void *v1;

  v1 = &unk_1E48AAB60;
  if (a1)
    v1 = 0;
  if (a1 == 2)
    return &unk_1E48AAB38;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent16(int a1)
{
  void *v1;

  v1 = &unk_1E48AAB10;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAAE8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent12(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAE58;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent10(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAE30;
}

void *retrievePixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half(int a1)
{
  void *v1;

  v1 = &unk_1E48B01F0;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48B01C8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B01A0;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0D58;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0DA8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0CE0;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0C68;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0E70;
  v2 = &unk_1E48B0E48;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0E20;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0F88;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0880;
  v2 = &unk_1E48B0858;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0830;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B08F8;
  v2 = &unk_1E48B08D0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B08A8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0308;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0268;
  v2 = &unk_1E48B0240;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0218;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B02E0;
  v2 = &unk_1E48B02B8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0290;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B05B0;
  v2 = &unk_1E48B0588;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0560;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0628;
  v2 = &unk_1E48B0600;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B05D8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_32BGRA(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0B50;
  v2 = &unk_1E48B0B28;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0B00;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0DD0;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0D08;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0C90;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0EE8;
  v2 = &unk_1E48B0EC0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0E98;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0FB0;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0970;
  v2 = &unk_1E48B0948;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0920;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B09E8;
  v2 = &unk_1E48B09C0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0998;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0330;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B03D0;
  v2 = &unk_1E48B03A8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0380;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0448;
  v2 = &unk_1E48B0420;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B03F8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B06A0;
  v2 = &unk_1E48B0678;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0650;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0718;
  v2 = &unk_1E48B06F0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B06C8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_32BGRA(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0BC8;
  v2 = &unk_1E48B0BA0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0B78;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0D80;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0DF8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0D30;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0CB8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0F60;
  v2 = &unk_1E48B0F38;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0F10;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0A60;
  v2 = &unk_1E48B0A38;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0A10;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0AD8;
  v2 = &unk_1E48B0AB0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0A88;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0358;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B04C0;
  v2 = &unk_1E48B0498;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0470;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0538;
  v2 = &unk_1E48B0510;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B04E8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0790;
  v2 = &unk_1E48B0768;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0740;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0808;
  v2 = &unk_1E48B07E0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B07B8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_32BGRA(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B0C40;
  v2 = &unk_1E48B0C18;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48B0BF0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0128;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0100;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B00D8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B00B0;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD8B0;
}

void *retrievePixelFormat_kCVPixelFormatType_ARGB2101010LEPacked(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AC118;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AFA48;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AF890;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AE440;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16Half(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AF868;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AF840;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent12(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AFA20;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48AE4B8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF908;
  v2 = &unk_1E48AF8E0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF8B8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE5D0;
  v2 = &unk_1E48AE5A8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE580;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFBB0;
  v2 = &unk_1E48AFB88;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFB60;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE918;
  v2 = &unk_1E48AE8F0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE8C8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEC60;
  v2 = &unk_1E48AEC38;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEC10;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFD18;
  v2 = &unk_1E48AFCF0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFCC8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF638;
  v2 = &unk_1E48AF610;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF5E8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF4D0;
  v2 = &unk_1E48AF4A8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF480;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFCA0;
  v2 = &unk_1E48AFC78;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFC50;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF200;
  v2 = &unk_1E48AF1D8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF1B0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF368;
  v2 = &unk_1E48AF340;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF318;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFC28;
  v2 = &unk_1E48AFC00;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFBD8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF6B0;
  v2 = &unk_1E48AF688;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF660;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF728;
  v2 = &unk_1E48AF700;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF6D8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF098;
  v2 = &unk_1E48AF070;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF048;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEDC8;
  v2 = &unk_1E48AEDA0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AED78;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEF30;
  v2 = &unk_1E48AEF08;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEEE0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFB38;
  v2 = &unk_1E48AFB10;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFAE8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF7A0;
  v2 = &unk_1E48AF778;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF750;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF818;
  v2 = &unk_1E48AF7F0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF7C8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE800;
  v2 = &unk_1E48AE7D8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE7B0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEB48;
  v2 = &unk_1E48AEB20;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEAF8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFE80;
  v2 = &unk_1E48AFE58;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFE30;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF5C0;
  v2 = &unk_1E48AF598;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF570;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF458;
  v2 = &unk_1E48AF430;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF408;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFE08;
  v2 = &unk_1E48AFDE0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFDB8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF188;
  v2 = &unk_1E48AF160;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF138;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF2F0;
  v2 = &unk_1E48AF2C8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF2A0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFD90;
  v2 = &unk_1E48AFD68;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFD40;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF020;
  v2 = &unk_1E48AEFF8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEFD0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AED50;
  v2 = &unk_1E48AED28;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AED00;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEEB8;
  v2 = &unk_1E48AEE90;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEE68;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFAC0;
  v2 = &unk_1E48AFA98;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFA70;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE6E8;
  v2 = &unk_1E48AE6C0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE698;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEA30;
  v2 = &unk_1E48AEA08;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE9E0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF548;
  v2 = &unk_1E48AF520;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF4F8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF3E0;
  v2 = &unk_1E48AF3B8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF390;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF110;
  v2 = &unk_1E48AF0E8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF0C0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF278;
  v2 = &unk_1E48AF250;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF228;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEFA8;
  v2 = &unk_1E48AEF80;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEF58;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AECD8;
  v2 = &unk_1E48AECB0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEC88;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AEE40;
  v2 = &unk_1E48AEE18;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AEDF0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE350;
  v2 = &unk_1E48AE328;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE300;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE120;
  v2 = &unk_1E48AE0F8;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE0D0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF980;
  v2 = &unk_1E48AF958;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF930;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE238;
  v2 = &unk_1E48AE210;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE1E8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AF9F8;
  v2 = &unk_1E48AF9D0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AF9A8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACEB0;
}

void *retrievePixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAE08;
}

void *retrievePixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B30D0;
  v2 = &unk_1E48B30F8;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B3120;
}

void *retrievePixelFormat_kCVPixelFormatType_64RGBALE(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD018;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_64RGBAHalf(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 3;
  if (v1 > 7)
    return 0;
  else
    return qword_1E48A63E0[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_64ARGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB178;
}

void *retrievePixelFormat_kCVPixelFormatType_48RGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB1A0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6248[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A62C8[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB268;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A69F8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6938[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6998[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A68D8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6818[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6878[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_1E48A6660[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_1E48A65F0[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_1E48A6628[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6798[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A66D8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6738[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6590[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6530[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A65D0[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr10(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB308;
}

void *retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8R(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAFC0;
}

void *retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAFE8;
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCrFloat(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB330;
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB010;
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr16(int a1)
{
  void *v1;

  v1 = &unk_1E48AB060;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AB038;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ABD58;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B31E8;
  v2 = &unk_1E48B3210;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B3238;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs(int a1)
{
  void *v1;

  v1 = &unk_1E48AAD90;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAD68;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAD40;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange(int a1)
{
  void *v1;

  v1 = &unk_1E48AADE0;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AADB8;
  else
    return v1;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xB)
    return 0;
  else
    return qword_1E48A6188[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xB)
    return 0;
  else
    return qword_1E48A61E8[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8(int a1)
{
  void *v1;

  v1 = &unk_1E48AAD18;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AACF0;
  else
    return v1;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A69D8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6918[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6978[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A68B8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A67F8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6858[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AC8E8;
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AC910;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6778[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A66B8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6718[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6570[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6510[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A65B0[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB2E0;
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B3170;
  v2 = &unk_1E48B3198;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B31C0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xB)
    return 0;
  else
    return qword_1E48A6348[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ABD30;
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCr8Planar(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ABD08;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xB)
    return 0;
  else
    return qword_1E48A60C8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xB)
    return 0;
  else
    return qword_1E48A6128[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A69B8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A68F8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6958[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6898[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A67D8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6838[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6758[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6698[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A66F8[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6550[a1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 7)
    return 0;
  else
    return qword_1E48A6490[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 7)
    return 0;
  else
    return qword_1E48A64D0[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange(int a1)
{
  void *v1;

  v1 = &unk_1E48AB600;
  if (a1)
    v1 = 0;
  if (a1 == 0x80000)
    return &unk_1E48AB5D8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange(int a1)
{
  void *v1;

  v1 = &unk_1E48AB650;
  if (a1)
    v1 = 0;
  if (a1 == 0x80000)
    return &unk_1E48AB628;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AC230;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamut(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A6470[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_32BGRA(int a1)
{
  if (a1 > 16)
  {
    switch(a1)
    {
      case 17:
        return &unk_1E48AB0D8;
      case 48:
        return &unk_1E48AB100;
      case 49:
        return &unk_1E48AB128;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return &unk_1E48AB150;
      case 1:
        return &unk_1E48AB088;
      case 16:
        return &unk_1E48AB0B0;
    }
  }
  return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_32AlphaGray(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB1C8;
}

void *retrievePixelFormat_kCVPixelFormatType_32ARGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAB88;
}

void *retrievePixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3148;
}

void *retrievePixelFormat_kCVPixelFormatType_30RGBPad2Most(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB240;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_1E48A67B8[a1];
}

void *retrievePixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AC140;
  v2 = &unk_1E48AC168;
  if (a1 != 12)
    v2 = 0;
  if (a1 != 4)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48AC190;
}

void *retrievePixelFormat_kCVPixelFormatType_30RGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB218;
}

void *retrievePixelFormat_kCVPixelFormatType_24RGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AABB0;
}

void *retrievePixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACED8;
}

void *retrievePixelFormat_kCVPixelFormatType_16LE565(int a1)
{
  void *v1;

  v1 = &unk_1E48AAC28;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAC00;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_16LE5551(int a1)
{
  void *v1;

  v1 = &unk_1E48AAC78;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AAC50;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_16LE555(int a1)
{
  void *v1;

  v1 = &unk_1E48AACC8;
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return &unk_1E48AACA0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_16Gray(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB1F0;
}

void *retrievePixelFormat_kCVPixelFormatType_16BE555(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AABD8;
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACE60;
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACE38;
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACE88;
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACE10;
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_RGGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB380;
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_GRBG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB358;
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_GBRG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB3D0;
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AB3A8;
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACF50;
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACF28;
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACF78;
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACF00;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_128RGBAFloat(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 3;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6440[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3350;
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3378;
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3418;
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3440;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B32D8;
  v2 = &unk_1E48B3300;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B3328;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent1(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B3738;
  v2 = &unk_1E48B3760;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B3788;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0FD8;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3(int a1)
{
  void *v1;

  v1 = &unk_1E48B3850;
  if (a1)
    v1 = 0;
  if (a1 == 0x20000)
    return &unk_1E48B3828;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5(int a1)
{
  void *v1;

  v1 = &unk_1E48B38A0;
  if (a1)
    v1 = 0;
  if (a1 == 0x20000)
    return &unk_1E48B3878;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointSigned7_5(int a1)
{
  void *v1;

  v1 = &unk_1E48B38F0;
  if (a1)
    v1 = 0;
  if (a1 == 0x20000)
    return &unk_1E48B38C8;
  else
    return v1;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DisparityFloat32(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 3)
    return 0;
  else
    return qword_1E48A7538[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DisparityFloat16(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 3)
    return 0;
  else
    return qword_1E48A74F8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DepthFloat32(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 3)
    return 0;
  else
    return qword_1E48A7558[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DepthFloat16(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 2;
  if (v1 > 3)
    return 0;
  else
    return qword_1E48A7518[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B33C8;
}

void *retrievePixelFormat_kCVPixelFormatType_48RGBLE(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B3468;
  v2 = &unk_1E48B3490;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B34B8;
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B3260;
  v2 = &unk_1E48B3288;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B32B0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6C78[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B13C0;
  v2 = &unk_1E48B13E8;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B1410;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6DF8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A7278[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A73F8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6D78[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6CF8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6BF8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6F78[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A71F8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A7378[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6EF8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6E78[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A7178[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A72F8[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_40ARGBLEFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48B36C0;
  v2 = &unk_1E48B36E8;
  if (a1 != 196608)
    v2 = 0;
  if (a1 != 0x10000)
    v1 = v2;
  if (a1)
    return v1;
  else
    return &unk_1E48B3710;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A7478[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_1VersatileSensel(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B37B0;
}

void *retrievePixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B30A8;
}

void *retrievePixelFormat_kCVPixelFormatType_16VersatileBayer(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3080;
}

void *retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B33F0;
}

void *retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B33A0;
}

uint64_t CVPixelBufferPool::preallocate(CVPixelBufferPool *this, const __CFAllocator *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _opaque_pthread_t *v10;
  pthread_attr_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  const void *v17;
  int v18;
  int v19;
  int v20;
  _QWORD v22[3];
  uint64_t v23;
  pthread_t v24;
  int v25;
  _BYTE v26[12];
  pthread_attr_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v24 = 0;
  v6 = *((_QWORD *)this + 2);
  v22[0] = this;
  v22[1] = v6;
  v22[2] = a2;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 232))(v6);
  if (v7 >= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2)))
    return 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
  if (a3)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2));
    if (v8 <= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 232))(*((_QWORD *)this + 2)) + 1)
    {
      v9 = 0;
      a3 = 0;
    }
    else
    {
      v25 = 0;
      v27.__sig = 0x300000006;
      *(_QWORD *)v26 = 4;
      v9 = 0;
      if (sysctl((int *)&v27, 2u, &v25, (size_t *)v26, 0, 0) < 0)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        if (v25 >= 2)
        {
          v10 = pthread_self();
          v25 = 0;
          if (pthread_getschedparam(v10, &v25, (sched_param *)v26))
          {
            v11 = 0;
          }
          else
          {
            v11 = &v27;
            pthread_attr_init(&v27);
            pthread_attr_setschedparam(&v27, (const sched_param *)v26);
            pthread_attr_setschedpolicy(&v27, v25);
          }
          a3 = pthread_create(&v24, v11, (void *(__cdecl *)(void *))preAllocateThread, v22);
          v9 = 1;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  do
    v13 = (*(uint64_t (**)(CVPixelBufferPool *, const __CFAllocator *, uint64_t))(*(_QWORD *)this + 168))(this, a2, 1);
  while (!v13);
  v14 = v13;
  if (v13 == -6699)
    v12 = 0;
  else
    v12 = v13;
  if (a3)
    v15 = 0;
  else
    v15 = v9;
  if (v15 == 1)
  {
    pthread_join(v24, 0);
    v16 = v23;
    if ((_DWORD)v23 == -6699)
      v16 = 0;
    if (v14 == -6699)
      v12 = v16;
    else
      v12 = v14;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2));
  v17 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 232))(*((_QWORD *)this + 2));
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2));
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 240))(*((_QWORD *)this + 2));
  snprintf((char *)&v27, 0x96uLL, "CVPixelBufferPool::preallocate complete for pool %p, allocated %d requested %d _targetBufferCountsBitfield 0x%x \n", v17, v18, v19, v20);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v26 = 136315138;
    *(_QWORD *)&v26[4] = &v27;
    _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", v26, 0xCu);
  }
  return v12;
}

uint64_t CVLocklessBunchPair::getMinimumBufferCount(CVLocklessBunchPair *this)
{
  return (unsigned __int16)*((_DWORD *)this + 62);
}

uint64_t preAllocateThread(_DWORD *a1)
{
  int v2;

  a1[6] = 0;
  pthread_setname_np("CVPreAllocateThread");
  if (!a1[6])
  {
    do
    {
      v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a1 + 168))(*(_QWORD *)a1, *((_QWORD *)a1 + 2), 1);
      a1[6] = v2;
    }
    while (!v2);
  }
  return 0;
}

{
  int v2;

  a1[6] = 0;
  pthread_setname_np("CVPreAllocateThread");
  if (!a1[6])
  {
    do
    {
      v2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a1 + 168))(*(_QWORD *)a1, *((_QWORD *)a1 + 2), 1);
      a1[6] = v2;
    }
    while (!v2);
  }
  return 0;
}

uint64_t CVPixelBufferPool::allocateNewBacking(CVPixelBufferPool *this, const __CFAllocator *a2, uint64_t a3)
{
  CVImageBacking **v5;
  CVImageBacking **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v18;
  uint8_t buf[4];
  char *v20;
  char __str[150];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = CVPixelBufferBacking::alloc(a2, a2);
  if (!v5)
  {
    v18 = -6660;
LABEL_14:
    v13 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 232))(*((_QWORD *)this + 2));
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2));
    v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 240))(*((_QWORD *)this + 2));
    snprintf(__str, 0x96uLL, "CVPixelBufferPool::allocateNewBacking return failure for pool %p, allocated %d requested %d _targetBufferCountsBitfield 0x%x \n", v13, v14, v15, v16);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v20 = __str;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    return v18;
  }
  v6 = v5;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2), 0, 0, a3);
  v18 = v7;
  if ((_DWORD)v7)
  {
    v8 = v7;
    CFRelease(v6);
  }
  else
  {
    if ((*(uint64_t (**)(CVImageBacking *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)v6[2] + 248))(v6[2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, *((_QWORD *)this + 5), *((_QWORD *)this + 4), 0, 0, 0,
           0,
           &v18))
    {
      if (*((_BYTE *)this + 136))
        (*(void (**)(CVImageBacking *))(*(_QWORD *)v6[2] + 88))(v6[2]);
      (*(void (**)(CVImageBacking *, _QWORD))(*(_QWORD *)v6[2] + 96))(v6[2], *((_QWORD *)this + 2));
      (*(void (**)(_QWORD, CVImageBacking *))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2), v6[2]);
      v9 = (_QWORD *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2)) + 1;
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
      CVTracePoolAction(1, v9, (_QWORD **)v6, "created", v10, v11);
    }
    v8 = v18;
  }
  if ((_DWORD)v8 != -6699 && (_DWORD)v8 != 0)
    goto LABEL_14;
  return v8;
}

uint64_t CVMetalTexture::finalize(CVMetalTexture *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2) && *((_BYTE *)this + 96))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13));
    *((_QWORD *)this + 13) = 0;
  }
  return CVImageBuffer::finalize(this);
}

uint64_t CVMetalTextureBacking::releaseUsage(CVMetalTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CVBufferBacking::releaseUsage(this);
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVLockingBunchPair::finalize(CVLockingBunchPair *this)
{
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 264));
  return CVBunchPair::finalize(this);
}

uint64_t CVLockingBunchPair::exitCriticalSection(CVLockingBunchPair *this)
{
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  CVReturn result;
  CFTypeID v11;
  CFTypeID v12;
  CVBufferPool **v13;
  __CVMetalTextureCache *v14;

  result = -6661;
  if (metalDevice && cacheOut)
  {
    if (cacheAttributes)
    {
      v11 = CFGetTypeID(cacheAttributes);
      if (v11 != CFDictionaryGetTypeID())
        return -6661;
    }
    if (textureAttributes && (v12 = CFGetTypeID(textureAttributes), v12 != CFDictionaryGetTypeID()))
    {
      return -6661;
    }
    else
    {
      *cacheOut = 0;
      v13 = CVMetalTextureCache::alloc(allocator, cacheAttributes);
      if (v13
        && (v14 = (__CVMetalTextureCache *)v13,
            (*(uint64_t (**)(CVBufferPool *, id, CFDictionaryRef, CFDictionaryRef))(*(_QWORD *)v13[2] + 96))(v13[2], metalDevice, cacheAttributes, textureAttributes)))
      {
        result = 0;
        *cacheOut = v14;
      }
      else
      {
        return -6662;
      }
    }
  }
  return result;
}

CVBufferPool **CVMetalTextureCache::alloc(CVMetalTextureCache *this, const __CFAllocator *a2)
{
  CVBufferPool **v3;
  CVBufferPool **v4;
  _QWORD *v5;

  if (_cvUseTrackingAllocator)
    this = (CVMetalTextureCache *)_cvTrackingGetCFAllocator(CFSTR("CVMetalTextureCache"));
  if (CVMetalTextureCacheGetTypeID::once != -1)
    dispatch_once_f(&CVMetalTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTextureCache);
  v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVMetalTextureCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x60uLL);
  v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    *v5 = off_1E48A35E0;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
  }
  return v4;
}

CFTypeRef *CVMetalTextureCache::initWithDevice(CFTypeRef *this, void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef *v7;
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  CVHostTimeBase *v12;
  double v13;
  unint64_t v14;
  const __CFDictionary *Copy;
  const __CFNumber *Value;
  const __CFNumber *v17;
  CFTypeID v18;
  double v19;
  double valuePtr;

  v7 = this;
  v8 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v7))
    return 0;
  v7[4] = CFRetain(a2);
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  v7[5] = Mutable;
  if (!Mutable)
    goto LABEL_15;
  v10 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
  v7[6] = v10;
  if (!v10)
    goto LABEL_15;
  v11 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
  v7[7] = v11;
  if (!v11)
    goto LABEL_15;
  v12 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  v7[8] = v12;
  if (!v12)
    goto LABEL_15;
  if (!CVHostTimeBase::sIsInited)
    v13 = CVHostTimeBase::Initialize(v12);
  LODWORD(v13) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v14) = CVHostTimeBase::sToNanosDenominator;
  v7[11] = (CFTypeRef)(1000000000.0 / (double)*(unint64_t *)&v13 * (double)v14);
  if (!a3)
    goto LABEL_13;
  Copy = CFDictionaryCreateCopy(v8, a3);
  v7[9] = Copy;
  if (!Copy)
    goto LABEL_15;
  Value = (const __CFNumber *)CFDictionaryGetValue(Copy, CFSTR("MaximumMetalTextureAge"));
  if (!Value)
    goto LABEL_13;
  v17 = Value;
  valuePtr = 0.0;
  v18 = CFGetTypeID(Value);
  if (v18 != CFNumberGetTypeID())
  {
LABEL_15:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
  v7[11] = (CFTypeRef)CVHostTimeBase::ConvertFromNanos((CVHostTimeBase *)(valuePtr * 1000000000.0), valuePtr * 1000000000.0, v19);
LABEL_13:
  if (a4)
    v7[10] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
  return v7;
}

uint64_t CVLocklessBunchPair::finalize(CVLocklessBunchPair *this)
{
  (*(void (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 56))(this);
  return CVBunchPair::finalize(this);
}

uint64_t CVBufferPool::finalize(CVBufferPool *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  v2 = (_QWORD *)(*(uint64_t (**)(CVBufferPool *))(*(_QWORD *)this + 24))(this);
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
    v5 = *((_QWORD *)this + 2);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = 0;
LABEL_6:
  CVTracePoolAction(1, v2, 0, "being deallocated", v4, v6);
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    *((_QWORD *)this + 2) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 3);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)this + 3) = 0;
  return CVObject::finalize(this);
}

void CVLocklessBunchPair::cleanup(CVLocklessBunchPair *this)
{
  const __CFArray *Mutable;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint8_t buf[4];
  char *v15;
  char __str[100];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  (*(void (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 184))(this);
  v3 = (_QWORD *)*((_QWORD *)this + 27);
  v4 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 96))(this);
  v5 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 104))(this);
  CVTracePoolAction(1, v3, 0, "being deallocated", v4, v5);
  v6 = (const void *)*((_QWORD *)this + 27);
  LODWORD(v3) = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 96))(this);
  LODWORD(v4) = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 104))(this);
  v7 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 240))(this);
  snprintf(__str, 0x64uLL, "pool %p being deallocated [%d in use, %d free] _targetBufferCountsBitfield 0x%x \n", v6, (_DWORD)v3, v4, v7);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v15 = __str;
    _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  v8 = *((_QWORD *)this + 29);
  if (v8)
  {
    CVAtomicBunchApply(v8, (uint64_t (*)(uint64_t, _QWORD))_invalidateBacking, (uint64_t)Mutable);
    CVAtomicBunchDestroy(*((OSQueueHead **)this + 29));
  }
  *((_QWORD *)this + 29) = 0;
  v9 = *((_QWORD *)this + 28);
  if (v9)
  {
    CVAtomicBunchApply(v9, (uint64_t (*)(uint64_t, _QWORD))_invalidateBacking, (uint64_t)Mutable);
    CVAtomicBunchDestroy(*((OSQueueHead **)this + 28));
  }
  *((_QWORD *)this + 28) = 0;
  (*(void (**)(CVLocklessBunchPair *, _QWORD))(*(_QWORD *)this + 152))(this, 0);
  (*(void (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 192))(this);
  Count = CFArrayGetCount(Mutable);
  if (Count >= 1)
  {
    v11 = Count;
    for (i = 0; i != v11; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
      CFRelease(ValueAtIndex);
    }
  }
  CFRelease(Mutable);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  CVPixelBufferPool **v7;
  __CVPixelBufferPool *v8;
  CVReturn result;
  CVReturn v10;

  v10 = -6660;
  if (!poolOut)
    return -6661;
  *poolOut = 0;
  v7 = CVPixelBufferPool::alloc(allocator, poolAttributes);
  if (!v7)
    return -6662;
  v8 = (__CVPixelBufferPool *)v7;
  if (!(*(uint64_t (**)(CVPixelBufferPool *, CFDictionaryRef, CFDictionaryRef, CVReturn *))(*(_QWORD *)v7[2] + 96))(v7[2], poolAttributes, pixelBufferAttributes, &v10))return v10;
  result = 0;
  *poolOut = v8;
  return result;
}

CFTypeRef *CVPixelBufferPool::initWithOptions(CFTypeRef *this, const __CFDictionary *a2, const __CFDictionary *a3, int *a4)
{
  CFTypeRef *v7;
  const __CFAllocator *v8;
  CFDictionaryRef Copy;
  const __CFNumber *Value;
  const __CFNumber *v11;
  CFTypeID v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFTypeID v15;
  const __CFString *v16;
  const __CFString *v17;
  CFTypeID v18;
  CFTypeRef v19;
  const void *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  uint64_t v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  uint64_t v28;
  const void *v29;
  const void *ValueAtIndex;
  CFTypeID v31;
  CFTypeID v32;
  _BOOL4 v33;
  int v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CFTypeID v73;
  CFTypeID v74;
  const void *v75;
  CFTypeID v76;
  _BOOL4 v77;
  const __CFDictionary *MutableCopy;
  const void *v79;
  const void *v80;
  CFTypeID v81;
  CFTypeID v82;
  __CFDictionary *Mutable;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __CFDictionary *v92;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE valuePtr[24];
  char __str[128];
  char buffer[256];
  uint64_t v105;

  v7 = this;
  v105 = *MEMORY[0x1E0C80C00];
  v8 = CFGetAllocator(this[1]);
  v100 = 0;
  v101 = 0;
  v99 = 0;
  buffer[0] = 0;
  if (!CVBufferPool::init(v7))
  {
    v7 = 0;
    *a4 = -6660;
    return v7;
  }
  (*((void (**)(CFTypeRef *, double))*v7 + 16))(v7, 1.0);
  if (a2)
  {
    *(_QWORD *)__str = 0;
    Copy = CFDictionaryCreateCopy(v8, a2);
    v7[4] = Copy;
    if (!Copy)
    {
LABEL_67:
      v34 = -6662;
      goto LABEL_68;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("MaximumBufferAge"));
    if (Value)
    {
      v11 = Value;
      *(_QWORD *)valuePtr = 0;
      v12 = CFGetTypeID(Value);
      if (v12 != CFNumberGetTypeID())
        goto LABEL_30;
      CFNumberGetValue(v11, kCFNumberDoubleType, valuePtr);
      (*((void (**)(CFTypeRef *, double))*v7 + 16))(v7, *(double *)valuePtr);
    }
    v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("MinimumBufferCount"));
    if (v13)
    {
      v14 = v13;
      v15 = CFGetTypeID(v13);
      if (v15 != CFNumberGetTypeID())
        goto LABEL_30;
      CFNumberGetValue(v14, kCFNumberCFIndexType, __str);
      (*((void (**)(CFTypeRef *, _QWORD, _QWORD, _QWORD, _QWORD))*v7 + 18))(v7, *(_QWORD *)__str, 0, 0, *MEMORY[0x1E0C9AE00]);
    }
    v16 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("PixelBufferPoolNameKey"));
    if (!v16)
    {
LABEL_15:
      v20 = CFDictionaryGetValue(a2, CFSTR("PrefetchOnAllocation"));
      if (v20 && CFEqual(v20, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        *((_BYTE *)v7 + 136) = 1;
      goto LABEL_18;
    }
    v17 = v16;
    v18 = CFGetTypeID(v16);
    if (v18 == CFStringGetTypeID())
    {
      CFRetain(v17);
      v19 = v7[3];
      if (v19)
        CFRelease(v19);
      v7[3] = v17;
      CFStringGetCString(v17, buffer, 256, 0x600u);
      goto LABEL_15;
    }
LABEL_30:
    v34 = -6691;
LABEL_68:
    *a4 = v34;
    goto LABEL_69;
  }
LABEL_18:
  if (!a3)
  {
    *a4 = -6682;
    v43 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v43)
      CVPixelBufferPool::initWithOptions(v43, v44, v45, v46, v47, v48, v49, v50);
    goto LABEL_69;
  }
  v21 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("Width"));
  if (!v21 || (v22 = v21, v23 = CFGetTypeID(v21), v23 != CFNumberGetTypeID()))
  {
    *a4 = -6682;
    v35 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v35)
      CVPixelBufferPool::initWithOptions(v35, v36, v37, v38, v39, v40, v41, v42);
    goto LABEL_69;
  }
  CFNumberGetValue(v22, kCFNumberCFIndexType, &v101);
  v24 = v101;
  if (v101 <= 0)
  {
    *a4 = -6682;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      CVPixelBufferPool::initWithOptions(v24, v59, v60, v61, v62, v63, v64, v65);
    goto LABEL_69;
  }
  v25 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("Height"));
  if (!v25 || (v26 = v25, v27 = CFGetTypeID(v25), v27 != CFNumberGetTypeID()))
  {
    *a4 = -6682;
    v51 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v51)
      CVPixelBufferPool::initWithOptions(v51, v52, v53, v54, v55, v56, v57, v58);
    goto LABEL_69;
  }
  CFNumberGetValue(v26, kCFNumberCFIndexType, &v100);
  v28 = v100;
  if (v100 <= 0)
  {
    *a4 = -6682;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      CVPixelBufferPool::initWithOptions(v28, v66, v67, v68, v69, v70, v71, v72);
    goto LABEL_69;
  }
  v29 = CFDictionaryGetValue(a3, CFSTR("PixelFormatType"));
  if (v29)
  {
    ValueAtIndex = v29;
    v31 = CFGetTypeID(v29);
    v33 = 1;
    if (v31 != CFNumberGetTypeID())
    {
      v32 = CFGetTypeID(ValueAtIndex);
      if (v32 != CFArrayGetTypeID())
        v33 = 0;
    }
    v73 = CFGetTypeID(ValueAtIndex);
    if (v73 != CFArrayGetTypeID()
      || !CFArrayGetCount((CFArrayRef)ValueAtIndex)
      || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) != 0)
    {
      v74 = CFGetTypeID(ValueAtIndex);
      if (v74 == CFNumberGetTypeID())
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &v99);
    }
  }
  else
  {
    v33 = 0;
  }
  v75 = CFDictionaryGetValue(a3, CFSTR("PixelFormatDescription"));
  if (v75)
  {
    v76 = CFGetTypeID(v75);
    v77 = v76 == CFDictionaryGetTypeID();
  }
  else
  {
    v77 = 0;
  }
  if (!v33 && !v77)
  {
    *a4 = -6682;
    v84 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v84)
      CVPixelBufferPool::initWithOptions(v84, v85, v86, v87, v88, v89, v90, v91);
    goto LABEL_69;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, a3);
  v7[5] = MutableCopy;
  if (!MutableCopy)
    goto LABEL_67;
  v79 = CFDictionaryGetValue(MutableCopy, CFSTR("IOSurfaceProperties"));
  if (v79)
  {
    v80 = v79;
    v81 = CFGetTypeID(v79);
    if (v81 != CFDictionaryGetTypeID() && !forceIOSurfaceBackingByDefault())
      goto LABEL_64;
    v82 = CFGetTypeID(v80);
    if (v82 == CFDictionaryGetTypeID())
    {
      Mutable = CFDictionaryCreateMutableCopy(v8, 0, (CFDictionaryRef)v80);
      goto LABEL_62;
    }
  }
  else if (!forceIOSurfaceBackingByDefault())
  {
    if (!CVIsPixelFormatCompressed(v99))
      goto LABEL_64;
    v97 = v99;
    v98 = HIBYTE(v99);
    *a4 = -6662;
    snprintf(__str, 0x80uLL, "CoreVideo: Error, CVPixelBufferPoolCreate() for non-IOSurface backed compressed format %c%c%c%c is not allowed.", v98, BYTE2(v97), BYTE1(v97), v97);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 136315138;
      *(_QWORD *)&valuePtr[4] = __str;
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", valuePtr, 0xCu);
    }
LABEL_69:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  Mutable = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
LABEL_62:
  v92 = Mutable;
  if (!Mutable)
    goto LABEL_67;
  CFDictionarySetValue(Mutable, CFSTR("IOSurfacePurgeWhenNotInUse"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue((CFMutableDictionaryRef)v7[5], CFSTR("IOSurfaceProperties"), v92);
  CFRelease(v92);
LABEL_64:
  *a4 = 0;
  if (CVTracePools(1))
  {
    valuePtr[4] = 0;
    if (v99 > 0x63)
      *(_DWORD *)valuePtr = bswap32(v99);
    else
      snprintf(valuePtr, 5uLL, "%d", v99);
    snprintf(__str, 0x32uLL, "allocated (%d x %d, %s)", v101, v100, valuePtr);
    v94 = (_QWORD *)(*((uint64_t (**)(CFTypeRef *))*v7 + 3))(v7);
    v95 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v7[2] + 96))(v7[2]);
    v96 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v7[2] + 104))(v7[2]);
    CVTracePoolAction(1, v94, 0, __str, v95, v96);
  }
  (*((void (**)(CFTypeRef *, char *, _QWORD, uint64_t, uint64_t))*v7 + 3))(v7, buffer, v99, v101, v100);
  kdebug_trace();
  return v7;
}

uint64_t CVLocklessBunchPair::setMaximumBufferAge(CVLocklessBunchPair *this, double a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;

  v3 = (unint64_t *)((char *)this + 240);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4, v3));
  HIDWORD(v5) = 1104006501;
  v6 = a2 * 1000000000.0;
  v7 = (unint64_t)v6;
  if (!CVHostTimeBase::sIsInited)
    v6 = CVHostTimeBase::Initialize(this);
  LODWORD(v6) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v5) = CVHostTimeBase::sToNanosDenominator;
  v8 = (unint64_t)((double)v7 / (double)*(unint64_t *)&v6 * (double)v5);
  do
  {
    v9 = __ldxr(v3);
    if (v9 != v4)
    {
      while (1)
      {
        __clrex();
        do
          v11 = __ldxr(v3);
        while (__stxr(v11, v3));
        while (1)
        {
          v12 = __ldxr(v3);
          if (v12 != v11)
            break;
          if (!__stxr(v8, v3))
            goto LABEL_8;
        }
      }
    }
  }
  while (__stxr(v8, v3));
LABEL_8:
  (*(void (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 136))(this);
  return 0;
}

uint64_t CVPixelBufferPool::setMaximumBufferAge(CVPixelBufferPool *this, double a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2), a2);
}

CFTypeRef *CVBufferPool::init(CFTypeRef *this)
{
  CFTypeRef *v1;
  CFAllocatorRef v2;

  v1 = this;
  v2 = CFGetAllocator(this[1]);
  v1[3] = 0;
  if (((*((uint64_t (**)(CFTypeRef *, CFAllocatorRef))*v1 + 7))(v1, v2) & 1) == 0)
  {
    (*((void (**)(CFTypeRef *))*v1 + 5))(v1);
    return 0;
  }
  return v1;
}

_QWORD *CVLocklessBunchPair::init(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;

  (*(void (**)(_QWORD *))(*a1 + 152))(a1);
  result = CVAtomicBunchNew(0x10u, 0);
  a1[28] = result;
  if (result)
  {
    v3 = CVAtomicBunchNew(0x10u, (uint64_t)result);
    a1[29] = v3;
    return (_QWORD *)(v3 != 0);
  }
  return result;
}

_QWORD *CVAtomicBunchNew(unsigned int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char v7;

  v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x10B00403F1EF37AuLL);
  v5 = v4;
  if (v4)
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    if (a2)
    {
      v6 = *(char **)(a2 + 32);
      if (v6 != (char *)(a2 + 28))
        CVAtomicBunchNew();
      v7 = 16;
    }
    else
    {
      v7 = 0;
      v6 = (char *)v4 + 28;
    }
    v4[4] = v6;
    *((_BYTE *)v4 + 40) = v7;
    CVAtomicBunchIncreaseSizeAndReserveElement((uint64_t)v4, a1, 0);
  }
  return v5;
}

uint64_t CVAtomicBunchIncreaseSizeAndReserveElement(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v6 = 24 * a2 + 8;
  v7 = (char *)malloc_type_malloc(v6, 0x4565F83uLL);
  if (!v7)
    return 3;
  v8 = v7;
  bzero(v7, v6);
  OSAtomicEnqueue((OSQueueHead *)a1, v8, 0);
  if (a3)
  {
    *a3 = v8 + 8;
    ElementModifyFlags((uint64_t)(v8 + 8), 1, 0x10000);
  }
  if (a2)
  {
    v9 = 0;
    v10 = (uint64_t *)(a1 + 16);
    v11 = v8 + 8;
    do
    {
      do
      {
        v12 = *v10;
        *(_QWORD *)&v11[24 * v9] = *v10;
      }
      while (!CVAtomicCompareAndSwapPtrBarrier(v12, (unint64_t)&v11[24 * v9], (unint64_t *)(a1 + 16)));
      ++v9;
    }
    while (v9 != a2);
  }
  v13 = (unsigned int *)(a1 + 24);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + a2, v13));
  return 1;
}

uint64_t CVAtomicCompareAndSwapPtrBarrier(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t result;

  while (1)
  {
    v3 = __ldaxr(a3);
    if (v3 != a1)
      break;
    if (!__stlxr(a2, a3))
      return 1;
  }
  result = 0;
  __clrex();
  return result;
}

uint64_t CVLocklessBunchPair::setBufferPool(uint64_t result, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (unint64_t *)(result + 216);
LABEL_2:
  v3 = *v2;
  do
  {
    v4 = __ldxr(v2);
    if (v4 != v3)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stxr(a2, v2));
  return result;
}

CVPixelBufferPool **CVPixelBufferPool::alloc(CVPixelBufferPool *this, const __CFAllocator *a2)
{
  CVPixelBufferPool **v3;
  CVPixelBufferPool **v4;

  if (_cvUseTrackingAllocator)
    this = (CVPixelBufferPool *)_cvTrackingGetCFAllocator(CFSTR("CVPixelBufferPool"));
  if (CVPixelBufferPoolGetTypeID::once != -1)
    dispatch_once_f(&CVPixelBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferPool);
  v3 = (CVPixelBufferPool **)CVObject::alloc((CVObject *)kCVPixelBufferPoolID, (unint64_t)this, (const __CFAllocator *)0x18, 0x90uLL);
  v4 = v3;
  if (v3)
    CVPixelBufferPool::CVPixelBufferPool(v3[2], v3);
  return v4;
}

void CVPixelBufferPool::CVPixelBufferPool(CVPixelBufferPool *this, const void *a2)
{
  _QWORD *v3;
  int AppBooleanValue;

  CVBufferPool::CVBufferPool(this, a2);
  *v3 = off_1E48A3130;
  v3[4] = 0;
  v3[5] = 0;
  if ((shouldPrefetchOnAllocationByDefault(void)::sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("pool_prefetch"), CFSTR("com.apple.corevideo"), 0);
    shouldPrefetchOnAllocationByDefault(void)::sShouldPrefetchOnAllocation = AppBooleanValue;
    if (AppBooleanValue)
      syslog(3, "CoreVideo: Will enable CVPixelBufferPool allocation prefetch by default -- thank you for setting \"defaults write com.apple.corevideo pool_prefetch -BOOL YES\"\n");
    shouldPrefetchOnAllocationByDefault(void)::sDidCheck = 1;
  }
  *((_BYTE *)this + 136) = shouldPrefetchOnAllocationByDefault(void)::sShouldPrefetchOnAllocation;
  pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  *((_DWORD *)this + 15) = 16;
  *((_QWORD *)this + 16) = malloc_type_calloc(1uLL, 0x100uLL, 0x10C004028F705ECuLL);
}

void CVBufferPool::CVBufferPool(CVBufferPool *this, const void *a2)
{
  _QWORD *v2;

  CVObject::CVObject(this, a2);
  *v2 = off_1E48A27F0;
}

CVBunchPair **CVPixelBufferPool::initBunchPair(CVPixelBufferPool *this, const __CFAllocator *a2)
{
  CVBunchPair **result;
  CVBunchPair *v5;

  result = CVLocklessBunchPair::alloc(a2, a2);
  if (result)
  {
    v5 = result[2];
    *((_QWORD *)this + 2) = v5;
    return (CVBunchPair **)(*(uint64_t (**)(CVBunchPair *, _QWORD, const __CFAllocator *))(*(_QWORD *)v5 + 272))(v5, *((_QWORD *)this + 1), a2);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return result;
}

CVBunchPair **CVLocklessBunchPair::alloc(CVLocklessBunchPair *this, const __CFAllocator *a2)
{
  CVBunchPair **v3;
  CVBunchPair **v4;
  uint64_t v5;

  if (_cvUseTrackingAllocator)
    this = (CVLocklessBunchPair *)_cvTrackingGetCFAllocator(CFSTR("CVLocklessBunchPair"));
  if (CVLocklessBunchPairGetTypeID(void)::once != -1)
    dispatch_once_f(&CVLocklessBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLocklessBunchPair);
  v3 = (CVBunchPair **)CVObject::alloc((CVObject *)kCVLocklessBunchPairID, (unint64_t)this, (const __CFAllocator *)0x18, 0x100uLL);
  v4 = v3;
  if (v3)
  {
    CVBunchPair::CVBunchPair(v3[2], v3);
    *(_QWORD *)v5 = off_1E48A34B8;
    *(_QWORD *)(v5 + 224) = 0;
    *(_QWORD *)(v5 + 232) = 0;
    *(_QWORD *)(v5 + 240) = 0;
    *(_DWORD *)(v5 + 248) = 0;
  }
  return v4;
}

void CVBunchPair::CVBunchPair(CVBunchPair *this, const void *a2)
{
  uint64_t v2;

  CVObject::CVObject(this, a2);
  *(_QWORD *)v2 = off_1E48A26D0;
  pthread_rwlock_init((pthread_rwlock_t *)(v2 + 16), 0);
}

uint64_t CVPixelBufferPool::setMinimumBufferCount(pthread_mutex_t *this, uint64_t a2, const void *a3, int a4, const __CFAllocator *a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *sig;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  BOOL v19;

  v10 = this + 1;
  pthread_mutex_lock(this + 1);
  v11 = *(unsigned int *)&this->__opaque[48];
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)(this[2].__sig + 8);
    v13 = *(unsigned int *)&this->__opaque[48];
    while ((const void *)*(v12 - 1) != a3)
    {
      v12 += 2;
      if (!--v13)
        goto LABEL_5;
    }
    v17 = a2 - *v12;
    *v12 = a2;
  }
  else
  {
LABEL_5:
    sig = (char *)this[2].__sig;
    if (*(_DWORD *)&this->__opaque[52] == (_DWORD)v11)
    {
      v15 = v11 + 16;
      *(_DWORD *)&this->__opaque[52] = v15;
      sig = (char *)malloc_type_realloc(sig, 16 * v15, 0x10C004028F705ECuLL);
      this[2].__sig = (uint64_t)sig;
      v11 = *(unsigned int *)&this->__opaque[48];
    }
    v16 = &sig[16 * v11];
    *(_QWORD *)v16 = a3;
    *((_QWORD *)v16 + 1) = a2;
    *(_DWORD *)&this->__opaque[48] = v11 + 1;
    v17 = a2;
  }
  pthread_mutex_unlock(v10);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)&this->__opaque[8] + 216))(*(_QWORD *)&this->__opaque[8], a2);
  if ((_DWORD)result)
    v19 = 1;
  else
    v19 = a4 == 0;
  if (!v19)
  {
    if (v17 < 1)
    {
      if (v17 < 0)
        (*(void (**)(pthread_mutex_t *, uint64_t))(this->__sig + 184))(this, 1);
      return 0;
    }
    else
    {
      return (*(uint64_t (**)(pthread_mutex_t *, const __CFAllocator *, uint64_t))(this->__sig + 160))(this, a5, 1);
    }
  }
  return result;
}

uint64_t CVLocklessBunchPair::setMinimumBufferCount(CVLocklessBunchPair *this, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v9;

  v4 = (unsigned int *)((char *)this + 248);
LABEL_2:
  v5 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 232))(this);
  v9 = *((_DWORD *)this + 62);
  v6 = ((_DWORD)a2 - (_DWORD)v5) << 16;
  if (a2 < v5)
    v6 = 0;
  do
  {
    v7 = __ldxr(v4);
    if (v7 != v9)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stxr((((v9 & 0xFFFF0000) + a2) & 0xFF00FFFF) + v6, v4));
  return 0;
}

uint64_t CVLocklessBunchPair::getTotalBufferCount(CVLocklessBunchPair *this)
{
  return (int)CVAtomicBunchGetSharedCount(*((_QWORD *)this + 28));
}

uint64_t CVAtomicBunchGetSharedCount(uint64_t a1)
{
  return HIWORD(**(_DWORD **)(a1 + 32)) + (unsigned __int16)**(_DWORD **)(a1 + 32);
}

uint64_t CVLocklessBunchPair::getTargetBufferCountsBitfield(CVLocklessBunchPair *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t CVBunchPair::enterBackingsCriticalWriteSection(CVBunchPair *this)
{
  return pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 16));
}

void CVAtomicBunchDestroy(OSQueueHead *__list)
{
  void *v2;

  if (__list)
  {
    while (1)
    {
      v2 = OSAtomicDequeue(__list, 0);
      if (!v2)
        break;
      free(v2);
    }
    free(__list);
  }
}

CFMutableArrayRef CVLockingBunchPair::init(_QWORD *a1, uint64_t a2, const __CFAllocator *a3)
{
  CFMutableArrayRef result;
  CFMutableArrayRef Mutable;

  (*(void (**)(_QWORD *))(*a1 + 152))(a1);
  result = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
  a1[28] = result;
  if (result)
  {
    Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    a1[29] = Mutable;
    return (CFMutableArrayRef)(Mutable != 0);
  }
  return result;
}

uint64_t CVBunchPair::setBufferPool(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 216) = a2;
  return result;
}

CVLockingBunchPair **CVBufferPool::initBunchPair(CVBufferPool *this, const __CFAllocator *a2)
{
  CVLockingBunchPair **result;
  CVLockingBunchPair *v5;

  result = CVLockingBunchPair::alloc(a2, a2);
  if (result)
  {
    v5 = result[2];
    *((_QWORD *)this + 2) = v5;
    return (CVLockingBunchPair **)(*(uint64_t (**)(CVLockingBunchPair *, _QWORD, const __CFAllocator *))(*(_QWORD *)v5 + 272))(v5, *((_QWORD *)this + 1), a2);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return result;
}

CVLockingBunchPair **CVLockingBunchPair::alloc(CVLockingBunchPair *this, const __CFAllocator *a2)
{
  CVLockingBunchPair **v3;
  CVLockingBunchPair **v4;

  if (_cvUseTrackingAllocator)
    this = (CVLockingBunchPair *)_cvTrackingGetCFAllocator(CFSTR("CVLockingBunchPair"));
  if (CVLockingBunchPairGetTypeID(void)::once != -1)
    dispatch_once_f(&CVLockingBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLockingBunchPair);
  v3 = (CVLockingBunchPair **)CVObject::alloc((CVObject *)kCVLockingBunchPairID, (unint64_t)this, (const __CFAllocator *)0x18, 0x138uLL);
  v4 = v3;
  if (v3)
    CVLockingBunchPair::CVLockingBunchPair(v3[2], v3);
  return v4;
}

void CVLockingBunchPair::CVLockingBunchPair(CVLockingBunchPair *this, const void *a2)
{
  uint64_t v2;
  CVLockingBunchPair *v3;

  CVBunchPair::CVBunchPair(this, a2);
  *(_QWORD *)v2 = off_1E48A3218;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_DWORD *)(v2 + 256) = 0;
  v3 = (CVLockingBunchPair *)pthread_cond_init((pthread_cond_t *)(v2 + 264), 0);
  if (!CVLockingBunchPair::_bufferPoolMutex)
    CVLockingBunchPair::initCVBufferPoolMutex(v3);
}

uint64_t CVLockingBunchPair::cleanup(CVLockingBunchPair *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  __CFArray *v7;
  __CFArray *v8;
  CFRange v10;
  CFRange v11;

  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 184))(this);
  v2 = (_QWORD *)*((_QWORD *)this + 27);
  v3 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
  v4 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
  CVTracePoolAction(1, v2, 0, "being deallocated", v3, v4);
  v5 = (const __CFArray *)*((_QWORD *)this + 28);
  if (v5)
  {
    v10.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
    v10.location = 0;
    CFArrayApplyFunction(v5, v10, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  v6 = (const __CFArray *)*((_QWORD *)this + 29);
  if (v6)
  {
    v11.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
    v11.location = 0;
    CFArrayApplyFunction(v6, v11, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  (*(void (**)(CVLockingBunchPair *, _QWORD))(*(_QWORD *)this + 152))(this, 0);
  v7 = (__CFArray *)*((_QWORD *)this + 28);
  if (v7)
  {
    CFArrayRemoveAllValues(v7);
    CFRelease(*((CFTypeRef *)this + 28));
  }
  *((_QWORD *)this + 28) = 0;
  v8 = (__CFArray *)*((_QWORD *)this + 29);
  if (v8)
  {
    CFArrayRemoveAllValues(v8);
    CFRelease(*((CFTypeRef *)this + 29));
  }
  *((_QWORD *)this + 29) = 0;
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 192))(this);
  return (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
}

uint64_t CVLockingBunchPair::exitBackingsCriticalSection(CVLockingBunchPair *this)
{
  uint64_t v2;

  v2 = pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 16));
  if (CVAddAtomic(0, (unsigned int *)this + 64))
  {
    (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
    pthread_cond_broadcast((pthread_cond_t *)((char *)this + 264));
    (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  }
  return v2;
}

uint64_t CVAddAtomic(int a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;

_CVAddAtomic:
  v2 = *a2;
  do
  {
    v3 = __ldaxr(a2);
    if (v3 != (_DWORD)v2)
    {
      __clrex();
      goto _CVAddAtomic;
    }
  }
  while (__stlxr(v2 + a1, a2));
  return v2;
}

const __CFArray *CVLockingBunchPair::getUsedBackingsCount(CVLockingBunchPair *this)
{
  const __CFArray *result;

  result = (const __CFArray *)*((_QWORD *)this + 29);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *CVLockingBunchPair::getFreeBackingsCount(CVLockingBunchPair *this)
{
  const __CFArray *result;

  result = (const __CFArray *)*((_QWORD *)this + 28);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t CVLockingBunchPair::enterCriticalSection(CVLockingBunchPair *this)
{
  return pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVLockingBunchPair::enterBackingsCriticalWriteSection(CVLockingBunchPair *this)
{
  unsigned int *v2;
  pthread_rwlock_t *v3;
  uint64_t v4;
  pthread_cond_t *v5;
  uint64_t v6;

  v2 = (unsigned int *)((char *)this + 256);
  CVIncrementAtomic((unsigned int *)this + 64);
  v3 = (pthread_rwlock_t *)((char *)this + 16);
  v4 = pthread_rwlock_trywrlock((pthread_rwlock_t *)((char *)this + 16));
  if ((_DWORD)v4 == 16)
  {
    v5 = (pthread_cond_t *)((char *)this + 264);
    do
    {
      pthread_cond_wait(v5, (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
      v6 = pthread_rwlock_trywrlock(v3);
    }
    while ((_DWORD)v6 == 16);
    v4 = v6;
  }
  CVDecrementAtomic(v2);
  return v4;
}

unint64_t CVHostTimeBase::ConvertFromNanos(CVHostTimeBase *this, double a2, double a3)
{
  if (!CVHostTimeBase::sIsInited)
    a2 = CVHostTimeBase::Initialize(this);
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (unint64_t)((double)(unint64_t)this
                          / (double)*(unint64_t *)&a2
                          * (double)*(unint64_t *)&a3);
}

uint64_t CVLockingBunchPair::initCVBufferPoolMutex(CVLockingBunchPair *this)
{
  pthread_mutex_t *v1;
  pthread_mutexattr_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  pthread_mutex_init(v1, &v4);
  while (!__ldxr((unint64_t *)&CVLockingBunchPair::_bufferPoolMutex))
  {
    if (!__stxr((unint64_t)v1, (unint64_t *)&CVLockingBunchPair::_bufferPoolMutex))
      return pthread_mutexattr_destroy(&v4);
  }
  __clrex();
  pthread_mutex_destroy(v1);
  free(v1);
  return pthread_mutexattr_destroy(&v4);
}

double CVHostTimeBase::Initialize(CVHostTimeBase *this)
{
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  CVHostTimeBase::sMinDelta = 1;
  CVHostTimeBase::sToNanosNumerator = info.numer;
  CVHostTimeBase::sToNanosDenominator = info.denom;
  CVHostTimeBase::sFromNanosNumerator = info.denom;
  CVHostTimeBase::sFromNanosDenominator = info.numer;
  result = (double)info.denom / (double)info.numer * 1000000000.0;
  *(double *)&CVHostTimeBase::sFrequency = result;
  CVHostTimeBase::sIsInited = 1;
  return result;
}

uint64_t classFinalize_CVLocklessBunchPair(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

uint64_t classFinalize_CVPixelBufferPool(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  _QWORD *CVMetalTextureCache;
  _QWORD *CVImageBuffer;
  BOOL v18;
  CVReturn v21;

  CVMetalTextureCache = _getCVMetalTextureCache(textureCache);
  CVImageBuffer = _getCVImageBuffer(sourceImage);
  v21 = -6660;
  if (textureOut)
    v18 = CVMetalTextureCache == 0;
  else
    v18 = 1;
  if (v18 || CVImageBuffer == 0)
    return -6661;
  *textureOut = (CVMetalTextureRef)(*(uint64_t (**)(_QWORD *, CFAllocatorRef, _QWORD *, CFDictionaryRef, MTLPixelFormat, size_t, size_t, size_t, _QWORD, _BYTE, CVReturn *))(*CVMetalTextureCache + 104))(CVMetalTextureCache, allocator, CVImageBuffer, textureAttributes, pixelFormat, width, height, planeIndex, 0, 0, &v21);
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*CVMetalTextureCache + 120))(CVMetalTextureCache, 0, 0);
  return v21;
}

CVImageBuffer **CVMetalTextureCache::createTextureFromImageWithParams(CFDictionaryRef *this, const __CFAllocator *a2, CVImageBuffer *a3, const __CFDictionary *cf, uint64_t a5, int a6, int a7, uint64_t a8, unint64_t a9, char a10, int *a11)
{
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  _BOOL4 v20;
  CFDataRef v21;
  __CFDictionary *Mutable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFAllocator *v27;
  CVImageBuffer **v28;
  CVImageBuffer **v29;
  __CVBuffer *v30;
  int v31;
  uint64_t v33;
  uint64_t valuePtr;
  UInt8 bytes[8];
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[10];
  CFDictionaryRef theDict;

  theDict = 0;
  v38 = a5;
  v39 = a6;
  v40 = a7;
  *(_QWORD *)bytes = a8;
  v36 = a9;
  v37 = a10;
  memset(v41, 0, sizeof(v41));
  CVCreateMergedDictionary(this[10], cf, &theDict);
  if (theDict)
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MetalTextureUsage"));
    if (Value)
    {
      v15 = Value;
      v16 = CFGetTypeID(Value);
      if (v16 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v15, kCFNumberCFIndexType, &valuePtr))
        {
          *(_DWORD *)&v41[1] = valuePtr;
          v41[0] = 1;
        }
      }
    }
    v33 = 0;
    v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MetalTextureStorageMode"));
    if (v17)
    {
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v18, kCFNumberCFIndexType, &v33))
        {
          *(_DWORD *)&v41[6] = v33;
          v41[5] = 1;
        }
      }
    }
    v20 = CVDictionaryGetBoolValueWithDefault(theDict, CFSTR("MetalTextureCacheDoNotIncrementUseCount"), 0) != 0;
  }
  else
  {
    v20 = 0;
  }
  v21 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 51);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("TextureParams"), v21);
  CFRelease(v21);
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v23 = (*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 160))(a3);
  v24 = (*((uint64_t (**)(CFDictionaryRef *, const __CFAllocator *, uint64_t, CVImageBuffer *, __CFDictionary *, int *))*this
         + 14))(this, a2, v23, a3, Mutable, a11);
  if (v24)
  {
    v25 = v24;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    v28 = CVMetalTexture::alloc(a2, v27);
    v29 = v28;
    if (v28)
    {
      if (v20)
        CVDataBuffer::setDoNotAutomaticallyBumpUseCount((uint64_t)v28[2]);
      if ((*(uint64_t (**)(CVImageBuffer *, _QWORD))(*(_QWORD *)v29[2] + 248))(v29[2], *(_QWORD *)(v26 + 16)))
      {
        (*(void (**)(CVImageBuffer *, CFDictionaryRef))(*(_QWORD *)v29[2] + 144))(v29[2], theDict);
        v30 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 24))(a3);
        CVBufferPropagateAttachments(v30, (CVBufferRef)v29);
        (*(void (**)(uint64_t, CVImageBuffer *, CVImageBuffer *))(*(_QWORD *)v25 + 288))(v25, a3, v29[2]);
        v31 = 0;
      }
      else
      {
        v31 = -6660;
      }
    }
    else
    {
      v31 = -6690;
    }
    *a11 = v31;
  }
  else
  {
    v29 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  if (Mutable)
    CFRelease(Mutable);
  if (theDict)
    CFRelease(theDict);
  return v29;
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  _QWORD *CVBuffer;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;

  CVBuffer = _getCVBuffer(sourceBuffer);
  v4 = _getCVBuffer(destinationBuffer);
  if (CVBuffer)
  {
    if (v4)
    {
      if (CVBuffer != v4)
      {
        v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*CVBuffer + 72))(CVBuffer, 1);
        if (v5)
        {
          v6 = (const void *)v5;
          v7 = _getCVBuffer(destinationBuffer);
          if (v7)
            (*(void (**)(_QWORD *, const void *, uint64_t))(*v7 + 136))(v7, v6, 1);
          CFRelease(v6);
        }
      }
    }
  }
}

CFDictionaryRef CVBuffer::copyAttachments(CVBuffer *this, unsigned int a2)
{
  CFDictionaryRef Copy;
  pthread_mutex_t *v5;
  const __CFDictionary *v6;

  if (a2 > 1)
    return 0;
  v5 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v6 = (const __CFDictionary *)*((_QWORD *)this + a2 + 10);
  if (v6)
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  else
    Copy = 0;
  pthread_mutex_unlock(v5);
  return Copy;
}

const void *CVBuffer::setDefaultAttachments(const void *this, CFDictionaryRef theDict)
{
  const void *v3;
  const void *Value;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  CFTypeID v8;

  if (theDict)
  {
    v3 = this;
    Value = CFDictionaryGetValue(theDict, CFSTR("PropagatedAttachments"));
    if (Value)
    {
      v5 = Value;
      v6 = CFGetTypeID(Value);
      if (v6 == CFDictionaryGetTypeID())
        (*(void (**)(const void *, const void *, uint64_t))(*(_QWORD *)v3 + 136))(v3, v5, 1);
    }
    this = CFDictionaryGetValue(theDict, CFSTR("NonPropagatedAttachments"));
    if (this)
    {
      v7 = this;
      v8 = CFGetTypeID(this);
      this = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v8 == this)
        return (const void *)(*(uint64_t (**)(const void *, const void *, _QWORD))(*(_QWORD *)v3 + 136))(v3, v7, 0);
    }
  }
  return this;
}

_QWORD *CVMetalTextureCache::createTextureBackingFromImageBacking(CVMetalTextureCache *this, const __CFAllocator *a2, CVImageBacking *a3, CVImageBuffer *a4, CFDictionaryRef theDict, int *a6)
{
  const void *Value;
  __IOSurface *v12;
  __IOSurface *v13;
  const __CFDictionary *v14;
  IOSurfaceID ID;
  const __CFArray *v16;
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  _QWORD **ValueAtIndex;
  const void *v22;
  _QWORD *v23;
  uint64_t v24;
  CFIndex v25;
  __CFDictionary *v26;
  IOSurfaceID v27;
  _QWORD *v28;
  _QWORD **v29;
  CFIndex v30;
  CFIndex v31;
  unsigned __int8 v32;
  CFDictionaryRef v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD **v38;
  _QWORD *v39;
  _QWORD **v40;
  CFIndex v41;
  CFIndex v42;
  _QWORD *v43;
  CVImageBuffer *v45;

  Value = CFDictionaryGetValue(theDict, CFSTR("TextureParams"));
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v12 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 152))(a3);
  if (v12)
  {
    v13 = v12;
    v45 = a4;
    v14 = (const __CFDictionary *)*((_QWORD *)this + 7);
    ID = IOSurfaceGetID(v12);
    v16 = (const __CFArray *)CFDictionaryGetValue(v14, (const void *)ID);
    if (v16)
    {
      Mutable = v16;
      Count = CFArrayGetCount(v16);
      if (Count >= 1)
      {
        v19 = Count;
        v20 = 0;
        while (1)
        {
          ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(Mutable, v20);
          v22 = (const void *)(*(uint64_t (**)(_QWORD *))(*ValueAtIndex[2] + 360))(ValueAtIndex[2]);
          if (CFEqual(v22, Value))
            break;
          if (v19 == ++v20)
            goto LABEL_13;
        }
        v39 = (_QWORD *)(*(uint64_t (**)(CVMetalTextureCache *))(*(_QWORD *)this + 24))(this);
        v40 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
        v41 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
        v42 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
        CVTracePoolAction(1, v39, v40, "CVMetalTextureCache: [IOSurface] Cache hit", v41, v42);
        v43 = ValueAtIndex[2];
        (*(void (**)(_QWORD *, CVImageBacking *))(*v43 + 256))(v43, a3);
        if (gCVKTraceEnabled)
        {
          IOSurfaceGetID(v13);
          (*(void (**)(_QWORD *))(*v43 + 264))(v43);
          kdebug_trace();
        }
        v34 = a6;
        goto LABEL_22;
      }
    }
    else
    {
      v24 = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 344))(a3);
      if (v24)
        v25 = 2 * v24;
      else
        v25 = 2;
      Mutable = CFArrayCreateMutable(a2, v25, MEMORY[0x1E0C9B378]);
      v26 = (__CFDictionary *)*((_QWORD *)this + 7);
      v27 = IOSurfaceGetID(v13);
      CFDictionarySetValue(v26, (const void *)v27, Mutable);
      CFRelease(Mutable);
    }
LABEL_13:
    v28 = (_QWORD *)(*(uint64_t (**)(CVMetalTextureCache *))(*(_QWORD *)this + 24))(this);
    v29 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
    v30 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
    v31 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
    CVTracePoolAction(1, v28, v29, "CVMetalTextureCache: [IOSurface] Cache miss", v30, v31);
    if ((v32 & 1) == 0
    {
      CVMetalTextureCache::createTextureBackingFromImageBacking(__CFAllocator const*,CVImageBacking *,CVImageBuffer *,__CFDictionary const*,int *)::ktrace_seed = arc4random();
    }
    ++CVMetalTextureCache::createTextureBackingFromImageBacking(__CFAllocator const*,CVImageBacking *,CVImageBuffer *,__CFDictionary const*,int *)::ktrace_seed;
    IOSurfaceGetID(v13);
    kdebug_trace();
    v33 = theDict;
    v34 = a6;
    v35 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, _QWORD, CFDictionaryRef, CVImageBuffer *, int *))(*(_QWORD *)a3 + 232))(a3, a2, *((_QWORD *)this + 4), v33, v45, a6);
    if (v35)
    {
      v36 = v35;
      v37 = *a6;
      v38 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
      ValueAtIndex = v38;
      if (!v37)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 96))(v36, *((_QWORD *)this + 2));
        (*(void (**)(uint64_t, __IOSurface *))(*(_QWORD *)v36 + 328))(v36, v13);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        CFArrayAppendValue(*((CFMutableArrayRef *)this + 8), ValueAtIndex);
        IOSurfaceGetID(v13);
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 264))(v36);
        kdebug_trace();
        CFRelease(ValueAtIndex);
LABEL_22:
        v23 = ValueAtIndex[2];
        *v34 = 0;
        goto LABEL_23;
      }
      CFRelease(v38);
    }
    IOSurfaceGetID(v13);
    kdebug_trace();
    v23 = 0;
  }
  else
  {
    v23 = 0;
  }
LABEL_23:
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v23;
}

void sub_1A2C5B7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CVPixelBufferBacking::getPlaneCount(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 130);
}

uint64_t CVMetalTextureBacking::getTexture(CVMetalTextureBacking *this)
{
  return *((_QWORD *)this + 25);
}

CFTypeRef CVMetalTextureBacking::setIOSurface(CVMetalTextureBacking *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = CFRetain(cf);
  *((_QWORD *)this + 26) = cf;
  return result;
}

CVMetalTextureBacking **CVPixelBufferBacking::createTextureBackingForDevice(CVPixelBufferBacking *this, const __CFAllocator *a2, CVBufferBacking *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  const __CFAllocator *v12;
  CVMetalTextureBacking **result;
  uint64_t v14;

  if (CVMetalBufferBacking::isBufferBackingSupported(this, a3, a3))
  {
    result = CVPixelBufferMetalTextureBacking::alloc(a2, v12);
    if (result)
    {
      v14 = (uint64_t)result;
      result = (CVMetalTextureBacking **)(*(uint64_t (**)(CVMetalTextureBacking *, CVPixelBufferBacking *, CVBufferBacking *, const __CFDictionary *, CVImageBuffer *, int *))(*(_QWORD *)result[2] + 368))(result[2], this, a3, a4, a5, a6);
      if (result)
        return *(CVMetalTextureBacking ***)(v14 + 16);
    }
  }
  else
  {
    result = 0;
    *a6 = -6684;
  }
  return result;
}

CVMetalTextureBacking **CVPixelBufferMetalTextureBacking::alloc(CVPixelBufferMetalTextureBacking *this, const __CFAllocator *a2)
{
  CVObject *TypeID;
  CVMetalTextureBacking **v4;
  CVMetalTextureBacking **v5;
  _QWORD *v6;

  if (_cvUseTrackingAllocator)
    this = (CVPixelBufferMetalTextureBacking *)_cvTrackingGetCFAllocator(CFSTR("CVPixelBufferMetalTextureBacking"));
  TypeID = (CVObject *)CVObjectGetTypeID();
  v4 = (CVMetalTextureBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x170uLL);
  v5 = v4;
  if (v4)
  {
    CVMetalTextureBacking::CVMetalTextureBacking(v4[2], v4);
    *v6 = off_1E48A3D00;
  }
  return v5;
}

BOOL CVMetalBufferBacking::isBufferBackingSupported(CVMetalBufferBacking *this, CVBufferBacking *a2, void *a3)
{
  return (*(uint64_t (**)(CVMetalBufferBacking *, CVBufferBacking *, void *))(*(_QWORD *)this + 152))(this, a2, a3) != 0;
}

CVPixelBufferMetalTextureBacking *CVPixelBufferMetalTextureBacking::initWithPixelBackingDevice(CVPixelBufferMetalTextureBacking *this, CVPixelBufferBacking *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  CVImageBuffer *v14;
  CFTypeRef v15;
  int v16;

  *((_QWORD *)this + 30) = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 272))(a2);
  v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 280))(a2);
  *((_QWORD *)this + 31) = v11;
  v12 = *((_QWORD *)this + 30);
  v13 = (*(unsigned int (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 200))(a2) != 0;
  CVMetalTextureBacking::initWithBackingDevice(this, a2, a3, v12, v11, v13);
  if (a4)
    v15 = CFRetain(a4);
  else
    v15 = 0;
  *((_QWORD *)this + 45) = v15;
  if (CVPixelBufferMetalTextureBacking::createTexture(this, v14))
    v16 = 0;
  else
    v16 = -6684;
  *a6 = v16;
  return this;
}

BOOL CVPixelBufferMetalTextureBacking::createTexture(CVPixelBufferMetalTextureBacking *this, CVImageBuffer *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFData *Value;
  const __CFData *v6;
  CFTypeID v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  UInt8 buffer[16];
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  int v26;
  CFRange v27;

  v3 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 35) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 320))(v3, 1);
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 37) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 296))(v3);
  *((_QWORD *)this + 33) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
  *((_QWORD *)this + 34) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
  *((_DWORD *)this + 85) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_DWORD *)this + 87) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_WORD *)this + 168) = 0;
  v4 = (const __CFDictionary *)*((_QWORD *)this + 45);
  if (v4)
  {
    Value = (const __CFData *)CFDictionaryGetValue(v4, CFSTR("TextureParams"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFDataGetTypeID() && CFDataGetLength(v6) == 51)
      {
        v27.length = CFDataGetLength(v6);
        v27.location = 0;
        CFDataGetBytes(v6, v27, buffer);
        *((_QWORD *)this + 34) = v22;
        *((_OWORD *)this + 16) = v21;
        *((_OWORD *)this + 20) = *(_OWORD *)buffer;
        *((_BYTE *)this + 336) = v20;
        *((_BYTE *)this + 337) = v23;
        *((_DWORD *)this + 85) = v24;
        *((_BYTE *)this + 344) = v25;
        *((_DWORD *)this + 87) = v26;
        *((_QWORD *)this + 28) = CFRetain(v6);
      }
    }
  }
  *((_DWORD *)this + 88) = 1;
  v8 = (void *)*((_QWORD *)this + 24);
  v9 = *((_QWORD *)this + 32);
  v10 = *((_QWORD *)this + 33);
  v11 = *((_QWORD *)this + 34);
  v12 = *((unsigned __int8 *)this + 337);
  v13 = *((_DWORD *)this + 85);
  v14 = *((unsigned __int8 *)this + 344);
  v15 = *((_DWORD *)this + 87);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  v17 = CVMTLTextureCreate(v8, v9, v10, v11, v12, v13, v14, v15, v16, *((_QWORD *)this + 40), *((_QWORD *)this + 41), *((_BYTE *)this + 336));
  *((_QWORD *)this + 25) = v17;
  return v17 != 0;
}

uint64_t CVPixelBuffer::getBaseAddress(CVPixelBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15))
       + *((_QWORD *)this + 12);
}

IOSurfaceRef CVPixelBufferBacking::getBaseAddress(CVPixelBufferBacking *this, char a2)
{
  if (!*((_DWORD *)this + 42) && (a2 & 1) != 0)
    return 0;
  if (*((_QWORD *)this + 57))
    return IOOrEXSurfaceGetBaseAddress(*((IOSurfaceRef *)this + 57));
  return (IOSurfaceRef)*((_QWORD *)this + 56);
}

uint64_t CVPixelBufferBacking::getBytesPerRow(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 126);
}

void CVMetalTextureBacking::CVMetalTextureBacking(CVMetalTextureBacking *this, const void *a2)
{
  _QWORD *v2;

  CVImageBacking::CVImageBacking(this, a2);
  *v2 = off_1E48A3960;
  v2[21] = 0;
  v2[28] = 0;
  v2[25] = 0;
  v2[26] = 0;
  v2[24] = 0;
}

CVMetalTextureBacking *CVMetalTextureBacking::initWithBackingDevice(CVMetalTextureBacking *this, CVImageBacking *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  CVMetalTextureBacking *v11;
  CFTypeRef v12;

  v11 = this;
  if (!CVBufferBacking::init(this))
    return 0;
  *((_QWORD *)v11 + 21) = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a2 + 32))(a2);
  v12 = CFRetain(a3);
  *((_QWORD *)v11 + 23) = a5;
  *((_QWORD *)v11 + 24) = v12;
  *((_QWORD *)v11 + 22) = a4;
  *((_BYTE *)v11 + 216) = a6;
  return v11;
}

uint64_t CVMetalTextureCache::flushTextures(uint64_t this, char a2, uint64_t a3)
{
  uint64_t v4;
  const __CFArray *v5;
  CFIndex Count;
  const __CFArray *v7;
  CFIndex v8;
  const __CFArray *v9;
  CFIndex v10;
  _QWORD v11[3];

  v4 = this;
  if ((a2 & 1) != 0 || *(_QWORD *)(this + 88))
  {
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 40)))
    {
      v5 = *(const __CFArray **)(v4 + 40);
      Count = CFArrayGetCount(v5);
      CFArrayApplyFunctionReverse(v5, 0, Count, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::textureCacheRecycler, v4);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(v4 + 16) + 224)))
    {
      v7 = *(const __CFArray **)(*(_QWORD *)(v4 + 16) + 224);
      v8 = CFArrayGetCount(v7);
      CFArrayApplyFunctionReverse(v7, 0, v8, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::freeInvalidTexture, v4);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 64)))
    {
      v11[0] = v4;
      v11[1] = CVGetCurrentHostTime() - *(_QWORD *)(v4 + 88);
      v11[2] = a3;
      v9 = *(const __CFArray **)(v4 + 64);
      v10 = CFArrayGetCount(v9);
      CFArrayApplyFunctionReverse(v9, 0, v10, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::freeUnusedIOSurfaceTextureBackings, (uint64_t)v11);
    }
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  return this;
}

CVImageBuffer **CVMetalTexture::alloc(CVMetalTexture *this, const __CFAllocator *a2)
{
  CVImageBuffer **v3;
  CVImageBuffer **v4;
  uint64_t v5;

  if (_cvUseTrackingAllocator)
    this = (CVMetalTexture *)_cvTrackingGetCFAllocator(CFSTR("CVMetalTexture"));
  if (CVMetalTextureGetTypeID::once != -1)
    dispatch_once_f(&CVMetalTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTexture);
  v3 = (CVImageBuffer **)CVObject::alloc((CVObject *)kCVMetalTextureID, (unint64_t)this, (const __CFAllocator *)0x18, 0x70uLL);
  v4 = v3;
  if (v3)
  {
    CVImageBuffer::CVImageBuffer(v3[2], v3);
    *(_QWORD *)v5 = off_1E48A2D08;
    *(_QWORD *)(v5 + 104) = 0;
    *(_BYTE *)(v5 + 96) = 1;
  }
  return v4;
}

CFTypeRef *CVMetalTexture::initWithTextureBacking(CFTypeRef *this, CVMetalTextureBacking *a2)
{
  CFTypeRef *v3;

  v3 = this;
  if (!CVImageBuffer::init(this))
    return 0;
  (*(void (**)(CVMetalTextureBacking *))(*(_QWORD *)a2 + 32))(a2);
  v3[13] = a2;
  if ((*(uint64_t (**)(CVMetalTextureBacking *))(*(_QWORD *)a2 + 336))(a2) && *((_BYTE *)v3 + 96))
    (*(void (**)(CFTypeRef))(*(_QWORD *)v3[13] + 64))(v3[13]);
  return v3;
}

CVBufferBacking *CVMetalTextureBacking::retainUsage(CVMetalTextureBacking *this)
{
  CVBufferBacking *v2;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v2 = CVBufferBacking::retainUsage(this);
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v2;
}

uint64_t CVImageBacking::isFlipped(CVImageBacking *this)
{
  return *((unsigned __int8 *)this + 144);
}

uint64_t CVPixelBuffer::getImageBacking(CVPixelBuffer *this)
{
  return *((_QWORD *)this + 15);
}

_QWORD *_getCVMetalTextureCache(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVMetalTextureCacheGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

_QWORD *_getCVImageBuffer(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID() || v2 == CVMetalTextureGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

uint64_t CVObjectGetTypeID()
{
  if (CVObjectGetTypeID::once != -1)
    dispatch_once_f(&CVObjectGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVObject);
  return kCVObjectID;
}

CFTypeID CVMetalTextureCacheGetTypeID(void)
{
  if (CVMetalTextureCacheGetTypeID::once != -1)
    dispatch_once_f(&CVMetalTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTextureCache);
  return kCVMetalTextureCacheID;
}

void *CVMTLTextureCreate(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6, int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  unint64_t v19;
  void *v20;
  void *v22;
  void *v23;

  if (!a3)
    return 0;
  v19 = objc_msgSend(a1, "maxTextureWidth2D");
  v20 = 0;
  if (a4 && v19 >= a3)
  {
    if (objc_msgSend(a1, "maxTextureHeight2D") < a4)
      return 0;
    v22 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a2, a3, a4, 0);
    objc_msgSend(v22, "setUsage:", a6);
    if (a7)
      objc_msgSend(v22, "setStorageMode:", a8);
    MTLPixelFormatGetInfoForDevice();
    if (a12)
      v23 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:iosurface:plane:slice:", v22, a9, a10, a11);
    else
      v23 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:iosurface:plane:", v22, a9, a10);
    v20 = v23;
    objc_msgSend(v23, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CVMetalTexture %p"), a9));
  }
  return v20;
}

uint64_t CVCreateMergedDictionary(CFDictionaryRef theDict, const __CFDictionary *cf, _QWORD *a3)
{
  CFMutableDictionaryRef MutableCopy;
  CFTypeRef v6;
  uint64_t result;

  if (theDict && cf)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (!MutableCopy)
      return 4294960634;
    v6 = MutableCopy;
    CFDictionaryApplyFunction(cf, (CFDictionaryApplierFunction)cvDictionaryMerger, MutableCopy);
  }
  else
  {
    if (!theDict)
    {
      if (!cf)
      {
        v6 = 0;
        goto LABEL_11;
      }
      theDict = cf;
    }
    v6 = CFRetain(theDict);
  }
LABEL_11:
  result = 0;
  *a3 = v6;
  return result;
}

uint64_t CVMetalTextureBacking::getTextureParams(CVMetalTextureBacking *this)
{
  return *((_QWORD *)this + 28);
}

uint64_t CVBunchPair::finalize(CVBunchPair *this)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 16));
  return CVObject::finalize(this);
}

uint64_t classFinalize_CVMetalTexture(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

uint64_t CVPixelBufferPool::getMinimumBufferCount(pthread_mutex_t *this, const void *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = this + 1;
  pthread_mutex_lock(this + 1);
  v5 = *(unsigned int *)&this->__opaque[48];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(this[2].__sig + 8);
    do
    {
      if ((const void *)*(v7 - 1) == a2)
        v6 = *v7;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(_QWORD, size_t *, size_t *, size_t *, size_t *))(*(_QWORD *)CVPixelBuffer[15] + 400))(CVPixelBuffer[15], extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
  }
  else
  {
    if (extraColumnsOnLeft)
      *extraColumnsOnLeft = 0;
    if (extraRowsOnTop)
      *extraRowsOnTop = 0;
    if (extraColumnsOnRight)
      *extraColumnsOnRight = 0;
    if (extraRowsOnBottom)
      *extraRowsOnBottom = 0;
  }
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  id result;

  result = _getCVMetalTexture(image);
  if (result)
    return (id)(*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 13) + 264))(*((_QWORD *)result + 13));
  return result;
}

_QWORD *_getCVMetalTexture(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVMetalTextureGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

CFTypeID CVMetalTextureGetTypeID(void)
{
  if (CVMetalTextureGetTypeID::once != -1)
    dispatch_once_f(&CVMetalTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTexture);
  return kCVMetalTextureID;
}

uint64_t classFinalize_CVMetalTextureCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

uint64_t classFinalize_CVLockingBunchPair(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

uint64_t CVDataBufferBacking::getDataSize(CVDataBufferBacking *this)
{
  return *((_QWORD *)this + 18);
}

void ___ZL30isRunningInAppleVirtualMachinev_block_invoke()
{
  int v0;
  size_t v1;

  v1 = 4;
  v0 = sysctlbyname("kern.hv_vmm_present", &isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine, &v1, 0, 0);
  if (v0)
    syslog(3, "sysctlbyname for kern.hv_vmm_present failed with status %d", v0);
}

uint64_t classInitialize_CVPixelBufferBacking(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVPixelBufferBackingID = result;
  return result;
}

const __CFArray *CFArrayApplyFunctionReverse(const __CFArray *theArray, uint64_t a2, uint64_t a3, uint64_t (*a4)(const void *, uint64_t), uint64_t a5)
{
  const __CFArray *v8;
  uint64_t v9;
  const void *ValueAtIndex;

  if (a3 >= 1)
  {
    v8 = theArray;
    v9 = a2 + a3;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, --v9);
      theArray = (const __CFArray *)a4(ValueAtIndex, a5);
    }
    while (v9 > a2);
  }
  return theArray;
}

void CVMetalTextureCache::freeUnusedIOSurfaceTextureBackings(CVMetalTextureCache *this, uint64_t *a2, void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __CFDictionary *v8;
  __IOSurface *v9;
  IOSurfaceID ID;
  const __CFArray *v11;
  CFIndex FirstIndexOfValue;
  CFRange v13;

  v5 = *a2;
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v7 = a2[2];
  if ((v7 & 1) != 0)
  {
    (*(void (**)(_QWORD))(*v6 + 112))(*((_QWORD *)this + 2));
    v7 = a2[2];
  }
  if ((v7 & 1) != 0 || (*(unsigned int (**)(_QWORD *))(*v6 + 120))(v6) && v6[13] < (unint64_t)a2[1])
  {
    v8 = *(__CFDictionary **)(v5 + 56);
    v9 = (__IOSurface *)(*(uint64_t (**)(_QWORD *))(*v6 + 336))(v6);
    ID = IOSurfaceGetID(v9);
    CFDictionaryRemoveValue(v8, (const void *)ID);
    v11 = *(const __CFArray **)(v5 + 64);
    v13.length = CFArrayGetCount(v11);
    v13.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v11, v13, this);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
  }
}

uint64_t CVMetalTextureBacking::isInvalidated(CVMetalTextureBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 120))(*((_QWORD *)this + 21));
}

uint64_t CVBufferBacking::isInvalidated(CVBufferBacking *this)
{
  return *((_DWORD *)this + 24) & 1;
}

uint64_t CVMetalTextureCache::finalize(CVMetalTextureCache *this)
{
  const void *v2;
  const void *v3;
  const __CFArray *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  CFRange v11;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 8) = 0;
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 7) = 0;
  v4 = (const __CFArray *)*((_QWORD *)this + 5);
  if (v4)
  {
    v11.length = CFArrayGetCount(*((CFArrayRef *)this + 5));
    v11.location = 0;
    CFArrayApplyFunction(v4, v11, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  v5 = (const void *)*((_QWORD *)this + 6);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 6) = 0;
  v6 = (const void *)*((_QWORD *)this + 5);
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 5) = 0;
  v7 = (const void *)*((_QWORD *)this + 9);
  if (v7)
    CFRelease(v7);
  *((_QWORD *)this + 9) = 0;
  v8 = (const void *)*((_QWORD *)this + 10);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)this + 10) = 0;
  v9 = (const void *)*((_QWORD *)this + 4);
  if (v9)
    CFRelease(v9);
  *((_QWORD *)this + 4) = 0;
  return CVBufferPool::finalize(this);
}

uint64_t CVPixelBufferPool::getMaximumBufferAge(CVPixelBufferPool *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
}

_QWORD *CVDataBufferGetDataSize(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[14] + 200))(result[14]);
  return result;
}

_QWORD *CVDataBufferGetIOSurface(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[14] + 208))(result[14]);
  return result;
}

_QWORD *_getCVDataBuffer(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVDataBufferGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

CVReturn CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef allocator, CFArrayRef attributes, CFDictionaryRef *resolvedDictionaryOut)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  void *v11;
  void *PixelFormatTypes;
  const char *v13;
  CFIndex j;
  const __CFDictionary *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CFIndex k;
  const __CFDictionary *v20;
  const __CFData *v21;
  const __CFData *v22;
  const __CFData *v23;
  const __CFData *v24;
  CFIndex Length;
  const UInt8 *BytePtr;
  const UInt8 *v27;
  size_t v28;
  CFIndex v29;
  int v30;
  const void *v31;
  const __CFString *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  const __CFNumber *v37;
  const __CFArray *v38;
  const __CFArray *v39;
  const __CFString *v40;
  CFIndex v41;
  unint64_t v42;
  CFIndex v43;
  const void *v44;
  CFMutableArrayRef MutableCopy;
  __CFDictionary *v46;
  CFMutableDictionaryRef v47;
  const __CFArray *v48;
  CVReturn v49;
  int v50;
  CFNumberRef v51;
  __CFArray *v52;
  CFIndex v53;
  const __CFDictionary *v54;
  const __CFBoolean *v55;
  CFIndex v56;
  const __CFDictionary *v57;
  const __CFBoolean *v58;
  CFIndex ii;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  void *v63;
  CFMutableDictionaryRef v64;
  const __CFDictionary *v65;
  const __CFDictionary *v66;
  void *v67;
  CFMutableDictionaryRef v68;
  CFIndex jj;
  const __CFDictionary *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  CFIndex kk;
  const __CFDictionary *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  CFIndex v79;
  const __CFDictionary *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  CFTypeID TypeID;
  const __CFNumber *v85;
  const __CFNumber *v86;
  CFTypeID v87;
  CFTypeID v88;
  const __CFArray *v89;
  CFIndex v90;
  CFIndex mm;
  const __CFNumber *v92;
  const __CFDictionary *v93;
  const void *v94;
  const void *v95;
  CFTypeID v96;
  BOOL v97;
  CFIndex v98;
  const char *v99;
  const __CFDictionary *v100;
  const __CFNumber *v101;
  const __CFNumber *v102;
  const __CFNumber *v103;
  const __CFNumber *v104;
  CFTypeID v105;
  const __CFNumber *v106;
  const __CFNumber *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CFTypeID v112;
  CFIndex v113;
  CFIndex v114;
  CFIndex v115;
  const __CFNumber *v116;
  CFNumberRef v117;
  CFNumberRef v118;
  CFIndex v119;
  const __CFDictionary *v120;
  const void *v121;
  const void *v122;
  const void *v123;
  CFIndex v124;
  const __CFDictionary *v125;
  const __CFNumber *v126;
  const __CFNumber *v127;
  const __CFNumber *v128;
  const __CFNumber *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  CFNumberRef v134;
  CFNumberRef v135;
  CFIndex v136;
  const __CFDictionary *v137;
  const __CFNumber *v138;
  const __CFNumber *v139;
  const __CFNumber *v140;
  const __CFNumber *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  CFNumberRef v146;
  CFNumberRef v147;
  CFIndex v148;
  const __CFDictionary *v149;
  const __CFNumber *v150;
  const __CFNumber *v151;
  const __CFNumber *v152;
  const __CFNumber *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  CFNumberRef v158;
  CFNumberRef v159;
  CFIndex v160;
  const void *v161;
  const __CFDictionary *v162;
  const void *v163;
  const void *v164;
  const void *v165;
  CFIndex v166;
  const void *v167;
  const __CFDictionary *v168;
  const void *v169;
  const void *v170;
  const void *v171;
  CFIndex v172;
  const __CFDictionary *v173;
  const __CFNumber *v174;
  const __CFNumber *v175;
  const __CFNumber *v176;
  const __CFNumber *v177;
  uint64_t v178;
  CFNumberRef v179;
  CFNumberRef v180;
  CFIndex v181;
  const __CFDictionary *v182;
  const __CFNumber *v183;
  const __CFNumber *v184;
  const __CFNumber *v185;
  const __CFNumber *v186;
  uint64_t v187;
  CFNumberRef v188;
  CFNumberRef v189;
  CFIndex v190;
  const __CFDictionary *v191;
  const __CFNumber *v192;
  const __CFNumber *v193;
  const __CFNumber *v194;
  const __CFNumber *v195;
  uint64_t v196;
  CFNumberRef v197;
  CFNumberRef v198;
  CFIndex v199;
  const __CFDictionary *v200;
  const __CFNumber *v201;
  const __CFNumber *v202;
  const __CFNumber *v203;
  const __CFNumber *v204;
  uint64_t v205;
  CFNumberRef v206;
  CFNumberRef v207;
  const __CFNumber *v208;
  CFIndex v209;
  const __CFDictionary *v210;
  const __CFNumber *v211;
  const __CFNumber *v212;
  const __CFNumber *v213;
  const __CFNumber *v214;
  uint64_t v215;
  const __CFNumber *v216;
  const __CFNumber *v217;
  const __CFNumber *v218;
  const __CFNumber *v219;
  const __CFNumber *v220;
  const __CFNumber *v221;
  const __CFArray *v222;
  CFIndex v223;
  CFMutableArrayRef v224;
  __CFArray *v225;
  CFIndex m;
  const __CFNumber *v227;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *v229;
  const __CFArray *v230;
  int v231;
  CFIndex v232;
  uint64_t v233;
  const __CFDictionary *v234;
  const __CFNumber *v235;
  uint64_t v236;
  __CFSet *v237;
  CFIndex n;
  const __CFDictionary *v239;
  const __CFBoolean *v240;
  const __CFBoolean *v241;
  const __CFBoolean *v242;
  const __CFBoolean *v243;
  const __CFBoolean *v244;
  const __CFBoolean *v245;
  const __CFBoolean *v246;
  const __CFBoolean *v247;
  CFIndex v248;
  uint64_t v249;
  const __CFArray *v250;
  CFIndex v251;
  __CFDictionary *v252;
  const void *v253;
  const void **v254;
  uint64_t v255;
  const void *v256;
  CFMutableArrayRef v257;
  CFIndex v258;
  const __CFNumber *v259;
  const __CFDictionary *v260;
  const __CFDictionary *v261;
  const __CFArray *v262;
  __CFArray *v263;
  int v264;
  const void **v265;
  uint64_t v266;
  const __CFBoolean *v267;
  __CFDictionary *v268;
  const char *v269;
  __CFDictionary *v270;
  CFIndex v272;
  CFDictionaryRef *v273;
  const __CFAllocator *v274;
  CFIndex v275;
  const __CFAllocator *allocatora;
  int v277;
  int v278;
  void *key;
  void *value;
  __CFDictionary *theDict;
  const __CFArray *theArray;
  const __CFArray *theArraya;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _OWORD valuePtr[8];
  uint64_t v292;
  CFRange v293;

  v292 = *MEMORY[0x1E0C80C00];
  *resolvedDictionaryOut = 0;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return -6662;
  v7 = Mutable;
  Count = CFArrayGetCount(attributes);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, i);
      v11 = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("PixelFormatType"));
      if (v11 && restrictToPixelFormatTypeListIntersection(allocator, v7, v11, CFSTR("PixelFormatType")))
      {
        v13 = "no common pixel format type";
        goto LABEL_60;
      }
    }
  }
  PixelFormatTypes = (void *)CVPixelFormatDescriptionGetPixelFormatTypes();
  if (restrictToPixelFormatTypeListIntersection(allocator, v7, PixelFormatTypes, CFSTR("PixelFormatType")))
  {
    v13 = "no known common pixel format type";
    goto LABEL_60;
  }
  allocatora = allocator;
  v273 = resolvedDictionaryOut;
  theDict = v7;
  if (Count < 1)
    goto LABEL_66;
  for (j = 0; j != Count; ++j)
  {
    v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, j);
    v16 = CFDictionaryGetValue(v15, CFSTR("MemoryAllocator"));
    if (v16)
    {
      v17 = v16;
      v18 = CFDictionaryGetValue(v7, CFSTR("MemoryAllocator"));
      if (v18)
      {
        if (!CFEqual(v17, v18))
        {
          v13 = "allocator mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, CFSTR("MemoryAllocator"), v17);
      }
    }
  }
  for (k = 0; k != Count; ++k)
  {
    v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, k);
    v21 = (const __CFData *)CFDictionaryGetValue(v20, CFSTR("CustomMemoryLayoutCallBacks"));
    if (v21)
    {
      v22 = v21;
      v23 = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("CustomMemoryLayoutCallBacks"));
      if (v23)
      {
        v24 = v23;
        Length = CFDataGetLength(v22);
        if (Length != CFDataGetLength(v24))
        {
          v13 = "custom layout size mismatch";
LABEL_60:
          v48 = attributes;
          goto LABEL_61;
        }
        BytePtr = CFDataGetBytePtr(v22);
        v27 = CFDataGetBytePtr(v24);
        v28 = CFDataGetLength(v22);
        if (!memcmp(BytePtr, v27, v28))
        {
          v13 = "custom layout mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, CFSTR("CustomMemoryLayoutCallBacks"), v22);
      }
    }
  }
  theArray = attributes;
  v29 = 0;
  v30 = 0;
  v278 = 0;
  key = (void *)*MEMORY[0x1E0CBBF10];
  v31 = (const void *)*MEMORY[0x1E0C9AE50];
  v32 = CFSTR("PreferRealTimeCacheModeIfEveryoneDoes");
  v274 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v275 = Count;
  do
  {
    v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v29);
    v34 = (const __CFDictionary *)CFDictionaryGetValue(v33, CFSTR("IOSurfaceProperties"));
    v35 = (const __CFArray *)CFDictionaryGetValue(v33, CFSTR("CacheMode"));
    if (v35)
    {
      v36 = v35;
      CFRetain(v35);
    }
    else
    {
      if (!v34)
      {
        v36 = 0;
        if (v31 != CFDictionaryGetValue(v33, v32))
          goto LABEL_37;
LABEL_39:
        ++v278;
        if (!v36)
          goto LABEL_50;
        goto LABEL_40;
      }
      *(_QWORD *)&valuePtr[0] = 0;
      *(_QWORD *)&valuePtr[0] = CFDictionaryGetValue(v34, key);
      if (*(_QWORD *)&valuePtr[0])
        v36 = CFArrayCreate(allocatora, (const void **)valuePtr, 1, MEMORY[0x1E0C9B378]);
      else
        v36 = 0;
    }
    if (v31 == CFDictionaryGetValue(v33, v32))
      goto LABEL_39;
    if (!v36
      || CFArrayGetCount(v36) < 1
      || (v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v36, 0),
          LODWORD(valuePtr[0]) = 0,
          CFNumberGetValue(v37, kCFNumberSInt32Type, valuePtr),
          LODWORD(valuePtr[0]) != 1792))
    {
LABEL_37:
      ++v30;
      if (!v36)
        goto LABEL_50;
    }
LABEL_40:
    v38 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("CacheMode"));
    if (v38)
    {
      v39 = v38;
      v277 = v30;
      v40 = v32;
      v41 = CFArrayGetCount(v38);
      if (v41 >= 1)
      {
        v42 = v41 + 1;
        do
        {
          v43 = CFArrayGetCount(v36);
          v44 = CFArrayGetValueAtIndex(v39, v42 - 2);
          v293.location = 0;
          v293.length = v43;
          if (!CFArrayContainsValue(v36, v293, v44))
            CFArrayRemoveValueAtIndex(v39, v42 - 2);
          --v42;
        }
        while (v42 > 1);
      }
      v7 = theDict;
      v32 = v40;
      Count = v275;
      v30 = v277;
      if (!CFArrayGetCount(v39))
      {
        v269 = "no common cache mode";
        goto LABEL_392;
      }
    }
    else
    {
      MutableCopy = CFArrayCreateMutableCopy(v274, 0, v36);
      CFDictionarySetValue(v7, CFSTR("CacheMode"), MutableCopy);
      CFRelease(MutableCopy);
    }
    CFRelease(v36);
LABEL_50:
    if (v34)
    {
      v46 = (__CFDictionary *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceProperties"));
      if (v46)
      {
        v47 = v46;
        valuePtr[0] = (unint64_t)v46;
        CFDictionaryApplyFunction(v34, (CFDictionaryApplierFunction)mergeCFDictionariesUnlessTheyConflict, valuePtr);
        if (BYTE8(valuePtr[0]))
        {
          v13 = "unmergeable IOSurfaceProperties";
          goto LABEL_388;
        }
      }
      else
      {
        v47 = CFDictionaryCreateMutableCopy(0, 0, v34);
        CFDictionarySetValue(v7, CFSTR("IOSurfaceProperties"), v47);
        CFRelease(v47);
      }
      CFDictionaryRemoveValue(v47, key);
    }
    ++v29;
  }
  while (v29 != Count);
  v50 = v30;
  attributes = theArray;
  if (v278 >= 1 && !v50)
  {
    LODWORD(valuePtr[0]) = 1792;
    v51 = CFNumberCreate(v274, kCFNumberSInt32Type, valuePtr);
    v52 = CFArrayCreateMutable(v274, 1, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v52, v51);
    CFDictionarySetValue(v7, CFSTR("CacheMode"), v52);
    CFRelease(v52);
    CFRelease(v51);
    CFDictionarySetValue(v7, v32, v31);
    goto LABEL_67;
  }
LABEL_66:
  CFDictionaryRemoveValue(v7, CFSTR("PreferRealTimeCacheModeIfEveryoneDoes"));
LABEL_67:
  if (Count < 1)
  {
LABEL_298:
    v208 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("ExactHeight"));
    theArraya = attributes;
    if (v208)
    {
      *(_QWORD *)&valuePtr[0] = 0;
      CFNumberGetValue(v208, kCFNumberLongType, valuePtr);
      if (Count >= 1)
      {
        v209 = 0;
        while (1)
        {
          v210 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v209);
          v211 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("Height"));
          if (v211)
          {
            v212 = v211;
            v213 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("ExtendedPixelsTop"));
            v214 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("ExtendedPixelsBottom"));
            v289 = 0;
            v290 = 0;
            v288 = 0;
            CFNumberGetValue(v212, kCFNumberLongType, &v290);
            if (v213)
            {
              CFNumberGetValue(v213, kCFNumberLongType, &v289);
              v290 += v289;
            }
            if (v214)
            {
              CFNumberGetValue(v214, kCFNumberLongType, &v288);
              v215 = v290 + v288;
              v290 += v288;
            }
            else
            {
              v215 = v290;
            }
            if (*(_QWORD *)&valuePtr[0] != v215)
              break;
          }
          v216 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("PlaneAlignment"));
          v217 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("Width"));
          if (v216)
          {
            v218 = v217;
            if (v217)
            {
              v219 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("ExtendedPixelsLeft"));
              v220 = (const __CFNumber *)CFDictionaryGetValue(v210, CFSTR("ExtendedPixelsRight"));
              v289 = 0;
              v290 = 0;
              v287 = 16;
              v288 = 0;
              v286 = 0;
              CFNumberGetValue(v216, kCFNumberLongType, &v286);
              if (v286 >= 2)
              {
                CFNumberGetValue(v218, kCFNumberLongType, &v290);
                if (v219)
                {
                  CFNumberGetValue(v219, kCFNumberLongType, &v289);
                  v290 += v289;
                }
                if (v220)
                {
                  CFNumberGetValue(v220, kCFNumberLongType, &v288);
                  v290 += v288;
                }
                v272 = v209;
                v221 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("BytesPerRowAlignment"));
                if (v221)
                  CFNumberGetValue(v221, kCFNumberLongType, &v287);
                v222 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("PixelFormatType"));
                v223 = CFArrayGetCount(v222);
                v224 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
                if (!v224)
                  goto LABEL_390;
                v225 = v224;
                if (v223 >= 1)
                {
                  for (m = 0; m != v223; ++m)
                  {
                    v285 = 0;
                    v284 = 0;
                    v227 = (const __CFNumber *)CFArrayGetValueAtIndex(v222, m);
                    CFNumberGetValue(v227, kCFNumberSInt32Type, &v285);
                    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v285);
                    if (DescriptionWithPixelFormatType)
                    {
                      v229 = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("Planes"));
                      if (v229 && (v230 = v229, v231 = CFArrayGetCount(v229), v231 >= 2))
                      {
                        v232 = 0;
                        v233 = (v231 - 1);
                        while (1)
                        {
                          v234 = (const __CFDictionary *)CFArrayGetValueAtIndex(v230, v232);
                          v235 = (const __CFNumber *)CFDictionaryGetValue(v234, CFSTR("BitsPerBlock"));
                          CFNumberGetValue(v235, kCFNumberLongType, &v284);
                          v236 = (v284 * v290 + 8 * v287 - 1) / (8 * v287) * 8 * v287;
                          if (v236 < 0)
                            v236 |= 7uLL;
                          if ((v236 >> 3) * *(_QWORD *)&valuePtr[0] % v286)
                            break;
                          if (v233 == ++v232)
                            goto LABEL_328;
                        }
                      }
                      else
                      {
LABEL_328:
                        CFArrayAppendValue(v225, v227);
                      }
                    }
                  }
                }
                if (!CFArrayGetCount(v225))
                {
                  reportResolutionFailure(theArraya, "exact height incompatible with other attributes");
                  goto LABEL_395;
                }
                v7 = theDict;
                CFDictionarySetValue(theDict, CFSTR("PixelFormatType"), v225);
                CFRelease(v225);
                attributes = theArraya;
                v209 = v272;
              }
            }
          }
          if (++v209 == Count)
            goto LABEL_333;
        }
LABEL_384:
        v270 = v7;
        goto LABEL_385;
      }
    }
LABEL_333:
    v237 = CFSetCreateMutable(allocatora, 0, MEMORY[0x1E0C9AEC0]);
    if (Count >= 1)
    {
      for (n = 0; n != Count; ++n)
      {
        v239 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArraya, n);
        v240 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("QDCompatibility"));
        if (v240 && CFBooleanGetValue(v240))
          CFSetAddValue(v237, CFSTR("QDCompatibility"));
        v241 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("CGBitmapContextCompatibility"));
        if (v241 && CFBooleanGetValue(v241))
          CFSetAddValue(v237, CFSTR("CGBitmapContextCompatibility"));
        v242 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("CGImageCompatibility"));
        if (v242 && CFBooleanGetValue(v242))
          CFSetAddValue(v237, CFSTR("CGImageCompatibility"));
        v243 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("IOSurfaceCoreAnimationCompatibility"));
        if (v243 && CFBooleanGetValue(v243))
          CFSetAddValue(v237, CFSTR("IOSurfaceCoreAnimationCompatibility"));
        v244 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("IOSurfaceCoreAnimationCompatibilityHTPCOK"));
        if (v244 && CFBooleanGetValue(v244))
          CFSetAddValue(v237, CFSTR("IOSurfaceCoreAnimationCompatibilityHTPCOK"));
        v245 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("OpenGLESCompatibility"));
        if (v245 && CFBooleanGetValue(v245))
          CFSetAddValue(v237, CFSTR("OpenGLESCompatibility"));
        v246 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("IOSurfaceOpenGLESTextureCompatibility"));
        if (v246 && CFBooleanGetValue(v246))
          CFSetAddValue(v237, CFSTR("IOSurfaceOpenGLESTextureCompatibility"));
        v247 = (const __CFBoolean *)CFDictionaryGetValue(v239, CFSTR("IOSurfaceOpenGLESFBOCompatibility"));
        if (v247 && CFBooleanGetValue(v247))
          CFSetAddValue(v237, CFSTR("IOSurfaceOpenGLESFBOCompatibility"));
      }
    }
    v248 = CFSetGetCount(v237);
    if (!v248)
      goto LABEL_379;
    v249 = v248;
    memset(valuePtr, 0, sizeof(valuePtr));
    CFSetGetValues(v237, (const void **)valuePtr);
    v250 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("PixelFormatType"));
    v251 = CFArrayGetCount(v250);
    if (v249 >= 1)
    {
      v252 = v7;
      v253 = (const void *)*MEMORY[0x1E0C9AE50];
      v254 = (const void **)valuePtr;
      v255 = v249;
      do
      {
        v256 = *v254++;
        CFDictionarySetValue(v252, v256, v253);
        --v255;
      }
      while (v255);
    }
    v257 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
    if (v257)
    {
      v225 = v257;
      v7 = theDict;
      if (v251 >= 1)
      {
        v258 = 0;
        value = (void *)v251;
        do
        {
          LODWORD(v290) = 0;
          v259 = (const __CFNumber *)CFArrayGetValueAtIndex(v250, v258);
          CFNumberGetValue(v259, kCFNumberSInt32Type, &v290);
          v260 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v290);
          if (v260)
          {
            if (v249 < 1)
              goto LABEL_375;
            v261 = v260;
            v262 = v250;
            v263 = v225;
            v264 = 1;
            v265 = (const void **)valuePtr;
            v266 = v249;
            do
            {
              v267 = (const __CFBoolean *)CFDictionaryGetValue(v261, *v265);
              if (!v267 || !CFBooleanGetValue(v267))
                v264 = 0;
              ++v265;
              --v266;
            }
            while (v266);
            v225 = v263;
            v250 = v262;
            v251 = (CFIndex)value;
            v7 = theDict;
            if (v264)
LABEL_375:
              CFArrayAppendValue(v225, v259);
          }
          ++v258;
        }
        while (v258 != v251);
      }
      if (CFArrayGetCount(v225))
      {
        CFDictionarySetValue(v7, CFSTR("PixelFormatType"), v225);
        CFRelease(v225);
LABEL_379:
        CFRelease(v237);
        v268 = v7;
        v49 = 0;
        *v273 = v268;
        return v49;
      }
      reportResolutionFailure(theArraya, "no compatible pixel format");
      CFRelease(v237);
LABEL_395:
      CFRelease(v225);
      v49 = -6660;
    }
    else
    {
      CFRelease(v237);
LABEL_390:
      v49 = -6662;
    }
    CFRelease(theDict);
    return v49;
  }
  v53 = 0;
  while (1)
  {
    v54 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v53);
    v55 = (const __CFBoolean *)CFDictionaryGetValue(v54, CFSTR("IOSurfaceWiringAssertion"));
    if (v55)
    {
      if (CFBooleanGetValue(v55))
        break;
    }
    if (Count == ++v53)
      goto LABEL_74;
  }
  CFDictionarySetValue(v7, CFSTR("IOSurfaceWiringAssertion"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_74:
  v56 = 0;
  while (1)
  {
    v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v56);
    v58 = (const __CFBoolean *)CFDictionaryGetValue(v57, CFSTR("MetalCompatibility"));
    if (v58)
    {
      if (CFBooleanGetValue(v58))
        break;
    }
    if (Count == ++v56)
      goto LABEL_80;
  }
  CFDictionarySetValue(v7, CFSTR("MetalCompatibility"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_80:
  for (ii = 0; ii != Count; ++ii)
  {
    v60 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, ii);
    v61 = (const __CFDictionary *)CFDictionaryGetValue(v60, CFSTR("PropagatedAttachments"));
    if (v61)
    {
      v62 = v61;
      v63 = (void *)CFDictionaryGetValue(v7, CFSTR("PropagatedAttachments"));
      if (v63)
      {
        CFDictionaryApplyFunction(v62, (CFDictionaryApplierFunction)mergeCFDictionaries, v63);
      }
      else
      {
        v64 = CFDictionaryCreateMutableCopy(0, 0, v62);
        CFDictionarySetValue(v7, CFSTR("PropagatedAttachments"), v64);
        CFRelease(v64);
      }
    }
    v65 = (const __CFDictionary *)CFDictionaryGetValue(v60, CFSTR("NonPropagatedAttachments"));
    if (v65)
    {
      v66 = v65;
      v67 = (void *)CFDictionaryGetValue(v7, CFSTR("NonPropagatedAttachments"));
      if (v67)
      {
        CFDictionaryApplyFunction(v66, (CFDictionaryApplierFunction)mergeCFDictionaries, v67);
      }
      else
      {
        v68 = CFDictionaryCreateMutableCopy(0, 0, v66);
        CFDictionarySetValue(v7, CFSTR("NonPropagatedAttachments"), v68);
        CFRelease(v68);
      }
    }
  }
  for (jj = 0; jj != Count; ++jj)
  {
    v70 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, jj);
    v71 = CFDictionaryGetValue(v70, CFSTR("Width"));
    if (v71)
    {
      v72 = v71;
      v73 = CFDictionaryGetValue(v7, CFSTR("Width"));
      if (v73)
      {
        if (!CFEqual(v72, v73))
        {
          v13 = "width mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, CFSTR("Width"), v72);
      }
    }
  }
  for (kk = 0; kk != Count; ++kk)
  {
    v75 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, kk);
    v76 = CFDictionaryGetValue(v75, CFSTR("Height"));
    if (v76)
    {
      v77 = v76;
      v78 = CFDictionaryGetValue(v7, CFSTR("Height"));
      if (v78)
      {
        if (!CFEqual(v77, v78))
        {
          v13 = "height mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, CFSTR("Height"), v77);
      }
    }
  }
  v79 = 0;
  theArray = attributes;
  while (2)
  {
    v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v79);
    v81 = CFDictionaryGetValue(v80, CFSTR("ExactBytesPerRow"));
    if (v81)
    {
      v82 = v81;
      v83 = CFDictionaryGetValue(v7, CFSTR("ExactBytesPerRow"));
      if (v83)
      {
        if (!CFEqual(v82, v83))
        {
          v13 = "exact bytes per row mismatch";
LABEL_388:
          v48 = theArray;
LABEL_61:
          reportResolutionFailure(v48, v13);
          goto LABEL_62;
        }
      }
      else
      {
        v290 = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v82) && CFArrayGetCount((CFArrayRef)v82) == 2)
        {
          v85 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v82, 0);
          v86 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v82, 1);
          v87 = CFNumberGetTypeID();
          if (v87 == CFGetTypeID(v85))
          {
            v88 = CFNumberGetTypeID();
            if (v88 == CFGetTypeID(v86))
            {
              CFNumberGetValue(v85, kCFNumberLongType, valuePtr);
              CFNumberGetValue(v86, kCFNumberLongType, &v290);
            }
          }
        }
        v89 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("PixelFormatType"));
        v90 = CFArrayGetCount(v89);
        v36 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
        if (v90 >= 1)
        {
          for (mm = 0; mm != v90; ++mm)
          {
            LODWORD(v288) = 0;
            v92 = (const __CFNumber *)CFArrayGetValueAtIndex(v89, mm);
            CFNumberGetValue(v92, kCFNumberSInt32Type, &v288);
            v93 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v288);
            if (v93)
            {
              v94 = CFDictionaryGetValue(v93, CFSTR("ExactRatioBetweenBytesPerRowOfPlanes"));
              if (v94)
              {
                v95 = v94;
                v96 = CFNumberGetTypeID();
                v97 = v96 == CFGetTypeID(v95);
                v7 = theDict;
                if (v97)
                {
                  v289 = 0;
                  CFNumberGetValue((CFNumberRef)v95, kCFNumberLongType, &v289);
                  if (*(_QWORD *)&valuePtr[0])
                  {
                    if (v290 && v289 * *(_QWORD *)&valuePtr[0] != v290)
                      continue;
                  }
                }
              }
            }
            CFArrayAppendValue(v36, v92);
          }
        }
        if (!CFArrayGetCount(v36))
        {
          v269 = "exact rowbytes incompatible with exact rowbytes ratio.";
LABEL_392:
          reportResolutionFailure(theArray, v269);
          CFRelease(v36);
LABEL_62:
          CFRelease(v7);
          return -6660;
        }
        CFDictionarySetValue(v7, CFSTR("PixelFormatType"), v36);
        CFRelease(v36);
        CFDictionarySetValue(v7, CFSTR("ExactBytesPerRow"), v82);
      }
    }
    ++v79;
    attributes = theArray;
    if (v79 != Count)
      continue;
    break;
  }
  v98 = 0;
  v99 = "bytes per row alignemnt vs exact bytes per row mismatch";
  while (2)
  {
    v100 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v98);
    v101 = (const __CFNumber *)CFDictionaryGetValue(v100, CFSTR("BytesPerRowAlignment"));
    if (!v101)
      goto LABEL_165;
    v102 = v101;
    v103 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExactBytesPerRow"));
    if (!v103)
    {
      v106 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("BytesPerRowAlignment"));
      if (v106)
      {
        v107 = v106;
        v290 = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        v289 = 0;
        CFNumberGetValue(v102, kCFNumberLongType, valuePtr);
        CFNumberGetValue(v107, kCFNumberLongType, &v290);
        if (*(uint64_t *)&valuePtr[0] >= 0)
          v108 = *(_QWORD *)&valuePtr[0];
        else
          v108 = -*(_QWORD *)&valuePtr[0];
        if (v290 >= 0)
          v109 = v290;
        else
          v109 = -v290;
        if (v108 <= v109)
          v110 = v109;
        else
          v110 = v108;
        if (v108 >= v109)
          v108 = v109;
        if (v108)
        {
          v111 = v110;
          if (v108 >= 1)
          {
            do
            {
              v111 = v108;
              v108 = v110 % v108;
              v110 = v111;
            }
            while (v108 > 0);
          }
        }
        else if ((unint64_t)v110 <= 1)
        {
          v111 = 1;
        }
        else
        {
          v111 = v110;
        }
        v289 = v290 * *(_QWORD *)&valuePtr[0] / v111;
        v117 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
        if (!v117)
          goto LABEL_383;
        v118 = v117;
        CFDictionarySetValue(theDict, CFSTR("BytesPerRowAlignment"), v117);
        CFRelease(v118);
      }
      else
      {
        CFDictionarySetValue(theDict, CFSTR("BytesPerRowAlignment"), v102);
      }
      goto LABEL_165;
    }
    v104 = v103;
    v290 = 0;
    *(_QWORD *)&valuePtr[0] = 0;
    CFNumberGetValue(v102, kCFNumberLongType, valuePtr);
    v105 = CFNumberGetTypeID();
    if (v105 == CFGetTypeID(v104))
    {
      CFNumberGetValue(v104, kCFNumberLongType, &v290);
      if (*(uint64_t *)&valuePtr[0] < 1 || v290 % *(_QWORD *)&valuePtr[0])
        goto LABEL_382;
      goto LABEL_165;
    }
    v112 = CFArrayGetTypeID();
    if (v112 != CFGetTypeID(v104) || (v113 = CFArrayGetCount(v104), v113 < 1))
    {
LABEL_165:
      if (++v98 == Count)
      {
        v119 = 0;
        v7 = theDict;
        do
        {
          v120 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v119);
          v121 = CFDictionaryGetValue(v120, CFSTR("ExactHeight"));
          if (v121)
          {
            v122 = v121;
            v123 = CFDictionaryGetValue(theDict, CFSTR("ExactHeight"));
            if (v123)
            {
              if (!CFEqual(v122, v123))
              {
                v13 = "exact height mismatch";
                goto LABEL_60;
              }
            }
            else
            {
              CFDictionarySetValue(theDict, CFSTR("ExactHeight"), v122);
            }
          }
          ++v119;
        }
        while (Count != v119);
        v124 = 0;
        while (1)
        {
          v125 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v124);
          v126 = (const __CFNumber *)CFDictionaryGetValue(v125, CFSTR("PlaneAlignment"));
          if (v126)
          {
            v127 = v126;
            v128 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PlaneAlignment"));
            if (v128)
            {
              v129 = v128;
              v290 = 0;
              *(_QWORD *)&valuePtr[0] = 0;
              v289 = 0;
              CFNumberGetValue(v127, kCFNumberLongType, valuePtr);
              CFNumberGetValue(v129, kCFNumberLongType, &v290);
              if (*(uint64_t *)&valuePtr[0] >= 0)
                v130 = *(_QWORD *)&valuePtr[0];
              else
                v130 = -*(_QWORD *)&valuePtr[0];
              if (v290 >= 0)
                v131 = v290;
              else
                v131 = -v290;
              if (v130 <= v131)
                v132 = v131;
              else
                v132 = v130;
              if (v130 >= v131)
                v130 = v131;
              if (v130)
              {
                v133 = v132;
                if (v130 >= 1)
                {
                  do
                  {
                    v133 = v130;
                    v130 = v132 % v130;
                    v132 = v133;
                  }
                  while (v130 > 0);
                }
              }
              else if ((unint64_t)v132 <= 1)
              {
                v133 = 1;
              }
              else
              {
                v133 = v132;
              }
              v289 = v290 * *(_QWORD *)&valuePtr[0] / v133;
              v134 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
              if (!v134)
                goto LABEL_384;
              v135 = v134;
              CFDictionarySetValue(theDict, CFSTR("PlaneAlignment"), v134);
              CFRelease(v135);
            }
            else
            {
              CFDictionarySetValue(theDict, CFSTR("PlaneAlignment"), v127);
            }
          }
          if (++v124 == Count)
          {
            v136 = 0;
            while (1)
            {
              v137 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v136);
              v138 = (const __CFNumber *)CFDictionaryGetValue(v137, CFSTR("CompressedDataRegionAlignment"));
              if (v138)
              {
                v139 = v138;
                v140 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CompressedDataRegionAlignment"));
                if (v140)
                {
                  v141 = v140;
                  v290 = 0;
                  *(_QWORD *)&valuePtr[0] = 0;
                  v289 = 0;
                  CFNumberGetValue(v139, kCFNumberLongType, valuePtr);
                  CFNumberGetValue(v141, kCFNumberLongType, &v290);
                  if (*(uint64_t *)&valuePtr[0] >= 0)
                    v142 = *(_QWORD *)&valuePtr[0];
                  else
                    v142 = -*(_QWORD *)&valuePtr[0];
                  if (v290 >= 0)
                    v143 = v290;
                  else
                    v143 = -v290;
                  if (v142 <= v143)
                    v144 = v143;
                  else
                    v144 = v142;
                  if (v142 >= v143)
                    v142 = v143;
                  if (v142)
                  {
                    v145 = v144;
                    if (v142 >= 1)
                    {
                      do
                      {
                        v145 = v142;
                        v142 = v144 % v142;
                        v144 = v145;
                      }
                      while (v142 > 0);
                    }
                  }
                  else if ((unint64_t)v144 <= 1)
                  {
                    v145 = 1;
                  }
                  else
                  {
                    v145 = v144;
                  }
                  v289 = v290 * *(_QWORD *)&valuePtr[0] / v145;
                  v146 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                  if (!v146)
                    goto LABEL_384;
                  v147 = v146;
                  CFDictionarySetValue(theDict, CFSTR("CompressedDataRegionAlignment"), v146);
                  CFRelease(v147);
                }
                else
                {
                  CFDictionarySetValue(theDict, CFSTR("CompressedDataRegionAlignment"), v139);
                }
              }
              if (++v136 == Count)
              {
                v148 = 0;
                while (1)
                {
                  v149 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v148);
                  v150 = (const __CFNumber *)CFDictionaryGetValue(v149, CFSTR("CompressedTileHeaderGroupBytesPerRowAlignment"));
                  if (v150)
                  {
                    v151 = v150;
                    v152 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CompressedTileHeaderGroupBytesPerRowAlignment"));
                    if (v152)
                    {
                      v153 = v152;
                      v290 = 0;
                      *(_QWORD *)&valuePtr[0] = 0;
                      v289 = 0;
                      CFNumberGetValue(v151, kCFNumberLongType, valuePtr);
                      CFNumberGetValue(v153, kCFNumberLongType, &v290);
                      if (*(uint64_t *)&valuePtr[0] >= 0)
                        v154 = *(_QWORD *)&valuePtr[0];
                      else
                        v154 = -*(_QWORD *)&valuePtr[0];
                      if (v290 >= 0)
                        v155 = v290;
                      else
                        v155 = -v290;
                      if (v154 <= v155)
                        v156 = v155;
                      else
                        v156 = v154;
                      if (v154 >= v155)
                        v154 = v155;
                      if (v154)
                      {
                        v157 = v156;
                        if (v154 >= 1)
                        {
                          do
                          {
                            v157 = v154;
                            v154 = v156 % v154;
                            v156 = v157;
                          }
                          while (v154 > 0);
                        }
                      }
                      else if ((unint64_t)v156 <= 1)
                      {
                        v157 = 1;
                      }
                      else
                      {
                        v157 = v156;
                      }
                      v289 = v290 * *(_QWORD *)&valuePtr[0] / v157;
                      v158 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                      if (!v158)
                        goto LABEL_384;
                      v159 = v158;
                      CFDictionarySetValue(theDict, CFSTR("CompressedTileHeaderGroupBytesPerRowAlignment"), v158);
                      CFRelease(v159);
                    }
                    else
                    {
                      CFDictionarySetValue(theDict, CFSTR("CompressedTileHeaderGroupBytesPerRowAlignment"), v151);
                    }
                  }
                  if (++v148 == Count)
                  {
                    v160 = 0;
                    v161 = (const void *)*MEMORY[0x1E0CBC150];
                    do
                    {
                      v162 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v160);
                      v163 = CFDictionaryGetValue(v162, v161);
                      if (v163)
                      {
                        v164 = v163;
                        v165 = CFDictionaryGetValue(theDict, v161);
                        if (v165)
                        {
                          if (!CFEqual(v164, v165))
                          {
                            v13 = "kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray mismatch";
                            goto LABEL_60;
                          }
                        }
                        else
                        {
                          CFDictionarySetValue(theDict, v161, v164);
                        }
                      }
                      ++v160;
                    }
                    while (Count != v160);
                    v166 = 0;
                    v167 = (const void *)*MEMORY[0x1E0CBC170];
                    while (1)
                    {
                      v168 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v166);
                      v169 = CFDictionaryGetValue(v168, v167);
                      if (v169)
                      {
                        v170 = v169;
                        v171 = CFDictionaryGetValue(theDict, v167);
                        if (v171)
                        {
                          if (!CFEqual(v170, v171))
                          {
                            v13 = "kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray mismatch";
                            goto LABEL_60;
                          }
                        }
                        else
                        {
                          CFDictionarySetValue(theDict, v167, v170);
                        }
                      }
                      if (Count == ++v166)
                      {
                        v172 = 0;
                        while (1)
                        {
                          v173 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v172);
                          v174 = (const __CFNumber *)CFDictionaryGetValue(v173, CFSTR("ExtendedPixelsLeft"));
                          if (v174)
                          {
                            v175 = v174;
                            v176 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExtendedPixelsLeft"));
                            if (v176)
                            {
                              v177 = v176;
                              v290 = 0;
                              *(_QWORD *)&valuePtr[0] = 0;
                              v289 = 0;
                              CFNumberGetValue(v175, kCFNumberLongType, valuePtr);
                              CFNumberGetValue(v177, kCFNumberLongType, &v290);
                              v178 = *(_QWORD *)&valuePtr[0];
                              if (*(uint64_t *)&valuePtr[0] <= v290)
                                v178 = v290;
                              v289 = v178;
                              v179 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                              if (!v179)
                                goto LABEL_384;
                              v180 = v179;
                              CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsLeft"), v179);
                              CFRelease(v180);
                            }
                            else
                            {
                              CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsLeft"), v175);
                            }
                          }
                          if (Count == ++v172)
                          {
                            v181 = 0;
                            while (1)
                            {
                              v182 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v181);
                              v183 = (const __CFNumber *)CFDictionaryGetValue(v182, CFSTR("ExtendedPixelsRight"));
                              if (v183)
                              {
                                v184 = v183;
                                v185 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExtendedPixelsRight"));
                                if (v185)
                                {
                                  v186 = v185;
                                  v290 = 0;
                                  *(_QWORD *)&valuePtr[0] = 0;
                                  v289 = 0;
                                  CFNumberGetValue(v184, kCFNumberLongType, valuePtr);
                                  CFNumberGetValue(v186, kCFNumberLongType, &v290);
                                  v187 = *(_QWORD *)&valuePtr[0];
                                  if (*(uint64_t *)&valuePtr[0] <= v290)
                                    v187 = v290;
                                  v289 = v187;
                                  v188 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                                  if (!v188)
                                    goto LABEL_384;
                                  v189 = v188;
                                  CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsRight"), v188);
                                  CFRelease(v189);
                                }
                                else
                                {
                                  CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsRight"), v184);
                                }
                              }
                              if (Count == ++v181)
                              {
                                v190 = 0;
                                while (1)
                                {
                                  v191 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v190);
                                  v192 = (const __CFNumber *)CFDictionaryGetValue(v191, CFSTR("ExtendedPixelsTop"));
                                  if (v192)
                                  {
                                    v193 = v192;
                                    v194 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExtendedPixelsTop"));
                                    if (v194)
                                    {
                                      v195 = v194;
                                      v290 = 0;
                                      *(_QWORD *)&valuePtr[0] = 0;
                                      v289 = 0;
                                      CFNumberGetValue(v193, kCFNumberLongType, valuePtr);
                                      CFNumberGetValue(v195, kCFNumberLongType, &v290);
                                      v196 = *(_QWORD *)&valuePtr[0];
                                      if (*(uint64_t *)&valuePtr[0] <= v290)
                                        v196 = v290;
                                      v289 = v196;
                                      v197 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                                      if (!v197)
                                        goto LABEL_384;
                                      v198 = v197;
                                      CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsTop"), v197);
                                      CFRelease(v198);
                                    }
                                    else
                                    {
                                      CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsTop"), v193);
                                    }
                                  }
                                  if (Count == ++v190)
                                  {
                                    v199 = 0;
                                    while (1)
                                    {
                                      v200 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v199);
                                      v201 = (const __CFNumber *)CFDictionaryGetValue(v200, CFSTR("ExtendedPixelsBottom"));
                                      if (v201)
                                      {
                                        v202 = v201;
                                        v203 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExtendedPixelsBottom"));
                                        if (v203)
                                        {
                                          v204 = v203;
                                          v290 = 0;
                                          *(_QWORD *)&valuePtr[0] = 0;
                                          v289 = 0;
                                          CFNumberGetValue(v202, kCFNumberLongType, valuePtr);
                                          CFNumberGetValue(v204, kCFNumberLongType, &v290);
                                          v205 = *(_QWORD *)&valuePtr[0];
                                          if (*(uint64_t *)&valuePtr[0] <= v290)
                                            v205 = v290;
                                          v289 = v205;
                                          v206 = CFNumberCreate(allocatora, kCFNumberLongType, &v289);
                                          if (!v206)
                                            goto LABEL_384;
                                          v207 = v206;
                                          CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsBottom"), v206);
                                          CFRelease(v207);
                                        }
                                        else
                                        {
                                          CFDictionarySetValue(theDict, CFSTR("ExtendedPixelsBottom"), v202);
                                        }
                                      }
                                      if (Count == ++v199)
                                        goto LABEL_298;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      continue;
    }
    break;
  }
  v114 = v113;
  v115 = 0;
  while (1)
  {
    v116 = (const __CFNumber *)CFArrayGetValueAtIndex(v104, v115);
    CFNumberGetValue(v116, kCFNumberLongType, &v290);
    if (*(uint64_t *)&valuePtr[0] < 1 || v290 % *(_QWORD *)&valuePtr[0])
      break;
    if (v114 == ++v115)
      goto LABEL_165;
  }
  v99 = "planar bytes per row alignemnt vs exact bytes per row mismatch";
LABEL_382:
  reportResolutionFailure(theArray, v99);
LABEL_383:
  v270 = theDict;
LABEL_385:
  CFRelease(v270);
  return -6662;
}

BOOL restrictToPixelFormatTypeListIntersection(const __CFAllocator *a1, __CFDictionary *a2, void *cf, const __CFString *a4)
{
  CFTypeID v8;
  const __CFArray *v9;
  CFTypeID v10;
  const __CFArray *v11;
  const __CFArray *Value;
  const __CFArray *v13;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v16;
  CFIndex v17;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v21;
  void *values;
  CFRange v23;

  values = cf;
  v8 = CFGetTypeID(cf);
  if (v8 == CFArrayGetTypeID())
  {
    v9 = (const __CFArray *)CFRetain(cf);
  }
  else
  {
    v10 = CFGetTypeID(cf);
    if (v10 != CFNumberGetTypeID())
      return 0;
    v9 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  }
  v11 = v9;
  if (!v9)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(a2, a4);
  if (Value)
  {
    v13 = Value;
    Count = CFArrayGetCount(v11);
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    v16 = CFArrayGetCount(v13);
    if (v16 >= 1)
    {
      v17 = v16;
      for (i = 0; i != v17; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
        v23.location = 0;
        v23.length = Count;
        if (CFArrayContainsValue(v11, v23, ValueAtIndex))
          CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
    CFDictionarySetValue(a2, a4, Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionarySetValue(a2, a4, v11);
  }
  CFRelease(v11);
  v21 = (const __CFArray *)CFDictionaryGetValue(a2, a4);
  return !v21 || CFArrayGetCount(v21) == 0;
}

uint64_t CVPixelFormatDescriptionGetPixelFormatTypes()
{
  uint64_t result;

  result = _pixelFormatTypes;
  if (!_pixelFormatTypes)
  {
    pthread_once(&once, _pixelFormatDictionaryInit);
    return _pixelFormatTypes;
  }
  return result;
}

void initCVBufferKeyToIOSurfaceKeyDictionary(void)
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  uint64_t v2;
  const void ***v3;
  const void *v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  _OWORD v7[13];
  uint64_t v8;
  void *keys[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)keys = 0u;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v2 = 0;
  v3 = (const void ***)&qword_1E48A4148;
  do
  {
    keys[v2] = (void *)**(v3 - 1);
    v4 = **v3;
    *((_QWORD *)v7 + v2) = v4;
    if (((0x7FD8041uLL >> v2) & 1) != 0)
      CFArrayAppendValue(Mutable, v4);
    ++v2;
    v3 += 3;
  }
  while (v2 != 27);
  v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  cvBufferKeyToIOSurfaceKeyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)v7, 27, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  iosurfaceKeyToCVBufferKeyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)v7, (const void **)keys, 27, v5, v6);
  IOSurfaceSetCoreVideoBridgedKeys();
  CFRelease(Mutable);
}

uint64_t classInitialize_CVMetalTextureCache(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVMetalTextureCacheID = result;
  return result;
}

uint64_t classInitialize_CVLockingBunchPair(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVLockingBunchPairID = result;
  return result;
}

void fig_ktrace_initialize()
{
  const __CFString *v0;
  const __CFString *v1;
  CFTypeID v2;
  int IntValue;
  CFTypeID v4;
  CFTypeID v5;
  int valuePtr;

  v0 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("ktrace"), CFSTR("com.apple.corevideo"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFStringGetTypeID())
    {
      IntValue = CFStringGetIntValue(v1);
      if (IntValue)
        goto LABEL_17;
      IntValue = 1;
      if (CFStringCompare(v1, CFSTR("true"), 1uLL) == kCFCompareEqualTo)
        goto LABEL_17;
      IntValue = 1;
      if (CFStringCompare(v1, CFSTR("yes"), 1uLL) == kCFCompareEqualTo)
        goto LABEL_17;
      if (CFStringCompare(v1, CFSTR("false"), 1uLL) && CFStringCompare(v1, CFSTR("no"), 1uLL))
        CFStringCompare(v1, CFSTR("0"), 1uLL);
    }
    else
    {
      v4 = CFGetTypeID(v1);
      if (v4 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v1, kCFNumberIntType, &valuePtr))
          IntValue = valuePtr;
        else
          IntValue = 0;
        goto LABEL_17;
      }
      v5 = CFGetTypeID(v1);
      if (v5 == CFBooleanGetTypeID())
      {
        IntValue = CFEqual(v1, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
LABEL_17:
        CFRelease(v1);
        goto LABEL_18;
      }
    }
    IntValue = 0;
    goto LABEL_17;
  }
  IntValue = 0;
LABEL_18:
  gCVKTraceEnabled = IntValue;
}

uint64_t CVDataBufferBacking::getIOSurface(CVDataBufferBacking *this)
{
  pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0);
  return *((_QWORD *)this + 20);
}

double CVLocklessBunchPair::getMaximumBufferAge(CVLocklessBunchPair *this, double a2, double a3)
{
  unint64_t *v3;
  unint64_t v4;

  v3 = (unint64_t *)((char *)this + 240);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4, v3));
  if (!CVHostTimeBase::sIsInited)
    a2 = CVHostTimeBase::Initialize(this);
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (double)(unint64_t)((double)v4 / (double)*(unint64_t *)&a3 * (double)*(unint64_t *)&a2)
       / 1000000000.0;
}

CFTypeRef *CVDataBufferBacking::initWithSize(CFTypeRef *this, int a2, const void *a3, const __CFDictionary *a4, const __CFDictionary *Value, __IOSurface *a6, int *a7)
{
  CFTypeRef *v13;
  const __CFAllocator *v14;
  int v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CFTypeID v18;
  __CFDictionary *MutableCopy;
  const void *v20;
  const void *v21;
  const void *v22;
  IOSurfaceRef v23;
  int v24;

  v13 = this;
  v14 = CFGetAllocator(this[1]);
  *a7 = -6660;
  if (!CVBufferBacking::init((CVBufferBacking *)v13))
  {
    v13 = 0;
    *a7 = -6662;
    return v13;
  }
  if (!a4)
  {
    v15 = -6660;
LABEL_22:
    *a7 = v15;
LABEL_23:
    (*((void (**)(CFTypeRef *))*v13 + 5))(v13);
    return 0;
  }
  v13[18] = a3;
  *((_DWORD *)v13 + 39) = a2;
  if (a6)
  {
    *((_BYTE *)v13 + 152) = 1;
    v13[20] = a6;
    CFRetain(a6);
    *a7 = 0;
    return v13;
  }
  v13[17] = CFDictionaryCreateCopy(v14, a4);
  if (Value)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("DataBufferPoolName"));
    if (Value)
      CVBufferBacking::setPoolName((CVBufferBacking *)v13, Value);
  }
  v16 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("IOSurfaceProperties"));
  if (!v16 || (v17 = v16, v18 = CFGetTypeID(v16), v18 != CFDictionaryGetTypeID()))
  {
    v15 = -6662;
    goto LABEL_22;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v17);
  v20 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v20 != CFDictionaryGetValue(a4, CFSTR("IOSurfacePurgeable")))
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC050], v20);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC1E0], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC008], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBF08], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC058], 0);
  CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBEE0], (uint64_t)v13[18]);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBF00], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBFC0], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBBFB8], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CBC070], a2);
  v21 = (const void *)*MEMORY[0x1E0CBBF10];
  v22 = CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0CBBF10]);
  if (v22)
    CFDictionarySetValue(MutableCopy, v21, v22);
  if (Value)
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC048], Value);
  v23 = IOSurfaceCreate(MutableCopy);
  v13[20] = v23;
  if (v23)
  {
    if (v20 == CFDictionaryGetValue(a4, CFSTR("IOSurfaceWiringAssertion")))
    {
      v24 = 0;
      *((_DWORD *)v13 + 46) |= 2u;
    }
    else
    {
      v24 = 0;
    }
  }
  else
  {
    v24 = -6662;
  }
  *a7 = v24;
  if (MutableCopy)
  {
    CFRelease(MutableCopy);
    v24 = *a7;
  }
  if (v24)
    goto LABEL_23;
  return v13;
}

uint64_t CVDictionarySetSInt32Value(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v6 = v5;
  if (a1 && v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    v7 = 0;
LABEL_5:
    CFRelease(v6);
    return v7;
  }
  v7 = 4294960634;
  if (v5)
    goto LABEL_5;
  return v7;
}

double CVPixelBufferBacking::getSize(CVPixelBufferBacking *this)
{
  return (float)*((unint64_t *)this + 22);
}

CVBufferBacking **CVDataBufferBacking::alloc(CVDataBufferBacking *this, const __CFAllocator *a2)
{
  CVObject *TypeID;
  CVBufferBacking **v4;
  CVBufferBacking **v5;
  uint64_t v6;

  if (_cvUseTrackingAllocator)
    this = (CVDataBufferBacking *)_cvTrackingGetCFAllocator(CFSTR("CVDataBufferBacking"));
  TypeID = (CVObject *)CVObjectGetTypeID();
  v4 = (CVBufferBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0xC0uLL);
  v5 = v4;
  if (v4)
  {
    CVBufferBacking::CVBufferBacking(v4[2], v4);
    *(_QWORD *)v6 = off_1E48A33D0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_QWORD *)(v6 + 160) = 0;
    *(_DWORD *)(v6 + 168) = 0;
  }
  return v5;
}

CVBufferBacking *CVDataBufferBacking::retainUsage(CVDataBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 20);
  if (v2)
    IOSurfaceIncrementUseCount(v2);
  return CVBufferBacking::retainUsage(this);
}

CVBuffer **CVDataBufferPool::createDataBuffer(CFDictionaryRef *this, const __CFAllocator *a2, const __CFDictionary *a3, int *a4)
{
  const void *Value;
  const void *v9;
  CFTypeID v10;
  uint64_t IntValueWithDefault;
  uint64_t v12;
  int v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  CVBuffer **v22;
  int v23;
  CVBufferBacking **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  CVBuffer **v28;
  uint64_t v30;
  uint64_t v31;

  v31 = 0;
  Value = CFDictionaryGetValue(this[5], CFSTR("IOSurfaceProperties"));
  if (Value && (v9 = Value, v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID()))
  {
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v9, (const void *)*MEMORY[0x1E0CBC070], 0);
    v12 = CVDictionaryGetIntValueWithDefault(v9, (const void *)*MEMORY[0x1E0CBBEE0], 0);
  }
  else
  {
    IntValueWithDefault = 0;
    v12 = 0;
  }
  (*(void (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 160))(this[2]);
  v13 = (*(uint64_t (**)(CFDictionaryRef, uint64_t *, _QWORD))(*(_QWORD *)this[2] + 128))(this[2], &v31, 0);
  v15 = (*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 96))(this[2]);
  if (v31 && (v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31)) != 0)
  {
    v17 = v16;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 208))(*(_QWORD *)(v16 + 16)))
      IOSurfaceClearDataProperties();
  }
  else
  {
    if (a3)
    {
      v19 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("BufferPoolAllocationThreshold"));
      v30 = 0;
      if (v19)
      {
        v20 = v19;
        v21 = CFGetTypeID(v19);
        if (v21 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v20, kCFNumberLongType, &v30);
          if (v30 >= 1 && v30 <= v15 + v13)
          {
            v22 = 0;
            v23 = -6689;
LABEL_24:
            *a4 = v23;
            goto LABEL_25;
          }
        }
      }
    }
    v24 = CVDataBufferBacking::alloc(a2, v14);
    if (!v24)
    {
      v22 = 0;
      goto LABEL_23;
    }
    v17 = (uint64_t)v24;
    if (!(*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFDictionaryRef, CFDictionaryRef, _QWORD, int *))(*(_QWORD *)v24[2] + 176))(v24[2], IntValueWithDefault, v12, this[5], this[4], 0, a4))
    {
      v22 = 0;
      goto LABEL_25;
    }
    (*(void (**)(CFDictionaryRef, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this[2] + 112))(this[2], *(_QWORD *)(v17 + 16), 1, 0);
    v25 = (_QWORD *)(*((uint64_t (**)(CFDictionaryRef *))*this + 3))(this);
    v26 = (*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 96))(this[2]) + 1;
    v27 = (*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 104))(this[2]);
    CVTracePoolAction(1, v25, (_QWORD **)v17, "CVDataBuffer backing created", v26, v27 - 1);
  }
  v28 = CVDataBuffer::alloc(a2, v18);
  v22 = v28;
  if (!v28
    || !(*(uint64_t (**)(CVBuffer *, _QWORD))(*(_QWORD *)v28[2] + 160))(v28[2], *(_QWORD *)(v17 + 16)))
  {
    (*(void (**)(CFDictionaryRef, _QWORD))(*(_QWORD *)this[2] + 120))(this[2], *(_QWORD *)(v17 + 16));
LABEL_23:
    v23 = -6660;
    goto LABEL_24;
  }
  (*(void (**)(CVBuffer *, CFDictionaryRef))(*(_QWORD *)v22[2] + 144))(v22[2], this[5]);
  *a4 = 0;
LABEL_25:
  (*(void (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 168))(this[2]);
  (*(void (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 136))(this[2]);
  return v22;
}

uint64_t CVImageBuffer::getEncodedSize(CVImageBuffer *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)this + 160))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
}

CVBuffer **CVDataBuffer::alloc(CVDataBuffer *this, const __CFAllocator *a2)
{
  CVBuffer **v3;
  CVBuffer **v4;
  uint64_t v5;

  if (_cvUseTrackingAllocator)
    this = (CVDataBuffer *)_cvTrackingGetCFAllocator(CFSTR("CVDataBuffer"));
  if (CVDataBufferGetTypeID::once != -1)
    dispatch_once_f(&CVDataBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBuffer);
  v3 = (CVBuffer **)CVObject::alloc((CVObject *)kCVDataBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x78uLL);
  v4 = v3;
  if (v3)
  {
    CVBuffer::CVBuffer(v3[2], v3);
    *(_QWORD *)v5 = off_1E48A2860;
    *(_QWORD *)(v5 + 112) = 0;
    *(_BYTE *)(v5 + 96) = 1;
    *(_QWORD *)(v5 + 100) = 0;
  }
  return v4;
}

CFTypeRef *CVDataBuffer::initWithDataBufferBacking(CFTypeRef *this, CVDataBufferBacking *a2)
{
  CFTypeRef *v3;

  v3 = this;
  if (!CVBuffer::init(this))
    return 0;
  (*(void (**)(CVDataBufferBacking *))(*(_QWORD *)a2 + 32))(a2);
  v3[14] = a2;
  if (*((_BYTE *)v3 + 96))
    (*(void (**)(CVDataBufferBacking *))(*(_QWORD *)a2 + 64))(a2);
  return v3;
}

const void *CVDataBuffer::setDefaultAttachments(const void *this, CFDictionaryRef theDict)
{
  const void *v3;
  const void *Value;
  const void *v5;
  CFTypeID v6;
  const void *v7;
  CFTypeID v8;

  if (theDict)
  {
    v3 = this;
    Value = CFDictionaryGetValue(theDict, CFSTR("PropagatedAttachments"));
    if (Value)
    {
      v5 = Value;
      v6 = CFGetTypeID(Value);
      if (v6 == CFDictionaryGetTypeID())
        (*(void (**)(const void *, const void *, uint64_t))(*(_QWORD *)v3 + 136))(v3, v5, 1);
    }
    this = CFDictionaryGetValue(theDict, CFSTR("NonPropagatedAttachments"));
    if (this)
    {
      v7 = this;
      v8 = CFGetTypeID(this);
      this = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v8 == this)
        return (const void *)(*(uint64_t (**)(const void *, const void *, _QWORD))(*(_QWORD *)v3 + 136))(v3, v7, 0);
    }
  }
  return this;
}

uint64_t classInitialize_CVMetalTexture(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVMetalTextureID = result;
  return result;
}

uint64_t classInitialize_CVDataBuffer(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVDataBufferID = result;
  return result;
}

_QWORD *getBaseAddressWithoutLock(__CVBuffer *a1)
{
  _QWORD *result;
  _QWORD *v2;

  result = _getCVPixelBuffer(a1);
  if (result)
  {
    v2 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 264))(result, 0);
    if (!result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 264))(v2, 1);
  }
  return result;
}

uint64_t classInitialize_CVObject(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVObjectID = result;
  return result;
}

void reportResolutionFailure(const __CFArray *a1, const char *a2)
{
  int AppBooleanValue;

  if ((reportResolutionFailure(__CFArray const*,char const*)::sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("verbose_resolve"), CFSTR("com.apple.corevideo"), 0);
    reportResolutionFailure(__CFArray const*,char const*)::sVerboseCompatibility = AppBooleanValue != 0;
    if (AppBooleanValue)
      syslog(3, "CoreVideo: will explain CVPixelBufferCreateResolvedAttributesDictionary' decisions -- thank you for setting \"defaults write com.apple.corevideo verbose_resolve -BOOL YES\"\n");
    reportResolutionFailure(__CFArray const*,char const*)::sDidCheck = 1;
  }
  if (reportResolutionFailure(__CFArray const*,char const*)::sVerboseCompatibility)
    syslog(3, "CVPixelBufferCreateResolvedAttributesDictionary: (%p) %s\n", a1, a2);
}

_QWORD *_getCVDataBufferPool(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVDataBufferPoolGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

uint64_t CVPixelBufferIsCompatibleWithAttributes(__CVBuffer *a1, const __CFDictionary *a2)
{
  _QWORD *CVPixelBuffer;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFBoolean *Value;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const __CFDictionary *v38;
  const void *v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  _QWORD *v42;
  unsigned int v43;
  CFTypeID TypeID;
  CFTypeID v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  _QWORD *v49;
  uint64_t v50;
  CFTypeID v51;
  _QWORD *v52;
  uint64_t v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  CFTypeID v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  CFTypeID v65;
  int64_t v66;
  CFTypeID v67;
  int64_t v68;
  CFTypeID v69;
  int64_t v70;
  CFTypeID v71;
  int64_t v72;
  CFTypeID v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  const __CFNumber *v77;
  const __CFNumber *v78;
  CFTypeID v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  const __CFNumber *v87;
  const __CFNumber *v88;
  CFTypeID v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *BaseAddressOfPlaneWithoutLock;
  _QWORD *BaseAddressWithoutLock;
  const void *v97;
  const void *v98;
  CFTypeID v99;
  _QWORD *v100;
  uint64_t v101;
  size_t v102;
  const __CFDictionary *v104;
  const __CFArray *v105;
  const __CFArray *v106;
  _QWORD *v107;
  uint64_t v108;
  CFTypeID v109;
  uint64_t CacheMode;
  CFTypeID v111;
  CFTypeID v112;
  CFIndex v114;
  const __CFNumber *ValueAtIndex;
  _QWORD *v116;
  uint64_t v117;
  CFTypeID v118;
  size_t extraRowsOnBottom;
  size_t extraColumnsOnRight;
  size_t extraRowsOnTop;
  size_t extraColumnsOnLeft;
  int64_t valuePtr;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    LODWORD(CVPixelBuffer) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 192))(CVPixelBuffer[15]);
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(CVPixelBuffer);
  Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("MetalCompatibility"));
  if (Value && CFBooleanGetValue(Value))
  {
    v7 = _getCVPixelBuffer(a1);
    if (!v7 || !(*(uint64_t (**)(_QWORD))(*(_QWORD *)v7[15] + 152))(v7[15]))
    {
      v14 = "IOSurface backing for Metal compatibility not satisfied";
      goto LABEL_211;
    }
    v8 = _getCVPixelBuffer(a1);
    if (v8 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v8[15] + 312))(v8[15]))
    {
      v9 = _getCVPixelBuffer(a1);
      if (v9)
      {
        v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9[15] + 344))(v9[15]);
        if (v10)
        {
          v11 = v10;
          v12 = 0;
          do
          {
            v13 = _getCVPixelBuffer(a1);
            if (v13)
            {
              if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v13[15] + 376))(v13[15], v12) & 0x3F) != 0)
                goto LABEL_20;
            }
            if (((unint64_t)getBaseAddressOfPlaneWithoutLock(a1, v12) & 0x3F) != 0)
              goto LABEL_22;
          }
          while (v11 != ++v12);
        }
      }
    }
    else
    {
      v15 = _getCVPixelBuffer(a1);
      if (v15 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v15[15] + 296))(v15[15]) & 0x3F) != 0)
      {
LABEL_20:
        v14 = "rowbytes alignment for Metal compatibility not satisfied";
        goto LABEL_211;
      }
      if (((unint64_t)getBaseAddressWithoutLock(a1) & 0x3F) != 0)
      {
LABEL_22:
        v14 = "plane alignment for Metal compatibility not satisfied";
        goto LABEL_211;
      }
    }
  }
  v16 = CFDictionaryGetValue(a2, CFSTR("IOSurfaceOpenGLFBOCompatibility"));
  if (v16)
  {
    if (!DescriptionWithPixelFormatType)
    {
      v14 = "unknown pixel format -- not IOSurfaceOpenGLFBO compatible";
      goto LABEL_211;
    }
    v17 = v16;
    v18 = CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("IOSurfaceOpenGLFBOCompatibility"));
    if (v18)
      v19 = v18;
    else
      v19 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!CFEqual(v17, v19))
    {
      v14 = "pixel format not IOSurfaceOpenGLFBO compatible";
      goto LABEL_211;
    }
  }
  v20 = CFDictionaryGetValue(a2, CFSTR("OpenGLESCompatibility"));
  if (v20)
  {
    if (!DescriptionWithPixelFormatType)
    {
      v14 = "unknown pixel format -- not OpenGLES compatible";
      goto LABEL_211;
    }
    v21 = v20;
    v22 = CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("OpenGLESCompatibility"));
    if (v22)
      v23 = v22;
    else
      v23 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!CFEqual(v21, v23))
    {
      v14 = "pixel format not OpenGLES compatible";
      goto LABEL_211;
    }
  }
  v24 = CFDictionaryGetValue(a2, CFSTR("IOSurfaceOpenGLESTextureCompatibility"));
  if (v24)
  {
    if (!DescriptionWithPixelFormatType)
    {
      v14 = "unknown pixel format -- not IOSurfaceOpenGLESTexture compatible";
      goto LABEL_211;
    }
    v25 = v24;
    v26 = CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("IOSurfaceOpenGLESTextureCompatibility"));
    if (v26)
      v27 = v26;
    else
      v27 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!CFEqual(v25, v27))
    {
      v14 = "pixel format not IOSurfaceOpenGLESTexture compatible";
      goto LABEL_211;
    }
  }
  v28 = CFDictionaryGetValue(a2, CFSTR("IOSurfaceOpenGLESFBOCompatibility"));
  if (v28)
  {
    if (!DescriptionWithPixelFormatType)
    {
      v14 = "unknown pixel format -- not IOSurfaceOpenGLESFBO compatible";
      goto LABEL_211;
    }
    v29 = v28;
    v30 = CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("IOSurfaceOpenGLESFBOCompatibility"));
    if (v30)
      v31 = v30;
    else
      v31 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!CFEqual(v29, v31))
    {
      v14 = "pixel format not IOSurfaceOpenGLESFBO compatible";
      goto LABEL_211;
    }
  }
  v32 = CFDictionaryGetValue(a2, CFSTR("IOSurfaceCoreAnimationCompatibility"));
  if (v32)
  {
    if (!DescriptionWithPixelFormatType)
    {
      v14 = "unknown pixel format -- not IOSurfaceCoreAnimation compatible";
      goto LABEL_211;
    }
    v33 = v32;
    v34 = CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("IOSurfaceCoreAnimationCompatibility"));
    if (v34)
      v35 = v34;
    else
      v35 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!CFEqual(v33, v35))
    {
      v14 = "pixel format not IOSurfaceCoreAnimation compatible";
      goto LABEL_211;
    }
  }
  v36 = CFDictionaryGetValue(a2, CFSTR("MemoryAllocator"));
  if (v36)
  {
    v37 = v36;
    v38 = (const __CFDictionary *)_getCVPixelBuffer(a1);
    if (v38)
      v38 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v38 + 15) + 256))(*((_QWORD *)v38 + 15));
    v39 = CFDictionaryGetValue(v38, CFSTR("MemoryAllocator"));
    if (!v39)
    {
      v14 = "not using custom memory allocator";
      goto LABEL_211;
    }
    if (!CFEqual(v37, v39))
    {
      v14 = "custom memory allocator mismatch";
      goto LABEL_211;
    }
  }
  v40 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("PixelFormatType"));
  if (v40)
  {
    v41 = v40;
    v42 = _getCVPixelBuffer(a1);
    if (v42)
      v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v42[15] + 192))(v42[15]);
    else
      v43 = 0;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v41))
    {
      valuePtr = 0;
      if (!CFNumberGetValue(v41, kCFNumberLongType, &valuePtr) || valuePtr != v43)
      {
        v14 = "wrong pixel format";
        goto LABEL_211;
      }
    }
    else
    {
      v45 = CFArrayGetTypeID();
      if (v45 == CFGetTypeID(v41) && !numberIsInCFArrayOfCFNumbers(v43, v41))
      {
        v14 = "pixel format not in list";
        goto LABEL_211;
      }
    }
  }
  v46 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Width"));
  v47 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Height"));
  if (v46)
  {
    v48 = CFNumberGetTypeID();
    if (v48 == CFGetTypeID(v46))
    {
      v49 = _getCVPixelBuffer(a1);
      v50 = v49 ? (*(uint64_t (**)(_QWORD))(*(_QWORD *)v49[15] + 272))(v49[15]) : 0;
      valuePtr = 0;
      if (!CFNumberGetValue(v46, kCFNumberLongType, &valuePtr) || valuePtr != v50)
      {
        v14 = "wrong width";
        goto LABEL_211;
      }
    }
  }
  if (v47)
  {
    v51 = CFNumberGetTypeID();
    if (v51 == CFGetTypeID(v47))
    {
      v52 = _getCVPixelBuffer(a1);
      v53 = v52 ? (*(uint64_t (**)(_QWORD))(*(_QWORD *)v52[15] + 280))(v52[15]) : 0;
      valuePtr = 0;
      if (!CFNumberGetValue(v47, kCFNumberLongType, &valuePtr) || valuePtr != v53)
      {
        v14 = "wrong height";
        goto LABEL_211;
      }
    }
  }
  v54 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ExtendedPixelsLeft"));
  v55 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ExtendedPixelsTop"));
  v56 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ExtendedPixelsRight"));
  v57 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ExtendedPixelsBottom"));
  v58 = v57;
  if (v54 || v55 || v56 || v57)
  {
    extraRowsOnTop = 0;
    extraColumnsOnLeft = 0;
    extraRowsOnBottom = 0;
    extraColumnsOnRight = 0;
    CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
    if (v54)
    {
      v65 = CFNumberGetTypeID();
      if (v65 == CFGetTypeID(v54))
      {
        v66 = extraColumnsOnLeft;
        valuePtr = 0;
        if (CFNumberGetValue(v54, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v66)
          {
            v14 = "insufficient extended-left";
            goto LABEL_211;
          }
        }
      }
    }
    if (v55)
    {
      v67 = CFNumberGetTypeID();
      if (v67 == CFGetTypeID(v55))
      {
        v68 = extraRowsOnTop;
        valuePtr = 0;
        if (CFNumberGetValue(v55, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v68)
          {
            v14 = "insufficient extended-top";
            goto LABEL_211;
          }
        }
      }
    }
    if (v56)
    {
      v69 = CFNumberGetTypeID();
      if (v69 == CFGetTypeID(v56))
      {
        v70 = extraColumnsOnRight;
        valuePtr = 0;
        if (CFNumberGetValue(v56, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v70)
          {
            v14 = "insufficient extended-right";
            goto LABEL_211;
          }
        }
      }
    }
    if (v58)
    {
      v71 = CFNumberGetTypeID();
      if (v71 == CFGetTypeID(v58))
      {
        v72 = extraRowsOnBottom;
        valuePtr = 0;
        if (CFNumberGetValue(v58, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v72)
          {
            v14 = "insufficient extended-bottom";
            goto LABEL_211;
          }
        }
      }
    }
  }
  v59 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ExactBytesPerRow"));
  if (v59)
  {
    v60 = v59;
    v61 = CFNumberGetTypeID();
    if (v61 == CFGetTypeID(v60))
    {
      v62 = _getCVPixelBuffer(a1);
      if (!v62 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v62[15] + 312))(v62[15]))
      {
        v63 = _getCVPixelBuffer(a1);
        v64 = v63 ? (*(uint64_t (**)(_QWORD))(*(_QWORD *)v63[15] + 296))(v63[15]) : 0;
        valuePtr = 0;
        if (!CFNumberGetValue(v60, kCFNumberLongType, &valuePtr) || valuePtr != v64)
        {
          v14 = "exact bytes per row not satisfied";
          goto LABEL_211;
        }
      }
    }
    else
    {
      v73 = CFArrayGetTypeID();
      if (v73 == CFGetTypeID(v60))
      {
        v74 = _getCVPixelBuffer(a1);
        if (v74)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v74[15] + 312))(v74[15]))
          {
            v75 = _getCVPixelBuffer(a1);
            v76 = v75 ? (*(uint64_t (**)(_QWORD))(*(_QWORD *)v75[15] + 344))(v75[15]) : 0;
            if (CFArrayGetCount(v60) == v76 && v76)
            {
              v114 = 0;
              while (1)
              {
                ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v60, v114);
                v116 = _getCVPixelBuffer(a1);
                v117 = v116
                     ? (*(uint64_t (**)(_QWORD, CFIndex))(*(_QWORD *)v116[15] + 376))(v116[15], v114)
                     : 0;
                v118 = CFNumberGetTypeID();
                if (v118 == CFGetTypeID(ValueAtIndex))
                {
                  valuePtr = 0;
                  if (!CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr) || valuePtr != v117)
                    break;
                }
                if (v76 == ++v114)
                  goto LABEL_135;
              }
              v14 = "exact bytes per row not satisfied (planar)";
              goto LABEL_211;
            }
          }
        }
      }
    }
  }
LABEL_135:
  v77 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("BytesPerRowAlignment"));
  if (v77)
  {
    v78 = v77;
    v79 = CFNumberGetTypeID();
    if (v79 == CFGetTypeID(v78))
    {
      v80 = _getCVPixelBuffer(a1);
      if (v80 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v80[15] + 312))(v80[15]))
      {
        v81 = _getCVPixelBuffer(a1);
        if (v81)
        {
          v82 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v81[15] + 344))(v81[15]);
          if (v82)
          {
            v83 = v82;
            v84 = 0;
            while (1)
            {
              v85 = _getCVPixelBuffer(a1);
              if (v85)
                v85 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v85[15] + 376))(v85[15], v84);
              if (!numberIsMultipleOfCFNumber((uint64_t)v85, v78))
                break;
              if (v83 == ++v84)
                goto LABEL_150;
            }
            v14 = "bytes per row alignment not satisfied (planar)";
            goto LABEL_211;
          }
        }
      }
      else
      {
        v86 = _getCVPixelBuffer(a1);
        if (v86)
          v86 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v86[15] + 296))(v86[15]);
        if (!numberIsMultipleOfCFNumber((uint64_t)v86, v78))
        {
          v14 = "bytes per row alignment not satisfied";
          goto LABEL_211;
        }
      }
    }
  }
LABEL_150:
  v87 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("PlaneAlignment"));
  if (v87)
  {
    v88 = v87;
    v89 = CFNumberGetTypeID();
    if (v89 == CFGetTypeID(v88))
    {
      v90 = _getCVPixelBuffer(a1);
      if (v90 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v90[15] + 312))(v90[15]))
      {
        v91 = _getCVPixelBuffer(a1);
        if (v91)
        {
          v92 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v91[15] + 344))(v91[15]);
          if (v92)
          {
            v93 = v92;
            v94 = 0;
            do
            {
              BaseAddressOfPlaneWithoutLock = getBaseAddressOfPlaneWithoutLock(a1, v94);
              if (!addressIsMultipleOfCFNumber((uint64_t)BaseAddressOfPlaneWithoutLock, v88))
                goto LABEL_187;
            }
            while (v93 != ++v94);
          }
        }
      }
      else
      {
        BaseAddressWithoutLock = getBaseAddressWithoutLock(a1);
        if (!addressIsMultipleOfCFNumber((uint64_t)BaseAddressWithoutLock, v88))
        {
LABEL_187:
          v14 = "plane alignment not satisfied";
          goto LABEL_211;
        }
      }
    }
  }
  v97 = CFDictionaryGetValue(a2, CFSTR("ExactHeight"));
  if (!v97)
    goto LABEL_172;
  v98 = v97;
  v99 = CFNumberGetTypeID();
  if (v99 != CFGetTypeID(v98))
    goto LABEL_172;
  v100 = _getCVPixelBuffer(a1);
  v101 = v100 ? (*(uint64_t (**)(_QWORD))(*(_QWORD *)v100[15] + 280))(v100[15]) : 0;
  extraRowsOnTop = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraColumnsOnRight = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  v102 = extraRowsOnTop + v101 + extraRowsOnBottom;
  valuePtr = 0;
  if (CFNumberGetValue((CFNumberRef)v98, kCFNumberLongType, &valuePtr) && valuePtr == v102)
  {
LABEL_172:
    v104 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("IOSurfaceProperties"));
    v105 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("CacheMode"));
    if ((unint64_t)v104 | (unint64_t)v105)
    {
      v106 = v105;
      v107 = _getCVPixelBuffer(a1);
      if (v107)
        v108 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[15] + 152))(v107[15]);
      else
        v108 = 0;
      if (v104)
      {
        v109 = CFDictionaryGetTypeID();
        if (v109 == CFGetTypeID(v104))
        {
          if (!v108)
          {
            v14 = "not IOSurface backed";
            goto LABEL_211;
          }
          v104 = (const __CFDictionary *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x1E0CBBF10]);
        }
        else
        {
          v104 = 0;
        }
      }
      if ((unint64_t)v106 | (unint64_t)v104)
      {
        if (!v108)
        {
          v14 = "not IOSurface backed -- no custom cache mode";
          goto LABEL_211;
        }
        CacheMode = IOSurfaceGetCacheMode();
        if (v106 && (v111 = CFArrayGetTypeID(), v111 == CFGetTypeID(v106)))
        {
          if (!numberIsInCFArrayOfCFNumbers(CacheMode, v106))
          {
            v14 = "cache mode not in list";
            goto LABEL_211;
          }
        }
        else if (v104)
        {
          v112 = CFNumberGetTypeID();
          if (v112 == CFGetTypeID(v104))
          {
            valuePtr = 0;
            if (!CFNumberGetValue(v104, kCFNumberLongType, &valuePtr) || valuePtr != CacheMode)
            {
              v14 = "wrong cache mode";
              goto LABEL_211;
            }
          }
        }
      }
    }
    return 1;
  }
  v14 = "exact height not satisfied";
LABEL_211:
  reportIncompatiblePixelBuffer(a1, a2, v14);
  return 0;
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  BOOL v10;
  BOOL v13;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v23;
  const void *DescriptionWithPixelFormatType;
  const __CFAllocator *v25;
  CVImageBacking **v26;
  CVImageBacking **v27;
  const __CFAllocator *v28;
  __CVBuffer *v29;
  __CVBuffer *v30;
  int v31;
  CVReturn v33;

  v33 = 0;
  if (pixelBufferOut)
    v10 = baseAddress == 0;
  else
    v10 = 1;
  v13 = v10 || width == 0 || height == 0 || bytesPerRow == 0;
  if (v13 || !is_mul_ok(height, bytesPerRow))
    return -6661;
  *pixelBufferOut = 0;
  if (pixelBufferAttributes)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = MutableCopy;
  if (!MutableCopy)
    return -6662;
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, CFSTR("PixelFormatDescription")))
      goto LABEL_23;
LABEL_30:
    v31 = -6680;
    goto LABEL_31;
  }
  DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType)
    goto LABEL_30;
  CFDictionarySetValue(v23, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
LABEL_23:
  v26 = CVPixelBufferBacking::alloc(allocator, v25);
  if (v26)
  {
    v27 = v26;
    if ((*(uint64_t (**)(CVImageBacking *, size_t, size_t, void *, size_t, size_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, CVPixelBufferReleaseBytesCallback, _QWORD, void *, __CFDictionary *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, CVReturn *))(*(_QWORD *)v26[2] + 248))(v26[2], width, height, baseAddress, bytesPerRow * height, bytesPerRow, 0, 0, 0, 0, 0, releaseCallback, 0, releaseRefCon, v23, 0, 0, 0, 0,
           0,
           &v33))
    {
      kdebug_trace();
      v29 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v28);
      if (v29)
      {
        v30 = v29;
        if ((*(uint64_t (**)(_QWORD, CVImageBacking *))(**((_QWORD **)v29 + 2) + 248))(*((_QWORD *)v29 + 2), v27[2]))
        {
          *pixelBufferOut = v30;
        }
        else
        {
          v33 = -6660;
          CFRelease(v30);
        }
      }
      else
      {
        v33 = -6662;
      }
      CFRelease(v27);
    }
    goto LABEL_32;
  }
  v31 = -6662;
LABEL_31:
  v33 = v31;
LABEL_32:
  CFRelease(v23);
  return v33;
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  _QWORD *CVPixelBuffer;
  double v2;
  double v3;
  CGSize result;

  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(_QWORD *))(*CVPixelBuffer + 176))(CVPixelBuffer);
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
  }
  result.height = v3;
  result.width = v2;
  return result;
}

uint64_t CVDataBufferPoolCreateDataBuffer(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *CVDataBufferPool;
  uint64_t v6;
  unsigned int v8;

  v8 = -6660;
  CVDataBufferPool = _getCVDataBufferPool(a2);
  v6 = 4294960635;
  if (a3 && CVDataBufferPool)
  {
    *a3 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, unsigned int *))(*CVDataBufferPool + 104))(CVDataBufferPool, a1, 0, &v8);
    return v8;
  }
  return v6;
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent12LSB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAE80;
}

void *retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha8(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAF48;
}

void *retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha16(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAF70;
}

void *retrievePixelFormat_kCVPixelFormatType_FiveComponent16(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AAF98;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ABEC0;
}

void *retrievePixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ACC08;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD8D8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD900;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD928;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD950;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD978;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD9A0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD9C8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48AD9F0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADA18;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADA40;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADA68;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADA90;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADAB8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADAE0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADB08;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADB30;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADB58;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADB80;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADBA8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADBD0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADBF8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADC20;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADC48;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADC70;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADC98;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADCC0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADCE8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADD10;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADD38;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADD60;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADD88;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange(int a1)
{
  void *v1;

  v1 = &unk_1E48ADDD8;
  if (a1)
    v1 = 0;
  if (a1 == 0x80000)
    return &unk_1E48ADDB0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADE00;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADE28;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange(int a1)
{
  void *v1;

  v1 = &unk_1E48ADE78;
  if (a1)
    v1 = 0;
  if (a1 == 0x80000)
    return &unk_1E48ADE50;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADEA0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADEC8;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADEF0;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADF18;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADF40;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADF68;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADF90;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48ADFB8;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_16LE565(int a1)
{
  void *v1;

  v1 = &unk_1E48AE008;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48ADFE0;
  else
    return v1;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6A18[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6A48[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6A78[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AE3C8;
  v2 = &unk_1E48AE3A0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AE378;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX(int a1)
{
  void *v1;

  v1 = &unk_1E48AE418;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48AE3F0;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX(int a1)
{
  void *v1;

  v1 = &unk_1E48AE490;
  if (a1 != 0x20000)
    v1 = 0;
  if (a1 == 0x10000)
    return &unk_1E48AE468;
  else
    return v1;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6AA8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6AD8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6B08[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6B38[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6B68[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6B98[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  v1 = v2 >> 16;
  if (v1 > 5)
    return 0;
  else
    return qword_1E48A6BC8[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFEF8;
  v2 = &unk_1E48AFED0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFEA8;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFF70;
  v2 = &unk_1E48AFF48;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFF20;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  void *v1;
  void *v2;

  v1 = &unk_1E48AFFE8;
  v2 = &unk_1E48AFFC0;
  if (a1 != 0x40000)
    v2 = 0;
  if (a1 != 393216)
    v1 = v2;
  if (a1 == 0x20000)
    return &unk_1E48AFF98;
  else
    return v1;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0150;
  else
    return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8(int a1)
{
  if (a1 == 0x20000)
    return &unk_1E48B0178;
  else
    return 0;
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A6FF8[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A7078[v1];
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1;
  unint64_t v2;

  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  v1 = v2 >> 16;
  if (v1 > 0xF)
    return 0;
  else
    return qword_1E48A70F8[v1];
}

void *retrievePixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3058;
}

void *retrievePixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B37D8;
}

void *retrievePixelFormat_kCVPixelFormatType_12RGBPacked_R12B(int a1)
{
  if (a1)
    return 0;
  else
    return &unk_1E48B3800;
}

IOSurfaceRef IOOrEXSurfaceGetUseCount(IOSurfaceRef buffer)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetUseCount(buffer);
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer)
    return (IOSurfaceRef)IOSurfaceGetElementHeightOfPlane(buffer, planeIndex);
  return buffer;
}

uint64_t CVDataBufferPoolCreate(CVDataBufferPool *this, const __CFAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, CVDataBufferPool ***a6)
{
  uint64_t result;
  CVDataBufferPool **v13;
  CVDataBufferPool **v14;
  unsigned int v15;

  v15 = -6660;
  if (!a6)
    return 4294960635;
  *a6 = 0;
  result = 4294960635;
  if ((_DWORD)a3 && a4)
  {
    v13 = CVDataBufferPool::alloc(this, a2);
    if (v13)
    {
      v14 = v13;
      if ((*(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v13[2] + 96))(v13[2], a2, a3, a4, a5, &v15))
      {
        result = 0;
        *a6 = v14;
      }
      else
      {
        return v15;
      }
    }
    else
    {
      return 4294960634;
    }
  }
  return result;
}

_QWORD *CVDataBufferPoolGetAttributes(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBufferPool(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 112))(result);
  return result;
}

_QWORD *CVDataBufferPoolGetDataBufferAttributes(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBufferPool(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 120))(result);
  return result;
}

uint64_t CVDataBufferPoolCreateDataBufferWithAuxAttributes(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *CVDataBufferPool;
  uint64_t v8;
  unsigned int v10;

  v10 = -6660;
  CVDataBufferPool = _getCVDataBufferPool(a2);
  v8 = 4294960635;
  if (a4 && CVDataBufferPool)
  {
    *a4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, unsigned int *))(*CVDataBufferPool + 104))(CVDataBufferPool, a1, a3, &v10);
    return v10;
  }
  return v8;
}

uint64_t CVDataBufferPoolScanIOSurfaces(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *CVDataBufferPool;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (CVDataBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*CVDataBufferPool + 192))(CVDataBufferPool, a2, a3, 2);
  else
    return 4294960635;
}

uint64_t CVDataBufferPoolScanIOSurfacesWithOptions(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  _QWORD *CVDataBufferPool;
  _QWORD *v8;
  int BoolValueWithDefault;
  int v10;
  uint64_t v12;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool)
    return 4294960635;
  v8 = CVDataBufferPool;
  if (a4)
  {
    BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(a4, CFSTR("ScanFreeIOSurfaces"), 0);
    v10 = CVDictionaryGetBoolValueWithDefault(a4, CFSTR("ScanUsedIOSurfaces"), 0);
    if (!(v10 | BoolValueWithDefault))
      return 4294960635;
    if (v10)
      v12 = (2 * (BoolValueWithDefault != 0)) | 4u;
    else
      v12 = 2 * (BoolValueWithDefault != 0);
  }
  else
  {
    v12 = 2;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v8 + 192))(v8, a2, a3, v12);
}

uint64_t CVDataBufferPoolPrefetchPages(_QWORD *a1)
{
  _QWORD *CVDataBufferPool;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (CVDataBufferPool)
    return (*(uint64_t (**)(_QWORD *))(*CVDataBufferPool + 176))(CVDataBufferPool);
  else
    return 4294960635;
}

uint64_t CVDataBufferPoolFlush(_QWORD *a1, uint64_t a2)
{
  _QWORD *CVDataBufferPool;
  uint64_t result;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  result = kdebug_trace();
  if (CVDataBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*CVDataBufferPool + 184))(CVDataBufferPool, a2);
  return result;
}

uint64_t CVDataBufferPoolSetMinBufferCount(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *CVDataBufferPool;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (CVDataBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*CVDataBufferPool + 144))(CVDataBufferPool, a2, a3, a4, a5);
  else
    return 4294960635;
}

uint64_t CVDataBufferPoolGetMinBufferCount(_QWORD *a1, uint64_t a2)
{
  _QWORD *CVDataBufferPool;

  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (CVDataBufferPool)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*CVDataBufferPool + 152))(CVDataBufferPool, a2);
  else
    return -6661;
}

uint64_t CVDataBufferPoolTakeOwnershipOfIOSurface(const __CFAllocator *a1, CFTypeRef cf, __IOSurface *a3)
{
  uint64_t result;
  CFTypeID v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  uint64_t IntValueWithDefault;
  BOOL v15;
  uint64_t v16;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v18;
  const __CFAllocator *v19;
  int v20;
  CVBufferBacking **v21;
  CVBufferBacking **v22;
  uint64_t ID;
  char v24;
  unsigned int v25;

  v25 = 0;
  result = 4294960635;
  if (cf && a3)
  {
    v7 = CFGetTypeID(cf);
    if (v7 != CVDataBufferPoolGetTypeID())
      return 4294960635;
    v8 = *((_QWORD *)cf + 2);
    if (!v8)
      return 4294960635;
    v9 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
    if (!v9)
      return 4294960635;
    v10 = v9;
    Value = CFDictionaryGetValue(v9, CFSTR("IOSurfaceProperties"));
    v12 = Value;
    if (Value)
    {
      v13 = CFGetTypeID(Value);
      if (v13 != CFDictionaryGetTypeID())
        return 4294960635;
    }
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v12, (const void *)*MEMORY[0x1E0CBBEE0], 0);
    v15 = IntValueWithDefault != IOSurfaceGetAllocSize(a3) || IntValueWithDefault == 0;
    if (!v15
      && (v16 = CVDictionaryGetIntValueWithDefault(v12, (const void *)*MEMORY[0x1E0CBC070], 0),
          IOSurfaceGetPixelFormat(a3) == (_DWORD)v16))
    {
      if (!IOSurfaceGetWidth(a3)
        && !IOSurfaceGetHeight(a3)
        && !IOSurfaceGetBytesPerRow(a3)
        && IOSurfaceGetBytesPerElement(a3) == 1
        && IOSurfaceGetElementWidth(a3) == 1
        && IOSurfaceGetElementHeight(a3) == 1)
      {
        MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, v10);
        if (MutableCopy)
        {
          v18 = MutableCopy;
          ID = IOSurfaceGetID(a3);
          v24 = 0;
          (*(void (**)(uint64_t, __IOSurface *(*)(__IOSurface *, _BYTE *), uint64_t *, uint64_t))(*(_QWORD *)v8 + 192))(v8, dataBufferPoolScanIOSurfacesCallback, &ID, 6);
          if (v24)
          {
            v20 = -6661;
          }
          else
          {
            v21 = CVDataBufferBacking::alloc(a1, v19);
            if (v21)
            {
              v22 = v21;
              if ((*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFMutableDictionaryRef, _QWORD, __IOSurface *, unsigned int *))(*(_QWORD *)v21[2] + 176))(v21[2], v16, IntValueWithDefault, v18, 0, a3, &v25))
              {
                v25 = (*(uint64_t (**)(uint64_t, CVBufferBacking **))(*(_QWORD *)v8 + 200))(v8, v22);
                if (v25)
                  CFRelease(v22);
              }
              goto LABEL_23;
            }
            v20 = -6662;
          }
          v25 = v20;
LABEL_23:
          CFRelease(v18);
          return v25;
        }
      }
      return 4294960634;
    }
    else
    {
      return 4294960635;
    }
  }
  return result;
}

__IOSurface *dataBufferPoolScanIOSurfacesCallback(__IOSurface *result, _BYTE *a2)
{
  if (result && a2)
  {
    result = (__IOSurface *)IOSurfaceGetID(result);
    if (*(_QWORD *)a2 == result)
      a2[8] = 1;
  }
  return result;
}

_QWORD *CVDataBufferGetPixelFormatType(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[14] + 192))(result[14]);
  return result;
}

_QWORD *CVDataBufferGetDataFormatType(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVDataBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)result[14] + 192))(result[14]);
  return result;
}

uint64_t CVDataBufferCreateWithIOSurface(CFAllocatorRef allocator, __IOSurface *a2, const __CFDictionary *a3, CVBuffer ***a4)
{
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v8;
  size_t AllocSize;
  size_t v10;
  uint64_t PixelFormat;
  uint64_t v12;
  const __CFDictionary *v13;
  const __CFAllocator *v14;
  CVBufferBacking **v15;
  CVBufferBacking **v16;
  const __CFAllocator *v17;
  CVBuffer **v18;
  const void *v19;
  CFTypeID v20;
  uint64_t v21;
  int v22;
  const void *v23;
  CFTypeID v24;
  CVDataBuffer *v25;
  const void *Value;
  const void *v27;
  CFTypeID v28;
  int v29;
  unsigned int v32;

  v32 = 0;
  if (!a4 || !a2)
    return -6661;
  *a4 = 0;
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = MutableCopy;
  if (!MutableCopy)
    return -6662;
  AllocSize = IOSurfaceGetAllocSize(a2);
  if (!AllocSize || (v10 = AllocSize, PixelFormat = IOSurfaceGetPixelFormat(a2), !(_DWORD)PixelFormat))
  {
    v22 = -6680;
LABEL_22:
    v32 = v22;
    v23 = v8;
LABEL_42:
    CFRelease(v23);
    return v32;
  }
  v12 = PixelFormat;
  if (IOSurfaceGetWidth(a2)
    || IOSurfaceGetHeight(a2)
    || IOSurfaceGetBytesPerRow(a2)
    || IOSurfaceGetBytesPerElement(a2) != 1
    || IOSurfaceGetElementWidth(a2) != 1
    || IOSurfaceGetElementHeight(a2) != 1)
  {
    v22 = -6662;
    goto LABEL_22;
  }
  v13 = IOSurfaceCopyAllValues(a2);
  v15 = CVDataBufferBacking::alloc(allocator, v14);
  if (v15)
  {
    v16 = v15;
    if (!(*(uint64_t (**)(CVBufferBacking *, uint64_t, size_t, const __CFDictionary *, _QWORD, __IOSurface *, unsigned int *))(*(_QWORD *)v15[2] + 176))(v15[2], v12, v10, v8, 0, a2, &v32))
    {
      v18 = 0;
      goto LABEL_38;
    }
    v18 = CVDataBuffer::alloc(allocator, v17);
    if (v18)
    {
      v19 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v19 == CFDictionaryGetValue(v8, CFSTR("IOSurfaceDoNotIncrementUseCount")))
      {
        v20 = CFGetTypeID(v18);
        if (v20 == CVDataBufferGetTypeID())
          v21 = (uint64_t)v18[2];
        else
          v21 = 0;
        CVDataBuffer::setDoNotAutomaticallyBumpUseCount(v21);
      }
      if ((*(uint64_t (**)(CVBuffer *, CVBufferBacking *))(*(_QWORD *)v18[2] + 160))(v18[2], v16[2]))
      {
        v24 = CFGetTypeID(v18);
        if (v24 == CVDataBufferGetTypeID())
        {
          v25 = v18[2];
          if (v25)
            CVDataBuffer::pullAttachmentsFromIOSurface(v25, v13);
        }
        CVTracePoolAction(1, 0, (_QWORD **)v16, "CVDataBuffer created from IOSurface", 0, 0);
        if (v13)
        {
          Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CBC048]);
          if (Value)
          {
            v27 = Value;
            v28 = CFGetTypeID(Value);
            if (v28 == CFStringGetTypeID())
              CVBufferBacking::setPoolName(v16[2], v27);
          }
        }
        *a4 = v18;
        v18 = 0;
        goto LABEL_37;
      }
      v29 = -6660;
    }
    else
    {
      v29 = -6662;
    }
    v32 = v29;
LABEL_37:
    CFRelease(v16);
    goto LABEL_38;
  }
  v18 = 0;
  v32 = -6662;
LABEL_38:
  CFRelease(v8);
  if (v13)
    CFRelease(v13);
  if (v18)
  {
    v23 = v18;
    goto LABEL_42;
  }
  return v32;
}

uint64_t CVDataBufferIncrementUseCountForCategory(_QWORD *a1, unsigned int a2)
{
  CVDataBuffer *CVDataBuffer;

  CVDataBuffer = (CVDataBuffer *)_getCVDataBuffer(a1);
  if (a2 <= 1 && CVDataBuffer)
    return CVDataBuffer::incrementUseCountForCategory(CVDataBuffer, a2);
  else
    return 4294960635;
}

uint64_t CVDataBufferDecrementUseCountForCategory(_QWORD *a1, unsigned int a2)
{
  CVDataBuffer *CVDataBuffer;

  CVDataBuffer = (CVDataBuffer *)_getCVDataBuffer(a1);
  if (a2 <= 1 && CVDataBuffer)
    return CVDataBuffer::decrementUseCountForCategory(CVDataBuffer, a2);
  else
    return 4294960635;
}

uint64_t CVAtomicBunchGetAndRemoveAnyObject(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  unsigned int *v3;
  char v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE v9[12];
  char v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)&v9[4] = 0;
  if (result)
  {
    v1 = result;
    for (i = *(_QWORD *)(result + 16); i; i = *(_QWORD *)i)
    {
      if (*(_QWORD *)&v9[4])
        break;
      v3 = (unsigned int *)(i + 16);
      *(_QWORD *)v9 = *(unsigned int *)(i + 16);
      if ((v9[0] & 1) == 0 && (v9[0] & 4) != 0)
      {
        v4 = 1;
        v10 = ElementModifyFlags(i, 1, 0x10000);
        if ((v10 & 1) == 0 && (v10 & 4) != 0)
        {
          *(_QWORD *)&v9[4] = *(_QWORD *)(i + 8);
          v5 = -1 << *(_BYTE *)(v1 + 40);
          v6 = *(unsigned int **)(v1 + 32);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + v5, v6));
          v4 = 0;
        }
        while (1)
        {
          v12 = *v3;
          v11 = *v3 - 0x10000;
          if ((v4 & 1) == 0)
            v11 &= 0xFFFFFFF8;
          while (1)
          {
            v8 = __ldxr(v3);
            if (v8 != v12)
              break;
            if (!__stxr(v11, v3))
              goto LABEL_17;
          }
          __clrex();
        }
      }
LABEL_17:
      ;
    }
    return *(_QWORD *)&v9[4];
  }
  return result;
}

uint64_t CVOpenGLESContext::operator new(CVOpenGLESContext *this, uint64_t a2, void *a3)
{
  return a2;
}

CVObject **CVOpenGLESContext::alloc(CVOpenGLESContext *this, const __CFAllocator *a2)
{
  CVObject *TypeID;
  CVObject **v4;
  CVObject **v5;
  _QWORD *v6;

  if (_cvUseTrackingAllocator)
    this = (CVOpenGLESContext *)_cvTrackingGetCFAllocator(CFSTR("CVOpenGLESContext"));
  TypeID = (CVObject *)CVObjectGetTypeID();
  v4 = (CVObject **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  v5 = v4;
  if (v4)
  {
    CVObject::CVObject(v4[2], v4);
    *v6 = off_1E48A2FC0;
  }
  return v5;
}

void CVOpenGLESContext::CVOpenGLESContext(CVOpenGLESContext *this, const void *a2)
{
  _QWORD *v2;

  CVObject::CVObject(this, a2);
  *v2 = off_1E48A2FC0;
}

uint64_t CVOpenGLESContext::finalize(CVOpenGLESContext *this)
{
  void *v2;

  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2 && *((_BYTE *)this + 96))

  return CVObject::finalize(this);
}

CVOpenGLESContext *CVOpenGLESContext::initWithContext(CVOpenGLESContext *this, void *a2)
{
  void *v4;
  pthread_mutexattr_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_settype(&v6, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), &v6);
  pthread_mutexattr_destroy(&v6);
  *((_BYTE *)this + 96) = 1;
  if (CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextOnce != -1)
    dispatch_once(&CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextOnce, &__block_literal_global);
  v4 = (void *)objc_msgSend(objc_alloc((Class)CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextClass), "initWithAPI:sharegroup:", objc_msgSend(a2, "API"), objc_msgSend(a2, "sharegroup"));
  *((_QWORD *)this + 10) = v4;
  if (v4)
  {
    *((_QWORD *)this + 11) = objc_msgSend(v4, "getMacroContextPrivate");
  }
  else
  {
    (*(void (**)(CVOpenGLESContext *))(*(_QWORD *)this + 40))(this);
    return 0;
  }
  return this;
}

Class ___ZN17CVOpenGLESContext15initWithContextEPv_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("EAGLContext"));
  CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextClass = (uint64_t)result;
  return result;
}

CVOpenGLESContext *CVOpenGLESContext::initWithNonRetainedContext(CVOpenGLESContext *this, void *a2)
{
  pthread_mutexattr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  pthread_mutexattr_init(&v5);
  pthread_mutexattr_settype(&v5, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), &v5);
  pthread_mutexattr_destroy(&v5);
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 10) = a2;
  *((_QWORD *)this + 11) = objc_msgSend(a2, "getMacroContextPrivate");
  return this;
}

uint64_t CVOpenGLESContext::texImageIOSurface(id *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, __IOSurface *a8, unsigned int a9)
{
  uint64_t v10;

  BYTE4(v10) = 0;
  LODWORD(v10) = a9;
  return objc_msgSend(this[10], "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a8, a2, a3, a4, a5, a6, a7, v10);
}

uint64_t CVBufferBacking::enterCriticalReadSection(CVBufferBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  return result;
}

uint64_t CVBufferBacking::enterCriticalWriteSection(CVBufferBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result);
  return result;
}

uint64_t CVBufferBacking::exitCriticalSection(CVBufferBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  return result;
}

uint64_t CVBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(CVBufferBacking *this)
{
  return 0;
}

uint64_t CVBufferBacking::bunchPair(CVBufferBacking *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t CVBufferBacking::createCVBuffer(CVBufferBacking *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t CVBufferBacking::getIOOrEXSurface(CVBufferBacking *this)
{
  return 0;
}

uint64_t CVBufferBacking::getIOOrEXSurfaceWithoutAssertion(CVBufferBacking *this)
{
  return (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)this + 152))(this);
}

uint64_t CVBufferBacking::setNeverAgeOutBacking(uint64_t this)
{
  *(_BYTE *)(this + 113) = 1;
  return this;
}

BOOL CVBufferBacking::okToAgeOutBacking(CVBufferBacking *this)
{
  return *((_BYTE *)this + 113) == 0;
}

void CVBufferBacking::initPoolName(CVBufferBacking *this)
{
  __IOSurface *v2;
  CFTypeRef v3;
  const void *v4;
  CFTypeID v5;

  if (!*((_DWORD *)this + 32))
  {
    v2 = (__IOSurface *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)this + 152))(this);
    if (v2)
    {
      v3 = IOSurfaceCopyValue(v2, (CFStringRef)*MEMORY[0x1E0CBC048]);
      if (v3)
      {
        v4 = v3;
        v5 = CFGetTypeID(v3);
        if (v5 == CFStringGetTypeID())
          CVBufferBacking::setPoolName(this, v4);
        CFRelease(v4);
      }
    }
  }
}

void CVBufferBacking::setPoolName(CVBufferBacking *this, CFTypeRef cf)
{
  unsigned int *v4;
  const void *v6;

  v4 = (unsigned int *)((char *)this + 128);
  while (!__ldxr(v4))
  {
    if (!__stxr(1u, v4))
    {
      if (!cf)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  __clrex();
  if (cf)
LABEL_5:
    CFRetain(cf);
LABEL_6:
  v6 = (const void *)*((_QWORD *)this + 15);
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 15) = cf;
}

uint64_t CVBufferBacking::getPoolName(CVBufferBacking *this)
{
  unsigned int *v2;

  v2 = (unsigned int *)((char *)this + 128);
  while (!__ldxr(v2))
  {
    if (!__stxr(1u, v2))
    {
      CVBufferBacking::initPoolName(this);
      return *((_QWORD *)this + 15);
    }
  }
  __clrex();
  return *((_QWORD *)this + 15);
}

CFTypeRef CVMetalBufferRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CVMetalBufferRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CVMetalBufferGetTypeID()
{
  if (CVMetalBufferGetTypeID::once != -1)
    dispatch_once_f(&CVMetalBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBuffer);
  return kCVMetalBufferID;
}

uint64_t classInitialize_CVMetalBuffer(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVMetalBufferID = result;
  return result;
}

CVBuffer **CVMetalBuffer::alloc(CVMetalBuffer *this, const __CFAllocator *a2)
{
  CVBuffer **v3;
  CVBuffer **v4;
  _QWORD *v5;

  if (_cvUseTrackingAllocator)
    this = (CVMetalBuffer *)_cvTrackingGetCFAllocator(CFSTR("CVMetalBuffer"));
  if (CVMetalBufferGetTypeID::once != -1)
    dispatch_once_f(&CVMetalBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBuffer);
  v3 = (CVBuffer **)CVObject::alloc((CVObject *)kCVMetalBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  v4 = v3;
  if (v3)
  {
    CVBuffer::CVBuffer(v3[2], v3);
    *v5 = off_1E48A2A20;
    v5[12] = 0;
  }
  return v4;
}

void CVMetalBuffer::CVMetalBuffer(CVMetalBuffer *this, const void *a2)
{
  _QWORD *v2;

  CVBuffer::CVBuffer(this, a2);
  *v2 = off_1E48A2A20;
  v2[12] = 0;
}

uint64_t CVMetalBuffer::finalize(CVMetalBuffer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12));
    *((_QWORD *)this + 12) = 0;
  }
  return CVBuffer::finalize(this);
}

CFTypeRef *CVMetalBuffer::initWithBufferBacking(CFTypeRef *this, CVMetalBufferBacking *a2)
{
  CFTypeRef *v3;
  uint64_t v4;

  v3 = this;
  if (!CVBuffer::init(this))
    return 0;
  v4 = (*(uint64_t (**)(CVMetalBufferBacking *))(*(_QWORD *)a2 + 32))(a2);
  v3[12] = (CFTypeRef)v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  return v3;
}

uint64_t CVMetalBuffer::getBacking(CVMetalBuffer *this)
{
  return *((_QWORD *)this + 12);
}

CFStringRef CVMetalBuffer::copyDebugDescription(CVMetalBuffer *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  CFStringRef v7;

  v2 = (const void *)(*(uint64_t (**)(CVMetalBuffer *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVMetalBuffer *))(*(_QWORD *)this + 24))(this);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 184))(*((_QWORD *)this + 12));
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("<%@Ref %p buffer=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v4, v5, v6, *((_QWORD *)this + 11), *((_QWORD *)this + 10));
  CFRelease(v4);
  return v7;
}

uint64_t classFinalize_CVMetalBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVMetalBuffer(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVMetalBufferRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

CFTypeID CVOpenGLESTextureGetTypeID(void)
{
  if (CVOpenGLESTextureGetTypeID::once != -1)
    dispatch_once_f(&CVOpenGLESTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTexture);
  return kCVOpenGLESTextureID;
}

uint64_t classInitialize_CVOpenGLESTexture(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVOpenGLESTextureID = result;
  return result;
}

CVImageBuffer **CVOpenGLESTexture::alloc(CVOpenGLESTexture *this, const __CFAllocator *a2)
{
  CVImageBuffer **v3;
  CVImageBuffer **v4;
  _QWORD *v5;

  if (_cvUseTrackingAllocator)
    this = (CVOpenGLESTexture *)_cvTrackingGetCFAllocator(CFSTR("CVOpenGLESTexture"));
  if (CVOpenGLESTextureGetTypeID::once != -1)
    dispatch_once_f(&CVOpenGLESTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTexture);
  v3 = (CVImageBuffer **)CVObject::alloc((CVObject *)kCVOpenGLESTextureID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  v4 = v3;
  if (v3)
  {
    CVImageBuffer::CVImageBuffer(v3[2], v3);
    *v5 = off_1E48A3018;
    v5[12] = 0;
  }
  return v4;
}

void CVOpenGLESTexture::CVOpenGLESTexture(CVOpenGLESTexture *this, const void *a2)
{
  _QWORD *v2;

  CVImageBuffer::CVImageBuffer(this, a2);
  *v2 = off_1E48A3018;
  v2[12] = 0;
}

uint64_t CVOpenGLESTexture::finalize(CVOpenGLESTexture *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12));
    *((_QWORD *)this + 12) = 0;
  }
  return CVImageBuffer::finalize(this);
}

CFTypeRef *CVOpenGLESTexture::initWithTextureBacking(CFTypeRef *this, CVOpenGLESTextureBacking *a2)
{
  CFTypeRef *v3;

  v3 = this;
  if (!CVImageBuffer::init(this))
    return 0;
  (*(void (**)(CVOpenGLESTextureBacking *))(*(_QWORD *)a2 + 32))(a2);
  v3[12] = a2;
  if ((*(uint64_t (**)(CVOpenGLESTextureBacking *))(*(_QWORD *)a2 + 344))(a2))
    (*(void (**)(CFTypeRef))(*(_QWORD *)v3[12] + 64))(v3[12]);
  return v3;
}

uint64_t CVOpenGLESTexture::getBacking(CVOpenGLESTexture *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t CVOpenGLESTexture::getImageBacking(CVOpenGLESTexture *this)
{
  return *((_QWORD *)this + 12);
}

float CVOpenGLESTexture::getCleanTexCoords(CVOpenGLESTexture *this, float *a2, float *a3, float *a4, float *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;

  v10 = (*(double (**)(CVOpenGLESTexture *))(*(_QWORD *)this + 192))(this);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = (*(double (**)(_QWORD))(**((_QWORD **)this + 12) + 176))(*((_QWORD *)this + 12));
  v19 = v18;
  v20 = v12;
  v21 = v12 + v16;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 200))(*((_QWORD *)this + 12)))
  {
    v20 = v19 - v20;
    v21 = v19 - v21;
  }
  v22 = v10 / v17;
  *a5 = v22;
  *a2 = v22;
  v23 = (v10 + v14) / v17;
  *a4 = v23;
  v24 = v20 / v19;
  *a3 = v23;
  a3[1] = v24;
  a2[1] = v24;
  result = v21 / v19;
  a4[1] = result;
  a5[1] = result;
  return result;
}

CFStringRef CVOpenGLESTexture::copyDebugDescription(CVOpenGLESTexture *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  CFStringRef v13;

  v2 = (const void *)(*(uint64_t (**)(CVOpenGLESTexture *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVOpenGLESTexture *))(*(_QWORD *)this + 24))(this);
  v6 = (*(double (**)(_QWORD))(**((_QWORD **)this + 12) + 176))(*((_QWORD *)this + 12));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 176))(*((_QWORD *)this + 12));
  v8 = v7;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 264))(*((_QWORD *)this + 12));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 272))(*((_QWORD *)this + 12));
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 200))(*((_QWORD *)this + 12));
  v12 = "YES";
  if (!v11)
    v12 = "NO";
  v13 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p size=%g,%g target=%04x name=%u isFlipped=%s propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v4, v5, *(_QWORD *)&v6, v8, v9, v10, v12, *((_QWORD *)this + 11), *((_QWORD *)this + 10));
  CFRelease(v4);
  return v13;
}

uint64_t classFinalize_CVOpenGLESTexture(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVOpenGLESTexture(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVOpenGLESTextureRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVOpenGLESTexture(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

uint64_t CVBufferPool::getName(CVBufferPool *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t dumpToQTESWithParams(const char *a1, signed int a2, int a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8)
{
  const char *v12;
  size_t v13;
  char *v14;
  FILE *v15;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  int v19;
  uint64_t v20;
  CFIndex v21;
  const __CFDictionary *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  FILE *v29;
  FILE *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const char *v39;
  const char *v41;
  signed int v42;
  const __CFDictionary *v43;
  uint64_t v45;
  const __CFArray *theArray;
  int v49;
  int valuePtr;
  char v51[512];
  char buffer[512];
  uint64_t v53;

  v12 = a1;
  v53 = *MEMORY[0x1E0C80C00];
  v49 = 1;
  valuePtr = 8;
  v13 = strlen(a1);
  v14 = (char *)malloc_type_malloc(v13 + 5, 0x7E97318BuLL);
  sprintf(v14, "%s.vid", v12);
  v15 = fopen(v14, "wb");
  free(v14);
  if (!v15)
  {
    printf("Failed to open file for writing: %s", 0);
    v19 = 0;
    v20 = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a2);
  if (!DescriptionWithPixelFormatType)
    goto LABEL_6;
  ValueAtIndex = DescriptionWithPixelFormatType;
  Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("Planes"));
  theArray = Value;
  if (!Value)
  {
    if (a3 == 1)
    {
LABEL_9:
      v41 = v12;
      v42 = a2;
      v43 = a8;
      v21 = 0;
      v19 = 0;
      v45 = a3;
      do
      {
        v49 = 1;
        valuePtr = 8;
        v22 = ValueAtIndex;
        if (theArray)
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v21);
        v23 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("BitsPerBlock"));
        if (v23)
          CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
        v24 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("BlockWidth"));
        if (v24)
          CFNumberGetValue(v24, kCFNumberIntType, &v49);
        v25 = a5[v21];
        v26 = valuePtr / 8 * ((a4[v21] + v49 - 1) / v49);
        if (v25 >= 1)
        {
          v27 = *(char **)(a7 + 8 * v21);
          v28 = a5[v21];
          do
          {
            fwrite(v27, 1uLL, v26, v15);
            v27 += *(int *)(a6 + 4 * v21);
            --v28;
          }
          while (v28);
        }
        v19 += v26 * v25;
        ++v21;
        ValueAtIndex = v22;
      }
      while (v21 != v45);
      goto LABEL_20;
    }
    v39 = "pixel format only expects one plane.";
LABEL_38:
    puts(v39);
    return 0xFFFFFFFFLL;
  }
  if (CFArrayGetCount(Value) != a3)
  {
    v39 = "Number planes doesn't match the number of planes expected for this pixel format.";
    goto LABEL_38;
  }
  if (a3 >= 1)
    goto LABEL_9;
LABEL_6:
  v41 = v12;
  v42 = a2;
  v43 = a8;
  v19 = 0;
LABEL_20:
  fclose(v15);
  v20 = 0;
  a2 = v42;
  a8 = v43;
  v12 = v41;
LABEL_21:
  v29 = fopen(v12, "w");
  if (!v29)
  {
    printf("Failed to open file for writing: %s", v12);
    return 0xFFFFFFFFLL;
  }
  v30 = v29;
  fwrite("<?xml version=\"1.0\"?>\n", 0x16uLL, 1uLL, v29);
  fwrite("<?quicktime type=\"application/x-qt-qtes\"?>\n\n", 0x2CuLL, 1uLL, v30);
  fwrite("<elementary_streams>\n", 0x15uLL, 1uLL, v30);
  fwrite("\t<video\n", 8uLL, 1uLL, v30);
  fprintf(v30, "\t\tsrc=\"file://localhost%s.vid\"\n", v12);
  if (a2 > 0x28)
  {
    fprintf(v30, "\t\tcodec=\"%c%c%c%c\"\n", (a2 >> 24), (a2 << 8 >> 24), ((__int16)a2 >> 8), (char)a2);
    a2 = 24;
  }
  else
  {
    fwrite("\t\tcodec=\"raw \"\n", 0xFuLL, 1uLL, v30);
  }
  fprintf(v30, "\t\twidth=\"%d\"\n", *a4);
  fprintf(v30, "\t\theight=\"%d\"\n", *a5);
  fprintf(v30, "\t\tbytes_per_frame=\"%d\"\n", v19);
  fprintf(v30, "\t\tdepth=\"%d\"\n", a2);
  fprintf(v30, "\t\ttimescale=\"%d\"\n", 600);
  fprintf(v30, "\t\tframeduration=\"%d\"\n", 20);
  if (a8)
  {
    v31 = (const __CFString *)CFDictionaryGetValue(a8, CFSTR("CVImageBufferYCbCrMatrix"));
    if (v31)
    {
      v32 = v31;
      CFStringGetCString(CFSTR("CVImageBufferYCbCrMatrix"), buffer, 512, 0x600u);
      CFStringGetCString(v32, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    v33 = (const __CFString *)CFDictionaryGetValue(a8, CFSTR("CVImageBufferChromaLocationTopField"));
    if (v33)
    {
      v34 = v33;
      CFStringGetCString(CFSTR("CVImageBufferChromaLocationTopField"), buffer, 512, 0x600u);
      CFStringGetCString(v34, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    v35 = (const __CFString *)CFDictionaryGetValue(a8, CFSTR("CVImageBufferChromaLocationBottomField"));
    if (v35)
    {
      v36 = v35;
      CFStringGetCString(CFSTR("CVImageBufferChromaLocationBottomField"), buffer, 512, 0x600u);
      CFStringGetCString(v36, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    v37 = (const __CFString *)CFDictionaryGetValue(a8, CFSTR("CVImageBufferChromaSubsampling"));
    if (v37)
    {
      v38 = v37;
      CFStringGetCString(CFSTR("CVImageBufferChromaSubsampling"), buffer, 512, 0x600u);
      CFStringGetCString(v38, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
  }
  fwrite("\t/>\n", 4uLL, 1uLL, v30);
  fwrite("</elementary_streams>\n", 0x16uLL, 1uLL, v30);
  fclose(v30);
  return v20;
}

double CVMetalTextureGetSize(_QWORD *a1)
{
  _QWORD *CVMetalTexture;
  double result;

  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture)
    return 0.0;
  (*(void (**)(_QWORD))(*(_QWORD *)CVMetalTexture[13] + 176))(CVMetalTexture[13]);
  return result;
}

Boolean CVMetalTextureIsFlipped(CVMetalTextureRef image)
{
  _QWORD *CVMetalTexture;

  CVMetalTexture = _getCVMetalTexture(image);
  if (CVMetalTexture)
    LOBYTE(CVMetalTexture) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVMetalTexture[13] + 200))(CVMetalTexture[13]);
  return CVMetalTexture;
}

double CVMetalTextureGetCleanRect(_QWORD *a1)
{
  _QWORD *CVMetalTexture;
  double result;

  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture)
    return 0.0;
  (*(void (**)(_QWORD *))(*CVMetalTexture + 192))(CVMetalTexture);
  return result;
}

void CVMetalTextureGetCleanTexCoords(CVMetalTextureRef image, float *lowerLeft, float *lowerRight, float *upperRight, float *upperLeft)
{
  _QWORD *CVMetalTexture;

  CVMetalTexture = _getCVMetalTexture(image);
  if (CVMetalTexture)
  {
    (*(void (**)(_QWORD *, float *, float *, float *, float *))(*CVMetalTexture + 256))(CVMetalTexture, lowerLeft, lowerRight, upperRight, upperLeft);
  }
  else
  {
    *(_QWORD *)lowerLeft = 0;
    *(_QWORD *)lowerRight = 0;
    *(_QWORD *)upperRight = 0;
    *(_QWORD *)upperLeft = 0;
  }
}

_QWORD *CVMetalTextureBackingImage(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVMetalTexture(a1);
  if (result)
    return *(_QWORD **)(result[13] + 168);
  return result;
}

_QWORD *CVMetalTextureBufferBackingImage(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVMetalTexture(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
  return result;
}

__CVBuffer *CVMetalTextureCopyBacking(_QWORD *a1)
{
  _QWORD *CVMetalTexture;
  uint64_t v3;
  CFAllocatorRef v4;
  __CVBuffer *v5;

  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture)
    return 0;
  v3 = *(_QWORD *)(CVMetalTexture[13] + 168);
  v4 = CFGetAllocator(a1);
  v5 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, CFAllocatorRef))(*(_QWORD *)v3 + 144))(v3, v4);
  if (v5)
    CVBufferPropagateAttachments((CVBufferRef)a1, v5);
  return v5;
}

uint64_t CVGreatestCommonDivisor(int a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  if (a1 >= 0)
    LODWORD(v2) = a1;
  else
    LODWORD(v2) = -a1;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  if ((int)v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if ((int)v2 >= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((_DWORD)v2)
  {
    if ((int)v2 < 1)
    {
      return v4;
    }
    else
    {
      do
      {
        result = v2;
        v2 = ((int)v4 % (int)v2);
        LODWORD(v4) = result;
      }
      while ((int)v2 > 0);
    }
  }
  else if (v4 <= 1)
  {
    return 1;
  }
  else
  {
    return v4;
  }
  return result;
}

uint64_t CVDictionaryGetSizeTFromDataValueInDictionaryWithDefault(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const __CFData *Value;
  const __CFData *v5;
  CFTypeID v6;
  const UInt8 *BytePtr;

  Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    v6 = CFGetTypeID(Value);
    if (v6 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v5);
      if (BytePtr)
        return *(_QWORD *)BytePtr;
    }
  }
  return a3;
}

void cvDictionaryMerger(const void *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  CFTypeID TypeID;
  const __CFAllocator *v7;
  const __CFArray *Value;
  const __CFArray *MutableCopy;
  CFIndex v10;
  CFTypeID v11;
  const void *ValueAtIndex;
  CFTypeID v13;
  const void *v14;
  const __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  const __CFDictionary *v17;
  const __CFArray *v18;
  CFTypeID v19;
  const __CFAllocator *v20;
  const __CFDictionary *v21;
  CFMutableDictionaryRef v22;

  TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2) && CFDictionaryContainsKey(a3, a1))
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Value = (const __CFArray *)CFDictionaryGetValue(a3, a1);
    MutableCopy = CFArrayCreateMutableCopy(v7, 0, Value);
    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      v10 = 0;
      do
      {
        if (v10 >= CFArrayGetCount(a2))
          break;
        v11 = CFDictionaryGetTypeID();
        ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v10);
        if (v11 == CFGetTypeID(ValueAtIndex))
        {
          v13 = CFDictionaryGetTypeID();
          v14 = CFArrayGetValueAtIndex(a2, v10);
          if (v13 == CFGetTypeID(v14))
          {
            v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v10);
            v16 = CFDictionaryCreateMutableCopy(v7, 0, v15);
            v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v10);
            CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)cvDictionaryMerger, v16);
            CFArraySetValueAtIndex(MutableCopy, v10, v16);
            CFRelease(v16);
          }
        }
        ++v10;
      }
      while (v10 < CFArrayGetCount(MutableCopy));
    }
    CFDictionarySetValue(a3, a1, MutableCopy);
    v18 = MutableCopy;
    goto LABEL_14;
  }
  v19 = CFDictionaryGetTypeID();
  if (v19 == CFGetTypeID(a2) && CFDictionaryContainsKey(a3, a1))
  {
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v21 = (const __CFDictionary *)CFDictionaryGetValue(a3, a1);
    v22 = CFDictionaryCreateMutableCopy(v20, 0, v21);
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)cvDictionaryMerger, v22);
    CFDictionarySetValue(a3, a1, v22);
    v18 = v22;
LABEL_14:
    CFRelease(v18);
    return;
  }
  CFDictionarySetValue(a3, a1, a2);
}

uint64_t CVCFDictionaryMergeDictionaryInPlace(void *context, CFDictionaryRef theDict)
{
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)cvDictionaryMerger, context);
  return 0;
}

uint64_t CVDictionarySetSInt64Value(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t v7;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  v6 = v5;
  if (a1 && v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    v7 = 0;
LABEL_5:
    CFRelease(v6);
    return v7;
  }
  v7 = 4294960634;
  if (v5)
    goto LABEL_5;
  return v7;
}

CFMutableDictionaryRef CVDictionaryCreateMutableCopy(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (theDict)
    return CFDictionaryCreateMutableCopy(a1, 0, theDict);
  else
    return CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

__CFString *CVCreateHexDumpString(const unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  __CFString *i;
  unsigned int v5;

  v2 = a2;
  for (i = CFStringCreateMutable(0, (2 * a2) | 1); v2; --v2)
  {
    v5 = *a1++;
    CFStringAppendFormat(i, 0, CFSTR("%02X"), v5);
  }
  return i;
}

__CFString *CVCreateSHA1DigestString(const void *a1, CC_LONG a2)
{
  CC_SHA1_CTX c;
  unsigned __int8 md[20];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  CC_SHA1_Init(&c);
  CC_SHA1_Update(&c, a1, a2);
  CC_SHA1_Final(md, &c);
  return CVCreateHexDumpString(md, 20);
}

__CFString *CVCreateSHA1DigestStringFromData(const __CFData *a1)
{
  CFIndex Length;
  UInt8 *v3;
  __CFString *v4;
  CFRange v6;

  Length = CFDataGetLength(a1);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x4675226CuLL);
  v6.location = 0;
  v6.length = Length;
  CFDataGetBytes(a1, v6, v3);
  v4 = CVCreateSHA1DigestString(v3, Length);
  free(v3);
  return v4;
}

uint64_t CVRoundToMultipleDidOverflow(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t result;

  if (!a3)
    return 1;
  if (__CFADD__(a1, a2 - 1))
    return 1;
  v3 = (a1 + a2 - 1) / a2;
  if (!is_mul_ok(v3, a2))
    return 1;
  result = 0;
  *a3 = v3 * a2;
  return result;
}

uint64_t CVGetPermanentAllocator()
{
  return *MEMORY[0x1E0C9AE00];
}

uint64_t CVLockingBunchPairGetTypeID(void)
{
  if (CVLockingBunchPairGetTypeID(void)::once != -1)
    dispatch_once_f(&CVLockingBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLockingBunchPair);
  return kCVLockingBunchPairID;
}

_QWORD *CVLockingBunchPair::freeAgedOutBackings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  const __CFArray *v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (this[30])
  {
    v1 = this;
    (*(void (**)(_QWORD *))(*this + 160))(this);
    v14 = v1[27];
    v2 = CVGetCurrentHostTime();
    v3 = v1[29];
    v4 = v2 - v1[30];
    v11[0] = v1[28];
    v11[1] = v4;
    v15 = v3;
    v12 = 0;
    v5 = (*(uint64_t (**)(_QWORD *))(*v1 + 104))(v1);
    v6 = v1[31];
    v7 = __OFSUB__(v5, v6);
    v8 = v5 - v6;
    if (!((v8 < 0) ^ v7 | (v8 == 0)))
    {
      v13 = v8;
      v9 = (const __CFArray *)v1[28];
      v10 = (*(uint64_t (**)(_QWORD *))(*v1 + 104))(v1);
      CFArrayApplyFunctionReverse(v9, 0, v10, (uint64_t (*)(const void *, uint64_t))_freeAgedOutBackings, (uint64_t)v11);
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v1 + 168))(v1);
  }
  return this;
}

uint64_t CVLockingBunchPair::freeExcessBackingsNotInUse(CVLockingBunchPair *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *v5;
  uint64_t v6;
  _QWORD v8[6];

  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  v2 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 232))(this) - *((_QWORD *)this + 31);
  if (v2 >= 1)
  {
    v8[1] = 0;
    v8[2] = 0;
    v3 = *((_QWORD *)this + 27);
    v5 = (const __CFArray *)*((_QWORD *)this + 28);
    v4 = *((_QWORD *)this + 29);
    v8[3] = v2;
    v8[4] = v3;
    v8[0] = v5;
    v8[5] = v4;
    v6 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
    CFArrayApplyFunctionReverse(v5, 0, v6, (uint64_t (*)(const void *, uint64_t))_freeExcessBackings, (uint64_t)v8);
  }
  return (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
}

void _freeExcessBackings(_QWORD **a1, void *a2)
{
  _QWORD *v4;
  CFIndex Count;
  CFIndex v6;
  const __CFArray *v7;
  CFIndex FirstIndexOfValue;
  CFRange v9;

  if (*((_QWORD *)a2 + 3))
  {
    (*(void (**)(_QWORD *))(*a1[2] + 112))(a1[2]);
    v4 = (_QWORD *)*((_QWORD *)a2 + 4);
    Count = CFArrayGetCount(*((CFArrayRef *)a2 + 5));
    v6 = CFArrayGetCount(*(CFArrayRef *)a2);
    CVTracePoolAction(1, v4, a1, "-> is in excess, freed", Count, v6 - 1);
    v7 = *(const __CFArray **)a2;
    v9.length = CFArrayGetCount(*(CFArrayRef *)a2);
    v9.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v9, a1);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
    --*((_QWORD *)a2 + 3);
  }
}

uint64_t CVLockingBunchPair::bufferBackingInUse(CVLockingBunchPair *this, CVBufferBacking *a2)
{
  __CFArray *v4;
  const void *v5;
  const __CFArray *v6;
  CFIndex v7;
  const void *v8;
  CFIndex FirstIndexOfValue;
  _QWORD *v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  CFRange v15;

  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  v4 = (__CFArray *)*((_QWORD *)this + 29);
  v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  v6 = (const __CFArray *)*((_QWORD *)this + 28);
  v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
  v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v15.location = 0;
  v15.length = v7;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v15, v8);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)this + 28), FirstIndexOfValue);
  v10 = (_QWORD *)*((_QWORD *)this + 27);
  v11 = (_QWORD **)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v12 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
  v13 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
  CVTracePoolAction(2, v10, v11, "-> in use", v12, v13);
  return (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
}

uint64_t CVLockingBunchPair::bufferBackingNotInUse(CVLockingBunchPair *this, CVBufferBacking *a2)
{
  __CFArray *v4;
  const void *v5;
  const __CFArray *v6;
  CFIndex v7;
  const void *v8;
  CFIndex FirstIndexOfValue;
  _QWORD *v10;
  _QWORD **v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  CFRange v16;

  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  v4 = (__CFArray *)*((_QWORD *)this + 28);
  v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  v6 = (const __CFArray *)*((_QWORD *)this + 29);
  v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
  v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v16.location = 0;
  v16.length = v7;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v16, v8);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)this + 29), FirstIndexOfValue);
  v10 = (_QWORD *)*((_QWORD *)this + 27);
  v11 = (_QWORD **)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  if ((*(unsigned int (**)(CVBufferBacking *))(*(_QWORD *)a2 + 80))(a2))
    v12 = "-> not in use";
  else
    v12 = "-> not in use [but IOSurface is in use elsewhere]";
  v13 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
  v14 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
  CVTracePoolAction(2, v10, v11, v12, v13, v14);
  return (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
}

uint64_t CVLockingBunchPair::setMaximumBufferAge(CVLockingBunchPair *this, double a2)
{
  CVHostTimeBase *v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (CVHostTimeBase *)(*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  if (!CVHostTimeBase::sIsInited)
    CVHostTimeBase::Initialize(v4);
  LODWORD(v5) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v6) = CVHostTimeBase::sToNanosDenominator;
  *((_QWORD *)this + 30) = (unint64_t)((double)(unint64_t)(a2 * 1000000000.0) / (double)v5 * (double)v6);
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 136))(this);
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  return 0;
}

uint64_t CVLockingBunchPair::setMinimumBufferCount(CVLockingBunchPair *this, uint64_t a2)
{
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  *((_QWORD *)this + 31) = a2;
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  return 0;
}

uint64_t CVLockingBunchPair::getMinimumBufferCount(CVLockingBunchPair *this)
{
  return *((_QWORD *)this + 31);
}

double CVLockingBunchPair::getMaximumBufferAge(CVLockingBunchPair *this, double a2, double a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 30);
  if (!CVHostTimeBase::sIsInited)
    a2 = CVHostTimeBase::Initialize(this);
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (double)(unint64_t)((double)v3 / (double)*(unint64_t *)&a3 * (double)*(unint64_t *)&a2)
       / 1000000000.0;
}

uint64_t CVLockingBunchPair::tryToReuseABacking(CFArrayRef *this, CVBufferBacking **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  CVBufferBacking *v8;

  v4 = (*((uint64_t (**)(CFArrayRef *))*this + 13))(this);
  if (v4 < 1)
  {
    v5 = 0;
LABEL_7:
    v8 = 0;
  }
  else
  {
    v5 = v4;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(this[28], v5 + v6 - 1);
      if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)ValueAtIndex + 2) + 80))(*((_QWORD *)ValueAtIndex + 2)) & 1) != 0)
        break;
      --v6;
      if ((unint64_t)(v5 + v6 + 1) <= 1)
        goto LABEL_7;
    }
    v8 = (CVBufferBacking *)*((_QWORD *)ValueAtIndex + 2);
    v5 = -(int)v6;
  }
  *a2 = v8;
  return v5;
}

uint64_t CVLockingBunchPair::initNewBacking(CVLockingBunchPair *this, CVBufferBacking *a2, char a3, int a4)
{
  uint64_t v7;
  __CFArray *v8;
  const void *v9;
  __CFArray *v11;
  const void *v12;
  const void *v13;

  if (a4)
  {
    v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 224))(this);
    if (v7 >= (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 232))(this))
      return 4294960597;
  }
  if (a2)
  {
    (*(void (**)(CVBufferBacking *, CVLockingBunchPair *))(*(_QWORD *)a2 + 96))(a2, this);
    if ((a3 & 1) != 0)
    {
      v8 = (__CFArray *)*((_QWORD *)this + 28);
      v9 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
      CFArrayAppendValue(v8, v9);
    }
    else
    {
      pthread_mutex_lock(&_freeBackingsMutex);
      v11 = (__CFArray *)*((_QWORD *)this + 28);
      v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
      CFArrayAppendValue(v11, v12);
      pthread_mutex_unlock(&_freeBackingsMutex);
    }
    v13 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    CFRelease(v13);
  }
  return 0;
}

uint64_t CVLockingBunchPair::getTotalBufferCount(CVLockingBunchPair *this)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  v2 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
  v3 = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this) + v2;
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  return v3;
}

uint64_t CVLockingBunchPair::getTargetBufferCountsBitfield(CVLockingBunchPair *this)
{
  return 0;
}

void CVLockingBunchPair::prefetchPages(CVLockingBunchPair *this)
{
  const __CFArray *v1;
  CFRange v2;

  v1 = (const __CFArray *)*((_QWORD *)this + 28);
  v2.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
  v2.location = 0;
  CFArrayApplyFunction(v1, v2, (CFArrayApplierFunction)_prefetchBacking, 0);
}

uint64_t _prefetchBacking(_QWORD **a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 88))(a1[2]);
}

uint64_t CVLockingBunchPair::applyFunction(CVLockingBunchPair *this, void (*a2)(const void *, void *), void *a3, char a4)
{
  const __CFArray *v6;
  const __CFArray *v7;
  _QWORD v9[2];
  CFRange v10;
  CFRange v11;

  v9[0] = a2;
  v9[1] = a3;
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 160))(this);
  if ((a4 & 2) != 0)
  {
    v6 = (const __CFArray *)*((_QWORD *)this + 28);
    if (v6)
    {
      v10.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 104))(this);
      v10.location = 0;
      CFArrayApplyFunction(v6, v10, (CFArrayApplierFunction)_applyFunction, v9);
    }
  }
  if ((a4 & 4) != 0)
  {
    v7 = (const __CFArray *)*((_QWORD *)this + 29);
    if (v7)
    {
      v11.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(_QWORD *)this + 96))(this);
      v11.location = 0;
      CFArrayApplyFunction(v7, v11, (CFArrayApplierFunction)_applyFunction, v9);
    }
  }
  (*(void (**)(CVLockingBunchPair *))(*(_QWORD *)this + 168))(this);
  return 0;
}

CFStringRef classCopyFormatDescription_CVLockingBunchPair(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVLockingBunchPairRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVLockingBunchPair(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

const void *CVGetCVBufferAttachmentKeyForIOSurfacePropertyKey(const __CFString *a1)
{
  pthread_once(&intializeAndGetIOSurfaceTranslationDictionaries(__CFDictionary const**,__CFDictionary const**)::once, initCVBufferKeyToIOSurfaceKeyDictionary);
  if (a1)
    return CFDictionaryGetValue((CFDictionaryRef)iosurfaceKeyToCVBufferKeyDictionary, a1);
  else
    return 0;
}

__CFDictionary *CVCreateIOSurfacePropertyDictionaryFromCVBufferAttachmentDictionary(const __CFDictionary *a1)
{
  __CFDictionary *Mutable;
  uint64_t i;
  const void *Value;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 81; i += 3)
  {
    Value = CFDictionaryGetValue(a1, *(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[i]);
    if (Value)
      CFDictionarySetValue(Mutable, *(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[i + 1], Value);
  }
  return Mutable;
}

uint64_t CVMetalBufferGetBuffer(_QWORD *a1)
{
  CFTypeID v2;
  uint64_t v3;

  if (a1 && (v2 = CFGetTypeID(a1), v2 == CVMetalBufferGetTypeID()) && (v3 = a1[2]) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 96) + 184))(*(_QWORD *)(v3 + 96));
  else
    return 0;
}

void CVDataBuffer::CVDataBuffer(CVDataBuffer *this, const void *a2)
{
  uint64_t v2;

  CVBuffer::CVBuffer(this, a2);
  *(_QWORD *)v2 = off_1E48A2860;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 100) = 0;
}

uint64_t CVDataBuffer::finalize(CVDataBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  BOOL v7;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v2))
    {
      v3 = 0;
      v4 = 1;
      do
      {
        v5 = v4;
        v7 = 0;
        do
        {
          CVDecrementAtomicCounter((unsigned int *)this + v3 + 25, &v7);
          if (!v7)
            break;
          IOSurfaceDecrementUseCountForCategory();
        }
        while (v7);
        v4 = 0;
        v3 = 1;
      }
      while ((v5 & 1) != 0);
    }
    if (*((_BYTE *)this + 96))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 72))(*((_QWORD *)this + 14));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14));
    *((_QWORD *)this + 14) = 0;
  }
  return CVBuffer::finalize(this);
}

uint64_t CVDataBuffer::getBacking(CVDataBuffer *this)
{
  return *((_QWORD *)this + 14);
}

CFStringRef CVDataBuffer::copyDebugDescription(CVDataBuffer *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  unsigned int v5;
  const __CFString *PoolName;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  CFStringRef v11;

  v2 = (const void *)(*(uint64_t (**)(CVDataBuffer *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 192))(*((_QWORD *)this + 14));
  PoolName = (const __CFString *)CVBufferBacking::getPoolName(*((CVBufferBacking **)this + 14));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
  v8 = (*(uint64_t (**)(CVDataBuffer *))(*(_QWORD *)this + 24))(this);
  if (PoolName)
    v9 = " poolName=";
  else
    v9 = "";
  if (!PoolName)
    PoolName = &stru_1E48A9A78;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 184))(*((_QWORD *)this + 14));
  v11 = CFStringCreateWithFormat(0, 0, CFSTR("<%@ %p pixelFormat=%c%c%c%c iosurface=%p%s%@ attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v4, v8, HIBYTE(v5), BYTE2(v5), BYTE1(v5), v5, v7, v9, PoolName, v10, *((_QWORD *)this + 11), *((_QWORD *)this + 10));
  CFRelease(v4);
  return v11;
}

uint64_t CVDataBuffer::setAttachment(CVDataBuffer *this, const __CFString *a2, const void *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  __IOSurface *v10;

  v8 = CVBuffer::setAttachment(this, a2, a3, a4);
  v9 = v8;
  if (a4 == 1 && !(_DWORD)v8)
  {
    v10 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
    if (v10)
      IOSurfaceSetValue(v10, a2, a3);
  }
  return v9;
}

uint64_t CVDataBuffer::setAttachments(CVDataBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  uint64_t v6;
  __IOSurface *v7;

  v6 = CVBuffer::setAttachments(this, a2, a3);
  v7 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
  if (a2 && a3 == 1 && !(_DWORD)v6 && v7)
    IOSurfaceSetValues(v7, a2);
  return v6;
}

void CVDataBuffer::removeAttachment(CFMutableDictionaryRef *this, const __CFString *a2)
{
  __IOSurface *v4;

  CVBuffer::removeAttachment(this, a2);
  v4 = (__IOSurface *)(*(uint64_t (**)(CFMutableDictionaryRef))(*(_QWORD *)this[14] + 208))(this[14]);
  if (v4)
    IOSurfaceRemoveValue(v4, a2);
}

uint64_t CVDataBuffer::pullAttachmentsFromIOSurface(CVDataBuffer *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
}

uint64_t CVDataBuffer::setDoNotAutomaticallyBumpUseCount(uint64_t this)
{
  *(_BYTE *)(this + 96) = 0;
  return this;
}

uint64_t CVDataBuffer::incrementUseCountForCategory(CVDataBuffer *this, unsigned int a2)
{
  uint64_t result;
  BOOL v5;

  v5 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
  if (result)
  {
    CVIncrementAtomicCounter((unsigned int *)this + a2 + 25, &v5);
    if (v5)
    {
      IOSurfaceIncrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVDataBuffer::decrementUseCountForCategory(CVDataBuffer *this, unsigned int a2)
{
  uint64_t result;
  BOOL v5;

  v5 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 208))(*((_QWORD *)this + 14));
  if (result)
  {
    CVDecrementAtomicCounter((unsigned int *)this + a2 + 25, &v5);
    if (v5)
    {
      IOSurfaceDecrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t classFinalize_CVDataBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVDataBuffer(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVDataBufferRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVDataBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

uint64_t CVMetalTextureCacheCreateTextureFromSliceOfImage(uint64_t a1, __CVMetalTextureCache *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *CVMetalTextureCache;
  _QWORD *CVImageBuffer;
  BOOL v19;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const void *v25;
  unsigned int v27;

  CVMetalTextureCache = _getCVMetalTextureCache(a2);
  CVImageBuffer = _getCVImageBuffer(a3);
  v27 = -6660;
  if (a10)
    v19 = CVMetalTextureCache == 0;
  else
    v19 = 1;
  if (v19 || CVImageBuffer == 0)
    return 4294960635;
  v21 = CVImageBuffer;
  v22 = (*(uint64_t (**)(_QWORD *))(*CVImageBuffer + 160))(CVImageBuffer);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 192))(v22);
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v23);
  if (!DescriptionWithPixelFormatType)
    return 4294960635;
  v25 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v25 != CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("MultiSlice")))
    return 4294960635;
  *a10 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, unsigned int *))(*CVMetalTextureCache + 104))(CVMetalTextureCache, a1, v21, a4, a5, a6, a7, a8, a9, 1, &v27);
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*CVMetalTextureCache + 120))(CVMetalTextureCache, 0, 0);
  return v27;
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  _QWORD *CVMetalTextureCache;

  CVMetalTextureCache = _getCVMetalTextureCache(textureCache);
  if (CVMetalTextureCache)
    (*(void (**)(_QWORD *, uint64_t, CVOptionFlags))(*CVMetalTextureCache + 120))(CVMetalTextureCache, 1, options);
}

uint64_t _CVXFillExtended128(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended128(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended128(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10;
  char *v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  uint64_t j;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;

  v10 = a7;
  v14 = result;
  if (a5 && a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v16 = &result[i * __n + -16 * a5];
      v25 = *(_OWORD *)&v16[16 * a5];
      v17 = a5;
      do
      {
        *(_OWORD *)v16 = v25;
        v16 += 16;
        --v17;
      }
      while (v17);
    }
  }
  if (a6 && a3)
  {
    for (j = 0; j != a3; ++j)
    {
      v19 = &result[16 * a2 + j * __n];
      v26 = *((_OWORD *)v19 - 1);
      v20 = a6;
      do
      {
        *(_OWORD *)v19 = v26;
        v19 += 16;
        --v20;
      }
      while (v20);
    }
  }
  if (a7)
  {
    v21 = &result[-(a7 * __n) + -16 * a5];
    do
    {
      result = (char *)memcpy(v21, &v14[-16 * a5], __n);
      v21 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    v22 = &v14[(a3 - 1) * __n + -16 * a5];
    v23 = &v14[__n * a3 + -16 * a5];
    v24 = 1;
    do
    {
      result = (char *)memcpy(v23, v22, __n);
      ++v24;
      v23 += __n;
    }
    while (v24 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended64(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended64(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended64(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10;
  char *v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;

  v10 = a7;
  v14 = result;
  if (a5 && a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v16 = &result[i * __n + -8 * a5];
      v17 = *(_QWORD *)&v16[8 * a5];
      v18 = a5;
      do
      {
        *(_QWORD *)v16 = v17;
        v16 += 8;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (j = 0; j != a3; ++j)
    {
      v20 = &result[8 * a2 + j * __n];
      v21 = *((_QWORD *)v20 - 1);
      v22 = a6;
      do
      {
        *(_QWORD *)v20 = v21;
        v20 += 8;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    v23 = &result[-(a7 * __n) + -8 * a5];
    do
    {
      result = (char *)memcpy(v23, &v14[-8 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    v24 = &v14[(a3 - 1) * __n + -8 * a5];
    v25 = &v14[__n * a3 + -8 * a5];
    v26 = 1;
    do
    {
      result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended48(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t i;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  _WORD *v15;
  size_t v16;
  uint64_t j;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  _WORD *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t k;
  size_t v29;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v29 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = extraColumnsOnRight;
  v7 = extraColumnsOnLeft;
  v8 = v29;
  v9 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (i = 0; i != Height; ++i)
    {
      v11 = (uint64_t)&BaseAddress[i * BytesPerRow + -6 * v7];
      v12 = *(_WORD *)(v11 + 6 * v7);
      v13 = *(_WORD *)(v11 + 2 * (3 * v7 + 1));
      v14 = *(_WORD *)(v11 + 2 * (3 * v7 + 2));
      v15 = (_WORD *)(v11 + 4);
      v16 = v7;
      do
      {
        *(v15 - 2) = v12;
        *(v15 - 1) = v13;
        *v15 = v14;
        v15 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v6)
  {
    for (j = 0; j != Height; ++j)
    {
      v18 = (uint64_t)&BaseAddress[6 * Width + j * BytesPerRow];
      v19 = *(_WORD *)(v18 - 6);
      v20 = *(_WORD *)(v18 - 4);
      v21 = *(_WORD *)(v18 - 2);
      v22 = (_WORD *)(v18 + 4);
      v23 = v6;
      do
      {
        *(v22 - 2) = v19;
        *(v22 - 1) = v20;
        *v22 = v21;
        v22 += 3;
        --v23;
      }
      while (v23);
    }
  }
  if (v9)
  {
    v24 = &BaseAddress[-(BytesPerRow * v9) + -6 * v7];
    do
    {
      memcpy(v24, &BaseAddress[-6 * v7], BytesPerRow);
      v24 += BytesPerRow;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    v25 = &BaseAddress[(Height - 1) * BytesPerRow + -6 * v7];
    v26 = &BaseAddress[Height * BytesPerRow + -6 * v7];
    for (k = 1; k <= v8; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended80(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  _WORD *v15;
  size_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _WORD *v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t k;
  size_t v28;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v28 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v28);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = BaseAddress;
  v7 = extraColumnsOnRight;
  v8 = extraColumnsOnLeft;
  v9 = v28;
  v10 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (i = 0; i != Height; ++i)
    {
      v12 = (uint64_t)&BaseAddress[i * BytesPerRow + -10 * v8];
      v13 = *(_QWORD *)(v12 + 10 * v8);
      v14 = *(_WORD *)(v12 + 2 * (5 * v8 + 4));
      v15 = (_WORD *)(v12 + 8);
      v16 = v8;
      do
      {
        *((_QWORD *)v15 - 1) = v13;
        *v15 = v14;
        v15 += 5;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v7)
  {
    for (j = 0; j != Height; ++j)
    {
      v18 = (uint64_t)&BaseAddress[10 * Width + j * BytesPerRow];
      v19 = *(_QWORD *)(v18 - 10);
      v20 = *(_WORD *)(v18 - 2);
      v21 = (_WORD *)(v18 + 8);
      v22 = v7;
      do
      {
        *((_QWORD *)v21 - 1) = v19;
        *v21 = v20;
        v21 += 5;
        --v22;
      }
      while (v22);
    }
  }
  if (v10)
  {
    v23 = &BaseAddress[-(BytesPerRow * v10) + -10 * v8];
    do
    {
      memcpy(v23, &v6[-10 * v8], BytesPerRow);
      v23 += BytesPerRow;
      --v10;
    }
    while (v10);
  }
  if (v9)
  {
    v24 = &v6[(Height - 1) * BytesPerRow + -10 * v8];
    v25 = &v6[Height * BytesPerRow + -10 * v8];
    for (k = 1; k <= v9; ++k)
    {
      memcpy(v25, v24, BytesPerRow);
      v25 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended32(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended32(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended32(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10;
  char *v14;
  uint64_t i;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t j;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;

  v10 = a7;
  v14 = result;
  if (a5 && a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v16 = &result[i * __n + -4 * a5];
      v17 = *(_DWORD *)&v16[4 * a5];
      v18 = a5;
      do
      {
        *(_DWORD *)v16 = v17;
        v16 += 4;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (j = 0; j != a3; ++j)
    {
      v20 = &result[4 * a2 + j * __n];
      v21 = *((_DWORD *)v20 - 1);
      v22 = a6;
      do
      {
        *(_DWORD *)v20 = v21;
        v20 += 4;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    v23 = &result[-(a7 * __n) + -4 * a5];
    do
    {
      result = (char *)memcpy(v23, &v14[-4 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    v24 = &v14[(a3 - 1) * __n + -4 * a5];
    v25 = &v14[__n * a3 + -4 * a5];
    v26 = 1;
    do
    {
      result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended_10packed(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended32(BaseAddress, (Width + 2) / 3, (Height + 2) / 3, BytesPerRow, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v7 + 2) / 3, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended24(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t i;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  _BYTE *v15;
  size_t v16;
  uint64_t j;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  _BYTE *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t k;
  size_t v29;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v29 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = extraColumnsOnRight;
  v7 = extraColumnsOnLeft;
  v8 = v29;
  v9 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (i = 0; i != Height; ++i)
    {
      v11 = (uint64_t)&BaseAddress[i * BytesPerRow + -3 * v7];
      v12 = *(_BYTE *)(v11 + 3 * v7);
      v13 = *(_BYTE *)(v11 + 3 * v7 + 1);
      v14 = *(_BYTE *)(v11 + 3 * v7 + 2);
      v15 = (_BYTE *)(v11 + 2);
      v16 = v7;
      do
      {
        *(v15 - 2) = v12;
        *(v15 - 1) = v13;
        *v15 = v14;
        v15 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v6)
  {
    for (j = 0; j != Height; ++j)
    {
      v18 = (uint64_t)&BaseAddress[3 * Width + j * BytesPerRow];
      v19 = *(_BYTE *)(v18 - 3);
      v20 = *(_BYTE *)(v18 - 2);
      v21 = *(_BYTE *)(v18 - 1);
      v22 = (_BYTE *)(v18 + 2);
      v23 = v6;
      do
      {
        *(v22 - 2) = v19;
        *(v22 - 1) = v20;
        *v22 = v21;
        v22 += 3;
        --v23;
      }
      while (v23);
    }
  }
  if (v9)
  {
    v24 = &BaseAddress[-(BytesPerRow * v9) + -3 * v7];
    do
    {
      memcpy(v24, &BaseAddress[-3 * v7], BytesPerRow);
      v24 += BytesPerRow;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    v25 = &BaseAddress[(Height - 1) * BytesPerRow + -3 * v7];
    v26 = &BaseAddress[Height * BytesPerRow + -3 * v7];
    for (k = 1; k <= v8; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended16(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended16(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended16(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10;
  char *v14;
  uint64_t i;
  char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t j;
  char *v20;
  __int16 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;

  v10 = a7;
  v14 = result;
  if (a5 && a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v16 = &result[i * __n + -2 * a5];
      v17 = *(_WORD *)&v16[2 * a5];
      v18 = a5;
      do
      {
        *(_WORD *)v16 = v17;
        v16 += 2;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (j = 0; j != a3; ++j)
    {
      v20 = &result[2 * a2 + j * __n];
      v21 = *((_WORD *)v20 - 1);
      v22 = a6;
      do
      {
        *(_WORD *)v20 = v21;
        v20 += 2;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    v23 = &result[-(a7 * __n) + -2 * a5];
    do
    {
      result = (char *)memcpy(v23, &v14[-2 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    v24 = &v14[(a3 - 1) * __n + -2 * a5];
    v25 = &v14[__n * a3 + -2 * a5];
    v26 = 1;
    do
    {
      result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended8(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  void *v7;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v7 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended8(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended8(char *result, uint64_t a2, uint64_t a3, size_t __n, size_t __len, size_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;

  v16 = result;
  if (__len && a3)
  {
    v17 = &result[-__len];
    v18 = a3;
    do
    {
      result = (char *)memset(v17, v17[__len], __len);
      v17 += __n;
      --v18;
    }
    while (v18);
  }
  if (a6 && a3)
  {
    v19 = &v16[a2];
    v20 = a3;
    do
    {
      result = (char *)memset(v19, *(v19 - 1), a6);
      v19 += __n;
      --v20;
    }
    while (v20);
  }
  if (a7)
  {
    v21 = &v16[-(a7 * __n) - __len];
    do
    {
      result = (char *)memcpy(v21, &v16[-__len], __n);
      v21 += __n;
      --a7;
    }
    while (a7);
  }
  if (a8)
  {
    v22 = &v16[(a3 - 1) * __n - __len];
    v23 = &v16[__n * a3 - __len];
    v24 = 1;
    do
    {
      result = (char *)memcpy(v23, v22, __n);
      ++v24;
      v23 += __n;
    }
    while (v24 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended3216(__CVBuffer *a1)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  void *v11;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v11 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v11);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  v6 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v7 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v9, v6, v7, v8, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended2vuy(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v6;
  size_t v7;
  uint64_t i;
  size_t v9;
  char *v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  size_t j;
  size_t v31;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v31 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = BaseAddress;
  v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      if (v7)
      {
        v9 = 0;
        v10 = &BaseAddress[i * BytesPerRow];
        v11 = &v10[-2 * v7];
        v12 = *v10;
        v13 = v10[1];
        v14 = v10[2];
        v15 = v11 + 3;
        do
        {
          *(v15 - 3) = v12;
          *(v15 - 2) = v13;
          *(v15 - 1) = v14;
          *v15 = v13;
          v15 += 4;
          v9 += 2;
          v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v17)
      {
        v18 = 0;
        v19 = (uint64_t)&BaseAddress[2 * Width + v16 * BytesPerRow];
        v20 = *(_BYTE *)(v19 - 4);
        v21 = *(_BYTE *)(v19 - 1);
        v22 = *(_BYTE *)(v19 - 2);
        v23 = (_BYTE *)(v19 + 3);
        do
        {
          *(v23 - 3) = v20;
          *(v23 - 2) = v21;
          *(v23 - 1) = v22;
          *v23 = v21;
          v23 += 4;
          v18 += 2;
          v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v25 = &BaseAddress[-2 * extraColumnsOnLeft];
    v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    v27 = &v6[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    v28 = &v6[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedyuvs(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v6;
  size_t v7;
  uint64_t i;
  size_t v9;
  char *v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  size_t j;
  size_t v31;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v31 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = BaseAddress;
  v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      if (v7)
      {
        v9 = 0;
        v10 = &BaseAddress[i * BytesPerRow];
        v11 = &v10[-2 * v7];
        v12 = *v10;
        v13 = v10[1];
        v14 = v10[3];
        v15 = v11 + 3;
        do
        {
          *(v15 - 3) = v12;
          *(v15 - 2) = v13;
          *(v15 - 1) = v12;
          *v15 = v14;
          v15 += 4;
          v9 += 2;
          v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v17)
      {
        v18 = 0;
        v19 = (uint64_t)&BaseAddress[2 * Width + v16 * BytesPerRow];
        v20 = *(_BYTE *)(v19 - 3);
        v21 = *(_BYTE *)(v19 - 2);
        v22 = *(_BYTE *)(v19 - 1);
        v23 = (_BYTE *)(v19 + 3);
        do
        {
          *(v23 - 3) = v21;
          *(v23 - 2) = v20;
          *(v23 - 1) = v21;
          *v23 = v22;
          v23 += 4;
          v18 += 2;
          v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v25 = &BaseAddress[-2 * extraColumnsOnLeft];
    v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    v27 = &v6[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    v28 = &v6[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_8_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended444_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char *v16;
  void *v18;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v18 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  if (a2)
  {
    v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended444A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_8_common(a1, 1, a3);
  return 1;
}

uint64_t _CVXFillExtended422_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_8_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended422_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char *v16;
  void *v18;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v18 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop, (unint64_t)v18, v18);
  if (a2)
  {
    v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended422A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_8_common(a1, 1, a3);
  return 1;
}

uint64_t _CVXFillExtended420_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_8_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended420_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  char *v16;
  void *v18;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v18 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop >> 1, (unint64_t)v18 >> 1, v18);
  if (a2)
  {
    v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended420A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_8_common(a1, 1, a3);
  return 1;
}

uint64_t _CVXFillExtended444_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedAlpha(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t v5;
  size_t v6;
  size_t v7;
  char *v8;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  void *v14;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v14 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v14);
  CVPixelBufferLockBaseAddress(a1, 0);
  if (a2 == 8)
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v14, v14);
  }
  else if (a2 == 16)
  {
    v5 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    v6 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    v7 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended16(v8, v5, v6, v7, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v14, v14);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended444_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_16_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended444_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_16_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended422_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop, (unint64_t)v15, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_16_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended422_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_16_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended420_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop >> 1, (unint64_t)v15 >> 1, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_16_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended420_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_16_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended444_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_10packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended444_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_10packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended422_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 5) / 6, (extraColumnsOnRight + 5) / 6, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_10packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended422_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_10packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended420_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 5) / 6, (extraColumnsOnRight + 5) / 6, (extraRowsOnTop + 5) / 6, ((unint64_t)v15 + 5) / 6, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_10packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended420_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_10packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended444_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_12packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended444_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended444_12packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended422_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 9) / 0xA, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 9) / 0xA, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_12packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended422_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended422_12packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtended420_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  void *v13;
  void *v15;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v15 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 9) / 0xA, (extraColumnsOnRight + 9) / 0xA, (extraRowsOnTop + 9) / 0xA, ((unint64_t)v15 + 9) / 0xA, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_12packed_common(a1, 0, a3);
  return 1;
}

uint64_t _CVXFillExtended420_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  _CVXFillExtended420_12packed_common(a1, 16, a3);
  return 1;
}

uint64_t _CVXFillExtendedb3a8(__CVBuffer *a1)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  void *v11;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v11 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v11);
  CVPixelBufferLockBaseAddress(a1, 0);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  v6 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  v7 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended8(v9, v6, v7, v8, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedx22p(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v6;
  uint64_t i;
  size_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  _WORD *v13;
  size_t v14;
  uint64_t j;
  size_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  _WORD *v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  size_t k;
  size_t v29;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v29 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      v8 = 0;
      v9 = (uint64_t)&BaseAddress[i * BytesPerRow + -2 * v6];
      v10 = *(_WORD *)(v9 + 4 * v6);
      v11 = *(_WORD *)(v9 + 2 * ((2 * v6) | 1));
      v12 = *(_WORD *)(v9 + 2 * (2 * v6 + 2));
      v13 = (_WORD *)(v9 + 4);
      do
      {
        *(v13 - 2) = v10;
        *(v13 - 1) = v11;
        *v13 = v12;
        v13[1] = v11;
        v8 += 2;
        v13 += 4;
      }
      while (v8 < v6);
    }
  }
  v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (j = 0; j != Height; ++j)
    {
      v16 = 0;
      v17 = (uint64_t)&BaseAddress[2 * Width + j * BytesPerRow];
      v18 = *(_WORD *)(v17 - 8);
      v19 = *(_WORD *)(v17 - 2);
      v20 = *(_WORD *)(v17 - 4);
      v21 = (_WORD *)(v17 + 4);
      do
      {
        *(v21 - 2) = v18;
        *(v21 - 1) = v19;
        *v21 = v20;
        v21[1] = v19;
        v16 += 2;
        v21 += 4;
      }
      while (v16 < v14);
    }
  }
  v22 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v23 = &BaseAddress[-2 * v6];
    v24 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * v6];
    do
    {
      memcpy(v24, v23, BytesPerRow);
      v24 += BytesPerRow;
      --v22;
    }
    while (v22);
  }
  if (v29)
  {
    v25 = &BaseAddress[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    v26 = &BaseAddress[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (k = 1; k <= v29; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedv216(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v6;
  uint64_t i;
  size_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  _WORD *v13;
  size_t v14;
  uint64_t j;
  size_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  _WORD *v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  size_t k;
  size_t v29;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v29 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      v8 = 0;
      v9 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v6];
      v10 = *(_WORD *)(v9 + 4 * v6);
      v11 = *(_WORD *)(v9 + 2 * ((2 * v6) | 1));
      v12 = *(_WORD *)(v9 + 2 * (2 * v6 + 2));
      v13 = (_WORD *)(v9 + 4);
      do
      {
        *(v13 - 2) = v10;
        *(v13 - 1) = v11;
        *v13 = v12;
        v13[1] = v11;
        v8 += 2;
        v13 += 4;
      }
      while (v8 < v6);
    }
  }
  v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (j = 0; j != Height; ++j)
    {
      v16 = 0;
      v17 = (uint64_t)&BaseAddress[4 * Width + j * BytesPerRow];
      v18 = *(_WORD *)(v17 - 8);
      v19 = *(_WORD *)(v17 - 2);
      v20 = *(_WORD *)(v17 - 4);
      v21 = (_WORD *)(v17 + 4);
      do
      {
        *(v21 - 2) = v18;
        *(v21 - 1) = v19;
        *v21 = v20;
        v21[1] = v19;
        v16 += 2;
        v21 += 4;
      }
      while (v16 < v14);
    }
  }
  v22 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v23 = &BaseAddress[-4 * v6];
    v24 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * v6];
    do
    {
      memcpy(v24, v23, BytesPerRow);
      v24 += BytesPerRow;
      --v22;
    }
    while (v22);
  }
  if (v29)
  {
    v25 = &BaseAddress[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    v26 = &BaseAddress[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (k = 1; k <= v29; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedv210(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  size_t i;
  size_t v56;
  __CVBuffer *v57;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v57 = a1;
  if (extraColumnsOnLeft)
  {
    v6 = extraColumnsOnLeft + 5;
    v7 = (extraColumnsOnLeft + 5) / 6;
    v56 = v7;
    if (Height)
    {
      v8 = 0;
      v9 = 6 * v7 - extraColumnsOnLeft;
      v10 = 2;
      if (v7 > 2)
        v10 = (extraColumnsOnLeft + 5) / 6;
      v11 = v10 - 1;
      do
      {
        v12 = (int *)&BaseAddress[v8 * BytesPerRow];
        v13 = &v12[-4 * v7];
        v14 = *v12;
        v15 = (unsigned __int16)*v12 >> 10;
        v16 = *v12 >> 20;
        switch(v9)
        {
          case 0uLL:
            v17 = *v12 & 0x3F | (((*v12 >> 20) & 0x3F) << 20) | ((v15 & 0x3F) << 10);
            v18 = v15 << 20;
            v19 = ((unsigned __int16)v14 >> 10) & 0xFC0F03FF | ((v14 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            v21 = ((v14 & 0x3F) << 20) | (v14 >> 20) & 0x3F | (v15 << 10);
            break;
          case 1uLL:
            v18 = v15 << 20;
            v19 = ((unsigned __int16)v14 >> 10) & 0xFC0F03FF | ((v14 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            v17 = v14 & 0x3F | ((v16 & 0x3F) << 20);
            v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            break;
          case 2uLL:
            v18 = v15 << 20;
            v19 = (v15 << 20) | ((*v12 & 0x3F) << 10);
            v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            goto LABEL_15;
          case 3uLL:
            v19 = (*v12 & 0x3F) << 10;
            v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            v18 = v15 << 20;
            v20 = (v15 << 20) | ((v16 & 0x3F) << 10) | v15;
            goto LABEL_15;
          case 4uLL:
            v21 = ((*v12 & 0x3F) << 20) | 0x200;
            v18 = v15 << 20;
            v20 = (v15 << 20) | (((*v12 >> 20) & 0x3F) << 10) | v15;
            goto LABEL_14;
          case 5uLL:
            v21 = ((*v12 & 0x3F) << 20) | 0x200;
            v18 = v15 << 20;
            v20 = (v15 << 20) | (((*v12 >> 20) & 0x3F) << 10);
LABEL_14:
            v19 = 0x80000;
LABEL_15:
            v17 = 536871424;
            break;
          default:
            v21 = v12[2];
            v20 = v12[3];
            v18 = v15 << 20;
            v17 = *v12;
            v19 = v12[1];
            break;
        }
        *v13 = v17;
        v13[1] = v19;
        v13[2] = v21;
        v13[3] = v20;
        if (v6 >= 0xC)
        {
          v22 = v14 & 0x3F | ((v16 & 0x3F) << 20) | ((v15 & 0x3F) << 10);
          v23 = ((unsigned __int16)v14 >> 10) & 0xFFFF03FF | ((v14 & 0x3F) << 10) | v18;
          v24 = ((v14 & 0x3F) << 20) | (v14 >> 20) & 0x3F | (v15 << 10);
          v25 = v15 & 0xFFFF03FF | ((v16 & 0x3F) << 10) | v18;
          v26 = (unsigned int *)(v13 + 7);
          v27 = v11;
          do
          {
            *(v26 - 3) = v22;
            *(v26 - 2) = v23;
            *(v26 - 1) = v24;
            *v26 = v25;
            v26 += 4;
            --v27;
          }
          while (v27);
        }
        ++v8;
      }
      while (v8 != Height);
    }
  }
  else
  {
    v56 = 0;
  }
  if (extraColumnsOnRight && Height)
  {
    v28 = 0;
    v29 = (Width - 1) / 6;
    v30 = Width - 1 + extraColumnsOnRight;
    v31 = v30 / 6;
    v32 = v30 % 6;
    v33 = (Width - 1) % 6 - 1;
    do
    {
      v34 = (unsigned int *)&BaseAddress[16 * v29 + v28 * BytesPerRow];
      v35 = *v34;
      v36 = *v34 & 0x3F;
      v37 = (*v34 >> 20) & 0x3F;
      v39 = v34[1];
      v38 = v34[2];
      v40 = v34[3];
      v41 = (unsigned __int16)v39 >> 10;
      switch(v33)
      {
        case 0uLL:
          v42 = *v34 & 0xFC3F | (((*v34 >> 20) & 0x3F) << 20);
          v43 = v34[1] & 0x3F | ((v35 & 0x3F) << 10) | ((v34[1] & 0x3F) << 20);
          v44 = v34[1] & 0x3F;
          v45 = ((*v34 & 0x3F) << 20) | (v44 << 10) | (*v34 >> 20) & 0x3F;
          v46 = v44 | (((v35 >> 20) & 0x3F) << 10) & 0xFC0FFFFF | (v44 << 20);
          break;
        case 1uLL:
          v44 = (v39 >> 20) & 0x3F;
          v42 = v35 & 0x3F0FC3F;
          v43 = v34[1] & 0x3F | (v41 << 10) & 0xFC0FFFFF | (v44 << 20);
          v45 = (v44 << 10) | (v41 << 20) | v34[2] & 0x3F;
          v36 = (unsigned __int16)v39 >> 10;
          v37 = v34[2] & 0x3F;
          v46 = v44 | ((v38 & 0x3F) << 10) | (v44 << 20);
          break;
        case 2uLL:
          v44 = (unsigned __int16)v34[2] >> 10;
          v42 = v35 & 0x3F0FC3F;
          v43 = v39 & 0x3F0003F | (v41 << 10);
          v45 = (v41 << 20) | (v44 << 10) | v34[2] & 0x3F;
          v36 = (unsigned __int16)v39 >> 10;
          v37 = v34[2] & 0x3F;
          v46 = (v37 << 10) | (v44 << 20) | v44;
          break;
        case 3uLL:
          v44 = v34[3] & 0x3F;
          v42 = v35 & 0x3F0FC3F;
          v43 = v39 & 0x3F0FC3F;
          v45 = v38 & 0x3F0FC3F;
          v46 = v34[3] & 0xFC3F | (v44 << 20);
          goto LABEL_32;
        case 4uLL:
          v44 = (v40 >> 20) & 0x3F;
          v42 = v35 & 0x3F0FC3F;
          v43 = v39 & 0x3F0FC3F;
          v45 = v38 & 0x3F0FC3F;
          v46 = v40 & 0x3F0FC3F;
LABEL_32:
          v36 = (v38 >> 20) & 0x3F;
          v37 = (unsigned __int16)v40 >> 10;
          break;
        default:
          v44 = (unsigned __int16)*v34 >> 10;
          v42 = *v34 & 0x3F | (((v35 >> 20) & 0x3F) << 20) | (BYTE1(v35) >> 2 << 10);
          v43 = v44 & 0xFFFF03FF | ((*v34 & 0x3F) << 10) | (v44 << 20);
          v46 = v44 & 0xFC0F03FF | (((*v34 >> 20) & 0x3F) << 10) & 0xFC0FFFFF | (BYTE1(*v34) >> 2 << 20);
          v45 = (v36 << 20) | (v35 >> 20) & 0x3F | (v44 << 10);
          break;
      }
      *v34 = v42;
      v34[1] = v43;
      v47 = v34 + 4;
      v34[2] = v45;
      v34[3] = v46;
      if (v29 + 1 >= v31)
      {
        v49 = v29;
      }
      else
      {
        v42 = v36 | (v37 << 20) | (v44 << 10);
        v43 = (v44 | (v36 << 10)) & 0xFC0FFFFF | ((v44 & 0x3F) << 20);
        v45 = v37 & 0xFFFF03FF | (v36 << 20) | ((v44 & 0x3F) << 10);
        v48 = v31 - 1 - v29;
        v46 = v44 | (v37 << 10) | (v44 << 20);
        do
        {
          *v47 = v42;
          v47[1] = v43;
          v47[2] = v45;
          v47[3] = v46;
          v47 += 4;
          --v48;
        }
        while (v48);
        v34 = v47 - 4;
        v49 = v31 - 1;
      }
      if (v49 < v31)
      {
        while (1)
        {
          switch(v32)
          {
            case 0uLL:
              v46 = 0x80000;
              v45 = 536871424;
              v43 = 0x80000;
              goto LABEL_51;
            case 1uLL:
              v46 = 0x80000;
              v45 = 536871424;
              v43 = v44 | 0x80000;
              goto LABEL_51;
            case 2uLL:
              v46 = 0x80000;
              v45 = v37 | 0x20000000;
              v43 = (v44 << 20) | (v36 << 10) | v44;
LABEL_51:
              v42 = (v36 | (v44 << 10)) & 0xFC0FFFFF | ((v37 & 0x3F) << 20);
              break;
            case 3uLL:
              v46 = 0x80000;
              v45 = v37 & 0xDFFF03FF | 0x20000000 | ((v44 & 0x3F) << 10);
              goto LABEL_54;
            case 4uLL:
              v46 = v44 | (v37 << 10);
              v45 = v37 & 0xFFFF03FF | (v36 << 20) | ((v44 & 0x3F) << 10);
LABEL_54:
              v43 = (v44 << 20) | (v36 << 10) | v44;
              goto LABEL_56;
            case 5uLL:
              v46 = (v44 | (v37 << 10)) & 0xFC0FFFFF | ((v44 & 0x3F) << 20);
              v45 = v37 & 0xFFFF03FF | (v36 << 20) | ((v44 & 0x3F) << 10);
              v43 = v44 & 0xFC0F03FF | ((v36 & 0x3F) << 10) | ((v44 & 0x3F) << 20);
LABEL_56:
              v42 = v36 & 0xFFFF03FF | (v37 << 20) | ((v44 & 0x3F) << 10);
              break;
            default:
              break;
          }
          *v47 = v42;
          v34[5] = v43;
          v34[6] = v45;
          v34[7] = v46;
        }
      }
      ++v28;
    }
    while (v28 != Height);
  }
  v50 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v51 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -16 * v56];
    do
    {
      memcpy(v51, &BaseAddress[-16 * v56], BytesPerRow);
      v51 += BytesPerRow;
      --v50;
    }
    while (v50);
  }
  if (extraRowsOnBottom)
  {
    v52 = &BaseAddress[(Height - 1) * BytesPerRow + -16 * v56];
    v53 = &BaseAddress[Height * BytesPerRow + -16 * v56];
    for (i = 1; i <= extraRowsOnBottom; ++i)
    {
      memcpy(v53, v52, BytesPerRow);
      v53 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(v57, 0);
  return 1;
}

uint64_t _CVXFillExtendedSpecial1(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v6;
  size_t v7;
  uint64_t i;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  size_t v14;
  uint64_t j;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  size_t k;
  size_t v28;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v28 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v28);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = BaseAddress;
  v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      v9 = 0;
      v10 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v7];
      v11 = *(_DWORD *)(v10 + 4 * v7) | 0xFF000000;
      v12 = *(_DWORD *)(v10 + 4 * v7) & 0xFF0F | *(_DWORD *)(v10 + 4 * (v7 + 1)) & 0xFF00F0 | 0xFF000000;
      do
      {
        v13 = (unsigned int *)(v10 + 4 * v9);
        *v13 = v11;
        v13[1] = v12;
        v9 += 2;
      }
      while (v9 < v7);
    }
  }
  v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (j = 0; j != Height; ++j)
    {
      v16 = 0;
      v17 = (uint64_t)&BaseAddress[4 * Width + j * BytesPerRow];
      v18 = *(_DWORD *)(v17 - 8) & 0xFF00F0 | *(_DWORD *)(v17 - 4) & 0xFF0F | 0xFF000000;
      v19 = *(_DWORD *)(v17 - 4) | 0xFF000000;
      do
      {
        v20 = (unsigned int *)(v17 + 4 * v16);
        *v20 = v18;
        v20[1] = v19;
        v16 += 4;
      }
      while (v16 < v14);
    }
  }
  v21 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v22 = &BaseAddress[-4 * v7];
    v23 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * v7];
    do
    {
      memcpy(v23, v22, BytesPerRow);
      v23 += BytesPerRow;
      --v21;
    }
    while (v21);
  }
  if (v28)
  {
    v24 = &v6[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    v25 = &v6[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (k = 1; k <= v28; ++k)
    {
      memcpy(v25, v24, BytesPerRow);
      v25 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedSpecial3(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v6;
  size_t v7;
  uint64_t i;
  size_t v9;
  uint64_t v10;
  char *v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  size_t j;
  size_t v31;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v31 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v6 = BaseAddress;
  v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (i = 0; i != Height; ++i)
    {
      if (v7)
      {
        v9 = 0;
        v10 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v7];
        v11 = &BaseAddress[i * BytesPerRow];
        v12 = *((_WORD *)v11 + 2);
        v13 = *((_WORD *)v11 + 1);
        v14 = *(_WORD *)v11;
        v15 = (_BYTE *)(v10 + 3);
        do
        {
          *(v15 - 3) = v14;
          *(v15 - 2) = v13;
          *(v15 - 1) = v12;
          *v15 = v13;
          v15 += 8;
          v9 += 2;
          v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v17)
      {
        v18 = 0;
        v19 = (uint64_t)&BaseAddress[4 * Width + v16 * BytesPerRow];
        v20 = *(_WORD *)(v19 - 8);
        v21 = *(_WORD *)(v19 - 2);
        v22 = *(_WORD *)(v19 - 4);
        v23 = (_BYTE *)(v19 + 3);
        do
        {
          *(v23 - 3) = v20;
          *(v23 - 2) = v21;
          *(v23 - 1) = v22;
          *v23 = v21;
          v23 += 16;
          v18 += 4;
          v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    v25 = &BaseAddress[-4 * extraColumnsOnLeft];
    v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    v27 = &v6[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    v28 = &v6[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t CVMetalTextureBacking::finalize(CVMetalTextureBacking *this)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 21) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 25);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 25) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 24) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 26);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 26) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 28);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 28) = 0;
  }
  return CVImageBacking::finalize(this);
}

uint64_t CVMetalTextureBacking::createTextureBackingForDevice(CVMetalTextureBacking *this, const __CFAllocator *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  return (*(uint64_t (**)(_QWORD, const __CFAllocator *, void *, const __CFDictionary *, CVImageBuffer *, int *))(**((_QWORD **)this + 21) + 232))(*((_QWORD *)this + 21), a2, a3, a4, a5, a6);
}

uint64_t CVMetalTextureBacking::setImageBacking(CVMetalTextureBacking *this, CVImageBacking *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = *((_QWORD *)this + 21);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  if (a2)
  {
    result = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a2 + 32))(a2);
    v6 = (unsigned int *)((char *)this + 96);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 & 0xFFFFFFFE, v6));
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)this + 21) = result;
  return result;
}

uint64_t CVMetalTextureBacking::getDevice(CVMetalTextureBacking *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t CVMetalTextureBacking::isFlipped(CVMetalTextureBacking *this)
{
  return *((unsigned __int8 *)this + 216);
}

double CVMetalTextureBacking::getSize(CVMetalTextureBacking *this)
{
  return (float)*((unint64_t *)this + 22);
}

uint64_t CVMetalTextureBacking::provideImageTexture(CVMetalTextureBacking *this, void *a2, int a3, int a4, unsigned int a5, CGRect *a6, const __CFDictionary *a7, CVImageBuffer *a8)
{
  CGFloat v9;

  a6->origin.x = 0.0;
  a6->origin.y = 0.0;
  a6->size.width = (*(double (**)(CVMetalTextureBacking *, void *))(*(_QWORD *)this + 176))(this, a2);
  a6->size.height = v9;
  return 0;
}

uint64_t CVMetalTextureBacking::provideImageData(CVMetalTextureBacking *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 21) + 184))(*((_QWORD *)this + 21), a2);
}

uint64_t CVMetalTextureBacking::getPixelFormatType(CVMetalTextureBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 192))(*((_QWORD *)this + 21));
}

uint64_t CVMetalTextureBacking::uploadedCorrectly(CVMetalTextureBacking *this)
{
  return 1;
}

CVBufferBacking **CVMetalBufferBacking::alloc(CVMetalBufferBacking *this, const __CFAllocator *a2)
{
  CVObject *TypeID;
  CVBufferBacking **v4;
  CVBufferBacking **v5;
  uint64_t v6;

  if (_cvUseTrackingAllocator)
    this = (CVMetalBufferBacking *)_cvTrackingGetCFAllocator(CFSTR("CVMetalBufferBacking"));
  TypeID = (CVObject *)CVObjectGetTypeID();
  v4 = (CVBufferBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0xB0uLL);
  v5 = v4;
  if (v4)
  {
    CVBufferBacking::CVBufferBacking(v4[2], v4);
    *(_QWORD *)v6 = off_1E48A3670;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
  }
  return v5;
}

void CVMetalBufferBacking::CVMetalBufferBacking(CVMetalBufferBacking *this, const void *a2)
{
  uint64_t v2;

  CVBufferBacking::CVBufferBacking(this, a2);
  *(_QWORD *)v2 = off_1E48A3670;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
}

uint64_t CVMetalBufferBacking::finalize(CVMetalBufferBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 17) = 0;
  }
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 18) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 20) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 19);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 19) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 21);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 21) = 0;
  }
  return CVBufferBacking::finalize(this);
}

CVMetalBufferBacking *CVMetalBufferBacking::init(CVMetalBufferBacking *this, CVImageBuffer *a2, CVBufferBacking *a3, void *a4)
{
  CVMetalBufferBacking *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;

  v7 = this;
  if (!CVBufferBacking::init(this))
    return 0;
  *((_QWORD *)v7 + 17) = (*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a2 + 32))(a2);
  *((_QWORD *)v7 + 18) = (*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a3 + 32))(a3);
  *((_QWORD *)v7 + 19) = CFRetain(a4);
  v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a3 + 152))(a3);
  if (!v8
    || (v9 = CFRetain(v8),
        *((_QWORD *)v7 + 21) = v9,
        v10 = CVMTLBufferCreate(a4, (uint64_t)v9),
        (*((_QWORD *)v7 + 20) = v10) == 0))
  {
    (*(void (**)(CVMetalBufferBacking *))(*(_QWORD *)v7 + 40))(v7);
    return 0;
  }
  return v7;
}

uint64_t CVMetalBufferBacking::retainBackingUsage(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 64))(*((_QWORD *)this + 18));
}

uint64_t CVMetalBufferBacking::releaseBackingUsage(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 72))(*((_QWORD *)this + 18));
}

CVBufferBacking *CVMetalBufferBacking::retainUsage(CVMetalBufferBacking *this)
{
  CVBufferBacking *v2;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v2 = CVBufferBacking::retainUsage(this);
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v2;
}

uint64_t CVMetalBufferBacking::releaseUsage(CVMetalBufferBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CVBufferBacking::releaseUsage(this);
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

CFStringRef CVMetalBufferBacking::copyDebugDescription(CVMetalBufferBacking *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(CVMetalBufferBacking *))(*(_QWORD *)this + 24))(this);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CVMetalBufferBackingRef %p surface:%@ buffer:%@>"), v2, *((_QWORD *)this + 21), *((_QWORD *)this + 20));
}

uint64_t CVMetalBufferBacking::isInvalidated(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 120))(*((_QWORD *)this + 18));
}

uint64_t CVMetalBufferBacking::getBuffer(CVMetalBufferBacking *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t CVMetalBufferBacking::getDevice(CVMetalBufferBacking *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t CVMetalBufferBacking::getIOSurface(CVMetalBufferBacking *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t CVMetalBufferBacking::uploadedCorrectly(CVMetalBufferBacking *this)
{
  return 1;
}

void CVMetalTexture::CVMetalTexture(CVMetalTexture *this, const void *a2)
{
  uint64_t v2;

  CVImageBuffer::CVImageBuffer(this, a2);
  *(_QWORD *)v2 = off_1E48A2D08;
  *(_QWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 96) = 1;
}

uint64_t CVMetalTexture::getBacking(CVMetalTexture *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t CVMetalTexture::getImageBacking(CVMetalTexture *this)
{
  return *((_QWORD *)this + 13);
}

float CVMetalTexture::getCleanTexCoords(CVMetalTexture *this, float *a2, float *a3, float *a4, float *a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;

  v10 = (*(double (**)(CVMetalTexture *))(*(_QWORD *)this + 192))(this);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = (*(double (**)(_QWORD))(**((_QWORD **)this + 13) + 176))(*((_QWORD *)this + 13));
  v19 = v18;
  v20 = v12;
  v21 = v12 + v16;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 13) + 200))(*((_QWORD *)this + 13)))
  {
    v20 = v19 - v20;
    v21 = v19 - v21;
  }
  v22 = v10 / v17;
  *a5 = v22;
  *a2 = v22;
  v23 = (v10 + v14) / v17;
  *a4 = v23;
  v24 = v20 / v19;
  *a3 = v23;
  a3[1] = v24;
  a2[1] = v24;
  result = v21 / v19;
  a4[1] = result;
  a5[1] = result;
  return result;
}

CFStringRef CVMetalTexture::copyDebugDescription(CVMetalTexture *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  CFStringRef v13;

  v2 = (const void *)(*(uint64_t (**)(CVMetalTexture *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVMetalTexture *))(*(_QWORD *)this + 24))(this);
  v6 = (*(double (**)(_QWORD))(**((_QWORD **)this + 13) + 176))(*((_QWORD *)this + 13));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 176))(*((_QWORD *)this + 13));
  v8 = v7;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 264))(*((_QWORD *)this + 13));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 192))(*((_QWORD *)this + 13));
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 200))(*((_QWORD *)this + 13));
  v12 = "YES";
  if (!v11)
    v12 = "NO";
  v13 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p size=%g,%g texture=%p pixelFormatType=%08x isFlipped=%s propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v4, v5, *(_QWORD *)&v6, v8, v9, v10, v12, *((_QWORD *)this + 11), *((_QWORD *)this + 10));
  CFRelease(v4);
  return v13;
}

CFStringRef classCopyFormatDescription_CVMetalTexture(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVMetalTextureRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalTexture(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(CVOpenGLESTextureBacking *this, const void *a2)
{
  uint64_t v2;

  CVImageBacking::CVImageBacking(this, a2);
  *(_QWORD *)v2 = off_1E48A3B78;
  *(_DWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
}

uint64_t CVOpenGLESTextureBacking::finalize(CVOpenGLESTextureBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 21) = 0;
  }
  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 22) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 25);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 25) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 27);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 27) = 0;
  }
  return CVImageBacking::finalize(this);
}

CVOpenGLESTextureBacking *CVOpenGLESTextureBacking::initWithBackingContext(CVOpenGLESTextureBacking *this, CVImageBacking *a2, CVOpenGLESContext *a3, int a4, int a5, char a6)
{
  CVOpenGLESTextureBacking *v11;

  v11 = this;
  if (!CVBufferBacking::init(this))
    return 0;
  *((_QWORD *)v11 + 21) = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a2 + 32))(a2);
  *((_QWORD *)v11 + 22) = (*(uint64_t (**)(CVOpenGLESContext *))(*(_QWORD *)a3 + 32))(a3);
  *((_DWORD *)v11 + 46) = a4;
  *((_DWORD *)v11 + 47) = a5;
  *((_BYTE *)v11 + 208) = a6;
  return v11;
}

uint64_t CVOpenGLESTextureBacking::createGLESTextureBackingForContext(CVOpenGLESTextureBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  return (*(uint64_t (**)(_QWORD, const __CFAllocator *, CVOpenGLESContext *, const __CFDictionary *, CVImageBuffer *, int *))(**((_QWORD **)this + 21) + 216))(*((_QWORD *)this + 21), a2, a3, a4, a5, a6);
}

uint64_t CVOpenGLESTextureBacking::setImageBacking(CVOpenGLESTextureBacking *this, CVImageBacking *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = *((_QWORD *)this + 21);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  if (a2)
  {
    result = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a2 + 32))(a2);
    v6 = (unsigned int *)((char *)this + 96);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 & 0xFFFFFFFE, v6));
  }
  else
  {
    result = 0;
  }
  *((_QWORD *)this + 21) = result;
  return result;
}

CFTypeRef CVOpenGLESTextureBacking::setIOSurface(CVOpenGLESTextureBacking *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = CFRetain(cf);
  *((_QWORD *)this + 25) = cf;
  return result;
}

uint64_t CVOpenGLESTextureBacking::getIOSurface(CVOpenGLESTextureBacking *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t CVOpenGLESTextureBacking::isInvalidated(CVOpenGLESTextureBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 120))(*((_QWORD *)this + 21));
}

uint64_t CVOpenGLESTextureBacking::getTarget(CVOpenGLESTextureBacking *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t CVOpenGLESTextureBacking::getName(CVOpenGLESTextureBacking *this)
{
  return *((unsigned int *)this + 49);
}

uint64_t CVOpenGLESTextureBacking::isFlipped(CVOpenGLESTextureBacking *this)
{
  return *((unsigned __int8 *)this + 208);
}

double CVOpenGLESTextureBacking::getSize(CVOpenGLESTextureBacking *this)
{
  return (float)*((int *)this + 46);
}

uint64_t CVOpenGLESTextureBacking::getTextureContext(CVOpenGLESTextureBacking *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t CVOpenGLESTextureBacking::finishTexture(CVOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 3768))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), 5890, *((unsigned int *)this + 49));
  return pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
}

BOOL CVOpenGLESTextureBacking::testTexture(CVOpenGLESTextureBacking *this)
{
  _BOOL8 v2;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  v2 = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 3760))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), 5890, *((unsigned int *)this + 49)) != 0;
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  return v2;
}

uint64_t CVOpenGLESTextureBacking::retainBackingUsage(CVOpenGLESTextureBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 21);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t CVOpenGLESTextureBacking::releaseBackingUsage(CVOpenGLESTextureBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 21);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t CVOpenGLESTextureBacking::provideImageTexture(CVOpenGLESTextureBacking *this, void *a2, int a3, int a4, unsigned int a5, CGRect *a6, const __CFDictionary *a7, CVImageBuffer *a8)
{
  CGFloat v9;

  a6->origin.x = 0.0;
  a6->origin.y = 0.0;
  a6->size.width = (*(double (**)(CVOpenGLESTextureBacking *, void *))(*(_QWORD *)this + 176))(this, a2);
  a6->size.height = v9;
  return 0;
}

uint64_t CVOpenGLESTextureBacking::provideImageData(CVOpenGLESTextureBacking *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 21) + 184))(*((_QWORD *)this + 21), a2);
}

uint64_t CVOpenGLESTextureBacking::getPixelFormatType(CVOpenGLESTextureBacking *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 192))(*((_QWORD *)this + 21));
}

uint64_t CVOpenGLESTextureBacking::getTextureParams(CVOpenGLESTextureBacking *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t CVOpenGLESTextureBacking::uploadedCorrectly(CVOpenGLESTextureBacking *this)
{
  return 1;
}

uint64_t classInitialize_CVPixelBufferPool(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVPixelBufferPoolID = result;
  return result;
}

uint64_t forceIOSurfaceBackingByDefault(void)
{
  int AppBooleanValue;

  if ((forceIOSurfaceBackingByDefault(void)::sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("pool_iosurface_backing"), CFSTR("com.apple.corevideo"), 0);
    forceIOSurfaceBackingByDefault(void)::sForceIOSurfaceBacking = AppBooleanValue;
    if (AppBooleanValue)
      syslog(3, "CoreVideo: Will enable CVPixelBufferPool OSurface backing by default -- thank you for setting \"defaults write com.apple.corevideo pool_iosurface_backing -BOOL YES\"\n");
    forceIOSurfaceBackingByDefault(void)::sDidCheck = 1;
  }
  return forceIOSurfaceBackingByDefault(void)::sForceIOSurfaceBacking;
}

uint64_t CVPixelBufferPool::getAttributes(CVPixelBufferPool *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t CVPixelBufferPool::assignNewBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __IOSurface *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFStringRef v12;
  CFStringRef v13;

  if (!a2)
    return 4294960635;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 152))(*(_QWORD *)(a2 + 16));
  if (!v4)
    return 4294960635;
  v5 = (__IOSurface *)v4;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), 0, 0);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  CVTracePoolAction(1, v6, (_QWORD **)a2, "claimed", v7, v8);
  v9 = (const __CFString *)*MEMORY[0x1E0CBC048];
  v10 = (const __CFString *)IOSurfaceCopyValue(v5, (CFStringRef)*MEMORY[0x1E0CBC048]);
  v11 = v10;
  if (v10 && CFStringCompare(v10, CFSTR("CoreVideo"), 0))
    goto LABEL_9;
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Assigned-To-%@"), *(_QWORD *)(a1 + 24));
    if (v12)
    {
      v13 = v12;
      IOSurfaceSetValue(v5, v9, v12);
      CFRelease(v13);
    }
  }
  if (v11)
LABEL_9:
    CFRelease(v11);
  if (*(_BYTE *)(a1 + 136))
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 88))(*(_QWORD *)(a2 + 16));
  CVBufferBacking::setNeverAgeOutBacking(*(_QWORD *)(a2 + 16));
  return 0;
}

uint64_t CVPixelBufferPool::prefetchPages(CVPixelBufferPool *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 264))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2));
  return 0;
}

CFStringRef CVPixelBufferPool::copyDebugDescription(CVPixelBufferPool *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFStringRef v13;

  v2 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVPixelBufferPool *))(*(_QWORD *)this + 24))(this);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = " name=";
  else
    v7 = "";
  if (v6)
    v8 = (const __CFString *)*((_QWORD *)this + 3);
  else
    v8 = &stru_1E48A9A78;
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v13 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p%s%@ poolAttributes=%@ pixelBufferAttributes=%@ inUse=%ld free=%ld>"), v4, v5, v7, v8, v9, v10, v11, v12);
  CFRelease(v4);
  return v13;
}

uint64_t CVPixelBufferPool::flush(CVPixelBufferPool *this, char a2)
{
  uint64_t v2;

  v2 = 144;
  if ((a2 & 1) == 0)
    v2 = 136;
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 2) + v2))();
}

CFStringRef classCopyFormatDescription_CVPixelBufferPool(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVPixelBufferPoolRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBufferPool(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t CVMetalBufferCacheCreate(CVMetalBufferCache *this, CFTypeRef cf, uint64_t a3, CVBufferPool ***a4)
{
  CFTypeID v8;
  CVBufferPool **v9;
  CVBufferPool **v10;
  uint64_t result;

  if (!a4)
    return 4294960635;
  *a4 = 0;
  if (!a3)
    return 4294960635;
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 != CFDictionaryGetTypeID())
      return 4294960635;
  }
  v9 = CVMetalBufferCache::alloc(this, (const __CFAllocator *)cf);
  if (!v9)
    return 4294960634;
  v10 = v9;
  if (!(*(uint64_t (**)(CVBufferPool *, uint64_t, CFTypeRef))(*(_QWORD *)v9[2] + 96))(v9[2], a3, cf))
    return 4294960634;
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t CVMetalBufferCacheCreateBufferFromImage(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *CVMetalBufferCache;
  uint64_t result;
  CFTypeID v9;
  uint64_t v10;
  unsigned int v11;

  if (!a4)
    return 4294960635;
  CVMetalBufferCache = _getCVMetalBufferCache(a2);
  result = 4294960635;
  if (a3 && CVMetalBufferCache)
  {
    v9 = CFGetTypeID(a3);
    if (v9 == CVPixelBufferGetTypeID() && (v10 = a3[2]) != 0)
    {
      v11 = -6660;
      *a4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, unsigned int *))(*CVMetalBufferCache + 112))(CVMetalBufferCache, a1, v10, &v11);
      (*(void (**)(_QWORD *, _QWORD, _QWORD))(*CVMetalBufferCache + 104))(CVMetalBufferCache, 0, 0);
      return v11;
    }
    else
    {
      return 4294960635;
    }
  }
  return result;
}

_QWORD *_getCVMetalBufferCache(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVMetalBufferCacheGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

_QWORD *CVMetalBufferCacheFlush(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = _getCVMetalBufferCache(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 104))(result, 1, a2);
  return result;
}

CFIndex CVMetalBufferCacheGetUsedBackings(_QWORD *a1)
{
  CVMetalBufferCache *CVMetalBufferCache;

  CVMetalBufferCache = (CVMetalBufferCache *)_getCVMetalBufferCache(a1);
  if (CVMetalBufferCache)
    return CVMetalBufferCache::usedBackingCount(CVMetalBufferCache);
  else
    return -1;
}

CFIndex CVMetalBufferCache::usedBackingCount(CVMetalBufferCache *this)
{
  CFIndex Count;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  Count = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 232));
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return Count;
}

CFIndex CVMetalBufferCacheGetFreeBackings(_QWORD *a1)
{
  CVMetalBufferCache *CVMetalBufferCache;

  CVMetalBufferCache = (CVMetalBufferCache *)_getCVMetalBufferCache(a1);
  if (CVMetalBufferCache)
    return CVMetalBufferCache::freeBackingCount(CVMetalBufferCache);
  else
    return -1;
}

CFIndex CVMetalBufferCache::freeBackingCount(CVMetalBufferCache *this)
{
  CFIndex Count;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  Count = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return Count;
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  BOOL v15;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v29;
  const void *DescriptionWithPixelFormatType;
  const __CFAllocator *v31;
  CVImageBacking **v32;
  CVImageBacking **v33;
  const __CFAllocator *v34;
  __CVBuffer *v35;
  __CVBuffer *v36;
  int v38;
  CVReturn v41[3];

  v41[0] = 0;
  if (pixelBufferOut)
    v15 = width == 0;
  else
    v15 = 1;
  if (v15
    || height == 0
    || numberOfPlanes - 17 < 0xFFFFFFFFFFFFFFF0
    || planeBytesPerRow == 0
    || planeWidth == 0
    || planeHeight == 0
    || planeBaseAddress == 0)
  {
    return -6661;
  }
  *pixelBufferOut = 0;
  if (pixelBufferAttributes)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v29 = MutableCopy;
  if (!MutableCopy)
    return -6662;
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, CFSTR("PixelFormatDescription")))
      goto LABEL_31;
LABEL_42:
    v38 = -6680;
    goto LABEL_44;
  }
  DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType)
    goto LABEL_42;
  CFDictionarySetValue(v29, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
LABEL_31:
  v32 = CVPixelBufferBacking::alloc(allocator, v31);
  if (v32)
  {
    v33 = v32;
    if ((*(uint64_t (**)(CVImageBacking *, size_t, size_t, void *, size_t, _QWORD, size_t, void **, size_t *, size_t *, size_t *, _QWORD, CVPixelBufferReleasePlanarBytesCallback, void *, __CFDictionary *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, CVReturn *))(*(_QWORD *)v32[2] + 248))(v32[2], width, height, dataPtr, dataSize, 0, numberOfPlanes, planeBaseAddress, planeWidth, planeHeight, planeBytesPerRow, 0, releaseCallback, releaseRefCon, v29, 0, 0, 0, 0,
           0,
           v41))
    {
      kdebug_trace();
      v35 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v34);
      if (v35)
      {
        v36 = v35;
        if ((*(uint64_t (**)(_QWORD, CVImageBacking *))(**((_QWORD **)v35 + 2) + 248))(*((_QWORD *)v35 + 2), v33[2]))
        {
          *pixelBufferOut = v36;
        }
        else
        {
          v41[0] = -6660;
          CFRelease(v36);
        }
      }
      else
      {
        v41[0] = -6662;
      }
      CFRelease(v33);
    }
    goto LABEL_38;
  }
  v38 = -6662;
LABEL_44:
  v41[0] = v38;
LABEL_38:
  CFRelease(v29);
  return v41[0];
}

uint64_t CVPixelBufferCreateWithBufferBacking(CVPixelBuffer *a1, _QWORD **a2, _QWORD *a3)
{
  char v6;
  CFTypeID v7;
  __IOSurface *v8;
  const __CFAllocator *v9;
  char v10;
  const __CFDictionary *v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeID v14;
  CVPixelBuffer *v15;
  uint64_t v16;

  v6 = _os_feature_enabled_impl();
  v7 = CFGetTypeID(a2);
  if (v7 != CVPixelBufferBackingGetTypeID())
    return 4294960635;
  v8 = (__IOSurface *)(*(uint64_t (**)(_QWORD *))(*a2[2] + 152))(a2[2]);
  if (v8)
    v10 = v6;
  else
    v10 = 1;
  if ((v10 & 1) != 0)
  {
    if (!v8)
      return 4294960633;
    v11 = 0;
  }
  else
  {
    v11 = IOSurfaceCopyAllValues(v8);
  }
  v12 = CVPixelBuffer::alloc(a1, v9);
  v13 = v12;
  if (v12)
  {
    if ((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v12[2] + 248))(v12[2], a2[2]))
    {
      if ((v6 & 1) == 0)
      {
        v14 = CFGetTypeID(v13);
        if (v14 == CVPixelBufferGetTypeID())
        {
          v15 = (CVPixelBuffer *)v13[2];
          if (v15)
            CVPixelBuffer::pullAttachmentsFromIOSurface(v15, v11);
        }
      }
      v16 = 0;
      *a3 = v13;
      v13 = 0;
      if (!v11)
        goto LABEL_19;
    }
    else
    {
      v16 = 4294960636;
      if (!v11)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
  v16 = 4294960634;
  if (v11)
LABEL_18:
    CFRelease(v11);
LABEL_19:
  if (v13)
    CFRelease(v13);
  return v16;
}

uint64_t CVPixelBufferCreateWithParentIOSurface(CFAllocatorRef allocator, IOSurfaceRef buffer, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t *a7, uint64_t *a8, CFDictionaryRef theDict, uint64_t **a10)
{
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v19;
  const void *DescriptionWithPixelFormatType;
  const void *v21;
  const void *Value;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  uint64_t v25;
  CFTypeID v26;
  __CFDictionary *Mutable;
  __CFDictionary *v28;
  uint64_t *v29;
  __CFArray *v30;
  unint64_t v31;
  unsigned int v32;
  const CFDictionaryKeyCallBacks *v33;
  const CFDictionaryValueCallBacks *v34;
  __CFDictionary *v35;
  const __CFAllocator *v36;
  CVImageBacking **v37;
  CVImageBacking **v38;
  const __CFAllocator *v39;
  uint64_t *v40;
  uint64_t *v41;
  CFTypeID v42;
  uint64_t v43;
  int v44;
  __CFDictionary *v45;
  int v47;
  unsigned int v48;
  __CFDictionary *v49;
  uint64_t v50;
  uint64_t v51;
  const __CFAllocator *v52;
  const void *v53;
  int ProhibitUseCount;
  const void *v55;
  uint64_t *v56;
  unsigned int v57[3];

  v57[0] = 0;
  if (!buffer || (v10 = a3) == 0 || (v11 = a4) == 0 || a6 - 17 <= 0xFFFFFFFFFFFFFFEFLL || !a7 || !a8 || !a10)
  {
    v48 = -6661;
LABEL_51:
    v57[0] = v48;
    return v57[0];
  }
  *a10 = 0;
  if (gCVKTraceEnabled)
  {
    IOSurfaceGetID(buffer);
    kdebug_trace();
  }
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = MutableCopy;
  if (!MutableCopy)
  {
    v48 = -6662;
    goto LABEL_51;
  }
  if (!a5)
  {
    if (CFDictionaryGetValue(MutableCopy, CFSTR("PixelFormatDescription")))
      goto LABEL_18;
LABEL_53:
    v44 = -6680;
    goto LABEL_38;
  }
  DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a5);
  if (!DescriptionWithPixelFormatType)
    goto LABEL_53;
  CFDictionarySetValue(v19, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
LABEL_18:
  v56 = a7;
  ProhibitUseCount = IOSurfaceGetProhibitUseCount();
  v21 = (const void *)*MEMORY[0x1E0C9AE50];
  Value = CFDictionaryGetValue(v19, CFSTR("IOSurfaceDoNotIncrementUseCount"));
  v55 = v21;
  if ((ProhibitUseCount != 0) != (v21 == Value))
    goto LABEL_36;
  v53 = Value;
  CVDictionarySetSInt64Value(v19, CFSTR("BytesPerRowAlignment"), *a8);
  CVDictionarySetSInt64Value(v19, CFSTR("Width"), v10);
  CVDictionarySetSInt64Value(v19, CFSTR("Height"), v11);
  CVDictionarySetSInt64Value(v19, CFSTR("PixelFormatType"), a5);
  v23 = (const __CFDictionary *)CFDictionaryGetValue(v19, CFSTR("IOSurfaceProperties"));
  if (!v23)
  {
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    goto LABEL_23;
  }
  v24 = v23;
  v25 = v10;
  v26 = CFGetTypeID(v23);
  if (v26 != CFDictionaryGetTypeID())
  {
LABEL_36:
    v44 = -6661;
LABEL_38:
    v57[0] = v44;
    goto LABEL_39;
  }
  Mutable = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v24);
  v10 = v25;
LABEL_23:
  v28 = Mutable;
  v29 = v56;
  if (!Mutable)
    goto LABEL_37;
  CVDictionarySetSInt64Value(Mutable, (const void *)*MEMORY[0x1E0CBC058], *v56);
  if (a6 >= 2)
  {
    v49 = v28;
    v50 = v10;
    v51 = v11;
    v52 = allocator;
    v30 = CFArrayCreateMutable(0, a6, MEMORY[0x1E0C9B378]);
    v31 = 0;
    v32 = 1;
    v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v35 = CFDictionaryCreateMutable(0, 0, v33, v34);
      CVDictionarySetSInt64Value(v35, CFSTR("BytesPerRowAlignment"), a8[v31]);
      CFArrayAppendValue(v30, v35);
      CFRelease(v35);
      v31 = v32++;
    }
    while (v31 < a6);
    v28 = v49;
    CFDictionarySetValue(v49, CFSTR("Planes"), v30);
    CFRelease(v30);
    v11 = v51;
    allocator = v52;
    v10 = v50;
    v29 = v56;
  }
  if (ProhibitUseCount)
    CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E0CBC198], v55);
  CFDictionarySetValue(v19, CFSTR("IOSurfaceProperties"), v28);
  CFRelease(v28);
  v37 = CVPixelBufferBacking::alloc(allocator, v36);
  if (!v37)
  {
LABEL_37:
    v44 = -6662;
    goto LABEL_38;
  }
  v38 = v37;
  if (!(*(uint64_t (**)(CVImageBacking *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, __CFDictionary *, _QWORD, _QWORD, IOSurfaceRef, _QWORD, uint64_t *, unsigned int *))(*(_QWORD *)v37[2] + 248))(v37[2], v10, v11, 0, 0, *a8, a6, 0, 0, 0, a8, 0, 0, 0, v19, 0, 0, buffer, 0,
          v29,
          v57))
  {
LABEL_39:
    v45 = v19;
    goto LABEL_40;
  }
  v40 = CVPixelBuffer::alloc(allocator, v39);
  v41 = v40;
  if (!v40)
  {
    v47 = -6662;
    goto LABEL_47;
  }
  if (v55 == v53)
  {
    v42 = CFGetTypeID(v40);
    if (v42 == CVPixelBufferGetTypeID())
      v43 = v41[2];
    else
      v43 = 0;
    CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v43);
  }
  if (!(*(uint64_t (**)(uint64_t, CVImageBacking *))(*(_QWORD *)v41[2] + 248))(v41[2], v38[2]))
  {
    v47 = -6660;
LABEL_47:
    v57[0] = v47;
    goto LABEL_48;
  }
  CVTracePoolAction(1, 0, (_QWORD **)v38, "created from parent IOSurface", 0, 0);
  *a10 = v41;
  v41 = 0;
LABEL_48:
  CFRelease(v38);
  CFRelease(v19);
  if (!v41)
    return v57[0];
  v45 = (__CFDictionary *)v41;
LABEL_40:
  CFRelease(v45);
  return v57[0];
}

uint64_t CVPixelBufferCreateWithParentPixelBuffer(const __CFAllocator *a1, __CVBuffer *a2, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t *a7, uint64_t *a8, CFDictionaryRef theDict, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *CVPixelBuffer;
  __IOSurface *v19;
  const __CFDictionary *MutableCopy;
  unsigned int v21;
  __CFDictionary *v22;
  const void *DescriptionWithPixelFormatType;
  const __CFDictionary *Value;
  const __CFDictionary *v25;
  uint64_t v26;
  CFTypeID v27;
  __CFDictionary *Mutable;
  _QWORD *v29;
  __CFArray *v30;
  unint64_t v31;
  unsigned int v32;
  const CFDictionaryKeyCallBacks *v33;
  const CFDictionaryValueCallBacks *v34;
  __CFDictionary *v35;
  const __CFAllocator *v36;
  CVImageBacking **v37;
  CVImageBacking **v38;
  const __CFAllocator *v39;
  _QWORD *v40;
  CFTypeID v41;
  uint64_t v42;
  int v43;
  __CFDictionary *v44;
  int v46;
  __CFDictionary *v47;
  uint64_t v48;
  uint64_t v49;
  int ProhibitUseCount;
  const void *v51;
  __CVBuffer *v52;
  const __CFAllocator *v53;
  unsigned int v54[3];

  v54[0] = 0;
  if (a2
    && (v10 = a3) != 0
    && (v11 = a4) != 0
    && a6 - 17 > 0xFFFFFFFFFFFFFFEFLL
    && a7
    && a8
    && a10
    && (CVPixelBuffer = _getCVPixelBuffer(a2)) != 0
    && (v19 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 152))(CVPixelBuffer[15])) != 0)
  {
    v52 = a2;
    *a10 = 0;
    if (gCVKTraceEnabled)
    {
      IOSurfaceGetID(v19);
      kdebug_trace();
    }
    if (theDict)
      MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
    else
      MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = MutableCopy;
    if (MutableCopy)
    {
      v53 = a1;
      if (a5)
      {
        DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a5);
        if (DescriptionWithPixelFormatType)
        {
          CFDictionarySetValue(v22, CFSTR("PixelFormatDescription"), DescriptionWithPixelFormatType);
          goto LABEL_22;
        }
      }
      else if (CFDictionaryGetValue(MutableCopy, CFSTR("PixelFormatDescription")))
      {
LABEL_22:
        ProhibitUseCount = IOSurfaceGetProhibitUseCount();
        v51 = (const void *)*MEMORY[0x1E0C9AE50];
        if ((ProhibitUseCount != 0) == (v51 == CFDictionaryGetValue(v22, CFSTR("IOSurfaceDoNotIncrementUseCount"))))
        {
          CVDictionarySetSInt64Value(v22, CFSTR("BytesPerRowAlignment"), *a8);
          CVDictionarySetSInt64Value(v22, CFSTR("Width"), v10);
          CVDictionarySetSInt64Value(v22, CFSTR("Height"), v11);
          CVDictionarySetSInt64Value(v22, CFSTR("PixelFormatType"), a5);
          Value = (const __CFDictionary *)CFDictionaryGetValue(v22, CFSTR("IOSurfaceProperties"));
          if (!Value)
          {
            Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_27:
            v29 = a10;
            if (Mutable)
            {
              CVDictionarySetSInt64Value(Mutable, (const void *)*MEMORY[0x1E0CBC058], *a7);
              if (a6 >= 2)
              {
                v47 = Mutable;
                v48 = v10;
                v49 = v11;
                v30 = CFArrayCreateMutable(0, a6, MEMORY[0x1E0C9B378]);
                v31 = 0;
                v32 = 1;
                v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                do
                {
                  v35 = CFDictionaryCreateMutable(0, 0, v33, v34);
                  CVDictionarySetSInt64Value(v35, CFSTR("BytesPerRowAlignment"), a8[v31]);
                  CFArrayAppendValue(v30, v35);
                  CFRelease(v35);
                  v31 = v32++;
                }
                while (v31 < a6);
                Mutable = v47;
                CFDictionarySetValue(v47, CFSTR("Planes"), v30);
                CFRelease(v30);
                v29 = a10;
                a1 = v53;
                v10 = v48;
                v11 = v49;
              }
              if (ProhibitUseCount)
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC198], v51);
              CFDictionarySetValue(v22, CFSTR("IOSurfaceProperties"), Mutable);
              CFRelease(Mutable);
              v37 = CVPixelBufferBacking::alloc(a1, v36);
              if (v37)
              {
                v38 = v37;
                if ((*(uint64_t (**)(CVImageBacking *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, __CFDictionary *, _QWORD, _QWORD, _QWORD, __CVBuffer *, uint64_t *, unsigned int *))(*(_QWORD *)v37[2] + 248))(v37[2], v10, v11, 0, 0, *a8, a6, 0, 0, 0, a8, 0, 0, 0, v22, 0, 0, 0, v52,
                       a7,
                       v54))
                {
                  v40 = CVPixelBuffer::alloc(a1, v39);
                  if (v40)
                  {
                    if (v51 == CFDictionaryGetValue(v22, CFSTR("IOSurfaceDoNotIncrementUseCount")))
                    {
                      v41 = CFGetTypeID(v40);
                      if (v41 == CVPixelBufferGetTypeID())
                        v42 = v40[2];
                      else
                        v42 = 0;
                      CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v42);
                    }
                    if ((*(uint64_t (**)(_QWORD, CVImageBacking *))(*(_QWORD *)v40[2] + 248))(v40[2], v38[2]))
                    {
                      CVTracePoolAction(1, 0, (_QWORD **)v38, "created from parent IOSurface", 0, 0);
                      *v29 = v40;
                      v40 = 0;
LABEL_52:
                      CFRelease(v38);
                      CFRelease(v22);
                      if (!v40)
                        return v54[0];
                      v44 = (__CFDictionary *)v40;
                      goto LABEL_44;
                    }
                    v46 = -6660;
                  }
                  else
                  {
                    v46 = -6662;
                  }
                  v54[0] = v46;
                  goto LABEL_52;
                }
LABEL_43:
                v44 = v22;
LABEL_44:
                CFRelease(v44);
                return v54[0];
              }
            }
            v43 = -6662;
LABEL_42:
            v54[0] = v43;
            goto LABEL_43;
          }
          v25 = Value;
          v26 = v10;
          v27 = CFGetTypeID(Value);
          if (v27 == CFDictionaryGetTypeID())
          {
            Mutable = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v25);
            v10 = v26;
            goto LABEL_27;
          }
        }
        v43 = -6661;
        goto LABEL_42;
      }
      v43 = -6680;
      goto LABEL_42;
    }
    v21 = -6662;
  }
  else
  {
    v21 = -6661;
  }
  v54[0] = v21;
  return v54[0];
}

CVReturn CVPixelBufferFillExtendedPixels(CVPixelBufferRef pixelBuffer)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (!CVPixelBuffer)
    return -6661;
  if (!(*(unsigned int (**)(_QWORD, CVPixelBufferRef))(*(_QWORD *)CVPixelBuffer[15] + 408))(CVPixelBuffer[15], pixelBuffer))return -6660;
  CVBufferSetAttachment(pixelBuffer, CFSTR("ExtendedPixelsFilledKey"), (CFTypeRef)*MEMORY[0x1E0C9AE50], kCVAttachmentMode_ShouldNotPropagate);
  return 0;
}

CFDictionaryRef CVPixelBufferCopyCreationAttributes(CVPixelBufferRef pixelBuffer)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
    return (CFDictionaryRef)(*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 264))(CVPixelBuffer[15]);
  else
    return CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

void reportIncompatiblePixelBuffer(__CVBuffer *a1, const __CFDictionary *a2, const char *a3)
{
  int AppBooleanValue;

  if ((reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sDidCheck & 1) == 0)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("verbose_compatible"), CFSTR("com.apple.corevideo"), 0);
    reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sVerboseCompatibility = AppBooleanValue != 0;
    if (AppBooleanValue)
      syslog(3, "CoreVideo: will explain CVPixelBufferIsCompatibleWithAttributes' decisions -- thank you for setting \"defaults write com.apple.corevideo verbose_compatible -BOOL YES\"\n");
    reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sDidCheck = 1;
  }
  if (reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sVerboseCompatibility)
    syslog(3, "CVPixelBufferIsCompatibleWithAttributes: (%p, %p) %s\n", a1, a2, a3);
}

_QWORD *getBaseAddressOfPlaneWithoutLock(__CVBuffer *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = _getCVPixelBuffer(a1);
  if (result)
  {
    v4 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)result[15] + 368))(result[15], a2, 0);
    if (!result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v4[15] + 368))(v4[15], a2, 1);
  }
  return result;
}

uint64_t numberIsInCFArrayOfCFNumbers(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  uint64_t valuePtr;

  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v6);
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex))
    {
      valuePtr = 0;
      if (CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr))
      {
        if (valuePtr == a1)
          break;
      }
    }
    if (v5 == ++v6)
      return 0;
  }
  return 1;
}

BOOL numberIsMultipleOfCFNumber(uint64_t a1, CFNumberRef number)
{
  int Value;
  _BOOL8 result;
  uint64_t valuePtr;

  valuePtr = 0;
  Value = CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  result = 0;
  if (Value)
  {
    if (valuePtr)
      return a1 % valuePtr == 0;
  }
  return result;
}

BOOL addressIsMultipleOfCFNumber(uint64_t a1, CFNumberRef number)
{
  int Value;
  _BOOL8 result;
  uint64_t valuePtr;

  valuePtr = 0;
  Value = CFNumberGetValue(number, kCFNumberCFIndexType, &valuePtr);
  result = 0;
  if (Value)
  {
    if (valuePtr)
      return a1 % valuePtr == 0;
  }
  return result;
}

uint64_t CVPixelBufferCreateFromCVImageBufferRef(const __CFAllocator *a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  char v6;
  uint64_t result;
  CGSize EncodedSize;
  OSType PixelFormatType;
  _QWORD *CVPixelBuffer;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  CVPixelBufferRef v20;
  CVPixelBuffer *v21;
  uint64_t v22;
  uint64_t IsFlipped;

  v6 = _os_feature_enabled_impl();
  result = 4294960635;
  if (a2)
  {
    if (a3)
    {
      EncodedSize = CVImageBufferGetEncodedSize(a2);
      PixelFormatType = CVImageBufferGetPixelFormatType(a2);
      result = CVPixelBufferCreate(a1, (unint64_t)EncodedSize.width, (unint64_t)EncodedSize.height, PixelFormatType, 0, a3);
      if (!(_DWORD)result)
      {
        CVPixelBufferLockBaseAddress(*a3, 0);
        CVPixelBuffer = _getCVPixelBuffer(*a3);
        if (CVPixelBuffer)
          v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*CVPixelBuffer + 264))(CVPixelBuffer, 1);
        else
          v11 = 0;
        v12 = _getCVPixelBuffer(*a3);
        if (v12)
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12[15] + 296))(v12[15]);
        else
          v13 = 0;
        v14 = _getCVPixelBuffer(*a3);
        if (v14)
          v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14[15] + 272))(v14[15]);
        else
          v15 = 0;
        v16 = _getCVPixelBuffer(*a3);
        if (v16)
          v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16[15] + 280))(v16[15]);
        else
          v17 = 0;
        v18 = CVImageBufferProvideImageData(a2, v11, v13, 0, 0, v15, v17);
        v19 = _getCVPixelBuffer(*a3);
        if (v19)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v19[15] + 424))(v19[15], 0);
        v20 = *a3;
        if (v18)
        {
          result = (uint64_t)_getCVPixelBuffer(v20);
          if (result)
          {
            v21 = (CVPixelBuffer *)result;
            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
            IsFlipped = CVImageBufferIsFlipped(a2);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 208))(v22, IsFlipped);
            if ((v6 & 1) == 0)
              CVPixelBuffer::pushAttachmentsToIOSurface(v21);
            return 0;
          }
        }
        else
        {
          CVPixelBufferRelease(v20);
          *a3 = 0;
          return 4294960636;
        }
      }
    }
  }
  return result;
}

BOOL CVPixelBufferWasAllocatedFromPool(_QWORD *a1)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  return CVPixelBuffer && (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 104))(CVPixelBuffer[15]);
}

uint64_t CVPixelBufferDrawColorBars(_QWORD *a1)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  return (*(uint64_t (**)(_QWORD *))(*CVPixelBuffer + 272))(CVPixelBuffer);
}

uint64_t CVPixelBufferGetFixedPointFractionalBits(_QWORD *a1)
{
  _QWORD *CVPixelBuffer;
  int v2;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer)
    return 0;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 192))(CVPixelBuffer[15]);
  if (v2 == 1932996149)
    return 5;
  if (v2 != 825437747)
  {
    if (v2 == 825306677)
      return 5;
    return 0;
  }
  return 3;
}

uint64_t CVPixelBufferGetFixedPointIntegerBits(_QWORD *a1)
{
  _QWORD *CVPixelBuffer;
  int v2;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer)
    return 0;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 192))(CVPixelBuffer[15]);
  if (v2 == 1932996149)
    return 7;
  if (v2 != 825437747)
  {
    if (v2 == 825306677)
      return 11;
    return 0;
  }
  return 13;
}

_QWORD *CVPixelBufferGetFixedPointSignBits(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVPixelBuffer(a1);
  if (result)
    return (_QWORD *)((*(unsigned int (**)(_QWORD))(*(_QWORD *)result[15] + 192))(result[15]) == 1932996149);
  return result;
}

uint64_t CVPixelBufferGetFixedPointPaddingBits(_QWORD *a1)
{
  uint64_t result;

  result = (uint64_t)_getCVPixelBuffer(a1);
  if (result)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(result + 120) + 192))(*(_QWORD *)(result + 120)) == 1932996149)
      return 3;
    else
      return 0;
  }
  return result;
}

unint64_t CVPixelBufferCalculateCompressedTileDataRegionMemoryUsedOfPlane(__CVBuffer *a1, size_t a2)
{
  unint64_t v3;
  unint64_t v4[17];

  v4[16] = *MEMORY[0x1E0C80C00];
  v3 = 0;
  calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(a1, a2, 0, 0, 1uLL, 1uLL, v4, &v3, 0);
  return v3;
}

uint64_t calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(__CVBuffer *a1, size_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t *a7, unint64_t *a8, BOOL a9)
{
  _QWORD *CVPixelBuffer;
  __IOSurface *v18;
  __IOSurface *v19;
  unint64_t WidthInCompressedTilesOfPlane;
  unint64_t v21;
  unint64_t HeightInCompressedTilesOfPlane;
  BOOL v23;
  BOOL v24;
  _QWORD *v26;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  OSType v32;
  const __CFDictionary *v33;
  const __CFArray *v34;
  const __CFDictionary *v35;
  const __CFData *v36;
  CFIndex v37;
  const UInt8 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int CompressedTileWidthOfPlane;
  unsigned int CompressedTileHeightOfPlane;
  uint64_t BytesPerCompressedTileHeaderOfPlane;
  OSType PixelFormat;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFDictionary *ValueAtIndex;
  const __CFData *v52;
  CFIndex Length;
  const UInt8 *BytePtr;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int8x16_t v100;
  int8x16_t v101;
  int v102;
  unint64_t v103;
  int8x16_t *v104;
  int8x16_t v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  uint8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint32x4_t v112;
  unsigned int v113;
  unsigned int v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  int8x16_t *v118;
  int8x16_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  uint32x4_t v126;
  unsigned int v127;
  unsigned int v128;
  int8x8_t v129;
  int8x16_t v130;
  int v131;
  unint64_t v132;
  int8x8_t v133;
  int8x16_t v134;
  int8x16_t v135;
  uint32x4_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int8x8_t v140;
  int8x16_t v141;
  unint64_t v142;
  int8x8_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint32x4_t v146;
  _QWORD *v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;

  if (!a1)
    return 4294960635;
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer)
    return 4294960635;
  v18 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)CVPixelBuffer[15] + 152))(CVPixelBuffer[15]);
  if (!v18)
    return 4294960635;
  v19 = v18;
  if (IOSurfaceGetPlaneCount(v18) < a2)
    return 4294960635;
  if (IOSurfaceGetProtectionOptions())
    return 4294960635;
  WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  if (WidthInCompressedTilesOfPlane <= a3)
    return 4294960635;
  v21 = WidthInCompressedTilesOfPlane;
  HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  v23 = a5 >= v21 >> 1 || a8 == 0;
  v24 = v23 || a7 == 0;
  if (v24 || HeightInCompressedTilesOfPlane <= a4)
    return 4294960635;
  if (a5 <= 1)
    a5 = 1;
  if (a6 >= HeightInCompressedTilesOfPlane >> 1)
    return 4294960635;
  *((_OWORD *)a7 + 6) = 0u;
  *((_OWORD *)a7 + 7) = 0u;
  *((_OWORD *)a7 + 4) = 0u;
  *((_OWORD *)a7 + 5) = 0u;
  *((_OWORD *)a7 + 2) = 0u;
  *((_OWORD *)a7 + 3) = 0u;
  if (a6 <= 1)
    a6 = 1;
  *(_OWORD *)a7 = 0uLL;
  *((_OWORD *)a7 + 1) = 0uLL;
  v26 = _getCVPixelBuffer(a1);
  if (!v26 || (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)v26[15] + 416))(v26[15], 1))
    return 4294960636;
  if (IOSurfaceGetCompressionTypeOfPlane() - 3 > 1)
  {
    v44 = 0;
    v43 = 4294960633;
LABEL_153:
    *a8 = v44;
    goto LABEL_154;
  }
  v153 = a6;
  v154 = a5;
  BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  v28 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
  if (!a9)
  {
    if (BaseAddressOfCompressedTileHeaderRegionOfPlane)
    {
      v150 = IOSurfaceGetWidthInCompressedTilesOfPlane();
      v152 = IOSurfaceGetHeightInCompressedTilesOfPlane();
      CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
      BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
      PixelFormat = IOSurfaceGetPixelFormat(v19);
      DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(PixelFormat);
      if (DescriptionWithPixelFormatType)
      {
        Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("Planes"));
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, a2);
        v52 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CompressionMetadataPatternSignallingUncompressed"));
        Length = CFDataGetLength(v52);
        BytePtr = CFDataGetBytePtr(v52);
        v55 = *BytePtr | (*BytePtr >> 1);
        v56 = v55 | (v55 >> 2);
        if (Length == 2)
        {
          v57 = BytePtr[1] | (BytePtr[1] >> 1);
          v58 = v57 | (v57 >> 2) | ((v57 | (v57 >> 2)) >> 4);
        }
        else
        {
          v58 = 0;
        }
        v80 = 32 - __clz(CompressedTileWidthOfPlane);
        if (!CompressedTileWidthOfPlane)
          LOBYTE(v80) = 0;
        v81 = 32 - __clz(CompressedTileHeightOfPlane);
        if (!CompressedTileHeightOfPlane)
          LOBYTE(v81) = 0;
        v82 = CompressedTileHeightOfPlane * v152;
        v83 = CompressedTileWidthOfPlane * v150;
        v84 = v56 | (v56 >> 4);
        v85 = (CompressedTileHeightOfPlane >> 2) * (CompressedTileWidthOfPlane >> 3);
        if (Length == 1)
        {
          if ((_DWORD)v85 == 8)
          {
            if (v82 > a4)
            {
              v44 = 0;
              v138 = 32 - __clz(v150);
              v139 = 32 - __clz(v152);
              if (!(_DWORD)v150)
                v138 = 0;
              if (!(_DWORD)v152)
                v139 = 0;
              if (v138 >= v139)
                LOBYTE(v138) = v139;
              v140 = vdup_n_s8(v84);
              v141.i64[0] = 0x1000100010001;
              v141.i64[1] = 0x1000100010001;
              do
              {
                if (v83 > a3)
                {
                  v142 = a3;
                  do
                  {
                    v143 = *(int8x8_t *)(v28
                                       + BytesPerCompressedTileHeaderOfPlane
                                       * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                                + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v142 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v142 >> v80)]) & ~(-1 << (2 * v138)) | (((v142 >> v80) | (a4 >> v81)) << v138) & (-1 << (2 * v138))));
                    v144 = (int8x16_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8((uint8x8_t)vtst_s8(v143, v143)), v141), (uint8x8_t)vand_s8(v143, v140));
                    *(int16x4_t *)v144.i8 = vadd_s16(*(int16x4_t *)v144.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
                    v145 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v144.i8);
                    v146 = vaddw_u16((uint32x4_t)vextq_s8(v145, v145, 8uLL), *(uint16x4_t *)v144.i8);
                    v44 += ((unsigned __int16)(v146.i16[0] + v146.i16[2]) + 63) & 0x1FFC0;
                    v142 += CompressedTileWidthOfPlane * v154;
                  }
                  while (v142 < v83);
                }
                v43 = 0;
                a4 += CompressedTileHeightOfPlane * v153;
              }
              while (a4 < v82);
              goto LABEL_153;
            }
          }
          else if ((_DWORD)v85 == 32 && v82 > a4)
          {
            v44 = 0;
            v113 = 32 - __clz(v150);
            v114 = 32 - __clz(v152);
            if (!(_DWORD)v150)
              v113 = 0;
            if (!(_DWORD)v152)
              v114 = 0;
            if (v113 >= v114)
              LOBYTE(v113) = v114;
            v115 = vdupq_n_s8(v84);
            v116.i64[0] = 0x1000100010001;
            v116.i64[1] = 0x1000100010001;
            do
            {
              if (v83 > a3)
              {
                v117 = a3;
                do
                {
                  v118 = (int8x16_t *)(v28
                                     + BytesPerCompressedTileHeaderOfPlane
                                     * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                              + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v117 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v117 >> v80)]) & ~(-1 << (2 * v113)) | (((v117 >> v80) | (a4 >> v81)) << v113) & (-1 << (2 * v113))));
                  v119 = v118[1];
                  v120 = (uint8x16_t)vandq_s8(v119, v115);
                  v121 = (uint8x16_t)vandq_s8(*v118, v115);
                  v122 = (uint8x16_t)vtstq_s8(*v118, *v118);
                  v123 = (uint8x16_t)vtstq_s8(v119, v119);
                  v124 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v122.i8), v116), *(uint8x8_t *)v121.i8), (int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v123.i8), v116), *(uint8x8_t *)v120.i8)), vaddq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v122), v116), v121), (int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v123), v116), v120)));
                  *(int16x4_t *)v124.i8 = vadd_s16(*(int16x4_t *)v124.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
                  v125 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v124.i8);
                  v126 = vaddw_u16((uint32x4_t)vextq_s8(v125, v125, 8uLL), *(uint16x4_t *)v124.i8);
                  v44 += ((unsigned __int16)(v126.i16[0] + v126.i16[2]) + 63) & 0x1FFC0;
                  v117 += CompressedTileWidthOfPlane * v154;
                }
                while (v117 < v83);
              }
              v43 = 0;
              a4 += CompressedTileHeightOfPlane * v153;
            }
            while (a4 < v82);
            goto LABEL_153;
          }
        }
        else if (Length == 2 && v82 > a4)
        {
          v44 = 0;
          v86 = 32 - __clz(v150);
          v87 = 32 - __clz(v152);
          if (!(_DWORD)v150)
            v86 = 0;
          if (!(_DWORD)v152)
            v87 = 0;
          if (v86 >= v87)
            LOBYTE(v86) = v87;
          v88 = CompressedTileWidthOfPlane * v154;
          v89 = CompressedTileHeightOfPlane * v153;
          v90 = v28 + 1;
          do
          {
            if (v83 > a3)
            {
              v91 = a3;
              do
              {
                v92 = 0;
                if ((_DWORD)v85)
                {
                  v93 = (unsigned __int8 *)(v90
                                          + BytesPerCompressedTileHeaderOfPlane
                                          * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                                   + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v91 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v91 >> v80)]) & ~(-1 << (2 * v86)) | (((v91 >> v80) | (a4 >> v81)) << v86) & (-1 << (2 * v86))));
                  v94 = v85;
                  do
                  {
                    v95 = *(v93 - 1);
                    v96 = *v93++;
                    LODWORD(v97) = v58 & v96;
                    if (v96)
                      v97 = (v97 + 1);
                    else
                      v97 = v97;
                    if (v95)
                      ++v92;
                    v92 += (v95 & v84) + v97;
                    --v94;
                  }
                  while (v94);
                }
                v44 += (v92 + 63) & 0xFFFFFFFFFFFFFFC0;
                v91 += v88;
              }
              while (v91 < v83);
            }
            a4 += v89;
          }
          while (a4 < v82);
          goto LABEL_152;
        }
      }
    }
    v44 = 0;
LABEL_152:
    v43 = 0;
    goto LABEL_153;
  }
  if (BaseAddressOfCompressedTileHeaderRegionOfPlane)
  {
    v149 = IOSurfaceGetWidthInCompressedTilesOfPlane();
    v151 = IOSurfaceGetHeightInCompressedTilesOfPlane();
    v29 = IOSurfaceGetCompressedTileWidthOfPlane();
    v30 = IOSurfaceGetCompressedTileHeightOfPlane();
    v31 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
    v32 = IOSurfaceGetPixelFormat(v19);
    v33 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v32);
    if (v33)
    {
      v34 = (const __CFArray *)CFDictionaryGetValue(v33, CFSTR("Planes"));
      v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, a2);
      v36 = (const __CFData *)CFDictionaryGetValue(v35, CFSTR("CompressionMetadataPatternSignallingUncompressed"));
      v37 = CFDataGetLength(v36);
      v38 = CFDataGetBytePtr(v36);
      v39 = *v38 | (*v38 >> 1);
      v40 = v39 | (v39 >> 2);
      if (v37 == 2)
      {
        v41 = v38[1] | (v38[1] >> 1);
        v42 = v41 | (v41 >> 2) | ((v41 | (v41 >> 2)) >> 4);
      }
      else
      {
        v42 = 0;
      }
      v59 = 32 - __clz(v29);
      if (!v29)
        LOBYTE(v59) = 0;
      v60 = 32 - __clz(v30);
      if (!v30)
        LOBYTE(v60) = 0;
      v61 = v30 * v151;
      v62 = v29 * v149;
      v63 = v40 | (v40 >> 4);
      v64 = (v30 >> 2) * (v29 >> 3);
      if (v37 == 1)
      {
        if ((_DWORD)v64 == 8)
        {
          if (v61 > a4)
          {
            v127 = 32 - __clz(v149);
            if (!(_DWORD)v149)
              v127 = 0;
            v128 = 32 - __clz(v151);
            if (!(_DWORD)v151)
              v128 = 0;
            if (v127 >= v128)
              LOBYTE(v127) = v128;
            v129 = vdup_n_s8(v63);
            v130.i64[0] = 0x1000100010001;
            v130.i64[1] = 0x1000100010001;
            do
            {
              if (v62 > a3)
              {
                v131 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v60 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v60)]);
                v132 = a3;
                do
                {
                  v133 = *(int8x8_t *)(v28
                                     + v31
                                     * ((v131 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                     + ((v132 >> v59 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v132 >> v59)]) & ~(-1 << (2 * v127)) | (((v132 >> v59) | (a4 >> v60)) << v127) & (-1 << (2 * v127))));
                  v134 = (int8x16_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8((uint8x8_t)vtst_s8(v133, v133)), v130), (uint8x8_t)vand_s8(v133, v129));
                  *(int16x4_t *)v134.i8 = vadd_s16(*(int16x4_t *)v134.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
                  v135 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8);
                  v136 = vaddw_u16((uint32x4_t)vextq_s8(v135, v135, 8uLL), *(uint16x4_t *)v134.i8);
                  v137 = (((unsigned __int16)(v136.i16[0] + v136.i16[2])
                         - 1
                         + (((unsigned __int16)(v136.i16[0] + v136.i16[2]) - 1) >> 31)) >> 7) & 0xF;
                  ++a7[v137];
                  v132 += v29 * v154;
                }
                while (v132 < v62);
              }
              v43 = 0;
              a4 += v30 * v153;
            }
            while (a4 < v61);
            goto LABEL_154;
          }
          goto LABEL_137;
        }
        if ((_DWORD)v64 == 32)
        {
          if (v61 > a4)
          {
            v98 = 32 - __clz(v149);
            if (!(_DWORD)v149)
              v98 = 0;
            v99 = 32 - __clz(v151);
            if (!(_DWORD)v151)
              v99 = 0;
            if (v98 >= v99)
              LOBYTE(v98) = v99;
            v100 = vdupq_n_s8(v63);
            v101.i64[0] = 0x1000100010001;
            v101.i64[1] = 0x1000100010001;
            do
            {
              if (v62 > a3)
              {
                v102 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v60 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v60)]);
                v103 = a3;
                do
                {
                  v104 = (int8x16_t *)(v28
                                     + v31
                                     * ((v102 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                     + ((v103 >> v59 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v103 >> v59)]) & ~(-1 << (2 * v98)) | (((v103 >> v59) | (a4 >> v60)) << v98) & (-1 << (2 * v98))));
                  v105 = v104[1];
                  v106 = (uint8x16_t)vandq_s8(v105, v100);
                  v107 = (uint8x16_t)vandq_s8(*v104, v100);
                  v108 = (uint8x16_t)vtstq_s8(*v104, *v104);
                  v109 = (uint8x16_t)vtstq_s8(v105, v105);
                  v110 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v108.i8), v101), *(uint8x8_t *)v107.i8), (int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v109.i8), v101), *(uint8x8_t *)v106.i8)), vaddq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v108), v101), v107), (int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v109), v101), v106)));
                  *(int16x4_t *)v110.i8 = vadd_s16(*(int16x4_t *)v110.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
                  v111 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v110.i8);
                  v112 = vaddw_u16((uint32x4_t)vextq_s8(v111, v111, 8uLL), *(uint16x4_t *)v110.i8);
                  LODWORD(v104) = (((unsigned __int16)(v112.i16[0] + v112.i16[2])
                                  - 1
                                  + (((unsigned __int16)(v112.i16[0] + v112.i16[2]) - 1) >> 31)) >> 7) & 0xF;
                  ++a7[v104];
                  v103 += v29 * v154;
                }
                while (v103 < v62);
              }
              v43 = 0;
              a4 += v30 * v153;
            }
            while (a4 < v61);
            goto LABEL_154;
          }
          goto LABEL_137;
        }
      }
      else if (v37 == 2)
      {
        if (v61 > a4)
        {
          v65 = 32 - __clz(v149);
          if (!(_DWORD)v149)
            v65 = 0;
          v66 = 32 - __clz(v151);
          if (!(_DWORD)v151)
            v66 = 0;
          if (v65 >= v66)
            LOBYTE(v65) = v66;
          v67 = v29 * v154;
          v68 = v28 + 1;
          do
          {
            if (v62 > a3)
            {
              v69 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v60 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v60)]);
              v70 = a3;
              do
              {
                v71 = 0;
                if ((_DWORD)v64)
                {
                  v72 = (unsigned __int8 *)(v68
                                          + v31
                                          * ((v69 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                         + ((v70 >> v59 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v70 >> v59)]) & ~(-1 << (2 * v65)) | (((v70 >> v59) | (a4 >> v60)) << v65) & (-1 << (2 * v65))));
                  v73 = v64;
                  do
                  {
                    v74 = *(v72 - 1);
                    v76 = *v72++;
                    v75 = v76;
                    if (v74)
                      ++v71;
                    v23 = v75 == 0;
                    v77 = v42 & v75;
                    v78 = v71 + (v74 & v63);
                    if (!v23)
                      ++v78;
                    v71 = v78 + v77;
                    --v73;
                  }
                  while (v73);
                }
                v79 = ((v71 - 1 + ((v71 - 1) >> 31)) >> 7) & 0xF;
                ++a7[v79];
                v70 += v67;
              }
              while (v70 < v62);
            }
            a4 += v30 * v153;
          }
          while (a4 < v61);
        }
LABEL_137:
        v43 = 0;
        goto LABEL_154;
      }
    }
    v43 = 4294960636;
    goto LABEL_154;
  }
  v43 = 4294960635;
LABEL_154:
  v147 = _getCVPixelBuffer(a1);
  if (v147)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v147[15] + 424))(v147[15], 1);
  return v43;
}

uint64_t CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane(__CVBuffer *a1, size_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t *a7)
{
  unint64_t v8;

  v8 = 0;
  return calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(a1, a2, a3, a4, a5, a6, a7, &v8, 1);
}

uint64_t CVPixelBufferIncrementUseCountForCategory(_QWORD *a1, unsigned int a2)
{
  CVPixelBuffer *CVPixelBuffer;

  CVPixelBuffer = (CVPixelBuffer *)_getCVPixelBuffer(a1);
  if (a2 <= 1 && CVPixelBuffer)
    return CVPixelBuffer::incrementUseCountForCategory(CVPixelBuffer, a2);
  else
    return 4294960635;
}

uint64_t CVPixelBufferDecrementUseCountForCategory(_QWORD *a1, unsigned int a2)
{
  CVPixelBuffer *CVPixelBuffer;

  CVPixelBuffer = (CVPixelBuffer *)_getCVPixelBuffer(a1);
  if (a2 <= 1 && CVPixelBuffer)
    return CVPixelBuffer::decrementUseCountForCategory(CVPixelBuffer, a2);
  else
    return 4294960635;
}

CFTypeID CVOpenGLESTextureCacheGetTypeID(void)
{
  if (CVOpenGLESTextureCacheGetTypeID::once != -1)
    dispatch_once_f(&CVOpenGLESTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTextureCache);
  return kCVOpenGLESTextureCacheID;
}

uint64_t classInitialize_CVOpenGLESTextureCache(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVOpenGLESTextureCacheID = result;
  return result;
}

CVBufferPool **CVOpenGLESTextureCache::alloc(CVOpenGLESTextureCache *this, const __CFAllocator *a2)
{
  CVBufferPool **v3;
  CVBufferPool **v4;
  _QWORD *v5;

  if (_cvUseTrackingAllocator)
    this = (CVOpenGLESTextureCache *)_cvTrackingGetCFAllocator(CFSTR("CVOpenGLESTextureCache"));
  if (CVOpenGLESTextureCacheGetTypeID::once != -1)
    dispatch_once_f(&CVOpenGLESTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTextureCache);
  v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVOpenGLESTextureCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    *v5 = off_1E48A3AE0;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
  }
  return v4;
}

void CVOpenGLESTextureCache::CVOpenGLESTextureCache(CVOpenGLESTextureCache *this, const void *a2)
{
  _QWORD *v2;

  CVBufferPool::CVBufferPool(this, a2);
  *v2 = off_1E48A3AE0;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

uint64_t CVOpenGLESTextureCache::finalize(CVOpenGLESTextureCache *this)
{
  const void *v2;
  const void *v3;
  const __CFArray *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  CFRange v11;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 8) = 0;
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 7) = 0;
  v4 = (const __CFArray *)*((_QWORD *)this + 5);
  if (v4)
  {
    v11.length = CFArrayGetCount(*((CFArrayRef *)this + 5));
    v11.location = 0;
    CFArrayApplyFunction(v4, v11, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  v5 = (const void *)*((_QWORD *)this + 6);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 6) = 0;
  v6 = (const void *)*((_QWORD *)this + 5);
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 5) = 0;
  v7 = (const void *)*((_QWORD *)this + 9);
  if (v7)
    CFRelease(v7);
  *((_QWORD *)this + 9) = 0;
  v8 = (const void *)*((_QWORD *)this + 10);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)this + 10) = 0;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  *((_QWORD *)this + 4) = 0;
  return CVBufferPool::finalize(this);
}

CFTypeRef *CVOpenGLESTextureCache::initWithContext(CFTypeRef *this, void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef *v7;
  CVOpenGLESContext *v8;
  const __CFAllocator *v9;
  CVObject **v10;
  CVObject **v11;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;
  CVHostTimeBase *v15;
  double v16;
  unint64_t v17;
  const __CFDictionary *Copy;
  const __CFNumber *Value;
  const __CFNumber *v20;
  CFTypeID v21;
  double v22;
  double valuePtr;

  v7 = this;
  v8 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v7))
    return 0;
  v10 = CVOpenGLESContext::alloc(v8, v9);
  if (!v10)
    goto LABEL_17;
  v11 = v10;
  if (!(*(uint64_t (**)(CVObject *, void *))(*(_QWORD *)v10[2] + 56))(v10[2], a2))
    goto LABEL_17;
  v7[4] = v11[2];
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  v7[5] = Mutable;
  if (!Mutable)
    goto LABEL_17;
  v13 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
  v7[6] = v13;
  if (!v13)
    goto LABEL_17;
  v14 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
  v7[7] = v14;
  if (!v14)
    goto LABEL_17;
  v15 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  v7[8] = v15;
  if (!v15)
    goto LABEL_17;
  if (!CVHostTimeBase::sIsInited)
    v16 = CVHostTimeBase::Initialize(v15);
  LODWORD(v16) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v17) = CVHostTimeBase::sToNanosDenominator;
  v7[11] = (CFTypeRef)(1000000000.0 / (double)*(unint64_t *)&v16 * (double)v17);
  if (!a3)
    goto LABEL_15;
  Copy = CFDictionaryCreateCopy(v8, a3);
  v7[9] = Copy;
  if (!Copy)
    goto LABEL_17;
  Value = (const __CFNumber *)CFDictionaryGetValue(Copy, CFSTR("MaximumTextureAge"));
  if (!Value)
    goto LABEL_15;
  v20 = Value;
  valuePtr = 0.0;
  v21 = CFGetTypeID(Value);
  if (v21 != CFNumberGetTypeID())
  {
LABEL_17:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
  v7[11] = (CFTypeRef)CVHostTimeBase::ConvertFromNanos((CVHostTimeBase *)(valuePtr * 1000000000.0), valuePtr * 1000000000.0, v22);
LABEL_15:
  if (a4)
    v7[10] = CFRetain(a4);
  return v7;
}

uint64_t CVOpenGLESTextureCache::bufferBackingInUse(CVOpenGLESTextureCache *this, CVBufferBacking *a2)
{
  CFIndex Count;
  CFIndex v5;
  __CFArray *v6;
  const void *v7;
  CFIndex v8;
  const __CFArray *v9;
  const void *v10;
  __CFArray *v11;
  const void *v12;
  const __CFArray *v13;
  CFRange v14;
  const __CFArray *v15;
  const void *v16;
  CFIndex FirstIndexOfValue;
  const __CFArray *v19;
  const void *v20;
  const __CFArray *v21;
  const void *v22;
  CFIndex v23;
  CFRange v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  Count = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
  v5 = CFArrayGetCount(*((CFArrayRef *)this + 5));
  v6 = *(__CFArray **)(*((_QWORD *)this + 2) + 232);
  v7 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v6, v7);
  v8 = CFArrayGetCount(*((CFArrayRef *)this + 8));
  v9 = (const __CFArray *)*((_QWORD *)this + 8);
  v10 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v24.location = 0;
  v24.length = v8;
  if (CFArrayContainsValue(v9, v24, v10))
  {
    v11 = (__CFArray *)*((_QWORD *)this + 8);
    v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v13 = v11;
    v14.location = 0;
    v14.length = v8;
LABEL_5:
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v13, v14, v12);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
    (*(void (**)(CVBufferBacking *))(*(_QWORD *)a2 + 320))(a2);
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  v15 = *(const __CFArray **)(*((_QWORD *)this + 2) + 224);
  v16 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v25.location = 0;
  v25.length = Count;
  if (CFArrayContainsValue(v15, v25, v16))
  {
    v11 = *(__CFArray **)(*((_QWORD *)this + 2) + 224);
    v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v13 = v11;
    v14.location = 0;
    v14.length = Count;
    goto LABEL_5;
  }
  v19 = (const __CFArray *)*((_QWORD *)this + 5);
  v20 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v26.location = 0;
  v26.length = v5;
  if (CFArrayContainsValue(v19, v26, v20))
  {
    v21 = (const __CFArray *)*((_QWORD *)this + 5);
    v22 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v27.location = 0;
    v27.length = v5;
    v23 = CFArrayGetFirstIndexOfValue(v21, v27, v22);
    CFArrayRemoveValueAtIndex(v21, v23);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVOpenGLESTextureCache::bufferBackingNotInUse(CVOpenGLESTextureCache *this, CVBufferBacking *a2)
{
  __CFArray *v4;
  const void *v5;
  const __CFArray *v6;
  CFIndex Count;
  const void *v8;
  CFIndex FirstIndexOfValue;
  __CFArray **v10;
  __CFArray *v11;
  const void *v12;
  const __CFArray *v13;
  CFIndex v14;
  const void *v15;
  CFIndex v16;
  CFRange v18;
  CFRange v19;

  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v4 = (__CFArray *)*((_QWORD *)this + 5);
  v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  v6 = *(const __CFArray **)(*((_QWORD *)this + 2) + 232);
  Count = CFArrayGetCount(v6);
  v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
  v18.location = 0;
  v18.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v18, v8);
  CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  if ((*(unsigned int (**)(CVBufferBacking *))(*(_QWORD *)a2 + 312))(a2))
  {
    if ((*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 344))(a2))
      v10 = (__CFArray **)((char *)this + 64);
    else
      v10 = (__CFArray **)(*((_QWORD *)this + 2) + 224);
    v11 = *v10;
    v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    CFArrayAppendValue(v11, v12);
    v13 = (const __CFArray *)*((_QWORD *)this + 5);
    v14 = CFArrayGetCount(v13);
    v15 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(_QWORD *)a2 + 24))(a2);
    v19.location = 0;
    v19.length = v14;
    v16 = CFArrayGetFirstIndexOfValue(v13, v19, v15);
    CFArrayRemoveValueAtIndex(v13, v16);
    (*(void (**)(CVBufferBacking *))(*(_QWORD *)a2 + 328))(a2);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVOpenGLESTextureCache::textureCacheRecycler(CVOpenGLESTextureCache *this, _QWORD *a2, void *a3)
{
  uint64_t v4;
  uint64_t result;
  __CFArray **v6;
  __CFArray *v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  const void *v11;
  CFIndex FirstIndexOfValue;
  CFRange v13;

  v4 = *((_QWORD *)this + 2);
  result = (*(uint64_t (**)(uint64_t, _QWORD *, void *))(*(_QWORD *)v4 + 312))(v4, a2, a3);
  if ((_DWORD)result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4))
      v6 = (__CFArray **)(a2 + 8);
    else
      v6 = (__CFArray **)(a2[2] + 224);
    v7 = *v6;
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    CFArrayAppendValue(v7, v8);
    v9 = (const __CFArray *)a2[5];
    Count = CFArrayGetCount(v9);
    v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v13.location = 0;
    v13.length = Count;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v9, v13, v11);
    CFArrayRemoveValueAtIndex(v9, FirstIndexOfValue);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4);
  }
  return result;
}

void CVOpenGLESTextureCache::freeInvalidTexture(CVOpenGLESTextureCache *this, _QWORD *a2, void *a3)
{
  _QWORD **v4;
  __CFDictionary *v5;
  const void *v6;
  const __CFArray *v7;
  CFIndex Count;
  const void *v9;
  CFIndex FirstIndexOfValue;
  CFRange v11;

  v4 = (_QWORD **)*((_QWORD *)this + 2);
  if (((unsigned int (*)(_QWORD **, _QWORD *, void *))(*v4)[15])(v4, a2, a3))
  {
    v5 = (__CFDictionary *)a2[6];
    v6 = (const void *)(*(uint64_t (**)(_QWORD *))(*v4[21] + 24))(v4[21]);
    CFDictionaryRemoveValue(v5, v6);
    v7 = *(const __CFArray **)(a2[2] + 224);
    Count = CFArrayGetCount(v7);
    v9 = (const void *)((uint64_t (*)(_QWORD **))(*v4)[3])(v4);
    v11.location = 0;
    v11.length = Count;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v11, v9);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
  }
}

void CVOpenGLESTextureCache::freeUnusedIOSurfaceTextureBackings(CVOpenGLESTextureCache *this, uint64_t *a2, void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  __CFDictionary *v7;
  __IOSurface *v8;
  IOSurfaceID ID;
  const __CFArray *v10;
  CFIndex FirstIndexOfValue;
  CFRange v12;

  v5 = *a2;
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if ((*(unsigned int (**)(_QWORD *))(*v6 + 120))(v6))
  {
    if (v6[13] < (unint64_t)a2[1])
    {
      v7 = *(__CFDictionary **)(v5 + 56);
      v8 = (__IOSurface *)(*(uint64_t (**)(_QWORD *))(*v6 + 344))(v6);
      ID = IOSurfaceGetID(v8);
      CFDictionaryRemoveValue(v7, (const void *)ID);
      v10 = *(const __CFArray **)(v5 + 64);
      v12.length = CFArrayGetCount(v10);
      v12.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v10, v12, this);
      CFArrayRemoveValueAtIndex(v10, FirstIndexOfValue);
    }
  }
}

uint64_t CVOpenGLESTextureCache::flushTextures(uint64_t this, char a2)
{
  uint64_t v2;
  const __CFArray *v3;
  CFIndex Count;
  const __CFArray *v5;
  CFIndex v6;
  const __CFArray *v7;
  CFIndex v8;
  _QWORD v9[2];

  v2 = this;
  if ((a2 & 1) != 0 || *(_QWORD *)(this + 88))
  {
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 40)))
    {
      v3 = *(const __CFArray **)(v2 + 40);
      Count = CFArrayGetCount(v3);
      CFArrayApplyFunctionReverse(v3, 0, Count, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::textureCacheRecycler, v2);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(v2 + 16) + 224)))
    {
      v5 = *(const __CFArray **)(*(_QWORD *)(v2 + 16) + 224);
      v6 = CFArrayGetCount(v5);
      CFArrayApplyFunctionReverse(v5, 0, v6, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::freeInvalidTexture, v2);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 64)))
    {
      v9[0] = v2;
      v9[1] = CVGetCurrentHostTime() - *(_QWORD *)(v2 + 88);
      v7 = *(const __CFArray **)(v2 + 64);
      v8 = CFArrayGetCount(v7);
      CFArrayApplyFunctionReverse(v7, 0, v8, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::freeUnusedIOSurfaceTextureBackings, (uint64_t)v9);
    }
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  return this;
}

CVImageBuffer **CVOpenGLESTextureCache::createTextureFromImageWithParams(CVOpenGLESTextureCache *this, const __CFAllocator *a2, CVImageBuffer *a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unint64_t a10, int *a11)
{
  CFDataRef v14;
  __CFDictionary *Mutable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CVImageBuffer **v21;
  CVImageBuffer **v22;
  __CVBuffer *v23;
  int v24;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;

  if (a4 == 3553 || a4 == 36161)
  {
    v27 = a4;
    v28 = a5;
    v29 = a6;
    v30 = a7;
    v31 = a8;
    v32 = a9;
    v26 = a10;
    v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v26, 32);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("TextureParams"), v14);
    CFRelease(v14);
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    v16 = (*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 160))(a3);
    v17 = (*(uint64_t (**)(CVOpenGLESTextureCache *, const __CFAllocator *, uint64_t, CVImageBuffer *, __CFDictionary *, int *))(*(_QWORD *)this + 112))(this, a2, v16, a3, Mutable, a11);
    if (v17)
    {
      v18 = v17;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      v21 = CVOpenGLESTexture::alloc(a2, v20);
      v22 = v21;
      if (v21)
      {
        if ((*(uint64_t (**)(CVImageBuffer *, _QWORD))(*(_QWORD *)v21[2] + 248))(v21[2], *(_QWORD *)(v19 + 16)))
        {
          (*(void (**)(CVImageBuffer *, _QWORD))(*(_QWORD *)v22[2] + 144))(v22[2], *((_QWORD *)this + 10));
          v23 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 24))(a3);
          CVBufferPropagateAttachments(v23, (CVBufferRef)v22);
          (*(void (**)(uint64_t, CVImageBuffer *, CVImageBuffer *))(*(_QWORD *)v18 + 296))(v18, a3, v22[2]);
          v24 = 0;
        }
        else
        {
          v24 = -6660;
        }
      }
      else
      {
        v24 = -6690;
      }
      *a11 = v24;
    }
    else
    {
      v22 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v22 = 0;
    *a11 = -6683;
  }
  return v22;
}

_QWORD *CVOpenGLESTextureCache::createTextureBackingFromImageBacking(CVOpenGLESTextureCache *this, const __CFAllocator *a2, CVImageBacking *a3, CVImageBuffer *a4, CFDictionaryRef theDict, int *a6)
{
  const __CFData *Value;
  __IOSurface *v12;
  __IOSurface *v13;
  const __CFDictionary *v14;
  IOSurfaceID ID;
  const __CFArray *v16;
  CFMutableArrayRef Mutable;
  _QWORD **BackingEntry;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD **v21;
  CFIndex Count;
  CFIndex v23;
  const __CFDictionary *v24;
  const void *v25;
  const __CFArray *v26;
  CFMutableArrayRef v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD **v30;
  CFIndex v31;
  CFIndex v32;
  int *v33;
  uint64_t v34;
  CFIndex v35;
  __CFDictionary *v36;
  IOSurfaceID v37;
  _QWORD *v38;
  _QWORD **v39;
  CFIndex v40;
  CFIndex v41;
  CVImageBuffer *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __CFArray *v46;
  uint64_t v47;
  CFIndex v48;
  __CFDictionary *v49;
  const void *v50;
  _QWORD *v51;
  _QWORD **v52;
  CFIndex v53;
  CFIndex v54;
  CVImageBuffer *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;

  Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("TextureParams"));
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v12 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 152))(a3);
  if (v12)
  {
    v13 = v12;
    v14 = (const __CFDictionary *)*((_QWORD *)this + 7);
    ID = IOSurfaceGetID(v12);
    v16 = (const __CFArray *)CFDictionaryGetValue(v14, (const void *)ID);
    if (v16)
    {
      Mutable = v16;
      BackingEntry = findBackingEntry(v16, Value);
      if (BackingEntry)
      {
        v19 = BackingEntry;
        v20 = (_QWORD *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
        v21 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
        Count = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
        v23 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
        CVTracePoolAction(1, v20, v21, "CVOpenGLESTextureCache: [IOSurface] Cache hit", Count, v23);
        (*(void (**)(_QWORD *, CVImageBacking *))(*v19[2] + 256))(v19[2], a3);
LABEL_8:
        v33 = a6;
LABEL_27:
        v59 = v19[2];
        *v33 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      v34 = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 344))(a3);
      if (v34)
        v35 = 2 * v34;
      else
        v35 = 2;
      Mutable = CFArrayCreateMutable(a2, v35, MEMORY[0x1E0C9B378]);
      v36 = (__CFDictionary *)*((_QWORD *)this + 7);
      v37 = IOSurfaceGetID(v13);
      CFDictionarySetValue(v36, (const void *)v37, Mutable);
      CFRelease(Mutable);
    }
    v38 = (_QWORD *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
    v39 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
    v40 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
    v41 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
    CVTracePoolAction(1, v38, v39, "CVOpenGLESTextureCache: [IOSurface] Cache miss", v40, v41);
    v42 = a4;
    v33 = a6;
    v43 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, _QWORD, CFDictionaryRef, CVImageBuffer *, int *))(*(_QWORD *)a3 + 216))(a3, a2, *((_QWORD *)this + 4), theDict, v42, a6);
    if (!v43)
    {
      v59 = 0;
      goto LABEL_28;
    }
    v44 = v43;
    v45 = *a6;
    v19 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    if (!v45)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 96))(v44, *((_QWORD *)this + 2));
      (*(void (**)(uint64_t, __IOSurface *))(*(_QWORD *)v44 + 336))(v44, v13);
      CFArrayAppendValue(Mutable, v19);
      v46 = (__CFArray *)*((_QWORD *)this + 8);
LABEL_26:
      CFArrayAppendValue(v46, v19);
      CFRelease(v19);
      goto LABEL_27;
    }
  }
  else
  {
    v24 = (const __CFDictionary *)*((_QWORD *)this + 6);
    v25 = (const void *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
    v26 = (const __CFArray *)CFDictionaryGetValue(v24, v25);
    if (v26)
    {
      v27 = v26;
      v28 = findBackingEntry(v26, Value);
      if (v28)
      {
        v19 = v28;
        v29 = (_QWORD *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
        v30 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
        v31 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 232));
        v32 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
        CVTracePoolAction(1, v29, v30, "CVOpenGLESTextureCache: Cache hit", v31, v32);
        goto LABEL_8;
      }
    }
    else
    {
      v47 = (*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 344))(a3);
      if (v47)
        v48 = 2 * v47;
      else
        v48 = 2;
      v27 = CFArrayCreateMutable(a2, v48, MEMORY[0x1E0C9B378]);
      v49 = (__CFDictionary *)*((_QWORD *)this + 6);
      v50 = (const void *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
      CFDictionarySetValue(v49, v50, v27);
      CFRelease(v27);
    }
    v51 = (_QWORD *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
    v52 = (_QWORD **)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a3 + 24))(a3);
    v53 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 232));
    v54 = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 2) + 224));
    CVTracePoolAction(1, v51, v52, "CVOpenGLESTextureCache: Cache miss", v53, v54);
    v55 = a4;
    v33 = a6;
    v56 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, _QWORD, CFDictionaryRef, CVImageBuffer *, int *))(*(_QWORD *)a3 + 216))(a3, a2, *((_QWORD *)this + 4), theDict, v55, a6);
    if (!v56)
      goto LABEL_23;
    v57 = v56;
    v58 = *a6;
    v19 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
    if (!v58)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 96))(v57, *((_QWORD *)this + 2));
      CFArrayAppendValue(v27, v19);
      v46 = *(__CFArray **)(*((_QWORD *)this + 2) + 224);
      goto LABEL_26;
    }
  }
  CFRelease(v19);
LABEL_23:
  v59 = 0;
LABEL_28:
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v59;
}

_QWORD **findBackingEntry(const __CFArray *a1, const __CFData *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  _QWORD **ValueAtIndex;
  const void *v8;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(a1, v6);
    v8 = (const void *)(*(uint64_t (**)(_QWORD *))(*ValueAtIndex[2] + 368))(ValueAtIndex[2]);
    if (CFEqual(v8, a2))
      break;
    if (v5 == ++v6)
      return 0;
  }
  return ValueAtIndex;
}

CFStringRef CVOpenGLESTextureCache::copyDebugDescription(CVOpenGLESTextureCache *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  const __CFArray *v12;
  CFIndex v13;
  CFStringRef v14;

  v2 = (const void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVOpenGLESTextureCache *))(*(_QWORD *)this + 24))(this);
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 2);
  v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    Count = -1;
  }
  v10 = *(const __CFArray **)(v7 + 224);
  if (v10)
    v11 = CFArrayGetCount(v10);
  else
    v11 = -1;
  v12 = (const __CFArray *)*((_QWORD *)this + 5);
  if (v12)
    v13 = CFArrayGetCount(v12);
  else
    v13 = -1;
  v14 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p cacheAttributes=nil openGLBufferAttributes=%@ inUse=%ld free=%ld dirty=%ld>"), v4, v5, v6, Count, v11, v13);
  CFRelease(v4);
  return v14;
}

uint64_t CVOpenGLESTextureCache::context(CVOpenGLESTextureCache *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t classFinalize_CVOpenGLESTextureCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVOpenGLESTextureCache(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVOpenGLESTextureCacheRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVOpenGLESTextureCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

GLenum CVOpenGLESTextureGetTarget(CVOpenGLESTextureRef image)
{
  _QWORD *CVOpenGLESTexture;

  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
    LODWORD(CVOpenGLESTexture) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVOpenGLESTexture[12] + 264))(CVOpenGLESTexture[12]);
  return CVOpenGLESTexture;
}

_QWORD *_getCVOpenGLESTexture(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVOpenGLESTextureGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

GLuint CVOpenGLESTextureGetName(CVOpenGLESTextureRef image)
{
  _QWORD *CVOpenGLESTexture;

  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
    LODWORD(CVOpenGLESTexture) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVOpenGLESTexture[12] + 272))(CVOpenGLESTexture[12]);
  return CVOpenGLESTexture;
}

double CVOpenGLESTextureGetSize(_QWORD *a1)
{
  _QWORD *CVOpenGLESTexture;
  double result;

  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture)
    return 0.0;
  (*(void (**)(_QWORD))(*(_QWORD *)CVOpenGLESTexture[12] + 176))(CVOpenGLESTexture[12]);
  return result;
}

Boolean CVOpenGLESTextureIsFlipped(CVOpenGLESTextureRef image)
{
  _QWORD *CVOpenGLESTexture;

  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
    LOBYTE(CVOpenGLESTexture) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)CVOpenGLESTexture[12] + 200))(CVOpenGLESTexture[12]);
  return CVOpenGLESTexture;
}

double CVOpenGLESTextureGetCleanRect(_QWORD *a1)
{
  _QWORD *CVOpenGLESTexture;
  double result;

  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture)
    return 0.0;
  (*(void (**)(_QWORD *))(*CVOpenGLESTexture + 192))(CVOpenGLESTexture);
  return result;
}

void CVOpenGLESTextureGetCleanTexCoords(CVOpenGLESTextureRef image, GLfloat *lowerLeft, GLfloat *lowerRight, GLfloat *upperRight, GLfloat *upperLeft)
{
  _QWORD *CVOpenGLESTexture;

  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
  {
    (*(void (**)(_QWORD *, GLfloat *, GLfloat *, GLfloat *, GLfloat *))(*CVOpenGLESTexture + 256))(CVOpenGLESTexture, lowerLeft, lowerRight, upperRight, upperLeft);
  }
  else
  {
    *(_QWORD *)lowerLeft = 0;
    *(_QWORD *)lowerRight = 0;
    *(_QWORD *)upperRight = 0;
    *(_QWORD *)upperLeft = 0;
  }
}

GLfloat CVOpenGLESTextureGetBounds(__CVBuffer *a1, GLfloat *a2, GLfloat *a3, float *a4, float *a5)
{
  GLfloat result;
  GLfloat upperLeft;
  GLfloat upperRight;
  float v12;
  GLfloat lowerRight;
  GLfloat lowerLeft;
  float v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CVOpenGLESTextureGetCleanTexCoords(a1, &lowerLeft, &lowerRight, &upperRight, &upperLeft);
  if (a2)
  {
    result = lowerLeft;
    *a2 = lowerLeft;
  }
  if (a3)
  {
    result = upperRight;
    *a3 = upperRight;
  }
  if (a4)
  {
    result = v12;
    *a4 = v12;
  }
  if (a5)
  {
    result = v15;
    *a5 = v15;
  }
  return result;
}

_QWORD *CVOpenGLESTextureBackingImage(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVOpenGLESTexture(a1);
  if (result)
    return *(_QWORD **)(result[12] + 168);
  return result;
}

_QWORD *CVOpenGLESTextureBufferBackingImage(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVOpenGLESTexture(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
  return result;
}

__CVBuffer *CVOpenGLESTextureCopyBacking(_QWORD *a1)
{
  _QWORD *CVOpenGLESTexture;
  uint64_t v3;
  CFAllocatorRef v4;
  __CVBuffer *v5;

  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture)
    return 0;
  v3 = *(_QWORD *)(CVOpenGLESTexture[12] + 168);
  v4 = CFGetAllocator(a1);
  v5 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, CFAllocatorRef))(*(_QWORD *)v3 + 144))(v3, v4);
  if (v5)
    CVBufferPropagateAttachments((CVBufferRef)a1, v5);
  return v5;
}

CVReturn CVOpenGLESTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, CVEAGLContext eaglContext, CFDictionaryRef textureAttributes, CVOpenGLESTextureCacheRef *cacheOut)
{
  CVReturn result;
  CFTypeID v11;
  CFTypeID v12;
  CVBufferPool **v13;
  __CVOpenGLESTextureCache *v14;

  result = -6661;
  if (eaglContext && cacheOut)
  {
    if (cacheAttributes)
    {
      v11 = CFGetTypeID(cacheAttributes);
      if (v11 != CFDictionaryGetTypeID())
        return -6661;
    }
    if (textureAttributes && (v12 = CFGetTypeID(textureAttributes), v12 != CFDictionaryGetTypeID()))
    {
      return -6661;
    }
    else
    {
      *cacheOut = 0;
      v13 = CVOpenGLESTextureCache::alloc(allocator, cacheAttributes);
      if (v13
        && (v14 = (__CVOpenGLESTextureCache *)v13,
            (*(uint64_t (**)(CVBufferPool *, CVEAGLContext, CFDictionaryRef, CFDictionaryRef))(*(_QWORD *)v13[2] + 96))(v13[2], eaglContext, cacheAttributes, textureAttributes)))
      {
        result = 0;
        *cacheOut = v14;
      }
      else
      {
        return -6662;
      }
    }
  }
  return result;
}

CVReturn CVOpenGLESTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVOpenGLESTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, size_t planeIndex, CVOpenGLESTextureRef *textureOut)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *CVOpenGLESTextureCache;
  _QWORD *v19;
  CFTypeID v20;
  uint64_t v21;
  CVReturn result;
  CVReturn v23;

  v12 = *(_QWORD *)&height;
  v13 = *(_QWORD *)&width;
  v14 = *(_QWORD *)&internalFormat;
  v15 = *(_QWORD *)&target;
  CVOpenGLESTextureCache = _getCVOpenGLESTextureCache(textureCache);
  if (!sourceImage)
    return -6661;
  v19 = CVOpenGLESTextureCache;
  v20 = CFGetTypeID(sourceImage);
  if (v20 != CVPixelBufferGetTypeID() && v20 != CVOpenGLESTextureGetTypeID())
    return -6661;
  v21 = *((_QWORD *)sourceImage + 2);
  v23 = -6660;
  result = -6661;
  if (textureOut && v19)
  {
    if (v21)
    {
      *textureOut = (CVOpenGLESTextureRef)(*(uint64_t (**)(_QWORD *, CFAllocatorRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, GLenum, size_t, CVReturn *))(*v19 + 104))(v19, allocator, v21, v15, v14, v13, v12, format, type, planeIndex, &v23);
      (*(void (**)(_QWORD *, _QWORD))(*v19 + 120))(v19, 0);
      return v23;
    }
  }
  return result;
}

_QWORD *_getCVOpenGLESTextureCache(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CVOpenGLESTextureCacheGetTypeID())
      return (_QWORD *)v1[2];
    else
      return 0;
  }
  return result;
}

void CVOpenGLESTextureCacheFlush(CVOpenGLESTextureCacheRef textureCache, CVOptionFlags options)
{
  _QWORD *CVOpenGLESTextureCache;

  CVOpenGLESTextureCache = _getCVOpenGLESTextureCache(textureCache);
  if (CVOpenGLESTextureCache)
    (*(void (**)(_QWORD *, uint64_t))(*CVOpenGLESTextureCache + 120))(CVOpenGLESTextureCache, 1);
}

_OWORD *ConvertFromEncodingRange(_OWORD *result, unsigned int a2)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  _OWORD v20[8];
  double v21[7];
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  __int128 v27;
  __int128 v28;

  if (a2 <= 4)
  {
    v2 = 0;
    v3 = (double *)*(&off_1E48A7D50 + (int)a2);
    v4 = v3[4];
    v6 = *v3;
    v5 = v3[1];
    v21[0] = v4 / v5;
    v21[1] = 0.0;
    v21[2] = 0.0;
    v21[3] = -v6 / v5;
    v21[4] = 0.0;
    v8 = v3[2];
    v7 = v3[3];
    v21[5] = v4 / v7;
    v21[6] = 0.0;
    v22 = -v8 / v7;
    v23 = 0;
    v24 = 0;
    v25 = v4 / v7;
    v26 = v22;
    v27 = xmmword_1A2C7E200;
    v28 = unk_1A2C7E210;
    v9 = result[5];
    v20[4] = result[4];
    v20[5] = v9;
    v10 = result[7];
    v20[6] = result[6];
    v20[7] = v10;
    v11 = result[1];
    v20[0] = *result;
    v20[1] = v11;
    v12 = result[3];
    v20[2] = result[2];
    v20[3] = v12;
    v13 = v20;
    do
    {
      v14 = 0;
      v15 = v21;
      do
      {
        v16 = 0;
        v17 = 0.0;
        v18 = v15;
        do
        {
          v19 = *v18;
          v18 += 4;
          v17 = v17 + v19 * *(double *)((char *)v13 + v16);
          v16 += 8;
        }
        while (v16 != 32);
        *((double *)&result[2 * v2] + v14++) = v17;
        ++v15;
      }
      while (v14 != 4);
      ++v2;
      v13 += 2;
    }
    while (v2 != 4);
  }
  return result;
}

uint64_t LookupYCbCrMatrixType(uint64_t a1)
{
  const void *v1;
  const void *v2;

  if (!a1)
    return 6;
  v1 = (const void *)(*(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)a1 + 96))(a1, CFSTR("CVImageBufferYCbCrMatrix"), 0);
  if (!v1)
    return 6;
  v2 = v1;
  if (CFEqual(v1, CFSTR("ITU_R_709_2")))
    return 1;
  if (CFEqual(v2, CFSTR("SMPTE_240M_1995")))
    return 7;
  if (CFEqual(v2, CFSTR("ITU_R_2020")))
    return 9;
  else
    return 6;
}

double CalculateRGBToYCbCrMatrix(uint64_t a1, int a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  if ((a2 - 1) > 0xB)
    v2 = (double *)&qword_1A2C7E230;
  else
    v2 = (double *)*(&off_1E48A7D78 + a2 - 1);
  v3 = v2[1];
  *(double *)a1 = v3;
  v4 = *v2;
  v5 = 1.0 - *v2;
  v6 = v5 - v3;
  *(double *)(a1 + 8) = v5 - v3;
  *(double *)(a1 + 16) = v4;
  *(double *)(a1 + 32) = -(v3 * (0.5 / v5));
  *(double *)(a1 + 40) = -((v5 - v3) * (0.5 / v5));
  *(double *)(a1 + 48) = v5 * (0.5 / v5);
  v7 = 1.0 - v3;
  *(double *)(a1 + 64) = v7 * (0.5 / v7);
  *(double *)(a1 + 72) = -(v6 * (0.5 / v7));
  *(double *)(a1 + 80) = -(v4 * (0.5 / v7));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double CalculateYCbCrToRGBMatrix(uint64_t a1, int a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  CalculateRGBToYCbCrMatrix((uint64_t)&v15, a2);
  v3 = v15;
  v4 = v16;
  v5 = v19;
  v6 = v20;
  v8 = v22;
  v7 = v23;
  v9 = v21;
  v10 = v17;
  v11 = v18;
  v12 = v16 * v20 * v21
      + v15 * v19 * v23
      + v17 * v18 * v22
      + -(v21 * v19) * v17
      + -(v22 * v20) * v15
      + -(v23 * v18) * v16;
  v13 = (v17 * v22 - v16 * v23) / v12;
  *(double *)a1 = (v19 * v23 - v22 * v20) / v12;
  *(double *)(a1 + 8) = v13;
  *(double *)(a1 + 16) = (v4 * v6 - v10 * v5) / v12;
  *(double *)(a1 + 32) = (v6 * v9 - v11 * v7) / v12;
  *(double *)(a1 + 40) = (v3 * v7 - v10 * v9) / v12;
  *(double *)(a1 + 48) = (v10 * v11 - v3 * v6) / v12;
  *(double *)(a1 + 64) = (v11 * v8 - v5 * v9) / v12;
  *(double *)(a1 + 72) = (v4 * v9 - v3 * v8) / v12;
  *(double *)(a1 + 80) = (v3 * v5 - v4 * v11) / v12;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  uint64_t v2;
  CFDictionaryRef result;

  v2 = *(_QWORD *)&attachmentMode;
  result = (CFDictionaryRef)_getCVBuffer(buffer);
  if (result)
    return (CFDictionaryRef)(*(uint64_t (**)(CFDictionaryRef, uint64_t))(*(_QWORD *)result + 128))(result, v2);
  return result;
}

_QWORD *CVBufferDumpToQTES(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;

  result = _getCVBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 152))(result, a2);
  return result;
}

CFDictionaryRef CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef pool)
{
  CFDictionaryRef result;

  result = (CFDictionaryRef)_getCVPixelBufferPool(pool);
  if (result)
    return (CFDictionaryRef)(*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t CVPixelBufferPoolSetMaxBufferAge(_QWORD *a1, double a2)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (CVPixelBufferPool)
    return (*(uint64_t (**)(_QWORD *, double))(*CVPixelBufferPool + 128))(CVPixelBufferPool, a2);
  else
    return 4294960635;
}

uint64_t CVPixelBufferPoolScanIOSurfacesWithOptions(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  _QWORD *CVPixelBufferPool;
  _QWORD *v8;
  int BoolValueWithDefault;
  int v10;
  uint64_t v12;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool)
    return 4294960635;
  v8 = CVPixelBufferPool;
  if (a4)
  {
    BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(a4, CFSTR("ScanFreeIOSurfaces"), 0);
    v10 = CVDictionaryGetBoolValueWithDefault(a4, CFSTR("ScanUsedIOSurfaces"), 0);
    if (!(v10 | BoolValueWithDefault))
      return 4294960635;
    if (v10)
      v12 = (2 * (BoolValueWithDefault != 0)) | 4u;
    else
      v12 = 2 * (BoolValueWithDefault != 0);
  }
  else
  {
    v12 = 2;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v8 + 192))(v8, a2, a3, v12);
}

uint64_t CVPixelBufferPoolPrefetchPages(_QWORD *a1)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (CVPixelBufferPool)
    return (*(uint64_t (**)(_QWORD *))(*CVPixelBufferPool + 176))(CVPixelBufferPool);
  else
    return 4294960635;
}

void CVPixelBufferPoolFlush(CVPixelBufferPoolRef pool, CVPixelBufferPoolFlushFlags options)
{
  _QWORD *CVPixelBufferPool;

  CVPixelBufferPool = _getCVPixelBufferPool(pool);
  kdebug_trace();
  if (CVPixelBufferPool)
    (*(void (**)(_QWORD *, CVPixelBufferPoolFlushFlags))(*CVPixelBufferPool + 184))(CVPixelBufferPool, options);
}

uint64_t CVPixelBufferPoolTakeOwnershipOfIOSurface(const __CFAllocator *a1, CFTypeRef cf, __IOSurface *a3)
{
  uint64_t v3;
  CFTypeID v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t IntValueWithDefault;
  uint64_t v12;
  const void *Value;
  const void *ValueAtIndex;
  CFTypeID v15;
  CFTypeID v16;
  CFDictionaryRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v23;
  const __CFAllocator *v24;
  uint64_t ID;
  char v27;
  int valuePtr;
  CFTypeRef cfa;

  cfa = 0;
  valuePtr = 0;
  v3 = 4294960635;
  if (!cf || !a3)
    return v3;
  v7 = CFGetTypeID(cf);
  if (v7 != CVPixelBufferPoolGetTypeID())
    return 4294960635;
  v8 = *((_QWORD *)cf + 2);
  if (!v8)
    return 4294960635;
  v9 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 120))(*((_QWORD *)cf + 2));
  if (!v9)
    return 4294960635;
  v10 = v9;
  IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v9, CFSTR("Width"), 0);
  if (IntValueWithDefault != IOSurfaceGetWidth(a3))
    return 4294960635;
  v12 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("Height"), 0);
  if (v12 != IOSurfaceGetHeight(a3))
    return 4294960635;
  Value = CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("PixelFormatType"));
  ValueAtIndex = Value;
  if (Value)
  {
    v15 = CFGetTypeID(Value);
    if (v15 != CFArrayGetTypeID()
      || !CFArrayGetCount((CFArrayRef)ValueAtIndex)
      || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) != 0)
    {
      v16 = CFGetTypeID(ValueAtIndex);
      if (v16 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        LODWORD(ValueAtIndex) = valuePtr;
      }
      else
      {
        LODWORD(ValueAtIndex) = 0;
      }
    }
  }
  if ((_DWORD)ValueAtIndex != IOSurfaceGetPixelFormat(a3))
    return 4294960635;
  v17 = IOSurfaceCopyAllValues(a3);
  v18 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("ExtendedPixelsLeft"), 0);
  if (v18 == CVDictionaryGetIntValueWithDefault(v17, CFSTR("ExtendedPixelsLeft"), 0)
    && (v19 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("ExtendedPixelsTop"), 0),
        v19 == CVDictionaryGetIntValueWithDefault(v17, CFSTR("ExtendedPixelsTop"), 0))
    && (v20 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("ExtendedPixelsRight"), 0),
        v20 == CVDictionaryGetIntValueWithDefault(v17, CFSTR("ExtendedPixelsRight"), 0))
    && (v21 = CVDictionaryGetIntValueWithDefault(v10, CFSTR("ExtendedPixelsBottom"), 0),
        v21 == CVDictionaryGetIntValueWithDefault(v17, CFSTR("ExtendedPixelsBottom"), 0)))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)v10);
    if (MutableCopy)
    {
      v23 = MutableCopy;
      ID = IOSurfaceGetID(a3);
      v27 = 0;
      (*(void (**)(uint64_t, __IOSurface *(*)(__IOSurface *, _BYTE *), uint64_t *, uint64_t))(*(_QWORD *)v8 + 192))(v8, pixelBufferPoolScanIOSurfacesCallback, &ID, 6);
      if (!v27)
      {
        cfa = CVPixelBufferBacking::alloc(a1, v24);
        if (!cfa)
        {
          v3 = 4294960634;
          goto LABEL_28;
        }
        if (!checkIOOrEXSurfaceAndCreatePixelBufferBacking(a3, v23, &cfa))
        {
          v3 = (*(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)v8 + 200))(v8, cfa);
          if ((_DWORD)v3)
          {
            CFRelease(cfa);
            cfa = 0;
          }
          goto LABEL_28;
        }
      }
      v3 = 4294960635;
LABEL_28:
      CFRelease(v23);
      goto LABEL_29;
    }
    v3 = 4294960634;
  }
  else
  {
    v3 = 4294960635;
  }
LABEL_29:
  if (v17)
    CFRelease(v17);
  return v3;
}

__IOSurface *pixelBufferPoolScanIOSurfacesCallback(__IOSurface *result, _BYTE *a2)
{
  if (result && a2)
  {
    result = (__IOSurface *)IOSurfaceGetID(result);
    if (*(_QWORD *)a2 == result)
      a2[8] = 1;
  }
  return result;
}

uint64_t CVPixelBufferPoolCopyArrayOfCVPixelBuffers(const __CFAllocator *a1, __CVPixelBufferPool *a2, const __CFDictionary *a3, CFMutableArrayRef *a4)
{
  _QWORD *CVPixelBufferPool;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  const void *v16;
  uint64_t v17;
  CFIndex Count;
  uint64_t v19;
  CFIndex v20;
  unsigned int v21;
  __IOSurface *ValueAtIndex;
  void *value;
  CFArrayRef theArray;

  value = 0;
  theArray = 0;
  if (!_getCVPixelBufferPool(a2))
    return 4294960635;
  CVPixelBufferPool = _getCVPixelBufferPool(a2);
  if (CVPixelBufferPool)
    v9 = (*(uint64_t (**)(_QWORD *))(*CVPixelBufferPool + 120))(CVPixelBufferPool);
  else
    v9 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294960634;
  v13 = Mutable;
  v14 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
  {
    v10 = 4294960634;
LABEL_19:
    CFRelease(v13);
    return v10;
  }
  v15 = v14;
  v16 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v14, CFSTR("ScanFreeIOSurfaces"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(v15, CFSTR("ScanUsedIOSurfaces"), v16);
  theArray = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (theArray)
  {
    v17 = CVPixelBufferPoolScanIOSurfacesWithOptions(a2, (uint64_t)poolScanIOSurfacesCallback, (uint64_t)&theArray, v15);
    if (!(_DWORD)v17)
    {
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_15:
        v10 = 0;
        *a4 = v13;
        v13 = 0;
        goto LABEL_16;
      }
      v19 = Count;
      v20 = 0;
      v21 = 1;
      while (1)
      {
        ValueAtIndex = (__IOSurface *)CFArrayGetValueAtIndex(theArray, v20);
        v17 = CVPixelBufferCreateWithIOSurface(v11, ValueAtIndex, a3, (CVPixelBufferRef *)&value);
        if ((_DWORD)v17)
          break;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)value + 2) + 144))(*((_QWORD *)value + 2), v9);
        CFArrayAppendValue(v13, value);
        CFRelease(value);
        v20 = v21;
        if (v19 <= v21++)
          goto LABEL_15;
      }
    }
    v10 = v17;
  }
  else
  {
    v10 = 4294960634;
  }
LABEL_16:
  CFRelease(v15);
  if (theArray)
    CFRelease(theArray);
  if (v13)
    goto LABEL_19;
  return v10;
}

void poolScanIOSurfacesCallback(__IOSurface *value, CFMutableArrayRef *a2)
{
  if (value)
  {
    if (a2)
      CFArrayAppendValue(*a2, value);
  }
}

CGSize CVImageBufferGetDisplaySize(CVImageBufferRef imageBuffer)
{
  _QWORD *CVPixelBuffer;
  double v2;
  double v3;
  CGSize result;

  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(_QWORD *))(*CVPixelBuffer + 184))(CVPixelBuffer);
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
  }
  result.height = v3;
  result.width = v2;
  return result;
}

CGRect CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer)
{
  _QWORD *CVPixelBuffer;
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(_QWORD *))(*CVPixelBuffer + 192))(CVPixelBuffer);
  }
  else
  {
    v4 = 0.0;
    v3 = 0.0;
    v2 = 0.0;
    v5 = 0.0;
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGColorSpaceRef CVImageBufferGetColorSpace(CVImageBufferRef imageBuffer)
{
  CGColorSpaceRef result;

  result = (CGColorSpaceRef)_getCVPixelBuffer(imageBuffer);
  if (result)
    return (CGColorSpaceRef)(*(uint64_t (**)(CGColorSpaceRef))(*(_QWORD *)result + 168))(result);
  return result;
}

uint64_t CVImageBufferSetColorSpace(_QWORD *a1, uint64_t a2)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*CVPixelBuffer + 208))(CVPixelBuffer, a2);
  else
    return 4294960635;
}

void _releaseCFDataForCGDataProvider(CFTypeRef cf, const void *a2)
{
  if (cf)
    CFRelease(cf);
}

CGColorSpaceRef CVCreateColorSpaceFromIOSurfaceBulkAttachments(uint64_t a1)
{
  CGColorSpaceRef ColorSpaceFromAttachments;
  CFDictionaryRef attachments;

  attachments = 0;
  createAttachmentsDictionaryFromIOSurfaceStruct(a1, &attachments);
  if (!attachments)
    return 0;
  ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(attachments);
  CFRelease(attachments);
  return ColorSpaceFromAttachments;
}

uint64_t CVImageBufferSetCleanAperture(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD *, double, double, double, double))(*CVPixelBuffer + 216))(CVPixelBuffer, a2, a3, a4, a5);
  else
    return 4294960635;
}

uint64_t CVImageBufferSetFieldCount(_QWORD *a1, uint64_t a2)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*CVPixelBuffer + 224))(CVPixelBuffer, a2);
  else
    return 4294960635;
}

uint64_t CVImageBufferSetPixelAspectRatio(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*CVPixelBuffer + 232))(CVPixelBuffer, a2, a3);
  else
    return 4294960635;
}

uint64_t CVImageBufferSetDisplayDimensions(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *CVPixelBuffer;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (CVPixelBuffer)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*CVPixelBuffer + 240))(CVPixelBuffer, a2, a3);
  else
    return 4294960635;
}

double CVImageBufferGetBufferBackingSize(_QWORD *a1)
{
  _QWORD *CVPixelBuffer;
  uint64_t v2;
  double result;

  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer)
    return 0.0;
  v2 = (*(uint64_t (**)(_QWORD *))(*CVPixelBuffer + 160))(CVPixelBuffer);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  return result;
}

_QWORD *CVImageBufferProvideImageData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;
  uint64_t v14;

  result = _getCVPixelBuffer(a1);
  if (result)
  {
    v14 = (*(uint64_t (**)(_QWORD *))(*result + 160))(result);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 184))(v14, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

_QWORD *CVImageBufferGetPixelFormatType(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v2;

  result = _getCVPixelBuffer(a1);
  if (result)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*result + 160))(result);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2);
  }
  return result;
}

Boolean CVImageBufferIsFlipped(CVImageBufferRef imageBuffer)
{
  _QWORD *CVPixelBuffer;
  uint64_t v2;

  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*CVPixelBuffer + 160))(CVPixelBuffer);
    LOBYTE(CVPixelBuffer) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
  }
  return CVPixelBuffer;
}

_QWORD *CVImageBufferHasCleanRect(_QWORD *a1)
{
  _QWORD *result;

  result = _getCVPixelBuffer(a1);
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 200))(result);
  return result;
}

CFMutableDictionaryRef cvSetUpUnrecognizedCodePointDictionariesOnce(void *a1)
{
  const __CFAllocator *v1;
  const CFDictionaryValueCallBacks *v2;
  CFMutableDictionaryRef result;

  sCVUnrecognizedCodePointDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.corevideo.unrecognized-code-points", 0);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  sCVStringsForUnrecognizedYCbCrMatrixCodePoints = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  sCVStringsForUnrecognizedColorPrimariesCodePoints = (uint64_t)CFDictionaryCreateMutable(v1, 0, 0, v2);
  result = CFDictionaryCreateMutable(v1, 0, 0, v2);
  sCVStringsForUnrecognizedTransferFunctionCodePoints = (uint64_t)result;
  return result;
}

void cvGetUnrecognizedCodePointString(int *a1)
{
  const void *Value;
  CFStringRef v3;

  Value = CFDictionaryGetValue(*((CFDictionaryRef *)a1 + 2), (const void *)a1[2]);
  *((_QWORD *)a1 + 3) = Value;
  if (!Value)
  {
    v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@%d"), *(_QWORD *)a1, a1[2]);
    *((_QWORD *)a1 + 3) = v3;
    if (v3)
    {
      CFDictionarySetValue(*((CFMutableDictionaryRef *)a1 + 2), (const void *)a1[2], v3);
      CFRelease(*((CFTypeRef *)a1 + 3));
    }
  }
}

CVOpenGLESTextureBacking **CVPixelBufferOpenGLESTextureBacking::alloc(CVPixelBufferOpenGLESTextureBacking *this, const __CFAllocator *a2)
{
  CVObject *TypeID;
  CVOpenGLESTextureBacking **v4;
  CVOpenGLESTextureBacking **v5;
  _QWORD *v6;

  if (_cvUseTrackingAllocator)
    this = (CVPixelBufferOpenGLESTextureBacking *)_cvTrackingGetCFAllocator(CFSTR("CVPixelBufferOpenGLESTextureBacking"));
  TypeID = (CVObject *)CVObjectGetTypeID();
  v4 = (CVOpenGLESTextureBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x210uLL);
  v5 = v4;
  if (v4)
  {
    CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(v4[2], v4);
    *v6 = off_1E48A3E88;
  }
  return v5;
}

void CVPixelBufferOpenGLESTextureBacking::CVPixelBufferOpenGLESTextureBacking(CVPixelBufferOpenGLESTextureBacking *this, const void *a2)
{
  _QWORD *v2;

  CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(this, a2);
  *v2 = off_1E48A3E88;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::isPixelBufferBackingSupported(CVPixelBufferOpenGLESTextureBacking *this, CVPixelBufferBacking *a2, CVOpenGLESContext *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if ((*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVPixelBufferBacking *, CVOpenGLESContext *))(*(_QWORD *)this + 152))(this, a2, a3))
  {
    return (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 472))(this);
  }
  v5 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 312))(this);
  v6 = *(_QWORD *)this;
  if (v5)
  {
    v7 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(v6 + 344))(this);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      while (1)
      {
        v10 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(_QWORD *)this + 352))(this, v9);
        v11 = ((unint64_t)(*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(_QWORD *)this + 392))(this, v9) >> 3)* v10;
        if (v11 != (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(_QWORD *)this + 376))(this, v9))break;
        if (v8 == ++v9)
          return (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 472))(this);
      }
      return 0;
    }
    return (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 472))(this);
  }
  v12 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(v6 + 272))(this);
  v13 = ((unint64_t)(*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 336))(this) >> 3)
      * v12;
  if (v13 == (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 296))(this))
    return (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(_QWORD *)this + 472))(this);
  return 0;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::finalize(CVPixelBufferOpenGLESTextureBacking *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  if (*((_QWORD *)this + 22))
  {
    v2 = *((_QWORD *)this + 64);
    v3 = *((_QWORD *)this + 65);
    if (v3 & 1 | v2)
    {
      v4 = (_QWORD *)((char *)this + (v3 >> 1));
      if ((v3 & 1) != 0)
        v2 = *(_QWORD *)(*v4 + v2);
      ((void (*)(_QWORD *))v2)(v4);
    }
  }
  v5 = *((_QWORD *)this + 21);
  if (v5 && !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 424))(*((_QWORD *)this + 21), 0);
  v6 = (const void *)*((_QWORD *)this + 59);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 28);
  if (v7)
    CFRelease(v7);
  return CVOpenGLESTextureBacking::finalize(this);
}

void CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat()
{
  if ((CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat::didComplain & 1) == 0)
    CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat::didComplain = 1;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::createStandardTexture(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  const __CFData *Value;
  const __CFData *v6;
  CFTypeID v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __IOSurface *v20;
  uint64_t v21;
  int v22;
  _DWORD v24[3];
  UInt8 buffer[8];
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  CFRange v31;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 21);
  *((_DWORD *)this + 65) = (*(uint64_t (**)(uint64_t, CVImageBuffer *))(*(_QWORD *)v3 + 432))(v3, a2);
  *((_DWORD *)this + 66) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 440))(v3);
  *((_DWORD *)this + 67) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 448))(v3);
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 35) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 320))(v3, 1);
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 37) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 296))(v3);
  *((_DWORD *)this + 68) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
  *((_DWORD *)this + 69) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
  *((_QWORD *)this + 31) = 0x806900000DE1;
  *((_QWORD *)this + 39) = 0;
  v4 = (const __CFDictionary *)*((_QWORD *)this + 59);
  if (v4)
  {
    Value = (const __CFData *)CFDictionaryGetValue(v4, CFSTR("TextureParams"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFDataGetTypeID() && CFDataGetLength(v6) == 32)
      {
        v31.length = CFDataGetLength(v6);
        v31.location = 0;
        CFDataGetBytes(v6, v31, buffer);
        *((_DWORD *)this + 62) = v26;
        v8 = v27;
        *((_DWORD *)this + 69) = v28;
        *(_QWORD *)&v9 = v29;
        *((_QWORD *)&v9 + 1) = v8;
        *(_OWORD *)((char *)this + 260) = v9;
        *((_QWORD *)this + 39) = *(_QWORD *)buffer;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3) < (unint64_t)SHIDWORD(v8)
          || (v10 = *((int *)this + 69), (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3) < v10))
        {
          v11 = 0;
          *((_OWORD *)this + 32) = 0u;
          return v11;
        }
        *((_QWORD *)this + 27) = CFRetain(v6);
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 480))(v3);
  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  v12 = *(_QWORD **)(*((_QWORD *)this + 22) + 88);
  *((_DWORD *)this + 116) = 1;
  ((void (*)(_QWORD, _QWORD, _DWORD *))v12[105])(*v12, *((unsigned int *)this + 63), v24);
  v24[2] = 0;
  ((void (*)(_QWORD, uint64_t, char *))v12[99])(*v12, 1, (char *)this + 256);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 48))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), *((unsigned int *)this + 62), *((unsigned int *)this + 64));
  snprintf((char *)buffer, 0x40uLL, "CoreVideo #%u", *((_DWORD *)this + 64));
  ((void (*)(_QWORD, uint64_t, _QWORD, _QWORD, UInt8 *))v12[815])(*v12, 5890, *((unsigned int *)this + 64), 0, buffer);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 480))(v3))
  {
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *((unsigned int *)this + 62), 10241, 9729);
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *((unsigned int *)this + 62), 10240, 9729);
    v13 = (id *)*((_QWORD *)this + 22);
    v14 = *((_DWORD *)this + 62);
    v15 = *((_DWORD *)this + 67);
    v16 = *((unsigned int *)this + 68);
    v17 = *((unsigned int *)this + 69);
    v18 = *((_DWORD *)this + 65);
    v19 = *((_DWORD *)this + 66);
    v20 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
    v11 = CVOpenGLESContext::texImageIOSurface(v13, v14, v15, v16, v17, v18, v19, v20, *((_QWORD *)this + 39));
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3))
      CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 416))(v3, 1);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 344))(v3))
      v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 368))(v3, *((_QWORD *)this + 39), 1);
    else
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 320))(v3, 1);
    *((_QWORD *)this + 35) = v21;
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *((unsigned int *)this + 62), 10241, 9729);
    ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12[305])(*v12, *((unsigned int *)this + 62), 10240, 9729);
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))v12[302])(*v12, *((unsigned int *)this + 62), 0, *((unsigned int *)this + 67), *((unsigned int *)this + 68), *((unsigned int *)this + 69), 0, *((unsigned int *)this + 65), *((_DWORD *)this + 66), *((_QWORD *)this + 35) + *((unsigned int *)this + 72));
    v11 = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 424))(v3, 1);
    *((_QWORD *)this + 35) = 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 48))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), *((unsigned int *)this + 62), v24[0]);
  pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  v22 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 48) = *((_DWORD *)this + 62);
  *((_DWORD *)this + 49) = v22;
  return v11;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::updateStandardTexture(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2, CVOpenGLESTexture *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _DWORD v8[3];

  v4 = *((_QWORD *)this + 21);
  result = (*(uint64_t (**)(uint64_t, CVImageBuffer *, CVOpenGLESTexture *))(*(_QWORD *)v4 + 480))(v4, a2, a3);
  if ((result & 1) == 0)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
    v6 = *(_QWORD **)(*((_QWORD *)this + 22) + 88);
    ((void (*)(_QWORD, _QWORD, _DWORD *))v6[105])(*v6, *((unsigned int *)this + 63), v8);
    v8[2] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 416))(v4, 1);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4))
      v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 368))(v4, *((_QWORD *)this + 39), 1);
    else
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 320))(v4, 1);
    *((_QWORD *)this + 35) = v7;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 48))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), *((unsigned int *)this + 62), *((unsigned int *)this + 64));
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))v6[308])(*v6, *((unsigned int *)this + 62), 0, 0, 0, *((unsigned int *)this + 68), *((unsigned int *)this + 69), *((unsigned int *)this + 65), *((_DWORD *)this + 66), *((_QWORD *)this + 35) + *((unsigned int *)this + 72));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 424))(v4, 1);
    *((_QWORD *)this + 35) = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 48))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), *((unsigned int *)this + 62), v8[0]);
    return pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  }
  return result;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  (*(void (**)(_QWORD, uint64_t, char *))(*(_QWORD *)(*((_QWORD *)this + 22) + 88) + 480))(**(_QWORD **)(*((_QWORD *)this + 22) + 88), 1, (char *)this + 256);
  *((_DWORD *)this + 116) = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
}

void CVPixelBufferOpenGLESTextureBacking::getTextureFunctions(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  *a3 = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
  a3[1] = 0;
  *a4 = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  a4[1] = 0;
  *a5 = CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
  a5[1] = 0;
}

CVPixelBufferOpenGLESTextureBacking *CVPixelBufferOpenGLESTextureBacking::initWithPixelBackingContext(CVPixelBufferOpenGLESTextureBacking *this, CVPixelBufferBacking *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  CVImageBuffer *v15;
  CFTypeRef v16;
  int v17;

  if (!(*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 152))(a2))
    (*(void (**)(CVPixelBufferBacking *, _QWORD))(*(_QWORD *)a2 + 416))(a2, 0);
  *((_QWORD *)this + 29) = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 272))(a2);
  v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 280))(a2);
  v12 = v11;
  *((_QWORD *)this + 30) = v11;
  v13 = *((_DWORD *)this + 58);
  v14 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)a2 + 200))(a2);
  CVOpenGLESTextureBacking::initWithBackingContext(this, a2, a3, v13, v12, v14);
  if (a4)
    v16 = CFRetain(a4);
  else
    v16 = 0;
  *((_QWORD *)this + 59) = v16;
  *((_QWORD *)this + 60) = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
  *((_QWORD *)this + 65) = 0;
  if (CVPixelBufferOpenGLESTextureBacking::createStandardTexture(this, v15))
    v17 = 0;
  else
    v17 = -6683;
  *a6 = v17;
  return this;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::updateTexture(uint64_t (**this)(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2), CVImageBuffer *a2, CVOpenGLESTexture *a3)
{
  uint64_t (**v5)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *);
  BOOL v6;
  BOOL v7;
  uint64_t (*v8)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *, CVOpenGLESTexture *);
  uint64_t (*v9)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *);
  uint64_t v10;
  _QWORD *v11;
  CVImageBuffer *v12;
  uint64_t v13;

  v5 = this;
  v6 = this[60] == CVPixelBufferOpenGLESTextureBacking::createStandardTexture && this[61] == 0;
  if (v6
    && ((char *)this[62] == (char *)CVPixelBufferOpenGLESTextureBacking::updateStandardTexture
      ? (v7 = this[63] == 0)
      : (v7 = 0),
        v7 && (char *)this[64] == (char *)CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture && !this[65]))
  {
    v8 = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  }
  else
  {
    v9 = this[64];
    v10 = (uint64_t)this[65];
    v11 = (uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))((char *)this + (v10 >> 1));
    if ((v10 & 1) != 0)
      v9 = *(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))(*v11 + v9);
    ((void (*)(_QWORD *))v9)(v11);
    v5[60] = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
    v5[61] = 0;
    v5[62] = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
    v5[63] = 0;
    v5[64] = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
    v5[65] = 0;
    CVPixelBufferOpenGLESTextureBacking::createStandardTexture((CVPixelBufferOpenGLESTextureBacking *)v5, v12);
    v8 = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *, CVOpenGLESTexture *))v5[62];
    v13 = (uint64_t)v5[63];
    v5 = (uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))((char *)v5 + (v13 >> 1));
    if ((v13 & 1) != 0)
      v8 = *(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *, CVOpenGLESTexture *))((char *)*v5 + v8);
  }
  return v8((CVPixelBufferOpenGLESTextureBacking *)v5, a2, a3);
}

uint64_t CVPixelBufferOpenGLESTextureBacking::finishTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  v2 = *((_QWORD *)this + 22);
  if (*((int *)this + 116) >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v2 + 88);
    v5 = (unsigned int *)((char *)this + 256);
    do
    {
      v6 = *v5;
      v5 += 18;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v4 + 3768))(*(_QWORD *)v4, 5890, v6);
      ++v3;
    }
    while (v3 < *((int *)this + 116));
    v2 = *((_QWORD *)this + 22);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 16));
}

BOOL CVPixelBufferOpenGLESTextureBacking::testTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _BOOL8 v7;

  pthread_mutex_lock((pthread_mutex_t *)(*((_QWORD *)this + 22) + 16));
  v2 = *((_QWORD *)this + 22);
  v3 = *((_DWORD *)this + 116);
  if (v3 < 1)
  {
    v7 = 1;
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 88);
    v6 = (unsigned int *)((char *)this + 256);
    LOBYTE(v7) = 1;
    do
    {
      if (v7)
      {
        v7 = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v5 + 3760))(*(_QWORD *)v5, 5890, *v6) != 0;
        v3 = *((_DWORD *)this + 116);
      }
      else
      {
        v7 = 0;
      }
      ++v4;
      v6 += 18;
    }
    while (v4 < v3);
    v2 = *((_QWORD *)this + 22);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 16));
  return v7;
}

CFStringRef CVObject::copyDebugDescription(CVObject *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  const void *v6;
  CFIndex v7;
  CFStringRef v8;

  v2 = (const void *)(*(uint64_t (**)(CVObject *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVObject *))(*(_QWORD *)this + 24))(this);
  v6 = (const void *)(*(uint64_t (**)(CVObject *))(*(_QWORD *)this + 24))(this);
  v7 = CFGetRetainCount(v6);
  v8 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p obj=%p refcnt=%ld>"), v4, v5, this, v7);
  CFRelease(v4);
  return v8;
}

const void *_cvTrackingGetCFAllocator(const void *a1)
{
  const __CFDictionary *Mutable;
  const void *Value;
  _QWORD *v4;
  CFAllocatorContext context;

  pthread_mutex_lock(&_cvAllocatorMutex);
  Mutable = (const __CFDictionary *)_cvAllocatorDictionary;
  if (!_cvAllocatorDictionary)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    _cvAllocatorDictionary = (uint64_t)Mutable;
  }
  Value = CFDictionaryGetValue(Mutable, a1);
  if (!Value)
  {
    v4 = malloc_type_calloc(0x10uLL, 1uLL, 0xDEFE9BAFuLL);
    *v4 = CFRetain(a1);
    context.version = 0;
    context.info = v4;
    context.allocate = (CFAllocatorAllocateCallBack)trackingAllocate;
    memset(&context.retain, 0, 24);
    context.reallocate = (CFAllocatorReallocateCallBack)trackingReallocate;
    context.deallocate = (CFAllocatorDeallocateCallBack)trackingDeallocate;
    context.preferredSize = (CFAllocatorPreferredSizeCallBack)trackingPreferredSize;
    Value = CFAllocatorCreate(0, &context);
    CFDictionarySetValue((CFMutableDictionaryRef)_cvAllocatorDictionary, a1, Value);
  }
  pthread_mutex_unlock(&_cvAllocatorMutex);
  return Value;
}

void *trackingAllocate(size_t a1, unint64_t a2, unsigned int *a3)
{
  void *v4;
  int v5;
  CFStringRef v6;

  v4 = malloc_type_malloc(a1, 0x742366B6uLL);
  v5 = malloc_size(v4);
  CVAddAtomic(v5, a3 + 2);
  v6 = CFStringCreateWithFormat(0, 0, CFSTR("%@ allocated: %d  deallocated: %d  diff: %d\n"), *(_QWORD *)a3, a3[2], a3[3], a3[2] - a3[3]);
  CFShow(v6);
  CFRelease(v6);
  return v4;
}

void *trackingReallocate(void *a1, size_t a2, unint64_t a3, unsigned int *a4)
{
  int v7;
  void *v8;
  int v9;
  CFStringRef v10;

  v7 = malloc_size(a1);
  CVAddAtomic(v7, a4 + 3);
  v8 = malloc_type_realloc(a1, a2, 0x31FF8F95uLL);
  v9 = malloc_size(v8);
  CVAddAtomic(v9, a4 + 2);
  v10 = CFStringCreateWithFormat(0, 0, CFSTR("%@ allocated: %d  deallocated: %d  diff: %d\n"), *(_QWORD *)a4, a4[2], a4[3], a4[2] - a4[3]);
  CFShow(v10);
  CFRelease(v10);
  return v8;
}

void trackingDeallocate(void *a1, unsigned int *a2)
{
  int v4;
  CFStringRef v5;

  v4 = malloc_size(a1);
  CVAddAtomic(v4, a2 + 3);
  free(a1);
  v5 = CFStringCreateWithFormat(0, 0, CFSTR("%@ allocated: %d  deallocated: %d  diff: %d\n"), *(_QWORD *)a2, a2[2], a2[3], a2[2] - a2[3]);
  CFShow(v5);
  CFRelease(v5);
}

uint64_t classFinalize_CVObject(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVObject(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVObjectRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVObject(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void CVMetalTextureCache::CVMetalTextureCache(CVMetalTextureCache *this, const void *a2)
{
  _QWORD *v2;

  CVBufferPool::CVBufferPool(this, a2);
  *v2 = off_1E48A35E0;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

uint64_t CVMetalTextureCache::textureCacheRecycler(CVMetalTextureCache *this, _QWORD *a2, void *a3)
{
  uint64_t v4;
  uint64_t result;
  __CFArray **v6;
  __CFArray *v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  const void *v11;
  CFIndex FirstIndexOfValue;
  CFRange v13;

  v4 = *((_QWORD *)this + 2);
  result = (*(uint64_t (**)(uint64_t, _QWORD *, void *))(*(_QWORD *)v4 + 304))(v4, a2, a3);
  if ((_DWORD)result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 336))(v4))
      v6 = (__CFArray **)(a2 + 8);
    else
      v6 = (__CFArray **)(a2[2] + 224);
    v7 = *v6;
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    CFArrayAppendValue(v7, v8);
    v9 = (const __CFArray *)a2[5];
    Count = CFArrayGetCount(v9);
    v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v13.location = 0;
    v13.length = Count;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v9, v13, v11);
    CFArrayRemoveValueAtIndex(v9, FirstIndexOfValue);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 320))(v4);
  }
  return result;
}

void CVMetalTextureCache::freeInvalidTexture(CVMetalTextureCache *this, _QWORD *a2, void *a3)
{
  _QWORD **v4;
  __CFDictionary *v5;
  const void *v6;
  const __CFArray *v7;
  CFIndex Count;
  const void *v9;
  CFIndex FirstIndexOfValue;
  CFRange v11;

  v4 = (_QWORD **)*((_QWORD *)this + 2);
  if (((unsigned int (*)(_QWORD **, _QWORD *, void *))(*v4)[15])(v4, a2, a3))
  {
    v5 = (__CFDictionary *)a2[6];
    v6 = (const void *)(*(uint64_t (**)(_QWORD *))(*v4[21] + 24))(v4[21]);
    CFDictionaryRemoveValue(v5, v6);
    v7 = *(const __CFArray **)(a2[2] + 224);
    Count = CFArrayGetCount(v7);
    v9 = (const void *)((uint64_t (*)(_QWORD **))(*v4)[3])(v4);
    v11.location = 0;
    v11.length = Count;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v11, v9);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
  }
}

CFStringRef CVMetalTextureCache::copyDebugDescription(CVMetalTextureCache *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  const __CFArray *v12;
  CFIndex v13;
  CFStringRef v14;

  v2 = (const void *)(*(uint64_t (**)(CVMetalTextureCache *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVMetalTextureCache *))(*(_QWORD *)this + 24))(this);
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 2);
  v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    Count = -1;
  }
  v10 = *(const __CFArray **)(v7 + 224);
  if (v10)
    v11 = CFArrayGetCount(v10);
  else
    v11 = -1;
  v12 = (const __CFArray *)*((_QWORD *)this + 5);
  if (v12)
    v13 = CFArrayGetCount(v12);
  else
    v13 = -1;
  v14 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p cacheAttributes=nil metalBufferAttributes=%@ inUse=%ld free=%ld dirty=%ld>"), v4, v5, v6, Count, v11, v13);
  CFRelease(v4);
  return v14;
}

CFStringRef classCopyFormatDescription_CVMetalTextureCache(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVMetalTextureCacheRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalTextureCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

uint64_t CVPixelBufferBackingGetTypeID(void)
{
  if (CVPixelBufferBackingGetTypeID(void)::once != -1)
    dispatch_once_f(&CVPixelBufferBackingGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferBacking);
  return kCVPixelBufferBackingID;
}

void CVPixelBufferBacking::CVPixelBufferBacking(CVPixelBufferBacking *this, const void *a2)
{
  uint64_t v2;

  CVImageBacking::CVImageBacking(this, a2);
  *(_QWORD *)v2 = off_1E48A3768;
  *(_QWORD *)(v2 + 496) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 1080) = 0;
  *(_QWORD *)(v2 + 1096) = 0;
  *(_QWORD *)(v2 + 1088) = 0;
  *(_QWORD *)(v2 + 1120) = 0;
  *(_QWORD *)(v2 + 1112) = 0;
  *(_BYTE *)(v2 + 144) = 1;
  *(_QWORD *)(v2 + 1136) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  *(_QWORD *)(v2 + 456) = 0;
  *(_DWORD *)(v2 + 476) = 0;
}

uint64_t areUniversalCompressedBuffers2KAligned(void)
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *v2;
  Boolean AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;

  if ((areUniversalCompressedBuffers2KAligned(void)::didCheck & 1) == 0)
  {
    v0 = (const __CFDictionary *)MGCopyAnswer();
    if (v0)
    {
      v1 = v0;
      v2 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v2 == CFDictionaryGetValue(v0, CFSTR("universal-buffer-compression-requires-plane-alignment-2048")))
        areUniversalCompressedBuffers2KAligned(void)::result = 1;
      CFRelease(v1);
    }
    if (!areUniversalCompressedBuffers2KAligned(void)::result)
    {
      keyExistsAndHasValidFormat = 0;
      AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("universal-buffer-compression-requires-plane-alignment-2048"), CFSTR("com.apple.corevideo"), &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat)
        areUniversalCompressedBuffers2KAligned(void)::result = AppBooleanValue;
    }
    areUniversalCompressedBuffers2KAligned(void)::didCheck = 1;
  }
  return areUniversalCompressedBuffers2KAligned(void)::result;
}

__IOSurface *CreateChildIOSurface(__CVBuffer *a1, __CFDictionary *a2, unint64_t a3, unsigned int *a4)
{
  _QWORD *BufferBacking;
  _QWORD *v8;
  const __CFArray *v9;
  uint64_t IntValueWithDefault;
  const __CFNumber *Value;
  const __CFNumber *v12;
  CFTypeID v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const void *v17;
  __IOSurface *ValueAtIndex;
  OSType PixelFormat;
  const __CFArray *v20;
  CFIndex v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  __CFArray *Mutable;
  _DWORD *v27;
  int v28;
  const void *v30;
  void *key;
  _QWORD *v32;
  unsigned int *v33;
  const __CFDictionary *theDict;
  uint64_t v35;
  int valuePtr;

  valuePtr = 0;
  BufferBacking = CVPixelBufferGetBufferBacking(a1);
  if (!BufferBacking)
    return 0;
  v8 = BufferBacking;
  if (!*(_QWORD *)(BufferBacking[2] + 456))
    return 0;
  v33 = a4;
  pthread_mutex_lock(&gPixelBufferBackingCachedChildIOSurfaceMutex);
  v32 = v8;
  v9 = *(const __CFArray **)(v8[2] + 464);
  IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, (const void *)*MEMORY[0x1E0CBC1E0], 1);
  v35 = CVDictionaryGetIntValueWithDefault(a2, (const void *)*MEMORY[0x1E0CBC008], 1);
  theDict = a2;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CBC070]);
  if (Value)
  {
    v12 = Value;
    v13 = CFGetTypeID(Value);
    if (v13 == CFNumberGetTypeID())
      CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
  }
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v15 = Count;
      v16 = 0;
      key = (void *)*MEMORY[0x1E0CBC158];
      v17 = (const void *)*MEMORY[0x1E0CBC160];
      v30 = (const void *)*MEMORY[0x1E0CBC058];
      do
      {
        ValueAtIndex = (__IOSurface *)CFArrayGetValueAtIndex(v9, v16);
        if (IOSurfaceGetWidth(ValueAtIndex) == IntValueWithDefault
          && IOSurfaceGetHeight(ValueAtIndex) == v35
          && IOSurfaceGetPlaneCount(ValueAtIndex) == a3)
        {
          PixelFormat = IOSurfaceGetPixelFormat(ValueAtIndex);
          if (PixelFormat == valuePtr)
          {
            if (a3)
            {
              v20 = (const __CFArray *)CFDictionaryGetValue(theDict, key);
              v21 = 0;
              v22 = 0;
              while (1)
              {
                v23 = CFArrayGetValueAtIndex(v20, v21);
                v24 = CVDictionaryGetIntValueWithDefault(v23, v17, 0);
                if (IOSurfaceGetOffsetOfPlane() != v24)
                  break;
                v21 = ++v22;
                if (v22 >= a3)
                  goto LABEL_30;
              }
            }
            else
            {
              v25 = CVDictionaryGetIntValueWithDefault(theDict, v30, 0);
              if (IOSurfaceGetOffsetOfPlane() == v25)
              {
LABEL_30:
                CFRetain(ValueAtIndex);
                v27 = v33;
                if (v33)
                {
                  v28 = 6;
LABEL_26:
                  *v27 = v28;
                }
                goto LABEL_27;
              }
            }
          }
        }
        ++v16;
      }
      while (v16 != v15);
    }
  }
  ValueAtIndex = (__IOSurface *)IOSurfaceCreateChildSurface();
  if (ValueAtIndex)
  {
    Mutable = *(__CFArray **)(v32[2] + 464);
    if (Mutable
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(v32[2] + 464) = Mutable) != 0))
    {
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
  }
  v27 = v33;
  if (v33)
  {
    v28 = 2;
    goto LABEL_26;
  }
LABEL_27:
  pthread_mutex_unlock(&gPixelBufferBackingCachedChildIOSurfaceMutex);
  return ValueAtIndex;
}

uint64_t CVPixelBufferBacking::getTotalPixelBufferBackingSize(CVPixelBufferBacking *this)
{
  return gPixelBufferBackingTotalDataSize;
}

uint64_t addBackingSummaryToGlobalBagAndTrace(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5, char a6, const __CFString *a7)
{
  CFStringRef v14;
  unint64_t v15;

  pthread_mutex_lock(&gPixelBufferBackingSummaryMutex);
  if (gPixelBufferBackingSummaryBag)
  {
    v14 = copyBackingSummaryString(a1, a2, a3, a5, a6, a7);
    CFBagAddValue((CFMutableBagRef)gPixelBufferBackingSummaryBag, v14);
    CFRelease(v14);
    v15 = gPixelBufferBackingTotalDataSize;
    if ((a5 & 2) == 0)
    {
      v15 = gPixelBufferBackingTotalDataSize + a4;
      gPixelBufferBackingTotalDataSize += a4;
    }
    printPixelBufferBackingSummaryBag((const __CFBag *)gPixelBufferBackingSummaryBag, v15);
  }
  return pthread_mutex_unlock(&gPixelBufferBackingSummaryMutex);
}

CFDictionaryRef CVPixelBufferBacking::copyPixelBufferOptions(CFTypeRef *this)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(this[136]);
  return CFDictionaryCreateCopy(v2, (CFDictionaryRef)this[136]);
}

const void *CVPixelBufferBacking::getComponentRange(CFDictionaryRef *this)
{
  return CFDictionaryGetValue(this[135], CFSTR("ComponentRange"));
}

uint64_t CVPixelBufferBacking::getRowPixels(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 127);
}

uint64_t CVPixelBufferBacking::getBitsPerPixel(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 128);
}

uint64_t CVPixelBufferBacking::getRowPixelsOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 130);
  if (!(a2 | v2))
    return (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 328))(this);
  if (v2 <= a2)
    return 0;
  return *((_QWORD *)this + a2 + 94);
}

uint64_t CVPixelBufferBacking::getBitsPerPixelOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 130);
  if (!(a2 | v2))
    return (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 336))(this);
  if (v2 <= a2)
    return 0;
  return *((_QWORD *)this + a2 + 110);
}

const __CFData *CVPixelBufferBacking::fillExtendedPixels(CFDictionaryRef *this, __CVBuffer *a2)
{
  const __CFData *result;
  const UInt8 *BytePtr;

  result = (const __CFData *)CFDictionaryGetValue(this[135], CFSTR("FillExtendedPixelsCallback"));
  if (result)
  {
    BytePtr = CFDataGetBytePtr(result);
    return (const __CFData *)(*((uint64_t (**)(__CVBuffer *, _QWORD))BytePtr + 1))(a2, *((_QWORD *)BytePtr + 2));
  }
  return result;
}

uint64_t CVPixelBufferBacking::getOpenGLFormat(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], CFSTR("OpenGLFormat"), 0);
}

uint64_t CVPixelBufferBacking::getOpenGLType(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], CFSTR("OpenGLType"), 0);
}

uint64_t CVPixelBufferBacking::getOpenGLInternalFormat(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], CFSTR("OpenGLInternalFormat"), 0);
}

uint64_t CVPixelBufferBacking::isOpenGLTextureCacheCompatible(CVPixelBufferBacking *this)
{
  return 0;
}

uint64_t CVPixelBufferBacking::getHorizontalSubsampling(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], CFSTR("HorizontalSubsampling"), 1);
}

BOOL CVPixelBufferBacking::isOpenGLESCompatibleFormat(CFDictionaryRef *this)
{
  return CFDictionaryGetValue(this[135], CFSTR("OpenGLESCompatibility")) == (const void *)*MEMORY[0x1E0C9AE50];
}

CVOpenGLESTextureBacking **CVPixelBufferBacking::createGLESTextureBackingForContext(CVPixelBufferBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  const __CFAllocator *v12;
  CVOpenGLESTextureBacking **result;
  uint64_t v14;

  if ((CVPixelBufferOpenGLESTextureBacking::isPixelBufferBackingSupported(this, a3, a3) & 1) != 0)
  {
    result = CVPixelBufferOpenGLESTextureBacking::alloc(a2, v12);
    if (result)
    {
      v14 = (uint64_t)result;
      result = (CVOpenGLESTextureBacking **)(*(uint64_t (**)(CVOpenGLESTextureBacking *, CVPixelBufferBacking *, CVOpenGLESContext *, const __CFDictionary *, CVImageBuffer *, int *))(*(_QWORD *)result[2] + 376))(result[2], this, a3, a4, a5, a6);
      if (result)
        return *(CVOpenGLESTextureBacking ***)(v14 + 16);
    }
  }
  else
  {
    result = 0;
    *a6 = -6683;
  }
  return result;
}

void pixelBufferBackingCreateIOSurfaceWiringAssertion(__IOSurface *a1, os_unfair_lock_t lock, uint64_t *a3, int *a4, int a5)
{
  uint64_t v10;
  int v11;
  const void *WiringAssertion;
  IOSurfaceID ID;

  if (a1)
  {
    os_unfair_lock_lock(lock);
    if (*a3 || (*a4 & 0xE) != 2)
    {
      if (!a5 || *a3 || *a4)
        goto LABEL_14;
      WiringAssertion = (const void *)IOSurfaceCreateWiringAssertion();
      if (WiringAssertion)
      {
        CFRelease(WiringAssertion);
        goto LABEL_14;
      }
      v11 = *a4;
    }
    else
    {
      v10 = IOSurfaceCreateWiringAssertion();
      *a3 = v10;
      v11 = *a4;
      if (v10)
      {
        *a4 = v11 | 4;
LABEL_14:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    *a4 = v11 | 8;
    ID = IOSurfaceGetID(a1);
    syslog(3, "CoreVideo: Failed to create wiring assertion for IOSurface ID 0x%x", ID);
    goto LABEL_14;
  }
}

BOOL CVPixelBufferBacking::hasIOSurfaceInNativeGLESPixelFormat(CVPixelBufferBacking *this)
{
  return *((_QWORD *)this + 57)
      && CFDictionaryGetValue(*((CFDictionaryRef *)this + 135), CFSTR("IOSurfaceOpenGLESTextureCompatibility")) == (const void *)*MEMORY[0x1E0C9AE50];
}

uint64_t CVPixelBufferBacking::provideImageData(CVPixelBufferBacking *this, char *a2, size_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(CVPixelBufferBacking *, _QWORD))(*(_QWORD *)this + 416))(this, 0);
  v13 = *((_QWORD *)this + 126);
  if (v13 == a3 && (unint64_t)(a7 + a4) <= *((_QWORD *)this + 23))
  {
    v16 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(_QWORD *)this + 320))(this, 1);
    memcpy(a2, (const void *)(a4 + a5 * a3 + v16), a7 * a3);
  }
  else
  {
    if (v13 >= a3)
      v14 = a3;
    else
      v14 = *((_QWORD *)this + 126);
    for (; a7; --a7)
    {
      v15 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(_QWORD *)this + 320))(this, 1);
      memcpy(a2, (const void *)(v15 + a4 + *((_QWORD *)this + 126) * a5), v14);
      a2 += a3;
      ++a5;
    }
  }
  (*(void (**)(CVPixelBufferBacking *, _QWORD))(*(_QWORD *)this + 424))(this, 0);
  return 1;
}

_QWORD *CVPixelBufferBacking::createCVBuffer(CVPixelBufferBacking *this, const __CFAllocator *a2)
{
  _QWORD *result;
  _QWORD *v4;

  if (!a2)
    return 0;
  result = CVPixelBuffer::alloc(a2, a2);
  if (result)
  {
    v4 = result;
    if ((*(uint64_t (**)(_QWORD, CVPixelBufferBacking *))(*(_QWORD *)result[2] + 248))(result[2], this))
      return v4;
    else
      return 0;
  }
  return result;
}

uint64_t CVPixelBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(CVPixelBufferBacking *this)
{
  if (*((_QWORD *)this + 57) && (*((_BYTE *)this + 488) & 4) != 0)
    return 1;
  else
    return CVBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(this);
}

void CVPixelBufferBacking::prefetchNonIOSurfacePages(CVPixelBufferBacking *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;

  if (sCVSetUpPageSizeOnce != -1)
    dispatch_once_f(&sCVSetUpPageSizeOnce, 0, (dispatch_function_t)cvSetUpPageSizeOnce);
  if (sPageSize
    && !(*(unsigned int (**)(CVPixelBufferBacking *, _QWORD))(*(_QWORD *)this + 416))(this, 0))
  {
    v2 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 304))(this);
    v3 = sPageSize;
    v4 = v2 - 1 + sPageSize;
    v5 = __CFADD__(v2 - 1, sPageSize);
    v6 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(_QWORD *)this + 320))(this, 1);
    if (!v5)
    {
      v7 = sPageSize;
      v8 = (_BYTE *)v6;
      v9 = v4 / v3;
      do
      {
        *v8 = 0;
        v8 += v7;
        --v9;
      }
      while (v9);
    }
    *(_BYTE *)((*(uint64_t (**)(CVPixelBufferBacking *))(*(_QWORD *)this + 304))(this) + v6 - 1) = 0;
    (*(void (**)(CVPixelBufferBacking *, _QWORD))(*(_QWORD *)this + 424))(this, 0);
  }
}

uint64_t cvSetUpPageSizeOnce(void *a1)
{
  uint64_t result;
  size_t v2;
  unsigned int v3;
  int v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = 0x700000006;
  v3 = 0;
  v2 = 8;
  result = sysctl(v4, 2u, &v3, &v2, 0, 0);
  sPageSize = v3;
  return result;
}

void CVPixelBufferBacking::prefetchPages(CVPixelBufferBacking *this)
{
  if (*((_QWORD *)this + 57))
    pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 1);
  else
    CVPixelBufferBacking::prefetchNonIOSurfacePages(this);
}

CFStringRef classCopyFormatDescription_CVPixelBufferBacking(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVPixelBufferBackingRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBufferBacking(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

uint64_t initPixelBufferBackingSummary(void)
{
  uint64_t result;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = CFPreferencesGetAppBooleanValue(CFSTR("backings_trace"), CFSTR("com.apple.corevideo"), 0);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v1 = 136315138;
      v2 = "CoreVideo: will trace total backings -- thank you for setting \"defaults write com.apple.corevideo backings_t"
           "race -BOOL YES\"";
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v1, 0xCu);
    }
    result = (uint64_t)CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B388]);
    gPixelBufferBackingSummaryBag = result;
  }
  return result;
}

CFStringRef copyBackingSummaryString(uint64_t a1, uint64_t a2, unsigned int a3, char a4, char a5, const __CFString *a6)
{
  unsigned int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  CFStringRef v17;
  char __str[4];
  char v20;

  v20 = 0;
  if (a3 == 32)
  {
    v11 = 1111970369;
  }
  else
  {
    if (a3 <= 0x63)
    {
      snprintf(__str, 5uLL, "%d", a3);
      goto LABEL_7;
    }
    v11 = bswap32(a3);
  }
  *(_DWORD *)__str = v11;
LABEL_7:
  v12 = "[C]";
  if ((a4 & 2) == 0)
    v12 = "";
  if ((a4 & 4) != 0)
    v13 = "[C:Cached]";
  else
    v13 = v12;
  if ((a5 & 2) != 0)
    v14 = "[W]";
  else
    v14 = "";
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a6)
  {
    v16 = CFStringCreateWithFormat(v15, 0, CFSTR(":%@"), a6);
    v17 = CFStringCreateWithFormat(v15, 0, CFSTR("%dx%dx%s%s%s%@"), a1, a2, __str, v13, v14, v16);
    if (!v16)
      return v17;
  }
  else
  {
    v16 = &stru_1E48A9A78;
    v17 = CFStringCreateWithFormat(v15, 0, CFSTR("%dx%dx%s%s%s%@"), a1, a2, __str, v13, v14, &stru_1E48A9A78);
  }
  CFRelease(v16);
  return v17;
}

void printPixelBufferBackingSummaryBag(const __CFBag *a1, unint64_t a2)
{
  const __CFBag *context;
  CFMutableStringRef theString;
  uint64_t v6;
  char v7;
  uint8_t buf[4];
  char *v9;
  char buffer[2000];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  context = a1;
  theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v6 = 0;
  v7 = 1;
  CFStringAppend(theString, CFSTR("CoreVideo: "));
  CFBagApplyFunction(a1, (CFBagApplierFunction)appendCountedStringToSummary, &context);
  if (v7)
    CFStringAppend(theString, CFSTR(" [no backings] "));
  CFStringAppendFormat(theString, 0, CFSTR(" %1.1f MiB"), (double)a2 * 0.000000953674316);
  CFStringGetCString(theString, buffer, 2000, 0x600u);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v9 = buffer;
    _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  CFRelease(theString);
}

void appendCountedStringToSummary(const void *a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;

  if ((const void *)a2[2] != a1)
  {
    v4 = MEMORY[0x1A858A3C4](*a2, a1);
    if (*((_BYTE *)a2 + 24))
      v5 = "";
    else
      v5 = ", ";
    CFStringAppendFormat((CFMutableStringRef)a2[1], 0, CFSTR("%s%dx%@"), v5, v4, a1);
    *((_BYTE *)a2 + 24) = 0;
    a2[2] = a1;
  }
}

void CVPixelBufferMetalTextureBacking::CVPixelBufferMetalTextureBacking(CVPixelBufferMetalTextureBacking *this, const void *a2)
{
  _QWORD *v2;

  CVMetalTextureBacking::CVMetalTextureBacking(this, a2);
  *v2 = off_1E48A3D00;
}

uint64_t CVPixelBufferMetalTextureBacking::finalize(CVPixelBufferMetalTextureBacking *this)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *((_QWORD *)this + 21);
  if (v2 && !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 424))(*((_QWORD *)this + 21), 0);
  v3 = (const void *)*((_QWORD *)this + 45);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 29);
  if (v4)
    CFRelease(v4);
  return CVMetalTextureBacking::finalize(this);
}

uint64_t CVMetalBufferCacheGetTypeID()
{
  if (CVMetalBufferCacheGetTypeID::once != -1)
    dispatch_once_f(&CVMetalBufferCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBufferCache);
  return kCVMetalBufferCacheID;
}

uint64_t classInitialize_CVMetalBufferCache(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVMetalBufferCacheID = result;
  return result;
}

CVBufferPool **CVMetalBufferCache::alloc(CVMetalBufferCache *this, const __CFAllocator *a2)
{
  CVBufferPool **v3;
  CVBufferPool **v4;
  _QWORD *v5;

  if (_cvUseTrackingAllocator)
    this = (CVMetalBufferCache *)_cvTrackingGetCFAllocator(CFSTR("CVMetalBufferCache"));
  if (CVMetalBufferCacheGetTypeID::once != -1)
    dispatch_once_f(&CVMetalBufferCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBufferCache);
  v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVMetalBufferCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x30uLL);
  v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    *v5 = off_1E48A3340;
    v5[4] = 0;
  }
  return v4;
}

void CVMetalBufferCache::CVMetalBufferCache(CVMetalBufferCache *this, const void *a2)
{
  _QWORD *v2;

  CVBufferPool::CVBufferPool(this, a2);
  *v2 = off_1E48A3340;
  v2[4] = 0;
}

uint64_t CVMetalBufferCache::finalize(CVMetalBufferCache *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
  {
    CFRetain(v2);
    *((_QWORD *)this + 4) = 0;
  }
  return CVBufferPool::finalize(this);
}

CFTypeRef *CVMetalBufferCache::initWithDevice(CFTypeRef *this, void *a2, const __CFDictionary *a3)
{
  CFTypeRef *v5;
  CFTypeID Value;
  unint64_t v7;
  unint64_t v8;
  double v9;
  const __CFNumber *v10;
  CFTypeID v11;
  double valuePtr;

  v5 = this;
  if (!CVBufferPool::init(this))
    return 0;
  Value = (CFTypeID)CFRetain(a2);
  v5[4] = (CFTypeRef)Value;
  valuePtr = 1.0;
  v9 = 1000000000.0;
  if (a3)
  {
    Value = (CFTypeID)CFDictionaryGetValue(a3, CFSTR("MaximumMetalBufferAge"));
    if (Value)
    {
      v10 = (const __CFNumber *)Value;
      v11 = CFGetTypeID((CFTypeRef)Value);
      Value = CFNumberGetTypeID();
      if (v11 == Value)
      {
        Value = CFNumberGetValue(v10, kCFNumberDoubleType, &valuePtr);
        HIDWORD(v8) = 1104006501;
        v7 = (unint64_t)(valuePtr * 1000000000.0);
        v9 = (double)v7;
      }
    }
  }
  if (!CVHostTimeBase::sIsInited)
    *(double *)&v7 = CVHostTimeBase::Initialize((CVHostTimeBase *)Value);
  LODWORD(v7) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v8) = CVHostTimeBase::sToNanosDenominator;
  v5[5] = (CFTypeRef)(v9 / (double)v7 * (double)v8);
  return v5;
}

uint64_t CVMetalBufferCache::flushBuffers(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  _QWORD **ValueAtIndex;

  v2 = this;
  if ((a2 & 1) != 0 || *(_QWORD *)(this + 40))
  {
    v3 = CVGetCurrentHostTime();
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    v4 = *(const __CFArray **)(*(_QWORD *)(v2 + 16) + 224);
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i < v6; ++i)
      {
        ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(v4, i);
        if (((*(uint64_t (**)(_QWORD *))(*ValueAtIndex[2] + 120))(ValueAtIndex[2]) & 1) != 0
          || *(_QWORD *)(v2 + 40) + ValueAtIndex[2][13] < v3)
        {
          CFArrayRemoveValueAtIndex(v4, i--);
          --v6;
        }
      }
    }
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  return this;
}

CVBuffer **CVMetalBufferCache::createBufferFromImage(CVBufferBacking **this, const __CFAllocator *a2, CVImageBuffer *a3, int *a4)
{
  CVMetalBufferBacking *v8;
  void *v9;
  CVMetalBufferBacking *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CVBuffer **v14;
  CVBuffer **v15;
  __CVBuffer *v16;
  int v17;

  v8 = (CVMetalBufferBacking *)(*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 160))(a3);
  if (!v8)
  {
    v15 = 0;
    v17 = -6661;
    goto LABEL_12;
  }
  v10 = v8;
  if (!CVMetalBufferBacking::isBufferBackingSupported(v8, this[4], v9))
  {
    v15 = 0;
    v17 = -6684;
    goto LABEL_12;
  }
  v11 = (*((uint64_t (**)(CVBufferBacking **, const __CFAllocator *, CVImageBuffer *, CVMetalBufferBacking *, int *))*this
         + 15))(this, a2, a3, v10, a4);
  if (v11)
  {
    v13 = v11;
    v14 = CVMetalBuffer::alloc(a2, v12);
    v15 = v14;
    if (v14)
    {
      if ((*(uint64_t (**)(CVBuffer *, uint64_t))(*(_QWORD *)v14[2] + 160))(v14[2], v13))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        v16 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)a3 + 24))(a3);
        CVBufferPropagateAttachments(v16, (CVBufferRef)v15);
        v17 = 0;
LABEL_12:
        *a4 = v17;
        return v15;
      }
      (*(void (**)(CVBuffer *))(*(_QWORD *)v15[2] + 40))(v15[2]);
      v15 = 0;
    }
    v17 = -6662;
    goto LABEL_12;
  }
  return 0;
}

_QWORD *CVMetalBufferCache::createBufferBackingFromImageBacking(CVMetalBufferCache *this, const __CFAllocator *a2, CVImageBuffer *a3, CVImageBacking *a4, int *a5)
{
  _QWORD *result;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  _QWORD **ValueAtIndex;
  const __CFArray *v17;
  CFIndex v18;
  const __CFAllocator *v19;
  CFIndex v20;
  CFIndex v21;
  CVBufferBacking **v22;

  result = (_QWORD *)(*(uint64_t (**)(CVImageBacking *))(*(_QWORD *)a4 + 152))(a4);
  if (!result)
  {
    *a5 = -6661;
    return result;
  }
  v11 = (uint64_t)result;
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  v12 = *(const __CFArray **)(*((_QWORD *)this + 2) + 224);
  Count = CFArrayGetCount(v12);
  if (Count < 1)
  {
LABEL_6:
    v17 = *(const __CFArray **)(*((_QWORD *)this + 2) + 232);
    v18 = CFArrayGetCount(v17);
    if (v18 < 1)
    {
LABEL_10:
      v22 = CVMetalBufferBacking::alloc(a2, v19);
      if (!v22)
      {
        *a5 = -6662;
        pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
        return 0;
      }
      ValueAtIndex = (_QWORD **)v22;
      if ((*(uint64_t (**)(CVBufferBacking *, CVImageBuffer *, CVImageBacking *, _QWORD))(*(_QWORD *)v22[2] + 176))(v22[2], a3, a4, *((_QWORD *)this + 4)))
      {
        (*(void (**)(_QWORD *, _QWORD))(*ValueAtIndex[2] + 96))(ValueAtIndex[2], *((_QWORD *)this + 2));
      }
      else
      {
        *a5 = -6662;
      }
    }
    else
    {
      v20 = v18;
      v21 = 0;
      while (1)
      {
        ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(v17, v21);
        if ((*(uint64_t (**)(_QWORD *))(*ValueAtIndex[2] + 200))(ValueAtIndex[2]) == v11)
          break;
        if (v20 == ++v21)
          goto LABEL_10;
      }
      (*(void (**)(_QWORD *))(*ValueAtIndex[2] + 32))(ValueAtIndex[2]);
    }
  }
  else
  {
    v14 = Count;
    v15 = 0;
    while (1)
    {
      ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(v12, v15);
      if ((*(uint64_t (**)(_QWORD *))(*ValueAtIndex[2] + 200))(ValueAtIndex[2]) == v11)
        break;
      if (v14 == ++v15)
        goto LABEL_6;
    }
    (*(void (**)(_QWORD *))(*ValueAtIndex[2] + 32))(ValueAtIndex[2]);
    CFArrayRemoveValueAtIndex(v12, v15);
  }
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return ValueAtIndex[2];
}

CFStringRef CVMetalBufferCache::copyDebugDescription(CVMetalBufferCache *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  CFStringRef v12;

  v2 = (const void *)(*(uint64_t (**)(CVMetalBufferCache *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVMetalBufferCache *))(*(_QWORD *)this + 24))(this);
  v6 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 2);
  v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    Count = -1;
  }
  v10 = *(const __CFArray **)(v7 + 224);
  if (v10)
    v11 = CFArrayGetCount(v10);
  else
    v11 = -1;
  v12 = CFStringCreateWithFormat(0, 0, CFSTR("<%@Ref %p maxAge=%llu inUse=%ld free=%ld>"), v4, v5, v6, Count, v11);
  CFRelease(v4);
  return v12;
}

uint64_t classFinalize_CVMetalBufferCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVMetalBufferCache(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVMetalBufferCacheRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalBufferCache(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

uint64_t CVBuffer::getAttachments(CVBuffer *this, unsigned int a2)
{
  if (a2 <= 1)
    return *((_QWORD *)this + a2 + 10);
  else
    return 0;
}

uint64_t CVBuffer::getBacking(CVBuffer *this)
{
  return 0;
}

uint64_t CVBuffer::dumpToQTES(CVBuffer *this, char *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t CVImageBuffer::getImageBacking(CVImageBuffer *this)
{
  return 0;
}

uint64_t CVImageBuffer::setColorSpace(CVImageBuffer *this, CGColorSpace *a2)
{
  return (*(uint64_t (**)(CVImageBuffer *, const __CFString *, CGColorSpace *, uint64_t))(*(_QWORD *)this
                                                                                                 + 104))(this, CFSTR("CGColorSpace"), a2, 1);
}

const void *CVImageBuffer::getColorSpace(CVImageBuffer *this)
{
  const void *v1;
  const void *v2;
  CFTypeID v3;

  v1 = (const void *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CGColorSpace"), 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 != CGColorSpaceGetTypeID())
    return 0;
  return v2;
}

uint64_t CVImageBuffer::setDisplayDimensions(CVImageBuffer *this, unint64_t a2, unint64_t a3)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t v6;
  double v8;
  double valuePtr;
  void *keys[2];
  void *values;
  CFTypeRef cf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = (double)a3;
  valuePtr = (double)a2;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  cf = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
  keys[0] = CFSTR("Width");
  keys[1] = CFSTR("Height");
  v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v6 = (*(uint64_t (**)(CVImageBuffer *, const __CFString *, CFDictionaryRef, uint64_t))(*(_QWORD *)this + 104))(this, CFSTR("CVDisplayDimensions"), v5, 1);
  CFRelease(v5);
  CFRelease(values);
  CFRelease(cf);
  return v6;
}

double CVImageBuffer::getDisplaySize(CVImageBuffer *this)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  CFTypeID v4;
  double v5;
  double v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CFTypeID v10;
  double v12;
  double v13;

  v2 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CVDisplayDimensions"), 0);
  if (v2 && (v3 = v2, v4 = CFGetTypeID(v2), v4 == CFDictionaryGetTypeID()))
  {
    v12 = 0.0;
    v13 = 0.0;
    if (cvGetDoubleFromDictionary(v3, CFSTR("Width"), &v13))
    {
      v5 = 0.0;
      if (cvGetDoubleFromDictionary(v3, CFSTR("Height"), &v12))
        return (float)v13;
    }
    else
    {
      return 0.0;
    }
  }
  else
  {
    v5 = (*(double (**)(CVImageBuffer *))(*(_QWORD *)this + 176))(this);
    if ((*(unsigned int (**)(CVImageBuffer *))(*(_QWORD *)this + 200))(this))
    {
      (*(void (**)(CVImageBuffer *))(*(_QWORD *)this + 192))(this);
      v5 = v7;
    }
    v8 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CVPixelAspectRatio"), 0);
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFDictionaryGetTypeID())
      {
        v12 = 1.0;
        v13 = 1.0;
        if (cvGetDoubleFromDictionary(v9, CFSTR("VerticalSpacing"), &v13))
        {
          if (cvGetDoubleFromDictionary(v9, CFSTR("HorizontalSpacing"), &v12)
            && v13 > 0.0
            && v12 > 0.0
            && v12 != v13)
          {
            return v5 * (v12 / v13);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t CVImageBuffer::setCleanAperture(CVImageBuffer *this, double a2, double a3, double a4, double a5)
{
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double valuePtr;
  void *keys[4];
  void *values;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  valuePtr = a2;
  v10 = a5;
  v11 = a4;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  v16 = CFNumberCreate(v6, kCFNumberDoubleType, &v12);
  v17 = CFNumberCreate(v6, kCFNumberDoubleType, &v11);
  v18 = CFNumberCreate(v6, kCFNumberDoubleType, &v10);
  keys[0] = CFSTR("Width");
  keys[1] = CFSTR("Height");
  keys[2] = CFSTR("HorizontalOffset");
  keys[3] = CFSTR("VerticalOffset");
  v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 4, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v8 = (*(uint64_t (**)(CVImageBuffer *, const __CFString *, CFDictionaryRef, uint64_t))(*(_QWORD *)this + 104))(this, CFSTR("CVCleanAperture"), v7, 1);
  CFRelease(v7);
  CFRelease(values);
  CFRelease(v16);
  CFRelease(v17);
  CFRelease(v18);
  return v8;
}

BOOL CVImageBuffer::hasCleanRect(CVImageBuffer *this)
{
  const void *v1;
  CFTypeID v2;
  _BOOL8 result;

  v1 = (const void *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CVCleanAperture"), 0);
  result = 0;
  if (v1)
  {
    v2 = CFGetTypeID(v1);
    if (v2 == CFDictionaryGetTypeID())
      return 1;
  }
  return result;
}

const __CFDictionary *CVImageBuffer::getCleanRect(CVImageBuffer *this)
{
  uint64_t v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFDictionary *result;
  const __CFDictionary *v7;
  CFTypeID v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v2 = (*(uint64_t (**)(CVImageBuffer *))(*(_QWORD *)this + 160))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v3 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CVCleanAperture"), 0);
  if (!v3
    || (v4 = v3, v5 = CFGetTypeID(v3), v5 != CFDictionaryGetTypeID())
    || (v11 = 0.0, v12 = 0.0, v9 = 0, v10 = 0.0, !cvGetDoubleFromDictionary(v4, CFSTR("Width"), &v12))
    || !cvGetDoubleFromDictionary(v4, CFSTR("Height"), &v11)
    || !cvGetDoubleFromDictionary(v4, CFSTR("HorizontalOffset"), &v10)
    || (result = (const __CFDictionary *)cvGetDoubleFromDictionary(v4, CFSTR("VerticalOffset"), (double *)&v9),
        !(_DWORD)result))
  {
    result = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CleanAperture"), 0);
    if (result)
    {
      v7 = result;
      v8 = CFGetTypeID(result);
      result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        v11 = 0.0;
        v12 = 0.0;
        v9 = 0;
        v10 = 0.0;
        result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, CFSTR("Width"), &v12);
        if ((_DWORD)result)
        {
          result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, CFSTR("Height"), &v11);
          if ((_DWORD)result)
          {
            result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, CFSTR("OffsetX"), &v10);
            if ((_DWORD)result)
              return (const __CFDictionary *)cvGetDoubleFromDictionary(v7, CFSTR("OffsetY"), (double *)&v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVImageBuffer::setPixelAspectRatio(CVImageBuffer *this, unint64_t a2, unint64_t a3)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t v6;
  double v8;
  double valuePtr;
  void *keys[2];
  void *values;
  CFTypeRef cf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = (double)a3;
  valuePtr = (double)a2;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  cf = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
  keys[0] = CFSTR("HorizontalSpacing");
  keys[1] = CFSTR("VerticalSpacing");
  v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v6 = (*(uint64_t (**)(CVImageBuffer *, const __CFString *, CFDictionaryRef, uint64_t))(*(_QWORD *)this + 104))(this, CFSTR("CVPixelAspectRatio"), v5, 1);
  CFRelease(v5);
  CFRelease(values);
  CFRelease(cf);
  return v6;
}

uint64_t CVImageBuffer::setFieldCount(CVImageBuffer *this, int a2)
{
  CFNumberRef v3;
  uint64_t v4;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v4 = (*(uint64_t (**)(CVImageBuffer *, const __CFString *, CFNumberRef, uint64_t))(*(_QWORD *)this + 104))(this, CFSTR("CVFieldCount"), v3, 1);
  CFRelease(v3);
  return v4;
}

void CVDataBufferBacking::CVDataBufferBacking(CVDataBufferBacking *this, const void *a2)
{
  uint64_t v2;

  CVBufferBacking::CVBufferBacking(this, a2);
  *(_QWORD *)v2 = off_1E48A33D0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_DWORD *)(v2 + 168) = 0;
}

uint64_t CVDataBufferBacking::finalize(CVDataBufferBacking *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 17) = 0;
  v3 = (const void *)*((_QWORD *)this + 22);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 20) = 0;
  return CVBufferBacking::finalize(this);
}

CVBufferBacking *CVDataBufferBacking::releaseUsage(CVDataBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 20);
  if (v2)
    IOSurfaceDecrementUseCount(v2);
  return CVBufferBacking::releaseUsage(this);
}

uint64_t CVDataBufferBacking::okToReuse(CVDataBufferBacking *this)
{
  __IOSurface *v2;

  v2 = (__IOSurface *)*((_QWORD *)this + 20);
  if (v2 && IOSurfaceIsInUse(v2))
    return 0;
  else
    return CVBufferBacking::okToReuse(this);
}

uint64_t CVDataBufferBacking::resetAgeForRemoteUsage(CVDataBufferBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (result)
  {
    if (*((_BYTE *)this + 113))
    {
LABEL_5:
      *((_QWORD *)this + 13) = -1;
      return result;
    }
    result = IOSurfaceIsInUse((IOSurfaceRef)result);
    if ((_DWORD)result)
    {
      *((_BYTE *)this + 112) = 1;
      goto LABEL_5;
    }
    if (*((_BYTE *)this + 112))
    {
      result = CVGetCurrentHostTime();
      *((_QWORD *)this + 13) = result;
      *((_BYTE *)this + 112) = 0;
    }
  }
  return result;
}

void CVDataBufferBacking::prefetchPages(CVDataBufferBacking *this)
{
  pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1);
}

CVBuffer **CVDataBufferBacking::createCVBuffer(CVDataBufferBacking *this, const __CFAllocator *a2)
{
  CVBuffer **result;
  CVBuffer **v4;

  if (!a2)
    return 0;
  result = CVDataBuffer::alloc(a2, a2);
  if (result)
  {
    v4 = result;
    if ((*(uint64_t (**)(CVBuffer *, CVDataBufferBacking *))(*(_QWORD *)result[2] + 160))(result[2], this))
      return v4;
    else
      return 0;
  }
  return result;
}

uint64_t CVDataBufferBacking::getDataBufferOptions(CVDataBufferBacking *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t CVDataBufferBacking::getDataFormatType(CVDataBufferBacking *this)
{
  return *((unsigned int *)this + 39);
}

void CVPixelBuffer::CVPixelBuffer(CVPixelBuffer *this, const void *a2)
{
  _QWORD *v3;

  CVImageBuffer::CVImageBuffer(this, a2);
  *v3 = off_1E48A2AD8;
  CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(0);
  *((_BYTE *)this + 104) = 1;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
}

uint64_t CVDEBUGPixelBufferGlobalCacheGetColorSpace()
{
  return sCVPixelBufferGlobalCache_ColorSpace;
}

uint64_t CVDEBUGPixelBufferGlobalCacheGetPropertyList()
{
  return sCVPixelBufferGlobalCache_CFPropertyList;
}

uint64_t CVPixelBuffer::getBacking(CVPixelBuffer *this)
{
  return *((_QWORD *)this + 15);
}

CFTypeRef CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(CGColorSpace *a1)
{
  CFTypeRef v2;
  CFPropertyListRef v3;

  pthread_mutex_lock(&sCVPixelBufferGlobalCache_Mutex);
  if ((CGColorSpace *)sCVPixelBufferGlobalCache_ColorSpace == a1
    || a1 && sCVPixelBufferGlobalCache_ColorSpace && CFEqual((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace, a1))
  {
    if (sCVPixelBufferGlobalCache_CFPropertyList)
      v2 = CFRetain((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
    else
      v2 = 0;
  }
  else
  {
    v3 = CGColorSpaceCopyPropertyList(a1);
    v2 = v3;
    if (a1 && v3)
    {
      CFRetain(a1);
      if (sCVPixelBufferGlobalCache_ColorSpace)
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      sCVPixelBufferGlobalCache_ColorSpace = (uint64_t)a1;
      CFRetain(v2);
      if (sCVPixelBufferGlobalCache_CFPropertyList)
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
      sCVPixelBufferGlobalCache_CFPropertyList = (uint64_t)v2;
    }
  }
  pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
  return v2;
}

void CVPixelBuffer::pushAttachmentsToIOSurface(CVPixelBuffer *this)
{
  uint64_t v2;
  __IOSurface *v3;
  const __CFDictionary *v4;
  int v5;
  int v6;
  unsigned int v7;
  __CFDictionary *Mutable;
  uint64_t v9;
  const CFDictionaryKeyCallBacks *v10;
  const CFDictionaryValueCallBacks *v11;
  const void *v12;
  __CFString *Value;
  __CFString *v14;
  const void *v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;
  _OWORD v19[7];
  int v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (v2)
  {
    v3 = (__IOSurface *)v2;
    v4 = (const __CFDictionary *)(*(uint64_t (**)(CVPixelBuffer *, uint64_t))(*(_QWORD *)this + 128))(this, 1);
    v5 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
    if (v5 >= 1)
    {
      v6 = v5;
      v7 = 0;
      Mutable = 0;
      v9 = 0;
      v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v18 = 0;
        v12 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
        Value = (__CFString *)CFDictionaryGetValue(v4, v12);
        if (Value)
        {
          v14 = Value;
          v15 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
          v16 = convertAttachmentToIOSurfaceStruct(v15, v14, (uint64_t)v19, &v18);
          v9 |= v18;
          if (!v16)
          {
            if (!Mutable)
              Mutable = CFDictionaryCreateMutable(0, 0, v10, v11);
            v17 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
            CVPixelBuffer::addIOSurfaceAttachmentToDictionary(this, Mutable, v17, (CGColorSpace *)v14);
          }
        }
        ++v7;
      }
      while (v6 != v7);
      if (v9)
        IOSurfaceSetBulkAttachments2();
      if (Mutable)
      {
        IOSurfaceSetValues(v3, Mutable);
        CFRelease(Mutable);
      }
    }
  }
}

CFStringRef CVPixelBuffer::copyDebugDescription(CVPixelBuffer *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  unsigned int v5;
  int v6;
  const __CFString *PoolName;
  __IOSurface *v8;
  __IOSurface *v9;
  uint64_t ID;
  const void *v11;
  const void *v12;
  __CFArray *Mutable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const __CFString *v20;
  CFStringRef v21;
  CFStringRef v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFStringRef v27;
  CFStringRef v28;
  uint64_t v29;
  CFStringRef v30;
  CFStringRef v31;
  CFStringRef v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  const __CFString *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  char __str[4];

  v2 = (const void *)(*(uint64_t (**)(CVPixelBuffer *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 192))(*((_QWORD *)this + 15));
  *(_DWORD *)__str = 0;
  v6 = _os_feature_enabled_impl();
  if (v5 > 0x28)
    *(_DWORD *)__str = bswap32(v5);
  else
    snprintf(__str, 4uLL, "%i", v5);
  PoolName = (const __CFString *)CVBufferBacking::getPoolName(*((CVBufferBacking **)this + 15));
  v8 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  v9 = v8;
  if (v8)
  {
    ID = IOSurfaceGetID(v8);
    if (v6)
    {
LABEL_6:
      v11 = (const void *)(*(uint64_t (**)(CVPixelBuffer *, uint64_t))(*(_QWORD *)this + 72))(this, 1);
      v12 = v11;
      goto LABEL_9;
    }
  }
  else
  {
    ID = 0;
    if (v6)
      goto LABEL_6;
  }
  v11 = 0;
  v12 = (const void *)*((_QWORD *)this + 11);
LABEL_9:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 15) + 312))(*((_QWORD *)this + 15)))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 344))(*((_QWORD *)this + 15));
    if (Mutable)
    {
      v15 = v14;
      v43 = v12;
      v16 = (*(uint64_t (**)(CVPixelBuffer *))(*(_QWORD *)this + 24))(this);
      v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 272))(*((_QWORD *)this + 15));
      v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 280))(*((_QWORD *)this + 15));
      v19 = " poolName=";
      if (!PoolName)
        v19 = "";
      v20 = &stru_1E48A9A78;
      if (PoolName)
        v20 = PoolName;
      v21 = CFStringCreateWithFormat(0, 0, CFSTR("<%@ %p width=%ld height=%ld pixelFormat=%.4s iosurface=%p surfaceid=%d planes=%ld%s%@>"), v4, v16, v17, v18, __str, v9, ID, v15, v19, v20);
      if (v21)
      {
        v22 = v21;
        CFArrayAppendValue(Mutable, v21);
        CFRelease(v22);
      }
      if (v15)
      {
        for (i = 0; i != v15; ++i)
        {
          v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), i);
          v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), i);
          v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), i);
          v27 = CFStringCreateWithFormat(0, 0, CFSTR("<Plane %ld width=%ld height=%ld bytesPerRow=%ld>"), i, v24, v25, v26);
          if (v27)
          {
            v28 = v27;
            CFArrayAppendValue(Mutable, v27);
            CFRelease(v28);
          }
        }
      }
      v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 256))(*((_QWORD *)this + 15));
      v30 = CFStringCreateWithFormat(0, 0, CFSTR("<attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v29, v43, *((_QWORD *)this + 10));
      if (v30)
      {
        v31 = v30;
        CFArrayAppendValue(Mutable, v30);
        CFRelease(v31);
      }
      v32 = CFStringCreateByCombiningStrings(0, Mutable, CFSTR("\n"));
      CFRelease(Mutable);
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v44 = (*(uint64_t (**)(CVPixelBuffer *))(*(_QWORD *)this + 24))(this);
    v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 272))(*((_QWORD *)this + 15));
    v33 = v11;
    v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 280))(*((_QWORD *)this + 15));
    v35 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
    v36 = v4;
    if (PoolName)
      v37 = " poolName=";
    else
      v37 = "";
    if (!PoolName)
      PoolName = &stru_1E48A9A78;
    v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 256))(*((_QWORD *)this + 15));
    v41 = v37;
    v4 = v36;
    v40 = v34;
    v11 = v33;
    v32 = CFStringCreateWithFormat(0, 0, CFSTR("<%@ %p width=%ld height=%ld bytesPerRow=%ld pixelFormat=%.4s iosurface=%p%s%@ surfaceid=%d attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>"), v36, v44, v42, v40, v35, __str, v9, v41, PoolName, ID, v38, v12, *((_QWORD *)this + 10));
  }
  CFRelease(v4);
  if (v11)
    CFRelease(v11);
  return v32;
}

void translateCoreVideoAttachmentKeyToIOSurfaceKeyAndStoreIt(const __CFString *a1, void *a2, CFDictionaryRef *a3)
{
  void *v4;
  const void *v6;
  const void *Value;
  const void *v8;
  const __CFDictionary *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  __CFDictionary *v13;
  CFTypeID TypeID;

  if (!a2)
    return;
  v4 = a2;
  v6 = CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a1);
  if (*a3)
  {
    Value = CFDictionaryGetValue(*a3, a1);
    v8 = Value;
    if (Value)
      CFRetain(Value);
    CFDictionaryRemoveValue(*a3, a1);
  }
  else
  {
    v8 = 0;
  }
  v9 = a3[1];
  if (!v9)
  {
    v11 = 0;
    if (v6)
      goto LABEL_11;
LABEL_14:
    v13 = a3[1];
    if (v13)
      CFDictionarySetValue(v13, a1, v4);
LABEL_16:
    v12 = 0;
    goto LABEL_20;
  }
  v10 = CFDictionaryGetValue(v9, a1);
  v11 = v10;
  if (v10)
    CFRetain(v10);
  CFDictionaryRemoveValue(a3[1], a1);
  if (!v6)
    goto LABEL_14;
LABEL_11:
  if ((const void *)*MEMORY[0x1E0CBBF90] != v6)
  {
    v12 = 0;
LABEL_19:
    CFDictionarySetValue(a3[2], v6, v4);
    goto LABEL_20;
  }
  TypeID = CGColorSpaceGetTypeID();
  if (TypeID != CFGetTypeID(v4))
    goto LABEL_16;
  v4 = (void *)CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace((CGColorSpace *)v4);
  v12 = v4;
  if (v4)
    goto LABEL_19;
LABEL_20:
  if (v8)
    CFRelease(v8);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
}

const void *CVPixelBuffer::copyAttachment(CVPixelBuffer *this, const __CFString *a2, CVAttachmentMode *a3)
{
  uint64_t v6;
  __IOSurface *v7;
  const __CFString *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  const void *v11;
  const void *Value;

  if (!_os_feature_enabled_impl())
    return CVBuffer::copyAttachment((CFDictionaryRef *)this, a2, a3);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (!v6)
    return CVBuffer::copyAttachment((CFDictionaryRef *)this, a2, a3);
  v7 = (__IOSurface *)v6;
  v8 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (v8)
  {
    v9 = IOSurfaceCopyValue(v7, v8);
    v10 = copyAttachmentDeserializedIfNecessary(v8, v9);
    if (v10)
    {
      v11 = v10;
      if (a3)
        *a3 = kCVAttachmentMode_ShouldPropagate;
      goto LABEL_16;
    }
  }
  else
  {
    v9 = 0;
  }
  Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
  if (Value)
  {
    v11 = Value;
    if (a3)
      *a3 = kCVAttachmentMode_ShouldPropagate;
LABEL_15:
    CFRetain(v11);
    goto LABEL_16;
  }
  v11 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
  if (v11)
  {
    if (a3)
      *a3 = kCVAttachmentMode_ShouldNotPropagate;
    goto LABEL_15;
  }
LABEL_16:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  if (v9)
    CFRelease(v9);
  return v11;
}

CFTypeRef copyAttachmentDeserializedIfNecessary(const __CFString *a1, CFTypeRef cf)
{
  CFTypeRef v4;
  int v5;
  CFTypeRef v6;
  CGColorSpaceRef v7;

  if (cf)
  {
    v4 = CFRetain(cf);
    if (!a1)
      return v4;
  }
  else
  {
    v4 = 0;
    if (!a1)
      return v4;
  }
  v5 = CFEqual((CFTypeRef)*MEMORY[0x1E0CBBF90], a1);
  if (!cf || !v5)
    return v4;
  pthread_mutex_lock(&sCVPixelBufferGlobalCache_Mutex);
  if ((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList == cf
    || sCVPixelBufferGlobalCache_CFPropertyList && CFEqual((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList, cf))
  {
    if (sCVPixelBufferGlobalCache_ColorSpace)
    {
      v6 = CFRetain((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
      if (!v6)
      {
LABEL_21:
        if (!v4)
          goto LABEL_23;
        goto LABEL_22;
      }
LABEL_20:
      CFRetain(v6);
      goto LABEL_21;
    }
  }
  else
  {
    v7 = CGColorSpaceCreateWithPropertyList(cf);
    if (v7)
    {
      v6 = v7;
      CFRetain(v7);
      if (sCVPixelBufferGlobalCache_ColorSpace)
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      sCVPixelBufferGlobalCache_ColorSpace = (uint64_t)v6;
      CFRetain(cf);
      if (sCVPixelBufferGlobalCache_CFPropertyList)
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
      sCVPixelBufferGlobalCache_CFPropertyList = (uint64_t)cf;
      pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
      goto LABEL_20;
    }
  }
  pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
  v6 = 0;
  if (v4)
LABEL_22:
    CFRelease(v4);
LABEL_23:
  if (v6)
    CFRelease(v6);
  return v6;
}

CFDictionaryRef CVPixelBuffer::copyAttachments(CVPixelBuffer *this, unsigned int a2)
{
  __IOSurface *v4;
  pthread_mutex_t *v5;
  CFDictionaryRef v6;
  const __CFDictionary *v7;
  CFDictionaryRef v8;
  const __CFDictionary *context;

  if (!_os_feature_enabled_impl())
    return CVBuffer::copyAttachments(this, a2);
  context = 0;
  v4 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  v5 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (a2 == 1 && v4 && (v6 = IOSurfaceCopyAllValues(v4)) != 0)
  {
    v7 = v6;
    context = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt, &context);
    CVBuffer::setAttachments(this, context, 1u);
    v8 = CVBuffer::copyAttachments(this, 1u);
    CFRelease(v7);
    if (context)
      CFRelease(context);
  }
  else
  {
    v8 = CVBuffer::copyAttachments(this, a2);
  }
  pthread_mutex_unlock(v5);
  return v8;
}

void translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt(const __CFString *a1, const void *a2, __CFDictionary **a3)
{
  __CFDictionary *v5;
  const void *v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;

  if (a2)
  {
    v5 = *a3;
    v6 = CVGetCVBufferAttachmentKeyForIOSurfacePropertyKey(a1);
    if (v6)
    {
      v7 = v6;
      v8 = copyAttachmentDeserializedIfNecessary(a1, a2);
      if (v8)
      {
        v9 = v8;
        CFDictionarySetValue(v5, v7, v8);
        CFRelease(v9);
      }
    }
  }
}

const void *CVPixelBuffer::getAttachment(CVPixelBuffer *this, const __CFString *a2, CVAttachmentMode *a3)
{
  uint64_t v6;
  __IOSurface *v7;
  const __CFString *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  const void *v11;
  const void *Value;
  const void *v14;

  if (!_os_feature_enabled_impl())
    return CVBuffer::getAttachment((CFDictionaryRef *)this, a2, a3);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (!v6)
    return CVBuffer::getAttachment((CFDictionaryRef *)this, a2, a3);
  v7 = (__IOSurface *)v6;
  v8 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (!v8)
  {
    v9 = 0;
LABEL_10:
    Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
    if (Value)
    {
      v11 = Value;
      if (a3)
        *a3 = kCVAttachmentMode_ShouldPropagate;
    }
    else
    {
      v14 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
      v11 = v14;
      if (a3 && v14)
        *a3 = kCVAttachmentMode_ShouldNotPropagate;
    }
    goto LABEL_16;
  }
  v9 = IOSurfaceCopyValue(v7, v8);
  v10 = copyAttachmentDeserializedIfNecessary(v8, v9);
  if (!v10)
    goto LABEL_10;
  v11 = v10;
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 11), a2, v10);
  if (a3)
    *a3 = kCVAttachmentMode_ShouldPropagate;
  CFRelease(v11);
LABEL_16:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  if (v9)
    CFRelease(v9);
  return v11;
}

uint64_t CVPixelBuffer::getAttachments(CVPixelBuffer *this, unsigned int a2)
{
  __IOSurface *v4;
  pthread_mutex_t *v5;
  CFDictionaryRef v6;
  const __CFDictionary *v7;
  uint64_t Attachments;
  const __CFDictionary *context;

  if (!_os_feature_enabled_impl())
    return CVBuffer::getAttachments(this, a2);
  context = 0;
  v4 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  v5 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (a2 == 1 && v4 && (v6 = IOSurfaceCopyAllValues(v4)) != 0)
  {
    v7 = v6;
    context = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt, &context);
    CVBuffer::setAttachments(this, context, 1u);
    Attachments = CVBuffer::getAttachments(this, 1u);
    CFRelease(v7);
    if (context)
      CFRelease(context);
  }
  else
  {
    Attachments = CVBuffer::getAttachments(this, a2);
  }
  pthread_mutex_unlock(v5);
  return Attachments;
}

BOOL CVPixelBuffer::hasAttachment(CVPixelBuffer *this, const __CFString *a2)
{
  uint64_t v4;
  __IOSurface *v5;
  const __CFString *v6;
  CFTypeRef v7;
  _BOOL8 v9;

  if (!_os_feature_enabled_impl())
    return CVBuffer::hasAttachment((CFDictionaryRef *)this, a2);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (!v4)
    return CVBuffer::hasAttachment((CFDictionaryRef *)this, a2);
  v5 = (__IOSurface *)v4;
  v6 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (v6 && (v7 = IOSurfaceCopyValue(v5, v6)) != 0)
  {
    CFRelease(v7);
  }
  else if (!CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2))
  {
    v9 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2) != 0;
    goto LABEL_10;
  }
  v9 = 1;
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  return v9;
}

uint64_t CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(uint64_t this)
{
  *(_BYTE *)(this + 104) = 0;
  return this;
}

uint64_t CVPixelBuffer::incrementUseCountForCategory(CVPixelBuffer *this, unsigned int a2)
{
  uint64_t result;
  BOOL v5;

  v5 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (result)
  {
    CVIncrementAtomicCounter((unsigned int *)this + a2 + 27, &v5);
    if (v5)
    {
      IOSurfaceIncrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVPixelBuffer::decrementUseCountForCategory(CVPixelBuffer *this, unsigned int a2)
{
  uint64_t result;
  BOOL v5;

  v5 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15));
  if (result)
  {
    CVDecrementAtomicCounter((unsigned int *)this + a2 + 27, &v5);
    if (v5)
    {
      IOSurfaceDecrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVPixelBuffer::dumpToQTES(CVPixelBuffer *this, char *a2)
{
  signed int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v13[5];
  _OWORD v14[2];
  uint64_t v15;
  _DWORD v16[5];
  _DWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 192))(*((_QWORD *)this + 15));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 416))(*((_QWORD *)this + 15), 1);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 312))(*((_QWORD *)this + 15));
  v6 = **((_QWORD **)this + 15);
  if (!v5)
  {
    v8 = 1;
    *(_QWORD *)&v14[0] = (*(uint64_t (**)(void))(v6 + 320))();
    v13[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
    v17[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 272))(*((_QWORD *)this + 15));
    v16[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 280))(*((_QWORD *)this + 15));
LABEL_8:
    v9 = dumpToQTESWithParams(a2, v4, v8, v17, v16, (uint64_t)v13, (uint64_t)v14, *((const __CFDictionary **)this + 11));
    goto LABEL_9;
  }
  v7 = (*(uint64_t (**)(void))(v6 + 344))();
  v8 = v7;
  if (v7 <= 5)
  {
    if (v7 >= 1)
    {
      v10 = 0;
      v11 = v7;
      do
      {
        *((_QWORD *)v14 + v10) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), v10, 1);
        v13[v10] = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), v10);
        v17[v10] = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), v10);
        v16[v10] = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), v10);
        ++v10;
      }
      while (v11 != v10);
    }
    goto LABEL_8;
  }
  v9 = 0;
LABEL_9:
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 424))(*((_QWORD *)this + 15), 1);
  return v9;
}

uint64_t CVPixelBuffer::drawColorBars(CVPixelBuffer *this)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  const char *v6;
  int v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t m;
  unint64_t v26;
  uint64_t n;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ii;
  unint64_t v33;
  uint64_t jj;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t kk;
  unint64_t v40;
  uint64_t mm;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t i1;
  unint64_t v50;
  uint64_t i2;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  unint64_t v68;
  uint64_t j;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _WORD *v75;
  unint64_t v76;
  unint64_t v77;
  _WORD *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t nn;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  int v86;
  float v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  float v92;
  unsigned int v93;
  __int16 v94;
  __int16 v95;
  int v97;
  __int16 v98;
  float v99;
  unsigned int v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  unint64_t v119;
  uint64_t k;
  int v121;
  float32x2_t v122;
  int32x2_t v123;
  uint64_t v124;
  _BYTE *v125;
  unint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  int v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  unint64_t v139;
  unint64_t v140;
  int8x16_t *v141;
  int v142;
  int32x2_t v143;
  unsigned int v144;
  float64x2_t v145;
  int32x4_t v146;
  uint32x4_t v147;
  int8x16_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  unint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 192))(*((_QWORD *)this + 15));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 272))(*((_QWORD *)this + 15));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 280))(*((_QWORD *)this + 15));
  v5 = (const void *)(*(uint64_t (**)(CVPixelBuffer *, const __CFString *, _QWORD))(*(_QWORD *)this + 96))(this, CFSTR("CVImageBufferYCbCrMatrix"), 0);
  v6 = (const char *)flt_1A2C7E680;
  if (v2 > 2016686639)
  {
    if (v2 > 2019963441)
    {
      if (v2 > 2033463855)
      {
        if (v2 == 2037741171)
          goto LABEL_44;
        if (v2 == 2037741158)
          goto LABEL_47;
        v7 = 2033463856;
        goto LABEL_43;
      }
      if (v2 != 2019963442 && v2 != 2019963956 && v2 != 2019964016)
        goto LABEL_61;
LABEL_28:
      if (v5 && CFEqual(v5, CFSTR("ITU_R_709_2")))
        v6 = (const char *)&unk_1A2C7E980;
      else
        v6 = (const char *)&unk_1A2C7E920;
      goto LABEL_61;
    }
    if (v2 <= 2016687155)
    {
      if (v2 != 2016686640 && v2 != 2016686642)
        goto LABEL_61;
    }
    else if (v2 != 2016687156 && v2 != 2016687216)
    {
      if (v2 != 2019963440)
        goto LABEL_61;
      goto LABEL_28;
    }
    if (v5 && CFEqual(v5, CFSTR("ITU_R_709_2")))
      v6 = (const char *)&unk_1A2C7E8C0;
    else
      v6 = (const char *)&unk_1A2C7E860;
    goto LABEL_61;
  }
  if (v2 <= 875704949)
  {
    if (v2 > 875704421)
    {
      if (v2 != 875704422)
      {
        if (v2 == 875704438)
          goto LABEL_44;
        if (v2 != 875704934)
          goto LABEL_61;
      }
LABEL_47:
      if (v5 && CFEqual(v5, CFSTR("ITU_R_709_2")))
        v6 = (const char *)&unk_1A2C7E800;
      else
        v6 = (const char *)&unk_1A2C7E7A0;
      goto LABEL_61;
    }
    if (v2 == 846624102)
      goto LABEL_47;
    v7 = 846624121;
LABEL_43:
    if (v2 != v7)
      goto LABEL_61;
    goto LABEL_44;
  }
  if (v2 <= 1630697080)
  {
    if (v2 != 875704950)
    {
      if (v2 != 875836518)
      {
        v7 = 875836534;
        goto LABEL_43;
      }
      goto LABEL_47;
    }
LABEL_44:
    if (v5 && CFEqual(v5, CFSTR("ITU_R_709_2")))
      v6 = "O@4Cp";
    else
      v6 = "P@4Cp";
    goto LABEL_61;
  }
  if (v2 == 1630697081)
    goto LABEL_44;
  if (v2 == 1714696752 || v2 == 1983000880)
    goto LABEL_47;
LABEL_61:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 416))(*((_QWORD *)this + 15), 0);
  v13 = 4294960633;
  if (v2 > 1630697080)
  {
    if (v2 > 2016687155)
    {
      if (v2 <= 2019963955)
      {
        v44 = v2 == 2016687156 || v2 == 2019963440;
        v45 = 2019963442;
LABEL_143:
        if (!v44 && v2 != v45)
          goto LABEL_211;
LABEL_148:
        v65 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
        v66 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 0, 1);
        if (v4)
        {
          for (i = 0; i != v4; ++i)
          {
            if (v3)
            {
              v68 = 0;
              for (j = 0; j != v3; ++j)
              {
                *(_WORD *)(v66 + 2 * j) = (unsigned __int16)(int)(*(float *)&v6[12 * (v68 / v3)] + 0.5) << 6;
                v68 += 8;
              }
            }
            v66 += v65 & 0xFFFFFFFFFFFFFFFELL;
          }
        }
        v70 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), 1);
        v71 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), 1);
        v72 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 1);
        v73 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 1, 1);
        if (v71)
        {
          v74 = 0;
          v75 = (_WORD *)(v73 + 2);
          do
          {
            if (v70)
            {
              v76 = 0;
              v77 = v70;
              v78 = v75;
              do
              {
                v79 = *(float *)&v6[12 * (int)(v76 / v70) + 8] + 0.5;
                *(v78 - 1) = (unsigned __int16)(int)(*(float *)&v6[4 * (int)(3 * (v76 / v70)) + 4] + 0.5) << 6;
                *v78 = (unsigned __int16)(int)v79 << 6;
                v78 += 2;
                v76 += 8;
                --v77;
              }
              while (v77);
            }
            ++v74;
            v75 = (_WORD *)((char *)v75 + (v72 & 0xFFFFFFFFFFFFFFFELL));
          }
          while (v74 != v71);
        }
        goto LABEL_210;
      }
      if (v2 > 2037741157)
      {
        if (v2 == 2037741158 || v2 == 2037741171)
        {
          v105 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
          v106 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
          if (v4)
          {
            v107 = 0;
            v108 = (_BYTE *)(v105 + 3);
            do
            {
              if (v3)
              {
                v109 = 0;
                v110 = 0;
                v111 = v108;
                do
                {
                  v112 = 3 * (v109 / v3);
                  *(v111 - 3) = (int)(*(float *)&v6[4 * v112] + 0.5);
                  *(v111 - 2) = (int)(*(float *)&v6[4 * v112 + 4] + 0.5);
                  *(v111 - 1) = (int)(*(float *)&v6[4 * v112] + 0.5);
                  *v111 = (int)(*(float *)&v6[12 * (int)(v109 / v3) + 8] + 0.5);
                  v111 += 4;
                  v110 += 2;
                  v109 += 16;
                }
                while (v3 > v110);
              }
              ++v107;
              v108 += v106;
            }
            while (v107 != v4);
          }
          goto LABEL_210;
        }
        goto LABEL_211;
      }
      if (v2 == 2019963956)
        goto LABEL_148;
      v22 = 2033463856;
      goto LABEL_92;
    }
    if (v2 > 1983000879)
    {
      if (v2 <= 2016686639)
      {
        if (v2 != 1983000880)
        {
          if (v2 != 1999843442)
            goto LABEL_211;
          goto LABEL_196;
        }
        v131 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
        v132 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
        if (v4)
        {
          v133 = 0;
          v134 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
          v135 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
          __asm { FMOV            V6.2D, #0.5 }
          do
          {
            if (v3)
            {
              v139 = 0;
              v140 = 0;
              v141 = (int8x16_t *)v132;
              do
              {
                v142 = 3 * (v139 / v3);
                v143 = *(int32x2_t *)&v6[4 * v142 + 4];
                v144 = ((int)(*(float *)&v6[4 * v142] * 1023.0 / 255.0 + 0.5) + 32) >> 6;
                v145 = vmulq_f64(vcvtq_f64_f32((float32x2_t)vrev64_s32(v143)), v134);
                if (v144 >= 0x3FF)
                  v144 = 1023;
                v146 = (int32x4_t)vcvtq_s64_f64(vaddq_f64(vdivq_f64(v145, v135), _Q6));
                *(uint32x2_t *)v146.i8 = vmin_u32(vshr_n_u32((uint32x2_t)vadd_s32(vmovn_s64((int64x2_t)v146), (int32x2_t)0x2000000020), 6uLL), (uint32x2_t)0x300000003);
                v147 = (uint32x4_t)vzip1q_s32(v146, vrev64q_s32(v146));
                v148 = (int8x16_t)vuzp2q_s32(v146, vzip1q_s32(v146, v146));
                LODWORD(v149) = v144 << 10;
                HIDWORD(v149) = v144;
                v148.i32[1] = v144 << 20;
                v148.i32[3] = v144 << 20;
                *v141++ = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v147, (uint32x4_t)xmmword_1A2C7E670), (int8x16_t)vdupq_lane_s64(v149, 0)), v148);
                v140 += 6;
                v139 += 48;
              }
              while (v3 > v140);
            }
            v13 = 0;
            v132 += v131;
            ++v133;
          }
          while (v133 != v4);
          goto LABEL_211;
        }
LABEL_210:
        v13 = 0;
        goto LABEL_211;
      }
      v44 = v2 == 2016686640;
      v45 = 2016686642;
      goto LABEL_143;
    }
    if (v2 != 1630697081)
    {
      if (v2 == 1647534392)
      {
LABEL_196:
        v113 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
        v114 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 0, 1);
        if (v4)
        {
          v115 = 0;
          v116 = (float64x2_t)vdupq_n_s64(0x407FF00000000000uLL);
          v117 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
          v118 = (float64x2_t)vdupq_n_s64(0x4078080000000000uLL);
          do
          {
            if (v3)
            {
              v119 = 0;
              for (k = 0; k != v3; ++k)
              {
                v121 = 3 * (v119 / v3);
                v122.i32[0] = *(_DWORD *)&v6[4 * v121 + 4];
                v122.i32[1] = *(_DWORD *)&v6[4 * v121];
                v123 = (int32x2_t)vshl_u32((uint32x2_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v122), v116), v117), v118))), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)(v114 + 4 * k) = vorr_s8((int8x8_t)v123, (int8x8_t)vdup_lane_s32(v123, 1)).u32[0] | (int)(*(float *)&v6[12 * (int)(v119 / v3) + 8] * 511.0 / 255.0 + 384.5);
                v119 += 8;
              }
            }
            v114 += v113;
            ++v115;
          }
          while (v115 != v4);
        }
        goto LABEL_210;
      }
      v22 = 1714696752;
LABEL_92:
      if (v2 == v22)
      {
        v23 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 0, 1);
        v24 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
        if (v4)
        {
          for (m = 0; m != v4; ++m)
          {
            if (v3)
            {
              v26 = 0;
              for (n = 0; n != v3; ++n)
              {
                *(_BYTE *)(v23 + n) = (int)(*(float *)&v6[12 * (v26 / v3)] + 0.5);
                v26 += 8;
              }
            }
            v23 += v24;
          }
        }
        v28 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), 1);
        v29 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), 1);
        v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 1);
        v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 1, 1);
        if (v29)
        {
          for (ii = 0; ii != v29; ++ii)
          {
            if (v28)
            {
              v33 = 0;
              for (jj = 0; jj != v28; ++jj)
              {
                *(_BYTE *)(v31 + jj) = (int)(*(float *)&v6[(uint64_t)(0x300000000 * (v33 / v28) + 0x100000000) >> 30]
                                           + 0.5);
                v33 += 8;
              }
            }
            v31 += v30;
          }
        }
        v35 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), 2);
        v36 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), 2);
        v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 2);
        v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 2, 1);
        if (v36)
        {
          for (kk = 0; kk != v36; ++kk)
          {
            if (v35)
            {
              v40 = 0;
              for (mm = 0; mm != v35; ++mm)
              {
                *(_BYTE *)(v38 + mm) = (int)(*(float *)&v6[(uint64_t)(0x300000000 * (v40 / v35) + 0x200000000) >> 30]
                                           + 0.5);
                v40 += 8;
              }
            }
            v38 += v37;
          }
        }
        goto LABEL_210;
      }
      goto LABEL_211;
    }
LABEL_140:
    v61 = **((_QWORD **)this + 15);
    if (v2 == 1630697081)
    {
      v62 = (*(uint64_t (**)(void))(v61 + 368))();
      v63 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
    }
    else
    {
      v62 = (*(uint64_t (**)(void))(v61 + 320))();
      v63 = 0;
    }
    if (v4)
    {
      v124 = 0;
      v125 = (_BYTE *)(v62 + 3);
      do
      {
        if (v3)
        {
          v126 = 0;
          v127 = 0;
          v128 = v125;
          do
          {
            v129 = 3 * (v126 / v3);
            *(v128 - 3) = (int)(*(float *)&v6[4 * v129 + 4] + 0.5);
            *(v128 - 2) = (int)(*(float *)&v6[4 * v129] + 0.5);
            *(v128 - 1) = (int)(*(float *)&v6[12 * (int)(v126 / v3) + 8] + 0.5);
            *v128 = (int)(*(float *)&v6[4 * v129] + 0.5);
            v128 += 4;
            v127 += 2;
            v126 += 16;
          }
          while (v3 > v127);
        }
        ++v124;
        v125 += v63;
      }
      while (v124 != v4);
    }
    goto LABEL_210;
  }
  if (v2 > 875704933)
  {
    if (v2 > 875836533)
    {
      if (v2 > 1380410944)
      {
        if (v2 == 1380410945)
        {
          v166 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
          v167 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
          if (!v4)
            goto LABEL_210;
          v168 = 0;
          v169 = v167 + 8;
          do
          {
            if (v3)
            {
              v170 = 0;
              v171 = v3;
              v172 = v169;
              do
              {
                v173 = 3 * (v170 / v3);
                *(float *)(v172 - 8) = *(float *)&v6[4 * v173] / 255.0;
                *(float *)(v172 - 4) = *(float *)&v6[4 * v173 + 4] / 255.0;
                *(float *)v172 = *(float *)&v6[12 * (int)(v170 / v3) + 8] / 255.0;
                *(_DWORD *)(v172 + 4) = 1065353216;
                v170 += 8;
                v172 += 16;
                --v171;
              }
              while (v171);
            }
            v13 = 0;
            ++v168;
            v169 += v166;
          }
          while (v168 != v4);
        }
        else
        {
          if (v2 != 1380411457)
            goto LABEL_211;
          v80 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
          v81 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
          if (!v4)
            goto LABEL_210;
          for (nn = 0; nn != v4; ++nn)
          {
            if (v3)
            {
              v83 = 0;
              v84 = 3;
              v85 = v3;
              do
              {
                v86 = 3 * (v83 / v3);
                v87 = *(float *)&v6[4 * v86] / 255.0;
                v88 = (LODWORD(v87) >> 23);
                v89 = 127 - v88;
                if ((int)(127 - v88) <= -15)
                  v89 = -15;
                v90 = 15360 - (v89 << 10);
                if (v88 < 0x70)
                  v90 = 0;
                v91 = HIWORD(LODWORD(v87)) & 0x8000 | (LODWORD(v87) >> 13) & 0x3FF | v90;
                v92 = *(float *)&v6[4 * v86 + 4] / 255.0;
                v93 = (LODWORD(v92) >> 23);
                v94 = 127 - v93;
                if ((int)(127 - v93) <= -15)
                  v94 = -15;
                v95 = 15360 - (v94 << 10);
                _CF = v93 >= 0x70;
                v97 = HIWORD(LODWORD(v92)) & 0x8000 | (LODWORD(v92) >> 13) & 0x3FF;
                if (_CF)
                  v98 = v95;
                else
                  v98 = 0;
                v99 = *(float *)&v6[12 * (int)(v83 / v3) + 8] / 255.0;
                v100 = (LODWORD(v99) >> 23);
                v101 = v97 | v98;
                if ((int)(127 - v100) <= -15)
                  v102 = -15;
                else
                  v102 = 127 - v100;
                v103 = 15360 - (v102 << 10);
                if (v100 < 0x70)
                  v103 = 0;
                *(_WORD *)(v81 + 2 * (v84 - 3)) = v91;
                *(_WORD *)(v81 + 2 * (v84 - 2)) = v101;
                *(_WORD *)(v81 + 2 * (v84 - 1)) = HIWORD(v99) & 0x8000 | (LODWORD(v99) >> 13) & 0x3FF | v103;
                *(_WORD *)(v81 + 2 * v84) = 15360;
                v83 += 8;
                v84 += 4;
                --v85;
              }
              while (v85);
            }
            v13 = 0;
            v81 += v80;
          }
        }
        goto LABEL_211;
      }
      if (v2 != 875836534)
      {
        if (v2 != 1111970369)
          goto LABEL_211;
        v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
        if (!v4)
          goto LABEL_210;
        v16 = 0;
        v17 = (_BYTE *)(v14 + 3);
        do
        {
          if (v3)
          {
            v18 = 0;
            v19 = v3;
            v20 = v17;
            do
            {
              v21 = 3 * (v18 / v3);
              *(v20 - 3) = (int)(flt_1A2C7E680[3 * (int)(v18 / v3) + 2] + 0.5);
              *(v20 - 2) = (int)(flt_1A2C7E680[v21 + 1] + 0.5);
              *(v20 - 1) = (int)(flt_1A2C7E680[v21] + 0.5);
              *v20 = -1;
              v20 += 4;
              v18 += 8;
              --v19;
            }
            while (v19);
          }
          v13 = 0;
          ++v16;
          v17 += v15;
        }
        while (v16 != v4);
        goto LABEL_211;
      }
LABEL_127:
      v47 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 0, 1);
      v48 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 0);
      if (v4)
      {
        for (i1 = 0; i1 != v4; ++i1)
        {
          if (v3)
          {
            v50 = 0;
            for (i2 = 0; i2 != v3; ++i2)
            {
              *(_BYTE *)(v47 + i2) = (int)(*(float *)&v6[12 * (v50 / v3)] + 0.5);
              v50 += 8;
            }
          }
          v47 += v48;
        }
      }
      v52 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15), 1);
      v53 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15), 1);
      v54 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15), 1);
      v55 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15), 1, 1);
      if (v53)
      {
        v56 = 0;
        v57 = (_BYTE *)(v55 + 1);
        do
        {
          if (v52)
          {
            v58 = 0;
            v59 = v52;
            v60 = v57;
            do
            {
              *(v60 - 1) = (int)(*(float *)&v6[4 * (int)(3 * (v58 / v52)) + 4] + 0.5);
              *v60 = (int)(*(float *)&v6[12 * (int)(v58 / v52) + 8] + 0.5);
              v60 += 2;
              v58 += 8;
              --v59;
            }
            while (v59);
          }
          ++v56;
          v57 += v54;
        }
        while (v56 != v53);
      }
      goto LABEL_210;
    }
    v42 = v2 == 875704934 || v2 == 875704950;
    v43 = 875836518;
LABEL_122:
    if (!v42 && v2 != v43)
      goto LABEL_211;
    goto LABEL_127;
  }
  if (v2 > 846624120)
  {
    if (v2 == 846624121)
      goto LABEL_140;
    v42 = v2 == 875704422;
    v43 = 875704438;
    goto LABEL_122;
  }
  switch(v2)
  {
    case 24:
      v150 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
      v151 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
      if (!v4)
        goto LABEL_210;
      v152 = 0;
      v153 = (_BYTE *)(v150 + 2);
      do
      {
        if (v3)
        {
          v154 = 0;
          v155 = v3;
          v156 = v153;
          do
          {
            v157 = 3 * (v154 / v3);
            *(v156 - 2) = (int)(flt_1A2C7E680[v157] + 0.5);
            *(v156 - 1) = (int)(flt_1A2C7E680[3 * (int)(v154 / v3) + 1] + 0.5);
            *v156 = (int)(flt_1A2C7E680[v157 + 2] + 0.5);
            v156 += 3;
            v154 += 8;
            --v155;
          }
          while (v155);
        }
        v13 = 0;
        ++v152;
        v153 += v151;
      }
      while (v152 != v4);
      break;
    case 32:
      v158 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15), 1);
      v159 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 296))(*((_QWORD *)this + 15));
      if (!v4)
        goto LABEL_210;
      v160 = 0;
      v161 = (_BYTE *)(v158 + 3);
      do
      {
        if (v3)
        {
          v162 = 0;
          v163 = v3;
          v164 = v161;
          do
          {
            *(v164 - 3) = -1;
            v165 = 3 * (v162 / v3);
            *(v164 - 2) = (int)(flt_1A2C7E680[v165] + 0.5);
            *(v164 - 1) = (int)(flt_1A2C7E680[3 * (int)(v162 / v3) + 1] + 0.5);
            *v164 = (int)(flt_1A2C7E680[v165 + 2] + 0.5);
            v164 += 4;
            v162 += 8;
            --v163;
          }
          while (v163);
        }
        v13 = 0;
        ++v160;
        v161 += v159;
      }
      while (v160 != v4);
      break;
    case 846624102:
      goto LABEL_140;
    default:
      break;
  }
LABEL_211:
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 15) + 424))(*((_QWORD *)this + 15), 0);
  return v13;
}

CFStringRef classCopyFormatDescription_CVPixelBuffer(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVPixelBufferRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBuffer(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void mergeCFDictionariesUnlessTheyConflict(const void *key, const void *a2, CFDictionaryRef *a3)
{
  const void *Value;
  const void *v7;
  const __CFString *v8;
  char buffer[300];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(*a3, key);
  if (Value)
  {
    v7 = Value;
    if (!CFEqual(Value, a2))
    {
      v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("CVPixelBufferCreateResolvedAttributesDictionary: conflict merging IOSurfaceProperties: key %@, values %@ and %@"), key, v7, a2);
      CFStringGetCString(v8, buffer, 300, 0x600u);
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", buffer);
      CFRelease(v8);
      *((_BYTE *)a3 + 8) = 1;
    }
  }
  else
  {
    CFDictionarySetValue(*a3, key, a2);
  }
}

void mergeCFDictionaries(const void *key, const void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

void *CVMTLBufferCreate(void *a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(a1, "newBufferWithIOSurface:", a2);
  objc_msgSend(v3, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CVMetalBuffer: %p"), a2));
  return v3;
}

uint64_t setRestrictions(int a1)
{
  return CVBitOrAtomic(a1, (unsigned int *)&sCVRestrictions);
}

uint64_t canRunMetal()
{
  return 1;
}

double CVImageBacking::getSize(CVImageBacking *this)
{
  return 0.0;
}

uint64_t CVImageBacking::provideImageData(CVImageBacking *this, void *a2)
{
  return 0;
}

uint64_t CVImageBacking::getPixelFormatType(CVImageBacking *this)
{
  return 32;
}

uint64_t CVImageBacking::setFlipped(uint64_t this, char a2)
{
  *(_BYTE *)(this + 144) = a2;
  return this;
}

uint64_t CVImageBacking::createGLESTextureBackingForContext(CVImageBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  *a6 = -6662;
  return 0;
}

uint64_t CVImageBacking::createTextureBackingForDevice(CVImageBacking *this, const __CFAllocator *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  *a6 = -6662;
  return 0;
}

uint64_t CVImageBacking::flushMetalTexture(CVImageBacking *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 20);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
    *((_QWORD *)this + 20) = 0;
  }
  return result;
}

double CVGetHostClockFrequency(void)
{
  CVHostTimeBase *v0;

  if (!CVHostTimeBase::sIsInited)
    CVHostTimeBase::Initialize(v0);
  return *(double *)&CVHostTimeBase::sFrequency;
}

uint32_t CVGetHostClockMinimumTimeDelta(void)
{
  CVHostTimeBase *v0;

  if (!CVHostTimeBase::sIsInited)
    CVHostTimeBase::Initialize(v0);
  return CVHostTimeBase::sMinDelta;
}

uint64_t CVLocklessBunchPairGetTypeID(void)
{
  if (CVLocklessBunchPairGetTypeID(void)::once != -1)
    dispatch_once_f(&CVLocklessBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLocklessBunchPair);
  return kCVLocklessBunchPairID;
}

uint64_t classInitialize_CVLocklessBunchPair(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVLocklessBunchPairID = result;
  return result;
}

void CVLocklessBunchPair::CVLocklessBunchPair(CVLocklessBunchPair *this, const void *a2)
{
  uint64_t v2;

  CVBunchPair::CVBunchPair(this, a2);
  *(_QWORD *)v2 = off_1E48A34B8;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_DWORD *)(v2 + 248) = 0;
}

uint64_t CVLocklessBunchPair::freeExcessBackingsNotInUse(CVLocklessBunchPair *this)
{
  _QWORD v2[4];

  v2[0] = (char *)this + 248;
  v2[1] = this;
  v2[2] = *((_QWORD *)this + 27);
  v2[3] = 1;
  return CVAtomicBunchApply(*((_QWORD *)this + 28), (uint64_t (*)(uint64_t, _QWORD))_freeExcessBackings, (uint64_t)v2);
}

uint64_t _freeExcessBackings(const void *a1, CVBufferBacking **a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (!CVBufferBacking::okToAgeOutBacking(a2[2]))
    return 0;
  v4 = 1;
  if (CVLocklessBunchPair::shouldFlush(*((CVLocklessBunchPair **)a1 + 1)))
  {
    (*(void (**)(CVBufferBacking *))(*(_QWORD *)a2[2] + 112))(a2[2]);
    *((_BYTE *)a1 + 24) = 1;
    v5 = (_QWORD *)*((_QWORD *)a1 + 2);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 96))(*((_QWORD *)a1 + 1)) + 1;
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 104))(*((_QWORD *)a1 + 1));
    CVTracePoolAction(1, v5, (_QWORD **)a2, "-> is in excess, freed.", v6, v7 - 1);
    CFRelease(a2);
    v8 = *(unsigned int **)a1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 - 0x1000000, v8));
    return 2;
  }
  return v4;
}

BOOL CVLocklessBunchPair::shouldFlush(CVLocklessBunchPair *this)
{
  unsigned int *v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;

  v2 = (unsigned int *)((char *)this + 248);
  while (1)
  {
    v8 = *((_DWORD *)this + 62);
    v7 = v8;
    v3 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(_QWORD *)this + 232))(this);
    v4 = (unsigned __int16)v8 - BYTE2(v8) + HIBYTE(v8);
    if (v3 > v4)
      v7 = v8 + 0x1000000;
    if (v8 == v7)
      break;
    while (1)
    {
      v5 = __ldxr(v2);
      if (v5 != v8)
        break;
      if (!__stxr(v7, v2))
        return v3 > v4;
    }
    __clrex();
  }
  return v3 > v4;
}

uint64_t CVLocklessBunchPair::consolidateBacking(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(CVLocklessBunchPair *, CVBufferBacking *, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, a2, 0, 0);
}

uint64_t CVLocklessBunchPair::tryToReuseABacking(CVLocklessBunchPair *this, CVBufferBacking **a2, int a3)
{
  CVBufferBacking *v4;
  CVBufferBacking **v6;
  unsigned int v7;
  int v8;

  v6 = 0;
  v7 = 0;
  v8 = a3;
  CVAtomicBunchApply(*((_QWORD *)this + 28), (uint64_t (*)(uint64_t, _QWORD))_tryToReuseABacking, (uint64_t)&v6);
  v4 = (CVBufferBacking *)v6;
  if (v6)
    v4 = v6[2];
  *a2 = v4;
  return v7;
}

uint64_t CVLocklessBunchPair::prefetchPages(CVLocklessBunchPair *this)
{
  return CVAtomicBunchApply(*((_QWORD *)this + 28), (uint64_t (*)(uint64_t, _QWORD))_prefetchPages, 0);
}

uint64_t _prefetchPages(const void *a1, _QWORD **a2)
{
  (*(void (**)(_QWORD *))(*a2[2] + 88))(a2[2]);
  return 0;
}

CFStringRef classCopyFormatDescription_CVLocklessBunchPair(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVLocklessBunchPairRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVLocklessBunchPair(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef description, OSType pixelFormat)
{
  void *v2;

  v2 = *(void **)&pixelFormat;
  if (!_pixelFormatDictionary)
    pthread_once(&once, _pixelFormatDictionaryInit);
  pthread_mutex_lock(&_pixelFormatMutex);
  registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(description, v2, (CFDictionaryRef)_pixelFormatDictionary, (__CFArray *)_pixelFormatTypes);
  pthread_mutex_unlock(&_pixelFormatMutex);
}

CFArrayRef CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(CFAllocatorRef allocator)
{
  const __CFArray *v2;

  v2 = (const __CFArray *)_pixelFormatTypes;
  if (_pixelFormatTypes)
    return CFArrayCreateCopy(allocator, v2);
  pthread_once(&once, _pixelFormatDictionaryInit);
  v2 = (const __CFArray *)_pixelFormatTypes;
  if (_pixelFormatTypes)
    return CFArrayCreateCopy(allocator, v2);
  else
    return 0;
}

uint64_t CVSetRestrictions(int a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (_pixelFormatTypes)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v2 = 136315138;
      v3 = "CVSetRestrictions called too late to be effective.";
      _os_log_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v2, 0xCu);
    }
    return 4294960636;
  }
  else
  {
    setRestrictions(a1);
    return 0;
  }
}

uint64_t CVPixelFormatTypeIsSubsampled(unsigned int a1)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFDictionary *Copy;
  const __CFDictionary *v3;
  const __CFArray *Value;
  const __CFArray *v5;
  CFTypeID v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  unsigned int v11;
  int NumberValueIfPresent;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v19;

  v19 = 0;
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a1);
  if (!DescriptionWithPixelFormatType)
    return 0;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DescriptionWithPixelFormatType);
  if (!Copy)
    return 0;
  v3 = Copy;
  Value = (const __CFArray *)CFDictionaryGetValue(Copy, CFSTR("Planes"));
  if (Value && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFArrayGetTypeID()) && CFArrayGetCount(v5) >= 1)
  {
    v7 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v7);
      if (ValueAtIndex)
      {
        v9 = ValueAtIndex;
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID()
          && (getNumberValueIfPresent(v9, CFSTR("HorizontalSubsampling"), &v19) && v19 > 1
           || getNumberValueIfPresent(v9, CFSTR("VerticalSubsampling"), &v19) && v19 > 1))
        {
          break;
        }
      }
      if (CFArrayGetCount(v5) <= ++v7)
        goto LABEL_14;
    }
    v11 = 1;
  }
  else
  {
LABEL_14:
    v11 = 0;
  }
  NumberValueIfPresent = getNumberValueIfPresent(v3, CFSTR("HorizontalSubsampling"), &v19);
  v13 = v19;
  if (getNumberValueIfPresent(v3, CFSTR("VerticalSubsampling"), &v19))
    v14 = v19 <= 1;
  else
    v14 = 1;
  v15 = !v14;
  if (NumberValueIfPresent)
    v16 = v13 <= 1;
  else
    v16 = 1;
  if (!v16)
    v15 = 1;
  if (v15)
    v17 = 1;
  else
    v17 = v11;
  CFRelease(v3);
  return v17;
}

uint64_t getNumberValueIfPresent(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  int ValueIfPresent;
  uint64_t result;
  CFTypeID v6;
  void *value;

  value = 0;
  ValueIfPresent = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  result = 0;
  if (ValueIfPresent && value)
  {
    v6 = CFGetTypeID(value);
    if (v6 == CFNumberGetTypeID())
      return CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
    else
      return 0;
  }
  return result;
}

Boolean CVIsCompressedPixelFormatAvailable(OSType pixelFormatType)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *v3;
  CFTypeID v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  int v8;

  v8 = 0;
  LODWORD(DescriptionWithPixelFormatType) = areUniversalCompressionFormatsSupported();
  if ((_DWORD)DescriptionWithPixelFormatType)
  {
    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
    if (DescriptionWithPixelFormatType)
    {
      DescriptionWithPixelFormatType = (const __CFDictionary *)CFDictionaryGetValue(DescriptionWithPixelFormatType, CFSTR("Planes"));
      if (DescriptionWithPixelFormatType)
      {
        v3 = DescriptionWithPixelFormatType;
        v4 = CFGetTypeID(DescriptionWithPixelFormatType);
        if (v4 != CFArrayGetTypeID())
          goto LABEL_8;
        DescriptionWithPixelFormatType = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
        if (DescriptionWithPixelFormatType)
        {
          v5 = DescriptionWithPixelFormatType;
          v6 = CFGetTypeID(DescriptionWithPixelFormatType);
          if (v6 == CFDictionaryGetTypeID())
          {
            getNumberValueIfPresent(v5, CFSTR("CompressionType"), &v8);
            LOBYTE(DescriptionWithPixelFormatType) = (v8 - 3) < 2;
            return DescriptionWithPixelFormatType;
          }
LABEL_8:
          LOBYTE(DescriptionWithPixelFormatType) = 0;
        }
      }
    }
  }
  return DescriptionWithPixelFormatType;
}

uint64_t CVBitAndAtomic(int a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;

_CVBitAndAtomic:
  v2 = *a2;
  do
  {
    v3 = __ldaxr(a2);
    if (v3 != (_DWORD)v2)
    {
      __clrex();
      goto _CVBitAndAtomic;
    }
  }
  while (__stlxr(v2 & a1, a2));
  return v2;
}

uint64_t CVIncrementAtomicCounter(unsigned int *a1, BOOL *a2)
{
  uint64_t result;
  unsigned int v4;

  while (1)
  {
    result = *a1;
    if ((_DWORD)result == -1)
      break;
    while (1)
    {
      v4 = __ldaxr(a1);
      if (v4 != (_DWORD)result)
        break;
      if (!__stlxr(result + 1, a1))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  *a2 = (_DWORD)result != -1;
  return result;
}

uint64_t classInitialize_CVDataBufferPool(void *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  kCVDataBufferPoolID = result;
  return result;
}

CVDataBufferPool **CVDataBufferPool::alloc(CVDataBufferPool *this, const __CFAllocator *a2)
{
  CVDataBufferPool **v3;
  CVDataBufferPool **v4;

  if (_cvUseTrackingAllocator)
    this = (CVDataBufferPool *)_cvTrackingGetCFAllocator(CFSTR("CVDataBufferPool"));
  if (CVDataBufferPoolGetTypeID::once != -1)
    dispatch_once_f(&CVDataBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBufferPool);
  v3 = (CVDataBufferPool **)CVObject::alloc((CVObject *)kCVDataBufferPoolID, (unint64_t)this, (const __CFAllocator *)0x18, 0x80uLL);
  v4 = v3;
  if (v3)
    CVDataBufferPool::CVDataBufferPool(v3[2], v3);
  return v4;
}

void CVDataBufferPool::CVDataBufferPool(CVDataBufferPool *this, const void *a2)
{
  uint64_t v3;

  CVBufferPool::CVBufferPool(this, a2);
  *(_QWORD *)v3 = off_1E48A2EE0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v3 + 56), 0);
  *((_DWORD *)this + 13) = 16;
  *((_QWORD *)this + 15) = malloc_type_calloc(1uLL, 0x100uLL, 0x10C004028F705ECuLL);
}

uint64_t CVDataBufferPool::finalize(CVDataBufferPool *this)
{
  const void *v2;
  const void *v3;
  void *v4;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
    free(v4);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  return CVBufferPool::finalize(this);
}

CFTypeRef *CVDataBufferPool::initWithSize(CFTypeRef *this, const __CFDictionary *a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, int *a6)
{
  CFTypeRef *v11;
  const __CFAllocator *v12;
  CFDictionaryRef Copy;
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID v16;
  uint64_t IntValueWithDefault;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  CFTypeRef v21;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  __CFDictionary *v26;
  __CFDictionary *v27;
  int v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char __str[4];
  char v34;
  double valuePtr[8];

  v11 = this;
  valuePtr[7] = *(double *)MEMORY[0x1E0C80C00];
  v12 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v11))
  {
    v11 = 0;
    *a6 = -6660;
    return v11;
  }
  (*((void (**)(CFTypeRef *, double))*v11 + 16))(v11, 1.0);
  if (a2)
  {
    Copy = CFDictionaryCreateCopy(v12, a2);
    v11[4] = Copy;
    if (!Copy)
      goto LABEL_23;
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("MaximumBufferAge"));
    if (Value)
    {
      v15 = Value;
      v16 = CFGetTypeID(Value);
      if (v16 != CFNumberGetTypeID())
        goto LABEL_25;
      valuePtr[0] = 0.0;
      CFNumberGetValue(v15, kCFNumberDoubleType, valuePtr);
      (*((void (**)(CFTypeRef *, double))*v11 + 16))(v11, valuePtr[0]);
    }
    IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, CFSTR("MinimumBufferCount"), 0);
    if (IntValueWithDefault)
      (*((void (**)(CFTypeRef *, uint64_t, _QWORD, _QWORD, _QWORD))*v11 + 18))(v11, IntValueWithDefault, 0, 0, *MEMORY[0x1E0C9AE00]);
    v18 = CFDictionaryGetValue(a2, CFSTR("DataBufferPoolName"));
    if (v18)
    {
      v19 = v18;
      v20 = CFGetTypeID(v18);
      if (v20 == CFStringGetTypeID())
      {
        CFRetain(v19);
        v21 = v11[3];
        if (v21)
          CFRelease(v21);
        v11[3] = v19;
        goto LABEL_14;
      }
LABEL_25:
      v28 = -6691;
      goto LABEL_26;
    }
  }
LABEL_14:
  if (!a4)
  {
LABEL_24:
    v28 = -6661;
    goto LABEL_26;
  }
  MutableCopy = CVDictionaryCreateMutableCopy(v12, a5);
  v11[5] = MutableCopy;
  if (!MutableCopy)
  {
LABEL_23:
    v28 = -6662;
LABEL_26:
    *a6 = v28;
LABEL_27:
    (*((void (**)(CFTypeRef *))*v11 + 5))(v11);
    return 0;
  }
  v23 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("IOSurfaceProperties"));
  v24 = v23;
  if (v23)
  {
    v25 = CFGetTypeID(v23);
    if (v25 != CFDictionaryGetTypeID())
      goto LABEL_24;
  }
  v26 = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v24);
  if (!v26)
    goto LABEL_23;
  v27 = v26;
  CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E0CBC1A8], (const void *)*MEMORY[0x1E0C9AE50]);
  CVDictionarySetSInt64Value(v27, (const void *)*MEMORY[0x1E0CBBEE0], a4);
  CVDictionarySetSInt32Value(v27, (const void *)*MEMORY[0x1E0CBC070], a3);
  CFDictionarySetValue((CFMutableDictionaryRef)v11[5], CFSTR("IOSurfaceProperties"), v27);
  *a6 = 0;
  if (CVTracePools(1))
  {
    v34 = 0;
    if (a3 > 0x63)
      *(_DWORD *)__str = bswap32(a3);
    else
      snprintf(__str, 5uLL, "%d", a3);
    snprintf((char *)valuePtr, 0x32uLL, "CVDataBuffer allocated (%lld, %s)", a4, __str);
    v30 = (_QWORD *)(*((uint64_t (**)(CFTypeRef *))*v11 + 3))(v11);
    v31 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v11[2] + 96))(v11[2]);
    v32 = (*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v11[2] + 104))(v11[2]);
    CVTracePoolAction(1, v30, 0, (const char *)valuePtr, v31, v32);
  }
  CFRelease(v27);
  if (*a6)
    goto LABEL_27;
  return v11;
}

uint64_t CVDataBufferPool::getAttributes(CVDataBufferPool *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t CVDataBufferPool::getDataBufferAttributes(CVDataBufferPool *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t CVDataBufferPool::setMaximumBufferAge(CVDataBufferPool *this, double a2)
{
  return (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2), a2);
}

uint64_t CVDataBufferPool::getMaximumBufferAge(CVDataBufferPool *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
}

uint64_t CVDataBufferPool::setMinimumBufferCount(CVDataBufferPool *this, uint64_t a2, const void *a3, int a4, const __CFAllocator *a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  BOOL v19;

  v10 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v11 = *((unsigned int *)this + 12);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)(*((_QWORD *)this + 15) + 8);
    v13 = *((unsigned int *)this + 12);
    while ((const void *)*(v12 - 1) != a3)
    {
      v12 += 2;
      if (!--v13)
        goto LABEL_5;
    }
    v17 = a2 - *v12;
    *v12 = a2;
  }
  else
  {
LABEL_5:
    v14 = (char *)*((_QWORD *)this + 15);
    if (*((_DWORD *)this + 13) == (_DWORD)v11)
    {
      v15 = v11 + 16;
      *((_DWORD *)this + 13) = v15;
      v14 = (char *)malloc_type_realloc(v14, 16 * v15, 0x10C004028F705ECuLL);
      *((_QWORD *)this + 15) = v14;
      v11 = *((unsigned int *)this + 12);
    }
    v16 = &v14[16 * v11];
    *(_QWORD *)v16 = a3;
    *((_QWORD *)v16 + 1) = a2;
    *((_DWORD *)this + 12) = v11 + 1;
    v17 = a2;
  }
  pthread_mutex_unlock(v10);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2), a2);
  if ((_DWORD)result)
    v19 = 1;
  else
    v19 = a4 == 0;
  if (!v19)
  {
    if (v17 < 1)
    {
      if (v17 < 0)
        (*(void (**)(CVDataBufferPool *, uint64_t))(*(_QWORD *)this + 184))(this, 1);
      return 0;
    }
    else
    {
      return (*(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t))(*(_QWORD *)this + 160))(this, a5, 1);
    }
  }
  return result;
}

uint64_t CVDataBufferPool::getMinimumBufferCount(CVDataBufferPool *this, const void *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(*((_QWORD *)this + 15) + 8);
    do
    {
      if ((const void *)*(v7 - 1) == a2)
        v6 = *v7;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t CVDataBufferPool::allocateNewBacking(CFDictionaryRef *this, const __CFAllocator *a2, uint64_t a3)
{
  CVBufferBacking **v5;
  CVBufferBacking **v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  uint64_t IntValueWithDefault;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;

  v16 = 0;
  v5 = CVDataBufferBacking::alloc(a2, a2);
  if (v5)
  {
    v6 = v5;
    Value = CFDictionaryGetValue(this[5], CFSTR("IOSurfaceProperties"));
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFDictionaryGetTypeID()))
    {
      IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v8, (const void *)*MEMORY[0x1E0CBC070], 0);
      v11 = CVDictionaryGetIntValueWithDefault(v8, (const void *)*MEMORY[0x1E0CBBEE0], 0);
    }
    else
    {
      IntValueWithDefault = 0;
      v11 = 0;
    }
    if ((*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFDictionaryRef, CFDictionaryRef, _QWORD, unsigned int *))(*(_QWORD *)v6[2] + 176))(v6[2], IntValueWithDefault, v11, this[5], this[4], 0, &v16))
    {
      v16 = (*(uint64_t (**)(CFDictionaryRef, CVBufferBacking *, _QWORD, uint64_t))(*(_QWORD *)this[2] + 112))(this[2], v6[2], 0, a3);
      if (v16)
      {
        CFRelease(v6);
      }
      else
      {
        v12 = (_QWORD *)(*((uint64_t (**)(CFDictionaryRef *))*this + 3))(this);
        v13 = (*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 96))(this[2]) + 1;
        v14 = (*(uint64_t (**)(CFDictionaryRef))(*(_QWORD *)this[2] + 104))(this[2]);
        CVTracePoolAction(1, v12, (_QWORD **)v6, "created", v13, v14 - 1);
      }
    }
  }
  else
  {
    return -6660;
  }
  return v16;
}

uint64_t CVDataBufferPool::assignNewBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __IOSurface *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFStringRef v12;
  CFStringRef v13;

  if (!a2)
    return 4294960635;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 208))(*(_QWORD *)(a2 + 16));
  if (!v4)
    return 4294960635;
  v5 = (__IOSurface *)v4;
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), 0, 0);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  CVTracePoolAction(1, v6, (_QWORD **)a2, "CVDataBuffer backing claimed", v7, v8);
  v9 = (const __CFString *)*MEMORY[0x1E0CBC048];
  v10 = (const __CFString *)IOSurfaceCopyValue(v5, (CFStringRef)*MEMORY[0x1E0CBC048]);
  v11 = v10;
  if (v10 && CFStringCompare(v10, CFSTR("CoreVideo"), 0))
    goto LABEL_9;
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Assigned-To-%@"), *(_QWORD *)(a1 + 24));
    if (v12)
    {
      v13 = v12;
      IOSurfaceSetValue(v5, v9, v12);
      CFRelease(v13);
    }
  }
  if (v11)
LABEL_9:
    CFRelease(v11);
  CVBufferBacking::setNeverAgeOutBacking(*(_QWORD *)(a2 + 16));
  return 0;
}

uint64_t CVDataBufferPool::preallocate(CVDataBufferPool *this, const __CFAllocator *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _opaque_pthread_t *v10;
  pthread_attr_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _QWORD v18[3];
  uint64_t v19;
  pthread_t v20;
  sched_param v21;
  int v22;
  pthread_attr_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  v6 = *((_QWORD *)this + 2);
  v18[0] = this;
  v18[1] = v6;
  v18[2] = a2;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 232))(v6);
  if (v7 >= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2)))
    return 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
  if (a3)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 224))(*((_QWORD *)this + 2));
    if (v8 <= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 232))(*((_QWORD *)this + 2)) + 1)
    {
      v9 = 0;
      a3 = 0;
    }
    else
    {
      v22 = 0;
      v23.__sig = 0x300000006;
      v21 = (sched_param)4;
      v9 = 0;
      if (sysctl((int *)&v23, 2u, &v22, (size_t *)&v21, 0, 0) < 0)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        if (v22 >= 2)
        {
          v10 = pthread_self();
          v22 = 0;
          if (pthread_getschedparam(v10, &v22, &v21))
          {
            v11 = 0;
          }
          else
          {
            v11 = &v23;
            pthread_attr_init(&v23);
            pthread_attr_setschedparam(&v23, &v21);
            pthread_attr_setschedpolicy(&v23, v22);
          }
          a3 = pthread_create(&v20, v11, (void *(__cdecl *)(void *))preAllocateThread, v18);
          v9 = 1;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  do
    v13 = (*(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t))(*(_QWORD *)this + 168))(this, a2, 1);
  while (!v13);
  v14 = v13;
  if (v13 == -6699)
    v12 = 0;
  else
    v12 = v13;
  if (a3)
    v15 = 0;
  else
    v15 = v9;
  if (v15 == 1)
  {
    pthread_join(v20, 0);
    v16 = v19;
    if ((_DWORD)v19 == -6699)
      v16 = 0;
    if (v14 == -6699)
      v12 = v16;
    else
      v12 = v14;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2));
  return v12;
}

uint64_t CVDataBufferPool::prefetchPages(CVDataBufferPool *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 264))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 168))(*((_QWORD *)this + 2));
  return 0;
}

CFStringRef CVDataBufferPool::copyDebugDescription(CVDataBufferPool *this)
{
  const void *v2;
  CFTypeID v3;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFStringRef v13;

  v2 = (const void *)(*(uint64_t (**)(CVDataBufferPool *))(*(_QWORD *)this + 24))(this);
  v3 = CFGetTypeID(v2);
  v4 = CFCopyTypeIDDescription(v3);
  v5 = (*(uint64_t (**)(CVDataBufferPool *))(*(_QWORD *)this + 24))(this);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = " name=";
  else
    v7 = "";
  if (v6)
    v8 = (const __CFString *)*((_QWORD *)this + 3);
  else
    v8 = &stru_1E48A9A78;
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v13 = CFStringCreateWithFormat(0, 0, CFSTR("< %@Ref %p%s%@ poolAttributes=%@ dataBufferAttributes=%@ inUse=%ld free=%ld>"), v4, v5, v7, v8, v9, v10, v11, v12);
  CFRelease(v4);
  return v13;
}

CVBunchPair **CVDataBufferPool::initBunchPair(CVDataBufferPool *this, const __CFAllocator *a2)
{
  CVBunchPair **result;
  CVBunchPair *v5;

  result = CVLocklessBunchPair::alloc(a2, a2);
  if (result)
  {
    v5 = result[2];
    *((_QWORD *)this + 2) = v5;
    return (CVBunchPair **)(*(uint64_t (**)(CVBunchPair *, _QWORD, const __CFAllocator *))(*(_QWORD *)v5 + 272))(v5, *((_QWORD *)this + 1), a2);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  return result;
}

uint64_t CVDataBufferPool::flush(CVDataBufferPool *this, char a2)
{
  uint64_t v2;

  v2 = 144;
  if ((a2 & 1) == 0)
    v2 = 136;
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 2) + v2))();
}

uint64_t scanIOSurfacesCallbackForCVDatabuffer(_QWORD *a1, _QWORD *a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))*a2)(*(_QWORD *)(a1[2] + 160), a2[1]);
}

uint64_t CVDataBufferPool::scanIOSurfaces(CVDataBufferPool *this, void (*a2)(__IOSurface *, void *), void *a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(_QWORD *, _QWORD *), _QWORD *))(**((_QWORD **)this + 2)
                                                                                                 + 248))(*((_QWORD *)this + 2), scanIOSurfacesCallbackForCVDatabuffer, v4);
}

uint64_t CVDataBufferPool::bufferBackingNotInUse(CVDataBufferPool *this, CVBufferBacking *a2)
{
  CVBufferPool::bufferBackingNotInUse(this, a2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
}

uint64_t classFinalize_CVDataBufferPool(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 16))(a1[2]);
}

CFStringRef classCopyFormatDescription_CVDataBufferPool(_QWORD *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  CFIndex v5;

  v4 = a1[2];
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, CFSTR("<CVDataBufferPoolRef %p obj=%p refcnt=%ld>"), a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVDataBufferPool(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
}

void CVAtomicBunchNew()
{
  __assert_rtn("CVAtomicBunchNew", "CVAtomicBunch.cpp", 501, "companionBunch->fillLevelPtr == &companionBunch->fillLevel");
}

void CVPixelBufferPool::initWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with NULL pixelBufferAttributes.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferWidthKey.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with kCVPixelBufferWidthKey value (%lld) <= 0.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferHeightKey.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with kCVPixelBufferHeightKey value (%lld) <= 0.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_1A2C42000, MEMORY[0x1E0C81028], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferPixelFormatTypeKey.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void _CVPixelBufferLayoutPlane()
{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 984, "(bytesPerLine % bytesPerBlock) == 0");
}

{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 983, "(bytesPerLine % scanlineAlignment) == 0");
}

{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 982, "(bytesPerLine % (bytesPerBlock*blockHAlign)) == 0");
}

void CVPixelBufferBacking::initWithPixelBufferDescription(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 134217984;
  v2 = a1;
  _os_log_error_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Invalid CVCustomMemoryLayoutCallBacks version (%lld).", (uint8_t *)&v1, 0xCu);
}

void CVPixelBufferBacking::initWithPixelBufferDescription()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Invalid CVCustomMemoryLayoutCallBacks.", v0, 2u);
}

void calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_fault_impl(&dword_1A2C42000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "CoreVideo: Failed to read HardwarePlatform, MG query returned NULL -- possible sandbox-related MG failure that could have other adverse effects", v0, 2u);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97E98](theBag, value);
}

void CFBagApplyFunction(CFBagRef theBag, CFBagApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97EA0](theBag, applier, context);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1E0C97EB8](allocator, capacity, callBacks);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1E0C97ED0](theBag, value);
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97EF8](theBag, value);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1E0C98380](type_id);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9BDC0](space);
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE10](nComponents, range, profile, alternate);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE58](ref);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE60](plist);
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1E0C9BEF8]();
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

uint64_t ColorSyncMakeProfile()
{
  return MEMORY[0x1E0C95450]();
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  return (CFDataRef)MEMORY[0x1E0C95460](prof);
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  return (ColorSyncMutableProfileRef)MEMORY[0x1E0C95480](prof);
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
  MEMORY[0x1E0C954B0](prof, header);
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
  MEMORY[0x1E0C954B8](prof, signature, data);
}

uint64_t IOSurfaceClearDataProperties()
{
  return MEMORY[0x1E0CBBAD8]();
}

CFDictionaryRef IOSurfaceCopyAllValues(IOSurfaceRef buffer)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBBAE0](buffer);
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBBAE8](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

uint64_t IOSurfaceCreateChildSurface()
{
  return MEMORY[0x1E0CBBAF8]();
}

uint64_t IOSurfaceCreateWiringAssertion()
{
  return MEMORY[0x1E0CBBB08]();
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBB18](buffer);
}

uint64_t IOSurfaceDecrementUseCountForCategory()
{
  return MEMORY[0x1E0CBBB20]();
}

uint64_t IOSurfaceGetAddressFormatOfPlane()
{
  return MEMORY[0x1E0CBBB30]();
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane()
{
  return MEMORY[0x1E0CBBB50]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x1E0CBBB58]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane()
{
  return MEMORY[0x1E0CBBB60]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CBBB68](buffer, planeIndex);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1E0CBBB70]();
}

uint64_t IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()
{
  return MEMORY[0x1E0CBBB78]();
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB80](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBB88](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBBA0](buffer, planeIndex);
}

uint64_t IOSurfaceGetCacheMode()
{
  return MEMORY[0x1E0CBBBB8]();
}

uint64_t IOSurfaceGetCompressedTileHeightOfPlane()
{
  return MEMORY[0x1E0CBBBC8]();
}

uint64_t IOSurfaceGetCompressedTileWidthOfPlane()
{
  return MEMORY[0x1E0CBBBD0]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1E0CBBBD8]();
}

size_t IOSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBBF0](buffer);
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBBF8](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC00](buffer);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC08](buffer, planeIndex);
}

uint64_t IOSurfaceGetExtendedPixelsOfPlane()
{
  return MEMORY[0x1E0CBBC10]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBC30]();
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC38](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

uint64_t IOSurfaceGetOffsetOfPlane()
{
  return MEMORY[0x1E0CBBC58]();
}

uint64_t IOSurfaceGetParentID()
{
  return MEMORY[0x1E0CBBC60]();
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC70](buffer);
}

uint64_t IOSurfaceGetProhibitUseCount()
{
  return MEMORY[0x1E0CBBC78]();
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x1E0CBBC90]();
}

uint64_t IOSurfaceGetSliceCount()
{
  return MEMORY[0x1E0CBBCB8]();
}

int32_t IOSurfaceGetUseCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCD0](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x1E0CBBCE8]();
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBCF0](buffer, planeIndex);
}

uint64_t IOSurfaceGetYCbCrMatrix()
{
  return MEMORY[0x1E0CBBCF8]();
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBD00](buffer);
}

uint64_t IOSurfaceIncrementUseCountForCategory()
{
  return MEMORY[0x1E0CBBD08]();
}

Boolean IOSurfaceIsInUse(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBD18](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

uint64_t IOSurfaceRemoveCoreVideoBridgedValues()
{
  return MEMORY[0x1E0CBBDE0]();
}

void IOSurfaceRemoveValue(IOSurfaceRef buffer, CFStringRef key)
{
  MEMORY[0x1E0CBBDE8](buffer, key);
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1E0CBBDF8]();
}

uint64_t IOSurfaceSetCoreVideoBridgedKeys()
{
  return MEMORY[0x1E0CBBE00]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

void IOSurfaceSetValues(IOSurfaceRef buffer, CFDictionaryRef keysAndValues)
{
  MEMORY[0x1E0CBBE48](buffer, keysAndValues);
}

uint64_t IOSurfaceSetYCbCrMatrix()
{
  return MEMORY[0x1E0CBBE50]();
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1E0CC69C8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82FA0](queue, context, work);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF0](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_trywrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

