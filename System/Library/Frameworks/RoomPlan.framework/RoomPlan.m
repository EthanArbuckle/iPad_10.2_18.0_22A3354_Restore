double WebCore::TransformationMatrix::scale(float64x2_t *this, double a2)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform(this, a2, a2);
  return result;
}

float64x2_t WebCore::TransformationMatrix::scaleNonUniform(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v3 = vmulq_n_f64(*this, a2);
  v4 = vmulq_n_f64(this[1], a2);
  *this = v3;
  this[1] = v4;
  result = vmulq_n_f64(this[2], a3);
  v6 = vmulq_n_f64(this[3], a3);
  this[2] = result;
  this[3] = v6;
  return result;
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotateFromVector(float64x2_t *this, long double a2, long double a3)
{
  long double v4;

  v4 = atan2(a3, a2);
  return WebCore::TransformationMatrix::rotate3d(this, 0.0, 0.0, v4 / 6.28318531 * 360.0);
}

float64x2_t WebCore::TransformationMatrix::flipX(float64x2_t *this)
{
  float64x2_t result;
  float64x2_t v2;

  result = vnegq_f64(*this);
  v2 = vnegq_f64(this[1]);
  *this = result;
  this[1] = v2;
  return result;
}

float64x2_t WebCore::TransformationMatrix::flipY(float64x2_t *this)
{
  float64x2_t result;
  float64x2_t v2;

  result = vnegq_f64(this[2]);
  v2 = vnegq_f64(this[3]);
  this[2] = result;
  this[3] = v2;
  return result;
}

float32x2_t WebCore::TransformationMatrix::projectPoint(float64x2_t *a1, float *a2, _BYTE *a3)
{
  double v3;
  float32x2_t result;
  double v5;
  double v6;
  double v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;

  if (a3)
    *a3 = 0;
  v3 = a1[5].f64[0];
  result = 0;
  if (v3 != 0.0)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = -(a1[7].f64[0] + a1[3].f64[0] * v6 + a1[1].f64[0] * v5) / v3;
    v8 = vaddq_f64(a1[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[2], v6), *a1, v5), a1[4], v7));
    v9 = a1[7].f64[1] + a1[3].f64[1] * v6 + v5 * a1[1].f64[1] + v7 * a1[5].f64[1];
    if (v9 <= 0.0)
    {
      v10.f64[0] = NAN;
      v10.f64[1] = NAN;
      v8 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v10), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v8);
      if (a3)
        *a3 = 1;
    }
    else if (v9 != 1.0)
    {
      v8 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
    }
    return vcvt_f32_f64(v8);
  }
  return result;
}

void WebCore::TransformationMatrix::projectQuad(float64x2_t *a1@<X0>, float *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int32 v8;
  int v9;
  int v10;
  unsigned __int32 v11;
  int v12;
  int v13;
  unsigned __int32 v14;
  int v15;
  int v16;
  unsigned __int32 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  __int16 v23;
  __int16 v24;

  v24 = 0;
  v23 = 0;
  v8 = WebCore::TransformationMatrix::projectPoint(a1, a2, (_BYTE *)&v24 + 1).u32[0];
  v10 = v9;
  v11 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 2, &v24).u32[0];
  v13 = v12;
  v14 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 4, (_BYTE *)&v23 + 1).u32[0];
  v16 = v15;
  v17 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 6, &v23).u32[0];
  v19 = HIBYTE(v24);
  v20 = v24;
  v21 = HIBYTE(v23);
  if (a3)
  {
    v22 = 1;
    if (!v24 && !HIBYTE(v23))
      v22 = (_BYTE)v23 != 0;
    *a3 = v22;
  }
  if (v19 && v20 && v21 && (_BYTE)v23)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(_DWORD *)a4 = v8;
    *(_DWORD *)(a4 + 4) = v10;
    *(_DWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 12) = v13;
    *(_DWORD *)(a4 + 16) = v14;
    *(_DWORD *)(a4 + 20) = v16;
    *(_DWORD *)(a4 + 24) = v17;
    *(_DWORD *)(a4 + 28) = v18;
  }
}

float WebCore::TransformationMatrix::mapPoint(double *a1, float *a2)
{
  float v4;

  if (!WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)a1))
    return WebCore::TransformationMatrix::internalMapPoint((WebCore::TransformationMatrix *)a1, a2);
  v4 = a1[12];
  return *a2 + v4;
}

{
  float v4;

  if (!WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)a1))
    return WebCore::TransformationMatrix::internalMapPoint((WebCore::TransformationMatrix *)a1, a2);
  v4 = a1[12];
  return *a2 + v4;
}

BOOL WebCore::TransformationMatrix::isIdentityOrTranslation(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

float WebCore::TransformationMatrix::internalMapPoint(WebCore::TransformationMatrix *a1, float *a2)
{
  uint64_t v3;
  double v4;

  v3 = 0;
  v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a1, *a2, a2[1], &v4, (double *)&v3);
  return v4;
}

{
  double v3;
  double v4;
  double v5;

  v5 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a1, *a2, a2[1], a2[2], &v5, &v4, &v3);
  return v5;
}

void WebCore::TransformationMatrix::mapQuad(WebCore::TransformationMatrix *this@<X0>, const WebCore::FloatQuad *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (WebCore::TransformationMatrix::isIdentityOrTranslation(this))
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v6;
    v7 = *((double *)this + 12);
    *(float *)&v7 = v7;
    *(float *)&v6 = *((double *)this + 13);
    WebCore::FloatQuad::move((float32x4_t *)a3, v7, *(float *)&v6);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(float *)a3 = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2);
    *(_DWORD *)(a3 + 4) = v8;
    *(float *)(a3 + 8) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 2);
    *(_DWORD *)(a3 + 12) = v9;
    *(float *)(a3 + 16) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 4);
    *(_DWORD *)(a3 + 20) = v10;
    *(float *)(a3 + 24) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 6);
    *(_DWORD *)(a3 + 28) = v11;
  }
}

float32x4_t WebCore::FloatQuad::move(float32x4_t *this, double a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;

  *((float *)&a2 + 1) = a3;
  v3 = (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v4 = vaddq_f32(*this, v3);
  result = vaddq_f32(this[1], v3);
  *this = v4;
  this[1] = result;
  return result;
}

float64x2_t WebCore::TransformationMatrix::scale3d(float64x2_t *this, double a2, double a3, double a4)
{
  float64x2_t *v4;
  float64x2_t result;
  float64x2_t v6;

  WebCore::TransformationMatrix::scaleNonUniform(this, a2, a3);
  result = vmulq_n_f64(v4[4], a4);
  v6 = vmulq_n_f64(v4[5], a4);
  v4[4] = result;
  v4[5] = v6;
  return result;
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotate3d(float64x2_t *this, double a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  double v9;
  double cosval;
  __double2 v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v22;
  __int128 v23;
  __int128 v24;
  double v25;
  __int128 v26;
  __int128 v27;
  double v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  float64x2x4_t v32;
  float64x2x4_t v33;
  float64x2x4_t v34;
  float64x2x4_t v35;

  v7 = sqrt(a3 * a3 + a2 * a2 + a4 * a4);
  if (v7 != 0.0)
  {
    v8 = a4;
    v9 = a3;
    if (v7 != 1.0)
    {
      a2 = a2 / v7;
      v9 = a3 / v7;
      v8 = a4 / v7;
    }
    v11 = __sincos_stret(a5 / 360.0 * 6.28318531);
    cosval = v11.__cosval;
    v24 = 0u;
    v23 = 0u;
    v26 = 0u;
    v27 = 0u;
    if (a2 == 1.0 && v9 == 0.0 && v8 == 0.0)
    {
      v22 = 1.0;
      v23 = 0uLL;
      v25 = v11.__cosval;
      *(double *)&v26 = v11.__sinval;
      *((double *)&v27 + 1) = -v11.__sinval;
    }
    else if (a2 == 0.0 && v9 == 1.0 && v8 == 0.0)
    {
      v22 = v11.__cosval;
      *((double *)&v23 + 1) = -v11.__sinval;
      v25 = 1.0;
      *(double *)&v27 = v11.__sinval;
    }
    else if (a2 == 0.0 && v9 == 0.0 && v8 == 1.0)
    {
      v22 = v11.__cosval;
      *(double *)&v23 = v11.__sinval;
      *((double *)&v24 + 1) = -v11.__sinval;
      v25 = v11.__cosval;
      v27 = 0uLL;
      cosval = 1.0;
    }
    else
    {
      v22 = v11.__cosval + a2 * a2 * (1.0 - v11.__cosval);
      *(double *)&v23 = v11.__sinval * v8 + a2 * v9 * (1.0 - v11.__cosval);
      *((double *)&v23 + 1) = -(v11.__sinval * v9 - a2 * v8 * (1.0 - v11.__cosval));
      *((double *)&v24 + 1) = -(v11.__sinval * v8 - a2 * v9 * (1.0 - v11.__cosval));
      v25 = v11.__cosval + v9 * v9 * (1.0 - v11.__cosval);
      *(double *)&v26 = v11.__sinval * a2 + v9 * v8 * (1.0 - v11.__cosval);
      *(double *)&v27 = v11.__sinval * v9 + a2 * v8 * (1.0 - v11.__cosval);
      *((double *)&v27 + 1) = -(v11.__sinval * a2 - v9 * v8 * (1.0 - v11.__cosval));
      cosval = v11.__cosval + v8 * v8 * (1.0 - v11.__cosval);
    }
    v28 = cosval;
    *(_QWORD *)&v24 = 0;
    v29 = 0u;
    v30 = 0u;
    v31 = 0x3FF0000000000000;
    v12 = &v22;
    v13 = *this;
    v14 = this[1];
    v15 = this[2];
    v16 = this[3];
    v17 = this[4];
    v18 = this[5];
    v19 = this[6];
    v20 = this[7];
    v34 = vld4q_dup_f64(v12);
    v12 += 4;
    v32 = vld4q_dup_f64(v12);
    v12 += 4;
    *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[0], *this), v34.val[1], v15), v34.val[2], v17), v34.val[3], v19);
    this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[0], v14), v34.val[1], v16), v34.val[2], v18), v34.val[3], v20);
    v35 = vld4q_dup_f64(v12);
    v12 += 4;
    this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v13), v32.val[1], v15), v32.val[2], v17), v32.val[3], v19);
    this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v14), v32.val[1], v16), v32.val[2], v18), v32.val[3], v20);
    v33 = vld4q_dup_f64(v12);
    this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[0], v13), v35.val[1], v15), v35.val[2], v17), v35.val[3], v19);
    this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[0], v14), v35.val[1], v16), v35.val[2], v18), v35.val[3], v20);
    this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33.val[0], v13), v33.val[1], v15), v33.val[2], v17), v33.val[3], v19);
    this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33.val[0], v14), v33.val[1], v16), v33.val[2], v18), v33.val[3], v20);
  }
  return (WebCore::TransformationMatrix *)this;
}

__n128 WebCore::TransformationMatrix::multiply(float64x2_t *this, const WebCore::TransformationMatrix *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  const double *v10;
  float64x2x4_t v12;
  float64x2x4_t v13;
  float64x2x4_t v14;
  float64x2x4_t v15;

  v2 = *this;
  v3 = this[1];
  v4 = this[2];
  v5 = this[3];
  v6 = this[4];
  v7 = this[5];
  v8 = this[6];
  v9 = this[7];
  v14 = vld4q_dup_f64((const double *)a2);
  v10 = (const double *)((char *)a2 + 32);
  v12 = vld4q_dup_f64(v10);
  v10 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], *this), v14.val[1], v4), v14.val[2], v6), v14.val[3], v8);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], v3), v14.val[1], v5), v14.val[2], v7), v14.val[3], v9);
  v15 = vld4q_dup_f64(v10);
  v10 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v2), v12.val[1], v4), v12.val[2], v6), v12.val[3], v8);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v3), v12.val[1], v5), v12.val[2], v7), v12.val[3], v9);
  v13 = vld4q_dup_f64(v10);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v2), v15.val[1], v4), v15.val[2], v6), v15.val[3], v8);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v3), v15.val[1], v5), v15.val[2], v7), v15.val[3], v9);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v2), v13.val[1], v4), v13.val[2], v6), v13.val[3], v8);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v3), v13.val[1], v5), v13.val[2], v7), v13.val[3], v9);
  return (__n128)v13.val[0];
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotate3d(float64x2_t *this, double a2, double a3, double a4)
{
  double v5;
  double v6;
  __double2 v7;
  __double2 v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  __double2 v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  const double *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  _BYTE v41[24];
  _BYTE v42[32];
  _BYTE v43[48];
  float64x2x4_t v44;
  float64x2x4_t v45;
  float64x2x4_t v46;
  float64x2x4_t v47;
  float64x2x4_t v48;
  float64x2x4_t v49;
  float64x2x4_t v50;
  float64x2x4_t v51;
  float64x2x4_t v52;
  float64x2x4_t v53;
  float64x2x4_t v54;
  float64x2x4_t v55;

  v5 = a2 / 360.0 * 6.28318531;
  v6 = a3 / 360.0 * 6.28318531;
  v7 = __sincos_stret(a4 / 360.0 * 6.28318531);
  v39.f64[0] = v7.__cosval;
  v39.f64[1] = v7.__sinval;
  *(double *)&v41[8] = -v7.__sinval;
  *(double *)&v41[16] = v7.__cosval;
  memset(&v43[8], 0, 32);
  *(_QWORD *)v43 = 0x3FF0000000000000;
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  v36 = *(float64x2_t *)v43;
  v37 = *(float64x2_t *)&v43[16];
  v38 = *(float64x2_t *)&v43[32];
  v31 = v39;
  v33 = *(float64x2_t *)&v41[8];
  v8 = __sincos_stret(v6);
  v39 = (float64x2_t)*(unint64_t *)&v8.__cosval;
  v40 = -v8.__sinval;
  *(_OWORD *)&v41[8] = xmmword_22655EF60;
  *(_OWORD *)&v42[16] = *(unint64_t *)&v8.__sinval;
  *(double *)v43 = v8.__cosval;
  *(_OWORD *)v42 = 0uLL;
  *(_QWORD *)v41 = 0;
  memset(&v43[8], 0, 32);
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  v9 = &v39;
  v10 = v31;
  v11 = v33;
  v12 = v36;
  v50 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  v44 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], v31), v50.val[1], v33), v50.val[2], (float64x2_t)0), v50.val[3], v37);
  v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], (float64x2_t)0), v50.val[1], (float64x2_t)0), v50.val[2], v36), v50.val[3], v38);
  v51 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], v10), v44.val[1], v33), v44.val[2], (float64x2_t)0), v44.val[3], v37);
  v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], (float64x2_t)0), v44.val[1], (float64x2_t)0), v44.val[2], v36), v44.val[3], v38);
  v45 = vld4q_dup_f64(v9->f64);
  v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], v10), v51.val[1], v11), v51.val[2], (float64x2_t)0), v51.val[3], v37);
  v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], (float64x2_t)0), v51.val[1], (float64x2_t)0), v51.val[2], v36), v51.val[3], v38);
  v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], v10), v45.val[1], v11), v45.val[2], (float64x2_t)0), v45.val[3], v37);
  v38 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], (float64x2_t)0), v45.val[1], (float64x2_t)0), v45.val[2], v12), v45.val[3], v38);
  v13 = __sincos_stret(v5);
  v40 = 0.0;
  v39 = (float64x2_t)0x3FF0000000000000uLL;
  *(double *)&v41[16] = v13.__cosval;
  *(double *)v42 = v13.__sinval;
  *(double *)&v42[24] = -v13.__sinval;
  *(double *)v43 = v13.__cosval;
  *(_OWORD *)&v42[8] = 0u;
  *(_OWORD *)v41 = 0u;
  memset(&v43[8], 0, 32);
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  v14 = v31;
  v15 = v32;
  v16 = v33;
  v17 = v34;
  v18 = v35;
  v19 = v36;
  v52 = vld4q_dup_f64(v39.f64);
  v20 = (const double *)&v41[8];
  v46 = vld4q_dup_f64(v20);
  v20 += 4;
  v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v31), v52.val[1], v33), v52.val[2], v35), v52.val[3], v37);
  v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v32), v52.val[1], v34), v52.val[2], v36), v52.val[3], v38);
  v53 = vld4q_dup_f64(v20);
  v20 += 4;
  v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v14), v46.val[1], v33), v46.val[2], v35), v46.val[3], v37);
  v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v15), v46.val[1], v34), v46.val[2], v36), v46.val[3], v38);
  v47 = vld4q_dup_f64(v20);
  v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v14), v53.val[1], v16), v53.val[2], v35), v53.val[3], v37);
  v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v15), v53.val[1], v17), v53.val[2], v36), v53.val[3], v38);
  v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v14), v47.val[1], v16), v47.val[2], v18), v47.val[3], v37);
  v38 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v15), v47.val[1], v17), v47.val[2], v19), v47.val[3], v38);
  v21 = *this;
  v22 = this[1];
  v23 = this[2];
  v24 = this[3];
  v25 = this[4];
  v26 = this[5];
  v27 = this[6];
  v28 = this[7];
  v54 = vld4q_dup_f64(v31.f64);
  v29 = &v33;
  v48 = vld4q_dup_f64(v29->f64);
  v29 += 2;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], *this), v54.val[1], v23), v54.val[2], v25), v54.val[3], v27);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], v22), v54.val[1], v24), v54.val[2], v26), v54.val[3], v28);
  v55 = vld4q_dup_f64(v29->f64);
  v29 += 2;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v21), v48.val[1], v23), v48.val[2], v25), v48.val[3], v27);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v22), v48.val[1], v24), v48.val[2], v26), v48.val[3], v28);
  v49 = vld4q_dup_f64(v29->f64);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v21), v55.val[1], v23), v55.val[2], v25), v55.val[3], v27);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v22), v55.val[1], v24), v55.val[2], v26), v55.val[3], v28);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v21), v49.val[1], v23), v49.val[2], v25), v49.val[3], v27);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v22), v49.val[1], v24), v49.val[2], v26), v49.val[3], v28);
  return (WebCore::TransformationMatrix *)this;
}

float64x2_t WebCore::TransformationMatrix::translate(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v3 = vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2);
  v4 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  result = vaddq_f64(this[6], v3);
  v6 = vaddq_f64(this[7], v4);
  this[6] = result;
  this[7] = v6;
  return result;
}

float64x2_t WebCore::TransformationMatrix::translate3d(float64x2_t *this, double a2, double a3, double a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t result;
  float64x2_t v7;

  v4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2), this[4], a4);
  v5 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  result = vaddq_f64(this[6], v4);
  v7 = vaddq_f64(this[7], vmlaq_n_f64(v5, this[5], a4));
  this[6] = result;
  this[7] = v7;
  return result;
}

double WebCore::TransformationMatrix::translateRight(WebCore::TransformationMatrix *this, double result, double a3)
{
  double v3;
  double v4;
  double v5;

  if (result != 0.0)
  {
    v3 = *((double *)this + 4);
    *(double *)this = *(double *)this + *((double *)this + 3) * result;
    v4 = *((double *)this + 8);
    *((double *)this + 4) = v3 + *((double *)this + 7) * result;
    v5 = *((double *)this + 12);
    *((double *)this + 8) = v4 + *((double *)this + 11) * result;
    result = v5 + *((double *)this + 15) * result;
    *((double *)this + 12) = result;
  }
  if (a3 != 0.0)
  {
    *((double *)this + 1) = *((double *)this + 1) + *((double *)this + 3) * a3;
    *((double *)this + 5) = *((double *)this + 5) + *((double *)this + 7) * a3;
    *((double *)this + 9) = *((double *)this + 9) + *((double *)this + 11) * a3;
    result = *((double *)this + 13) + *((double *)this + 15) * a3;
    *((double *)this + 13) = result;
  }
  return result;
}

void WebCore::TransformationMatrix::translateRight3d(WebCore::TransformationMatrix *this, double a2, double a3, double a4)
{
  double *v5;

  WebCore::TransformationMatrix::translateRight(this, a2, a3);
  if (a4 != 0.0)
  {
    v5[2] = v5[2] + v5[3] * a4;
    v5[6] = v5[6] + v5[7] * a4;
    v5[10] = v5[10] + v5[11] * a4;
    v5[14] = v5[14] + v5[15] * a4;
  }
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::skew(float64x2_t *this, double a2, double a3)
{
  long double v4;
  const double *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  _QWORD v15[6];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  float64x2x4_t v22;
  float64x2x4_t v23;
  float64x2x4_t v24;
  float64x2x4_t v25;

  v4 = a2 / 360.0 * 6.28318531;
  v15[0] = 0x3FF0000000000000;
  v15[2] = 0;
  v15[3] = 0;
  v15[5] = 0x3FF0000000000000;
  v16 = 0u;
  v17 = 0u;
  v18 = 0x3FF0000000000000;
  v19 = 0u;
  v20 = 0u;
  v21 = 0x3FF0000000000000;
  v15[1] = tan(a3 / 360.0 * 6.28318531);
  v15[4] = tan(v4);
  v5 = (const double *)v15;
  v6 = *this;
  v7 = this[1];
  v8 = this[2];
  v9 = this[3];
  v10 = this[4];
  v11 = this[5];
  v12 = this[6];
  v13 = this[7];
  v24 = vld4q_dup_f64(v5);
  v5 += 4;
  v22 = vld4q_dup_f64(v5);
  v5 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], *this), v24.val[1], v8), v24.val[2], v10), v24.val[3], v12);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v7), v24.val[1], v9), v24.val[2], v11), v24.val[3], v13);
  v25 = vld4q_dup_f64(v5);
  v5 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v6), v22.val[1], v8), v22.val[2], v10), v22.val[3], v12);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v7), v22.val[1], v9), v22.val[2], v11), v22.val[3], v13);
  v23 = vld4q_dup_f64(v5);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v6), v25.val[1], v8), v25.val[2], v10), v25.val[3], v12);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v7), v25.val[1], v9), v25.val[2], v11), v25.val[3], v13);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v6), v23.val[1], v8), v23.val[2], v10), v23.val[3], v12);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v7), v23.val[1], v9), v23.val[2], v11), v23.val[3], v13);
  return (WebCore::TransformationMatrix *)this;
}

__n128 WebCore::TransformationMatrix::applyPerspective(float64x2_t *this, double a2)
{
  const double *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  float64x2x4_t v22;
  float64x2x4_t v23;
  float64x2x4_t v24;
  float64x2x4_t v25;

  v13 = 0u;
  v14 = 0u;
  v15 = 0x3FF0000000000000;
  v16 = 0u;
  v17 = 0u;
  v18 = 0x3FF0000000000000;
  v19 = 0u;
  v20 = 0u;
  v21 = 0x3FF0000000000000;
  if (a2 != 0.0)
    *(double *)&v19 = -1.0 / a2;
  v2 = (const double *)&v12;
  v3 = *this;
  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = this[4];
  v8 = this[5];
  v9 = this[6];
  v10 = this[7];
  v24 = vld4q_dup_f64(v2);
  v2 += 4;
  v22 = vld4q_dup_f64(v2);
  v2 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], *this), v24.val[1], v5), v24.val[2], v7), v24.val[3], v9);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v4), v24.val[1], v6), v24.val[2], v8), v24.val[3], v10);
  v25 = vld4q_dup_f64(v2);
  v2 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v3), v22.val[1], v5), v22.val[2], v7), v22.val[3], v9);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v4), v22.val[1], v6), v22.val[2], v8), v22.val[3], v10);
  v23 = vld4q_dup_f64(v2);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v3), v25.val[1], v5), v25.val[2], v7), v25.val[3], v9);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v4), v25.val[1], v6), v25.val[2], v8), v25.val[3], v10);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v3), v23.val[1], v5), v23.val[2], v7), v23.val[3], v9);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v4), v23.val[1], v6), v23.val[2], v8), v23.val[3], v10);
  return (__n128)v23.val[0];
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double *a4, double *a5)
{
  double result;

  *a4 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4);
  *a5 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5);
  result = *((double *)this + 15) + a2 * *((double *)this + 3) + a3 * *((double *)this + 7);
  if (result != 1.0 && result != 0.0)
  {
    *a4 = *a4 / result;
    result = *a5 / result;
    *a5 = result;
  }
  return result;
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double a4, double *a5, double *a6, double *a7)
{
  double result;

  *a5 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4) + a4 * *((double *)this + 8);
  *a6 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5) + a4 * *((double *)this + 9);
  *a7 = *((double *)this + 14) + a2 * *((double *)this + 2) + a3 * *((double *)this + 6) + a4 * *((double *)this + 10);
  result = *((double *)this + 15)
         + a2 * *((double *)this + 3)
         + a3 * *((double *)this + 7)
         + a4 * *((double *)this + 11);
  if (result != 1.0 && result != 0.0)
  {
    *a5 = *a5 / result;
    *a6 = *a6 / result;
    result = *a7 / result;
    *a7 = result;
  }
  return result;
}

BOOL WebCore::TransformationMatrix::isInvertible(WebCore::TransformationMatrix *this)
{
  const double (*v2)[4][4];

  return WebCore::TransformationMatrix::isIdentityOrTranslation(this)
      || fabs(WebCore::determinant4x4(this, v2)) >= 0.00000001;
}

double WebCore::determinant4x4(WebCore *this, const double (*a2)[4][4])
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *((double *)this + 4);
  v3 = *((double *)this + 5);
  v4 = *((double *)this + 6);
  v5 = *((double *)this + 7);
  v6 = *((double *)this + 8);
  v7 = *((double *)this + 9);
  v8 = *((double *)this + 10);
  v9 = *((double *)this + 11);
  v10 = *((double *)this + 12);
  v11 = *((double *)this + 13);
  v12 = *((double *)this + 14);
  v13 = *((double *)this + 15);
  v14 = v8 * v13 - v12 * v9;
  return *(double *)this * (v3 * v14 - (v7 * v13 - v11 * v9) * v4 + v5 * (v7 * v12 - v11 * v8))
       - *((double *)this + 1) * (v2 * v14 - (v6 * v13 - v10 * v9) * v4 + v5 * (v6 * v12 - v10 * v8))
       + *((double *)this + 2) * (v2 * (v7 * v13 - v11 * v9) - (v6 * v13 - v10 * v9) * v3 + v5 * (v6 * v11 - v10 * v7))
       - *((double *)this + 3) * (v2 * (v7 * v12 - v11 * v8) - (v6 * v12 - v10 * v8) * v3 + v4 * (v6 * v11 - v10 * v7));
}

BOOL WebCore::TransformationMatrix::inverse(WebCore::TransformationMatrix *this, WebCore::TransformationMatrix *a2)
{
  double (*v4)[4][4];
  double v5;
  double v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13[4][4];

  if (WebCore::TransformationMatrix::isIdentityOrTranslation(this))
  {
    v6 = *((double *)this + 12);
    v5 = *((double *)this + 13);
    if (v6 == 0.0 && v5 == 0.0 && *((double *)this + 14) == 0.0)
    {
      *(_QWORD *)a2 = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 8) = 0u;
      *(_OWORD *)((char *)a2 + 24) = 0u;
      *((_QWORD *)a2 + 5) = 0x3FF0000000000000;
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((_QWORD *)a2 + 10) = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 88) = 0u;
      *(_OWORD *)((char *)a2 + 104) = 0u;
      result = 1;
      *((_QWORD *)a2 + 15) = 0x3FF0000000000000;
    }
    else
    {
      v12 = -*((double *)this + 14);
      *(_QWORD *)a2 = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 8) = 0u;
      *(_OWORD *)((char *)a2 + 24) = 0u;
      *((_QWORD *)a2 + 5) = 0x3FF0000000000000;
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((_OWORD *)a2 + 5) = xmmword_22655EF70;
      *((double *)a2 + 12) = -v6;
      *((double *)a2 + 13) = -v5;
      *((double *)a2 + 14) = v12;
      *((_QWORD *)a2 + 15) = 0x3FF0000000000000;
      return 1;
    }
  }
  else
  {
    v13[0][0] = 1.0;
    *(_OWORD *)&v13[0][1] = 0u;
    *(_OWORD *)&v13[0][3] = 0u;
    v13[1][1] = 1.0;
    *(_OWORD *)&v13[1][2] = 0u;
    *(_OWORD *)&v13[2][0] = 0u;
    v13[2][2] = 1.0;
    *(_OWORD *)&v13[2][3] = 0u;
    *(_OWORD *)&v13[3][1] = 0u;
    v13[3][3] = 1.0;
    result = WebCore::inverse(this, (const double (*)[4][4])v13, v4);
    if (result)
    {
      v8 = *(_OWORD *)&v13[2][2];
      *((_OWORD *)a2 + 4) = *(_OWORD *)&v13[2][0];
      *((_OWORD *)a2 + 5) = v8;
      v9 = *(_OWORD *)&v13[3][2];
      *((_OWORD *)a2 + 6) = *(_OWORD *)&v13[3][0];
      *((_OWORD *)a2 + 7) = v9;
      v10 = *(_OWORD *)&v13[0][2];
      *(_OWORD *)a2 = *(_OWORD *)&v13[0][0];
      *((_OWORD *)a2 + 1) = v10;
      v11 = *(_OWORD *)&v13[1][2];
      *((_OWORD *)a2 + 2) = *(_OWORD *)&v13[1][0];
      *((_OWORD *)a2 + 3) = v11;
    }
  }
  return result;
}

BOOL WebCore::inverse(WebCore *this, const double (*a2)[4][4], double (*a3)[4][4])
{
  const double (*v3)[4][4];
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  float64x2_t v45;
  uint64_t i;

  v3 = a2;
  v4 = *(double *)this;
  v5 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v7 = *((double *)this + 3);
  v8 = *((double *)this + 4);
  v9 = *((double *)this + 5);
  v10 = *((double *)this + 6);
  v11 = *((double *)this + 7);
  v12 = *((double *)this + 8);
  v13 = *((double *)this + 9);
  v14 = *((double *)this + 10);
  v15 = *((double *)this + 11);
  v16 = *((double *)this + 14);
  v17 = *((double *)this + 15);
  v18 = v14 * v17 - v16 * v15;
  v19 = *((double *)this + 12);
  v20 = *((double *)this + 13);
  v21 = v13 * v17 - v20 * v15;
  v22 = v13 * v16 - v20 * v14;
  v23 = v12 * v17 - v19 * v15;
  v24 = v12 * v16 - v19 * v14;
  (*a2)[0][0] = v9 * v18 - v21 * v10 + v11 * v22;
  (*a2)[0][1] = -(v5 * v18 - v21 * v6 + v7 * v22);
  v25 = v12 * v20 - v19 * v13;
  (*a2)[1][0] = -(v8 * v18 - v23 * v10 + v11 * v24);
  (*a2)[1][1] = v4 * v18 - v23 * v6 + v7 * v24;
  (*a2)[2][0] = v8 * v21 - v23 * v9 + v11 * v25;
  (*a2)[2][1] = -(v4 * v21 - v23 * v5 + v7 * v25);
  (*a2)[3][0] = -(v8 * v22 - v24 * v9 + v10 * v25);
  (*a2)[3][1] = v4 * v22 - v24 * v5 + v6 * v25;
  v26 = v10 * v17 - v16 * v11;
  v27 = v9 * v17 - v20 * v11;
  v28 = v9 * v16 - v20 * v10;
  v29 = v5 * v26 - v27 * v6 + v7 * v28;
  v30 = v8 * v17 - v19 * v11;
  v31 = v8 * v16 - v19 * v10;
  v32 = -(v4 * v26 - v30 * v6 + v7 * v31);
  v33 = v8 * v20 - v19 * v9;
  v34 = v4 * v27 - v30 * v5 + v7 * v33;
  v35 = -(v4 * v28 - v31 * v5 + v6 * v33);
  v36 = v10 * v15 - v14 * v11;
  v37 = v9 * v15 - v13 * v11;
  v38 = v9 * v14 - v13 * v10;
  (*a2)[0][2] = v29;
  (*a2)[0][3] = -(v5 * v36 - v37 * v6 + v7 * v38);
  v39 = v8 * v15 - v12 * v11;
  v40 = v8 * v14 - v12 * v10;
  (*a2)[1][2] = v32;
  (*a2)[1][3] = v4 * v36 - v39 * v6 + v7 * v40;
  v41 = v8 * v13 - v12 * v9;
  (*a2)[2][2] = v34;
  (*a2)[2][3] = -(v4 * v37 - v39 * v5 + v7 * v41);
  (*a2)[3][2] = v35;
  (*a2)[3][3] = v4 * v38 - v40 * v5 + v6 * v41;
  *(double *)&v42 = WebCore::determinant4x4(this, a2);
  v43 = fabs(*(double *)&v42);
  if (v43 >= 0.00000001)
  {
    v44 = 0;
    v45 = (float64x2_t)vdupq_lane_s64(v42, 0);
    do
    {
      for (i = 0; i != 4; i += 2)
        *(float64x2_t *)&(*v3)[0][i] = vdivq_f64(*(float64x2_t *)&(*v3)[0][i], v45);
      ++v44;
      v3 = (const double (*)[4][4])((char *)v3 + 32);
    }
    while (v44 != 4);
  }
  return v43 >= 0.00000001;
}

double WebCore::TransformationMatrix::makeAffine(WebCore::TransformationMatrix *this)
{
  double result;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_22655EF70;
  result = 0.0;
  *((_OWORD *)this + 7) = xmmword_22655EF60;
  return result;
}

void WebCore::TransformationMatrix::blend2(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  WebCore::TransformationMatrix::decompose2((uint64_t)a2, (uint64_t)&v18);
  WebCore::TransformationMatrix::decompose2((uint64_t)this, (uint64_t)&v9);
  v6 = v18;
  v5 = v19;
  if ((v18 >= 0.0 || v10 >= 0.0) && (v19 >= 0.0 || v9 >= 0.0))
  {
    v7 = v22;
  }
  else
  {
    v6 = -v18;
    v5 = -v19;
    v18 = -v18;
    v19 = -v19;
    v7 = v22 + dbl_22655EF80[v22 < 0.0];
    v22 = v7;
  }
  if (v7 == 0.0)
  {
    v22 = 360.0;
    v7 = 360.0;
  }
  v8 = v13;
  if (v13 == 0.0)
    v8 = 360.0;
  if (vabdd_f64(v7, v8) > 180.0)
  {
    if (v7 <= v8)
    {
      v8 = v8 + -360.0;
    }
    else
    {
      v7 = v7 + -360.0;
      v22 = v7;
    }
  }
  if (v23 != v14)
    v23 = v23 + (v14 - v23) * a3;
  if (v24 != v15)
    v24 = v24 + (v15 - v24) * a3;
  if (v25 != v16)
    v25 = v25 + (v16 - v25) * a3;
  if (v26 != v17)
    v26 = v26 + (v17 - v26) * a3;
  if (v20 != v11)
    v20 = v20 + (v11 - v20) * a3;
  if (v21 != v12)
    v21 = v21 + (v12 - v21) * a3;
  if (v6 != v9)
    v18 = v6 + (v9 - v6) * a3;
  if (v5 != v10)
    v19 = v5 + (v10 - v5) * a3;
  if (v7 != v8)
    v22 = v7 + (v8 - v7) * a3;
  WebCore::TransformationMatrix::recompose2((uint64_t)this, (uint64_t)&v18);
}

uint64_t WebCore::TransformationMatrix::decompose2(uint64_t a1, uint64_t a2)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if (WebCore::TransformationMatrix::isIdentity((WebCore::TransformationMatrix *)a1))
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)a2 = _Q1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  }
  else
  {
    v9 = *(double *)a1;
    v10 = *(double *)(a1 + 8);
    v11 = *(double *)(a1 + 32);
    v12 = *(double *)(a1 + 40);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
    v13 = sqrt(v10 * v10 + v9 * v9);
    v14 = sqrt(v12 * v12 + v11 * v11);
    *(double *)a2 = v13;
    *(double *)(a2 + 8) = v14;
    if (v9 * v12 - v10 * v11 < 0.0)
    {
      if (v9 >= v12)
      {
        v14 = -v14;
        *(double *)(a2 + 8) = v14;
      }
      else
      {
        v13 = -v13;
        *(double *)a2 = v13;
      }
    }
    if (v13 != 0.0)
    {
      v15 = 1.0 / v13;
      v9 = v9 * v15;
      v10 = v10 * v15;
    }
    if (v14 != 0.0)
    {
      v16 = 1.0 / v14;
      v11 = v11 * v16;
      v12 = v12 * v16;
    }
    v17 = atan2(v10, v9);
    v18 = v9 * v9 - v10 * v11;
    v19 = v9 * v10 - v10 * v12;
    v20 = v9 * v11 + v10 * v9;
    v21 = v9 * v12 + v10 * v10;
    if (v17 == 0.0)
    {
      v21 = v12;
      v20 = v11;
      v19 = v10;
      v18 = v9;
    }
    *(double *)(a2 + 48) = v19;
    *(double *)(a2 + 56) = v20;
    *(double *)(a2 + 64) = v21;
    *(double *)(a2 + 32) = v17 / 6.28318531 * 360.0;
    *(double *)(a2 + 40) = v18;
  }
  return 1;
}

double WebCore::TransformationMatrix::recompose2(uint64_t a1, uint64_t a2)
{
  float64x2_t *v3;
  WebCore::TransformationMatrix *v4;
  double result;

  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 64);
  WebCore::TransformationMatrix::translate3d((float64x2_t *)a1, *(double *)(a2 + 16), *(double *)(a2 + 24), 0.0);
  v4 = WebCore::TransformationMatrix::rotate3d(v3, 0.0, 0.0, *(double *)(a2 + 32));
  *(_QWORD *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform((float64x2_t *)v4, *(double *)a2, *(double *)(a2 + 8));
  return result;
}

void WebCore::TransformationMatrix::blend4(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, long double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  long double v22;
  long double v23;
  long double v24;
  double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;

  if (WebCore::TransformationMatrix::decompose4(a2, (uint64_t)&v45)
    && WebCore::TransformationMatrix::decompose4(this, (uint64_t)&v28))
  {
    if (v45 != v28)
      v45 = v45 + (v28 - v45) * a3;
    if (v46 != v29)
      v46 = v46 + (v29 - v46) * a3;
    if (v47 != v30)
      v47 = v47 + (v30 - v47) * a3;
    if (v48 != v31)
      v48 = v48 + (v31 - v48) * a3;
    if (v49 != v32)
      v49 = v49 + (v32 - v49) * a3;
    if (v50 != v33)
      v50 = v50 + (v33 - v50) * a3;
    if (v55 != v38)
      v55 = v55 + (v38 - v55) * a3;
    if (v56 != v39)
      v56 = v56 + (v39 - v56) * a3;
    if (v57 != v40)
      v57 = v57 + (v40 - v57) * a3;
    if (v58 != v41)
      v58 = v58 + (v41 - v58) * a3;
    if (v59 != v42)
      v59 = v59 + (v42 - v59) * a3;
    if (v60 != v43)
      v60 = v60 + (v43 - v60) * a3;
    if (v61 != v44)
      v61 = v61 + (v44 - v61) * a3;
    v7 = v51;
    v6 = v52;
    v9 = v53;
    v8 = v54;
    v10 = v34;
    v11 = v35;
    v12 = v36;
    v13 = v37;
    v14 = v52 * v35 + v51 * v34 + v53 * v36 + v54 * v37;
    if (v14 < 0.0)
    {
      v7 = -v51;
      v6 = -v52;
      v9 = -v53;
      v8 = -v54;
      v14 = -v14;
    }
    if (v14 + 1.0 <= 0.05)
    {
      v15 = sin((0.5 - a3) * 3.14159265);
      v22 = sin(a3 * 3.14159265);
      v10 = -v6;
      v12 = -v8;
      a3 = v22;
      v11 = v7;
      v13 = v9;
    }
    else if (1.0 - v14 >= 0.05)
    {
      v25 = v36;
      v27 = v34;
      v24 = acos(v14);
      v26 = 1.0 / sin(v24);
      v15 = sin((1.0 - a3) * v24) * v26;
      v23 = sin(v24 * a3);
      v10 = v27;
      v12 = v25;
      a3 = v23 * v26;
    }
    else
    {
      v15 = 1.0 - a3;
    }
    v51 = v10 * a3 + v7 * v15;
    v52 = v11 * a3 + v6 * v15;
    v53 = v12 * a3 + v9 * v15;
    v54 = v13 * a3 + v8 * v15;
    WebCore::TransformationMatrix::recompose4((uint64_t)this, (uint64_t)&v45);
  }
  else if (a2 != this && a3 < 0.5)
  {
    v16 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a2 + 3);
    *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)this + 3) = v18;
    *(_OWORD *)this = v16;
    *((_OWORD *)this + 1) = v17;
    v19 = *((_OWORD *)a2 + 4);
    v20 = *((_OWORD *)a2 + 5);
    v21 = *((_OWORD *)a2 + 7);
    *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)this + 7) = v21;
    *((_OWORD *)this + 4) = v19;
    *((_OWORD *)this + 5) = v20;
  }
}

BOOL WebCore::TransformationMatrix::decompose4(WebCore::TransformationMatrix *a1, uint64_t a2)
{
  const double (*v4)[4][4];
  _BOOL8 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t i;
  uint64_t v18;
  double (*v19)[4][4];
  double v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  float64_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  __int128 *v31;
  char *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  float64x2_t *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82[4][4];
  _OWORD v83[7];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (WebCore::TransformationMatrix::isIdentity(a1))
  {
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a2 = _Q0;
    v10 = 1;
    *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
    return v10;
  }
  v11 = *((_OWORD *)a1 + 5);
  v89 = *((_OWORD *)a1 + 4);
  v90 = v11;
  v12 = *((_OWORD *)a1 + 7);
  v91 = *((_OWORD *)a1 + 6);
  v92 = v12;
  v13 = *((_OWORD *)a1 + 1);
  v85 = *(_OWORD *)a1;
  v86 = v13;
  v14 = *((_OWORD *)a1 + 3);
  v87 = *((_OWORD *)a1 + 2);
  v88 = v14;
  if (*((double *)&v12 + 1) == 0.0)
    return 0;
  v15 = 0;
  v16 = &v85;
  do
  {
    for (i = 0; i != 32; i += 8)
      *(double *)((char *)v16 + i) = *(double *)((char *)v16 + i) / *((double *)&v92 + 1);
    ++v15;
    v16 += 2;
  }
  while (v15 != 4);
  v83[4] = v89;
  v83[5] = v90;
  v83[6] = v91;
  v84 = v92;
  v83[0] = v85;
  v83[1] = v86;
  v18 = 24;
  v83[2] = v87;
  v83[3] = v88;
  do
  {
    *(_QWORD *)((char *)v83 + v18) = 0;
    v18 += 32;
  }
  while (v18 != 120);
  *((_QWORD *)&v84 + 1) = 0x3FF0000000000000;
  v20 = WebCore::determinant4x4((WebCore *)v83, v4);
  v10 = v20 != 0.0;
  if (v20 != 0.0)
  {
    if (*((double *)&v86 + 1) == 0.0 && *((double *)&v88 + 1) == 0.0 && *((double *)&v90 + 1) == 0.0)
    {
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0x3FF0000000000000;
    }
    else
    {
      v72 = *((double *)&v86 + 1);
      v73 = *((double *)&v90 + 1);
      v70 = *((double *)&v92 + 1);
      memset(v82, 0, sizeof(v82));
      v21 = v82[1];
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v71 = *((double *)&v88 + 1);
      WebCore::inverse((WebCore *)v83, (const double (*)[4][4])v82, v19);
      v22 = 0;
      v23 = &v74;
      do
      {
        v24 = 0;
        v25 = v21;
        do
        {
          v26.f64[0] = *(v25 - 4);
          v26.f64[1] = *v25;
          v23[v24] = v26;
          v25 += 8;
          ++v24;
        }
        while (v24 != 2);
        ++v22;
        ++v21;
        v23 += 2;
      }
      while (v22 != 4);
      v27 = v79;
      v28 = vmlaq_n_f64(vmulq_n_f64(v77, v71), v75, v72);
      v29 = v81;
      *(float64x2_t *)(a2 + 104) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v76, v71), v74, v72), v78, v73), v80, v70);
      *(float64x2_t *)(a2 + 120) = vmlaq_n_f64(vmlaq_n_f64(v28, v27, v73), v29, v70);
    }
    v30 = 0;
    *(_OWORD *)(a2 + 80) = v91;
    v91 = 0uLL;
    *(_QWORD *)(a2 + 96) = v92;
    *(_QWORD *)&v92 = 0;
    v31 = &v86;
    do
    {
      v32 = (char *)v82 + v30;
      *(_OWORD *)v32 = *(v31 - 1);
      v33 = *(_QWORD *)v31;
      v31 += 2;
      *((_QWORD *)v32 + 2) = v33;
      v30 += 24;
    }
    while (v30 != 72);
    v35 = v82[0][1];
    v34 = v82[0][0];
    v36 = v82[0][2];
    v37 = sqrt(v82[0][1] * v82[0][1] + v82[0][0] * v82[0][0] + v36 * v36);
    *(double *)a2 = v37;
    if (v37 != 0.0)
    {
      v34 = v34 * (1.0 / v37);
      v35 = v35 * (1.0 / v37);
      v82[0][0] = v34;
      v82[0][1] = v35;
      v36 = v36 * (1.0 / v37);
      v82[0][2] = v36;
    }
    v38 = v35 * v82[1][0] + v34 * v82[0][3] + v36 * v82[1][1];
    v39 = v82[0][3] - v34 * v38;
    v40 = v82[1][0] - v35 * v38;
    v82[0][3] = v39;
    v82[1][0] = v40;
    v41 = v82[1][1] - v36 * v38;
    v82[1][1] = v41;
    v42 = sqrt(v40 * v40 + v39 * v39 + v41 * v41);
    *(double *)(a2 + 8) = v42;
    if (v42 != 0.0)
    {
      v39 = v39 * (1.0 / v42);
      v40 = v40 * (1.0 / v42);
      v82[0][3] = v39;
      v82[1][0] = v40;
      v41 = v41 * (1.0 / v42);
      v82[1][1] = v41;
    }
    v43 = v38 / v42;
    v44 = v35 * v82[1][3] + v34 * v82[1][2] + v36 * v82[2][0];
    v45 = v82[1][2] - v34 * v44;
    v46 = v82[1][3] - v35 * v44;
    v47 = v82[2][0] - v36 * v44;
    v48 = v40 * v46 + v39 * v45 + v41 * v47;
    v49 = v45 - v39 * v48;
    v50 = v46 - v40 * v48;
    v82[1][2] = v49;
    v82[1][3] = v50;
    v51 = v47 - v41 * v48;
    v82[2][0] = v51;
    v52 = sqrt(v50 * v50 + v49 * v49 + v51 * v51);
    *(double *)(a2 + 16) = v52;
    *(double *)(a2 + 24) = v43;
    if (v52 != 0.0)
    {
      v49 = v49 * (1.0 / v52);
      v50 = v50 * (1.0 / v52);
      v82[1][2] = v49;
      v82[1][3] = v50;
      v51 = v51 * (1.0 / v52);
      v82[2][0] = v51;
    }
    *(double *)(a2 + 32) = v44 / v52;
    *(double *)(a2 + 40) = v48 / v52;
    if (v35 * (v41 * v49 - v39 * v51) + v34 * (v40 * v51 - v41 * v50) + v36 * (v39 * v50 - v40 * v49) < 0.0)
    {
      v53 = 0;
      *(double *)a2 = -v37;
      *(double *)(a2 + 8) = -v42;
      *(double *)(a2 + 16) = -v52;
      do
      {
        v54 = (float64x2_t *)((char *)v82 + v53 * 8);
        *v54 = vnegq_f64(*(float64x2_t *)&v82[0][v53]);
        v54[1].f64[0] = -v82[0][v53 + 2];
        v53 += 3;
      }
      while (v53 != 9);
      v34 = v82[0][0];
      v40 = v82[1][0];
      v51 = v82[2][0];
    }
    v55 = v51 + v40 + v34 + 1.0;
    if (v55 > 0.0001)
    {
      v56 = 0.5 / sqrt(v55);
      v57 = 0.25 / v56;
      v58 = v56 * (v82[1][3] - v82[1][1]);
      v59 = v56 * (v82[0][2] - v82[1][2]);
      v60 = v56 * (v82[0][3] - v82[0][1]);
LABEL_45:
      *(double *)(a2 + 48) = v58;
      *(double *)(a2 + 56) = v59;
      *(double *)(a2 + 64) = v60;
      *(double *)(a2 + 72) = v57;
      return v10;
    }
    if (v34 <= v40 || v34 <= v51)
    {
      if (v40 > v51)
      {
        v62 = sqrt(v40 + 1.0 - v34 - v51);
        v65 = v62 + v62;
        v58 = (v82[0][1] + v82[0][3]) / (v62 + v62);
        v59 = v65 * 0.25;
        v60 = (v82[1][1] + v82[1][3]) / v65;
        v63 = v82[0][2] - v82[1][2];
LABEL_44:
        v57 = v63 / v65;
        goto LABEL_45;
      }
      v68 = sqrt(v51 + 1.0 - v34 - v40);
      v65 = v68 + v68;
      v66 = v82[0][1];
      v58 = (v82[0][2] + v82[1][2]) / (v68 + v68);
      v67 = v82[0][3];
      v59 = (v82[1][1] + v82[1][3]) / v65;
      v60 = v65 * 0.25;
    }
    else
    {
      v64 = sqrt(v34 + 1.0 - v40 - v51);
      v65 = v64 + v64;
      v66 = v82[1][1];
      v67 = v82[1][3];
      v58 = (v64 + v64) * 0.25;
      v59 = (v82[0][1] + v82[0][3]) / v65;
      v60 = (v82[0][2] + v82[1][2]) / v65;
    }
    v63 = v67 - v66;
    goto LABEL_44;
  }
  return v10;
}

float64x2_t WebCore::TransformationMatrix::recompose4(uint64_t a1, uint64_t a2)
{
  float64x2_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  const double *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  const double *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  const double *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  const double *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t result;
  float64x2_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  double v70[11];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  float64x2x4_t v74;
  float64x2x4_t v75;
  float64x2x4_t v76;
  float64x2x4_t v77;
  float64x2x4_t v78;
  float64x2x4_t v79;
  float64x2x4_t v80;
  float64x2x4_t v81;
  float64x2x4_t v82;
  float64x2x4_t v83;
  float64x2x4_t v84;
  float64x2x4_t v85;
  float64x2x4_t v86;
  float64x2x4_t v87;
  float64x2x4_t v88;
  float64x2x4_t v89;

  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 128);
  WebCore::TransformationMatrix::translate3d((float64x2_t *)a1, *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
  v4 = *(double *)(a2 + 48);
  v5 = *(double *)(a2 + 56);
  v6 = v4 * v4;
  v7 = v4 * v5;
  v8 = *(double *)(a2 + 64);
  v9 = *(double *)(a2 + 72);
  v10 = v4 * v8;
  v11 = v4 * v9;
  v12 = v5 * v5;
  v13 = v5 * v8;
  v14 = v5 * v9;
  v15 = v8 * v8;
  v16 = v8 * v9;
  v70[0] = (v12 + v15) * -2.0 + 1.0;
  v70[1] = v7 - v16 + v7 - v16;
  v70[2] = v10 + v14 + v10 + v14;
  v70[3] = 0.0;
  v70[4] = v7 + v16 + v7 + v16;
  v70[5] = (v6 + v15) * -2.0 + 1.0;
  v70[6] = v13 - v11 + v13 - v11;
  v70[7] = 0.0;
  v70[8] = v10 - v14 + v10 - v14;
  v70[9] = v13 + v11 + v13 + v11;
  v70[10] = (v6 + v12) * -2.0 + 1.0;
  v71 = 0u;
  v72 = 0u;
  v73 = 0x3FF0000000000000;
  v17 = v70;
  v18 = *v3;
  v19 = v3[1];
  v20 = v3[2];
  v21 = v3[3];
  v22 = v3[4];
  v23 = v3[5];
  v24 = v3[6];
  v25 = v3[7];
  v82 = vld4q_dup_f64(v17);
  v17 += 4;
  v74 = vld4q_dup_f64(v17);
  v17 += 4;
  *v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v82.val[0], *v3), v82.val[1], v20), v82.val[2], v22), v82.val[3], v24);
  v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v82.val[0], v19), v82.val[1], v21), v82.val[2], v23), v82.val[3], v25);
  v83 = vld4q_dup_f64(v17);
  v17 += 4;
  v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v18), v74.val[1], v20), v74.val[2], v22), v74.val[3], v24);
  v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v19), v74.val[1], v21), v74.val[2], v23), v74.val[3], v25);
  v75 = vld4q_dup_f64(v17);
  v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v83.val[0], v18), v83.val[1], v20), v83.val[2], v22), v83.val[3], v24);
  v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v83.val[0], v19), v83.val[1], v21), v83.val[2], v23), v83.val[3], v25);
  v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v18), v75.val[1], v20), v75.val[2], v22), v75.val[3], v24);
  v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v19), v75.val[1], v21), v75.val[2], v23), v75.val[3], v25);
  v26 = *(double *)(a2 + 40);
  if (v26 != 0.0)
  {
    v60 = 0x3FF0000000000000;
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = 0x3FF0000000000000;
    v64 = 0uLL;
    *(_QWORD *)&v65 = 0;
    v66 = 0x3FF0000000000000;
    v67 = 0uLL;
    v68 = 0uLL;
    v69 = 0x3FF0000000000000;
    v27 = (const double *)&v60;
    *((double *)&v65 + 1) = v26;
    v28 = *v3;
    v29 = v3[1];
    v30 = v3[2];
    v31 = v3[3];
    v32 = v3[4];
    v33 = v3[5];
    v34 = v3[6];
    v35 = v3[7];
    v84 = vld4q_dup_f64(v27);
    v27 += 4;
    v76 = vld4q_dup_f64(v27);
    v27 += 4;
    *v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v84.val[0], *v3), v84.val[1], v30), v84.val[2], v32), v84.val[3], v34);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v84.val[0], v29), v84.val[1], v31), v84.val[2], v33), v84.val[3], v35);
    v85 = vld4q_dup_f64(v27);
    v27 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v28), v76.val[1], v30), v76.val[2], v32), v76.val[3], v34);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v29), v76.val[1], v31), v76.val[2], v33), v76.val[3], v35);
    v77 = vld4q_dup_f64(v27);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v85.val[0], v28), v85.val[1], v30), v85.val[2], v32), v85.val[3], v34);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v85.val[0], v29), v85.val[1], v31), v85.val[2], v33), v85.val[3], v35);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v28), v77.val[1], v30), v77.val[2], v32), v77.val[3], v34);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v29), v77.val[1], v31), v77.val[2], v33), v77.val[3], v35);
  }
  v36 = *(double *)(a2 + 32);
  if (v36 != 0.0)
  {
    v60 = 0x3FF0000000000000;
    v61 = 0u;
    v62 = 0u;
    v63 = 0x3FF0000000000000;
    v64 = 0u;
    v66 = 0x3FF0000000000000;
    v67 = 0u;
    v68 = 0u;
    v69 = 0x3FF0000000000000;
    v37 = (const double *)&v60;
    v65 = *(unint64_t *)&v36;
    v38 = *v3;
    v39 = v3[1];
    v40 = v3[2];
    v41 = v3[3];
    v42 = v3[4];
    v43 = v3[5];
    v44 = v3[6];
    v45 = v3[7];
    v86 = vld4q_dup_f64(v37);
    v37 += 4;
    v78 = vld4q_dup_f64(v37);
    v37 += 4;
    *v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v86.val[0], *v3), v86.val[1], v40), v86.val[2], v42), v86.val[3], v44);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v86.val[0], v39), v86.val[1], v41), v86.val[2], v43), v86.val[3], v45);
    v87 = vld4q_dup_f64(v37);
    v37 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v38), v78.val[1], v40), v78.val[2], v42), v78.val[3], v44);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v39), v78.val[1], v41), v78.val[2], v43), v78.val[3], v45);
    v79 = vld4q_dup_f64(v37);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v38), v87.val[1], v40), v87.val[2], v42), v87.val[3], v44);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v39), v87.val[1], v41), v87.val[2], v43), v87.val[3], v45);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], v38), v79.val[1], v40), v79.val[2], v42), v79.val[3], v44);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], v39), v79.val[1], v41), v79.val[2], v43), v79.val[3], v45);
  }
  v46 = *(double *)(a2 + 24);
  if (v46 != 0.0)
  {
    v60 = 0x3FF0000000000000;
    v61 = 0uLL;
    *(_QWORD *)&v62 = 0;
    v63 = 0x3FF0000000000000;
    v64 = 0u;
    v65 = 0u;
    v66 = 0x3FF0000000000000;
    v67 = 0u;
    v68 = 0u;
    v69 = 0x3FF0000000000000;
    v47 = (const double *)&v60;
    *((double *)&v62 + 1) = v46;
    v48 = *v3;
    v49 = v3[1];
    v50 = v3[2];
    v51 = v3[3];
    v52 = v3[4];
    v53 = v3[5];
    v54 = v3[6];
    v55 = v3[7];
    v88 = vld4q_dup_f64(v47);
    v47 += 4;
    v80 = vld4q_dup_f64(v47);
    v47 += 4;
    *v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], *v3), v88.val[1], v50), v88.val[2], v52), v88.val[3], v54);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], v49), v88.val[1], v51), v88.val[2], v53), v88.val[3], v55);
    v89 = vld4q_dup_f64(v47);
    v47 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v48), v80.val[1], v50), v80.val[2], v52), v80.val[3], v54);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v49), v80.val[1], v51), v80.val[2], v53), v80.val[3], v55);
    v81 = vld4q_dup_f64(v47);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v48), v89.val[1], v50), v89.val[2], v52), v89.val[3], v54);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v49), v89.val[1], v51), v89.val[2], v53), v89.val[3], v55);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v81.val[0], v48), v81.val[1], v50), v81.val[2], v52), v81.val[3], v54);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v81.val[0], v49), v81.val[1], v51), v81.val[2], v53), v81.val[3], v55);
  }
  v59 = *(_OWORD *)(a2 + 16);
  WebCore::TransformationMatrix::scaleNonUniform(v3, *(double *)a2, *(double *)(a2 + 8));
  result = vmulq_n_f64(v56[4], *(double *)&v59);
  v58 = vmulq_n_f64(v56[5], *(double *)&v59);
  v56[4] = result;
  v56[5] = v58;
  return result;
}

void WebCore::TransformationMatrix::blend(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, long double a3)
{
  if (!WebCore::TransformationMatrix::isIdentity(a2) || !WebCore::TransformationMatrix::isIdentity(this))
  {
    if (WebCore::TransformationMatrix::isAffine(a2) && WebCore::TransformationMatrix::isAffine(this))
      WebCore::TransformationMatrix::blend2(this, a2, a3);
    else
      WebCore::TransformationMatrix::blend4(this, a2, a3);
  }
}

BOOL WebCore::TransformationMatrix::isIdentity(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

BOOL WebCore::TransformationMatrix::isAffine(WebCore::TransformationMatrix *this)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

BOOL WebCore::TransformationMatrix::isIntegerTranslation(WebCore::TransformationMatrix *this)
{
  _BOOL8 result;

  result = WebCore::TransformationMatrix::isIdentityOrTranslation(this);
  if ((_DWORD)result)
    return *((double *)this + 14) == 0.0
        && *((double *)this + 12) == (double)(int)*((double *)this + 12)
        && *((double *)this + 13) == (double)(int)*((double *)this + 13);
  return result;
}

double WebCore::TransformationMatrix::to2dTransform@<D0>(WebCore::TransformationMatrix *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;

  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 15);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = v2;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = 1.0;
  v6 = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 80) = xmmword_22655EF70;
  *(_OWORD *)(a2 + 96) = v6;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = v4;
  return result;
}

float64x2_t WebCore::TransformationMatrix::toColumnMajorFloatArray(float64x2_t *this, float (*a2)[16])
{
  float32x4_t v2;
  float64x2_t result;
  float32x4_t v4;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[2]), this[3]);
  *(float32x4_t *)&(*a2)[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*this), this[1]);
  *(float32x4_t *)&(*a2)[4] = v2;
  result = this[7];
  v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[6]), result);
  *(float32x4_t *)&(*a2)[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[4]), this[5]);
  *(float32x4_t *)&(*a2)[12] = v4;
  return result;
}

BOOL WebCore::TransformationMatrix::isBackFaceVisible(WebCore::TransformationMatrix *this, const double (*a2)[4][4])
{
  double v3;

  v3 = WebCore::determinant4x4(this, a2);
  return fabs(v3) >= 0.00000001
      && (*(double *)this
        * (*((double *)this + 5) * *((double *)this + 15) - *((double *)this + 7) * *((double *)this + 13))
        - (*((double *)this + 1) * *((double *)this + 15) - *((double *)this + 3) * *((double *)this + 13))
        * *((double *)this + 4)
        + *((double *)this + 12)
        * (*((double *)this + 1) * *((double *)this + 7) - *((double *)this + 3) * *((double *)this + 5)))
       / v3 < 0.0;
}

void sub_226428834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  void *v33;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void boost::polygon::construct_voronoi<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v4;
  void *v5[2];
  __int128 v6;
  void *v7[4];
  void *__p;
  void *v9;
  uint64_t v10;
  __int16 v11;
  _QWORD v12[3];
  _QWORD **v13;
  _QWORD *v14;
  _QWORD v15[330];

  __p = 0;
  v9 = 0;
  v11 = 0;
  v10 = 0;
  *(_OWORD *)v5 = 0u;
  v6 = 0u;
  memset(v7, 0, 25);
  v12[0] = v12;
  v12[1] = v12;
  v14 = 0;
  v15[0] = 0;
  *(_DWORD *)((char *)v15 + 7) = 0;
  v12[2] = 0;
  v13 = &v14;
  v15[329] = 0;
  boost::polygon::insert<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>>(a1, a2, &v4);
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::construct<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(&v4, a3);
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy((uint64_t)&v13, v14);
  std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear(v12);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_22642898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::~voronoi_builder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::~voronoi_diagram(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<PointInt64>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EDDDE48, MEMORY[0x24BEDAAF0]);
}

void sub_226428A40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PointInt64>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t boost::polygon::insert<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if ((uint64_t *)result != a2)
  {
    v12 = v3;
    v13 = v4;
    v7 = (uint64_t *)result;
    do
    {
      v8 = *v7;
      v9 = v7[1];
      v7 += 2;
      v10 = v9;
      v11 = v8;
      result = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_point(a3, &v11, &v10);
    }
    while (v7 != a2);
  }
  return result;
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::construct<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  uint64_t v9;
  double v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_reserve(a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - a1[1]) >> 3));
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_sites_queue((uint64_t)a1);
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, a2);
  v4 = a1[9];
  v5 = a1[10];
LABEL_2:
  while (1)
  {
    v6 = (int *)a1[2];
    v7 = (int *)a1[4];
    if (v4 == v5)
      break;
    if (v7 == v6)
      goto LABEL_12;
    v8 = *v7;
    v9 = *(_QWORD *)(*(_QWORD *)v4 + 32);
    if (*v7 >= 0)
      *(_QWORD *)&v10 = 0x8000000000000000 - COERCE__INT64((double)v8);
    else
      v10 = (double)v8;
    if (v9 >= 0)
      v9 = 0x8000000000000000 - v9;
    v11 = *(_QWORD *)&v10 >= (unint64_t)v9;
    v12 = *(_QWORD *)&v10 - v9;
    if (v12 == 0 || !v11 || v12 < 0x41)
    {
LABEL_12:
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_circle_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, a2);
      goto LABEL_15;
    }
LABEL_14:
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_site_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, (char **)a2);
LABEL_15:
    v4 = a1[9];
    v5 = v4;
    if (v4 != a1[10])
    {
      v5 = a1[10];
      if (!*(_BYTE *)(*(_QWORD *)v4 + 40))
      {
        while (1)
        {
          boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop((uint64_t)(a1 + 9));
          v4 = a1[9];
          v5 = a1[10];
          if (v4 == v5)
            break;
          if (*(_BYTE *)(*(_QWORD *)v4 + 40))
            goto LABEL_2;
        }
        v5 = a1[9];
      }
    }
  }
  if (v7 != v6)
    goto LABEL_14;
  v14 = (_QWORD *)a1[17];
  v13 = a1 + 17;
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v13;
  *v13 = 0;
  v13[1] = 0;
  boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_build((uint64_t *)a2);
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::~voronoi_builder(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1 + 128, *(_QWORD **)(a1 + 136));
  std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear((_QWORD *)(a1 + 104));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_point(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;

  v4 = (uint64_t)(a1 + 3);
  v5 = a1[3];
  v6 = *a2;
  v7 = *a3;
  v8 = (char *)a1[2];
  if ((unint64_t)v8 >= v5)
  {
    v10 = (void **)(a1 + 1);
    v11 = (char *)a1[1];
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v4, v15);
      v11 = (char *)a1[1];
      v8 = (char *)a1[2];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[40 * v12];
    *(_DWORD *)v17 = v6;
    *((_DWORD *)v17 + 1) = v7;
    *((_DWORD *)v17 + 2) = v6;
    *((_DWORD *)v17 + 3) = v7;
    v18 = &v16[40 * v15];
    *((_QWORD *)v17 + 2) = 0;
    *((_QWORD *)v17 + 4) = 0;
    v9 = v17 + 40;
    if (v8 != v11)
    {
      do
      {
        v19 = *(_OWORD *)(v8 - 40);
        v20 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v17 - 24) = v20;
        *(_OWORD *)(v17 - 40) = v19;
        v17 -= 40;
        v8 -= 40;
      }
      while (v8 != v11);
      v11 = (char *)*v10;
    }
    a1[1] = v17;
    a1[2] = v9;
    a1[3] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v8 = v6;
    *((_DWORD *)v8 + 1) = v7;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 3) = v7;
    *((_QWORD *)v8 + 2) = 0;
    v9 = v8 + 40;
    *((_QWORD *)v8 + 4) = 0;
  }
  a1[2] = v9;
  result = a1[347];
  *((_QWORD *)v9 - 2) = result;
  a1[347] = result + 1;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_reserve(void **a1, unint64_t a2)
{
  std::vector<boost::polygon::voronoi_cell<double>>::reserve(a1, a2);
  std::vector<boost::polygon::voronoi_vertex<double>>::reserve(a1 + 3, 2 * a2);
  std::vector<boost::polygon::voronoi_edge<double>>::reserve(a1 + 6, 6 * a2);
}

unsigned int *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_sites_queue(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int16 v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v2) >> 3));
  v11 = 0;
  if (v3 == (int *)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(v2, v3, (uint64_t)&v11, v5, 1);
  result = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(*(unsigned int **)(a1 + 8), *(unsigned int **)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 8);
  if (*(unsigned int **)(a1 + 16) != result)
    *(_QWORD *)(a1 + 16) = result;
  if (result != (unsigned int *)v7)
  {
    v8 = 0;
    v9 = ((uint64_t)result - v7) / 40;
    if (v9 <= 1)
      v9 = 1;
    v10 = (_QWORD *)(v7 + 16);
    do
    {
      *v10 = v8;
      v10 += 5;
      ++v8;
    }
    while (v9 != v8);
  }
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *a1, void **a2)
{
  char *v3;
  char *v4;
  char *v6;
  int v7;
  int v8;

  v3 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v3 != v4)
  {
    if (v4 - v3 == 40)
    {
      boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_process_single_site<int>(a2, (uint64_t)v3);
    }
    else
    {
      v6 = (char *)a1[4];
      if (v6 == v4)
        goto LABEL_13;
      v7 = 0;
      v8 = *(_DWORD *)v3;
      do
      {
        if (*(_DWORD *)v6 != v8)
          break;
        if (v8 != *((_DWORD *)v6 + 2))
          break;
        v6 += 40;
        a1[4] = (uint64_t)v6;
        ++v7;
      }
      while (v6 != v4);
      if (v7 != 1)
      {
LABEL_13:
        boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line_collinear_sites<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (char **)a2);
        return;
      }
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, (uint64_t)v3, (uint64_t)v3, (uint64_t)(v3 + 40), a1 + 17, (char **)a2);
    }
    a1[4] += 40;
  }
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_site_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int *v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  int v16;
  int v17;
  BOOL v18;
  int8x16_t v19;
  __int128 v20;
  int8x16_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  _QWORD *v27;
  int8x16_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t v34;
  int *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  int *v41;
  _OWORD v42[2];
  uint64_t v43;
  int8x16_t v44;
  __int128 v45;
  uint64_t v46;
  int8x16_t v47;
  __int128 v48;
  uint64_t v49;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_OWORD *)(v4 + 16);
  v47 = *(int8x16_t *)v4;
  v48 = v6;
  v49 = v5;
  v7 = (int *)(v4 + 40);
  v8 = v47.i32[0];
  if (v47.i32[0] == v47.i32[2] && (v9 = v47.i32[1], v47.i32[1] == v47.i32[3]))
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    if (v10 != v11)
    {
      do
      {
        if (*(_DWORD *)v10 != v8 || *(_DWORD *)(v10 + 4) != v9)
          break;
        v12 = *(uint64_t **)(v10 + 8);
        LOBYTE(v42[0]) = *(_BYTE *)(a1 + 64);
        if (v11 - v10 >= 17)
        {
          v13 = *(_QWORD *)v10;
          v14 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>((_QWORD *)v10, (uint64_t)v42, (unint64_t)(v11 - v10) >> 4);
          if ((_QWORD *)(v11 - 16) == v14)
          {
            *v14 = v13;
            v14[1] = v12;
          }
          else
          {
            *v14 = *(_QWORD *)(v11 - 16);
            v14[1] = *(_QWORD *)(v11 - 8);
            *(_QWORD *)(v11 - 16) = v13;
            *(_QWORD *)(v11 - 8) = v12;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(v10, (uint64_t)(v14 + 2), (uint64_t)v42, ((uint64_t)v14 - v10 + 16) >> 4);
          }
        }
        *(_QWORD *)(a1 + 48) -= 16;
        std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer((uint64_t **)(a1 + 128), v12);
        operator delete(v12);
        v10 = *(_QWORD *)(a1 + 40);
        v11 = *(_QWORD *)(a1 + 48);
      }
      while (v10 != v11);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v15 = *(int **)(a1 + 16);
    if (v7 != v15)
    {
      do
      {
        v16 = *v7;
        if (*v7 == v7[2])
        {
          v17 = v7[1];
          v18 = v16 != v47.i32[0] || v17 == v7[3];
          if (v18)
            goto LABEL_25;
        }
        else
        {
          if (v16 != v47.i32[0])
            goto LABEL_25;
          v17 = v7[1];
        }
        if (v17 != v47.i32[1])
          goto LABEL_25;
        v7 += 10;
      }
      while (v7 != v15);
      v7 = *(int **)(a1 + 16);
    }
  }
LABEL_25:
  v19 = *(int8x16_t *)v4;
  v20 = *(_OWORD *)(v4 + 16);
  v43 = *(_QWORD *)(v4 + 32);
  v42[0] = v19;
  v42[1] = v20;
  v21 = *(int8x16_t *)v4;
  v22 = *(_OWORD *)(v4 + 16);
  v46 = *(_QWORD *)(v4 + 32);
  v45 = v22;
  v44 = v21;
  v24 = (uint64_t *)(a1 + 136);
  v23 = *(_QWORD **)(a1 + 136);
  v25 = (uint64_t *)(a1 + 136);
  if (v23)
  {
    v25 = (uint64_t *)(a1 + 136);
    do
    {
      v26 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(a1 + 152, (uint64_t)(v23 + 4), (uint64_t)v42);
      v27 = v23 + 1;
      if (!v26)
      {
        v27 = v23;
        v25 = v23;
      }
      v23 = (_QWORD *)*v27;
    }
    while (*v27);
    v4 = *(_QWORD *)(a1 + 32);
  }
  while ((int *)v4 != v7)
  {
    v28 = *(int8x16_t *)v4;
    v29 = *(_OWORD *)(v4 + 16);
    v49 = *(_QWORD *)(v4 + 32);
    v47 = v28;
    v48 = v29;
    if (v25 == v24)
    {
      v37 = (_QWORD *)*v24;
      v38 = (_QWORD *)(a1 + 136);
      if (*v24)
      {
        do
        {
          v39 = v37;
          v37 = (_QWORD *)v37[1];
        }
        while (v37);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v38[2];
          v18 = *v39 == (_QWORD)v38;
          v38 = v39;
        }
        while (v18);
      }
      v40 = (uint64_t)(v39 + 4);
      v41 = (int *)(v39 + 9);
      v25 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v39 + 9), (uint64_t)(v39 + 9), (uint64_t)&v47, v25, a2);
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, v40, v41, (uint64_t)&v47, (uint64_t)v25);
    }
    else
    {
      if (v25 == *(uint64_t **)(a1 + 128))
      {
        v36 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v25 + 4), (uint64_t)(v25 + 4), (uint64_t)&v47, v25, a2);
      }
      else
      {
        v30 = v25[14];
        if (v30)
        {
          *(_BYTE *)(v30 + 24) = 0;
          v25[14] = 0;
        }
        v31 = (uint64_t **)*v25;
        v32 = v25;
        if (*v25)
        {
          do
          {
            v33 = v31;
            v31 = (uint64_t **)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            v33 = (uint64_t **)v32[2];
            v18 = *v33 == v32;
            v32 = (uint64_t *)v33;
          }
          while (v18);
        }
        v34 = (uint64_t)(v33 + 4);
        v35 = (int *)(v33 + 9);
        v36 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v33 + 9), (uint64_t)(v25 + 4), (uint64_t)&v47, v25, a2);
        boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, v34, v35, (uint64_t)&v47, (uint64_t)v36);
      }
      if (v47.i64[0] != v47.i64[1])
      {
        v47 = vextq_s8(v47, v47, 8uLL);
        v49 ^= 0x20uLL;
      }
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)&v47, (int *)v25 + 8, (uint64_t)(v25 + 9), (uint64_t)v25);
      v25 = v36;
    }
    v4 = *(_QWORD *)(a1 + 32) + 40;
    *(_QWORD *)(a1 + 32) = v4;
  }
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_circle_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  __int32 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  int8x16_t v26;
  __int128 v27;
  uint64_t v28;

  v3 = a1 + 72;
  v4 = **(_QWORD **)(a1 + 72);
  v5 = (uint64_t *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_OWORD *)(v6 + 88);
  v26 = *(int8x16_t *)(v6 + 72);
  v27 = v7;
  v28 = *(_QWORD *)(v6 + 104);
  v8 = *(_QWORD **)(v6 + 120);
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v11 = v6;
    do
    {
      v10 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)v10 == v11;
      v11 = v10;
    }
    while (v12);
  }
  v13 = *(_QWORD **)(v10 + 120);
  v14 = *(_OWORD *)(v10 + 48);
  v24[0] = *(_OWORD *)(v10 + 32);
  v24[1] = v14;
  v25 = *(_QWORD *)(v10 + 64);
  if (*(_QWORD *)&v24[0] == *((_QWORD *)&v24[0] + 1))
  {
    if (v26.i32[0] == v26.i32[2])
    {
      if (v26.i32[0] != LODWORD(v24[0]))
        goto LABEL_15;
      v15 = v26.i32[3];
      if (v26.i32[1] == v26.i32[3])
        goto LABEL_15;
    }
    else
    {
      if (v26.i32[2] != LODWORD(v24[0]))
        goto LABEL_15;
      v15 = v26.i32[3];
    }
    if (v15 == DWORD1(v24[0]))
    {
      v26 = vextq_s8(v26, v26, 8uLL);
      v28 ^= 0x20uLL;
    }
  }
LABEL_15:
  v16 = v27;
  *(int8x16_t *)(v10 + 72) = v26;
  *(_OWORD *)(v10 + 88) = v16;
  *(_QWORD *)(v10 + 104) = v28;
  *(_QWORD *)(v10 + 120) = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int,double>(a2, (uint64_t)v24, (uint64_t)&v26, v5, v13, v8);
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer((uint64_t **)(a1 + 128), (uint64_t *)v6);
  operator delete((void *)v6);
  boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop(v3);
  if (v10 != *(_QWORD *)(a1 + 128))
  {
    v17 = *(_QWORD *)(v10 + 112);
    if (v17)
    {
      *(_BYTE *)(v17 + 24) = 0;
      *(_QWORD *)(v10 + 112) = 0;
    }
    v18 = *(_QWORD **)v10;
    if (*(_QWORD *)v10)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)v18[1];
      }
      while (v18);
    }
    else
    {
      v20 = (_QWORD *)v10;
      do
      {
        v19 = (_QWORD *)v20[2];
        v12 = *v19 == (_QWORD)v20;
        v20 = v19;
      }
      while (v12);
    }
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)(v19 + 4), (int *)v24, (uint64_t)&v26, v10);
  }
  v21 = *(_QWORD **)(v10 + 8);
  if (v21)
  {
    do
    {
      v22 = v21;
      v21 = (_QWORD *)*v21;
    }
    while (v21);
  }
  else
  {
    do
    {
      v22 = *(_QWORD **)(v10 + 16);
      v12 = *v22 == v10;
      v10 = (uint64_t)v22;
    }
    while (!v12);
  }
  if (v22 != (_QWORD *)(a1 + 136))
  {
    v23 = v22[14];
    if (v23)
    {
      *(_BYTE *)(v23 + 24) = 0;
      v22[14] = 0;
    }
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)v24, v26.i32, (uint64_t)(v22 + 9), (uint64_t)v22);
  }
}

void boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  __int16 v8;

  v2 = *(uint64_t ***)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(uint64_t ***)a1;
  v8 = *(_WORD *)(a1 + 24);
  if (v3 - (uint64_t)v2 >= 9)
  {
    v5 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(v2, (uint64_t)&v8, (unint64_t)(v3 - (_QWORD)v2) >> 3);
    v6 = (uint64_t **)(v3 - 8);
    if ((_QWORD *)(v3 - 8) == v5)
    {
      *v5 = v4;
    }
    else
    {
      *v5 = *v6;
      *v6 = v4;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>((uint64_t)v2, (uint64_t)(v5 + 1), (uint64_t)&v8, (uint64_t **)(v5 + 1) - v2);
    }
  }
  *(_QWORD *)(a1 + 8) -= 8;
  v7 = *v4;
  *(_QWORD *)(v7 + 8) = v4[1];
  *(_QWORD *)v4[1] = v7;
  --*(_QWORD *)(a1 + 48);
  operator delete(v4);
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_build(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *i;
  _QWORD *v35;
  _QWORD *v36;

  v2 = a1[6];
  if (v2 != a1[7])
  {
    v3 = -v2;
    v4 = (char *)a1[6];
    do
    {
      v5 = (unint64_t *)*((_QWORD *)v4 + 1);
      v6 = *(uint64_t **)(*((_QWORD *)v4 + 2) + 8);
      if (v5)
        v7 = v6 == 0;
      else
        v7 = 1;
      if (v7
        || !boost::polygon::voronoi_diagram_traits<double>::vertex_equality_predicate_type::operator()((uint64_t)(a1 + 9), v5, v6))
      {
        if (v4 != (char *)v2)
        {
          v8 = *(_OWORD *)v4;
          v9 = *((_OWORD *)v4 + 2);
          *(_OWORD *)(v2 + 16) = *((_OWORD *)v4 + 1);
          *(_OWORD *)(v2 + 32) = v9;
          *(_OWORD *)v2 = v8;
          v10 = v2 + 48;
          v11 = *((_OWORD *)v4 + 5);
          v12 = *((_OWORD *)v4 + 3);
          *(_OWORD *)(v2 + 64) = *((_OWORD *)v4 + 4);
          *(_OWORD *)(v2 + 80) = v11;
          *(_OWORD *)(v2 + 48) = v12;
          *(_QWORD *)(v2 + 16) = v2 + 48;
          *(_QWORD *)(v2 + 64) = v2;
          v13 = *(_QWORD *)(v2 + 32);
          if (v13)
          {
            *(_QWORD *)(v13 + 24) = v2;
            *(_QWORD *)(*(_QWORD *)(v2 + 72) + 32) = v10;
          }
          if (*(_QWORD *)(v2 + 80))
          {
            *(_QWORD *)(*(_QWORD *)(v2 + 24) + 32) = v2;
            *(_QWORD *)(*(_QWORD *)(v2 + 80) + 24) = v10;
          }
        }
        v2 += 96;
      }
      else
      {
        boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::remove_edge((uint64_t)a1, v4);
      }
      v4 += 96;
      v3 -= 96;
    }
    while (v4 != (char *)a1[7]);
    v14 = (char *)a1[6];
    if (v4 != (char *)v2)
    {
      v15 = &v14[48 * ((v2 - (uint64_t)v14) / 48)];
      v16 = &v15[-v2 - v3];
      v17 = -v3 - (_QWORD)v16;
      if (v4 != v16)
      {
        memmove(v15, v16, v17);
        v14 = (char *)a1[6];
      }
      v4 = &v15[v17];
      a1[7] = (uint64_t)&v15[v17];
    }
    while (v14 != v4)
    {
      v18 = *((_QWORD *)v14 + 1);
      *(_QWORD *)(*(_QWORD *)v14 + 8) = v14;
      if (v18)
        *(_QWORD *)(v18 + 16) = v14;
      v14 += 48;
    }
  }
  v20 = (_OWORD *)a1[3];
  v19 = (_OWORD *)a1[4];
  if (v20 == v19)
    goto LABEL_46;
  v21 = (_OWORD *)a1[3];
  do
  {
    if (*((_QWORD *)v21 + 2))
    {
      if (v21 != v20)
      {
        v22 = v21[1];
        *v20 = *v21;
        v20[1] = v22;
        v23 = *((_QWORD *)v20 + 2);
        v24 = v23;
        do
        {
          *(_QWORD *)(v24 + 8) = v20;
          v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 16);
        }
        while (v24 != v23);
        v19 = (_OWORD *)a1[4];
      }
      v20 += 2;
    }
    v21 += 2;
  }
  while (v21 != v19);
  v25 = (_OWORD *)a1[3];
  if (v20 != v19)
  {
    v19 = v20;
    a1[4] = (uint64_t)v20;
  }
  if (v25 == v19)
  {
LABEL_46:
    v32 = (_QWORD *)a1[6];
    v33 = (_QWORD *)a1[7];
    if (v32 != v33)
    {
      v32[3] = v32;
      v32[4] = v32;
      for (i = v32 + 12; i != v33; i = v35 + 24)
      {
        v35 = v32;
        v36 = v32 + 6;
        v32 += 12;
        v35[9] = v32;
        v35[10] = v32;
        v35[15] = v36;
        v35[16] = v36;
      }
      v32[9] = v32 + 6;
      v32[10] = v32 + 6;
    }
  }
  else
  {
    v26 = *a1;
    v27 = a1[1];
    while (v26 != v27)
    {
      v28 = *(_QWORD *)(v26 + 8);
      if (v28)
      {
        v29 = *(_QWORD *)(v26 + 8);
        while (1)
        {
          v30 = *(_QWORD *)(v29 + 32);
          if (!v30)
            break;
          v29 = *(_QWORD *)(v29 + 32);
          if (v30 == v28)
          {
            v29 = *(_QWORD *)(v26 + 8);
            if (*(_QWORD *)(v28 + 32))
              goto LABEL_45;
            goto LABEL_43;
          }
        }
        do
        {
LABEL_43:
          v31 = v28;
          v28 = *(_QWORD *)(v28 + 24);
        }
        while (v28);
        *(_QWORD *)(v29 + 32) = v31;
        *(_QWORD *)(v31 + 24) = v29;
      }
LABEL_45:
      v26 += 24;
    }
  }
}

void std::vector<boost::polygon::voronoi_cell<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<boost::polygon::voronoi_vertex<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<boost::polygon::voronoi_edge<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>(v3, a2);
    v7 = &v6[48 * v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

LABEL_1:
  v9 = a2 - 10;
  v10 = (int *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2 - 10, v10))
        {
          v33 = *((_QWORD *)v10 + 4);
          v29 = *(_OWORD *)v10;
          v31 = *((_OWORD *)v10 + 1);
          v26 = *(_OWORD *)v9;
          v27 = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v26;
          *((_OWORD *)v10 + 1) = v27;
          *(_OWORD *)v9 = v29;
          *(_OWORD *)(a2 - 6) = v31;
          *((_QWORD *)a2 - 1) = v33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10, v10 + 10, a2 - 10, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, v10 + 10, v10 + 20, (__int128 *)(a2 - 10), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, v10 + 10, v10 + 20, (__int128 *)(v10 + 30), (__int128 *)(a2 - 10), a3);
        return;
      default:
        if (v13 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (uint64_t)a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[10 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v16, v10, a2 - 10, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10, v16, a2 - 10, a3);
            v17 = 5 * v15;
            v18 = &v10[10 * v15 - 10];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10 + 10, v18, a2 - 20, a3);
            v19 = v10 + 20;
            v20 = &v10[2 * v17 + 10];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v19, v20, a2 - 30, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v18, v16, v20, a3);
            v32 = *(_QWORD *)(a1 + 32);
            v28 = *(_OWORD *)a1;
            v30 = *(_OWORD *)(a1 + 16);
            v21 = *(_OWORD *)v16;
            v22 = *((_OWORD *)v16 + 1);
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            *((_QWORD *)v16 + 4) = v32;
            *(_OWORD *)v16 = v28;
            *((_OWORD *)v16 + 1) = v30;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a1 - 40), (int *)a1) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((int *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((__int128 *)a1, a2, a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v23, a3);
          v10 = (int *)(v23 + 40);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v23 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(a1, v23, a3, -v12, a5 & 1);
            v10 = (int *)(v23 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (int *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(uint64_t a1, int *a2, int *a3)
{
  int v3;
  BOOL v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  int v11;
  int v12;

  v3 = *a2;
  v4 = *a2 < *a3;
  if (*a2 != *a3)
    return v4;
  if (v3 != a2[2])
  {
    if (v3 == a3[2])
      return 0;
    v11 = a2[1];
    v12 = a3[1];
    v4 = v11 < v12;
    if (v11 == v12)
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2 + 2, a2, a3 + 2) == 1;
    return v4;
  }
  v5 = a2[1];
  v6 = a3[2];
  if (v5 != a2[3])
  {
    if (v3 != v6)
      return 1;
    return v5 < a3[1];
  }
  if (v3 != v6)
    return 1;
  v7 = a3[1];
  v4 = v5 < v7;
  v8 = v5 <= v7;
  v9 = v4;
  if (v7 == a3[3])
    return v9;
  else
    return v8;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (result != a2)
  {
    v21 = v3;
    v22 = v4;
    v6 = result;
    v7 = (int *)(result + 40);
    if (result + 40 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = (int *)v10;
        v10 = (uint64_t)v7;
        result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v7, v11);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)(v10 + 16);
          v18 = *(_OWORD *)v10;
          v19 = v12;
          v20 = *(_QWORD *)(v10 + 32);
          v13 = v9;
          while (1)
          {
            v14 = v6 + v13;
            v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 40) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + 56) = v15;
            *(_QWORD *)(v14 + 72) = *(_QWORD *)(v6 + v13 + 32);
            if (!v13)
              break;
            v13 -= 40;
            result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v18, (int *)(v13 + v6));
            if ((result & 1) == 0)
            {
              v16 = v6 + v13 + 40;
              goto LABEL_10;
            }
          }
          v16 = v6;
LABEL_10:
          v17 = v19;
          *(_OWORD *)v16 = v18;
          *(_OWORD *)(v16 + 16) = v17;
          *(_QWORD *)(v16 + 32) = v20;
        }
        v7 = (int *)(v10 + 40);
        v9 += 40;
      }
      while (v10 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  uint64_t v9;
  int *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = result;
    v7 = (int *)(result + 40);
    if (result + 40 != a2)
    {
      v9 = result - 40;
      do
      {
        v10 = (int *)v6;
        v6 = (uint64_t)v7;
        result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v7, v10);
        if ((_DWORD)result)
        {
          v11 = *(_OWORD *)(v6 + 16);
          v15 = *(_OWORD *)v6;
          v16 = v11;
          v17 = *(_QWORD *)(v6 + 32);
          v12 = v9;
          do
          {
            v13 = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 40);
            *(_OWORD *)(v12 + 96) = v13;
            *(_QWORD *)(v12 + 112) = *(_QWORD *)(v12 + 72);
            result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v15, (int *)v12);
            v12 -= 40;
          }
          while ((result & 1) != 0);
          v14 = v16;
          *(_OWORD *)(v12 + 80) = v15;
          *(_OWORD *)(v12 + 96) = v14;
          *(_QWORD *)(v12 + 112) = v17;
        }
        v7 = (int *)(v6 + 40);
        v9 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a2, a1);
  result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *(_OWORD *)a1;
      v11 = *((_OWORD *)a1 + 1);
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_9:
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      return result;
    }
    v25 = *(_OWORD *)a1;
    v26 = *((_OWORD *)a1 + 1);
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v26;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a3, a2))
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v15 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 1);
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *(_OWORD *)a3 = v15;
    *((_OWORD *)a3 + 1) = v16;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a2, a1))
    {
      v20 = *(_OWORD *)a1;
      v21 = *((_OWORD *)a1 + 1);
      v22 = *((_QWORD *)a1 + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      *((_QWORD *)a1 + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      result = 2;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>(int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  int *v7;
  int *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = a2;
  v6 = *((_OWORD *)a1 + 1);
  v22 = *(_OWORD *)a1;
  v23 = v6;
  v24 = *((_QWORD *)a1 + 4);
  if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)(a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 10;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v7) & 1) == 0);
  }
  else
  {
    v8 = a1 + 10;
    do
    {
      v7 = v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v8);
      v8 = v7 + 10;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v11 = *((_OWORD *)v7 + 1);
    v27 = *((_QWORD *)v7 + 4);
    v25 = v10;
    v26 = v11;
    v12 = *(_OWORD *)v4;
    v13 = *(_OWORD *)(v4 + 16);
    *((_QWORD *)v7 + 4) = *(_QWORD *)(v4 + 32);
    *(_OWORD *)v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v14 = v25;
    v15 = v26;
    *(_QWORD *)(v4 + 32) = v27;
    *(_OWORD *)v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    do
      v7 += 10;
    while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v7));
    do
      v4 -= 40;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)v4) & 1) != 0);
  }
  v16 = v7 - 10;
  if (v7 - 10 != a1)
  {
    v17 = *(_OWORD *)v16;
    v18 = *(_OWORD *)(v7 - 6);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v7 - 1);
    *(_OWORD *)a1 = v17;
    *((_OWORD *)a1 + 1) = v18;
  }
  v19 = v22;
  v20 = v23;
  *((_QWORD *)v7 - 1) = v24;
  *(_OWORD *)v16 = v19;
  *(_OWORD *)(v7 - 6) = v20;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>(__int128 *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v6 = 0;
  v7 = a1[1];
  v22 = *a1;
  v23 = v7;
  v24 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)((char *)a1 + v6), (int *)&v22) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 10;
    }
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2, (int *)&v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 10;
    while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2, (int *)&v22));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (unint64_t)a1 + v6;
    v11 = a2;
    do
    {
      v13 = *(_OWORD *)(v10 + 16);
      v25 = *(_OWORD *)v10;
      v12 = v25;
      v26 = v13;
      v27 = *(_QWORD *)(v10 + 32);
      v14 = v27;
      v16 = *(_OWORD *)v11;
      v15 = *((_OWORD *)v11 + 1);
      *(_QWORD *)(v10 + 32) = *((_QWORD *)v11 + 4);
      *(_OWORD *)v10 = v16;
      *(_OWORD *)(v10 + 16) = v15;
      *((_QWORD *)v11 + 4) = v14;
      *(_OWORD *)v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      do
        v10 += 40;
      while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v10, (int *)&v22) & 1) != 0);
      do
        v11 -= 10;
      while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v11, (int *)&v22));
    }
    while (v10 < (unint64_t)v11);
    v9 = v10 - 40;
  }
  if ((__int128 *)v9 != a1)
  {
    v17 = *(_OWORD *)v9;
    v18 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(_QWORD *)(v9 + 32) = v24;
  *(_OWORD *)v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 40;
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a2 - 40), (int *)a1))return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(v8 + 32) = v11;
      result = 1;
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, (int *)(a1 + 40), (int *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, (int *)(a1 + 40), (int *)(a1 + 80), (__int128 *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, (int *)(a1 + 40), (int *)(a1 + 80), (__int128 *)(a1 + 120), (__int128 *)(a2 - 40), a3);
      return 1;
    default:
      v14 = (int *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_QWORD *)(v20 + 152) = *(_QWORD *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v24, (int *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (int *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(int *a1, int *a2, int *a3)
{
  double v3;
  unsigned int v4;

  v3 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a1 - (uint64_t)*a2, a1[1] - (uint64_t)a2[1], *a2 - (uint64_t)*a3, a2[1] - (uint64_t)a3[1]);
  if (v3 >= 0.0)
    v4 = 1;
  else
    v4 = -1;
  if (v3 == 0.0)
    return 0;
  else
    return v4;
}

double boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double result;
  double v12;

  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = -a3;
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = v7 * v4;
  v9 = v6 * v5;
  v10 = a2 ^ a3;
  result = (double)(v8 - v9);
  v12 = (double)(v9 - v8);
  if (v8 < v9)
    result = -v12;
  if (v10 < 0)
    result = (double)(v8 + v9);
  if (v8 > v9)
    v12 = -(double)(v8 - v9);
  if (v10 >= 0)
    v12 = -(double)(v8 + v9);
  if ((a4 ^ a1) < 0)
    return v12;
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, int *a2, int *a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, a2, a3, a5);
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, (int *)a4, a3))
  {
    v11 = *(_OWORD *)a3;
    v12 = *((_OWORD *)a3 + 1);
    v13 = *((_QWORD *)a3 + 4);
    v14 = *((_QWORD *)a4 + 4);
    v15 = a4[1];
    *(_OWORD *)a3 = *a4;
    *((_OWORD *)a3 + 1) = v15;
    *((_QWORD *)a3 + 4) = v14;
    *((_QWORD *)a4 + 4) = v13;
    *a4 = v11;
    a4[1] = v12;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, a3, a2))
    {
      v16 = *(_OWORD *)a2;
      v17 = *((_OWORD *)a2 + 1);
      v18 = *((_QWORD *)a2 + 4);
      v19 = *((_QWORD *)a3 + 4);
      v20 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v20;
      *((_QWORD *)a2 + 4) = v19;
      *((_QWORD *)a3 + 4) = v18;
      *(_OWORD *)a3 = v16;
      *((_OWORD *)a3 + 1) = v17;
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, a2, (int *)a1))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *((_QWORD *)a2 + 4);
        v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_QWORD *)(a1 + 32) = v23;
        *((_QWORD *)a2 + 4) = v22;
        *(__n128 *)a2 = result;
        *((_OWORD *)a2 + 1) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, int *a2, int *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a2, a3, a4, a6);
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, (int *)a5, (int *)a4))
  {
    v13 = *a4;
    v14 = a4[1];
    v15 = *((_QWORD *)a4 + 4);
    v16 = *((_QWORD *)a5 + 4);
    v17 = a5[1];
    *a4 = *a5;
    a4[1] = v17;
    *((_QWORD *)a4 + 4) = v16;
    *((_QWORD *)a5 + 4) = v15;
    *a5 = v13;
    a5[1] = v14;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, (int *)a4, a3))
    {
      v18 = *(_OWORD *)a3;
      v19 = *((_OWORD *)a3 + 1);
      v20 = *((_QWORD *)a3 + 4);
      v21 = *((_QWORD *)a4 + 4);
      v22 = a4[1];
      *(_OWORD *)a3 = *a4;
      *((_OWORD *)a3 + 1) = v22;
      *((_QWORD *)a3 + 4) = v21;
      *((_QWORD *)a4 + 4) = v20;
      *a4 = v18;
      a4[1] = v19;
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, a3, a2))
      {
        v23 = *(_OWORD *)a2;
        v24 = *((_OWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 4);
        v26 = *((_QWORD *)a3 + 4);
        v27 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v27;
        *((_QWORD *)a2 + 4) = v26;
        *((_QWORD *)a3 + 4) = v25;
        *(_OWORD *)a3 = v23;
        *((_OWORD *)a3 + 1) = v24;
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, a2, (int *)a1))
        {
          result = *(__n128 *)a1;
          v28 = *(_OWORD *)(a1 + 16);
          v29 = *(_QWORD *)(a1 + 32);
          v30 = *((_QWORD *)a2 + 4);
          v31 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v31;
          *(_QWORD *)(a1 + 32) = v30;
          *((_QWORD *)a2 + 4) = v29;
          *(__n128 *)a2 = result;
          *((_OWORD *)a2 + 1) = v28;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, (int *)v14, (int *)a1))
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = *((_QWORD *)v14 + 4);
          v18 = *(_QWORD *)(a1 + 32);
          v19 = *(_OWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_QWORD *)v14 + 4) = v18;
          *(_QWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 41)
    {
      v20 = v8 / 0x28uLL;
      v21 = (uint64_t)a2 - 40;
      do
      {
        v27 = *(__n128 *)a1;
        v28 = *(_OWORD *)(a1 + 16);
        v29 = *(_QWORD *)(a1 + 32);
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v20);
        if (v21 == v22)
        {
          *(__n128 *)v22 = v27;
          *(_OWORD *)(v22 + 16) = v28;
          *(_QWORD *)(v22 + 32) = v29;
        }
        else
        {
          v23 = *(__n128 *)v21;
          v24 = *(_OWORD *)(v21 + 16);
          *(_QWORD *)(v22 + 32) = *(_QWORD *)(v21 + 32);
          *(__n128 *)v22 = v23;
          *(_OWORD *)(v22 + 16) = v24;
          *(_QWORD *)(v21 + 32) = v29;
          *(__n128 *)v21 = v27;
          *(_OWORD *)(v21 + 16) = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v22 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - a1) >> 3));
        }
        v21 -= 40;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v12), (int *)v13 + 10))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)v13, (int *)v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v20), (int *)v13 + 10))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)v13, (int *)&v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v6 + 40), (int *)(a1 + 40 * v6 + 80)))
    {
      v9 += 40;
      v10 = v11;
    }
    v12 = *(_OWORD *)v9;
    v13 = *(_OWORD *)(v9 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v13;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a4 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 40 * v8);
    v10 = (__int128 *)(a2 - 40);
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v9, (int *)(a2 - 40)))
    {
      v12 = v10[1];
      v17 = *v10;
      v18 = v12;
      v19 = *((_QWORD *)v10 + 4);
      do
      {
        v13 = v9;
        v14 = *v9;
        v15 = v9[1];
        *((_QWORD *)v10 + 4) = *((_QWORD *)v9 + 4);
        *v10 = v14;
        v10[1] = v15;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 40 * v8);
        v10 = v13;
      }
      while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v9, (int *)&v17) & 1) != 0);
      result = *(double *)&v17;
      v16 = v18;
      *v13 = v17;
      v13[1] = v16;
      *((_QWORD *)v13 + 4) = v19;
    }
  }
  return result;
}

unsigned int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int *i;
  __int128 v5;
  __int128 v6;

  result = std::__adjacent_find[abi:ne180100]<std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(a1, a2);
  if (result != a2)
  {
    for (i = result + 20; i != a2; i += 10)
    {
      if (*result != *i || result[1] != i[1] || result[2] != i[2] || result[3] != i[3])
      {
        v5 = *(_OWORD *)i;
        v6 = *((_OWORD *)i + 1);
        *((_QWORD *)result + 9) = *((_QWORD *)i + 4);
        *(_OWORD *)(result + 14) = v6;
        *(_OWORD *)(result + 10) = v5;
        result += 10;
      }
    }
    result += 10;
  }
  return result;
}

unsigned int *std::__adjacent_find[abi:ne180100]<std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if (result != a2)
  {
    v2 = result + 10;
    if (result + 10 == a2)
    {
      return a2;
    }
    else
    {
      v3 = *result;
      while (1)
      {
        v4 = v3;
        v3 = *v2;
        if (__PAIR64__(*(v2 - 9), v4) == *(_QWORD *)v2 && *(v2 - 8) == v2[2] && *(v2 - 7) == v2[3])
          break;
        v2 += 10;
        if (v2 == a2)
          return a2;
      }
      return v2 - 10;
    }
  }
  return result;
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_process_single_site<int>(void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32) & 0x1FLL;
  v7 = (unint64_t)a1[2];
  v5 = (uint64_t)(a1 + 2);
  v6 = v7;
  v8 = *(_QWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(v5, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    *(_QWORD *)v15 = v3;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v4;
    v9 = v15 + 24;
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v15 - 24) = v19;
        v15 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v8 = v3;
    v8[1] = 0;
    v9 = v8 + 3;
    v8[2] = v4;
  }
  a1[1] = v9;
}

uint64_t *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line_collinear_sites<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *result, char **a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  char *inserted;
  uint64_t v10;
  _OWORD v11[5];
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[48];

  v2 = result[1];
  if (v2 + 40 != result[4])
  {
    v4 = result;
    v5 = (uint64_t **)(result + 16);
    v6 = result + 17;
    do
    {
      v7 = *(_OWORD *)(v2 + 16);
      v14 = *(_OWORD *)v2;
      v15 = v7;
      *(_QWORD *)v16 = *(_QWORD *)(v2 + 32);
      v8 = *(_OWORD *)(v2 + 56);
      *(_OWORD *)&v16[8] = *(_OWORD *)(v2 + 40);
      *(_OWORD *)&v16[24] = v8;
      *(_QWORD *)&v16[40] = *(_QWORD *)(v2 + 72);
      inserted = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(a2, v2, v2 + 40);
      v11[2] = *(_OWORD *)v16;
      v11[3] = *(_OWORD *)&v16[16];
      v11[4] = *(_OWORD *)&v16[32];
      v11[0] = v14;
      v11[1] = v15;
      v12 = 0;
      v13 = inserted;
      result = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(v5, v6, (uint64_t)v11, v11);
      v10 = v2 + 80;
      v2 += 40;
    }
    while (v10 != v4[4]);
  }
  return result;
}

uint64_t *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, char **a6)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *inserted;
  char *v18;
  uint64_t *v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int8x16_t v37;
  __int128 v38;
  _BYTE v39[48];
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  int8x16_t v46;
  __int128 v47;
  _BYTE v48[48];

  v9 = *(_OWORD *)(a2 + 16);
  v46 = *(int8x16_t *)a2;
  v47 = v9;
  v10 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)&v48[8] = *(_OWORD *)a4;
  *(_OWORD *)&v48[24] = *(_OWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)v48 = v10;
  *(_QWORD *)&v48[40] = v11;
  v13 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v45 = *(_OWORD *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 32);
  v15 = *(_OWORD *)(a3 + 16);
  v42 = *(_OWORD *)a3;
  v43 = v15;
  v44 = *(_QWORD *)(a3 + 32);
  if (v13 == v12)
  {
    v16 = v13;
    v13 = v12;
  }
  else
  {
    v14 ^= 0x20uLL;
    v16 = v12;
  }
  inserted = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(a6, a3, a4);
  v38 = v45;
  *(_OWORD *)&v39[8] = v42;
  v37.i64[0] = v16;
  v37.i64[1] = v13;
  *(_QWORD *)v39 = v14;
  *(_OWORD *)&v39[24] = v43;
  *(_QWORD *)&v39[40] = v44;
  v40 = 0;
  v41 = v18;
  v19 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), a5, (uint64_t)&v37, &v37);
  if (*(_DWORD *)a4 != *(_DWORD *)(a4 + 8) || *(_DWORD *)(a4 + 4) != *(_DWORD *)(a4 + 12))
  {
    v20 = *(_OWORD *)(a4 + 16);
    v37 = *(int8x16_t *)a4;
    v38 = v20;
    *(_OWORD *)&v39[24] = *(_OWORD *)(a4 + 16);
    *(_QWORD *)v39 = *(_QWORD *)(a4 + 32);
    *(int8x16_t *)&v39[8] = vextq_s8(v37, v37, 8uLL);
    v40 = 0;
    v41 = 0;
    *(_QWORD *)&v39[40] = *(_QWORD *)v39 ^ 0x20;
    v19 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), v19, (uint64_t)&v37, &v37);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(a4 + 8);
    v23 = *(_QWORD **)(a1 + 48);
    if ((unint64_t)v23 >= v21)
    {
      v25 = *(_QWORD *)(a1 + 40);
      v26 = ((uint64_t)v23 - v25) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
      v28 = v21 - v25;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PointInt64>>(a1 + 56, v29);
      else
        v30 = 0;
      v31 = &v30[16 * v26];
      v32 = &v30[16 * v29];
      *(_QWORD *)v31 = v22;
      *((_QWORD *)v31 + 1) = v19;
      v24 = (uint64_t)(v31 + 16);
      v34 = *(char **)(a1 + 40);
      v33 = *(char **)(a1 + 48);
      if (v33 != v34)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v33 - 1);
          v31 -= 16;
          v33 -= 16;
        }
        while (v33 != v34);
        v33 = *(char **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v24;
      *(_QWORD *)(a1 + 56) = v32;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v23 = v22;
      v23[1] = v19;
      v24 = (uint64_t)(v23 + 2);
    }
    *(_QWORD *)(a1 + 48) = v24;
    v35 = *(_QWORD *)(a1 + 40);
    v37.i8[0] = *(_BYTE *)(a1 + 64);
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(v35, v24, (uint64_t)&v37, (v24 - v35) >> 4);
  }
  *(_OWORD *)v39 = *(_OWORD *)v48;
  *(_OWORD *)&v39[16] = *(_OWORD *)&v48[16];
  *(_OWORD *)&v39[32] = *(_OWORD *)&v48[32];
  v37 = v46;
  v38 = v47;
  v40 = 0;
  v41 = inserted;
  return std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), v19, (uint64_t)&v37, &v37);
}

char *boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  char *v69;
  char *v70;
  char *v71;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)a3);
  v9 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)a3);
  v10 = (unint64_t)a1[8];
  v11 = a1 + 6;
  if (v9)
    v12 = v8 | 2;
  else
    v12 = v8;
  v13 = (unint64_t)a1[7];
  if (v13 >= v10)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 4);
    v16 = v15 + 1;
    if (v15 + 1 > 0x555555555555555)
      goto LABEL_67;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v11) >> 4);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x2AAAAAAAAAAAAAALL)
      v18 = 0x555555555555555;
    else
      v18 = v16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v18);
    else
      v19 = 0;
    v20 = &v19[48 * v15];
    v21 = &v19[48 * v18];
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_QWORD *)v20 + 4) = 0;
    *((_QWORD *)v20 + 5) = v12;
    v14 = v20 + 48;
    v23 = a1[6];
    v22 = a1[7];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 3);
        v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v20 - 1) = v25;
        *((_OWORD *)v20 - 3) = v24;
        v20 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      v22 = (char *)*v11;
    }
    a1[6] = v20;
    a1[7] = v14;
    a1[8] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = v12;
    v14 = (char *)(v13 + 48);
  }
  a1[7] = v14;
  v26 = (unint64_t)a1[8];
  if ((unint64_t)v14 < v26)
  {
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_QWORD *)v14 + 4) = 0;
    *((_QWORD *)v14 + 5) = v12;
    v27 = v14 + 48;
    goto LABEL_36;
  }
  v28 = v6;
  v29 = v7;
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*v11] >> 4);
  if (v30 + 1 > 0x555555555555555)
LABEL_67:
    std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v11) >> 4);
  v32 = 2 * v31;
  if (2 * v31 <= v30 + 1)
    v32 = v30 + 1;
  if (v31 >= 0x2AAAAAAAAAAAAAALL)
    v33 = 0x555555555555555;
  else
    v33 = v32;
  if (v33)
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v33);
  else
    v34 = 0;
  v35 = &v34[48 * v30];
  v36 = &v34[48 * v33];
  *(_OWORD *)v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  *((_QWORD *)v35 + 4) = 0;
  *((_QWORD *)v35 + 5) = v12;
  v27 = v35 + 48;
  v38 = a1[6];
  v37 = a1[7];
  v7 = v29;
  if (v37 != v38)
  {
    do
    {
      v39 = *((_OWORD *)v37 - 3);
      v40 = *((_OWORD *)v37 - 1);
      *((_OWORD *)v35 - 2) = *((_OWORD *)v37 - 2);
      *((_OWORD *)v35 - 1) = v40;
      *((_OWORD *)v35 - 3) = v39;
      v35 -= 48;
      v37 -= 48;
    }
    while (v37 != v38);
    v37 = (char *)*v11;
  }
  v6 = v28;
  a1[6] = v35;
  a1[7] = v27;
  a1[8] = v36;
  if (v37)
    operator delete(v37);
LABEL_36:
  a1[7] = v27;
  v41 = *a1;
  v42 = a1[1];
  if (*a1 == v42)
  {
    v43 = *(_QWORD *)(a2 + 24);
    v44 = *(_QWORD *)(a2 + 32) & 0x1FLL;
    v45 = (unint64_t)a1[2];
    if ((unint64_t)v41 >= v45)
    {
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v41) >> 3);
      v47 = 2 * v46;
      if (2 * v46 <= 1)
        v47 = 1;
      if (v46 >= 0x555555555555555)
        v48 = 0xAAAAAAAAAAAAAAALL;
      else
        v48 = v47;
      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>((uint64_t)(a1 + 2), v48);
      v51 = &v49[24 * v50];
      *(_QWORD *)v49 = v43;
      *((_QWORD *)v49 + 1) = 0;
      *((_QWORD *)v49 + 2) = v44;
      v42 = v49 + 24;
      v53 = *a1;
      v52 = a1[1];
      if (v52 != *a1)
      {
        do
        {
          v54 = *(_OWORD *)(v52 - 24);
          *((_QWORD *)v49 - 1) = *((_QWORD *)v52 - 1);
          *(_OWORD *)(v49 - 24) = v54;
          v49 -= 24;
          v52 -= 24;
        }
        while (v52 != v53);
        v52 = *a1;
      }
      *a1 = v49;
      a1[1] = v42;
      a1[2] = v51;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_QWORD *)v41 = v43;
      *((_QWORD *)v41 + 1) = 0;
      v42 = v41 + 24;
      *((_QWORD *)v41 + 2) = v44;
    }
    a1[1] = v42;
  }
  v55 = *(_QWORD *)(a3 + 24);
  v56 = *(_QWORD *)(a3 + 32) & 0x1FLL;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v42 >= v57)
  {
    v59 = 0xAAAAAAAAAAAAAAABLL * ((v42 - *a1) >> 3);
    if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)*a1) >> 3);
    v61 = 2 * v60;
    if (2 * v60 <= v59 + 1)
      v61 = v59 + 1;
    if (v60 >= 0x555555555555555)
      v62 = 0xAAAAAAAAAAAAAAALL;
    else
      v62 = v61;
    if (v62)
      v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>((uint64_t)(a1 + 2), v62);
    else
      v63 = 0;
    v64 = &v63[24 * v59];
    v65 = &v63[24 * v62];
    *(_QWORD *)v64 = v55;
    *((_QWORD *)v64 + 1) = 0;
    *((_QWORD *)v64 + 2) = v56;
    v58 = v64 + 24;
    v67 = *a1;
    v66 = a1[1];
    if (v66 != *a1)
    {
      do
      {
        v68 = *(_OWORD *)(v66 - 24);
        *((_QWORD *)v64 - 1) = *((_QWORD *)v66 - 1);
        *(_OWORD *)(v64 - 24) = v68;
        v64 -= 24;
        v66 -= 24;
      }
      while (v66 != v67);
      v66 = *a1;
    }
    *a1 = v64;
    a1[1] = v58;
    a1[2] = v65;
    if (v66)
      operator delete(v66);
  }
  else
  {
    *(_QWORD *)v42 = v55;
    *((_QWORD *)v42 + 1) = 0;
    v58 = v42 + 24;
    *((_QWORD *)v42 + 2) = v56;
  }
  a1[1] = v58;
  v69 = *a1;
  *((_QWORD *)v14 - 6) = &(*a1)[24 * v6];
  v70 = v14 - 48;
  *((_QWORD *)v27 - 6) = &v69[24 * v7];
  v71 = v27 - 48;
  *((_QWORD *)v70 + 2) = v71;
  *((_QWORD *)v71 + 2) = v70;
  return v70;
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>(uint64_t a1, int *a2, int *a3)
{
  _BOOL4 v6;
  _BOOL4 v8;

  if (!boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>(a1, a2, a3))return 1;
  v6 = *a2 != a2[2] || a2[1] != a2[3];
  v8 = *a3 != a3[2] || a3[1] != a3[3];
  return v6 ^ v8 ^ 1u;
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>(uint64_t a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v16;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v8 = *a2 != v6 || v3 != v5;
  v9 = *a3;
  v10 = a3[2];
  if (*a3 == v10)
  {
    v11 = a3[1];
    v12 = a3[3];
    v13 = v11 != v12;
    if (v8 && v11 == v12)
    {
      v16 = v6 != v9 || v5 != v11;
      return (v4 != v9 || v3 != v11) && v16;
    }
  }
  else
  {
    v13 = 1;
  }
  if (v8 || !v13)
    return 1;
  if (v9 == v4 && a3[1] == v3)
    return 0;
  if (v10 != v4)
    return 1;
  return a3[3] != v3;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x80uLL);
    v9 = a4[3];
    *((_OWORD *)v7 + 4) = a4[2];
    *((_OWORD *)v7 + 5) = v9;
    v10 = a4[5];
    *((_OWORD *)v7 + 6) = a4[4];
    *((_OWORD *)v7 + 7) = v10;
    v11 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v11;
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(a1, v14, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), (uint64_t)(v12 + 4), a5))goto LABEL_16;
    return std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>((uint64_t)a1, a3, a5);
  }
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 24;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(v7, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(v7, v9, a3))break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int *v15;
  int v16;
  int v17;
  _BOOL4 v18;
  int *v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  unint64_t comparison_y;
  BOOL v34;
  _BOOL4 v35;
  unint64_t v36;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 56);
  if (v4 <= v5)
    v6 = 40;
  else
    v6 = 0;
  if (v4 <= v5)
    v7 = a2 + 40;
  else
    v7 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 56);
  if (v8 <= v9)
    v10 = 40;
  else
    v10 = 0;
  if (v8 <= v9)
    v11 = a3 + 40;
  else
    v11 = a3;
  v12 = *(_DWORD *)(a2 + v6);
  v13 = *(_DWORD *)(v7 + 8);
  v14 = *(_DWORD *)(v7 + 4) < *(_DWORD *)(v7 + 12);
  if (v12 != v13)
    v14 = v12 < v13;
  if (v14)
  {
    v13 = *(_DWORD *)(a2 + v6);
    v15 = (int *)v7;
  }
  else
  {
    v15 = (int *)(v7 + 8);
  }
  v16 = *(_DWORD *)(v11 + 8);
  v17 = *(_DWORD *)(a3 + v10);
  v18 = *(_DWORD *)(v11 + 4) < *(_DWORD *)(v11 + 12);
  if (v17 != v16)
    v18 = v17 < v16;
  if (!v18)
    v17 = *(_DWORD *)(v11 + 8);
  if (v13 < v17)
  {
    if (v18)
      v19 = (int *)v11;
    else
      v19 = (int *)(v11 + 8);
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(a1 + 1, (int *)a2, (int *)(a2 + 40), v19);
  }
  if (v13 > v17)
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(a1 + 1, (int *)a3, (int *)(a3 + 40), v15) ^ 1;
  v21 = *(_QWORD *)(v7 + 16);
  v22 = *(_QWORD *)(v11 + 16);
  if (v21 == v22)
  {
    if (v4 == v5)
    {
      v23 = *(unsigned int *)(a2 + 4);
    }
    else if (v4 > v5)
    {
      v23 = *(unsigned int *)(a2 + 12) | 0x100000000;
    }
    else
    {
      v23 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
    }
    if (v8 == v9)
    {
      v36 = *(unsigned int *)(a3 + 4);
    }
    else if (v8 > v9)
    {
      v36 = *(unsigned int *)(a3 + 12) | 0x100000000;
    }
    else
    {
      v36 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
    }
    if ((int)v23 < (int)v36)
      return 1;
    return (int)v36 >= (int)v23 && SHIDWORD(v23) < SHIDWORD(v36);
  }
  if (v21 >= v22)
  {
    v31 = (int *)(a2 + 44);
    if (v4 > v5)
      v31 = (int *)(a2 + 12);
    if (v4 == v5)
      v31 = (int *)(a2 + 4);
    v32 = *v31;
    comparison_y = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(a1, a3, 0);
    v34 = v32 < (int)comparison_y;
    if (v32 != (_DWORD)comparison_y)
      return v34;
    v35 = *(_DWORD *)v11 != *(_DWORD *)(v11 + 8) || *(_DWORD *)(v11 + 4) != *(_DWORD *)(v11 + 12);
    return SHIDWORD(comparison_y) > 0 || v35;
  }
  else
  {
    v24 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(a1, a2, 0);
    v25 = *(_QWORD *)(a3 + 16);
    v26 = *(_QWORD *)(a3 + 56);
    v27 = (int *)(a3 + 44);
    if (v25 > v26)
      v27 = (int *)(a3 + 12);
    if (v25 == v26)
      v28 = (int *)(a3 + 4);
    else
      v28 = v27;
    v29 = *v28;
    if (v29 == (_DWORD)v24)
    {
      v30 = *(_DWORD *)v7 == *(_DWORD *)(v7 + 8) && *(_DWORD *)(v7 + 4) == *(_DWORD *)(v7 + 12);
      return v24 < 0 && v30;
    }
    else
    {
      return v29 > (int)v24;
    }
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(uint64_t a1, int *a2, int *a3, int *a4)
{
  int *v4;
  int v6;

  v4 = a2;
  if (*a2 == a2[2] && a2[1] == a2[3])
  {
    if (*a3 == a3[2] && a3[1] == a3[3])
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::pp(a1, a2, a3, a4);
    v6 = 0;
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(a1, a2, a3, a4, v6);
  }
  if (*a3 == a3[2] && a3[1] == a3[3])
  {
    a2 = a3;
    a3 = v4;
    v6 = 1;
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(a1, a2, a3, a4, v6);
  }
  return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ss(a1, (uint64_t)a2, (uint64_t)a3, a4);
}

unint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 56);
  if (v3 == v4)
    return *(unsigned int *)(a2 + 4);
  if (v3 <= v4)
    return *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
  if ((a3 & 1) != 0
    || *(_DWORD *)a2 != *(_DWORD *)(a2 + 8)
    || (v6 = *(unsigned int *)(a2 + 4), (_DWORD)v6 == *(_DWORD *)(a2 + 12)))
  {
    v6 = *(unsigned int *)(a2 + 12);
  }
  return v6 | 0x100000000;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::pp(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double v9;
  int v10;

  v4 = *a2;
  v5 = *a3;
  if (*a2 <= *a3)
  {
    if (v4 >= v5)
      return a3[1] + (uint64_t)a2[1] < 2 * a4[1];
    v6 = a4[1];
    v8 = a3[1];
    if (v6 < v8)
    {
      v7 = a2[1];
      goto LABEL_8;
    }
    return 1;
  }
  else
  {
    v6 = a4[1];
    v7 = a2[1];
    if (v6 > v7)
    {
      v8 = a3[1];
LABEL_8:
      v9 = (double)v4;
      v10 = *a4;
      return (((double)v7 - (double)v6) * ((double)v7 - (double)v6) + (v9 - (double)v10) * (v9 - (double)v10))
           / (v9 - (double)v10 + v9 - (double)v10) < (((double)v8 - (double)v6) * ((double)v8 - (double)v6)
                                                    + ((double)v5 - (double)v10) * ((double)v5 - (double)v10))
                                                   / ((double)v5 - (double)v10 + (double)v5 - (double)v10);
    }
    return 0;
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  int v10;
  double v12;
  double v13;
  double v14;

  v10 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::fast_ps(a1, a2, a3, a4, a5);
  if (v10)
    return v10 == -1;
  v12 = (double)*a2 - (double)*a4;
  v13 = (((double)a2[1] - (double)a4[1]) * ((double)a2[1] - (double)a4[1]) + v12 * v12) / (v12 + v12);
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, a3, a4);
  return (v13 < v14) ^ a5;
}

BOOL boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ss(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  double v8;
  double v9;
  double v10;

  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a3 + 16))
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a2, (int *)(a2 + 8), a4) == 1;
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, (int *)a2, a4);
  v9 = v8;
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, (int *)a3, a4);
  return v9 < v10;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::fast_ps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  unsigned int v29;

  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a3, a3 + 2, a4) == -1)
  {
    v10 = a4[1];
    v11 = a2[1];
    v12 = a3[2];
    v13 = *a3;
    if ((_DWORD)v13 == (_DWORD)v12)
    {
      if ((int)v10 >= (int)v11 || a5)
      {
        if ((int)v10 > (int)v11)
          v18 = a5;
        else
          v18 = 0;
        return (v18 << 31 >> 31);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      v14 = *a4;
      v15 = *a2;
      v16 = a3[3];
      v17 = a3[1];
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v12 - v13, v16 - v17, v14 - v15, v10 - v11) <= 0.0)
      {
        v19 = (double)(int)v14 - (double)(int)v15;
        v20 = (double)(int)v10 - (double)(int)v11;
        v21 = (v20 - v19) * ((v19 + v20) * ((double)(int)v12 - (double)(int)v13));
        v22 = v20 * (v19 * ((double)(int)v16 - (double)(int)v17 + (double)(int)v16 - (double)(int)v17));
        v23 = v21;
        v24 = v22;
        if (v21 >= 0.0)
          *(_QWORD *)&v23 = 0x8000000000000000 - *(_QWORD *)&v21;
        if (v22 >= 0.0)
          *(_QWORD *)&v24 = 0x8000000000000000 - *(_QWORD *)&v22;
        if (*(_QWORD *)&v23 - *(_QWORD *)&v24 <= 4uLL)
          v25 = 0;
        else
          v25 = -1;
        if (*(_QWORD *)&v23 > *(_QWORD *)&v24)
          v26 = v25;
        else
          v26 = *(_QWORD *)&v24 - *(_QWORD *)&v23 > 4uLL;
        v27 = v26;
        v28 = v26 ^ a5;
        if (a5)
          v29 = -1;
        else
          v29 = 1;
        if ((v27 & v28) != 0)
          return v29;
        else
          return 0;
      }
      else if ((a3[8] & 0x20) != 0)
      {
        return a5 ^ 1u;
      }
      else
      {
        return (a5 << 31 >> 31);
      }
    }
  }
  else if ((a3[8] & 0x20) != 0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[2];
  if ((_DWORD)v3 != (_DWORD)v4)
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v4 - v3, a2[3] - (uint64_t)a2[1], *a3 - v3, a3[1] - (uint64_t)a2[1]);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = result + 16 * v4;
    v7 = *(_DWORD *)(a2 - 16);
    v8 = *(_DWORD *)(a2 - 12);
    v6 = (_OWORD *)(a2 - 16);
    v9 = v8 < *(_DWORD *)(v5 + 4);
    v10 = v7 == *(_DWORD *)v5;
    v11 = v7 < *(_DWORD *)v5;
    if (v10)
      v11 = v9;
    if (v11)
    {
      v12 = *v6;
      v13 = *(_QWORD *)v6;
      v14 = HIDWORD(*(_QWORD *)v6);
      do
      {
        v15 = v6;
        v6 = (_OWORD *)v5;
        *v15 = *(_QWORD *)v5;
        v15[1] = *(_QWORD *)(v5 + 8);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = result + 16 * v4;
        v16 = *(_DWORD *)v5 > (int)v13;
        if (*(_DWORD *)v5 == (_DWORD)v13)
          v16 = *(_DWORD *)(v5 + 4) > (int)v14;
      }
      while (v16);
      *v6 = v12;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x80uLL);
    v9 = a4[3];
    *((_OWORD *)v7 + 4) = a4[2];
    *((_OWORD *)v7 + 5) = v9;
    v10 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v10;
    v11 = a4[5];
    *((_OWORD *)v7 + 6) = a4[4];
    *((_OWORD *)v7 + 7) = v11;
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(a1, v14, v8, v7);
  }
  return v7;
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  BYTE8(v11) = 1;
  result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::operator()(a1 + 160, a2, a3, a4, (uint64_t)&v10);
  if ((_DWORD)result)
  {
    v8[0] = v10;
    v8[1] = v11;
    v9 = a5;
    result = boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::push((char **)(a1 + 72), (uint64_t)v8);
    *(_QWORD *)(a5 + 112) = result;
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = (uint64_t)&a1[2 * v3 + 2];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = *(_DWORD *)(v6 + 16);
      v10 = v9 == *(_DWORD *)v6;
      v11 = v9 < *(_DWORD *)v6;
      if (v10)
        v11 = *(_DWORD *)(v6 + 20) < *(_DWORD *)(v6 + 4);
      if (v11)
      {
        v6 += 16;
        v7 = v8;
      }
    }
    *a1 = *(_QWORD *)v6;
    a1[1] = *(_QWORD *)(v6 + 8);
    a1 = (_QWORD *)v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::operator()(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  int *v7;
  int *v8;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;

  v6 = (int *)a4;
  v7 = a3;
  v8 = (int *)a2;
  if (*(_DWORD *)a2 == *(_DWORD *)(a2 + 8))
  {
    v10 = *(_DWORD *)(a2 + 4);
    if (v10 == *(_DWORD *)(a2 + 12))
    {
      v11 = a3[2];
      if (*a3 == v11 && a3[1] == a3[3])
      {
        if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
        {
          if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a2, a3, (int *)a4) == -1)
          {
            boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp(a1 + 4, v8, v7, v6, a5);
LABEL_39:
            if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v8)&& !boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v7))
            {
              return !boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v6);
            }
            return 0;
          }
          return 0;
        }
        result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(a1 + 2, (int *)a2, a3, (int *)a4, 3);
        if (!(_DWORD)result)
          return result;
        v13 = a1 + 4;
        a2 = (uint64_t)v8;
        v14 = v7;
        v15 = v6;
        v16 = 3;
LABEL_38:
        boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(v13, (int *)a2, v14, v15, v16, a5);
        goto LABEL_39;
      }
      if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8))
      {
        v21 = *(_DWORD *)(a4 + 4);
        if (v21 == *(_DWORD *)(a4 + 12))
        {
          if (*a3 == *(_DWORD *)a2 && v11 == *(_DWORD *)a4 && a3[1] == v10 && a3[3] == v21)
            return 0;
          v13 = a1 + 4;
          v14 = (int *)a4;
          v15 = v7;
          v16 = 2;
          goto LABEL_38;
        }
      }
      if (*((_QWORD *)a3 + 2) == *(_QWORD *)(a4 + 16))
        return 0;
      v17 = a1 + 4;
      v18 = 1;
LABEL_35:
      boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(v17, (int *)a2, a3, (int *)a4, v18, a5);
      goto LABEL_39;
    }
  }
  if (*a3 == a3[2] && a3[1] == a3[3])
  {
    if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
    {
      result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(a1 + 2, a3, (int *)a4, (int *)a2, 1);
      if (!(_DWORD)result)
        return result;
      v13 = a1 + 4;
      a2 = (uint64_t)v7;
      v14 = v6;
      v15 = v8;
      v16 = 1;
      goto LABEL_38;
    }
    result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pss(a1 + 2, a3, a2, a4, 2);
    if (!(_DWORD)result)
      return result;
    v17 = a1 + 4;
    a2 = (uint64_t)v7;
    a3 = v8;
    a4 = (uint64_t)v6;
    v18 = 2;
    goto LABEL_35;
  }
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
  {
    if (*(_QWORD *)(a2 + 16) == *((_QWORD *)a3 + 2))
      return 0;
    v17 = a1 + 4;
    a2 = a4;
    a3 = v8;
    a4 = (uint64_t)v7;
    v18 = 3;
    goto LABEL_35;
  }
  v19 = *((_QWORD *)a3 + 2);
  if (*(_QWORD *)(a2 + 16) != v19 && v19 != *(_QWORD *)(a4 + 16))
  {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss(a1 + 4, (int *)a2, a3, (int *)a4, a5);
    goto LABEL_39;
  }
  return 0;
}

uint64_t boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::push(char **a1, uint64_t a2)
{
  char **v4;
  _OWORD *v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v23;

  v4 = a1 + 4;
  v5 = operator new(0x38uLL);
  v6 = *(_OWORD *)(a2 + 16);
  v5[1] = *(_OWORD *)a2;
  v5[2] = v6;
  *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 32);
  v7 = a1[5];
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v7;
  *(_QWORD *)v7 = v5;
  v8 = (unint64_t)a1[2];
  a1[5] = (char *)v5;
  ++a1[6];
  v9 = a1[1];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (v9 - *a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v5;
    v10 = (uint64_t)(v16 + 8);
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v16;
    a1[1] = (char *)v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v9 = v5;
    v10 = (uint64_t)(v9 + 8);
  }
  a1[1] = (char *)v10;
  v21 = (uint64_t)*a1;
  v23 = *((_WORD *)a1 + 12);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(v21, v10, (uint64_t)&v23, (v10 - v21) >> 3);
  return (uint64_t)(a1[5] + 16);
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v9 = *a2;
  v10 = a2[1];
  v11 = *a3;
  v12 = a3[1];
  v13 = (double)(int)v9 - (double)(int)v11;
  v14 = *a4;
  v15 = a4[1];
  v16 = (double)(int)v11 - (double)(int)v14;
  v17 = (double)(int)v10 - (double)(int)v12;
  v18 = (double)(int)v12 - (double)(int)v15;
  v19 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v9 - v11, v11 - v14, v10 - v12, v12 - v15);
  v20 = (double)*a2;
  v21 = (double)*a3;
  v22 = (double)*a4;
  v23 = 0.5 / v19;
  v24 = v20 + v21;
  v25 = v21 + v22;
  v26 = (double)a2[1];
  v27 = (double)a3[1];
  v28 = (double)a4[1];
  v29 = v26 + v27;
  v30 = v27 + v28;
  v44 = v20 - v22;
  v45 = v23;
  v43 = v26 - v28;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v31 = v13 * v24;
  *(double *)&v47 = v18 * (v13 * v24);
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v51, (double *)&v47);
  v32 = v17 * v29;
  *(double *)&v47 = v18 * v32;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v51, (double *)&v47);
  v33 = v16 * v25;
  *(double *)&v47 = v17 * v33;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v51, (double *)&v47);
  v34 = v18 * v30;
  *(double *)&v47 = v17 * v34;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v51, (double *)&v47);
  *(double *)&v47 = v13 * v33;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v49, (double *)&v47);
  *(double *)&v47 = v13 * v34;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v49, (double *)&v47);
  *(double *)&v47 = v16 * v31;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v49, (double *)&v47);
  *(double *)&v47 = v16 * v32;
  *((_QWORD *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v49, (double *)&v47);
  v47 = v51;
  v48 = v52;
  v46[0] = sqrt((v17 * v17 + v13 * v13) * (v18 * v18 + v16 * v16) * (v43 * v43 + v44 * v44));
  v46[1] = 5.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v47, v46);
  v35 = v45 * boost::polygon::detail::robust_fpt<double>::operator-((double *)&v51, (double *)&v52);
  v36 = v45 * boost::polygon::detail::robust_fpt<double>::operator-((double *)&v49, (double *)&v50);
  v37 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v47, (double *)&v48);
  *(double *)a5 = v35;
  *(double *)(a5 + 8) = v36;
  *(double *)(a5 + 16) = v45 * v37;
  *(_BYTE *)(a5 + 24) = 1;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v51, (double *)&v52);
  v39 = v38;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v49, (double *)&v50);
  v41 = v40;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v47, (double *)&v48);
  if (v39 > 64.0 || v41 > 64.0 || v42 > 64.0)
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp();
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  int v10;
  int v11;

  if (a5 == 2)
  {
    if (*a4 == *a2 && a4[1] == a2[1] && a4[2] == *a3)
      return a4[3] != a3[1];
    return 1;
  }
  v10 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2, a3, a4);
  v11 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2, a3, a4 + 2);
  if (a5 != 3)
  {
    if (a5 == 1 && *a2 >= *a3)
      return v10 == -1;
LABEL_12:
    if (v10 == -1)
      return 1;
    return v11 == -1;
  }
  if (*a3 < *a2)
    goto LABEL_12;
  return v11 == -1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __int128 v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double v86[3];
  double v87[2];
  double v88[3];

  v12 = *a4;
  v13 = a4[1];
  v14 = (double)(int)v12;
  v15 = a4[2];
  v16 = a4[3];
  v18 = *a3;
  v17 = a3[1];
  v20 = *a2;
  v19 = a2[1];
  v21 = (double)(int)v17 - (double)(int)v19;
  v71 = (double)(int)v20;
  v72 = (double)(int)v15;
  v22 = (double)(int)v18;
  v23 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v16 - v13, v12 - v15, v18 - v20, v17 - v19);
  v24 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[1] - (uint64_t)a4[3], *a4 - (uint64_t)a4[2], a4[3] - (uint64_t)a2[1], a4[2] - (uint64_t)*a2);
  v88[0] = v24;
  v88[1] = 1.0;
  v25 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[1] - (uint64_t)a4[3], *a4 - (uint64_t)a4[2], a4[3] - (uint64_t)a3[1], a4[2] - (uint64_t)*a3);
  v87[1] = 1.0;
  v26 = a2[1] - (uint64_t)a3[1];
  v27 = *a2 - (uint64_t)*a3;
  v28 = a4[2];
  v29 = *a4;
  v30 = a4[3] - (uint64_t)a4[1];
  v87[0] = v25;
  v31 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v26, v27, v30, v28 - v29);
  v32 = 1.0;
  v85 = 0u;
  *(_OWORD *)v86 = 0u;
  if (v31 == 0.0)
  {
    *(double *)&v83 = v23 / (v24 * 8.0);
    *((_QWORD *)&v83 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
    *(double *)&v83 = v24 / (v23 + v23);
    *((_QWORD *)&v83 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v85, (double *)&v83);
  }
  else
  {
    *(double *)&v83 = v23 * v23;
    *((_QWORD *)&v83 + 1) = 0x4008000000000000;
    *(double *)&v81 = v31 * v31;
    *((_QWORD *)&v81 + 1) = 0x4008000000000000;
    v32 = 1.0;
    *(double *)&v83 = sqrt(boost::polygon::detail::robust_fpt<double>::operator+((double *)&v83, (double *)&v81)* v24* v25)/ (v31* v31);
    *((double *)&v83 + 1) = (v33 + 1.0 + 1.0 + 1.0 + 1.0) * 0.5 + 1.0 + 3.0 + 1.0;
    if ((_DWORD)a5 == 2)
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v85, (double *)&v83);
    else
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
    *(double *)&v83 = v23 * boost::polygon::detail::robust_fpt<double>::operator+(v88, v87) / (v31 * (v31 + v31));
    *((double *)&v83 + 1) = v34 + 1.0 + 1.0 + 4.0 + 1.0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
  }
  v35 = v14 - v72;
  v36 = v71 - v22;
  v83 = 0u;
  v84 = 0u;
  v37 = (double)*a2;
  v38 = *a3;
  v81 = 0u;
  v82 = 0u;
  v79 = COERCE_UNSIGNED_INT64((v37 + (double)v38) * 0.5);
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v83, (double *)&v79);
  if (v21 >= 0.0)
  {
    v39 = *((double *)&v85 + 1);
    v40 = v21 * *(double *)&v85;
    v41 = v86[1];
    v42 = v21 * v86[0];
  }
  else
  {
    v39 = v86[1];
    v40 = -(v21 * v86[0]);
    v41 = *((double *)&v85 + 1);
    v42 = -(v21 * *(double *)&v85);
  }
  v43 = (double)(int)v16 - (double)(int)v13;
  *(double *)&v79 = v40;
  *((double *)&v79 + 1) = v39 + 0.0 + 1.0;
  *(double *)&v80 = v42;
  *((double *)&v80 + 1) = v41 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v83, (double *)&v79);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v84, (double *)&v80);
  *(double *)&v79 = ((double)a2[1] + (double)a3[1]) * 0.5;
  *((_QWORD *)&v79 + 1) = 0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v81, (double *)&v79);
  if (v36 >= 0.0)
  {
    v44 = *((double *)&v85 + 1);
    v45 = v36 * *(double *)&v85;
    v46 = v86[1];
    v47 = v36 * v86[0];
  }
  else
  {
    v44 = v86[1];
    v45 = -(v36 * v86[0]);
    v46 = *((double *)&v85 + 1);
    v47 = -(v36 * *(double *)&v85);
  }
  *(double *)&v79 = v45;
  *((double *)&v79 + 1) = v44 + 0.0 + 1.0;
  *(double *)&v80 = v47;
  *((double *)&v80 + 1) = v46 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v81, (double *)&v79);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v82, (double *)&v80);
  v79 = 0u;
  v80 = 0u;
  v77 = v83;
  v78 = v84;
  v73 = v43 * (double)*a4;
  v74 = 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v79, &v73);
  v73 = v35 * (double)a4[1];
  v74 = 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v79, &v73);
  if (v43 >= 0.0)
  {
    v48 = *((double *)&v83 + 1);
    v49 = v43 * *(double *)&v83;
    v50 = *((double *)&v84 + 1);
    v51 = v43 * *(double *)&v84;
  }
  else
  {
    v48 = *((double *)&v84 + 1);
    v49 = -(v43 * *(double *)&v84);
    v50 = *((double *)&v83 + 1);
    v51 = -(v43 * *(double *)&v83);
  }
  v52 = sqrt(v35 * v35 + v43 * v43);
  v73 = v49;
  v74 = v48 + 0.0 + 1.0;
  v75 = v51;
  v76 = v50 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v79, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v80, &v75);
  if (v35 >= 0.0)
  {
    v53 = *((double *)&v81 + 1);
    v54 = v35 * *(double *)&v81;
    v55 = *((double *)&v82 + 1);
    v56 = v35 * *(double *)&v82;
  }
  else
  {
    v53 = *((double *)&v82 + 1);
    v54 = -(v35 * *(double *)&v82);
    v55 = *((double *)&v81 + 1);
    v56 = -(v35 * *(double *)&v81);
  }
  v57 = v32 / v52;
  v73 = v54;
  v74 = v53 + 0.0 + 1.0;
  v75 = v56;
  v76 = v55 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v79, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v80, &v75);
  v58 = v79;
  v60 = *((double *)&v80 + 1);
  v59 = *(double *)&v80;
  if (*(double *)&v79 >= *(double *)&v80)
  {
    v61 = *((double *)&v80 + 1);
    v62 = *(double *)&v80;
    v60 = *((double *)&v79 + 1);
    v59 = *(double *)&v79;
  }
  else
  {
    v79 = v80;
    v61 = *((double *)&v58 + 1);
    v62 = *(double *)&v58;
    v80 = v58;
  }
  v73 = v57 * v59;
  v74 = v60 + 3.0 + 1.0;
  v75 = v57 * v62;
  v76 = v61 + 3.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v77, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v78, &v75);
  v63 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v83, (double *)&v84);
  v64 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v81, (double *)&v82);
  v65 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v77, (double *)&v78);
  *(double *)a6 = v63;
  *(double *)(a6 + 8) = v64;
  *(double *)(a6 + 16) = v65;
  *(_BYTE *)(a6 + 24) = 1;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v83, (double *)&v84);
  v67 = v66;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v81, (double *)&v82);
  v69 = v68;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v77, (double *)&v78);
  if (v67 > 64.0 || v69 > 64.0 || v70 > 64.0)
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v67 > 64.0, v69 > 64.0, v70 > 64.0);
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pss(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;

  if (*(_QWORD *)(a3 + 16) == *(_QWORD *)(a4 + 16))
    return 0;
  if (a5 == 2)
  {
    v6 = *(_QWORD *)(a4 + 32);
    if ((*(_BYTE *)(a3 + 32) & 0x20) == 0)
    {
      if ((v6 & 0x20) != 0)
        return 0;
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a3, a2, (int *)(a4 + 8)) == -1;
    }
    if ((v6 & 0x20) != 0)
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a3, a2, (int *)(a4 + 8)) == -1;
  }
  return 1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double *v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  double v120;
  double v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  double v129[4];

  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v16 = (double)(int)v12 - (double)(int)v14;
  v17 = (double)(int)v13 - (double)(int)v15;
  v19 = a4[2];
  v18 = a4[3];
  v21 = *a4;
  v20 = a4[1];
  v22 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v13 - v15, v12 - v14, v18 - v20, v19 - v21);
  v23 = v17 * v17;
  if (v22 == 0.0)
  {
    *(double *)&v118 = v23 + v16 * v16;
    *((_QWORD *)&v118 + 1) = 0x4000000000000000;
    v24 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a4[1] - (uint64_t)a3[3], *a4 - (uint64_t)a3[2]);
    v25 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], *a2 - (uint64_t)a3[2], a2[1] - (uint64_t)a3[3]);
    v26 = v25
        * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a2[1] - (uint64_t)a4[1], *a2 - (uint64_t)*a4);
    v128 = 0u;
    *(_OWORD *)v129 = 0u;
    *(double *)&v126 = v16 * -((double)*a2 - ((double)a3[2] + (double)*a4) * 0.5);
    *((_QWORD *)&v126 + 1) = 0x3FF0000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    *(double *)&v126 = v17 * -((double)a2[1] - ((double)a3[3] + (double)a4[1]) * 0.5);
    *((_QWORD *)&v126 + 1) = 0x3FF0000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    *(_QWORD *)&v126 = sqrt(v26);
    *((_QWORD *)&v126 + 1) = 0x4004000000000000;
    if ((_DWORD)a5 == 2)
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v128, (double *)&v126);
    else
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=((double *)&v128, (double *)&v118);
    v126 = 0u;
    v127 = 0u;
    v32 = (double)a3[2];
    v33 = *a4;
    v124 = 0u;
    v125 = 0u;
    v122 = COERCE_UNSIGNED_INT64((v32 + (double)v33) * 0.5);
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v126, (double *)&v122);
    if (v16 >= 0.0)
    {
      v34 = *((double *)&v128 + 1);
      v35 = v16 * *(double *)&v128;
      v36 = v129[1];
      v37 = v16 * v129[0];
    }
    else
    {
      v34 = v129[1];
      v35 = -(v16 * v129[0]);
      v36 = *((double *)&v128 + 1);
      v37 = -(v16 * *(double *)&v128);
    }
    *(double *)&v122 = v35;
    *((double *)&v122 + 1) = v34 + 0.0 + 1.0;
    *(double *)&v123 = v37;
    *((double *)&v123 + 1) = v36 + 0.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v122);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v123);
    *(double *)&v122 = ((double)a3[3] + (double)a4[1]) * 0.5;
    *((_QWORD *)&v122 + 1) = 0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v122);
    if (v17 >= 0.0)
    {
      v38 = *((double *)&v128 + 1);
      v39 = v17 * *(double *)&v128;
      v40 = v129[1];
      v41 = v17 * v129[0];
    }
    else
    {
      v38 = v129[1];
      v39 = -(v17 * v129[0]);
      v40 = *((double *)&v128 + 1);
      v41 = -(v17 * *(double *)&v128);
    }
    *(double *)&v122 = v39;
    *((double *)&v122 + 1) = v38 + 0.0 + 1.0;
    *(double *)&v123 = v41;
    *((double *)&v123 + 1) = v40 + 0.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v124, (double *)&v122);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v125, (double *)&v123);
    v122 = v126;
    v123 = v127;
    *(double *)&v116 = v24 * 0.5 / sqrt(*(double *)&v118);
    *((double *)&v116 + 1) = *((double *)&v118 + 1) * 0.5 + 1.0 + 2.0 + 1.0;
    if (v24 >= 0.0)
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v116);
    else
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v122, (double *)&v116);
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v126, (double *)&v127);
    v43 = v42;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v124, (double *)&v125);
    v45 = v44;
    v46 = (double *)&v123;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v122, (double *)&v123);
    v48 = v47;
    v49 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v126, (double *)&v127);
    v50 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v124, (double *)&v125);
    v51 = (double *)&v122;
  }
  else
  {
    v27 = (double)(int)v19 - (double)(int)v21;
    v28 = sqrt(v23 + v16 * v16);
    v108 = (double)(int)v18 - (double)(int)v20;
    v29 = sqrt(v108 * v108 + v27 * v27);
    v30 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], a4[1] - (uint64_t)a4[3], a4[2] - (uint64_t)*a4);
    v120 = v30;
    v121 = 1.0;
    v109 = v29;
    v106 = v28;
    *(double *)&v128 = v28 * v29;
    *((_QWORD *)&v128 + 1) = 0x4014000000000000;
    if (v30 < 0.0)
    {
      v120 = v22 * v22 / boost::polygon::detail::robust_fpt<double>::operator-((double *)&v128, &v120);
      v121 = v31 + 3.0 + 1.0;
    }
    else
    {
      boost::polygon::detail::robust_fpt<double>::operator+=(&v120, (double *)&v128);
    }
    v104 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a2[1], *a3 - (uint64_t)*a2);
    v105 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a4[2] - (uint64_t)*a2, a4[3] - (uint64_t)a2[1]);
    v103 = v120;
    v52 = v121 + 0.0 + 1.0 + 1.0;
    v53 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a3[1], *a3);
    v54 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a4[2], a4[3]);
    v107 = v22;
    v55 = 1.0 / v22;
    v128 = 0u;
    *(_OWORD *)v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    *(double *)&v118 = v55 * (v27 * v53);
    *((_QWORD *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v118);
    *(double *)&v118 = v55 * (v16 * v54);
    *((_QWORD *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v118);
    *(double *)&v118 = v55 * (v17 * v54);
    *((_QWORD *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v118);
    *(double *)&v118 = v55 * (v108 * v53);
    *((_QWORD *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v118);
    v56 = v16 * v109;
    if (v56 >= 0.0)
    {
      v57 = *((double *)&v124 + 1);
      v58 = *(double *)&v124;
      v59 = *((double *)&v125 + 1);
      v60 = *(double *)&v125;
    }
    else
    {
      v57 = *((double *)&v125 + 1);
      v58 = -*(double *)&v125;
      v59 = *((double *)&v124 + 1);
      v60 = -*(double *)&v124;
    }
    v61 = v52 + 1.0;
    *(double *)&v118 = v56 * v58;
    *((double *)&v118 + 1) = v57 + 3.0 + 1.0;
    *(double *)&v119 = v56 * v60;
    *((double *)&v119 + 1) = v59 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    v62 = v27 * v106;
    if (v27 * v106 >= 0.0)
    {
      v63 = *((double *)&v124 + 1);
      v64 = *(double *)&v124;
      v65 = *((double *)&v125 + 1);
      v66 = *(double *)&v125;
    }
    else
    {
      v63 = *((double *)&v125 + 1);
      v64 = -*(double *)&v125;
      v65 = *((double *)&v124 + 1);
      v66 = -*(double *)&v124;
    }
    v67 = v61 + 1.0;
    *(double *)&v118 = v62 * v64;
    *((double *)&v118 + 1) = v63 + 3.0 + 1.0;
    *(double *)&v119 = v62 * v66;
    *((double *)&v119 + 1) = v65 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    v68 = v17 * v109;
    if (v17 * v109 >= 0.0)
    {
      v69 = *((double *)&v122 + 1);
      v70 = *(double *)&v122;
      v71 = *((double *)&v123 + 1);
      v72 = *(double *)&v123;
    }
    else
    {
      v69 = *((double *)&v123 + 1);
      v70 = -*(double *)&v123;
      v71 = *((double *)&v122 + 1);
      v72 = -*(double *)&v122;
    }
    *(double *)&v118 = v68 * v70;
    *((double *)&v118 + 1) = v69 + 3.0 + 1.0;
    *(double *)&v119 = v68 * v72;
    *((double *)&v119 + 1) = v71 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    v73 = v106 * v108;
    if (v106 * v108 >= 0.0)
    {
      v74 = *((double *)&v122 + 1);
      v75 = *(double *)&v122;
      v76 = *((double *)&v123 + 1);
      v77 = *(double *)&v123;
    }
    else
    {
      v74 = *((double *)&v123 + 1);
      v75 = -*(double *)&v123;
      v76 = *((double *)&v122 + 1);
      v77 = -*(double *)&v122;
    }
    *(double *)&v118 = v73 * v75;
    *((double *)&v118 + 1) = v74 + 3.0 + 1.0;
    *(double *)&v119 = v73 * v77;
    *((double *)&v119 + 1) = v76 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    *(double *)&v118 = v106
                     * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], -(uint64_t)a2[1], *a2);
    *((_QWORD *)&v118 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v126, (double *)&v118);
    *(double *)&v118 = v109
                     * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], -(uint64_t)a2[1], *a2);
    *((_QWORD *)&v118 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v128, (double *)&v127);
    boost::polygon::detail::robust_fpt<double>::operator+=(v129, (double *)&v126);
    *(_QWORD *)&v118 = sqrt(v105 * (v104 * (v103 + v103)));
    *((double *)&v118 + 1) = (v67 + 1.0) * 0.5 + 1.0;
    if ((_DWORD)a5 == 2)
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v128, (double *)&v118);
    else
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v118);
    *(double *)&v118 = v120 * v120;
    *((double *)&v118 + 1) = v121 + v121 + 1.0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=((double *)&v128, (double *)&v118);
    v118 = v124;
    v119 = v125;
    v116 = v122;
    v117 = v123;
    if (v56 >= 0.0)
    {
      v78 = *((double *)&v128 + 1);
      v79 = *(double *)&v128;
      v80 = v129[1];
      v81 = v129[0];
    }
    else
    {
      v78 = v129[1];
      v79 = -v129[0];
      v80 = *((double *)&v128 + 1);
      v81 = -*(double *)&v128;
    }
    *(double *)&v114 = v56 * v79;
    *((double *)&v114 + 1) = v78 + 3.0 + 1.0;
    *(double *)&v115 = v56 * v81;
    *((double *)&v115 + 1) = v80 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v118, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v119, (double *)&v115);
    if (v62 >= 0.0)
    {
      v82 = *((double *)&v128 + 1);
      v83 = *(double *)&v128;
      v84 = v129[1];
      v85 = v129[0];
    }
    else
    {
      v82 = v129[1];
      v83 = -v129[0];
      v84 = *((double *)&v128 + 1);
      v85 = -*(double *)&v128;
    }
    *(double *)&v114 = v62 * v83;
    *((double *)&v114 + 1) = v82 + 3.0 + 1.0;
    *(double *)&v115 = v62 * v85;
    *((double *)&v115 + 1) = v84 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v118, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v119, (double *)&v115);
    if (v68 >= 0.0)
    {
      v86 = *((double *)&v128 + 1);
      v87 = *(double *)&v128;
      v88 = v129[1];
      v89 = v129[0];
    }
    else
    {
      v86 = v129[1];
      v87 = -v129[0];
      v88 = *((double *)&v128 + 1);
      v89 = -*(double *)&v128;
    }
    *(double *)&v114 = v68 * v87;
    *((double *)&v114 + 1) = v86 + 3.0 + 1.0;
    *(double *)&v115 = v68 * v89;
    *((double *)&v115 + 1) = v88 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v116, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v117, (double *)&v115);
    if (v73 >= 0.0)
    {
      v90 = *((double *)&v128 + 1);
      v91 = *(double *)&v128;
      v92 = v129[1];
      v93 = v129[0];
    }
    else
    {
      v90 = v129[1];
      v91 = -v129[0];
      v92 = *((double *)&v128 + 1);
      v93 = -*(double *)&v128;
    }
    *(double *)&v114 = v73 * v91;
    *((double *)&v114 + 1) = v90 + 3.0 + 1.0;
    *(double *)&v115 = v73 * v93;
    *((double *)&v115 + 1) = v92 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v116, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v117, (double *)&v115);
    v94 = *(double *)&v128;
    v95 = v129[0];
    if (*(double *)&v128 >= v129[0])
    {
      v97 = v129[0];
      v95 = *(double *)&v128;
    }
    else
    {
      v96 = *((double *)&v128 + 1);
      v128 = *(_OWORD *)v129;
      v129[0] = v94;
      v129[1] = v96;
      v97 = v94;
    }
    v114 = v118;
    v115 = v119;
    if (v107 >= 0.0)
    {
      v110 = v107 * v95;
      v111 = *((double *)&v128 + 1) + 1.0 + 1.0;
      v112 = v107 * v97;
      v113 = v129[1] + 1.0 + 1.0;
      boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v114, &v110);
      v98 = &v112;
    }
    else
    {
      v110 = -(v97 * v107);
      v111 = v129[1] + 1.0 + 1.0;
      v112 = -(v95 * v107);
      v113 = *((double *)&v128 + 1) + 1.0 + 1.0;
      boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v114, &v112);
      v98 = &v110;
    }
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v115, v98);
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v118, (double *)&v119);
    v43 = v99;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v116, (double *)&v117);
    v45 = v100;
    v46 = (double *)&v115;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v114, (double *)&v115);
    v48 = v101;
    v49 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v118, (double *)&v119);
    v50 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v116, (double *)&v117);
    v51 = (double *)&v114;
  }
  v102 = boost::polygon::detail::robust_fpt<double>::operator-(v51, v46);
  *(double *)a6 = v49;
  *(double *)(a6 + 8) = v50;
  *(double *)(a6 + 16) = v102;
  *(_BYTE *)(a6 + 24) = 1;
  if (v43 > 64.0 || v45 > 64.0 || v48 > 64.0)
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v43 > 64.0, v45 > 64.0, v48 > 64.0);
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71[2];
  __int128 v72;
  __int128 v73;

  v9 = a2[2];
  v10 = a2[3];
  v11 = *a2;
  v12 = a2[1];
  v13 = (double)(int)v9 - (double)(int)v11;
  v56 = v13;
  v14 = (double)(int)v10 - (double)(int)v12;
  v58 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v11, v12, v9, v10);
  v15 = a3[2];
  v16 = a3[3];
  v17 = *a3;
  v18 = a3[1];
  v19 = (double)(int)v15 - (double)(int)v17;
  v54 = v19;
  v20 = (double)(int)v16 - (double)(int)v18;
  v57 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v17, v18, v15, v16);
  v21 = a4[2];
  v22 = a4[3];
  v23 = *a4;
  v24 = a4[1];
  v25 = (double)(int)v21 - (double)(int)v23;
  v55 = v25;
  v26 = (double)(int)v22 - (double)(int)v24;
  v53 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v23, v24, v21, v22);
  *(double *)&v72 = v13 * v13;
  *((_QWORD *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)v71 = v14 * v14;
  *((_QWORD *)&v71[0] + 1) = 0x3FF0000000000000;
  v27 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  v63 = v28 * 0.5 + 1.0;
  *(double *)&v72 = v19 * v19;
  *((_QWORD *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)v71 = v20 * v20;
  *((_QWORD *)&v71[0] + 1) = 0x3FF0000000000000;
  v60 = sqrt(v27);
  v29 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  *(double *)&v72 = v25 * v25;
  *((_QWORD *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)v71 = v26 * v26;
  *((_QWORD *)&v71[0] + 1) = 0x3FF0000000000000;
  v61 = sqrt(v29);
  v62 = v30 * 0.5 + 1.0;
  v31 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  v33 = v32 * 0.5 + 1.0;
  v59 = sqrt(v31);
  v34 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a2[2] - (uint64_t)*a2, a2[3] - (uint64_t)a2[1], a3[2] - (uint64_t)*a3, a3[3] - (uint64_t)a3[1]);
  v35 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[2] - (uint64_t)*a3, a3[3] - (uint64_t)a3[1], a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1]);
  v36 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a2[2] - (uint64_t)*a2, a2[3] - (uint64_t)a2[1]);
  v72 = 0u;
  v73 = 0u;
  *(double *)v71 = v59 * v34;
  *((double *)v71 + 1) = v33 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  *(double *)v71 = v60 * v35;
  *((double *)v71 + 1) = v63 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  *(double *)v71 = v61 * v36;
  *((double *)v71 + 1) = v62 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  memset(v71, 0, sizeof(v71));
  *(double *)&v69 = v53 * v34;
  *((_QWORD *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  *(double *)&v69 = v58 * v35;
  *((_QWORD *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  *(double *)&v69 = v57 * v36;
  *((_QWORD *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  v69 = 0u;
  v70 = 0u;
  *(double *)&v67 = v56 * v57 * v59;
  *((double *)&v67 + 1) = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&v67 = v58 * v54 * v59;
  *((double *)&v67 + 1) = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  *(double *)&v67 = v54 * v53 * v60;
  *((double *)&v67 + 1) = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&v67 = v57 * v55 * v60;
  *((double *)&v67 + 1) = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  *(double *)&v67 = v58 * v55 * v61;
  *((double *)&v67 + 1) = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&v67 = v56 * v53 * v61;
  *((double *)&v67 + 1) = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  v67 = 0u;
  v68 = 0u;
  v64 = v14 * v57 * v59;
  v65 = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  v64 = v58 * v20 * v59;
  v65 = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  v64 = v20 * v53 * v60;
  v65 = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  v64 = v57 * v26 * v60;
  v65 = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  v64 = v58 * v26 * v61;
  v65 = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  v64 = v14 * v53 * v61;
  v65 = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  v64 = boost::polygon::detail::operator+<boost::polygon::detail::robust_fpt<double>>(&v69, v71);
  v65 = v37;
  v66[0] = v38;
  v66[1] = v39;
  v40 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v72, (double *)&v73);
  v42 = v41;
  v43 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v69, (double *)&v70);
  v45 = v42 + v44 + 1.0;
  v46 = v43 / v40;
  v47 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v67, (double *)&v68);
  v49 = v42 + v48 + 1.0;
  v50 = v47 / v40;
  v52 = boost::polygon::detail::robust_fpt<double>::operator-(&v64, v66) / v40;
  *(double *)a5 = v46;
  *(double *)(a5 + 8) = v50;
  *(double *)(a5 + 16) = v52;
  *(_BYTE *)(a5 + 24) = 1;
  if (v45 > 64.0 || v49 > 64.0 || v42 + v51 + 1.0 > 64.0)
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss();
}

BOOL boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  unint64_t v10;
  double v11;
  unint64_t v12;

  if (*(_DWORD *)a3 != *(_DWORD *)(a3 + 8))
    return 0;
  v3 = *(_DWORD *)(a3 + 4);
  if (v3 == *(_DWORD *)(a3 + 12))
    return 0;
  v5 = *(_QWORD *)(a3 + 32);
  if ((v5 & 0x20) != 0)
    v6 = *(_DWORD *)(a3 + 12);
  else
    v6 = *(_DWORD *)(a3 + 4);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v7 = 0x8000000000000000 - v7;
  if (v6 >= 0)
    *(_QWORD *)&v8 = 0x8000000000000000 - COERCE__INT64((double)v6);
  else
    v8 = (double)v6;
  v9 = (unint64_t)v7 >= *(_QWORD *)&v8;
  v10 = v7 - *(_QWORD *)&v8;
  if (v10 != 0 && v9 && v10 > 0x40)
    return 1;
  if ((v5 & 0x20) == 0)
    v3 = *(_DWORD *)(a3 + 12);
  if (v3 >= 0)
    *(_QWORD *)&v11 = 0x8000000000000000 - COERCE__INT64((double)v3);
  else
    v11 = (double)v3;
  v9 = *(_QWORD *)&v11 >= (unint64_t)v7;
  v12 = *(_QWORD *)&v11 - v7;
  return v9 && v12 > 0x40;
}

double *boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=(double *a1, double *a2)
{
  if (*a2 >= 0.0)
    boost::polygon::detail::robust_fpt<double>::operator+=(a1, a2);
  else
    boost::polygon::detail::robust_fpt<double>::operator-=(a1 + 2, a2);
  return a1;
}

double *boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=(double *a1, double *a2)
{
  if (*a2 >= 0.0)
    boost::polygon::detail::robust_fpt<double>::operator+=(a1 + 2, a2);
  else
    boost::polygon::detail::robust_fpt<double>::operator-=(a1, a2);
  return a1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp()
{
  int *v0;
  int *v1;
  int *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  long double v39;
  int v40;
  double v41;
  double v42;
  double v43;
  long double v44;
  int v45;
  double v46;
  double v47;
  long double v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  long double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  int v61;
  double v62;
  double v63;
  double v64;
  long double v65;
  int v66;
  _DWORD v67[65];
  _DWORD v68[65];
  _DWORD v69[65];
  _DWORD v70[65];
  _DWORD v71[65];
  _DWORD v72[65];
  _DWORD v73[65];
  _DWORD v74[65];
  unsigned int v75[65];
  unsigned int v76[65];
  int v77[65];
  unsigned int v78[65];
  unsigned int __src[65];
  unsigned int __dst[65];
  _QWORD v81[32];
  int v82;
  _QWORD v83[32];
  int v84;
  uint64_t v85[32];
  int v86;
  uint64_t v87[32];
  int v88;
  unsigned int v89[64];
  int v90;
  _QWORD v91[32];
  int v92;
  unsigned int v93[64];
  int v94;
  _QWORD v95[32];
  int v96;
  _QWORD v97[32];
  int v98;
  _QWORD v99[32];
  int v100;
  uint64_t v101;

  MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v101 = *MEMORY[0x24BDAC8D0];
  v11 = *v0;
  v12 = *v1;
  v13 = v11 - v12;
  if (v11 > v12)
  {
    v14 = 1;
LABEL_3:
    v95[0] = v13;
    goto LABEL_6;
  }
  if (v13 < 0)
  {
    v13 = v12 - v11;
    v14 = -1;
    goto LABEL_3;
  }
  v14 = 0;
LABEL_6:
  v96 = v14;
  v15 = *v2;
  v16 = v12 - v15;
  if (v12 > v15)
  {
    v17 = 1;
LABEL_8:
    v97[0] = v16;
    goto LABEL_11;
  }
  if (v16 < 0)
  {
    v16 = v15 - v12;
    v17 = -1;
    goto LABEL_8;
  }
  v17 = 0;
LABEL_11:
  v98 = v17;
  v18 = v11 - v15;
  if (v11 > v15)
  {
    v19 = 1;
LABEL_13:
    v99[0] = v18;
    goto LABEL_16;
  }
  if (v18 < 0)
  {
    v18 = v15 - v11;
    v19 = -1;
    goto LABEL_13;
  }
  v19 = 0;
LABEL_16:
  v100 = v19;
  v20 = v0[1];
  v21 = v1[1];
  v22 = v20 - v21;
  if (v20 > v21)
  {
    v23 = 1;
LABEL_18:
    *(_QWORD *)v89 = v22;
    goto LABEL_21;
  }
  if (v22 < 0)
  {
    v22 = v21 - v20;
    v23 = -1;
    goto LABEL_18;
  }
  v23 = 0;
LABEL_21:
  v90 = v23;
  v24 = v2[1];
  v25 = v21 - v24;
  if (v21 > v24)
  {
    v26 = 1;
LABEL_23:
    v91[0] = v25;
    goto LABEL_26;
  }
  if (v25 < 0)
  {
    v25 = v24 - v21;
    v26 = -1;
    goto LABEL_23;
  }
  v26 = 0;
LABEL_26:
  v92 = v26;
  v27 = v20 - v24;
  if (v20 > v24)
  {
    v28 = 1;
LABEL_28:
    *(_QWORD *)v93 = v27;
    goto LABEL_31;
  }
  if (v27 < 0)
  {
    v27 = v24 - v20;
    v28 = -1;
    goto LABEL_28;
  }
  v28 = 0;
LABEL_31:
  v94 = v28;
  v29 = v12 + v11;
  if (v29 < 1)
  {
    if (v29 < 0)
    {
      v85[0] = -v29;
      if ((unint64_t)-v29 >> 32)
        v30 = -2;
      else
        v30 = -1;
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v85[0] = v29;
    v30 = 1;
  }
  v86 = v30;
  v31 = v15 + v12;
  if (v31 < 1)
  {
    if (v31 < 0)
    {
      v87[0] = -v31;
      if ((unint64_t)-v31 >> 32)
        v32 = -2;
      else
        v32 = -1;
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v87[0] = v31;
    v32 = 1;
  }
  v88 = v32;
  v33 = v21 + v20;
  if (v21 + v20 < 1)
  {
    if (v33 < 0)
    {
      v81[0] = -v33;
      if ((unint64_t)-v33 >> 32)
        v34 = -2;
      else
        v34 = -1;
    }
    else
    {
      v34 = 0;
    }
  }
  else
  {
    v81[0] = v21 + v20;
    v34 = 1;
  }
  v82 = v34;
  v35 = v24 + v21;
  if (v24 + v21 < 1)
  {
    if (v35 < 0)
    {
      v83[0] = -v35;
      if ((unint64_t)-v35 >> 32)
        v36 = -2;
      else
        v36 = -1;
    }
    else
    {
      v36 = 0;
    }
  }
  else
  {
    v83[0] = v24 + v21;
    v36 = 1;
  }
  v84 = v36;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, (unsigned int *)v95, (uint64_t)v91);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, (unsigned int *)v97, (uint64_t)v89);
  boost::polygon::detail::extended_int<64ul>::dif (__dst, __src, (int *)v78);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v37, v38);
  v41 = 0.5 / ldexp(v39, v40);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, (unsigned int *)v95, (uint64_t)v85);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, v89, (uint64_t)v81);
  boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v78);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, (unsigned int *)v97, (uint64_t)v87);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, (unsigned int *)v91, (uint64_t)v83);
  boost::polygon::detail::extended_int<64ul>::add(__src, v78, v77);
  if ((v8 & 1) != 0 || v4)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, __dst, (uint64_t)v91);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, __src, (uint64_t)v89);
    boost::polygon::detail::extended_int<64ul>::dif (v78, v77, (int *)v76);
    boost::polygon::detail::extended_int<64ul>::p(v78, v42, v43);
    *(long double *)v10 = v41 * ldexp(v44, v45);
    if (v4)
    {
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v74, (unsigned int *)v95, (uint64_t)v95);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v73, v89, (uint64_t)v89);
      boost::polygon::detail::extended_int<64ul>::add(v75, v74, v73);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v71, (unsigned int *)v97, (uint64_t)v97);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v70, (unsigned int *)v91, (uint64_t)v91);
      boost::polygon::detail::extended_int<64ul>::add(v72, v71, v70);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, v75, (uint64_t)v72);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v68, (unsigned int *)v99, (uint64_t)v99);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v93, (uint64_t)v93);
      boost::polygon::detail::extended_int<64ul>::add(v69, v68, v67);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, v76, (uint64_t)v69);
      boost::polygon::detail::extended_int<64ul>::p(v77, v46, v47);
      v50 = ldexp(v48, v49);
      v51 = *(double *)v10;
      v52 = sqrt(v50);
      if (*(double *)v10 >= 0.0)
      {
        if (v41 >= 0.0)
          v62 = v51 + v52 * v41;
        else
          v62 = v51 - v52 * v41;
      }
      else
      {
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v75, v78, (uint64_t)v78);
        boost::polygon::detail::extended_int<64ul>::dif (v76, v75, v77);
        boost::polygon::detail::extended_int<64ul>::p(v76, v53, v54);
        v57 = ldexp(v55, v56);
        v58 = v41 * v57;
        boost::polygon::detail::extended_int<64ul>::p(v78, v57, v59);
        v62 = v58 / (v52 + ldexp(v60, v61));
      }
      *(double *)(v10 + 16) = v62;
    }
  }
  if (v6)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, __src, (uint64_t)v95);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, __dst, (uint64_t)v97);
    boost::polygon::detail::extended_int<64ul>::dif (v78, v77, (int *)v76);
    boost::polygon::detail::extended_int<64ul>::p(v78, v63, v64);
    *(long double *)(v10 + 8) = v41 * ldexp(v65, v66);
  }
}

double *boost::polygon::detail::robust_fpt<double>::operator+=(double *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;

  v2 = *result;
  v3 = *a2;
  v4 = *result + *a2;
  if ((*result < 0.0 || v3 < 0.0) && (v2 > 0.0 || v3 > 0.0))
  {
    v5 = (v2 * result[1] - v3 * a2[1]) / v4;
    v6 = -v5;
    v7 = v5 < 0.0;
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    v7 = v5 < v6;
  }
  if (v7)
    v5 = v6;
  *result = v4;
  result[1] = v5 + 1.0;
  return result;
}

double *boost::polygon::detail::robust_fpt<double>::operator-=(double *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  BOOL v7;

  v2 = *result;
  v3 = *a2;
  v4 = *result - *a2;
  if ((*result < 0.0 || v3 > 0.0) && (v2 > 0.0 || v3 < 0.0))
  {
    v5 = (v3 * a2[1] + v2 * result[1]) / v4;
    v6 = -v5;
    v7 = v5 < 0.0;
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    v7 = v5 < v6;
  }
  if (v7)
    v5 = v6;
  *result = v4;
  result[1] = v5 + 1.0;
  return result;
}

double boost::polygon::detail::robust_fpt<double>::operator-(double *a1, double *a2)
{
  return *a1 - *a2;
}

double boost::polygon::detail::extended_int<64ul>::p(_DWORD *a1, double result, double a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[64];
  if (v4 >= 0)
    v5 = v4;
  else
    v5 = -v4;
  if ((_DWORD)v5)
  {
    if (v5 == 1)
    {
      LODWORD(result) = *a1;
      result = (double)*(unint64_t *)&result;
    }
    else if (v5 == 2)
    {
      LODWORD(a3) = *a1;
      LODWORD(result) = a1[1];
      result = (double)*(unint64_t *)&a3 + (double)*(unint64_t *)&result * 4294967300.0;
    }
    else
    {
      v6 = 0;
      v7 = (uint64_t)&a1[v5 - 1];
      result = 0.0;
      do
      {
        HIDWORD(v8) = 1106247680;
        LODWORD(v8) = *(_DWORD *)(v7 + v6);
        result = result * 4294967300.0 + (double)v8;
        v6 -= 4;
      }
      while (v6 != -12);
    }
    if (v4 < 0)
      return -result;
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::mul(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = a2[64];
  if (v4 && (v6 = *(_DWORD *)(a3 + 256)) != 0)
  {
    if (v4 >= 0)
      v8 = v4;
    else
      v8 = -v4;
    if (v6 >= 0)
      v9 = v6;
    else
      v9 = -v6;
    result = boost::polygon::detail::extended_int<64ul>::mul(result, a2, v8, a3, v9);
    if ((int)a2[64] > 0 != *(_DWORD *)(a3 + 256) > 0)
      *(_DWORD *)(v3 + 256) = -*(_DWORD *)(v3 + 256);
  }
  else
  {
    *(_DWORD *)(result + 256) = 0;
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::mul(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;

  v5 = a3 - 1 + a5;
  if (v5 >= 0x40)
    v5 = 64;
  *(_DWORD *)(result + 256) = v5;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v6 >= a3 - 1)
        v8 = a3 - 1;
      else
        v8 = v6;
      if (a3)
      {
        v9 = 0;
        v10 = 0;
        v11 = ~v8;
        v12 = a2;
        do
        {
          if (v6 + v9 < a5)
          {
            v13 = *(unsigned int *)(a4 + 4 * v9) * (unint64_t)*v12;
            v7 += v13;
            v10 += HIDWORD(v13);
          }
          --v9;
          ++v12;
        }
        while (v11 != v9);
      }
      else
      {
        v10 = 0;
      }
      *(_DWORD *)(result + 4 * v6) = v7;
      v7 = v10 + HIDWORD(v7);
      ++v6;
      v14 = *(int *)(result + 256);
      a4 += 4;
    }
    while (v6 < v14);
    if (v7)
    {
      if ((_DWORD)v14 != 64)
      {
        *(_DWORD *)(result + 4 * v14) = v7;
        ++*(_DWORD *)(result + 256);
      }
    }
  }
  return result;
}

void *boost::polygon::detail::extended_int<64ul>::dif (_DWORD *__dst, _DWORD *__src, int *a3)
{
  int v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  void *result;

  v5 = __src[64];
  if (!v5)
  {
    result = memcpy(__dst, a3, 0x104uLL);
LABEL_15:
    __dst[64] = -__dst[64];
    return result;
  }
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 == v7 > 0)
    result = (void *)boost::polygon::detail::extended_int<64ul>::dif ((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)a3, v9, 0);
  else
    result = boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v8, (unsigned int *)a3, v9);
  if ((__src[64] & 0x80000000) != 0)
    goto LABEL_15;
  return result;
}

_DWORD *boost::polygon::detail::extended_int<64ul>::add(_DWORD *result, unsigned int *a2, unint64_t a3, unsigned int *a4, unint64_t a5)
{
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;

  do
  {
    v5 = a5;
    v6 = a4;
    a5 = a3;
    a4 = a2;
    a2 = v6;
    a3 = v5;
  }
  while (a5 < v5);
  result[64] = a5;
  v7 = 0;
  if (v5)
  {
    v8 = a4;
    v9 = result;
    v10 = v5;
    do
    {
      v12 = *v8++;
      v11 = v12;
      v13 = *v6++;
      v14 = v7 + v11 + v13;
      *v9++ = v14;
      v7 = HIDWORD(v14);
      --v10;
    }
    while (v10);
  }
  v15 = a5 - v5;
  if (a5 > v5)
  {
    v16 = &result[v5];
    v17 = &a4[v5];
    do
    {
      v18 = *v17++;
      v19 = v7 + v18;
      *v16++ = v19;
      v7 = HIDWORD(v19);
      --v15;
    }
    while (v15);
  }
  if (v7)
  {
    v20 = (int)result[64];
    if ((_DWORD)v20 != 64)
    {
      result[v20] = 1;
      ++result[64];
    }
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::dif (uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;

  v6 = a3;
  v8 = result;
  if (a3 >= a5)
  {
    if (a3 != a5 || (a6 & 1) != 0)
    {
      v14 = (_DWORD *)(result + 256);
      *(_DWORD *)(result + 256) = a3 - 1;
      if (a5)
      {
LABEL_15:
        v16 = 0;
        v15 = 0;
        do
        {
          *(_DWORD *)(result + 4 * v16) = *(_DWORD *)(a2 + 4 * v16) - (v15 & 1) - *(_DWORD *)(a4 + 4 * v16);
          v17 = *(_DWORD *)(a2 + 4 * v16);
          v18 = *(_DWORD *)(a4 + 4 * v16);
          v15 &= v17 == v18;
          if (v17 < v18)
            v15 = 1;
          ++v16;
        }
        while (a5 != v16);
      }
      else
      {
        v15 = 0;
      }
      v19 = v6 > a5;
      v20 = v6 - a5;
      if (v19)
      {
        v21 = (_DWORD *)(result + 4 * a5);
        v22 = (int *)(a2 + 4 * a5);
        do
        {
          *v21++ = *v22 - (v15 & 1);
          v23 = *v22++;
          v15 &= v23 == 0;
          --v20;
        }
        while (v20);
      }
      v24 = *(int *)(result + 256);
      if (*(_DWORD *)(result + 4 * v24))
        *v14 = v24 + 1;
    }
    else
    {
      while (1)
      {
        v11 = v6 - 1;
        v12 = *(_DWORD *)(a2 - 4 + 4 * v6);
        v13 = *(_DWORD *)(a4 - 4 + 4 * v6);
        if (v12 < v13)
        {
          v9 = a4;
          v10 = v6;
          goto LABEL_3;
        }
        if (v12 > v13)
          break;
        --v6;
        if (!v11)
          goto LABEL_25;
      }
      if (v6)
      {
        v14 = (_DWORD *)(result + 256);
        *(_DWORD *)(result + 256) = v6 - 1;
        a5 = v6;
        goto LABEL_15;
      }
LABEL_25:
      *(_DWORD *)(result + 256) = 0;
    }
  }
  else
  {
    v9 = a4;
    v10 = a5;
LABEL_3:
    result = boost::polygon::detail::extended_int<64ul>::dif (result, v9, v10, a2, v6, 1);
    *(_DWORD *)(v8 + 256) = -*(_DWORD *)(v8 + 256);
  }
  return result;
}

void *boost::polygon::detail::extended_int<64ul>::add(_DWORD *__dst, _DWORD *__src, _DWORD *a3)
{
  int v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  void *result;

  v5 = __src[64];
  if (!v5)
  {
    __src = a3;
    return memcpy(__dst, __src, 0x104uLL);
  }
  v6 = __src;
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 == v7 > 0)
    result = boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v8, a3, v9);
  else
    result = (void *)boost::polygon::detail::extended_int<64ul>::dif ((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)a3, v9, 0);
  if ((v6[64] & 0x80000000) != 0)
    __dst[64] = -__dst[64];
  return result;
}

double boost::polygon::detail::robust_fpt<double>::operator+(double *a1, double *a2)
{
  return *a1 + *a2;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double *v15;
  double *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  double v63;
  long double v64;
  int v65;
  long double v66;
  double v67;
  int v68;
  double v69;
  double v70;
  uint64_t v71;
  int v72;
  int v73;
  double v74;
  double v75;
  uint64_t v76;
  int v77;
  int v78;
  double v79;
  double v80;
  uint64_t v81;
  int v82;
  double v83;
  double v84;
  double v85;
  double v86;
  long double v87;
  int v88;
  double v89;
  double v90;
  long double v91;
  int v92;
  long double v93;
  long double v94;
  int v95;
  long double v96;
  uint64_t v97;
  int v98;
  double v99;
  double v100;
  long double v101;
  int v102;
  unsigned int v103[65];
  _DWORD v104[65];
  unsigned int v105[65];
  unsigned int v106[65];
  unsigned int v107[65];
  _DWORD v108[65];
  _DWORD v109[65];
  _QWORD v110[32];
  int v111;
  _QWORD v112[32];
  int v113;
  unsigned int __dst[65];
  _OWORD v115[16];
  int v116;
  _QWORD v117[32];
  int v118;
  unsigned int v119[64];
  int v120;
  _OWORD v121[16];
  int v122;
  _OWORD v123[16];
  int v124;
  _DWORD __src[65];
  _QWORD v126[32];
  int v127;
  unsigned int v128[64];
  int v129;
  unsigned int v130[65];
  _BYTE v131[260];
  unsigned int v132[65];
  unsigned int v133[65];
  int v134[64];
  int v135;
  _BYTE v136[260];
  unsigned int v137[65];
  _BYTE v138[260];
  unsigned int v139[65];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  int v156;
  uint64_t v157;

  v9 = MEMORY[0x24BDAC7A8]();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = v10;
  v21 = v20;
  v23 = v22;
  v24 = (unsigned int *)v9;
  v157 = *MEMORY[0x24BDAC8D0];
  v25 = v10[3];
  v26 = v10[1];
  v27 = v25 <= v26;
  v28 = v25 - v26;
  if (!v27)
  {
    v29 = 1;
LABEL_3:
    *(_QWORD *)v128 = v28;
    goto LABEL_6;
  }
  if (v28 < 0)
  {
    v28 = -v28;
    v29 = -1;
    goto LABEL_3;
  }
  v29 = 0;
LABEL_6:
  v129 = v29;
  v30 = *v10;
  v31 = v10[2];
  v27 = v30 <= v31;
  v32 = v30 - v31;
  if (!v27)
  {
    v33 = 1;
LABEL_8:
    v126[0] = v32;
    goto LABEL_11;
  }
  if (v32 < 0)
  {
    v32 = -v32;
    v33 = -1;
    goto LABEL_8;
  }
  v33 = 0;
LABEL_11:
  v127 = v33;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v128);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v126);
  boost::polygon::detail::extended_int<64ul>::add(__src, v137, v132);
  v34 = v21[1];
  v35 = v23[1];
  v36 = v34 - v35;
  if (v34 > v35)
  {
    v37 = 1;
LABEL_13:
    *(_QWORD *)&v123[0] = v36;
    goto LABEL_16;
  }
  if (v36 < 0)
  {
    v36 = v35 - v34;
    v37 = -1;
    goto LABEL_13;
  }
  v37 = 0;
LABEL_16:
  v124 = v37;
  v38 = *v23;
  v39 = *v21;
  v40 = v38 - v39;
  if (v38 > v39)
  {
    v41 = 1;
LABEL_18:
    *(_QWORD *)&v121[0] = v40;
    goto LABEL_21;
  }
  if (v40 < 0)
  {
    v40 = v39 - v38;
    v41 = -1;
    goto LABEL_18;
  }
  v41 = 0;
LABEL_21:
  v122 = v41;
  v42 = v39 + v38;
  if (v42 < 1)
  {
    if (v42 < 0)
    {
      *(_QWORD *)v119 = -v42;
      if ((unint64_t)-v42 >> 32)
        v43 = -2;
      else
        v43 = -1;
    }
    else
    {
      v43 = 0;
    }
  }
  else
  {
    *(_QWORD *)v119 = v42;
    v43 = 1;
  }
  v120 = v43;
  v44 = v35 + v34;
  if (v44 < 1)
  {
    if (v44 < 0)
    {
      v117[0] = -v44;
      if ((unint64_t)-v44 >> 32)
        v45 = -2;
      else
        v45 = -1;
    }
    else
    {
      v45 = 0;
    }
  }
  else
  {
    v117[0] = v44;
    v45 = 1;
  }
  v118 = v45;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v121);
  boost::polygon::detail::extended_int<64ul>::add(v115, v137, v132);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v123, (uint64_t)v126);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v121, (uint64_t)v128);
  boost::polygon::detail::extended_int<64ul>::dif (__dst, v137, (int *)v132);
  v46 = v19[3];
  v47 = v23[1];
  v27 = v46 <= v47;
  v48 = v46 - v47;
  if (!v27)
  {
    v49 = 1;
LABEL_41:
    v112[0] = v48;
    goto LABEL_44;
  }
  if (v48 < 0)
  {
    v48 = -v48;
    v49 = -1;
    goto LABEL_41;
  }
  v49 = 0;
LABEL_44:
  v113 = v49;
  v50 = *v23;
  v51 = v19[2];
  v27 = v50 <= v51;
  v52 = v50 - v51;
  if (!v27)
  {
    v53 = 1;
LABEL_46:
    v110[0] = v52;
    goto LABEL_49;
  }
  if (v52 < 0)
  {
    v52 = -v52;
    v53 = -1;
    goto LABEL_46;
  }
  v53 = 0;
LABEL_49:
  v111 = v53;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v110);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v112);
  boost::polygon::detail::extended_int<64ul>::dif (v109, v137, (int *)v132);
  v54 = v19[3];
  v55 = v21[1];
  v27 = v54 <= v55;
  v56 = v54 - v55;
  if (!v27)
  {
    v57 = 1;
LABEL_51:
    v112[0] = v56;
    goto LABEL_54;
  }
  if (v56 < 0)
  {
    v56 = -v56;
    v57 = -1;
    goto LABEL_51;
  }
  v57 = 0;
LABEL_54:
  v113 = v57;
  v58 = *v21;
  v59 = v19[2];
  v27 = v58 <= v59;
  v60 = v58 - v59;
  if (!v27)
  {
    v61 = 1;
LABEL_56:
    v110[0] = v60;
    goto LABEL_59;
  }
  if (v60 < 0)
  {
    v60 = -v60;
    v61 = -1;
    goto LABEL_56;
  }
  v61 = 0;
LABEL_59:
  v111 = v61;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v110);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v112);
  boost::polygon::detail::extended_int<64ul>::dif (v108, v137, (int *)v132);
  boost::polygon::detail::extended_int<64ul>::add(v107, v109, v108);
  if (!__dst[64])
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v115, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, v107, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::dif (v131, v137, (int *)v132);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v115, (uint64_t)v107);
    memcpy(__dst, v137, sizeof(__dst));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v130, __dst, (uint64_t)v119);
    v137[0] = 2;
    v137[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, v130, (uint64_t)v137);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, (unsigned int *)v131, (uint64_t)v123);
    boost::polygon::detail::extended_int<64ul>::add(v137, v132, v106);
    memcpy(v132, __src, sizeof(v132));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)v107);
    v130[0] = 2;
    v130[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v130);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v131, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::add(v130, v106, v104);
    memcpy(v138, v130, sizeof(v138));
    v133[0] = 1;
    v133[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)v117);
    v130[0] = 2;
    v130[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v130);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v131, (uint64_t)v121);
    boost::polygon::detail::extended_int<64ul>::add(v130, v106, v104);
    memcpy(v139, v130, sizeof(v139));
    boost::polygon::detail::extended_int<64ul>::p(__dst, v85, v86);
    v89 = ldexp(v87, v88);
    v90 = 1.0;
    v67 = 1.0 / v89;
    if (v14)
    {
      boost::polygon::detail::extended_int<64ul>::p(v137, v89, 1.0);
      v93 = ldexp(v91, v92);
      v90 = 0.25;
      v89 = v67 * (v93 * 0.25);
      *v16 = v89;
      if (!v12)
      {
LABEL_78:
        if (!a9)
          return;
LABEL_82:
        v97 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v137, v132, v89, v90);
        v83 = ldexp(*(long double *)&v97, v98);
        v84 = 0.25;
LABEL_83:
        v99 = v83 * v84;
        v100 = v67 * v99;
        boost::polygon::detail::extended_int<64ul>::p(__src, v99, v84);
        v16[2] = v100 / sqrt(ldexp(v101, v102));
        return;
      }
    }
    else if (!v12)
    {
      goto LABEL_78;
    }
    boost::polygon::detail::extended_int<64ul>::p(v139, v89, v90);
    v96 = ldexp(v94, v95);
    v90 = 0.25;
    v89 = v67 * (v96 * 0.25);
    v16[1] = v89;
    if (!a9)
      return;
    goto LABEL_82;
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v115, (uint64_t)v115);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, __dst, (uint64_t)__dst);
  boost::polygon::detail::extended_int<64ul>::add(v106, v105, v104);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v106, (uint64_t)v109);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v131, (uint64_t)v108);
  v137[0] = 4;
  v137[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v130, v132, (uint64_t)v137);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v62, v63);
  v66 = ldexp(v64, v65);
  v67 = 1.0 / v66 * (1.0 / v66);
  if ((v14 & 1) != 0 || a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v119, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v131, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v115, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v123);
    boost::polygon::detail::extended_int<64ul>::add(v137, v132, v106);
    v132[0] = 1;
    v132[64] = 1;
    *(_OWORD *)&v131[192] = v123[12];
    *(_OWORD *)&v131[208] = v123[13];
    *(_OWORD *)&v131[224] = v123[14];
    *(_OWORD *)&v131[240] = v123[15];
    *(_OWORD *)&v131[128] = v123[8];
    *(_OWORD *)&v131[144] = v123[9];
    *(_OWORD *)&v131[160] = v123[10];
    *(_OWORD *)&v131[176] = v123[11];
    *(_OWORD *)&v131[64] = v123[4];
    *(_OWORD *)&v131[80] = v123[5];
    *(_OWORD *)&v131[96] = v123[6];
    *(_OWORD *)&v131[112] = v123[7];
    *(_OWORD *)v131 = v123[0];
    *(_OWORD *)&v131[16] = v123[1];
    *(_OWORD *)&v131[32] = v123[2];
    *(_OWORD *)&v131[48] = v123[3];
    v68 = v124;
    if (v18 == 2)
      v68 = -v124;
    *(_OWORD *)&v138[192] = *(_OWORD *)&v131[192];
    *(_OWORD *)&v138[208] = *(_OWORD *)&v131[208];
    *(_OWORD *)&v138[224] = *(_OWORD *)&v131[224];
    *(_OWORD *)&v138[240] = *(_OWORD *)&v131[240];
    *(_OWORD *)&v138[128] = *(_OWORD *)&v131[128];
    *(_OWORD *)&v138[144] = *(_OWORD *)&v131[144];
    *(_OWORD *)&v138[160] = *(_OWORD *)&v131[160];
    *(_OWORD *)&v138[176] = *(_OWORD *)&v131[176];
    *(_OWORD *)&v138[64] = *(_OWORD *)&v131[64];
    *(_OWORD *)&v138[80] = *(_OWORD *)&v131[80];
    *(_OWORD *)&v138[96] = *(_OWORD *)&v131[96];
    *(_OWORD *)&v138[112] = *(_OWORD *)&v131[112];
    *(_OWORD *)v138 = *(_OWORD *)v131;
    *(_OWORD *)&v138[16] = *(_OWORD *)&v131[16];
    *(_OWORD *)&v138[32] = *(_OWORD *)&v131[32];
    *(_OWORD *)&v138[48] = *(_OWORD *)&v131[48];
    *(_DWORD *)&v138[256] = v68;
    memcpy(v133, v130, sizeof(v133));
    if (v14)
    {
      v71 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v137, v132, v69, v70);
      *v16 = v67 * (ldexp(*(long double *)&v71, v72) * 0.5);
    }
  }
  if ((v12 & 1) != 0 || a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v117, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v103, (unsigned int *)v115, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, v103, (uint64_t)v121);
    boost::polygon::detail::extended_int<64ul>::add(v131, v106, v104);
    memcpy(v139, v131, sizeof(v139));
    v134[0] = 1;
    v135 = 1;
    *(_OWORD *)&v131[192] = v121[12];
    *(_OWORD *)&v131[208] = v121[13];
    *(_OWORD *)&v131[224] = v121[14];
    *(_OWORD *)&v131[240] = v121[15];
    *(_OWORD *)&v131[128] = v121[8];
    *(_OWORD *)&v131[144] = v121[9];
    *(_OWORD *)&v131[160] = v121[10];
    *(_OWORD *)&v131[176] = v121[11];
    *(_OWORD *)&v131[64] = v121[4];
    *(_OWORD *)&v131[80] = v121[5];
    *(_OWORD *)&v131[96] = v121[6];
    *(_OWORD *)&v131[112] = v121[7];
    *(_OWORD *)v131 = v121[0];
    *(_OWORD *)&v131[16] = v121[1];
    *(_OWORD *)&v131[32] = v121[2];
    *(_OWORD *)&v131[48] = v121[3];
    v73 = v122;
    if (v18 == 2)
      v73 = -v122;
    v152 = *(_OWORD *)&v131[192];
    v153 = *(_OWORD *)&v131[208];
    v154 = *(_OWORD *)&v131[224];
    v155 = *(_OWORD *)&v131[240];
    v148 = *(_OWORD *)&v131[128];
    v149 = *(_OWORD *)&v131[144];
    v150 = *(_OWORD *)&v131[160];
    v151 = *(_OWORD *)&v131[176];
    v144 = *(_OWORD *)&v131[64];
    v145 = *(_OWORD *)&v131[80];
    v146 = *(_OWORD *)&v131[96];
    v147 = *(_OWORD *)&v131[112];
    v140 = *(_OWORD *)v131;
    v141 = *(_OWORD *)&v131[16];
    v142 = *(_OWORD *)&v131[32];
    v143 = *(_OWORD *)&v131[48];
    v156 = v73;
    memcpy(v136, v130, sizeof(v136));
    if (v12)
    {
      v76 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v139, v134, v74, v75);
      v16[1] = v67 * (ldexp(*(long double *)&v76, v77) * 0.5);
    }
  }
  if (a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v132, (uint64_t)__src);
    memcpy(v132, v131, sizeof(v132));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v133, (uint64_t)__src);
    memcpy(v133, v131, sizeof(v133));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v115, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::add(v106, v105, v104);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v107, (uint64_t)v106);
    memcpy(v139, v131, sizeof(v139));
    v134[0] = 1;
    v135 = 1;
    *(_OWORD *)&v131[192] = v115[12];
    *(_OWORD *)&v131[208] = v115[13];
    *(_OWORD *)&v131[224] = v115[14];
    *(_OWORD *)&v131[240] = v115[15];
    *(_OWORD *)&v131[128] = v115[8];
    *(_OWORD *)&v131[144] = v115[9];
    *(_OWORD *)&v131[160] = v115[10];
    *(_OWORD *)&v131[176] = v115[11];
    *(_OWORD *)&v131[64] = v115[4];
    *(_OWORD *)&v131[80] = v115[5];
    *(_OWORD *)&v131[96] = v115[6];
    *(_OWORD *)&v131[112] = v115[7];
    *(_OWORD *)v131 = v115[0];
    *(_OWORD *)&v131[16] = v115[1];
    *(_OWORD *)&v131[32] = v115[2];
    *(_OWORD *)&v131[48] = v115[3];
    v78 = v116;
    if (v18 == 2)
      v78 = -v116;
    v152 = *(_OWORD *)&v131[192];
    v153 = *(_OWORD *)&v131[208];
    v154 = *(_OWORD *)&v131[224];
    v155 = *(_OWORD *)&v131[240];
    v148 = *(_OWORD *)&v131[128];
    v149 = *(_OWORD *)&v131[144];
    v150 = *(_OWORD *)&v131[160];
    v151 = *(_OWORD *)&v131[176];
    v144 = *(_OWORD *)&v131[64];
    v145 = *(_OWORD *)&v131[80];
    v146 = *(_OWORD *)&v131[96];
    v147 = *(_OWORD *)&v131[112];
    v140 = *(_OWORD *)v131;
    v141 = *(_OWORD *)&v131[16];
    v142 = *(_OWORD *)&v131[32];
    v143 = *(_OWORD *)&v131[48];
    v156 = v78;
    memcpy(v136, v130, sizeof(v136));
    v81 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(v24, v137, v132, v79, v80);
    v83 = ldexp(*(long double *)&v81, v82);
    v84 = 0.5;
    goto LABEL_83;
  }
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v16;
  double v17;
  long double v18;
  double v19;
  double v20;
  unsigned int v21[65];
  int v22[65];
  unsigned int v23[65];
  _DWORD __src[65];
  _DWORD __dst[65];
  long double v26[2];
  double v27[2];
  int v28;

  v8 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(a4, a5, a1, a2, a3);
  v10 = v9;
  v27[0] = v9;
  v27[1] = v11;
  boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v8, v12, a1, a2 + 65, a3 + 65);
  v26[0] = v13;
  v26[1] = v14;
  if (v10 >= 0.0 && v13 >= 0.0 || v10 <= 0.0 && v13 <= 0.0)
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v27, v26);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v23, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::dif (__dst, __src, v22);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v16, v17);
  v19 = frexp(v18, &v28);
  v20 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v27, (uint64_t)v26));
  return frexp(v19 / v20, &v28);
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(unsigned int *a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19[65];
  int v20[65];
  unsigned int v21[65];
  int v22[65];
  unsigned int v23[65];
  _DWORD v24[65];
  unsigned int v25[65];
  _DWORD v26[65];
  unsigned int __dst[65];
  _DWORD v28[65];
  long double v29[2];
  _QWORD v30[2];
  _QWORD __src[34];

  v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2, a3, a4, a5));
  *(double *)v30 = v8;
  v30[1] = v9;
  v12 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2 + 130, a3 + 130, v10, v11));
  v29[0] = v12;
  v29[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0)
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v30, v29);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v25, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v26, v25, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(__dst, v26, v24);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (v28, __dst, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 195, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)(a3 + 195));
  boost::polygon::detail::extended_int<64ul>::dif (__src, v28, v20);
  memcpy(a1, __src, 0x104uLL);
  a1[325] = 1;
  a1[389] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, a2, (uint64_t)(a2 + 65));
  LODWORD(__src[0]) = 2;
  LODWORD(__src[32]) = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v28, __dst, (uint64_t)__src);
  memcpy(a1 + 65, v28, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3, (uint64_t)(a3 + 65));
  memcpy(a1 + 390, __src, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, a2 + 130, (uint64_t)(a2 + 195));
  LODWORD(__src[0]) = 2;
  LODWORD(__src[32]) = -1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v28, __dst, (uint64_t)__src);
  memcpy(a1 + 130, v28, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3 + 130, (uint64_t)(a3 + 195));
  memcpy(a1 + 455, __src, 0x104uLL);
  v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(a1, a1, a1 + 325, v15, v16));
  v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v30, (uint64_t)v29));
  return frexp(v17 / v18, (int *)&__src[1]);
}

long double boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(double a1, double a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  long double v6;
  double v7;
  double v8;
  int v9;
  long double v10;
  long double v11;
  double v12;
  _QWORD v14[2];
  uint64_t v15;

  boost::polygon::detail::extended_int<64ul>::p(a4, a1, a2);
  v7 = frexp(v6, (int *)&v15);
  boost::polygon::detail::extended_int<64ul>::p(a5, v7, v8);
  LODWORD(a5) = v9;
  v11 = frexp(v10, (int *)&v15);
  LODWORD(v15) = v15 + (_DWORD)a5;
  *(long double *)v14 = v11;
  v14[1] = v15;
  boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)v14);
  return frexp(v7 * v12, (int *)&v15);
}

uint64_t boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(_DWORD *a1, long double *a2)
{
  long double v2;
  int v3;
  int v4;
  double v7;
  long double v9;
  int v10;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  if (*(double *)a1 == 0.0)
    return *(_OWORD *)a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = a1[2];
  if (v3 > v4 + 54)
    return *(_OWORD *)a2;
  v7 = *a2;
  if (*a2 == 0.0 || v4 > v3 + 54)
    return *(_OWORD *)a1;
  if (v4 >= v3)
  {
    v11 = ldexp(v2, v4 - v3);
    *(_QWORD *)&v12 = frexp(v7 + v11, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v3;
  }
  else
  {
    v9 = ldexp(*a2, v3 - v4);
    *(_QWORD *)&v12 = frexp(v2 + v9, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v4;
  }
  DWORD2(v12) = v10;
  return v12;
}

uint64_t boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(_DWORD *a1, uint64_t a2)
{
  long double v2;
  int v3;
  int v4;
  long double v5;
  double v6;
  int v7;
  double v9;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a2 + 8);
  if (*(double *)a1 == 0.0 || (v4 = a1[2], v3 > v4 + 54))
  {
    v5 = -*(double *)a2;
    goto LABEL_4;
  }
  v9 = *(double *)a2;
  if (*(double *)a2 != 0.0 && v4 <= v3 + 54)
  {
    if (v4 < v3)
    {
      v11 = ldexp(-v9, v3 - v4);
      v6 = frexp(v2 + v11, (int *)&v12 + 2);
      v7 = DWORD2(v12) + v4;
      goto LABEL_5;
    }
    v5 = ldexp(v2, v4 - v3) - v9;
LABEL_4:
    v6 = frexp(v5, (int *)&v12 + 2);
    v7 = DWORD2(v12) + v3;
LABEL_5:
    DWORD2(v12) = v7;
    return *(_QWORD *)&v6;
  }
  return *(_OWORD *)a1;
}

long double boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt(uint64_t a1)
{
  double v1;
  uint64_t v3;

  v1 = *(double *)a1;
  if ((*(_DWORD *)(a1 + 8) & 1) != 0)
    v1 = v1 + v1;
  return frexp(sqrt(v1), (int *)&v3);
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(_DWORD *a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19[65];
  int v20[65];
  unsigned int v21[65];
  _DWORD v22[65];
  unsigned int v23[65];
  unsigned int v24[65];
  _DWORD __dst[65];
  long double v26[2];
  double v27[2];
  _DWORD __src[66];

  v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2, a3, a4, a5));
  v27[0] = v8;
  v27[1] = v9;
  boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v10, v11, (uint64_t)a1, a2 + 130, a3 + 130);
  v26[0] = v12;
  v26[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0)
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v27, v26);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(__dst, v24, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)(a3 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (__src, __dst, v20);
  memcpy(a1 + 195, __src, 0x104uLL);
  a1[520] = 1;
  a1[584] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, a2, (uint64_t)(a2 + 65));
  __src[0] = 2;
  __src[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v24, (uint64_t)__src);
  memcpy(a1 + 260, __dst, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3, (uint64_t)(a3 + 65));
  memcpy(a1 + 585, __src, 0x104uLL);
  v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a1 + 195, a1 + 520, v15, v16));
  v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v27, (uint64_t)v26));
  return frexp(v17 / v18, &__src[2]);
}

double boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  __int128 v5;
  double v6;

  v2 = *a2;
  v3 = a1[1] + a2[1] + 1.0;
  if (*a2 >= 0.0)
  {
    *a1 = *a1 / v2;
    a1[1] = v3;
    v6 = a1[2];
    a1[3] = a1[3] + a2[1] + 1.0;
    *(double *)&v5 = v6 / *a2;
    *((_QWORD *)a1 + 2) = v5;
  }
  else
  {
    *a1 = *a1 / -v2;
    a1[1] = v3;
    v4 = a1[3] + a2[1] + 1.0;
    a1[2] = a1[2] / -*a2;
    a1[3] = v4;
    v5 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *((_OWORD *)a1 + 1);
    *((_OWORD *)a1 + 1) = v5;
  }
  return *(double *)&v5;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  double v44;
  double v45;
  long double v46;
  int v47;
  long double v48;
  double v49;
  int v50;
  double v51;
  double v52;
  uint64_t v53;
  int v54;
  int v55;
  double v56;
  double v57;
  uint64_t v58;
  int v59;
  int v60;
  double v61;
  double v62;
  uint64_t v63;
  int v64;
  double v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  double v76;
  double v77;
  long double v78;
  int v79;
  double v80;
  double v81;
  long double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  long double v87;
  int v88;
  long double v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  double v95;
  double v96;
  long double v97;
  int v98;
  double v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108[65];
  _DWORD v109[65];
  _DWORD v110[65];
  int v111[65];
  unsigned int v112[65];
  unsigned int v113[65];
  unsigned int __dst[65];
  int v115[65];
  unsigned int v116[65];
  unsigned int v117[65];
  unsigned int __src[65];
  unsigned int v119[65];
  unsigned int v120[65];
  unsigned int v121[64];
  int v122;
  unsigned int v123[65];
  _DWORD v124[65];
  _BYTE v125[260];
  _BYTE v126[260];
  unsigned int v127[65];
  _BYTE v128[260];
  _BYTE v129[260];
  _DWORD v130[65];
  _OWORD v131[16];
  int v132;
  _BYTE v133[260];
  unsigned int v134[64];
  int v135;
  _QWORD v136[32];
  int v137;
  unsigned int v138[64];
  int v139;
  _QWORD v140[32];
  int v141;
  _BYTE v142[260];
  uint64_t v143;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v107 = v14;
  v16 = v15;
  v18 = v17;
  v19 = v11;
  v20 = v10;
  v22 = v21;
  v23 = (_DWORD *)v9;
  v143 = *MEMORY[0x24BDAC8D0];
  v24 = *v10;
  v25 = v10[2];
  v26 = v24 <= v25;
  v27 = v24 - v25;
  if (!v26)
  {
    v28 = 1;
LABEL_3:
    *(_QWORD *)v138 = v27;
    goto LABEL_6;
  }
  if (v27 < 0)
  {
    v27 = -v27;
    v28 = -1;
    goto LABEL_3;
  }
  v28 = 0;
LABEL_6:
  v139 = v28;
  v29 = v10[1];
  v30 = v10[3];
  v26 = v29 <= v30;
  v31 = v29 - v30;
  if (!v26)
  {
    v32 = 1;
LABEL_8:
    *(_QWORD *)v134 = v31;
    goto LABEL_11;
  }
  if (v31 < 0)
  {
    v31 = -v31;
    v32 = -1;
    goto LABEL_8;
  }
  v32 = 0;
LABEL_11:
  v135 = v32;
  v33 = v11[2];
  v34 = *v11;
  v26 = v33 <= v34;
  v35 = v33 - v34;
  if (!v26)
  {
    v36 = 1;
LABEL_13:
    v140[0] = v35;
    goto LABEL_16;
  }
  if (v35 < 0)
  {
    v35 = -v35;
    v36 = -1;
    goto LABEL_13;
  }
  v36 = 0;
LABEL_16:
  v141 = v36;
  v37 = v11[3];
  v38 = v11[1];
  v39 = __OFSUB__(v37, v38);
  v40 = v37 - v38;
  if (!((v40 < 0) ^ v39 | (v40 == 0)))
  {
    v41 = 1;
LABEL_18:
    v136[0] = v40;
    goto LABEL_21;
  }
  if (v40 < 0)
  {
    v40 = -v40;
    v41 = -1;
    goto LABEL_18;
  }
  v41 = 0;
LABEL_21:
  v137 = v41;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, (unsigned int *)v140, (uint64_t)v134);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v138, (uint64_t)v136);
  boost::polygon::detail::extended_int<64ul>::dif (v121, v127, (int *)v123);
  if (v122)
  {
    v42 = *v20;
    if (*v20 <= 0)
    {
      if ((v42 & 0x80000000) == 0)
      {
        v43 = 0;
LABEL_44:
        v127[64] = v43;
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v134, (uint64_t)v127);
        v66 = v20[1];
        if (v66 <= 0)
        {
          if ((v66 & 0x80000000) == 0)
          {
            v67 = 0;
LABEL_49:
            v127[64] = v67;
            boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v127);
            boost::polygon::detail::extended_int<64ul>::dif (v131, v123, (int *)v142);
            v68 = v19[3];
            if (v68 <= 0)
            {
              if ((v68 & 0x80000000) == 0)
              {
                v69 = 0;
LABEL_54:
                v127[64] = v69;
                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v127);
                v70 = v19[2];
                if (v70 <= 0)
                {
                  if ((v70 & 0x80000000) == 0)
                  {
                    v71 = 0;
LABEL_59:
                    v127[64] = v71;
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, (unsigned int *)v136, (uint64_t)v127);
                    boost::polygon::detail::extended_int<64ul>::dif (v127, v123, (int *)v142);
                    memcpy(v133, v127, sizeof(v133));
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v138, (uint64_t)v133);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v131);
                    boost::polygon::detail::extended_int<64ul>::add(v120, v127, v123);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v134, (uint64_t)v133);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v136, (uint64_t)v131);
                    boost::polygon::detail::extended_int<64ul>::add(v119, v127, v123);
                    v72 = *v22;
                    if (*v22 <= 0)
                    {
                      if ((v72 & 0x80000000) == 0)
                      {
                        v73 = 0;
LABEL_64:
                        v127[64] = v73;
                        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v121, (uint64_t)v127);
                        boost::polygon::detail::extended_int<64ul>::dif (__src, v120, (int *)v123);
                        v74 = v22[1];
                        if (v74 <= 0)
                        {
                          if ((v74 & 0x80000000) == 0)
                          {
                            v75 = 0;
LABEL_69:
                            v127[64] = v75;
                            boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v121, (uint64_t)v127);
                            boost::polygon::detail::extended_int<64ul>::dif (v117, v119, (int *)v123);
                            if (!(__src[64] | v117[64]))
                            {
                              boost::polygon::detail::extended_int<64ul>::p(v121, v76, v77);
                              v80 = ldexp(v78, v79);
                              boost::polygon::detail::extended_int<64ul>::p(v120, v80, v81);
                              v84 = ldexp(v82, v83);
                              v85 = v84 / v80;
                              boost::polygon::detail::extended_int<64ul>::p(v119, v84, v86);
                              v89 = ldexp(v87, v88);
                              *(double *)v16 = v85;
                              *(long double *)(v16 + 8) = v89 / v80;
                              *(double *)(v16 + 16) = v85;
                              *(_BYTE *)(v16 + 24) = 1;
                              return;
                            }
                            if (v122 >= 0)
                              v90 = -1;
                            else
                              v90 = 1;
                            if (v18 == 2)
                              v91 = v90;
                            else
                              v91 = -v90;
                            v92 = 1;
                            if (v91 <= 0)
                            {
                              if ((v91 & 0x80000000) == 0)
                              {
                                v92 = 0;
LABEL_85:
                                v116[64] = v92;
                                memcpy(v142, __src, sizeof(v142));
                                *(_DWORD *)&v142[256] = -*(_DWORD *)&v142[256];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v142);
                                memcpy(__dst, v117, sizeof(__dst));
                                __dst[64] = -__dst[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v136, (uint64_t)__dst);
                                boost::polygon::detail::extended_int<64ul>::add(v127, v123, v115);
                                memcpy(v115, __src, sizeof(v115));
                                v115[64] = -v115[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v115);
                                memcpy(v113, v117, sizeof(v113));
                                v113[64] = -v113[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v134, (uint64_t)v113);
                                boost::polygon::detail::extended_int<64ul>::add(v123, v142, __dst);
                                memcpy(v128, v123, sizeof(v128));
                                memcpy(v129, v116, sizeof(v129));
                                v130[64] = 0;
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v138);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v134, (uint64_t)v134);
                                boost::polygon::detail::extended_int<64ul>::add(v123, v142, v115);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v140, (uint64_t)v140);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, (unsigned int *)v136, (uint64_t)v136);
                                boost::polygon::detail::extended_int<64ul>::add(v142, v115, __dst);
                                memcpy(v124, v142, sizeof(v124));
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v138, (uint64_t)v140);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v134, (uint64_t)v136);
                                boost::polygon::detail::extended_int<64ul>::add(v142, v115, __dst);
                                memcpy(v125, v142, sizeof(v125));
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v138, (uint64_t)v117);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v134, (uint64_t)__src);
                                boost::polygon::detail::extended_int<64ul>::dif (v113, v112, v111);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, (unsigned int *)v140, (uint64_t)v117);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, (unsigned int *)v136, (uint64_t)__src);
                                boost::polygon::detail::extended_int<64ul>::dif (v110, v109, v108);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v113, (uint64_t)v110);
                                *(_DWORD *)v142 = 2;
                                *(_DWORD *)&v142[256] = -1;
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, __dst, (uint64_t)v142);
                                memcpy(v126, v115, sizeof(v126));
                                v93 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                v95 = ldexp(*(long double *)&v93, v94);
                                boost::polygon::detail::extended_int<64ul>::p(v121, v95, v96);
                                v99 = v95 * ldexp(v97, v98);
                                if (v13)
                                {
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v136, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v140);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v136);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v119, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, v111);
                                  memcpy(v127, v142, sizeof(v127));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v134, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v138);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v134);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v119, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, v111);
                                  memcpy(v128, v142, sizeof(v128));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v119, (uint64_t)v116);
                                  memcpy(v129, v142, sizeof(v129));
                                  v100 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                  *(long double *)(v16 + 8) = ldexp(*(long double *)&v100, v101) / v99;
                                }
                                if ((v107 & 1) != 0 || a9)
                                {
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v140, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v140);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v136);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v120, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, v111);
                                  memcpy(v127, v142, sizeof(v127));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v138, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v138);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v134);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v120, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, v111);
                                  memcpy(v128, v142, sizeof(v128));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v120, (uint64_t)v116);
                                  memcpy(v129, v142, sizeof(v129));
                                  if (v107)
                                  {
                                    v102 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                    *(long double *)v16 = ldexp(*(long double *)&v102, v103) / v99;
                                  }
                                  if (a9)
                                  {
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, __src, (uint64_t)__src);
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v117, (uint64_t)v117);
                                    boost::polygon::detail::extended_int<64ul>::add(v113, v112, v111);
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v121, (uint64_t)v113);
                                    if (v95 >= 0.0)
                                      v104 = 1;
                                    else
                                      v104 = -1;
                                    *(_DWORD *)v142 = 1;
                                    *(_DWORD *)&v142[256] = v104;
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, __dst, (uint64_t)v142);
                                    memcpy(v130, v115, sizeof(v130));
                                    v105 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                    v65 = ldexp(*(long double *)&v105, v106) / v99;
LABEL_96:
                                    *(double *)(v16 + 16) = v65;
                                    return;
                                  }
                                }
                                return;
                              }
                              v92 = -1;
                            }
                            v116[0] = 1;
                            goto LABEL_85;
                          }
                          v74 = -v74;
                          v75 = -1;
                        }
                        else
                        {
                          v75 = 1;
                        }
                        v127[0] = v74;
                        goto LABEL_69;
                      }
                      v72 = -v72;
                      v73 = -1;
                    }
                    else
                    {
                      v73 = 1;
                    }
                    v127[0] = v72;
                    goto LABEL_64;
                  }
                  v70 = -v70;
                  v71 = -1;
                }
                else
                {
                  v71 = 1;
                }
                v127[0] = v70;
                goto LABEL_59;
              }
              v68 = -v68;
              v69 = -1;
            }
            else
            {
              v69 = 1;
            }
            v127[0] = v68;
            goto LABEL_54;
          }
          v66 = -v66;
          v67 = -1;
        }
        else
        {
          v67 = 1;
        }
        v127[0] = v66;
        goto LABEL_49;
      }
      v42 = -v42;
      v43 = -1;
    }
    else
    {
      v43 = 1;
    }
    v127[0] = v42;
    goto LABEL_44;
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v138, (uint64_t)v138);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v134, (uint64_t)v134);
  boost::polygon::detail::extended_int<64ul>::add(v127, v123, v131);
  boost::polygon::detail::extended_int<64ul>::p(v127, v44, v45);
  v48 = ldexp(v46, v47);
  v49 = v48 + v48;
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v19 - (uint64_t)v20[2], (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v19[1] - (uint64_t)v20[3], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v131, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v22[1] - (uint64_t)v20[3], (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v22 - (uint64_t)v20[2], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v120, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v22 - (uint64_t)*v19, (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v22[1] - (uint64_t)v19[1], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v119, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v120, (uint64_t)v119);
  v124[0] = 1;
  v124[64] = 1;
  if (v13)
  {
    if (v18 == 2)
      v50 = 1;
    else
      v50 = -1;
    *(_DWORD *)v142 = 2;
    *(_DWORD *)&v142[256] = v50;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v134, (uint64_t)v142);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v116, v138, (uint64_t)v138);
    boost::polygon::detail::extended_int<64ul>::operator*(v116, v19[1] + (uint64_t)v20[3], (uint64_t)v117);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v138, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(__dst, *v19 + (uint64_t)v20[2] - 2 * *v22, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::dif (__src, v117, v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v134, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(v112, 2 * v22[1], (uint64_t)v113);
    boost::polygon::detail::extended_int<64ul>::add(v142, __src, v113);
    memcpy(v128, v142, sizeof(v128));
    v53 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v23, v127, v123, v51, v52);
    *(long double *)(v16 + 8) = ldexp(*(long double *)&v53, v54) / v49;
  }
  if ((v107 & 1) != 0 || a9)
  {
    if (v18 == 2)
      v55 = 1;
    else
      v55 = -1;
    *(_DWORD *)v142 = 2;
    *(_DWORD *)&v142[256] = v55;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v138, (uint64_t)v142);
    memcpy(v127, __src, sizeof(v127));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v116, v134, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(v116, *v19 + (uint64_t)v20[2], (uint64_t)v117);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v138, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(__dst, v19[1] + (uint64_t)v20[3] - 2 * v22[1], (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::dif (__src, v117, v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v138, (uint64_t)v138);
    boost::polygon::detail::extended_int<64ul>::operator*(v112, 2 * *v22, (uint64_t)v113);
    boost::polygon::detail::extended_int<64ul>::add(v142, __src, v113);
    memcpy(v128, v142, sizeof(v128));
    if (v107)
    {
      v58 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v23, v127, v123, v56, v57);
      *(long double *)v16 = ldexp(*(long double *)&v58, v59) / v49;
    }
    if (a9)
    {
      *(_OWORD *)&v142[192] = v131[12];
      *(_OWORD *)&v142[208] = v131[13];
      *(_OWORD *)&v142[224] = v131[14];
      *(_OWORD *)&v142[240] = v131[15];
      *(_OWORD *)&v142[128] = v131[8];
      *(_OWORD *)&v142[144] = v131[9];
      *(_OWORD *)&v142[160] = v131[10];
      *(_OWORD *)&v142[176] = v131[11];
      *(_OWORD *)&v142[64] = v131[4];
      *(_OWORD *)&v142[80] = v131[5];
      *(_OWORD *)&v142[96] = v131[6];
      *(_OWORD *)&v142[112] = v131[7];
      *(_OWORD *)v142 = v131[0];
      *(_OWORD *)&v142[16] = v131[1];
      *(_OWORD *)&v142[32] = v131[2];
      *(_OWORD *)&v142[48] = v131[3];
      if (v132 >= 0)
        v60 = v132;
      else
        v60 = -v132;
      *(_OWORD *)&v129[192] = *(_OWORD *)&v142[192];
      *(_OWORD *)&v129[208] = *(_OWORD *)&v142[208];
      *(_OWORD *)&v129[224] = *(_OWORD *)&v142[224];
      *(_OWORD *)&v129[240] = *(_OWORD *)&v142[240];
      *(_OWORD *)&v129[128] = *(_OWORD *)&v142[128];
      *(_OWORD *)&v129[144] = *(_OWORD *)&v142[144];
      *(_OWORD *)&v129[160] = *(_OWORD *)&v142[160];
      *(_OWORD *)&v129[176] = *(_OWORD *)&v142[176];
      *(_OWORD *)&v129[64] = *(_OWORD *)&v142[64];
      *(_OWORD *)&v129[80] = *(_OWORD *)&v142[80];
      *(_OWORD *)&v129[96] = *(_OWORD *)&v142[96];
      *(_OWORD *)&v129[112] = *(_OWORD *)&v142[112];
      *(_OWORD *)v129 = *(_OWORD *)v142;
      *(_OWORD *)&v129[16] = *(_OWORD *)&v142[16];
      *(_OWORD *)&v129[32] = *(_OWORD *)&v142[32];
      *(_OWORD *)&v129[48] = *(_OWORD *)&v142[48];
      *(_DWORD *)&v129[256] = v60;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v138, (uint64_t)v138);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v117, v134, (uint64_t)v134);
      boost::polygon::detail::extended_int<64ul>::add(v142, __src, v117);
      memcpy(v125, v142, sizeof(v125));
      v63 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v23, v127, v123, v61, v62);
      v65 = ldexp(*(long double *)&v63, v64) / v49;
      goto LABEL_96;
    }
  }
}

uint64_t boost::polygon::detail::extended_int<64ul>::operator*@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7[32];
  int v8;

  if (a2 < 1)
  {
    if (a2 < 0)
    {
      v7[0] = -a2;
      if ((unint64_t)-a2 >> 32)
        v5 = -2;
      else
        v5 = -1;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v7[0] = a2;
    if (HIDWORD(a2))
      v5 = 2;
    else
      v5 = 1;
  }
  v8 = v5;
  return boost::polygon::detail::extended_int<64ul>::mul(a3, a1, (uint64_t)v7);
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  double v3;
  double v4;
  unsigned int *v5;
  unsigned int *v6;
  _DWORD *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  long double *v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  int v39;
  int v40;
  double v41;
  double v43;
  double v44;
  double v45;
  _QWORD *v46;
  _QWORD *v47;
  double v48;
  double v49;
  double v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[33];
  _QWORD v55[33];
  _QWORD v56[2];
  _QWORD v57[2];
  unsigned int v58[65];
  unsigned int v59[65];
  unsigned int v60[65];
  unsigned int v61[65];
  unsigned int v62[65];
  unsigned int v63[65];
  unsigned int v64[65];
  _QWORD __src[33];
  _QWORD v66[33];
  unsigned int v67[65];
  _DWORD v68[130];
  _BYTE v69[260];
  unsigned int __dst[65];
  _BYTE v71[260];
  _BYTE v72[260];
  _BYTE v73[260];
  uint64_t v74;

  v0 = MEMORY[0x24BDAC7A8]();
  v5 = v2;
  v6 = v1;
  v7 = (_DWORD *)v0;
  v74 = *MEMORY[0x24BDAC8D0];
  if (v1[259])
  {
    __dst[0] = 1;
    __dst[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v2, (uint64_t)(v2 + 65));
    memcpy(v71, v5 + 130, sizeof(v71));
    v68[0] = 1;
    v68[64] = 1;
    v51 = v6 + 130;
    v52 = (uint64_t)(v5 + 195);
    v10 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v8, v9, (uint64_t)v7, v6 + 130, v5 + 195);
    v12 = v11;
    v14 = v13;
    __src[0] = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v10, v15);
    __src[1] = v16;
    boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)__src);
    v19 = v18 + v12;
    v20 = frexp(v14 * v17, (int *)&v66[1]);
    LODWORD(v66[1]) += v19;
    *(double *)v57 = v20;
    v57[1] = v66[1];
    memcpy(__dst, v6, sizeof(__dst));
    memcpy(v67, v5, sizeof(v67));
    memcpy(v71, v6 + 65, sizeof(v71));
    v53 = (uint64_t)(v5 + 65);
    memcpy(v68, v5 + 65, 0x104uLL);
    memcpy(v72, v6 + 195, sizeof(v72));
    v68[65] = 1;
    v68[129] = 1;
    v23 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v7, __dst, v67, v21, v22));
    *(double *)v56 = v23;
    v56[1] = v24;
    if (v23 >= 0.0 && v20 >= 0.0 || v23 <= 0.0 && v20 <= 0.0)
    {
      v25 = v56;
      v26 = (long double *)v57;
      return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v25, v26);
    }
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6 + 195, (uint64_t)v6);
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    memcpy(__dst, __src, sizeof(__dst));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6 + 195, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    memcpy(v71, __src, sizeof(v71));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v6, (uint64_t)v6);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, (uint64_t)v5);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v60, v6 + 65, (uint64_t)(v6 + 65));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v61, v60, v53);
    boost::polygon::detail::extended_int<64ul>::add(v64, v63, v61);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v59, v6 + 195, (uint64_t)(v6 + 195));
    boost::polygon::detail::extended_int<64ul>::add(__src, v64, v59);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v54, v51, (uint64_t)v51);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v55, (unsigned int *)v54, (uint64_t)(v5 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v58, (unsigned int *)v55, v52);
    boost::polygon::detail::extended_int<64ul>::dif (v66, __src, (int *)v58);
    memcpy(v72, v66, sizeof(v72));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v51, (uint64_t)v51);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, v52);
    boost::polygon::detail::extended_int<64ul>::dif (v66, __src, (int *)v63);
    memcpy(v73, v66, sizeof(v73));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v66, v5, v53);
    memcpy(v69, v66, sizeof(v69));
    v45 = COERCE_DOUBLE(boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss3<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>((uint64_t)v7, __dst, v67, v43, v44));
    v46 = v56;
    v47 = v57;
  }
  else
  {
    v27 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(v0, v1, v2, v3, v4));
    *(double *)v55 = v27;
    v55[1] = v28;
    __dst[0] = 1;
    __dst[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v5, (uint64_t)(v5 + 65));
    memcpy(v71, v5 + 130, sizeof(v71));
    v68[0] = 1;
    v68[64] = 1;
    v31 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v29, v30, (uint64_t)v7, v6 + 130, v5 + 195);
    v33 = v32;
    v35 = v34;
    __src[0] = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v31, v36);
    __src[1] = v37;
    boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)__src);
    v40 = v39 + v33;
    v41 = frexp(v35 * v38, (int *)&v66[1]);
    LODWORD(v66[1]) += v40;
    *(double *)v54 = v41;
    v54[1] = v66[1];
    if (v27 >= 0.0 && v41 >= 0.0 || v27 <= 0.0 && v41 <= 0.0)
    {
      v25 = v55;
      v26 = (long double *)v54;
      return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v25, v26);
    }
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v6, (uint64_t)v6);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v63, (uint64_t)v5);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v61, v6 + 65, (uint64_t)(v6 + 65));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v61, (uint64_t)(v5 + 65));
    boost::polygon::detail::extended_int<64ul>::add(__src, v64, v62);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v58, v6 + 130, (uint64_t)(v6 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v59, v58, (uint64_t)(v5 + 195));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v60, v59, (uint64_t)(v5 + 130));
    boost::polygon::detail::extended_int<64ul>::dif (v66, __src, (int *)v60);
    memcpy(__dst, v66, sizeof(__dst));
    v67[0] = 1;
    v67[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v6 + 130, (uint64_t)(v6 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, (uint64_t)(v5 + 195));
    boost::polygon::detail::extended_int<64ul>::dif (v66, __src, (int *)v63);
    memcpy(v71, v66, sizeof(v71));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v66, v5, (uint64_t)(v5 + 65));
    memcpy(v68, v66, 0x104uLL);
    v45 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v48, v49));
    v46 = v55;
    v47 = v54;
  }
  v50 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v46, (uint64_t)v47));
  return frexp(v45 / v50, (int *)&v66[1]);
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss3<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5)
{
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19[65];
  unsigned int v20[65];
  int v21[65];
  int v22[65];
  unsigned int v23[65];
  _DWORD v24[65];
  unsigned int v25[65];
  _DWORD __src[65];
  long double v27[2];
  _QWORD v28[2];
  int __dst;
  int v30[62];
  int v31;
  _DWORD v32[65];
  _BYTE v33[260];
  unsigned int v34[65];
  _BYTE v35[260];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, a2, a3, a4, a5));
  *(double *)v28 = v8;
  v28[1] = v9;
  v12 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, a2 + 130, a3 + 130, v10, v11));
  v27[0] = v12;
  v27[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0)
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v28, v27);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v25, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v25, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(&__dst, __src, v24);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (v32, &__dst, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 195, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, v20, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::dif (v34, v32, v21);
  v32[0] = 1;
  v32[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, a2, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 130, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::dif (v25, v24, (int *)v23);
  __dst = 2;
  v31 = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v25, (uint64_t)&__dst);
  memcpy(v35, __src, sizeof(v35));
  memcpy(v33, a3 + 195, sizeof(v33));
  v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, v34, v32, v15, v16));
  v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v28, (uint64_t)v27));
  return frexp(v17 / v18, v30);
}

double boost::polygon::detail::operator+<boost::polygon::detail::robust_fpt<double>>(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  double v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *a1;
  v10 = *a2;
  v11 = v4;
  v5 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v11, (double *)&v10);
  v6 = a1[1];
  v8 = a2[1];
  v9 = v6;
  boost::polygon::detail::robust_fpt<double>::operator+((double *)&v9, (double *)&v8);
  return v5;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss()
{
  uint64_t v0;
  int *v1;
  int *v2;
  int *v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  char v77;
  unsigned int *v78;
  int v79;
  int v80[65];
  _DWORD v81[65];
  _DWORD __dst[65];
  unsigned int v83[260];
  unsigned int __src[195];
  _DWORD v85[65];
  _QWORD v86[32];
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  _QWORD v92[32];
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  _QWORD v98[32];
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;

  v0 = MEMORY[0x24BDAC7A8]();
  v79 = v4;
  v75 = v5;
  v77 = v6;
  v76 = v7;
  v78 = (unsigned int *)v0;
  v104 = *MEMORY[0x24BDAC8D0];
  v8 = v1[2];
  v9 = *v1;
  v10 = v8 - v9;
  if (v8 > v9)
  {
    v11 = 1;
LABEL_3:
    v98[0] = v10;
    goto LABEL_6;
  }
  if (v10 < 0)
  {
    v10 = v9 - v8;
    v11 = -1;
    goto LABEL_3;
  }
  v11 = 0;
LABEL_6:
  v99 = v11;
  v12 = v2[2];
  v13 = *v2;
  v14 = v12 - v13;
  if (v12 > v13)
  {
    v15 = 1;
LABEL_8:
    v100 = v14;
    goto LABEL_11;
  }
  if (v14 < 0)
  {
    v14 = v13 - v12;
    v15 = -1;
    goto LABEL_8;
  }
  v15 = 0;
LABEL_11:
  v101 = v15;
  v16 = v3[2];
  v17 = *v3;
  v18 = v16 - v17;
  if (v16 > v17)
  {
    v19 = 1;
LABEL_13:
    v102 = v18;
    goto LABEL_16;
  }
  if (v18 < 0)
  {
    v18 = v17 - v16;
    v19 = -1;
    goto LABEL_13;
  }
  v19 = 0;
LABEL_16:
  v103 = v19;
  v20 = v1[3];
  v21 = v1[1];
  v22 = v20 - v21;
  if (v20 > v21)
  {
    v23 = 1;
LABEL_18:
    v92[0] = v22;
    goto LABEL_21;
  }
  if (v22 < 0)
  {
    v22 = v21 - v20;
    v23 = -1;
    goto LABEL_18;
  }
  v23 = 0;
LABEL_21:
  v93 = v23;
  v24 = v2[3];
  v25 = v2[1];
  v26 = v24 - v25;
  if (v24 > v25)
  {
    v27 = 1;
LABEL_23:
    v94 = v26;
    goto LABEL_26;
  }
  if (v26 < 0)
  {
    v26 = v25 - v24;
    v27 = -1;
    goto LABEL_23;
  }
  v27 = 0;
LABEL_26:
  v95 = v27;
  v28 = v3[3];
  v29 = v3[1];
  v30 = v28 - v29;
  if (v28 <= v29)
  {
    if ((v30 & 0x8000000000000000) == 0)
    {
      v31 = 0;
      goto LABEL_31;
    }
    v30 = v29 - v28;
    v31 = -1;
  }
  else
  {
    v31 = 1;
  }
  v96 = v30;
LABEL_31:
  v97 = v31;
  v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
  if (v32 < 1)
  {
    if (v32 < 0)
    {
      v86[0] = -v32;
      if ((unint64_t)-v32 >> 32)
        v33 = -2;
      else
        v33 = -1;
    }
    else
    {
      v33 = 0;
    }
  }
  else
  {
    v86[0] = v32;
    if (HIDWORD(v32))
      v33 = 2;
    else
      v33 = 1;
  }
  v87 = v33;
  v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
  if (v34 < 1)
  {
    if (v34 < 0)
    {
      v88 = -v34;
      if ((unint64_t)-v34 >> 32)
        v35 = -2;
      else
        v35 = -1;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v88 = v34;
    if (HIDWORD(v34))
      v35 = 2;
    else
      v35 = 1;
  }
  v89 = v35;
  v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
  if (v36 < 1)
  {
    if (v36 < 0)
    {
      v90 = -v36;
      if ((unint64_t)-v36 >> 32)
        v37 = -2;
      else
        v37 = -1;
    }
    else
    {
      v37 = 0;
    }
  }
  else
  {
    v90 = v36;
    if (HIDWORD(v36))
      v37 = 2;
    else
      v37 = 1;
  }
  v38 = 0;
  v91 = v37;
  do
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, (unsigned int *)((char *)v98 + v38), (uint64_t)v98 + v38);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)((char *)v92 + v38), (uint64_t)v92 + v38);
    boost::polygon::detail::extended_int<64ul>::add(__src, __dst, v81);
    memcpy(&v83[v38 / 4], __src, 0x104uLL);
    v38 += 260;
  }
  while (v38 != 780);
  v39 = 0;
  v40 = 0xFFFFFFFF00000000;
  for (i = 1; i != 4; ++i)
  {
    v42 = v40 >> 32;
    if (v39 == 130)
      v43 = 0;
    else
      v43 = i;
    v44 = 65 * v43;
    if (!(v39 * 4))
      v42 = 2;
    v45 = 65 * v42;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v98 + 65 * v43, (uint64_t)v92 + 260 * v42);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v98 + v45, (uint64_t)v92 + 4 * v44);
    boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
    memcpy(&__src[v39], __dst, 0x104uLL);
    v40 += 0x100000000;
    v39 += 65;
  }
  v48 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v46, v47);
  v50 = ldexp(*(long double *)&v48, v49);
  if (v75)
  {
    v51 = 0;
    v52 = 0xFFFFFFFF00000000;
    for (j = 1; j != 4; ++j)
    {
      v54 = v52 >> 32;
      if (v51 == 130)
        v55 = 0;
      else
        v55 = j;
      v56 = 65 * v55;
      if (!(v51 * 4))
        v54 = 2;
      v57 = 65 * v54;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v92 + 65 * v55, (uint64_t)v86 + 260 * v54);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v92 + v57, (uint64_t)v86 + 4 * v56);
      boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
      memcpy(&__src[v51], __dst, 0x104uLL);
      v52 += 0x100000000;
      v51 += 65;
    }
    v60 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v58, v59);
    *(long double *)(v76 + 8) = ldexp(*(long double *)&v60, v61) / v50;
  }
  if ((v77 & 1) != 0 || v79)
  {
    v62 = 0;
    v85[64] = 0;
    v63 = 0xFFFFFFFF00000000;
    v64 = 1;
    do
    {
      v65 = v63 >> 32;
      if (v62 == 130)
        v66 = 0;
      else
        v66 = v64;
      v67 = 65 * v66;
      if (!(v62 * 4))
        v65 = 2;
      v68 = 65 * v65;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v98 + 65 * v66, (uint64_t)v86 + 260 * v65);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v98 + v68, (uint64_t)v86 + 4 * v67);
      boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
      memcpy(&__src[v62], __dst, 0x104uLL);
      if (v79)
      {
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, &__src[v62], (uint64_t)v92 + v62 * 4);
        boost::polygon::detail::extended_int<64ul>::add(__dst, v85, v81);
        memcpy(v85, __dst, sizeof(v85));
      }
      v63 += 0x100000000;
      v62 += 65;
      ++v64;
    }
    while (v62 != 195);
    if ((v77 & 1) != 0)
    {
      v71 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v69, v70);
      v69 = ldexp(*(long double *)&v71, v72) / v50;
      *(double *)v76 = v69;
    }
    if (v79)
    {
      v83[195] = 1;
      v83[259] = 1;
      v73 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(v78, __src, v83, v69, v70);
      *(long double *)(v76 + 16) = ldexp(*(long double *)&v73, v74) / v50;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;
  BOOL v14;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v7 = *(_QWORD *)(a2 - 8);
    v5 = (_QWORD *)(a2 - 8);
    v6 = v7;
    v8 = (_QWORD *)(result + 8 * v4);
    v9 = *v8;
    v10 = *(double *)(v7 + 32);
    v11 = *(double *)(*v8 + 32);
    v12 = *(double *)(v7 + 24) < *(double *)(*v8 + 24);
    if (v10 != v11)
      v12 = v10 < v11;
    if (v12)
    {
      do
      {
        *v5 = v9;
        v5 = v8;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v8 = (_QWORD *)(result + 8 * v4);
        v9 = *v8;
        v13 = *(double *)(*v8 + 32);
        v14 = *(double *)(v6 + 24) < *(double *)(*v8 + 24);
        if (v10 != v13)
          v14 = v10 < v13;
      }
      while (v14);
      *v5 = v6;
    }
  }
  return result;
}

char *boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int,double>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  char **v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v8 = a3;
  v13 = a1[5];
  v11 = (uint64_t)(a1 + 5);
  v12 = v13;
  v15 = *a4;
  v14 = a4[1];
  v16 = *(_QWORD **)(v11 - 8);
  if ((unint64_t)v16 >= v13)
  {
    v19 = (void **)(v11 - 16);
    v20 = *(_QWORD *)(v11 - 16);
    v21 = ((uint64_t)v16 - v20) >> 5;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v23 = v12 - v20;
    if (v23 >> 4 > v22)
      v22 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(v11, v24);
    else
      v25 = 0;
    v26 = &v25[32 * v21];
    v27 = &v25[32 * v24];
    *(_QWORD *)v26 = v15;
    *((_QWORD *)v26 + 1) = v14;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = 0;
    v17 = v26 + 32;
    v29 = (char *)a1[3];
    v28 = (char *)a1[4];
    v8 = a3;
    if (v28 != v29)
    {
      do
      {
        v30 = *((_OWORD *)v28 - 1);
        *((_OWORD *)v26 - 2) = *((_OWORD *)v28 - 2);
        *((_OWORD *)v26 - 1) = v30;
        v26 -= 32;
        v28 -= 32;
      }
      while (v28 != v29);
      v28 = (char *)*v19;
    }
    a1[3] = v26;
    a1[4] = v17;
    a1[5] = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v16 = v15;
    v16[1] = v14;
    v17 = v16 + 4;
    v16[2] = 0;
    v16[3] = 0;
  }
  a1[4] = v17;
  v31 = v17 - 4;
  a5[1] = v17 - 4;
  a6[1] = v17 - 4;
  v32 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)v8);
  v33 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)v8);
  v34 = a1[8];
  v35 = (char **)(a1 + 6);
  if (v33)
    v36 = v32 | 2;
  else
    v36 = v32;
  v37 = a1[7];
  if (v37 >= v34)
  {
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)*v35) >> 4);
    v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)*v35) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAALL)
      v42 = 0x555555555555555;
    else
      v42 = v40;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v42);
    else
      v43 = 0;
    v44 = &v43[48 * v39];
    v45 = &v43[48 * v42];
    *(_OWORD *)v44 = 0u;
    *((_OWORD *)v44 + 1) = 0u;
    *((_QWORD *)v44 + 4) = 0;
    *((_QWORD *)v44 + 5) = v36;
    v38 = v44 + 48;
    v47 = (char *)a1[6];
    v46 = (char *)a1[7];
    if (v46 != v47)
    {
      do
      {
        v48 = *((_OWORD *)v46 - 3);
        v49 = *((_OWORD *)v46 - 1);
        *((_OWORD *)v44 - 2) = *((_OWORD *)v46 - 2);
        *((_OWORD *)v44 - 1) = v49;
        *((_OWORD *)v44 - 3) = v48;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      v46 = *v35;
    }
    a1[6] = v44;
    a1[7] = v38;
    a1[8] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_QWORD *)(v37 + 32) = 0;
    *(_QWORD *)(v37 + 40) = v36;
    v38 = (char *)(v37 + 48);
  }
  a1[7] = v38;
  *((_QWORD *)v38 - 6) = *a1 + 24 * *(_QWORD *)(a2 + 16);
  v50 = v38 - 48;
  v51 = a1[8];
  if ((unint64_t)v38 >= v51)
  {
    v53 = v8;
    v54 = a1[6];
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-v54] >> 4);
    if (v55 + 1 > 0x555555555555555)
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v54) >> 4);
    v57 = 2 * v56;
    if (2 * v56 <= v55 + 1)
      v57 = v55 + 1;
    if (v56 >= 0x2AAAAAAAAAAAAAALL)
      v58 = 0x555555555555555;
    else
      v58 = v57;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v58);
    else
      v59 = 0;
    v60 = &v59[48 * v55];
    v61 = &v59[48 * v58];
    *(_OWORD *)v60 = 0u;
    *((_OWORD *)v60 + 1) = 0u;
    *((_QWORD *)v60 + 4) = 0;
    *((_QWORD *)v60 + 5) = v36;
    v52 = v60 + 48;
    v63 = (char *)a1[6];
    v62 = (char *)a1[7];
    v8 = v53;
    if (v62 != v63)
    {
      do
      {
        v64 = *((_OWORD *)v62 - 3);
        v65 = *((_OWORD *)v62 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v60 - 1) = v65;
        *((_OWORD *)v60 - 3) = v64;
        v60 -= 48;
        v62 -= 48;
      }
      while (v62 != v63);
      v62 = (char *)a1[6];
    }
    a1[6] = v60;
    a1[7] = v52;
    a1[8] = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_OWORD *)v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    *((_QWORD *)v38 + 4) = 0;
    *((_QWORD *)v38 + 5) = v36;
    v52 = v38 + 48;
  }
  a1[7] = v52;
  *((_QWORD *)v52 - 6) = *a1 + 24 * *(_QWORD *)(v8 + 16);
  *((_QWORD *)v38 - 4) = v52 - 48;
  *((_QWORD *)v52 - 5) = v31;
  *((_QWORD *)v52 - 4) = v50;
  a5[4] = v50;
  *((_QWORD *)v38 - 3) = a5;
  v66 = a5[2];
  *(_QWORD *)(v66 + 24) = a6;
  a6[4] = v66;
  v67 = a6[2];
  *(_QWORD *)(v67 + 24) = v52 - 48;
  *((_QWORD *)v52 - 2) = v67;
  return v38 - 48;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  _BOOL4 v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3 + 1];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = v6[1];
      v10 = *(double *)(v9 + 32);
      v11 = *(double *)(*v6 + 32);
      v12 = *(double *)(v9 + 24) < *(double *)(*v6 + 24);
      if (v10 != v11)
        v12 = v10 < v11;
      if (v12)
      {
        ++v6;
        v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

BOOL boost::polygon::voronoi_diagram_traits<double>::vertex_equality_predicate_type::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _BOOL4 v12;

  v3 = *a2;
  v4 = *a3;
  if ((*a2 & 0x8000000000000000) == 0)
    v3 = 0x8000000000000000 - *a2;
  if (v4 >= 0)
    v4 = 0x8000000000000000 - v4;
  if (v3 - v4 <= 0x80)
    v5 = 0;
  else
    v5 = -1;
  if (v3 > v4)
    v6 = v5;
  else
    v6 = v4 - v3 > 0x80;
  if (v6)
    return 0;
  v8 = a2[1];
  v9 = a3[1];
  if (v8 >= 0)
    v8 = 0x8000000000000000 - v8;
  v10 = 0x8000000000000000 - v9;
  if (v9 < 0)
    v10 = a3[1];
  if (v8 - v10 <= 0x80)
    v11 = 0;
  else
    v11 = -1;
  if (v8 > v10)
    v12 = v11;
  else
    v12 = v10 - v8 > 0x80;
  return !v12;
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::remove_edge(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)a2[2];
  v3 = *(_QWORD **)(v2[4] + 16);
  if (v3 != v2)
  {
    v4 = a2[1];
    v5 = *(_QWORD **)(v2[4] + 16);
    do
    {
      v5[1] = v4;
      v5 = *(_QWORD **)(v5[4] + 16);
    }
    while (v5 != v2);
  }
  v6 = v2[3];
  v7 = *(_QWORD *)(v2[2] + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(a2[4] + 16) + 16);
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v7 + 32) = v8;
  v9 = v3[2];
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v9 + 24) = v6;
}

float64_t Decompose@<D0>(const simd_float4x4 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unsigned int v4;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  float64_t result;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19[8];

  TransformationMatrixFromMatrix(a1, v19);
  if (!WebCore::TransformationMatrix::decompose4((WebCore::TransformationMatrix *)v19, (uint64_t)&v9))
    abort();
  *(float32x2_t *)&v3 = vcvt_f32_f64(v9);
  *(float *)&v4 = v10;
  *((_QWORD *)&v3 + 1) = __PAIR64__(HIDWORD(v9.f64[1]), v4);
  *(int32x2_t *)&v5 = vrev64_s32((int32x2_t)vcvt_f32_f64(v11));
  *(float *)&v6 = v12;
  *((_QWORD *)&v5 + 1) = __PAIR64__(HIDWORD(v11.f64[1]), v6);
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v5;
  *(float32x2_t *)&v3 = vcvt_f32_f64(v15);
  *(float *)&v7 = v16;
  *((_QWORD *)&v3 + 1) = __PAIR64__(HIDWORD(v15.f64[1]), v7);
  *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13), v14);
  *(_OWORD *)(a2 + 48) = v3;
  result = v18.f64[0];
  *(float32x4_t *)(a2 + 64) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v17), v18);
  return result;
}

float64x2_t TransformationMatrixFromMatrix@<Q0>(const simd_float4x4 *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t result;
  float64x2_t v6;

  v2 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[0].u32[2]);
  *a2 = vcvtq_f64_f32(*(float32x2_t *)a1->columns[0].f32);
  a2[1] = v2;
  v3 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[1].u32[2]);
  a2[2] = vcvtq_f64_f32(*(float32x2_t *)a1->columns[1].f32);
  a2[3] = v3;
  v4 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[2].u32[2]);
  a2[4] = vcvtq_f64_f32(*(float32x2_t *)a1->columns[2].f32);
  a2[5] = v4;
  result = vcvtq_f64_f32(*(float32x2_t *)a1->columns[3].f32);
  v6 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[3].u32[2]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

double Recompose(uint64_t a1)
{
  int8x16_t v1;
  float32x2_t v2;
  float64x2_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[8];
  double v19;

  v1 = *(int8x16_t *)(a1 + 16);
  v2 = (float32x2_t)vzip1_s32(*(int32x2_t *)v1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v1.i32[0] = *(_QWORD *)(a1 + 8);
  v18[0] = vcvtq_f64_f32(*(float32x2_t *)a1);
  v18[1] = vcvtq_f64_f32(*(float32x2_t *)v1.i8);
  v3 = vcvtq_f64_f32(v2);
  v4 = *(float32x4_t *)(a1 + 32);
  v5 = *(int32x4_t *)(a1 + 48);
  v18[2] = v3;
  v18[3] = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  v18[4] = vcvt_hight_f64_f32(v4);
  v18[5] = vcvtq_f64_f32(*(float32x2_t *)v5.i8);
  v6 = *(int32x4_t *)(a1 + 64);
  v18[6] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v5, vuzp1q_s32(v5, v6)));
  v18[7] = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), 4uLL));
  v19 = *(float *)&v6.i32[3];
  v8 = 0x3FF0000000000000;
  v9 = 0u;
  v10 = 0u;
  v11 = 0x3FF0000000000000;
  v12 = 0u;
  v13 = 0u;
  v14 = 0x3FF0000000000000;
  v15 = 0u;
  v16 = 0u;
  v17 = 0x3FF0000000000000;
  WebCore::TransformationMatrix::recompose4((uint64_t)&v8, (uint64_t)v18);
  return TransformationMatrixToMatrix((float64x2_t *)&v8);
}

double TransformationMatrixToMatrix(float64x2_t *a1)
{
  double result;

  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

void Interpolate(const simd_float4x4 *a1, const simd_float4x4 *a2, float a3)
{
  float64x2_t v5[8];
  float64x2_t v6[8];

  TransformationMatrixFromMatrix(a1, v6);
  TransformationMatrixFromMatrix(a2, v5);
  WebCore::TransformationMatrix::blend((WebCore::TransformationMatrix *)v5, (const WebCore::TransformationMatrix *)v6, a3);
  TransformationMatrixToMatrix(v5);
}

double FLDeceleratedRestPosition(double a1, double a2, double a3)
{
  return a2 / 1000.0 * a3 / (1.0 - a3) + a1;
}

double FLRubberbandValue(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0)
    return a2;
  if (a1 < a2)
    a3 = -a3;
  return a2 + (1.0 - 1.0 / (a4 * ((a1 - a2) / a3) + 1.0)) * a3;
}

double FLInverseRubberbandValue(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0)
    return a2;
  if (a1 < a2)
    a3 = -a3;
  return a2 + (-1.0 / ((a1 - a2) / a3 + -1.0) + -1.0) / a4 * a3;
}

double FLSpringConvertStiffnessDampingToDampingRatioResponse(double *a1, double *a2, double a3, double a4)
{
  double result;

  result = sqrt(a3);
  if (a1)
    *a1 = a4 / (result + result);
  if (a2)
  {
    result = 6.28318531 / result;
    *a2 = result;
  }
  return result;
}

double FLSpringConvertMassStiffnessDampingToDampingRatioResponse(double *a1, double *a2, double result, double a4, double a5)
{
  double v5;

  if (a1)
  {
    v5 = sqrt(result * a4);
    *a1 = a5 / (v5 + v5);
  }
  if (a2)
  {
    result = 6.28318531 / sqrt(a4 / result);
    *a2 = result;
  }
  return result;
}

double FLSpringConvertDampingRatioResponseToStiffnessDamping(double *a1, double *a2, double result, double a4)
{
  double v4;
  double v5;

  v4 = 6.28318531 / a4 * (6.28318531 / a4);
  if (a1)
    *a1 = v4;
  if (a2)
  {
    v5 = sqrt(v4);
    result = (v5 + v5) * result;
    *a2 = result;
  }
  return result;
}

double FLSpringConvertMassStiffnessDampingToStiffnessDamping(double *a1, double *a2, double result, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = sqrt(a4 / result);
  v6 = 6.28318531 / (6.28318531 / v5) * (6.28318531 / (6.28318531 / v5));
  if (a1)
    *a1 = v6;
  if (a2)
  {
    v7 = sqrt(result * a4);
    v8 = sqrt(v6);
    result = a5 / (v7 + v7) * (v8 + v8);
    *a2 = result;
  }
  return result;
}

double FLCompoundSpringMake@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v27 = a5;
  v28 = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = a1 + 16;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 336) = 1;
  v26 = 0.0;
  v25 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v26, &v25, 1.0, 0.5);
  FLSimpleSpringMake(v9, a4, 0.0, a4, v26, v25);
  FLSimpleSpringMake((uint64_t)&v21, a5, 0.0, a5, v26, v25);
  v10 = v22;
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 96) = v10;
  v11 = v24;
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)(a1 + 128) = v11;
  v19 = 0.0;
  v20 = 0.0;
  FLSpringConvertStiffnessDampingToDampingRatioResponse(&v20, &v19, a4, a5);
  FLSimpleSpringMake((uint64_t)&v21, v20, 0.0, v20, v26, v25);
  v12 = v22;
  *(_OWORD *)(a1 + 144) = v21;
  *(_OWORD *)(a1 + 160) = v12;
  v13 = v24;
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = v13;
  FLSimpleSpringMake((uint64_t)&v21, v19, 0.0, v19, v26, v25);
  v14 = v22;
  *(_OWORD *)(a1 + 208) = v21;
  *(_OWORD *)(a1 + 224) = v14;
  v15 = v24;
  *(_OWORD *)(a1 + 240) = v23;
  *(_OWORD *)(a1 + 256) = v15;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v28, &v27, v20, v19);
  FLSimpleSpringMake((uint64_t)&v21, a2, 0.0, a2, v26, v25);
  v16 = v22;
  *(_OWORD *)(a1 + 272) = v21;
  *(_OWORD *)(a1 + 288) = v16;
  result = *(double *)&v23;
  v18 = v24;
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 320) = v18;
  return result;
}

void FLCompoundSpringMakeWithDampingRatioResponse(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  double v8;
  double v9;

  v8 = 0.0;
  v9 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v9, &v8, a4, a5);
  FLCompoundSpringMake(a1, a2, a3, v9, v8);
}

uint64_t FLCompoundSpringSetAnchorImmediately(uint64_t result, double a2)
{
  *(double *)(result + 312) = a2;
  *(double *)(result + 272) = a2;
  *(_QWORD *)(result + 280) = 0;
  return result;
}

void FLCompoundSpringSetAnchorWithResponse(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 272) = a3;
    *(_QWORD *)(a1 + 280) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 296) = v7;
    *(_QWORD *)(a1 + 304) = v5;
    a3 = a2;
  }
  *(double *)(a1 + 312) = a3;
}

void FLCompoundSpringSetAnchorWithIntermediatePositionAndResponse(uint64_t a1, double a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    *(double *)(a1 + 312) = a2;
  }
  else
  {
    FLCompoundSpringSetAnchorWithResponse(a1, a2, a4);
    a2 = a3;
  }
  *(double *)(a1 + 272) = a2;
  *(_QWORD *)(a1 + 280) = 0;
}

uint64_t FLCompoundSpringSetStiffnessImmediately(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(double *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void FLCompoundSpringSetStiffnessWithResponse(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v5;
  }
  *(double *)(a1 + 56) = a2;
}

uint64_t FLCompoundSpringSetDampingImmediately(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(double *)(result + 80) = a2;
  *(_QWORD *)(result + 88) = 0;
  return result;
}

void FLCompoundSpringSetDampingWithResponse(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 104) = v7;
    *(_QWORD *)(a1 + 112) = v5;
  }
  *(double *)(a1 + 120) = a2;
}

uint64_t FLCompoundSpringSetDampingRatioImmediately(uint64_t result, double a2)
{
  *(double *)(result + 184) = a2;
  *(double *)(result + 144) = a2;
  *(_QWORD *)(result + 152) = 0;
  return result;
}

void FLCompoundSpringSetDampingRatioSmoothly(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 144) = a2;
    *(_QWORD *)(a1 + 152) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 168) = v7;
    *(_QWORD *)(a1 + 176) = v5;
  }
  *(double *)(a1 + 184) = a2;
}

uint64_t FLCompoundSpringSetResponseImmediately(uint64_t result, double a2)
{
  *(double *)(result + 248) = a2;
  *(double *)(result + 208) = a2;
  *(_QWORD *)(result + 216) = 0;
  return result;
}

void FLCompoundSpringSetResponseSmoothly(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 208) = a2;
    *(_QWORD *)(a1 + 216) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 232) = v7;
    *(_QWORD *)(a1 + 240) = v5;
  }
  *(double *)(a1 + 248) = a2;
}

double FLCompoundSpringStep@<D0>(void *__src@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  _OWORD v22[4];
  _OWORD __dst[22];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  memcpy(a2, __src, 0x158uLL);
  if (*((_BYTE *)a2 + 336))
  {
    v5 = a2[10];
    __dst[0] = a2[9];
    __dst[1] = v5;
    v6 = a2[12];
    __dst[2] = a2[11];
    __dst[3] = v6;
    FLSimpleSpringStep((uint64_t)__dst, (uint64_t)(a2 + 9), a3);
    v7 = a2[14];
    v24 = a2[13];
    v25 = v7;
    v8 = a2[16];
    v26 = a2[15];
    v27 = v8;
    FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
    v9 = __dst[1];
    a2[13] = __dst[0];
    a2[14] = v9;
    v10 = __dst[3];
    a2[15] = __dst[2];
    a2[16] = v10;
  }
  else
  {
    v11 = a2[2];
    __dst[0] = a2[1];
    __dst[1] = v11;
    v12 = a2[4];
    __dst[2] = a2[3];
    __dst[3] = v12;
    FLSimpleSpringStep((uint64_t)__dst, (uint64_t)(a2 + 1), a3);
    v13 = a2[6];
    v24 = a2[5];
    v25 = v13;
    v14 = a2[8];
    v26 = a2[7];
    v27 = v14;
    FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
    v15 = __dst[1];
    a2[5] = __dst[0];
    a2[6] = v15;
    v16 = __dst[3];
    a2[7] = __dst[2];
    a2[8] = v16;
  }
  v17 = a2[18];
  v24 = a2[17];
  v25 = v17;
  v18 = a2[20];
  v26 = a2[19];
  v27 = v18;
  FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
  v19 = __dst[1];
  a2[17] = __dst[0];
  a2[18] = v19;
  v20 = __dst[3];
  a2[19] = __dst[2];
  a2[20] = v20;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  memcpy(__dst, a2, 0x158uLL);
  _FLSimpleSpringFromCompoundSpring((uint64_t)__dst, (uint64_t)&v24);
  v22[0] = v24;
  v22[1] = v25;
  v22[2] = v26;
  v22[3] = v27;
  FLSimpleSpringStep((uint64_t)v22, (uint64_t)__dst, a3);
  result = *(double *)__dst;
  *a2 = __dst[0];
  return result;
}

void _FLSimpleSpringFromCompoundSpring(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)(a1 + 272);
  if (*(_BYTE *)(a1 + 336))
    FLSimpleSpringMakeWithDampingRatioResponse(a2, v2, v3, v4, *(double *)(a1 + 144), *(double *)(a1 + 208));
  else
    FLSimpleSpringMake(a2, v2, v3, v4, *(double *)(a1 + 16), *(double *)(a1 + 80));
}

BOOL FLCompoundSpringIsStable(void *__src)
{
  _BOOL8 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[22];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  memcpy(v15, __src, 0x158uLL);
  _FLSimpleSpringFromCompoundSpring((uint64_t)v15, (uint64_t)&v16);
  if (*((_BYTE *)__src + 336))
  {
    v15[0] = v16;
    v15[1] = v17;
    v15[2] = v18;
    v15[3] = v19;
    result = FLSimpleSpringIsStable((double *)v15);
    if ((_DWORD)result)
    {
      v3 = *((_OWORD *)__src + 18);
      v15[0] = *((_OWORD *)__src + 17);
      v15[1] = v3;
      v4 = *((_OWORD *)__src + 20);
      v15[2] = *((_OWORD *)__src + 19);
      v15[3] = v4;
      result = FLSimpleSpringIsStable((double *)v15);
      if ((_DWORD)result)
      {
        v5 = *((_OWORD *)__src + 10);
        v15[0] = *((_OWORD *)__src + 9);
        v15[1] = v5;
        v6 = *((_OWORD *)__src + 12);
        v15[2] = *((_OWORD *)__src + 11);
        v15[3] = v6;
        result = FLSimpleSpringIsStable((double *)v15);
        if ((_DWORD)result)
        {
          v7 = *((_OWORD *)__src + 14);
          v15[0] = *((_OWORD *)__src + 13);
          v15[1] = v7;
          v8 = *((_OWORD *)__src + 15);
          v9 = *((_OWORD *)__src + 16);
LABEL_10:
          v15[2] = v8;
          v15[3] = v9;
          return FLSimpleSpringIsStable((double *)v15);
        }
      }
    }
  }
  else
  {
    v15[0] = v16;
    v15[1] = v17;
    v15[2] = v18;
    v15[3] = v19;
    result = FLSimpleSpringIsStable((double *)v15);
    if ((_DWORD)result)
    {
      v10 = *((_OWORD *)__src + 18);
      v15[0] = *((_OWORD *)__src + 17);
      v15[1] = v10;
      v11 = *((_OWORD *)__src + 20);
      v15[2] = *((_OWORD *)__src + 19);
      v15[3] = v11;
      result = FLSimpleSpringIsStable((double *)v15);
      if ((_DWORD)result)
      {
        v12 = *((_OWORD *)__src + 2);
        v15[0] = *((_OWORD *)__src + 1);
        v15[1] = v12;
        v13 = *((_OWORD *)__src + 4);
        v15[2] = *((_OWORD *)__src + 3);
        v15[3] = v13;
        result = FLSimpleSpringIsStable((double *)v15);
        if ((_DWORD)result)
        {
          v14 = *((_OWORD *)__src + 6);
          v15[0] = *((_OWORD *)__src + 5);
          v15[1] = v14;
          v8 = *((_OWORD *)__src + 7);
          v9 = *((_OWORD *)__src + 8);
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

void FLSimpleSpringMake(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a4;
}

BOOL FLSimpleSpringIsStable(double *a1)
{
  return vabdd_f64(*a1, a1[5]) <= a1[6] && fabs(a1[1]) <= a1[7];
}

double FLSimpleSpringMakeWithDampingRatioResponse@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  double result;
  uint64_t v11;
  uint64_t v12;
  double v13;

  v12 = 0;
  v13 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v13, (double *)&v12, a5, a6);
  v11 = v12;
  result = v13;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = a4;
  return result;
}

double FLSimpleSpringSetDampingRatioResponse(uint64_t a1, double a2, double a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v6 = 0;
  v7 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v7, (double *)&v6, a2, a3);
  v5 = v6;
  result = v7;
  *(double *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void FLSimpleSpringStep(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  double v23;
  long double v24;
  __int128 v25;
  __int128 v26;

  v5 = *(double *)(a1 + 40);
  if (vabdd_f64(*(double *)a1, v5) <= *(double *)(a1 + 48))
  {
    v6 = *(double *)(a1 + 8);
    if (fabs(v6) <= *(double *)(a1 + 56))
    {
      v25 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v25;
      v26 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 48) = v26;
      return;
    }
  }
  else
  {
    v6 = *(double *)(a1 + 8);
  }
  v7 = *(double *)a1 - v5;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  v10 = sqrt(*(double *)(a1 + 24));
  v11 = *(double *)(a1 + 32) * 0.5;
  v12 = -v11;
  v13 = exp(-(v11 * a3));
  v14 = v6 + v11 * v7;
  if (v11 >= v10)
  {
    if (v11 <= v10)
    {
      v19 = v7 + v14 * a3;
    }
    else
    {
      v20 = sqrt(v11 * v11 - v10 * v10);
      v21 = v20 * a3;
      v22 = v14 / v20;
      v23 = cosh(v21);
      v24 = sinh(v21);
      v19 = v22 * v24 + v7 * v23;
      v14 = v20 * (v22 * v23) + v7 * v24 * v20;
    }
  }
  else
  {
    v15 = sqrt(v11 * v12 + v10 * v10);
    v16 = v15 * a3;
    v17 = v14 / v15;
    v18 = __sincos_stret(v16);
    v19 = v17 * v18.__sinval + v7 * v18.__cosval;
    v14 = v15 * (v17 * v18.__cosval) + -(v18.__sinval * v7) * v15;
  }
  *(double *)a2 = v5 + v13 * v19;
  *(double *)(a2 + 8) = v13 * v12 * v19 + v13 * v14;
}

uint64_t type metadata accessor for DollHouse()
{
  uint64_t result;

  result = qword_25583FB70;
  if (!qword_25583FB70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_226434E5C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_226434EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = qword_25583FAF8;
  if (*(_QWORD *)(v0 + qword_25583FAF8))
  {
    v2 = *(_QWORD *)(v0 + qword_25583FAF8);
  }
  else
  {
    type metadata accessor for DebugDollHouseManager();
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = v0;
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t sub_226434F74@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_226434FC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_22643501C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;

  v1 = qword_25583FB08;
  if (*(_QWORD *)(v0 + qword_25583FB08))
  {
    v2 = *(_QWORD *)(v0 + qword_25583FB08);
  }
  else
  {
    v3 = sub_226435244();
    v4 = *(float *)(v0 + qword_25583FAF0);
    type metadata accessor for EntityManager();
    v5 = swift_allocObject();
    v2 = sub_226438500(v3, 0, 1, v5, v4);
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_2264350C0()
{
  return sub_226435198(&qword_25583FB10, (void (*)(_QWORD))type metadata accessor for DollhouseDebugMaterialFactory, sub_226462694);
}

uint64_t sub_2264350DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = qword_25583FB18;
  if (*(_QWORD *)(v0 + qword_25583FB18))
  {
    v2 = *(_QWORD *)(v0 + qword_25583FB18);
  }
  else
  {
    v3 = v0;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    v4 = sub_22648BC28();
    type metadata accessor for DollhouseColorMaterialFactory();
    swift_allocObject();
    v2 = sub_226462694(v4);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_22643517C()
{
  return sub_226435198(&qword_25583FB20, (void (*)(_QWORD))type metadata accessor for DollHouseDebugNormalsMaterialFactory, sub_226462F78);
}

uint64_t sub_226435198(uint64_t *a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *(_QWORD *)(v3 + *a1);
  if (v5)
  {
    v6 = v5;
  }
  else
  {
    v9 = v3;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    v10 = sub_22648BC28();
    a2(0);
    swift_allocObject();
    v6 = a3(v10);
    *(_QWORD *)(v9 + v4) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

uint64_t sub_226435244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = qword_25583FB28;
  if (*(_QWORD *)(v0 + qword_25583FB28))
  {
    v2 = *(_QWORD *)(v0 + qword_25583FB28);
  }
  else
  {
    v3 = v0;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    v4 = sub_22648BC28();
    type metadata accessor for DollhouseMaterialFactory();
    swift_allocObject();
    v2 = sub_226463314(v4);
    *(_QWORD *)(v2 + 24) = &off_24EDE08F8;
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_226435300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = sub_22655C0E0();
  v20 = *(_QWORD *)(v1 - 8);
  v21 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + qword_25583FB30) & 1) != 0)
    return;
  v4 = sub_22643501C();
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 96);
  swift_bridgeObjectRetain();
  swift_release();
  v6 = 0;
  v7 = v5 + 64;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v6 << 6);
LABEL_23:
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
    v18 = qword_255846750;
    if (*(float *)(v17 + qword_255846750) != 1.0)
    {
      swift_retain();
      sub_22655C0C8();
      v19 = v17 + qword_255846758;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 40))(v19, v3, v21);
      swift_endAccess();
      *(_DWORD *)(v17 + v18) = 1065353216;
      swift_release();
    }
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v14 >= v11)
    goto LABEL_25;
  v15 = *(_QWORD *)(v7 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_22;
  v6 = v14 + 1;
  if (v14 + 1 >= v11)
    goto LABEL_25;
  v15 = *(_QWORD *)(v7 + 8 * v6);
  if (v15)
    goto LABEL_22;
  v6 = v14 + 2;
  if (v14 + 2 >= v11)
    goto LABEL_25;
  v15 = *(_QWORD *)(v7 + 8 * v6);
  if (v15)
    goto LABEL_22;
  v6 = v14 + 3;
  if (v14 + 3 >= v11)
    goto LABEL_25;
  v15 = *(_QWORD *)(v7 + 8 * v6);
  if (v15)
  {
LABEL_22:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_23;
  }
  v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_25:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_25;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

void sub_226435544()
{
  swift_allocObject();
  sub_226435568();
}

void sub_226435568()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + qword_25583FAF8) = 0;
  *(_BYTE *)(v0 + qword_25583FB00) = 1;
  *(_QWORD *)(v0 + qword_25583FB08) = 0;
  *(_QWORD *)(v0 + qword_25583FB10) = 0;
  *(_QWORD *)(v0 + qword_25583FB18) = 0;
  *(_QWORD *)(v0 + qword_25583FB20) = 0;
  *(_QWORD *)(v0 + qword_25583FB28) = 0;
  *(_BYTE *)(v0 + qword_25583FB30) = 1;
  *(_BYTE *)(v0 + qword_25583FB38) = 0;
  *(_BYTE *)(v0 + qword_25583FB40) = 0;
  *(_QWORD *)(v0 + qword_25583FB48) = MEMORY[0x24BEE4B00];
  *(_DWORD *)(v0 + qword_25583FB50) = 0;
  *(_DWORD *)(v0 + qword_25583FB58) = 0;
  *(_DWORD *)(v0 + qword_25583FB60) = 1065353216;
  v1 = (_QWORD *)(v0 + qword_25583FB68);
  *v1 = 0;
  v1[1] = 0;
  swift_release();
  sub_22655D3E8();
  __break(1u);
}

uint64_t sub_226435690(float a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + qword_25583FAF8) = 0;
  *(_BYTE *)(v1 + qword_25583FB00) = 1;
  *(_QWORD *)(v1 + qword_25583FB08) = 0;
  *(_QWORD *)(v1 + qword_25583FB10) = 0;
  *(_QWORD *)(v1 + qword_25583FB18) = 0;
  *(_QWORD *)(v1 + qword_25583FB20) = 0;
  *(_QWORD *)(v1 + qword_25583FB28) = 0;
  *(_BYTE *)(v1 + qword_25583FB30) = 1;
  *(_BYTE *)(v1 + qword_25583FB38) = 0;
  *(_BYTE *)(v1 + qword_25583FB40) = 0;
  *(_QWORD *)(v1 + qword_25583FB48) = MEMORY[0x24BEE4B00];
  *(_DWORD *)(v1 + qword_25583FB50) = 0;
  *(_DWORD *)(v1 + qword_25583FB58) = 0;
  *(_DWORD *)(v1 + qword_25583FB60) = 1065353216;
  v2 = (_QWORD *)(v1 + qword_25583FB68);
  *v2 = 0;
  v2[1] = 0;
  *(float *)(v1 + qword_25583FAF0) = a1;
  v3 = sub_22655C1DC();
  swift_retain();
  v4 = sub_22643501C();
  *(_QWORD *)(v4 + 72) = v3;
  swift_retain_n();
  swift_release();
  if (*(_QWORD *)(v4 + 72))
  {
    sub_22655C8B4();
    swift_retain();
    sub_22655C230();
    swift_release();
  }
  swift_release();
  swift_release();
  *(_QWORD *)(sub_22643501C() + 24) = &off_24EDE0910;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_release();
  return v3;
}

void sub_226435858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_22643501C();
  v2 = qword_25583FB40;
  *(_BYTE *)(v1 + 136) = *(_BYTE *)(v0 + qword_25583FB40);
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_22643589C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[7];

  v1 = sub_22643501C();
  v2 = sub_226435244();
  *(_QWORD *)(v0 - 32) = type metadata accessor for DollhouseMaterialFactory();
  *(_QWORD *)(v0 - 24) = &off_24EDE1340;
  *(_QWORD *)(v0 - 56) = v2;
  sub_226438644((__int128 *)(v0 - 56), (uint64_t)v4);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v1 + 32);
  sub_226438644(v4, v1 + 32);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_226435980(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_25583F810 != -1)
    swift_once();
  v3 = sub_226501B70(a1, 3u);
  v4 = sub_22652AF90(v3);
  swift_bridgeObjectRelease();
  v5 = sub_226438134(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + qword_25583FB48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(sub_226434EF4() + 16);
  result = swift_release();
  if ((v6 & 2) != 0)
  {
    v8 = sub_226434EF4();
    v9 = sub_226501B70(a1, 3u);
    sub_22652A438(v9);
    v11 = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v8 + 32) = v11;
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_226435A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  int8x16_t v43;
  double v44;
  int8x16_t v45;
  double v46;
  float32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, unint64_t, uint64_t, __n128, __n128);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t, uint64_t, __n128, __n128);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int64_t v109;
  unint64_t v110;
  int64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __n128 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;

  v3 = sub_22655C140();
  v125 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v112 = (char *)v104 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v104 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v104 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v126 = (unint64_t)v104 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v104 - v20;
  v119 = sub_22655C0E0();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v117 = (char *)v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + qword_25583FB38) == 1)
  {
    v23 = sub_22643501C();
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + 96);
    swift_bridgeObjectRetain();
    swift_release();
    v25 = 0;
    v26 = *(_QWORD *)(v24 + 64);
    v126 = v24 + 64;
    v27 = 1 << *(_BYTE *)(v24 + 32);
    v28 = -1;
    if (v27 < 64)
      v28 = ~(-1 << v27);
    v29 = v28 & v26;
    v30 = (unint64_t)(v27 + 63) >> 6;
    v31 = v117;
    while (1)
    {
      if (v29)
      {
        v32 = __clz(__rbit64(v29));
        v29 &= v29 - 1;
        v33 = v32 | (v25 << 6);
      }
      else
      {
        v34 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_92;
        if (v34 >= v30)
        {
LABEL_37:
          swift_release();
          return;
        }
        v35 = *(_QWORD *)(v126 + 8 * v34);
        ++v25;
        if (!v35)
        {
          v25 = v34 + 1;
          if (v34 + 1 >= v30)
            goto LABEL_37;
          v35 = *(_QWORD *)(v126 + 8 * v25);
          if (!v35)
          {
            v25 = v34 + 2;
            if (v34 + 2 >= v30)
              goto LABEL_37;
            v35 = *(_QWORD *)(v126 + 8 * v25);
            if (!v35)
            {
              v25 = v34 + 3;
              if (v34 + 3 >= v30)
                goto LABEL_37;
              v35 = *(_QWORD *)(v126 + 8 * v25);
              if (!v35)
              {
                v36 = v34 + 4;
                if (v36 >= v30)
                  goto LABEL_37;
                v35 = *(_QWORD *)(v126 + 8 * v36);
                if (!v35)
                {
                  while (1)
                  {
                    v25 = v36 + 1;
                    if (__OFADD__(v36, 1))
                      goto LABEL_93;
                    if (v25 >= v30)
                      goto LABEL_37;
                    v35 = *(_QWORD *)(v126 + 8 * v25);
                    ++v36;
                    if (v35)
                      goto LABEL_22;
                  }
                }
                v25 = v36;
              }
            }
          }
        }
LABEL_22:
        v29 = (v35 - 1) & v35;
        v33 = __clz(__rbit64(v35)) + (v25 << 6);
      }
      v37 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v33);
      v38 = qword_255846750;
      if (*(float *)(v37 + qword_255846750) != 0.15)
      {
        swift_retain();
        sub_22655C0C8();
        v39 = v37 + qword_255846758;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v118 + 40))(v39, v31, v119);
        swift_endAccess();
        *(_DWORD *)(v37 + v38) = 1041865114;
        swift_release();
      }
    }
  }
  v105 = v5;
  if (*(_BYTE *)(v1 + qword_25583FB30) == 1)
  {
    v40 = qword_25583FB48;
    if (*(_QWORD *)(*(_QWORD *)(v1 + qword_25583FB48) + 16) && a1 != 0)
    {
      v107 = v18;
      v104[1] = a1;
      swift_retain();
      sub_22655C80C();
      v123 = v42;
      swift_retain();
      sub_22655C80C();
      v124 = (__n128)v43;
      swift_release();
      v44 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)&v123, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL)));
      *(float *)v45.i32 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v44, *(float32x2_t *)&v44)));
      v124 = (__n128)v45;
      v46 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v44, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 0)));
      if (*(float *)v45.i32 >= 0.01)
        *(double *)&v47 = v46;
      else
        *(double *)&v47 = v44;
      v114 = v1;
      v48 = sub_22643501C();
      swift_beginAccess();
      v49 = *(_QWORD *)(v48 + 96);
      swift_bridgeObjectRetain();
      swift_release();
      v50 = sub_226536078(v49);
      swift_bridgeObjectRelease();
      v127 = v50;
      v51.n128_u32[0] = 1008981770;
      v52 = v124;
      v53 = v125;
      if (v124.n128_f32[0] < 0.01)
      {
LABEL_78:
        v86 = *(_QWORD *)(v127 + 16);
        v124.n128_u64[0] = v127;
        if (v86)
        {
          v87 = v127 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
          v126 = *(_QWORD *)(v53 + 72);
          v88 = *(void (**)(char *, unint64_t, uint64_t, __n128, __n128))(v53 + 16);
          v89 = (uint64_t)v105;
          while (1)
          {
            v91 = v107;
            v88(v107, v87, v3, v51, v52);
            v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128, __n128))(v53 + 56);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v92)(v91, 0, 1, v3);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v91, 1, v3) == 1)
              break;
            v93 = v112;
            (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v112, v91, v3);
            v94 = sub_22643501C();
            ((void (*)(uint64_t, char *, uint64_t))v88)(v89, v93, v3);
            swift_beginAccess();
            v95 = v89;
            v96 = *(_QWORD *)(v94 + 96);
            swift_bridgeObjectRetain();
            swift_release();
            if (*(_QWORD *)(v96 + 16) && (v97 = sub_226534858(v95), (v98 & 1) != 0))
            {
              v99 = *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v97);
              swift_retain();
              swift_bridgeObjectRelease();
              v90 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
              v90(v95, v3);
              v100 = qword_255846750;
              v89 = v95;
              if (*(float *)(v99 + qword_255846750) != 1.0)
              {
                v101 = v117;
                sub_22655C0C8();
                v102 = v99 + qword_255846758;
                swift_beginAccess();
                v103 = v102;
                v89 = (uint64_t)v105;
                (*(void (**)(uint64_t, char *, uint64_t))(v118 + 40))(v103, v101, v119);
                swift_endAccess();
                *(_DWORD *)(v99 + v100) = 1065353216;
              }
              swift_release();
              v53 = v125;
            }
            else
            {
              swift_bridgeObjectRelease();
              v53 = v125;
              v90 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
              v90(v95, v3);
              v89 = v95;
            }
            v90((uint64_t)v112, v3);
            v87 += v126;
            if (!--v86)
              goto LABEL_89;
          }
        }
        else
        {
          v92 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128, __n128))(v53 + 56);
LABEL_89:
          v92(v107, 1, 1, v3, v51, v52);
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = *(_QWORD *)(v114 + v40);
        v55 = *(_QWORD *)(v54 + 64);
        v108 = v54 + 64;
        v56 = 1 << *(_BYTE *)(v54 + 32);
        v57 = -1;
        if (v56 < 64)
          v57 = ~(-1 << v56);
        v58 = v57 & v55;
        v109 = (unint64_t)(v56 + 63) >> 6;
        v59 = swift_bridgeObjectRetain();
        v60 = v58;
        v61 = 0;
        v113 = v10;
        v115 = v21;
        v106 = v59;
        while (1)
        {
          do
          {
            if (v60)
            {
              v62 = __clz(__rbit64(v60));
              v60 &= v60 - 1;
              v63 = v62 | (v61 << 6);
            }
            else
            {
              v64 = v61 + 1;
              if (__OFADD__(v61, 1))
                goto LABEL_94;
              if (v64 >= v109)
              {
LABEL_77:
                swift_release();
                goto LABEL_78;
              }
              v65 = *(_QWORD *)(v108 + 8 * v64);
              ++v61;
              if (!v65)
              {
                v61 = v64 + 1;
                if (v64 + 1 >= v109)
                  goto LABEL_77;
                v65 = *(_QWORD *)(v108 + 8 * v61);
                if (!v65)
                {
                  v61 = v64 + 2;
                  if (v64 + 2 >= v109)
                    goto LABEL_77;
                  v65 = *(_QWORD *)(v108 + 8 * v61);
                  if (!v65)
                  {
                    v66 = v64 + 3;
                    if (v66 >= v109)
                      goto LABEL_77;
                    v65 = *(_QWORD *)(v108 + 8 * v66);
                    if (!v65)
                    {
                      while (1)
                      {
                        v61 = v66 + 1;
                        if (__OFADD__(v66, 1))
                          goto LABEL_95;
                        if (v61 >= v109)
                          goto LABEL_77;
                        v65 = *(_QWORD *)(v108 + 8 * v61);
                        ++v66;
                        if (v65)
                          goto LABEL_56;
                      }
                    }
                    v61 = v66;
                  }
                }
              }
LABEL_56:
              v60 = (v65 - 1) & v65;
              v63 = __clz(__rbit64(v65)) + (v61 << 6);
            }
            v67 = 8 * v63;
          }
          while (vaddv_f32(vmul_f32(v47, *(float32x2_t *)(*(_QWORD *)(v59 + 48) + v67))) <= 0.4);
          v110 = v60;
          v111 = v61;
          v68 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + v67);
          *(_QWORD *)&v123 = *(_QWORD *)(v68 + 16);
          if ((_QWORD)v123)
            break;
          swift_bridgeObjectRetain();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v21, 1, 1, v3);
LABEL_40:
          swift_bridgeObjectRelease();
          v59 = v106;
          v61 = v111;
          v60 = v110;
        }
        v116 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
        v122 = v68 + v116;
        swift_bridgeObjectRetain();
        v69 = 0;
        v121 = v68;
        while (v69 < *(_QWORD *)(v68 + 16))
        {
          v71 = *(_QWORD *)(v53 + 72);
          v72 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
          v72(v21, v122 + v71 * v69, v3);
          v120 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
          v120(v21, 0, 1, v3);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v21, 1, v3) == 1)
            goto LABEL_40;
          v124.n128_u64[0] = v69;
          (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v126, v21, v3);
          v73 = *(_QWORD *)(v127 + 16);
          if (v73)
          {
            v74 = v127 + v116;
            swift_bridgeObjectRetain();
            v75 = 0;
            while (1)
            {
              v72(v13, v74, v3);
              sub_226437F28((unint64_t *)&qword_255840120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
              v76 = sub_22655CD04();
              v70 = *(void (**)(char *, uint64_t))(v125 + 8);
              v70(v13, v3);
              if ((v76 & 1) != 0)
                break;
              ++v75;
              v74 += v71;
              if (v73 == v75)
              {
                swift_bridgeObjectRelease();
LABEL_75:
                v53 = v125;
                v21 = v115;
                goto LABEL_61;
              }
            }
            swift_bridgeObjectRelease();
            sub_2264D16DC(v75, (uint64_t)v13);
            v70(v13, v3);
            v77 = sub_22643501C();
            v78 = (uint64_t)v113;
            v72(v113, v126, v3);
            swift_beginAccess();
            v79 = *(_QWORD *)(v77 + 96);
            swift_bridgeObjectRetain();
            swift_release();
            if (!*(_QWORD *)(v79 + 16) || (v80 = sub_226534858(v78), (v81 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              v70((char *)v78, v3);
              goto LABEL_75;
            }
            v82 = *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v80);
            swift_retain();
            swift_bridgeObjectRelease();
            v70((char *)v78, v3);
            v83 = qword_255846750;
            v21 = v115;
            if (*(float *)(v82 + qword_255846750) != 0.15)
            {
              v84 = v117;
              sub_22655C0C8();
              v85 = v82 + qword_255846758;
              swift_beginAccess();
              (*(void (**)(uint64_t, char *, uint64_t))(v118 + 40))(v85, v84, v119);
              swift_endAccess();
              *(_DWORD *)(v82 + v83) = 1041865114;
            }
            swift_release();
            v53 = v125;
          }
          else
          {
            v70 = *(void (**)(char *, uint64_t))(v53 + 8);
          }
LABEL_61:
          v69 = v124.n128_u64[0] + 1;
          v70((char *)v126, v3);
          v68 = v121;
          if (v69 == (_QWORD)v123)
          {
            v120(v21, 1, 1, v3);
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
      }
    }
  }
}

uint64_t sub_2264366BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  id v23;
  uint64_t v24;
  id v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_1;
  __int128 v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[5];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255840110);
  MEMORY[0x24BDAC7A8](v1);
  v37 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_22655C9A4();
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22655CAD0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v0;
  sub_22643501C();
  v11 = sub_22654F570();
  result = swift_release();
  if (!(v11 >> 62))
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v13 = sub_22655D400();
  result = swift_bridgeObjectRelease();
  if (!v13)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v13 >= 1)
  {
    v36 = v10;
    v14 = 0;
    v34 = qword_25583FB50;
    v39 = v11 & 0xC000000000000001;
    v32 = xmmword_22655F8F0;
    v41 = v8;
    v33 = v6;
    v35 = v11;
    v40 = v13;
    v15 = v8;
    do
    {
      if (v39)
      {
        v16 = MEMORY[0x2276999E4](v14, v11);
      }
      else
      {
        v16 = *(_QWORD *)(v11 + 8 * v14 + 32);
        swift_retain();
      }
      v17 = v16 + qword_25585AE00;
      swift_beginAccess();
      sub_226438600(v17, (uint64_t)v43);
      v18 = v44;
      v19 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v42, v18, v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F8);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      if ((v20 & 1) != 0)
      {
        v21(v6, 0, 1, v7);
        v22 = v36;
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v36, v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, *(float *)(v38 + v34), *(float *)(v38 + v34), *(float *)(v38 + v34), 1.0);
        v24 = sub_22655C974();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v37, 1, 1, v24);
        v25 = v23;
        sub_22655C998();
        sub_22655C9E0();
        type metadata accessor for ScanEntity();
        sub_226437F28((unint64_t *)&qword_255840100, (uint64_t (*)(uint64_t))type metadata accessor for ScanEntity, (uint64_t)&unk_226560610);
        v26 = (void (*)(_QWORD *, _QWORD))sub_22655C8CC();
        v28 = v27;
        v29 = sub_22655C41C();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
          v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = v32;
          *(_QWORD *)(v30 + 56) = v7;
          *(_QWORD *)(v30 + 64) = MEMORY[0x24BDE74C8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v30 + 32));
          (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_1, v22, v7);
          v6 = v33;
          sub_22655C410();
        }
        v26(v43, 0);

        swift_release();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v7);
        v11 = v35;
      }
      else
      {
        v21(v6, 1, 1, v7);
        swift_release();
        sub_226438464((uint64_t)v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      }
      ++v14;
    }
    while (v40 != v14);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_226436B7C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(_QWORD *, _QWORD);
  void (*v23)(_QWORD *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  __n128 v34;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v34 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655CAD0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = v34.n128_u64[0];
  *((_QWORD *)&v9 + 1) = vextq_s8(*(int8x16_t *)(v1 + qword_25583FB68), *(int8x16_t *)(v1 + qword_25583FB68), 8uLL).u64[0];
  v30 = qword_25583FB68;
  v31 = v1;
  *(_OWORD *)(v1 + qword_25583FB68) = v9;
  sub_22643501C();
  v10 = sub_22654F570();
  result = swift_release();
  if (!(v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v12 = sub_22655D400();
  result = swift_bridgeObjectRelease();
  if (!v12)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v12 >= 1)
  {
    v13 = 0;
    v33 = v10 & 0xC000000000000001;
    v29 = xmmword_22655F8F0;
    v34.n128_u64[0] = v12;
    v14 = v10;
    do
    {
      if (v33)
      {
        v16 = MEMORY[0x2276999E4](v13, v10);
      }
      else
      {
        v16 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      v17 = v16 + qword_25585AE00;
      swift_beginAccess();
      sub_226438600(v17, (uint64_t)v36);
      v18 = v37;
      v19 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v35, v18, v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F8);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      if (v20)
      {
        v21(v4, 0, 1, v5);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v32 = *(_OWORD *)(v31 + v30);
        v22 = (void (*)(_QWORD *, _QWORD))sub_22655CA10();
        sub_22655C95C();
        v22(v36, 0);
        type metadata accessor for ScanEntity();
        sub_226437F28((unint64_t *)&qword_255840100, (uint64_t (*)(uint64_t))type metadata accessor for ScanEntity, (uint64_t)&unk_226560610);
        v23 = (void (*)(_QWORD *, _QWORD))sub_22655C8CC();
        v25 = v24;
        v26 = sub_22655C41C();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = v29;
          *(_QWORD *)(v27 + 56) = v5;
          *(_QWORD *)(v27 + 64) = MEMORY[0x24BDE74C8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 32));
          (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v8, v5);
          sub_22655C410();
        }
        v23(v36, 0);
        v10 = v14;
        swift_release();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v15 = v34.n128_u64[0];
      }
      else
      {
        v21(v4, 1, 1, v5);
        swift_release();
        sub_226438464((uint64_t)v4);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v15 = v34.n128_u64[0];
        v10 = v14;
      }
      ++v13;
    }
    while (v15 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_226436F50(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(_QWORD *, _QWORD);
  void (*v23)(_QWORD *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  __n128 v34;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v34 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655CAD0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_OWORD *)(v1 + qword_25583FB68);
  *((_QWORD *)&v9 + 1) = v34.n128_u64[0];
  v30 = qword_25583FB68;
  v31 = v1;
  *(_OWORD *)(v1 + qword_25583FB68) = v9;
  sub_22643501C();
  v10 = sub_22654F570();
  result = swift_release();
  if (!(v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v12 = sub_22655D400();
  result = swift_bridgeObjectRelease();
  if (!v12)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v12 >= 1)
  {
    v13 = 0;
    v33 = v10 & 0xC000000000000001;
    v29 = xmmword_22655F8F0;
    v34.n128_u64[0] = v12;
    v14 = v10;
    do
    {
      if (v33)
      {
        v16 = MEMORY[0x2276999E4](v13, v10);
      }
      else
      {
        v16 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      v17 = v16 + qword_25585AE00;
      swift_beginAccess();
      sub_226438600(v17, (uint64_t)v36);
      v18 = v37;
      v19 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v35, v18, v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F8);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      if (v20)
      {
        v21(v4, 0, 1, v5);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v32 = *(_OWORD *)(v31 + v30);
        v22 = (void (*)(_QWORD *, _QWORD))sub_22655CA10();
        sub_22655C95C();
        v22(v36, 0);
        type metadata accessor for ScanEntity();
        sub_226437F28((unint64_t *)&qword_255840100, (uint64_t (*)(uint64_t))type metadata accessor for ScanEntity, (uint64_t)&unk_226560610);
        v23 = (void (*)(_QWORD *, _QWORD))sub_22655C8CC();
        v25 = v24;
        v26 = sub_22655C41C();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = v29;
          *(_QWORD *)(v27 + 56) = v5;
          *(_QWORD *)(v27 + 64) = MEMORY[0x24BDE74C8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 32));
          (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v8, v5);
          sub_22655C410();
        }
        v23(v36, 0);
        v10 = v14;
        swift_release();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v15 = v34.n128_u64[0];
      }
      else
      {
        v21(v4, 1, 1, v5);
        swift_release();
        sub_226438464((uint64_t)v4);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        v15 = v34.n128_u64[0];
        v10 = v14;
      }
      ++v13;
    }
    while (v15 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_226437320()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22643739C()
{
  uint64_t v0;

  v0 = sub_22655C8C0();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_226437430()
{
  sub_22643739C();
  return swift_deallocClassInstance();
}

uint64_t sub_22643744C()
{
  return type metadata accessor for DollHouse();
}

uint64_t initializeBufferWithCopyOfBuffer for AngularVelocity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ObjectElement(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ObjectElement(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
  sub_226438710(a1, &qword_25583FFE0);
}

void type metadata accessor for RunOptions(uint64_t a1)
{
  sub_226438710(a1, &qword_25583FFE8);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_226438710(a1, &qword_25583FFF0);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_rectangle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_rectangle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_226438710(a1, &qword_25583FFF8);
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
  sub_226438710(a1, &qword_255840000);
}

void type metadata accessor for Target(uint64_t a1)
{
  sub_226438710(a1, &qword_255840008);
}

void type metadata accessor for Alignment(uint64_t a1)
{
  sub_226438710(a1, &qword_255840010);
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
  sub_226438710(a1, &qword_255840018);
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_2264375F8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_226437618(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
  sub_226438710(a1, &qword_255840020);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_226438710(a1, &qword_255840028);
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
  sub_226438710(a1, &qword_255840030);
}

void type metadata accessor for CVPixelBufferPool(uint64_t a1)
{
  sub_226438710(a1, &qword_255840038);
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AngularVelocity(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AngularVelocity(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  sub_226438710(a1, &qword_255840040);
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  sub_226438710(a1, &qword_255840048);
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_226437768(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_226437788(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for SCNVector3(uint64_t a1)
{
  sub_226438710(a1, &qword_255840050);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_226438710(a1, &qword_255840058);
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
  sub_226438710(a1, &qword_255840060);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_226437804(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_226437824(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_226438710(a1, &qword_255840068);
}

uint64_t sub_226437874()
{
  return 8;
}

uint64_t sub_22643787C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + qword_25583FB00))
    return 6;
  else
    return 7;
}

uint64_t sub_226437898()
{
  return 5;
}

uint64_t sub_2264378A0()
{
  return 0;
}

uint64_t sub_2264378A8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_25583FB68);
}

void sub_2264378C0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL sub_2264378C8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2264378DC(uint64_t a1)
{
  MEMORY[0x22769A794](&unk_22655F878, a1);
  return sub_22655C92C();
}

uint64_t sub_226437918()
{
  MEMORY[0x22769A794](&unk_22655F878);
  return sub_22655C920();
}

uint64_t sub_226437960(uint64_t a1, uint64_t a2)
{
  sub_22655D640();
  MEMORY[0x22769A794](&unk_22655F878, a2);
  sub_22655C920();
  return sub_22655D670();
}

BOOL sub_2264379B8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

void sub_2264379E8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_2264379F8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_226437A04(uint64_t a1, uint64_t a2)
{
  return sub_226437FC0(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_226437A1C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_22655CD70();
  *a2 = 0;
  return result;
}

uint64_t sub_226437A90(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_22655CD7C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_226437B0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_22655CD88();
  v2 = sub_22655CD64();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_226437B4C(uint64_t a1, uint64_t a2)
{
  return sub_226437FC0(a1, a2, MEMORY[0x24BEE0CD8]);
}

_QWORD *sub_226437B60@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_226437B74@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_226437B88@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_226437BB4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_226437BD8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_226437BEC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_226437C00(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_226437C14(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_226437C28(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_226437C3C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_226437C4C()
{
  return sub_22655D208();
}

_QWORD *sub_226437C64(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_226437C78@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_226437C8C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_226437CA0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_226437CB4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_226437CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22769A794](&unk_22655F878, a3);
  return sub_22655C914();
}

uint64_t sub_226437D10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_22655CD88();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_226437D38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_2264383C8(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *sub_226437D74@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_226437D84()
{
  sub_226437F28(&qword_2558401C0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_22655F8A4);
  sub_226437F28(&qword_2558401C8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_22655F5E8);
  return sub_22655D448();
}

uint64_t sub_226437E08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_22655CD64();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_226437E4C()
{
  sub_226437F28(&qword_2558401B0, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityPriority, (uint64_t)&unk_22655F768);
  sub_226437F28(&qword_2558401B8, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityPriority, (uint64_t)&unk_22655F708);
  return sub_22655D448();
}

uint64_t sub_226437ED0()
{
  return sub_226437F28(&qword_255840070, (uint64_t (*)(uint64_t))type metadata accessor for RunOptions, (uint64_t)&unk_22655F31C);
}

uint64_t sub_226437EFC()
{
  return sub_226437F28(&qword_255840078, (uint64_t (*)(uint64_t))type metadata accessor for RunOptions, (uint64_t)&unk_22655F2EC);
}

uint64_t sub_226437F28(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22769A794](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_226437F68()
{
  return sub_226437F28(&qword_255840080, (uint64_t (*)(uint64_t))type metadata accessor for RunOptions, (uint64_t)&unk_22655F344);
}

uint64_t sub_226437F94()
{
  return sub_226437F28(&qword_255840088, (uint64_t (*)(uint64_t))type metadata accessor for RunOptions, (uint64_t)&unk_22655F37C);
}

uint64_t sub_226437FC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22655CD88();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_226437FFC()
{
  sub_22655CD88();
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22643803C()
{
  uint64_t v0;

  sub_22655CD88();
  sub_22655D640();
  sub_22655CE00();
  v0 = sub_22655D670();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2264380AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_22655CD88();
  v2 = v1;
  if (v0 == sub_22655CD88() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_22655D55C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_226438134(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255840128);
  result = sub_22655D40C();
  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v20 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 64;
  if ((v8 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    sub_22643F7F4(&v22, &v21);
    result = swift_bridgeObjectRelease();
    if (v1)
    {
      swift_release();
      return (uint64_t)v4;
    }
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v4[6] + 8 * i) = v16;
    *(_QWORD *)(v4[7] + 8 * i) = v21;
    v17 = v4[2];
    v13 = __OFADD__(v17, 1);
    v18 = v17 + 1;
    if (v13)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v18;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = __OFADD__(v5++, 1);
    if (v13)
      goto LABEL_27;
    if (v5 >= v20)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v19 + 8 * v5);
    if (!v14)
      break;
LABEL_15:
    v9 = (v14 - 1) & v14;
  }
  v15 = v5 + 1;
  if (v5 + 1 >= v20)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v19 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v5 + 2;
  if (v5 + 2 >= v20)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v19 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v5 + 3;
  if (v5 + 3 >= v20)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v19 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v5 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v20)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v19 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_226438358(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_226438390(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_2264383C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22769A77C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_226438464(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558400F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_226438500(uint64_t a1, uint64_t a2, char a3, uint64_t a4, float a5)
{
  char v9;
  uint64_t v10;
  _QWORD v12[5];

  v9 = a3 & 1;
  v12[3] = type metadata accessor for DollhouseMaterialFactory();
  v12[4] = &off_24EDE1340;
  v12[0] = a1;
  *(_QWORD *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a4 + 72) = 0;
  type metadata accessor for ScanContainer();
  swift_allocObject();
  *(_QWORD *)(a4 + 80) = sub_22655C1DC();
  v10 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(a4 + 96) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(a4 + 104) = v10;
  *(_QWORD *)(a4 + 112) = sub_226513804(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a4 + 120) = v10;
  *(_QWORD *)(a4 + 128) = v10;
  *(_BYTE *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 152) = 0x40A000003FC00000;
  sub_226438600((uint64_t)v12, a4 + 32);
  *(_QWORD *)(a4 + 144) = a2;
  *(_BYTE *)(a4 + 88) = v9;
  *(float *)(a4 + 140) = a5;
  *(float *)(a4 + 156) = a5 * 1.5;
  swift_retain();
  sub_226447B50();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return a4;
}

uint64_t sub_226438600(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_226438644(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_226438710(a1, &qword_255840130);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_226438710(a1, &qword_255840138);
}

void type metadata accessor for DotsVertexInput(uint64_t a1)
{
  sub_226438710(a1, &qword_255840140);
}

void type metadata accessor for UIAccessibilityPriority(uint64_t a1)
{
  sub_226438710(a1, &qword_255840148);
}

void type metadata accessor for RSError(uint64_t a1)
{
  sub_226438710(a1, &qword_255840150);
}

void type metadata accessor for OUError(uint64_t a1)
{
  sub_226438710(a1, &qword_255840158);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_226438710(a1, &qword_255840160);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_226438710(a1, &qword_255840168);
}

void sub_226438710(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_226438754()
{
  return sub_226437F28(&qword_255840170, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_22655F5AC);
}

uint64_t sub_226438780()
{
  return sub_226437F28(&qword_255840178, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_22655F580);
}

uint64_t sub_2264387AC()
{
  return sub_226437F28(&qword_255840180, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityPriority, (uint64_t)&unk_22655F6CC);
}

uint64_t sub_2264387D8()
{
  return sub_226437F28(&qword_255840188, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityPriority, (uint64_t)&unk_22655F6A0);
}

uint64_t sub_226438804()
{
  return sub_226437F28(&qword_255840190, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityPriority, (uint64_t)&unk_22655F73C);
}

uint64_t sub_226438830()
{
  return sub_226437F28(&qword_255840198, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_22655F808);
}

uint64_t sub_22643885C()
{
  return sub_226437F28(&qword_2558401A0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_22655F834);
}

uint64_t sub_226438888()
{
  return sub_226437F28(&qword_2558401A8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_22655F61C);
}

void sub_226438908()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ARGlyphView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_22655BF18();
  v4 = v3;

  qword_25585AC30 = v2;
  *(_QWORD *)algn_25585AC38 = v4;
}

void sub_2264389D0()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ARGlyphView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_22655BF18();
  v4 = v3;

  qword_25585AC40 = v2;
  *(_QWORD *)algn_25585AC48 = v4;
}

void sub_226438A94()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ARGlyphView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_22655BF18();
  v4 = v3;

  qword_25585AC50 = v2;
  *(_QWORD *)algn_25585AC58 = v4;
}

void sub_226438B58()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ARGlyphView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_22655BF18();
  v4 = v3;

  qword_25585AC60 = v2;
  *(_QWORD *)algn_25585AC68 = v4;
}

void sub_226438C1C()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ARGlyphView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_22655BF18();
  v4 = v3;

  qword_25585AC70 = v2;
  *(_QWORD *)algn_25585AC78 = v4;
}

char *sub_226438CE0(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  double v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  objc_super v63;

  v5 = v4;
  v10 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderer;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderer] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_previousAngle] = 0;
  type metadata accessor for MetalConstants();
  v11 = v4;
  swift_initStaticObject();
  v12 = (void *)sub_22648BC28();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE5708]), sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer] = v13;
  objc_msgSend(v13, sel_setOpaque_, 0);
  objc_msgSend(v13, sel_setDevice_, v12);
  type metadata accessor for RenderTimer();
  swift_allocObject();
  swift_unknownObjectRetain();
  v14 = v13;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer] = sub_2264A1EA8(v12, v14);
  v15 = 8;
  if ((objc_msgSend(v12, sel_supportsTextureSampleCount_, 8) & 1) == 0)
  {
    v15 = 4;
    if (!objc_msgSend(v12, sel_supportsTextureSampleCount_, 4))
      v15 = 1;
  }
  swift_unknownObjectRetain();
  v16 = v14;
  v17 = objc_msgSend(v16, sel_pixelFormat);
  type metadata accessor for GlyphRenderer();
  swift_allocObject();
  *(_QWORD *)&v5[v10] = sub_22654B964(v16, v12, (uint64_t)v17, v15);
  swift_release();
  v18 = *(_QWORD *)&v5[v10];
  if (v18)
  {
    *(_BYTE *)(*(_QWORD *)(v18 + 64) + 32) = 2;
    swift_retain();
    sub_22652EAA8();
    swift_release();
  }
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDB00]), sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView] = v19;
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v20 = (void *)objc_opt_self();
  v21 = v19;
  v22 = objc_msgSend(v20, sel_blackColor);
  v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.6);

  objc_msgSend(v21, sel_setBackgroundColor_, v23);
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v25 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel] = v24;
  objc_msgSend(v24, sel_setNumberOfLines_, 0);
  v26 = v24;
  v27 = objc_msgSend(v20, sel_whiteColor);
  objc_msgSend(v26, sel_setTextColor_, v27);

  v28 = *(void **)&v11[v25];
  objc_msgSend(v28, sel_setTextAlignment_, 1);
  objc_msgSend(v28, sel_setLineBreakMode_, 0);
  objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v29 = (void *)objc_opt_self();
  v30 = *MEMORY[0x24BEBE200];
  v31 = v28;
  v32 = objc_msgSend(v29, sel_preferredFontForTextStyle_, v30);
  objc_msgSend(v31, sel_setFont_, v32);

  v63.receiver = v11;
  v63.super_class = (Class)type metadata accessor for ARGlyphView();
  v33 = (char *)objc_msgSendSuper2(&v63, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v33, sel_setAlpha_, 0.0);
  v34 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView;
  objc_msgSend(v33, sel_addSubview_, *(_QWORD *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView]);
  v35 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel;
  objc_msgSend(v33, sel_addSubview_, *(_QWORD *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel]);
  v36 = objc_msgSend(v33, sel_layer);
  objc_msgSend(v36, sel_addSublayer_, *(_QWORD *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer]);

  *(_QWORD *)(*(_QWORD *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer] + 88) = &off_24EDE0D10;
  swift_unknownObjectWeakAssign();
  v37 = *(void **)&v33[v34];
  v38 = *MEMORY[0x24BEBE158];
  v39 = *(double *)(MEMORY[0x24BEBE158] + 8);
  v40 = *(double *)(MEMORY[0x24BEBE158] + 16);
  v41 = *(double *)(MEMORY[0x24BEBE158] + 24);
  v42 = v33;
  v43 = v37;
  sub_2265589C4(v42, v38, v39, v40, v41);

  v44 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v45 = objc_msgSend(v44, sel_userInterfaceIdiom);

  v46 = qword_25583F7E0;
  v47 = *(id *)&v33[v35];
  if (v46 != -1)
    swift_once();
  if (v45 == (id)1)
    v48 = 120.0;
  else
    v48 = 80.0;
  v49 = (void *)sub_22655CD64();
  objc_msgSend(v47, sel_setText_, v49);

  v50 = objc_msgSend(*(id *)&v33[v35], sel_centerXAnchor);
  v51 = objc_msgSend(v42, sel_centerXAnchor);
  v52 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v51);

  objc_msgSend(v52, sel_setActive_, 1);
  v53 = objc_msgSend(*(id *)&v33[v35], sel_centerYAnchor);
  v54 = objc_msgSend(v42, sel_centerYAnchor);
  v55 = objc_msgSend(v53, sel_constraintEqualToAnchor_constant_, v54, v48);

  objc_msgSend(v55, sel_setActive_, 1);
  v56 = objc_msgSend(*(id *)&v33[v35], sel_trailingAnchor);
  v57 = objc_msgSend(v42, sel_trailingAnchor);
  v58 = objc_msgSend(v56, sel_constraintEqualToAnchor_constant_, v57, -24.0);

  objc_msgSend(v58, sel_setActive_, 1);
  v59 = objc_msgSend(*(id *)&v33[v35], sel_leadingAnchor);
  v60 = objc_msgSend(v42, sel_leadingAnchor);
  v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_constant_, v60, 24.0);

  objc_msgSend(v61, sel_setActive_, 1);
  swift_unknownObjectRelease();

  return v42;
}

id sub_226439464()
{
  char *v0;
  void *v1;
  double Width;
  double Height;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double MidX;
  objc_super v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for ARGlyphView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  v1 = (void *)objc_opt_self();
  objc_msgSend(v1, sel_setDisableActions_, 1);
  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v15);
  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v16);
  if (Height < Width)
    Width = Height;
  v4 = *(void **)&v0[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer];
  objc_msgSend(v4, sel_setBounds_, 0.0, 0.0, Width, Width);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_mainScreen);
  objc_msgSend(v6, sel_scale);
  v8 = v7;

  v9 = objc_msgSend(v5, sel_mainScreen);
  objc_msgSend(v9, sel_scale);
  v11 = v10;

  objc_msgSend(v4, sel_setDrawableSize_, Width * v8, Width * v11);
  objc_msgSend(v0, sel_bounds);
  MidX = CGRectGetMidX(v17);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v4, sel_setPosition_, MidX, CGRectGetMidY(v18));
  return objc_msgSend(v1, sel_setDisableActions_, 0);
}

char *sub_2264396C8(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3;
  char *result;
  void *v5;
  uint64_t v6;

  v3 = a1 + 16;
  swift_beginAccess();
  result = (char *)MEMORY[0x22769A944](v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)&result[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer];
    swift_retain();

    result = *(char **)(v6 + 32);
    if (!result)
    {
      __break(1u);
      return result;
    }
    objc_msgSend(result, sel_invalidate);
    result = (char *)swift_release();
  }
  if (a2)
    return (char *)a2(result);
  return result;
}

void sub_226439760(uint64_t a1, uint64_t a2, double a3)
{
  void *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v7 = (void *)objc_opt_self();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v3;
  *(double *)(v8 + 24) = a3;
  v18 = sub_2264399A0;
  v19 = v8;
  v9 = MEMORY[0x24BDAC760];
  v14 = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = sub_2264FA450;
  v17 = &block_descriptor;
  v10 = _Block_copy(&v14);
  v11 = v3;
  swift_release();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v18 = sub_2264399F8;
  v19 = v12;
  v14 = v9;
  v15 = 1107296256;
  v16 = sub_22650F0BC;
  v17 = &block_descriptor_6;
  v13 = _Block_copy(&v14);
  sub_226439A20(a1);
  swift_release();
  objc_msgSend(v7, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 4, v10, v13, 1.0, 0.0);
  _Block_release(v13);
  _Block_release(v10);
}

id sub_2264398C4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARGlyphView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ARGlyphView()
{
  return objc_opt_self();
}

uint64_t sub_22643997C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_2264399A0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, *(double *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_2264399CC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_2264399F8()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_226439A20(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for SplineArc()
{
  return objc_opt_self();
}

uint64_t sub_226439A5C(float a1, float a2, float a3, float a4, float a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17)
{
  uint64_t v17;
  uint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  float v26;
  __int128 v27;
  int32x4_t v28;
  int32x4_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  __int128 v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  __int128 v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  float v59;
  float v60;
  float v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v76;

  *(_QWORD *)(v17 + 48) = MEMORY[0x24BEE4AF8];
  v21 = v17 + 48;
  swift_beginAccess();
  v22 = *(_QWORD **)(v17 + 48);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v17 + 48) = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v22 = sub_226486AE0(0, v22[2] + 1, 1, v22);
    *(_QWORD *)v21 = v22;
  }
  v25 = v22[2];
  v24 = v22[3];
  v26 = a1;
  if (v25 >= v24 >> 1)
  {
    v53 = sub_226486AE0((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
    v26 = a1;
    v22 = v53;
    *(_QWORD *)v21 = v53;
  }
  DWORD1(v27) = 0;
  *((_QWORD *)&v27 + 1) = 0;
  v28.i64[1] = v71;
  *(float32x2_t *)v28.i8 = vmul_n_f32((float32x2_t)LODWORD(a3), v26);
  v29 = vtrn2q_s32(vzip1q_s32((int32x4_t)0, v28), (int32x4_t)0);
  *(float *)&v29.i32[1] = v26;
  v22[2] = v25 + 1;
  *(int32x4_t *)&v22[2 * v25 + 4] = v29;
  v30 = *(_QWORD **)v21;
  v32 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  v31 = *(_QWORD *)(*(_QWORD *)v21 + 24);
  if (v32 >= v31 >> 1)
  {
    v66 = v28.i64[0];
    v54 = sub_226486AE0((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
    v26 = a1;
    v28.i64[0] = v66;
    DWORD1(v27) = 0;
    *((_QWORD *)&v27 + 1) = 0;
    v30 = v54;
    *(_QWORD *)v21 = v54;
  }
  v33 = v26 * a4;
  *(float *)&v34 = v26 * a4;
  *((float *)&v34 + 1) = v26;
  *((_QWORD *)&v34 + 1) = v28.u32[1];
  v30[2] = v32 + 1;
  *(_OWORD *)&v30[2 * v32 + 4] = v34;
  v35 = *(_QWORD **)v21;
  v37 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  v36 = *(_QWORD *)(*(_QWORD *)v21 + 24);
  if (v37 >= v36 >> 1)
  {
    v67 = v28.i64[0];
    v59 = v26 * a4;
    v55 = sub_226486AE0((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
    v33 = v59;
    v26 = a1;
    v28.i64[0] = v67;
    DWORD1(v27) = 0;
    *((_QWORD *)&v27 + 1) = 0;
    v35 = v55;
    *(_QWORD *)v21 = v55;
  }
  *(float *)&v27 = v26;
  v38 = v26 * a5;
  *(float *)&v39 = v26 * a5;
  *((float *)&v39 + 1) = v26;
  *((_QWORD *)&v39 + 1) = v28.u32[1];
  v35[2] = v37 + 1;
  *(_OWORD *)&v35[2 * v37 + 4] = v39;
  v40 = *(_QWORD **)v21;
  v42 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  v41 = *(_QWORD *)(*(_QWORD *)v21 + 24);
  if (v42 >= v41 >> 1)
  {
    v62 = v27;
    v68 = v28.i64[0];
    v60 = v33;
    v76 = v26 * a5;
    v56 = sub_226486AE0((_QWORD *)(v41 > 1), v42 + 1, 1, v40);
    v38 = v76;
    v33 = v60;
    v27 = v62;
    v28.i64[0] = v68;
    v40 = v56;
    *(_QWORD *)v21 = v56;
  }
  v43 = v27;
  *((float *)&v43 + 1) = v38;
  DWORD2(v43) = v28.i32[1];
  v40[2] = v42 + 1;
  *(_OWORD *)&v40[2 * v42 + 4] = v43;
  v44 = *(_QWORD **)v21;
  v46 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  v45 = *(_QWORD *)(*(_QWORD *)v21 + 24);
  if (v46 >= v45 >> 1)
  {
    v63 = v27;
    v69 = v28.i64[0];
    v61 = v33;
    v57 = sub_226486AE0((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
    v33 = v61;
    v27 = v63;
    v28.i64[0] = v69;
    v44 = v57;
    *(_QWORD *)v21 = v57;
  }
  v47 = v27;
  *((float *)&v47 + 1) = v33;
  DWORD2(v47) = v28.i32[1];
  v44[2] = v46 + 1;
  *(_OWORD *)&v44[2 * v46 + 4] = v47;
  v48 = *(_QWORD **)v21;
  v50 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  v49 = *(_QWORD *)(*(_QWORD *)v21 + 24);
  if (v50 >= v49 >> 1)
  {
    v64 = v27;
    v70 = v28.i64[0];
    v58 = sub_226486AE0((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v27 = v64;
    v28.i64[0] = v70;
    v48 = v58;
    *(_QWORD *)v21 = v58;
  }
  *(_QWORD *)((char *)&v27 + 4) = v28.i64[0];
  v48[2] = v50 + 1;
  *(_OWORD *)&v48[2 * v50 + 4] = v27;
  swift_endAccess();
  swift_release();
  v51 = swift_bridgeObjectRetain();
  return sub_226468634(v51, 0, a2, a6, a7, a8, a17);
}

uint64_t sub_226439D9C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_226439DA4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SplineCorner()
{
  return objc_opt_self();
}

uint64_t sub_226439E04()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for FloorPlanManager();
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 32) = v1;
  qword_25585AC80 = result;
  return result;
}

uint64_t sub_226439E3C(uint64_t *a1, uint64_t a2)
{
  return sub_226439E84(a1, a2, (void (*)(char *, uint64_t))sub_22643A890, (uint64_t)sub_22643C4DC, (void (*)(_QWORD))sub_22643B6F4, (void (*)(uint64_t))sub_22643BC44);
}

uint64_t sub_226439E60(uint64_t *a1, uint64_t a2)
{
  return sub_226439E84(a1, a2, (void (*)(char *, uint64_t))sub_22643ABD4, (uint64_t)sub_22643C818, (void (*)(_QWORD))sub_22643B708, (void (*)(uint64_t))sub_22643BFA0);
}

uint64_t sub_226439E84(uint64_t *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, void (*a5)(_QWORD), void (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  void (*v45)(_QWORD);
  void (*v46)(char *, uint64_t);
  void (*v47)(uint64_t);
  void (*v48)(_QWORD);
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;

  v46 = a3;
  v47 = a6;
  v9 = type metadata accessor for CapturedRoom.Object(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CapturedRoom.Surface(0);
  v50 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v43 - v18;
  v48 = a5;
  v49 = a1;
  v20 = *a1;
  v21 = *(_QWORD *)(*a1 + 16);
  if (v21)
  {
    v44 = v10;
    v45 = v17;
    v22 = v20 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v23 = *(_QWORD *)(v50 + 72);
    v43[1] = v20;
    swift_bridgeObjectRetain();
    v24 = a2;
    v25 = v46;
    do
    {
      sub_22643D704(v22, (uint64_t)v19, type metadata accessor for CapturedRoom.Surface);
      v25(v19, v24);
      sub_22643D748((uint64_t)v19, type metadata accessor for CapturedRoom.Surface);
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a5 = v48;
    v10 = v44;
    v17 = v45;
  }
  v26 = v49;
  v27 = v49[5];
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = v27 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v30 = *(_QWORD *)(v10 + 72);
    v31 = (void (*)(char *))v17;
    swift_bridgeObjectRetain();
    do
    {
      sub_22643D704(v29, (uint64_t)v12, type metadata accessor for CapturedRoom.Object);
      v31(v12);
      sub_22643D748((uint64_t)v12, type metadata accessor for CapturedRoom.Object);
      v29 += v30;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    a5 = v48;
    v26 = v49;
  }
  v51 = v26[3];
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRetain();
  sub_22646A3FC(v32);
  v33 = swift_bridgeObjectRetain();
  sub_22646A3FC(v33);
  v34 = *(_QWORD *)(v51 + 16);
  if (v34)
  {
    v35 = v51 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v36 = *(_QWORD *)(v50 + 72);
    do
    {
      sub_22643D704(v35, (uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      a5(v15);
      sub_22643D748((uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      v35 += v36;
      --v34;
    }
    while (v34);
  }
  result = swift_bridgeObjectRelease();
  v38 = v26[4];
  v39 = *(_QWORD *)(v38 + 16);
  v40 = v47;
  if (v39)
  {
    v41 = v38 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v42 = *(_QWORD *)(v50 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v40(v41);
      v41 += v42;
      --v39;
    }
    while (v39);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22643A15C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(unint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char v25;
  char v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(unint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(unint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v2 = type metadata accessor for CapturedRoom.Object(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v81 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655C140();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v83 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v80 = (char *)&v72 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v72 - v11;
  v84 = type metadata accessor for CapturedRoom.Surface(0);
  v75 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v82 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v72 - v15;
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 16);
  v86 = v5;
  v76 = a1;
  if (v18)
  {
    v73 = v2;
    v74 = v3;
    v79 = &v16[*(int *)(v84 + 44)];
    v19 = (uint64_t *)(v77 + 24);
    v20 = v17 + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
    v78 = *(_QWORD *)(v75 + 72);
    v72 = v17;
    swift_bridgeObjectRetain();
    v85 = v6;
    do
    {
      sub_22643D704(v20, (uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v79, v5);
      v22 = v6;
      v23 = v16;
      sub_22643D748((uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v24 = sub_226534858((uint64_t)v12);
      v26 = v25;
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = *v19;
        v87 = *v19;
        *v19 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_226548CA4();
          v28 = v87;
        }
        v5 = v86;
        v21 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v21(*(_QWORD *)(v28 + 48) + *(_QWORD *)(v85 + 72) * v24, v86);
        v29 = v87;
        sub_2265462EC(v24, v87);
        *v19 = v29;
        swift_bridgeObjectRelease();
      }
      else
      {
        v21 = *(void (**)(unint64_t, uint64_t))(v22 + 8);
        v5 = v86;
      }
      v21((unint64_t)v12, v5);
      swift_endAccess();
      swift_release();
      v20 += v78;
      --v18;
      v16 = v23;
      v6 = v85;
    }
    while (v18);
    swift_bridgeObjectRelease();
    a1 = v76;
    v2 = v73;
    v3 = v74;
  }
  v30 = a1[5];
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v85 = v81 + *(int *)(v2 + 32);
    v32 = (uint64_t *)(v77 + 24);
    v33 = v30 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v34 = *(char **)(v3 + 72);
    v78 = v30;
    v79 = v34;
    swift_bridgeObjectRetain();
    v35 = (uint64_t)v80;
    do
    {
      v37 = v81;
      sub_22643D704(v33, v81, type metadata accessor for CapturedRoom.Object);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v35, v85, v5);
      sub_22643D748(v37, type metadata accessor for CapturedRoom.Object);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v38 = sub_226534858(v35);
      v40 = v39;
      swift_bridgeObjectRelease();
      if ((v40 & 1) != 0)
      {
        v41 = swift_isUniquelyReferenced_nonNull_native();
        v42 = *v32;
        v87 = *v32;
        *v32 = 0x8000000000000000;
        if (!v41)
        {
          sub_226548CA4();
          v42 = v87;
        }
        v36 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
        v5 = v86;
        v36(*(_QWORD *)(v42 + 48) + *(_QWORD *)(v6 + 72) * v38, v86);
        v43 = v87;
        sub_2265462EC(v38, v87);
        *v32 = v43;
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
        v5 = v86;
      }
      v35 = (uint64_t)v80;
      v36((unint64_t)v80, v5);
      swift_endAccess();
      swift_release();
      v33 += (uint64_t)v79;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    a1 = v76;
  }
  v88 = (char *)a1[3];
  swift_bridgeObjectRetain();
  v44 = swift_bridgeObjectRetain();
  sub_22646A3FC(v44);
  v45 = swift_bridgeObjectRetain();
  sub_22646A3FC(v45);
  v46 = *((_QWORD *)v88 + 2);
  if (v46)
  {
    v47 = (uint64_t)v83;
    v85 = v82 + *(int *)(v84 + 44);
    v48 = (uint64_t *)(v77 + 24);
    v49 = (uint64_t)&v88[(*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80)];
    v50 = *(_QWORD *)(v75 + 72);
    v80 = v88;
    v81 = v50;
    do
    {
      v52 = v82;
      sub_22643D704(v49, v82, type metadata accessor for CapturedRoom.Surface);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v47, v85, v5);
      sub_22643D748(v52, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v53 = sub_226534858(v47);
      v55 = v54;
      swift_bridgeObjectRelease();
      if ((v55 & 1) != 0)
      {
        v56 = swift_isUniquelyReferenced_nonNull_native();
        v57 = *v48;
        v87 = *v48;
        *v48 = 0x8000000000000000;
        if (!v56)
        {
          sub_226548CA4();
          v57 = v87;
        }
        v51 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
        v5 = v86;
        v51(*(_QWORD *)(v57 + 48) + *(_QWORD *)(v6 + 72) * v53, v86);
        v58 = v87;
        sub_2265462EC(v53, v87);
        *v48 = v58;
        swift_bridgeObjectRelease();
      }
      else
      {
        v51 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
        v5 = v86;
      }
      v47 = (uint64_t)v83;
      v51((unint64_t)v83, v5);
      swift_endAccess();
      swift_release();
      v49 += v81;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease();
    a1 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = a1[4];
  v60 = *(_QWORD *)(result + 16);
  if (v60)
  {
    v61 = result + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
    v62 = (uint64_t *)(v77 + 24);
    v63 = *(_QWORD *)(v75 + 72);
    v85 = a1[4];
    swift_bridgeObjectRetain();
    v64 = v86;
    do
    {
      v66 = v61 + *(int *)(v84 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v67 = sub_226534858(v66);
      v69 = v68;
      swift_bridgeObjectRelease();
      if ((v69 & 1) != 0)
      {
        v70 = swift_isUniquelyReferenced_nonNull_native();
        v71 = *v62;
        v87 = *v62;
        *v62 = 0x8000000000000000;
        if (!v70)
        {
          sub_226548CA4();
          v71 = v87;
        }
        (*(void (**)(unint64_t, uint64_t))(v6 + 8))(*(_QWORD *)(v71 + 48) + *(_QWORD *)(v6 + 72) * v67, v64);
        v65 = v87;
        sub_2265462EC(v67, v87);
        *v62 = v65;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      v61 += v63;
      --v60;
    }
    while (v60);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22643A890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t ObjCClassFromMetadata;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = type metadata accessor for CapturedRoom.Surface(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22655CB84();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16))
  {
    v12 = a1 + *(int *)(v5 + 44);
    swift_bridgeObjectRetain();
    sub_226534858(v12);
    LOBYTE(v12) = v13;
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      v29 = v8;
      type metadata accessor for Constants();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v15 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v16 = objc_msgSend(v15, sel_bundleIdentifier);

      if (v16)
      {
        sub_22655CD88();

      }
      sub_22643D680();
      sub_22655D124();
      sub_22655CB90();
      sub_22643D704(a1, (uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
      v17 = sub_22655CB6C();
      v18 = sub_22655CFF8();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v31 = v27;
        v28 = a2;
        *(_DWORD *)v19 = 136315138;
        v25 = v19 + 4;
        v26 = v19;
        sub_22655C140();
        sub_22643D6BC();
        v20 = sub_22655D544();
        v30 = sub_2264F4EC4(v20, v21, &v31);
        a2 = v28;
        sub_22655D154();
        swift_bridgeObjectRelease();
        sub_22643D748((uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
        v22 = v26;
        _os_log_impl(&dword_226423000, v17, v18, "Wall scanItem with UUID %s already exists", v26, 0xCu);
        v23 = v27;
        swift_arrayDestroy();
        MEMORY[0x22769A884](v23, -1, -1);
        MEMORY[0x22769A884](v22, -1, -1);
      }
      else
      {
        sub_22643D748((uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v29);
    }
  }
  return sub_22643ABD4(a1, a2);
}

uint64_t sub_22643ABD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t result;
  uint64_t v29;
  __int128 v30;
  BOOL v31;
  float v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  int v72;
  uint64_t v73;
  simd_float4 v74;
  uint64_t v75;
  uint64_t v76;
  simd_float4 v77;
  simd_float4 v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  __n128 v82;
  simd_float4 v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  simd_float4 v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  simd_float4x4 v95;
  simd_float4x4 v96;

  v87.i64[0] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v3);
  v91 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655C140();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v89 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v90 = (uint64_t)&v74 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v74 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v74 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v92 = (uint64_t)&v74 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v74 - v25;
  if (qword_25583F9D0 != -1)
    swift_once();
  v27 = off_25584AF28;
  result = swift_beginAccess();
  if (v27[166] == 1)
  {
    v29 = 0;
    v30 = *(_OWORD *)(a1 + 16);
    while (1)
    {
      v93 = v30;
      v32 = *(float *)((unint64_t)&v93 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3)));
      v31 = v32 == 0.0;
      if (v29 == 2)
        break;
      while (1)
      {
        ++v29;
        if (v31)
          break;
        if (v29 == 2)
          goto LABEL_11;
        v31 = 0;
      }
    }
    if (v32 != 0.0)
    {
LABEL_11:
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *MEMORY[0x24BDAEE00])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48))))) & 0x80000000) != 0)return result;
      v86 = v6;
      v85 = v5;
      v33 = *(_QWORD *)(a1 + 8);
      if (sub_22643CEEC(0, v33))
        v34 = 8;
      else
        v34 = 0;
      if (sub_22643CEEC(1u, v33))
        v34 |= 2u;
      if (sub_22643CEEC(2u, v33))
        v34 |= 4u;
      v35 = v34 & 0xFFFFFFFE | sub_22643CEEC(3u, v33);
      v80.i32[0] = sub_2264549E4(v35);
      swift_beginAccess();
      if (v27[138] == 1)
      {
        v36 = type metadata accessor for CapturedRoom.Surface(0);
        v37 = *(_QWORD *)(a1 + *(int *)(v36 + 68));
        v75 = *(_QWORD *)(a1 + *(int *)(v36 + 64));
        swift_bridgeObjectRetain();
        v76 = v37;
        swift_bridgeObjectRetain();
      }
      else
      {
        v76 = MEMORY[0x24BEE4AF8];
        v75 = MEMORY[0x24BEE4AF8];
      }
      v81.i64[0] = type metadata accessor for CapturedRoom.Surface(0);
      v82.n128_u64[0] = a1 + *(int *)(v81.i64[0] + 52);
      sub_22643D7A0(v82.n128_i64[0], (uint64_t)v26, (uint64_t *)&unk_255848090);
      v38 = type metadata accessor for CapturedRoom.Surface.Curve(0);
      v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v26, 1, v38);
      v40 = sub_22643D7E4((uint64_t)v26, (uint64_t *)&unk_255848090);
      MEMORY[0x24BDAC7A8](v40);
      v73 = a1;
      v41 = v86;
      if (v39 == 1)
      {
        v42 = sub_22643B5C0(sub_22643D784, (uint64_t)&v72, v87.u64[0]);
        v43 = v85;
      }
      else
      {
        v44 = v87.i64[0];
        v45 = (float32x2_t *)sub_22643B5C0((uint64_t (*)(uint64_t *))sub_22643D820, (uint64_t)&v72, v87.u64[0]);
        MEMORY[0x24BDAC7A8](v45);
        v73 = a1;
        v42 = sub_22643B5C0((uint64_t (*)(uint64_t *))sub_22643D840, (uint64_t)&v72, v44);
        v43 = v85;
        if (v45)
        {
          v46 = v45;
          if ((v45->i8[OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration] & 1) != 0)
          {
            v47 = type metadata accessor for ScanItemStrut();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v92, 1, 1, v47);
          }
          else
          {
            v87 = *(simd_float4 *)(a1 + 32);
            v83 = *(simd_float4 *)(a1 + 48);
            v79 = *(float32x4_t *)(a1 + 64);
            v78 = *(simd_float4 *)(a1 + 80);
            swift_retain();
            v49 = v92;
            v95.columns[0] = v87;
            v95.columns[1] = v83;
            v95.columns[2] = (simd_float4)v79;
            v95.columns[3] = v78;
            sub_22644FA10(v45, v92, v95, 0.16, 0.16);
            v50 = type metadata accessor for ScanItemStrut();
            v51 = v49;
            v46 = v45;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v51, 0, 1, v50);
          }
          v41 = v86;
LABEL_31:
          v84 = v35;
          v87.i64[0] = v42;
          v83.i64[0] = (uint64_t)v46;
          if (v42 && (*(_BYTE *)(v42 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration) & 1) == 0)
          {
            v79 = *(float32x4_t *)(a1 + 32);
            v78 = *(simd_float4 *)(a1 + 48);
            v77 = *(simd_float4 *)(a1 + 64);
            v74 = *(simd_float4 *)(a1 + 80);
            v53 = (float32x2_t *)swift_retain();
            v96.columns[0] = (simd_float4)v79;
            v96.columns[1] = v78;
            v96.columns[2] = v77;
            v96.columns[3] = v74;
            sub_22644FA34(v53, (uint64_t)v18, v96, 0.16, 0.16);
            v54 = type metadata accessor for ScanItemStrut();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v18, 0, 1, v54);
          }
          else
          {
            v52 = type metadata accessor for ScanItemStrut();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v18, 1, 1, v52);
          }
          v55 = v80.i32[0];
          v56 = v43;
          v57 = v81.i64[0];
          v58 = a1 + *(int *)(v81.i64[0] + 44);
          v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
          v59(v90, v58, v56);
          sub_22643D7A0(a1 + *(int *)(v57 + 56), v91, (uint64_t *)&unk_255849AC0);
          v81 = *(float32x4_t *)(a1 + 16);
          sub_22643D7A0(v82.n128_i64[0], (uint64_t)v23, (uint64_t *)&unk_255848090);
          v80 = *(float32x4_t *)(a1 + 32);
          v79 = *(float32x4_t *)(a1 + 48);
          v78 = *(simd_float4 *)(a1 + 64);
          v77 = *(simd_float4 *)(a1 + 80);
          v82 = *(__n128 *)(a1 + 112);
          v60 = sub_22649C44C(v55);
          sub_22643D7A0(v92, (uint64_t)v15, &qword_255840818);
          sub_22643D7A0((uint64_t)v18, (uint64_t)v12, &qword_255840818);
          v61 = v88;
          v62 = (uint64_t *)(v88 + 24);
          swift_beginAccess();
          v63 = *(_QWORD *)(v61 + 24);
          if (*(_QWORD *)(v63 + 16))
          {
            swift_bridgeObjectRetain();
            v64 = sub_226534858(v58);
            if ((v65 & 1) != 0)
            {
              v66 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
              swift_retain();
            }
            else
            {
              v66 = 0;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            v66 = 0;
          }
          type metadata accessor for ScanItem();
          swift_allocObject();
          v67 = sub_226440400(v90, v91, 2, 1, (uint64_t)v23, v76, v75, v84, v81, v80, v79, v78, v77, v82, v60, (uint64_t)v15, (uint64_t)v12, v66);
          v68 = (uint64_t)v89;
          v69 = v58;
          v70 = v85;
          v59((uint64_t)v89, v69, v85);
          swift_beginAccess();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v94 = *v62;
          *v62 = 0x8000000000000000;
          sub_226522F3C(v67, v68, isUniquelyReferenced_nonNull_native);
          *v62 = v94;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v68, v70);
          swift_endAccess();
          swift_release();
          swift_release();
          swift_release();
          sub_22643D7E4((uint64_t)v18, &qword_255840818);
          return sub_22643D7E4(v92, &qword_255840818);
        }
        v41 = v86;
      }
      v48 = type metadata accessor for ScanItemStrut();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v92, 1, 1, v48);
      v46 = 0;
      goto LABEL_31;
    }
  }
  return result;
}

uint64_t sub_22643B540(uint64_t *a1)
{
  uint64_t v1;
  char v2;

  v1 = *a1;
  type metadata accessor for CapturedRoom.Surface(0);
  if ((sub_22655C104() & 1) != 0)
    v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_isRightCurved) ^ 1;
  else
    v2 = 0;
  return v2 & 1;
}

uint64_t sub_22643B5C0(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v6 = sub_22655D400();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x2276999E4](v7 - 4, a3);
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
            goto LABEL_16;
        }
        else
        {
          v9 = *(_QWORD *)(a3 + 8 * v7);
          swift_retain();
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        v14 = v9;
        v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_22643B6F4(uint64_t a1)
{
  return sub_22643BC58(a1, "Opening scanItem with UUID %s already exists", sub_22643B708);
}

uint64_t sub_22643B708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  uint64_t v23;
  float32x4_t v24;
  BOOL v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int *v30;
  void (*v31)(_QWORD);
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v50[12];
  int v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  simd_float4 v58;
  simd_float4 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v50[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v50[-v7];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_22655C140();
  v64 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v50[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v50[-v19];
  if (qword_25583F9D0 != -1)
    swift_once();
  v21 = off_25584AF28;
  result = swift_beginAccess();
  if (v21[168] == 1)
  {
    v23 = 0;
    v24 = *(float32x4_t *)(a1 + 16);
    while (1)
    {
      v65 = v24;
      v26 = *(float *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
      v25 = v26 == 0.0;
      if (v23 == 2)
        break;
      while (1)
      {
        ++v23;
        if (v25)
          break;
        if (v23 == 2)
          goto LABEL_10;
        v25 = 0;
      }
    }
    if (v26 != 0.0)
    {
LABEL_10:
      v27 = *(float32x4_t *)(a1 + 32);
      v28 = *(float32x4_t *)(a1 + 48);
      v29 = *(float32x4_t *)(a1 + 64);
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v28, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16)), (int8x16_t)vceqq_f32(v27, *MEMORY[0x24BDAEE00])), vandq_s8((int8x16_t)vceqq_f32(v29, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48))))) & 0x80000000) == 0)
      {
        v58 = *(simd_float4 *)(a1 + 80);
        v59 = (simd_float4)v29;
        v60 = v28;
        v61 = v27;
        v62 = v24;
        v30 = (int *)type metadata accessor for CapturedRoom.Surface(0);
        v31 = *(void (**)(_QWORD))(v64 + 16);
        v63 = a1 + v30[11];
        v57 = (void (*)(_BYTE *, uint64_t, uint64_t))v31;
        v31(v20);
        sub_22643D7A0(a1 + v30[14], (uint64_t)v14, (uint64_t *)&unk_255849AC0);
        v32 = (*(_BYTE *)a1 - 2);
        v33 = 0x6040102u >> (8 * v32);
        if ((*(_BYTE *)a1 & 1) != 0)
          v34 = 0;
        else
          v34 = 5;
        if ((*(_BYTE *)a1 & 1) != 0)
          v35 = 4;
        else
          v35 = 3;
        v36 = v32 >= 4;
        if (v32 >= 4)
          v37 = v35;
        else
          v37 = 0x20501u >> (8 * v32);
        v56 = v37;
        if (!v36)
          v34 = v33;
        v55 = v34;
        sub_22643D7A0(a1 + v30[13], (uint64_t)v11, (uint64_t *)&unk_255848090);
        v38 = *(_QWORD *)(a1 + v30[17]);
        v39 = *(_QWORD *)(a1 + v30[16]);
        v52 = *(__n128 *)(a1 + 112);
        v40 = qword_25583F940;
        v54 = v38;
        swift_bridgeObjectRetain();
        v53 = v39;
        swift_bridgeObjectRetain();
        if (v40 != -1)
          swift_once();
        v51 = dword_25585AF20;
        v41 = type metadata accessor for ScanItemStrut();
        v42 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
        v42(v8, 1, 1, v41);
        v42(v5, 1, 1, v41);
        v43 = (uint64_t *)(v1 + 24);
        swift_beginAccess();
        v44 = *(_QWORD *)(v1 + 24);
        if (*(_QWORD *)(v44 + 16))
        {
          swift_bridgeObjectRetain();
          v45 = sub_226534858(v63);
          if ((v46 & 1) != 0)
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45);
            swift_retain();
          }
          else
          {
            v47 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = 0;
        }
        type metadata accessor for ScanItem();
        swift_allocObject();
        v48 = sub_226440400((uint64_t)v20, (uint64_t)v14, v55, v56, (uint64_t)v11, v54, v53, 15, v62, v61, v60, v59, v58, v52, v51, (uint64_t)v8, (uint64_t)v5, v47);
        v57(v17, v63, v15);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v66 = *v43;
        *v43 = 0x8000000000000000;
        sub_226522F3C(v48, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *v43 = v66;
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v17, v15);
        swift_endAccess();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_22643BC44(uint64_t a1)
{
  return sub_22643BC58(a1, "Floor scanItem with UUID %s already exists", sub_22643BFA0);
}

uint64_t sub_22643BC58(uint64_t a1, const char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t ObjCClassFromMetadata;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD v27[2];
  uint8_t *v28;
  uint64_t v29;
  os_log_t v30;
  uint64_t (*v31)(_QWORD);
  const char *v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v6 = type metadata accessor for CapturedRoom.Surface(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22655CB84();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
  {
    v13 = a1 + *(int *)(v6 + 44);
    swift_bridgeObjectRetain();
    sub_226534858(v13);
    LOBYTE(v13) = v14;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      v31 = a3;
      type metadata accessor for Constants();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v16 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v17 = objc_msgSend(v16, sel_bundleIdentifier);

      if (v17)
      {
        sub_22655CD88();

      }
      sub_22643D680();
      sub_22655D124();
      sub_22655CB90();
      sub_22643D704(a1, (uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
      v18 = sub_22655CB6C();
      v19 = sub_22655CFF8();
      if (os_log_type_enabled(v18, v19))
      {
        v30 = v18;
        v20 = (uint8_t *)swift_slowAlloc();
        v29 = swift_slowAlloc();
        v34 = v29;
        v28 = v20;
        *(_DWORD *)v20 = 136315138;
        v27[1] = v20 + 4;
        sub_22655C140();
        sub_22643D6BC();
        v21 = sub_22655D544();
        v33 = sub_2264F4EC4(v21, v22, &v34);
        sub_22655D154();
        swift_bridgeObjectRelease();
        sub_22643D748((uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
        v18 = v30;
        v23 = v19;
        v24 = v28;
        _os_log_impl(&dword_226423000, v30, v23, v32, v28, 0xCu);
        v25 = v29;
        swift_arrayDestroy();
        MEMORY[0x22769A884](v25, -1, -1);
        MEMORY[0x22769A884](v24, -1, -1);
      }
      else
      {
        sub_22643D748((uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
      }

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      a3 = v31;
    }
  }
  return a3(a1);
}

uint64_t sub_22643BFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t result;
  uint64_t v23;
  float32x4_t v24;
  BOOL v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int *v30;
  void (*v31)(_QWORD);
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v50[12];
  int v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  simd_float4 v58;
  simd_float4 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v50[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v50[-v7];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_22655C140();
  v64 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v50[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v50[-v19];
  if (qword_25583F9D0 != -1)
    swift_once();
  v21 = off_25584AF28;
  result = swift_beginAccess();
  if (v21[169] == 1)
  {
    v23 = 0;
    v24 = *(float32x4_t *)(a1 + 16);
    while (1)
    {
      v65 = v24;
      v26 = *(float *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
      v25 = v26 == 0.0;
      if (v23 == 2)
        break;
      while (1)
      {
        ++v23;
        if (v25)
          break;
        if (v23 == 2)
          goto LABEL_10;
        v25 = 0;
      }
    }
    if (v26 != 0.0)
    {
LABEL_10:
      v27 = *(float32x4_t *)(a1 + 32);
      v28 = *(float32x4_t *)(a1 + 48);
      v29 = *(float32x4_t *)(a1 + 64);
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v28, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16)), (int8x16_t)vceqq_f32(v27, *MEMORY[0x24BDAEE00])), vandq_s8((int8x16_t)vceqq_f32(v29, *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48))))) & 0x80000000) == 0)
      {
        v58 = *(simd_float4 *)(a1 + 80);
        v59 = (simd_float4)v29;
        v60 = v28;
        v61 = v27;
        v62 = v24;
        v30 = (int *)type metadata accessor for CapturedRoom.Surface(0);
        v31 = *(void (**)(_QWORD))(v64 + 16);
        v63 = a1 + v30[11];
        v57 = (void (*)(_BYTE *, uint64_t, uint64_t))v31;
        v31(v20);
        sub_22643D7A0(a1 + v30[14], (uint64_t)v14, (uint64_t *)&unk_255849AC0);
        v32 = (*(_BYTE *)a1 - 2);
        v33 = 0x6040102u >> (8 * v32);
        if ((*(_BYTE *)a1 & 1) != 0)
          v34 = 0;
        else
          v34 = 5;
        if ((*(_BYTE *)a1 & 1) != 0)
          v35 = 4;
        else
          v35 = 3;
        v36 = v32 >= 4;
        if (v32 >= 4)
          v37 = v35;
        else
          v37 = 0x20501u >> (8 * v32);
        v56 = v37;
        if (!v36)
          v34 = v33;
        v55 = v34;
        sub_22643D7A0(a1 + v30[13], (uint64_t)v11, (uint64_t *)&unk_255848090);
        v38 = *(_QWORD *)(a1 + v30[17]);
        v39 = *(_QWORD *)(a1 + v30[16]);
        v52 = *(__n128 *)(a1 + 112);
        v40 = qword_25583F940;
        v54 = v38;
        swift_bridgeObjectRetain();
        v53 = v39;
        swift_bridgeObjectRetain();
        if (v40 != -1)
          swift_once();
        v51 = dword_25585AF20;
        v41 = type metadata accessor for ScanItemStrut();
        v42 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
        v42(v8, 1, 1, v41);
        v42(v5, 1, 1, v41);
        v43 = (uint64_t *)(v1 + 24);
        swift_beginAccess();
        v44 = *(_QWORD *)(v1 + 24);
        if (*(_QWORD *)(v44 + 16))
        {
          swift_bridgeObjectRetain();
          v45 = sub_226534858(v63);
          if ((v46 & 1) != 0)
          {
            v47 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45);
            swift_retain();
          }
          else
          {
            v47 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = 0;
        }
        type metadata accessor for ScanItem();
        swift_allocObject();
        v48 = sub_226440400((uint64_t)v20, (uint64_t)v14, v55, v56, (uint64_t)v11, v54, v53, 15, v62, v61, v60, v59, v58, v52, v51, (uint64_t)v8, (uint64_t)v5, v47);
        v57(v17, v63, v15);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v66 = *v43;
        *v43 = 0x8000000000000000;
        sub_226522F3C(v48, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *v43 = v66;
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v17, v15);
        swift_endAccess();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_22643C4DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t ObjCClassFromMetadata;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint8_t *v24;
  uint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for CapturedRoom.Object(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22655CB84();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16))
  {
    v10 = a1 + *(int *)(v3 + 32);
    swift_bridgeObjectRetain();
    sub_226534858(v10);
    LOBYTE(v10) = v11;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
      type metadata accessor for Constants();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v14 = objc_msgSend(v13, sel_bundleIdentifier);

      if (v14)
      {
        sub_22655CD88();

      }
      sub_22643D680();
      sub_22655D124();
      sub_22655CB90();
      sub_22643D704(a1, (uint64_t)v5, type metadata accessor for CapturedRoom.Object);
      v15 = sub_22655CB6C();
      v16 = sub_22655CFF8();
      if (os_log_type_enabled(v15, v16))
      {
        v26 = v15;
        v17 = (uint8_t *)swift_slowAlloc();
        v25 = swift_slowAlloc();
        v28 = v25;
        v24 = v17;
        *(_DWORD *)v17 = 136315138;
        v23[1] = v17 + 4;
        sub_22655C140();
        sub_22643D6BC();
        v18 = sub_22655D544();
        v27 = sub_2264F4EC4(v18, v19, &v28);
        sub_22655D154();
        swift_bridgeObjectRelease();
        sub_22643D748((uint64_t)v5, type metadata accessor for CapturedRoom.Object);
        v15 = v26;
        v20 = v24;
        _os_log_impl(&dword_226423000, v26, v16, "Object scanItem with UUID %s already exists", v24, 0xCu);
        v21 = v25;
        swift_arrayDestroy();
        MEMORY[0x22769A884](v21, -1, -1);
        MEMORY[0x22769A884](v20, -1, -1);
      }
      else
      {
        sub_22643D748((uint64_t)v5, type metadata accessor for CapturedRoom.Object);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return sub_22643C818(a1);
}

uint64_t sub_22643C818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  uint64_t result;
  int v23;
  int v24;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  int v44;
  int v45;
  simd_float4 v46;
  simd_float4 v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  float32x4_t v51;
  int v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v2);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v56 = (uint64_t)&v43 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22655C140();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v43 - v16;
  v18 = (int *)type metadata accessor for CapturedRoom.Object(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (unsigned __int8 *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25583F9D0 != -1)
    swift_once();
  v21 = off_25584AF28;
  result = swift_beginAccess();
  if (v21[167] == 1)
  {
    swift_beginAccess();
    v23 = v21[41];
    sub_22643D704(a1, (uint64_t)v20, type metadata accessor for CapturedRoom.Object);
    if (v23 == 1)
    {
      v24 = *v20;
      result = sub_22643D748((uint64_t)v20, type metadata accessor for CapturedRoom.Object);
      if (v24 == 2 || v24 == 15)
        return result;
    }
    else
    {
      sub_22643D748((uint64_t)v20, type metadata accessor for CapturedRoom.Object);
    }
    v26 = off_25584AF28;
    swift_beginAccess();
    v59[0] = v26[40];
    v27 = sub_22643CD7C(v59);
    v28 = a1 + v18[8];
    v43 = v12;
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v53(v17, v28, v11);
    sub_22643D7A0(a1 + v18[11], (uint64_t)v10, (uint64_t *)&unk_255849AC0);
    v59[0] = *(_BYTE *)a1;
    v52 = sub_22652F1F4();
    v51 = *(float32x4_t *)(a1 + 16);
    v29 = type metadata accessor for CapturedRoom.Surface.Curve(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v57, 1, 1, v29);
    v49 = *(float32x4_t *)(a1 + 32);
    v48 = *(float32x4_t *)(a1 + 48);
    v47 = *(simd_float4 *)(a1 + 64);
    v46 = *(simd_float4 *)(a1 + 80);
    v50 = *(__n128 *)(a1 + v18[13]);
    v45 = sub_22649C6FC(v27);
    v44 = sub_22649C44C(v27);
    v30 = type metadata accessor for ScanItemStrut();
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v31(v56, 1, 1, v30);
    v32 = (uint64_t)v55;
    v31((uint64_t)v55, 1, 1, v30);
    v33 = v54;
    v34 = (uint64_t *)(v54 + 24);
    swift_beginAccess();
    v35 = *(_QWORD *)(v33 + 24);
    if (*(_QWORD *)(v35 + 16))
    {
      swift_bridgeObjectRetain();
      v36 = v28;
      v37 = sub_226534858(v28);
      if ((v38 & 1) != 0)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v37);
        swift_retain();
      }
      else
      {
        v39 = 0;
      }
      v40 = v43;
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = v28;
      v39 = 0;
      v40 = v43;
    }
    type metadata accessor for ScanItem();
    swift_allocObject();
    v41 = sub_226440400((uint64_t)v17, (uint64_t)v10, 3, v52, v57, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v45, v51, v49, v48, v47, v46, v50, v44, v56, v32, v39);
    v53(v14, v36, v11);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v58 = *v34;
    *v34 = 0x8000000000000000;
    sub_226522F3C(v41, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *v34 = v58;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v11);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_22643CD7C(_BYTE *a1)
{
  unsigned __int8 *v1;
  int v2;

  if (!*a1)
    return *(unsigned int *)&v1[*(int *)(type metadata accessor for CapturedRoom.Object(0) + 48)];
  if (*a1 == 1)
    __asm { BR              X10 }
  v2 = *v1;
  if (v2 == 14)
    return sub_22643CE7C((uint64_t)&unk_24EDDEB38);
  if (v2 != 12)
    return *(unsigned int *)&v1[*(int *)(type metadata accessor for CapturedRoom.Object(0) + 48)];
  return sub_22643CE7C((uint64_t)&unk_24EDDEB08);
}

uint64_t sub_22643CE10()
{
  return sub_22643CE7C((uint64_t)&unk_24EDDEA78);
}

uint64_t sub_22643CE20()
{
  return sub_22643CE7C((uint64_t)&unk_24EDDEAD8);
}

uint64_t sub_22643CE30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FloorPlanManager()
{
  return objc_opt_self();
}

uint64_t sub_22643CE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  int *v7;
  int v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = type metadata accessor for CapturedRoom.Object(0);
  LODWORD(result) = 0;
  v6 = *(_DWORD *)(v1 + *(int *)(v4 + 48));
  v7 = (int *)(a1 + 32);
  do
  {
    v9 = *v7++;
    v8 = v9;
    v10 = v9 & ~v6;
    if ((v9 & ~(_DWORD)result) == 0 || v10 != 0)
      v8 = 0;
    result = v8 | result;
    --v2;
  }
  while (v2);
  return result;
}

BOOL sub_22643CEEC(unsigned __int8 a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  sub_22655D640();
  sub_22655D64C();
  v4 = sub_22655D670();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_22643CFD8(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  __n128 v19;
  unint64_t v20;
  int8x8_t v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  simd_float4x4 v31;

  v6 = v5;
  v27 = a4;
  v28 = a5;
  v25 = a2;
  v26 = a3;
  v8 = sub_22655C140();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type);
  v19 = 0uLL;
  v29 = 0u;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 3)
    {
      if (qword_25583F9C0 != -1)
        swift_once();
      sub_22653DF3C(a1, *(_BYTE *)(v6 + 17), v25, v26, v27, v28);
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_25583F9C0 != -1)
      swift_once();
    v31.columns[0] = (simd_float4)v25;
    v31.columns[1] = (simd_float4)v26;
    v31.columns[2] = (simd_float4)v27;
    v31.columns[3] = (simd_float4)v28;
    v19.n128_u64[0] = (unint64_t)sub_22653DCF4(a1, *(unsigned __int8 *)(v6 + 16), v10, v11, v12, v13, v14, v15, v31);
    if ((v22 & 1) == 0)
    {
      v19.n128_u64[0] = v20;
      *(int8x8_t *)&v19.n128_i8[8] = v21;
LABEL_10:
      v29 = v19;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v17, a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v8, v19);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v30 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  sub_226522B40(1, (uint64_t)v17, isUniquelyReferenced_nonNull_native, v29);
  *(_QWORD *)(v6 + 32) = v30;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  swift_endAccess();
  return 1;
}

uint64_t sub_22643D19C(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  simd_float4 *v31;
  int v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char v35;
  simd_float4 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  unsigned __int8 v50;
  _QWORD *v51;
  simd_float4 *v52;
  uint64_t result;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  int64_t v67;
  uint64_t *v68;
  simd_float4 v69;
  _QWORD *v70;

  v61 = a4;
  v60 = a3;
  v59 = a2;
  v58 = a1;
  v5 = sub_22655C140();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v54 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v54 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v54 - v12;
  swift_beginAccess();
  v14 = *(_QWORD *)(v4 + 24);
  v15 = *(_QWORD *)(v14 + 64);
  v62 = v4;
  v63 = v14 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  swift_bridgeObjectRetain();
  v68 = (uint64_t *)(v4 + 32);
  swift_beginAccess();
  v19 = 0;
  v64 = (unint64_t)(v16 + 63) >> 6;
  v57 = v6;
  v56 = v13;
  v55 = v14;
  while (1)
  {
    if (v18)
    {
      v66 = (v18 - 1) & v18;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      v22 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_42;
      if (v22 >= v64)
        return swift_release();
      v23 = *(_QWORD *)(v63 + 8 * v22);
      ++v19;
      if (!v23)
      {
        v19 = v22 + 1;
        if (v22 + 1 >= v64)
          return swift_release();
        v23 = *(_QWORD *)(v63 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 2;
          if (v22 + 2 >= v64)
            return swift_release();
          v23 = *(_QWORD *)(v63 + 8 * v19);
          if (!v23)
          {
            v19 = v22 + 3;
            if (v22 + 3 >= v64)
              return swift_release();
            v23 = *(_QWORD *)(v63 + 8 * v19);
            if (!v23)
            {
              v24 = v22 + 4;
              if (v24 >= v64)
                return swift_release();
              v23 = *(_QWORD *)(v63 + 8 * v24);
              if (!v23)
              {
                while (1)
                {
                  v19 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_43;
                  if (v19 >= v64)
                    return swift_release();
                  v23 = *(_QWORD *)(v63 + 8 * v19);
                  ++v24;
                  if (v23)
                    goto LABEL_24;
                }
              }
              v19 = v24;
            }
          }
        }
      }
LABEL_24:
      v66 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v19 << 6);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v21);
    v26 = v25 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v65(v13, v25 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v5);
    v27 = *v68;
    v28 = *(_QWORD *)(*v68 + 16);
    swift_retain();
    v69 = 0u;
    v67 = v19;
    if (!v28)
      goto LABEL_29;
    swift_bridgeObjectRetain();
    v29 = sub_226534858((uint64_t)v13);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_29:
      v32 = 2;
      goto LABEL_30;
    }
    v31 = (simd_float4 *)(*(_QWORD *)(v27 + 56) + 32 * v29);
    v69 = *v31;
    v32 = v31[1].u8[0];
    swift_bridgeObjectRelease();
LABEL_30:
    v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v33(v13, v5);
    if (v32 != 2 && (v32 & 1) != 0)
      goto LABEL_6;
    v34 = v62;
    v35 = sub_22643CFD8(v25, v58, v59, v60, v61);
    v69 = v36;
    v37 = v5;
    v38 = v35;
    v39 = v37;
    ((void (*)(char *, uint64_t))v65)(v10, v26);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70 = *(_QWORD **)(v34 + 32);
    v41 = v70;
    *(_QWORD *)(v34 + 32) = 0x8000000000000000;
    v43 = sub_226534858((uint64_t)v10);
    v44 = v41[2];
    v45 = (v42 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
      break;
    v47 = v42;
    if (v41[3] >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_2265486DC();
    }
    else
    {
      sub_226542754(v46, isUniquelyReferenced_nonNull_native);
      v48 = sub_226534858((uint64_t)v10);
      if ((v47 & 1) != (v49 & 1))
        goto LABEL_44;
      v43 = v48;
    }
    v50 = v38 & 1;
    v51 = v70;
    if ((v47 & 1) != 0)
    {
      v52 = (simd_float4 *)(v70[7] + 32 * v43);
      *v52 = v69;
      v52[1].i8[0] = v50;
      v5 = v39;
    }
    else
    {
      v20 = (uint64_t)v54;
      v5 = v39;
      v65(v54, (uint64_t)v10, v39);
      sub_226523D10(v43, v20, v50, v51, (__n128)v69);
    }
    *v68 = (uint64_t)v51;
    swift_bridgeObjectRelease();
    v33(v10, v5);
    swift_endAccess();
    v6 = v57;
    v13 = v56;
    v14 = v55;
LABEL_6:
    sub_226443F78(v69);
    swift_release();
    v18 = v66;
    v19 = v67;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

unint64_t sub_22643D680()
{
  unint64_t result;

  result = qword_255843DE0;
  if (!qword_255843DE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255843DE0);
  }
  return result;
}

unint64_t sub_22643D6BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255840820;
  if (!qword_255840820)
  {
    v1 = sub_22655C140();
    result = MEMORY[0x22769A794](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_255840820);
  }
  return result;
}

uint64_t sub_22643D704(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22643D748(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22643D784(uint64_t *a1)
{
  return sub_22643B540(a1) & 1;
}

uint64_t sub_22643D7A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22643D7E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22643D820()
{
  return sub_22643D860() & 1;
}

uint64_t sub_22643D840()
{
  return sub_22643D860() & 1;
}

uint64_t sub_22643D860()
{
  type metadata accessor for CapturedRoom.Surface(0);
  return sub_22655C104() & 1;
}

uint64_t sub_22643D8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float32x2_t v37;
  float32x2_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  *(double *)&v45 = a4;
  v41 = a1;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840958);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (float *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v41 - v21;
  sub_22643D7A0(a2, (uint64_t)v15, (uint64_t *)&unk_255848090);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v23(v15, 1, v16) == 1)
  {
    sub_22643D7E4((uint64_t)v15, (uint64_t *)&unk_255848090);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, 1, 1, v16);
  }
  else
  {
    sub_22643F6AC((uint64_t)v15, (uint64_t)v22, type metadata accessor for CapturedRoom.Surface.Curve);
    sub_22643D7A0(v41, (uint64_t)v12, (uint64_t *)&unk_255848090);
    if (v23(v12, 1, v16) == 1)
    {
      sub_22643D7E4((uint64_t)v12, (uint64_t *)&unk_255848090);
      v25 = &v22[*(int *)(v16 + 24)];
      sub_22643E258((uint64_t)v9);
      v26 = *(_QWORD *)v22;
      v27 = *((_DWORD *)v22 + 2);
      v29 = v42;
      v28 = v43;
      v30 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v43, v25, v44);
      sub_22643D748((uint64_t)v22, type metadata accessor for CapturedRoom.Surface.Curve);
      *(_QWORD *)a3 = v26;
      *(_DWORD *)(a3 + 8) = v27;
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
      v31(a3 + *(int *)(v16 + 24), v28, v30);
      v32 = a3 + *(int *)(v16 + 28);
      v33 = v9;
      v34 = v30;
    }
    else
    {
      sub_22643F6AC((uint64_t)v12, (uint64_t)v19, type metadata accessor for CapturedRoom.Surface.Curve);
      v35 = v19[2] + (float)((float)(*((float *)v22 + 2) - v19[2]) * *(float *)&v45);
      sub_22643E258((uint64_t)v9);
      v36 = v43;
      sub_22643E258(v43);
      v37 = *(float32x2_t *)v19;
      sub_22643D748((uint64_t)v19, type metadata accessor for CapturedRoom.Surface.Curve);
      v38 = *(float32x2_t *)v22;
      sub_22643D748((uint64_t)v22, type metadata accessor for CapturedRoom.Surface.Curve);
      *(float32x2_t *)a3 = vadd_f32(v37, vmul_n_f32(vsub_f32(v38, v37), *(float *)&v45));
      *(float *)(a3 + 8) = v35;
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
      v39 = v9;
      v40 = v44;
      v31(a3 + *(int *)(v16 + 24), (uint64_t)v39, v44);
      v32 = a3 + *(int *)(v16 + 28);
      v33 = (char *)v36;
      v34 = v40;
    }
    v31(v32, (uint64_t)v33, v34);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a3, 0, 1, v16);
  }
}

uint64_t sub_22643DC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  __int32 v40;
  float32x2_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  float32x2_t v45;
  float32x2_t v46;
  __int32 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t *v53;
  BOOL v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x2_t *v68;
  uint64_t v69;
  char *v70;
  float32x2_t *v71;
  float32x2_t *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;

  *(double *)&v76 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v67 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v67 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v67 - v17;
  v19 = type metadata accessor for ScanItemStrut();
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v67 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v67 - v25;
  MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8]((char *)&v67 - v28);
  if (fabsf(v34 + -1.0) < 0.00000011921)
    return sub_22643D7A0(a2, a3, &qword_255840818);
  v71 = (float32x2_t *)((char *)&v67 - v30);
  v72 = (float32x2_t *)v29;
  *(_QWORD *)&v73 = v12;
  v68 = (float32x2_t *)v32;
  v69 = v33;
  v70 = v9;
  v74 = a3;
  v75 = v31;
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v36((char *)a1, 1, v19) == 1)
  {
    sub_22643D7A0(a2, (uint64_t)v18, &qword_255840818);
    if (v36(v18, 1, v19) != 1)
    {
      sub_22643F6AC((uint64_t)v18, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
      v73 = *(_OWORD *)v26;
      v45 = *(float32x2_t *)(v26 + 8);
      v46 = *(float32x2_t *)(v26 + 16);
      v47 = *((_DWORD *)v26 + 6);
      v37 = v71;
      v48 = (char *)v71 + *(int *)(v19 + 44);
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
      *(_OWORD *)v37->f32 = v73;
      v37[2] = v46;
      v37[3].i32[0] = v47;
      v37[4] = v45;
      v37[5] = v46;
      v37[6].i32[0] = v47;
      v41 = v72;
      sub_22643F6AC((uint64_t)v26, (uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
      v44 = v74;
      goto LABEL_19;
    }
    sub_22643D7E4((uint64_t)v18, &qword_255840818);
  }
  sub_22643D7A0(a1, (uint64_t)v15, &qword_255840818);
  if (v36(v15, 1, v19) == 1)
  {
    sub_22643D7E4((uint64_t)v15, &qword_255840818);
    goto LABEL_12;
  }
  sub_22643F6AC((uint64_t)v15, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  if (v36((char *)a2, 1, v19) == 1)
  {
    v37 = v71;
    sub_22643F668((uint64_t)v23, (uint64_t)v71);
    v73 = *(_OWORD *)v23;
    v38 = *(float32x2_t *)(v23 + 8);
    v39 = *(float32x2_t *)(v23 + 16);
    v40 = *((_DWORD *)v23 + 6);
    sub_22643D748((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    v41 = v72;
    v42 = (char *)v72 + *(int *)(v19 + 44);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
    *(_OWORD *)v41->f32 = v73;
    v41[2] = v39;
    v41[3].i32[0] = v40;
    v41[4] = v38;
    v41[5] = v39;
    v41[6].i32[0] = v40;
    v44 = v74;
LABEL_19:
    v56 = vadd_f32(*v37, vmul_n_f32(vsub_f32(*v41, *v37), *(float *)&v76));
    v57 = sub_22643F580(v37[1], v41[1], *(float *)&v76);
    v58 = sub_22643F580(v37[2], v41[2], *(float *)&v76);
    v59 = v37[3].f32[0] + (float)((float)(v41[3].f32[0] - v37[3].f32[0]) * *(float *)&v76);
    v60 = sub_22643F580(v37[4], v41[4], *(float *)&v76);
    v61 = sub_22643F580(v37[5], v41[5], *(float *)&v76);
    v62 = v37[6].f32[0];
    sub_22643D748((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    v63 = v41[6].f32[0];
    sub_22643D748((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    v64 = v62 + (float)((float)(v63 - v62) * *(float *)&v76);
    v65 = v44 + *(int *)(v19 + 44);
    v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
    *(float32x2_t *)v44 = v56;
    *(float32x2_t *)(v44 + 8) = v57;
    *(float32x2_t *)(v44 + 16) = v58;
    *(float *)(v44 + 24) = v59;
    *(float32x2_t *)(v44 + 32) = v60;
    *(float32x2_t *)(v44 + 40) = v61;
    *(float *)(v44 + 48) = v64;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v44, 0, 1, v19);
  }
  sub_22643D748((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
LABEL_12:
  v50 = v73;
  sub_22643D7A0(a1, v73, &qword_255840818);
  if (v36((char *)v50, 1, v19) == 1)
  {
LABEL_15:
    v52 = v74;
    sub_22643D7E4(v50, &qword_255840818);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v52, 1, 1, v19);
  }
  v51 = v69;
  sub_22643F6AC(v50, v69, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  v50 = (uint64_t)v70;
  sub_22643D7A0(a2, (uint64_t)v70, &qword_255840818);
  if (v36((char *)v50, 1, v19) == 1)
  {
    sub_22643D748(v51, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    goto LABEL_15;
  }
  v53 = v68;
  sub_22643F6AC(v50, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  v54 = sub_22644FC1C(v53, 0.0001);
  v44 = v74;
  if (!v54)
  {
    v37 = v71;
    sub_22643F6AC(v51, (uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    v55 = (uint64_t)v53;
    v41 = v72;
    sub_22643F6AC(v55, (uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    goto LABEL_19;
  }
  sub_22643D748(v51, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643F6AC((uint64_t)v53, v44, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v44, 0, 1, v19);
}

uint64_t sub_22643E258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840958);
  v20 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_22655CB84();
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22655BDC8();
  v7 = (void *)sub_22655BDB0();
  v8 = (void *)sub_22655BDB0();
  sub_22643F548(0, (unint64_t *)&qword_255848160);
  v9 = sub_22655D118();

  if ((v9 & 1) != 0)
  {
    sub_22655BDC8();
  }
  else
  {
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v11 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v12 = objc_msgSend(v11, sel_bundleIdentifier);

    if (v12)
    {
      sub_22655CD88();

    }
    sub_22643F548(0, (unint64_t *)&qword_255843DE0);
    sub_22655D124();
    sub_22655CB90();
    v13 = sub_22655CB6C();
    v14 = sub_22655CFF8();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_226423000, v13, v14, "startAngle unit is different than endAngle unit", v15, 2u);
      MEMORY[0x22769A884](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
    v16 = (void *)sub_22655BDB0();
    sub_22655BDD4();

    sub_22655BDC8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  }
  sub_22655BDB0();
  return sub_22655BDBC();
}

unint64_t sub_22643E56C(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t ObjCClassFromMetadata;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  unint64_t v36;
  double v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  unint64_t result;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  int v102;
  _QWORD *v103;
  char v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  int v111;

  v6 = sub_22655CB84();
  v98 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v89 - v10;
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v89 - v16;
  if (!*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a2 + 16))
  {
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v22 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v23 = objc_msgSend(v22, sel_bundleIdentifier);

    if (v23)
    {
      sub_22655CD88();

    }
    sub_22643F548(0, (unint64_t *)&qword_255843DE0);
    sub_22655D124();
    sub_22655CB90();
    v24 = sub_22655CB6C();
    v25 = sub_22655CFF8();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_226423000, v24, v25, "Edge is empty", v26, 2u);
      MEMORY[0x22769A884](v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v98 + 8))(v8, v6);
    return sub_2265249F0(MEMORY[0x24BEE4AF8]);
  }
  if (fabsf(a3 + -1.0) < 0.0001)
  {
    type metadata accessor for Constants();
    v18 = swift_getObjCClassFromMetadata();
    v19 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v18);
    v20 = objc_msgSend(v19, sel_bundleIdentifier);

    if (v20)
    {
      sub_22655CD88();

    }
    sub_22643F548(0, (unint64_t *)&qword_255843DE0);
    sub_22655D124();
    sub_22655CB90();
    v85 = sub_22655CB6C();
    v86 = sub_22655CFF8();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v87 = 0;
      _os_log_impl(&dword_226423000, v85, v86, "Should not interpolate edges with a 1.0 percentage", v87, 2u);
      MEMORY[0x22769A884](v87, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v98 + 8))(v17, v6);
    swift_bridgeObjectRetain();
    return a2;
  }
  v90 = v14;
  v27 = 0;
  v96 = MEMORY[0x24BEE4B00];
  v93 = "nBorder";
  *(_QWORD *)&v15 = 136315138;
  v95 = v15;
  v94 = MEMORY[0x24BEE4AD8] + 8;
  v28 = v98;
  v97 = a2;
  v92 = v6;
  while (1)
  {
    v29 = byte_24EDDE9B8[v27 + 32];
    if (!*(_QWORD *)(a1 + 16) || (v30 = sub_226534A0C(byte_24EDDE9B8[v27 + 32]), (v31 & 1) == 0))
    {
      type metadata accessor for Constants();
      v55 = swift_getObjCClassFromMetadata();
      v56 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v55);
      v57 = objc_msgSend(v56, sel_bundleIdentifier);

      if (v57)
      {
        sub_22655CD88();

      }
      sub_22643F548(0, (unint64_t *)&qword_255843DE0);
      sub_22655D124();
      sub_22655CB90();
      v58 = sub_22655CB6C();
      v59 = sub_22655CFF8();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc();
        v61 = swift_slowAlloc();
        v107 = v61;
        *(_DWORD *)v60 = v95;
        LOBYTE(v103) = v29;
        v62 = sub_22655CDDC();
        *(_QWORD *)(v60 + 4) = sub_2264F4EC4(v62, v63, &v107);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_226423000, v58, v59, "Missing edge on %s side", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        v64 = v61;
        a2 = v97;
        MEMORY[0x22769A884](v64, -1, -1);
        MEMORY[0x22769A884](v60, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v6);
      goto LABEL_13;
    }
    if (!*(_QWORD *)(a2 + 16)
      || (v32 = *(_QWORD *)(a1 + 56) + 40 * v30,
          v33 = *(_QWORD *)v32,
          v34 = *(_BYTE *)(v32 + 8),
          v91 = *(_OWORD *)(v32 + 16),
          v35 = *(_DWORD *)(v32 + 32),
          v36 = sub_226534A0C(v29),
          (v38 & 1) == 0))
    {
      type metadata accessor for Constants();
      v65 = swift_getObjCClassFromMetadata();
      v66 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v65);
      v67 = objc_msgSend(v66, sel_bundleIdentifier);

      if (v67)
      {
        sub_22655CD88();

      }
      v28 = v98;
      sub_22643F548(0, (unint64_t *)&qword_255843DE0);
      sub_22655D124();
      v68 = v90;
      sub_22655CB90();
      v69 = sub_22655CB6C();
      v70 = sub_22655CFF8();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc();
        v72 = swift_slowAlloc();
        v107 = v72;
        *(_DWORD *)v71 = v95;
        LOBYTE(v103) = v29;
        v73 = sub_22655CDDC();
        *(_QWORD *)(v71 + 4) = sub_2264F4EC4(v73, v74, &v107);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_226423000, v69, v70, "Missing edge on %s side", (uint8_t *)v71, 0xCu);
        swift_arrayDestroy();
        v75 = v72;
        a2 = v97;
        MEMORY[0x22769A884](v75, -1, -1);
        MEMORY[0x22769A884](v71, -1, -1);
      }

      v76 = v68;
      v6 = v92;
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v76, v92);
      goto LABEL_13;
    }
    v39 = *(_QWORD *)(a2 + 56) + 40 * v36;
    v40 = *(_QWORD *)v39;
    v41 = *(_BYTE *)(v39 + 8);
    LODWORD(v37) = *(_DWORD *)(v39 + 32);
    v103 = (_QWORD *)v33;
    v104 = v34;
    v105 = v91;
    v106 = v35;
    v99 = v40;
    v100 = v41;
    v101 = *(_OWORD *)(v39 + 16);
    v102 = LODWORD(v37);
    *(float *)&v37 = a3;
    sub_22643EF8C((uint64_t *)&v103, &v99, (uint64_t)&v107, v37);
    v42 = v107;
    v43 = v108;
    v89 = v109;
    *(_QWORD *)&v91 = v110;
    v44 = v111;
    v45 = v96;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v103 = (_QWORD *)v45;
    v48 = sub_226534A0C(v29);
    v49 = *(_QWORD *)(v45 + 16);
    v50 = (v47 & 1) == 0;
    v51 = v49 + v50;
    if (__OFADD__(v49, v50))
      break;
    v52 = v47;
    if (*(_QWORD *)(v45 + 24) >= v51)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_226548ABC();
    }
    else
    {
      sub_226542DC4(v51, isUniquelyReferenced_nonNull_native);
      v53 = sub_226534A0C(v29);
      if ((v52 & 1) != (v54 & 1))
        goto LABEL_44;
      v48 = v53;
    }
    a2 = v97;
    v77 = v103;
    v96 = (uint64_t)v103;
    if ((v52 & 1) != 0)
    {
      v78 = v103[7] + 40 * v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v78 = v42;
      *(_BYTE *)(v78 + 8) = v43;
      v79 = v91;
      *(_QWORD *)(v78 + 16) = v89;
      *(_QWORD *)(v78 + 24) = v79;
      *(_DWORD *)(v78 + 32) = v44;
    }
    else
    {
      v103[(v48 >> 6) + 8] |= 1 << v48;
      *(_BYTE *)(v77[6] + v48) = v29;
      v80 = v77[7] + 40 * v48;
      *(_QWORD *)v80 = v42;
      *(_BYTE *)(v80 + 8) = v43;
      v81 = v91;
      *(_QWORD *)(v80 + 16) = v89;
      *(_QWORD *)(v80 + 24) = v81;
      *(_DWORD *)(v80 + 32) = v44;
      v82 = v77[2];
      v83 = __OFADD__(v82, 1);
      v84 = v82 + 1;
      if (v83)
        goto LABEL_43;
      v77[2] = v84;
    }
    swift_bridgeObjectRelease();
    v6 = v92;
    v28 = v98;
LABEL_13:
    if (++v27 == 4)
      return v96;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

uint64_t sub_22643EF8C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t v23;
  float v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t ObjCClassFromMetadata;
  id v29;
  id v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  *(double *)&v57 = a4;
  v7 = sub_22655CB84();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = *a2;
  v13 = *(_QWORD *)(*a1 + 16);
  if (v13 == *(_QWORD *)(*a2 + 16))
  {
    v14 = *((_BYTE *)a1 + 8);
    if (v13)
    {
      swift_bridgeObjectRetain();
      v15 = sub_226486AE0(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v16 = 0;
      v17 = v12 + 32;
      v18 = v15[2];
      v19 = *(float *)&v57;
      do
      {
        v20 = *(float32x4_t *)(v11 + 16 * v16 + 32);
        v21 = *(float32x4_t *)(v17 + 16 * v16);
        v22 = v15[3];
        if (v18 >= v22 >> 1)
        {
          v55 = *(float32x4_t *)(v17 + 16 * v16);
          v56 = v20;
          v25 = sub_226486AE0((_QWORD *)(v22 > 1), v18 + 1, 1, v15);
          v21 = v55;
          v20 = v56;
          v19 = *(float *)&v57;
          v15 = v25;
        }
        v23 = vsubq_f32(v21, v20);
        v24 = vmuls_lane_f32(v19, v23, 2);
        *(float32x2_t *)v23.f32 = vadd_f32(*(float32x2_t *)v20.f32, vmul_n_f32(*(float32x2_t *)v23.f32, v19));
        v23.f32[2] = v20.f32[2] + v24;
        v23.i32[3] = 0;
        ++v16;
        v15[2] = v18 + 1;
        *(float32x4_t *)&v15[2 * v18++ + 4] = v23;
      }
      while (v13 != v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    LOBYTE(v59) = v14;
    return sub_2264B2FD8(v15, (char *)&v59, a3);
  }
  else
  {
    v56.i64[0] = a1[2];
    v54 = a1[3];
    v55.i32[0] = *((unsigned __int8 *)a2 + 8);
    v26 = a2[3];
    *(_QWORD *)&v57 = a2[2];
    v27 = *((_DWORD *)a2 + 8);
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v29 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v30 = objc_msgSend(v29, sel_bundleIdentifier);

    if (v30)
    {
      sub_22655CD88();

    }
    sub_22643F548(0, (unint64_t *)&qword_255843DE0);
    sub_22655D124();
    sub_22655CB90();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v32 = v57;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v53 = v10;
    v33 = sub_22655CB6C();
    v34 = sub_22655CFF8();
    v52 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v50 = v8;
      v36 = v35;
      v48 = swift_slowAlloc();
      v59 = v48;
      *(_DWORD *)v36 = 136315394;
      v49 = v7;
      swift_bridgeObjectRetain();
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_255849BA0);
      v38 = MEMORY[0x2276995B8](v11, v37);
      v51 = a3;
      v39 = v26;
      v41 = v40;
      swift_bridgeObjectRelease();
      v58 = sub_2264F4EC4(v38, v41, &v59);
      sub_22655D154();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v26 = v39;
      a3 = v51;
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      v42 = swift_bridgeObjectRetain();
      v43 = MEMORY[0x2276995B8](v42, v37);
      v45 = v44;
      swift_bridgeObjectRelease();
      v58 = sub_2264F4EC4(v43, v45, &v59);
      v32 = v57;
      sub_22655D154();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_226423000, v33, (os_log_type_t)v52, "\"from\" and \"to\" edges for interpolation have a different number of points (from: %s, to: %s)", (uint8_t *)v36, 0x16u);
      v46 = v48;
      swift_arrayDestroy();
      MEMORY[0x22769A884](v46, -1, -1);
      MEMORY[0x22769A884](v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v49);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v53, v7);
    }
    *(_QWORD *)a3 = v12;
    *(_BYTE *)(a3 + 8) = v55.i8[0];
    *(_QWORD *)(a3 + 16) = v32;
    *(_QWORD *)(a3 + 24) = v26;
    *(_DWORD *)(a3 + 32) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_22643F4F0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Easing()
{
  return objc_opt_self();
}

float32x2_t sub_22643F524(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

uint64_t sub_22643F548(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

float32x2_t sub_22643F580(float32x2_t a1, float32x2_t a2, float a3)
{
  float32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v18;

  v4 = a1;
  v5 = vmul_f32(a1, a2);
  v6 = (int32x2_t)vmul_f32(v4, v4);
  v7 = (int32x2_t)vmul_f32(a2, a2);
  v8 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v6, v7), (float32x2_t)vzip2_s32(v6, v7)));
  v9 = vdiv_f32(vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)), vmul_lane_f32(v8, v8, 1)).f32[0];
  if (v9 < 0.0)
    v9 = 0.0;
  v10 = acosf(fminf(v9, 1.0));
  v11 = sinf(v10);
  if (fabsf(v11) >= 0.00000011921)
  {
    v13 = sinf((float)(1.0 - a3) * v10);
    v14 = v10 * a3;
    v18 = v13 / v11;
    v15 = sinf(v14) / v11;
    v12 = vmul_n_f32(v4, v18);
    v4 = vmul_n_f32(a2, v15);
  }
  else
  {
    v12 = vmul_n_f32(vsub_f32(a2, v4), a3);
  }
  return vadd_f32(v12, v4);
}

uint64_t sub_22643F668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22643F6AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22643F6F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_22643F6F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_22643F700(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_22643F708(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_22643F710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_22643F718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

_DWORD *sub_22643F730@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_22643F744(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_22643F758(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_22643F76C(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

void sub_22643F780(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_22643F78C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_22643F7A0()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for WallPerimeterManager();
  v0 = swift_allocObject();
  type metadata accessor for HullUtility();
  result = swift_allocObject();
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  qword_25585AC88 = v0;
  return result;
}

void sub_22643F7F4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v30 = a2;
  v33 = sub_22655C140();
  v3 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  v6 = *a1 & 0xC000000000000001;
  if (v6)
    v7 = sub_22655D274();
  else
    v7 = *(_QWORD *)(v5 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (!v7)
  {
LABEL_23:
    *v30 = v8;
    return;
  }
  v39 = MEMORY[0x24BEE4AF8];
  sub_2264C7AA8(0, v7 & ~(v7 >> 63), 0);
  if (v6)
  {
    v9 = sub_22655D238();
    v11 = 1;
  }
  else
  {
    v9 = sub_2264D6150(v5);
    v11 = v12 & 1;
  }
  v36 = v9;
  v37 = v10;
  v38 = v11;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v13 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v5 < 0)
      v13 = v5;
    v32 = v13;
    v31 = v3;
    do
    {
      while (1)
      {
        v24 = sub_2264D5EC4(v36, v37, v38, v5);
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v34, v24 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid, v33);
        swift_release();
        v25 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2264C7AA8(0, *(_QWORD *)(v25 + 16) + 1, 1);
          v25 = v39;
        }
        v27 = *(_QWORD *)(v25 + 16);
        v26 = *(_QWORD *)(v25 + 24);
        if (v27 >= v26 >> 1)
        {
          sub_2264C7AA8(v26 > 1, v27 + 1, 1);
          v25 = v39;
        }
        *(_QWORD *)(v25 + 16) = v27 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v25+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v27, v34, v33);
        v39 = v25;
        if (v6)
          break;
        v14 = v36;
        v15 = v37;
        v16 = v38;
        v17 = sub_2264D5DE0(v36, v37, v38, v5);
        v18 = v5;
        v20 = v19;
        v22 = v21;
        sub_226440204(v14, v15, v16);
        v36 = v17;
        v37 = v20;
        v5 = v18;
        v6 = 0;
        v23 = v22 & 1;
        v3 = v31;
        v38 = v23;
        if (!--v7)
          goto LABEL_22;
      }
      if ((v38 & 1) == 0)
        goto LABEL_25;
      if (sub_22655D250())
        swift_isUniquelyReferenced_nonNull_native();
      __swift_instantiateConcreteTypeFromMangledName(&qword_255840A80);
      v28 = (void (*)(_BYTE *, _QWORD))sub_22655CFA4();
      sub_22655D2B0();
      v28(v35, 0);
      --v7;
    }
    while (v7);
LABEL_22:
    sub_226440204(v36, v37, v38);
    v8 = v39;
    goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_22643FAD4()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WallPerimeterManager()
{
  return objc_opt_self();
}

uint64_t sub_22643FB18(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  __int128 v20;
  float v21;
  int v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _OWORD *v32;
  char v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char v42;
  const float *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  uint64_t inited;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  objc_class *v54;
  char *v55;
  id v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  _OWORD *v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  _OWORD *v69;
  uint64_t v70;
  float *v71;
  objc_super v72;
  unint64_t v73;
  uint64_t v74;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_22655C140();
  v70 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for CapturedRoom.Surface(0);
  v13 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v71 = (float *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = MEMORY[0x24BEE4AF8];
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v16 = result;
  v17 = *(_QWORD *)(result + 16);
  if (v17)
  {
    v18 = 0;
    v66 = result + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v65 = (a2 >> 1) & 1;
    v57 = xmmword_22655FA10;
    v67 = xmmword_22655FA20;
    v61 = a2;
    v60 = v13;
    v59 = result;
    v58 = v17;
    while (v18 < *(_QWORD *)(v16 + 16))
    {
      v19 = v71;
      sub_2264400FC(v66 + *(_QWORD *)(v13 + 72) * v18, (uint64_t)v71);
      v20 = *((_OWORD *)v19 + 1);
      v21 = COERCE_FLOAT(*((_QWORD *)v19 + 3));
      if (v21 <= 0.0)
        v22 = 1;
      else
        v22 = v65;
      if (v22 == 1 && (v21 != 0.0) | a2 & 1)
      {
        v64 = v18;
        v23 = vmuls_lane_f32(-0.5, *(float32x2_t *)&v20, 1);
        v24 = v71;
        v25 = v23 * v71[12];
        v26 = v23 * v71[13];
        v27 = v23 * v71[14];
        v28 = 0.5 * *(float *)&v20;
        v29 = v28 * v71[8];
        v30 = v28 * v71[9];
        v31 = v28 * v71[10];
        __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
        v32 = (_OWORD *)swift_allocObject();
        v33 = 0;
        v34 = 0;
        v32[1] = v57;
        v35 = v24[20];
        v36 = v24[21];
        v37 = v24[22];
        HIDWORD(v38) = 0;
        *(float *)&v38 = v25 + (float)(v35 - v29);
        *((float *)&v38 + 1) = v26 + (float)(v36 - v30);
        *((float *)&v38 + 2) = v27 + (float)(v37 - v31);
        v32[2] = v38;
        v69 = v32 + 2;
        HIDWORD(v39) = 0;
        *(float *)&v39 = v25 + (float)(v29 + v35);
        *((float *)&v39 + 1) = v26 + (float)(v30 + v36);
        *((float *)&v39 + 2) = v27 + (float)(v31 + v37);
        v63 = v32;
        v32[3] = v39;
        v68 = (char *)v24 + *(int *)(v62 + 44);
        v40 = (uint64_t)v24 + *(int *)(v62 + 52);
        v41 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
        while (1)
        {
          v42 = v33;
          v43 = (const float *)&v69[v34];
          v44 = *(_OWORD *)vld2_f32(v43).val;
          v41(v12, v68, v10);
          sub_226440140(v40, (uint64_t)v9);
          v45 = type metadata accessor for CapturedRoom.Surface.Curve(0);
          v46 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v9, 1, v45) != 1;
          sub_226440188((uint64_t)v9);
          v47 = v71[6] > 0.0;
          type metadata accessor for HullPointUUID();
          v48 = swift_allocObject();
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v48 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid, v12, v10);
          *(_BYTE *)(v48 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type) = v46;
          *(_BYTE *)(v48 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_hasThickness) = v47;
          __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v67;
          *(_QWORD *)(inited + 32) = v48;
          v73 = inited;
          sub_22655CEE4();
          v50 = v73;
          if (v73 >> 62)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            v53 = sub_22655D400();
            swift_bridgeObjectRelease();
            if (!v53)
            {
LABEL_15:
              v52 = MEMORY[0x24BEE4B08];
              goto LABEL_16;
            }
          }
          else
          {
            v51 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_retain();
            if (!v51)
              goto LABEL_15;
          }
          v52 = sub_2264F5514(v50);
LABEL_16:
          swift_bridgeObjectRelease();
          v54 = (objc_class *)type metadata accessor for HullPoint();
          v55 = (char *)objc_allocWithZone(v54);
          *(_QWORD *)&v55[OBJC_IVAR____TtC8RoomPlan9HullPoint_position] = v44;
          *(_QWORD *)&v55[OBJC_IVAR____TtC8RoomPlan9HullPoint_uuids] = v52;
          v72.receiver = v55;
          v72.super_class = v54;
          v56 = objc_msgSendSuper2(&v72, sel_init);
          MEMORY[0x227699594]();
          if (*(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_22655CEF0();
          sub_22655CF08();
          sub_22655CEE4();

          swift_release();
          v33 = 1;
          v34 = 1;
          if ((v42 & 1) != 0)
          {
            swift_setDeallocating();
            swift_deallocClassInstance();
            LOBYTE(a2) = v61;
            v13 = v60;
            v16 = v59;
            v17 = v58;
            v18 = v64;
            break;
          }
        }
      }
      ++v18;
      result = sub_2264401C8((uint64_t)v71);
      if (v18 == v17)
      {
        swift_bridgeObjectRelease();
        return v74;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_2264400BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_22643FB18(a1, 3u, a2, a3);
  v4 = sub_22652B734(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2264400FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_226440140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_226440188(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2264401C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_226440204(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_226440210()
{
  uint64_t v0;
  unint64_t v2;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v2 = 0;
    sub_22655D2EC();
    sub_22655CE24();
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    sub_22655CE24();
    sub_22655D544();
  }
  else
  {
    sub_22655D2EC();
    swift_bridgeObjectRelease();
    v2 = 0xD000000000000013;
    sub_22655CDDC();
  }
  sub_22655CE24();
  swift_bridgeObjectRelease();
  sub_22655CE24();
  return v2;
}

uint64_t (*sub_2264403B8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_226440400(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, simd_float4 a12, simd_float4 a13, __n128 a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  simd_float4 v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  simd_float4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  float32x2_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  void (*v104)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  unint64_t v112;
  int32x4_t v113;
  unsigned __int32 v114;
  int32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  __n128 v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  void *v134;
  uint64_t ObjCClassFromMetadata;
  id v136;
  id v137;
  char *v138;
  id v139;
  id v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  char v159;
  void (*v161)(uint64_t, uint64_t, uint64_t, void *);
  void (*v162)(uint64_t, uint64_t, uint64_t);
  void (*v163)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  int v168;
  __n128 v169;
  int v170;
  int v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  __n128 *v192;
  uint64_t v193;
  __n128 v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  simd_float4 v201;
  float32x4_t v202;
  simd_float4 v203;
  float32x4_t v204;
  uint64_t v205;
  simd_float4 v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210[5];
  simd_float4x4 v211;
  simd_float4x4 v212;
  simd_float4x4 v213;
  simd_float4x4 v214;

  v19 = v18;
  v170 = a8;
  v167 = a7;
  v172 = a6;
  v205 = a5;
  v168 = a4;
  v196 = a3;
  v169 = a14;
  v206 = a13;
  v201 = a12;
  v202 = a10;
  v203 = (simd_float4)a11;
  v194 = (__n128)a9;
  v199 = a2;
  v200 = a1;
  v204.i64[0] = a18;
  v197 = a17;
  v198 = a16;
  v171 = a15;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841208);
  MEMORY[0x24BDAC7A8](v20);
  v188 = (uint64_t)&v161 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v22);
  v187 = (uint64_t)&v161 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v182 = (uint64_t)&v161 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v181 = (uint64_t)&v161 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v28);
  v180 = (uint64_t)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v195 = (uint64_t)&v161 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v176 = (uint64_t)&v161 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v177 = (uint64_t)&v161 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v161 - v37);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  MEMORY[0x24BDAC7A8](v38);
  v192 = (__n128 *)((char *)&v161 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_22655C0E0();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v173 = (char *)&v161 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_22655CB84();
  v190 = *(_QWORD *)(v43 - 8);
  v191 = v43;
  MEMORY[0x24BDAC7A8](v43);
  v166 = (char *)&v161 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v165 = (char *)&v161 - v47;
  v174 = v41;
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v41 + 56);
  v48(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime, 1, 1, v40, v46);
  v179 = (void *)v40;
  v161 = (void (*)(uint64_t, uint64_t, uint64_t, void *))v48;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_fadeOutAnimationTime, 1, 1, v40);
  v49 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
  v50 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v175 = *(_QWORD *)(v50 - 8);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 56);
  v51(v49, 1, 1, v50);
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = xmmword_22655FA60;
  v51(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve, 1, 1, v50);
  v52 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  v53 = type metadata accessor for ScanItemStrut();
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v54(v52, 1, 1, v53);
  v54(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut, 1, 1, v53);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = 4;
  v55 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  v56 = type metadata accessor for AnimationGraph();
  v185 = *(_QWORD *)(v56 - 8);
  v186 = v56;
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v185 + 56);
  v162(v55, 1, 1);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = 4;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_floorExtensionFactor) = 1065982362;
  v57 = OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides) = 12;
  v58 = OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners) = 0;
  v51(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve, 1, 1, v50);
  v51(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve, 1, 1, v50);
  v54(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut, 1, 1, v53);
  v54(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut, 1, 1, v53);
  v59 = (_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions);
  *v59 = 0;
  v59[1] = 0;
  v193 = v50;
  v189 = v51;
  v51(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve, 1, 1, v50);
  v54(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut, 1, 1, v53);
  v163 = v54;
  v164 = v53;
  v54(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut, 1, 1, v53);
  v60 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  v61 = sub_22655C140();
  v183 = *(_QWORD *)(v61 - 8);
  v184 = v61;
  (*(void (**)(uint64_t, uint64_t))(v183 + 16))(v60, v200);
  sub_22643D7A0(v199, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t *)&unk_255849AC0);
  v62 = v168;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) = v196;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) = v62;
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color) = v169;
  *(_DWORD *)(v19 + v57) = v170 | 0xC;
  v63 = v204.i64[0];
  if (v204.i64[0])
    v64 = *(_DWORD *)(v204.i64[0] + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners);
  else
    v64 = 0;
  v65 = v64 | v171;
  v66 = v205;
  v67 = v172;
  if (v62 == 20)
  {
    v68 = (v65 >> 1) & 0x11 | (2 * v65) & 0x88;
    goto LABEL_8;
  }
  if (v62 == 18)
  {
    v68 = 16 * (v65 & 0xF);
LABEL_8:
    *(_DWORD *)(v19 + v58) = v68 | v65;
    goto LABEL_11;
  }
  *(_DWORD *)(v19 + v58) = v65;
  if (!v62)
  {
    *(float32x2_t *)v69.f32 = vmul_f32((float32x2_t)v194.n128_u64[0], (float32x2_t)vdup_n_s32(0x3F89999Au));
    v69.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.075, (float32x4_t)v194, 2));
    v194 = (__n128)v69;
  }
LABEL_11:
  v70 = v167;
  v71 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform;
  v72 = (float32x4_t)v203;
  *(float32x4_t *)v71 = v202;
  *(float32x4_t *)(v71 + 16) = v72;
  v73 = v206;
  *(simd_float4 *)(v71 + 32) = v201;
  *(simd_float4 *)(v71 + 48) = v73;
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions) = v194;
  sub_22643D7A0(v66, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t *)&unk_255848090);
  sub_22643D7A0(v198, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut, &qword_255840818);
  sub_22643D7A0(v197, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut, &qword_255840818);
  v74 = sub_22644516C(v70, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v75 = (uint64_t)v192;
  v76 = v179;
  v77 = v74;
  v78 = v205;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawScanItemEdges) = v77;
  swift_bridgeObjectRetain();
  v79 = v173;
  sub_22655C0C8();
  (*(void (**)(uint64_t, char *, void *))(v174 + 32))(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_bodyStartTime, v79, v76);
  if (v63)
  {
    v80 = v63 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
    swift_beginAccess();
    sub_22643D7A0(v80, v75, &qword_255841200);
  }
  else
  {
    v161(v75, 1, 1, v76);
  }
  v81 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
  swift_beginAccess();
  sub_226446510(v75, v81, &qword_255841200);
  swift_endAccess();
  if (v63)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = *(_OWORD *)(v63
                                                                                         + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
    v82 = *(__n128 *)(v63 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    v192 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    *v192 = v82;
    v83 = v63 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
    swift_beginAccess();
    v84 = v177;
    sub_22643D7A0(v83, v177, (uint64_t *)&unk_255848090);
    v85 = v193;
  }
  else
  {
    v86 = v206;
    v86.i32[3] = 0;
    *(simd_float4 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = v86;
    v192 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    *v192 = v194;
    v84 = v177;
    v85 = v193;
    v189(v177, 1, 1, v193);
  }
  v87 = (uint64_t)v178;
  v88 = v78;
  v89 = v176;
  sub_22643D7A0(v88, v176, (uint64_t *)&unk_255848090);
  v178 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v175 + 48);
  v90 = v178(v84, 1, v85);
  v179 = 0;
  if (v90 == 1)
  {
    sub_226446554(v89, v87, (uint64_t *)&unk_255848090);
    sub_22643D7E4(v84, (uint64_t *)&unk_255848090);
  }
  else
  {
    sub_22643D7E4(v89, (uint64_t *)&unk_255848090);
    sub_226446598(v84, v87);
    v189(v87, 0, 1, v85);
  }
  v91 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
  swift_beginAccess();
  sub_226446510(v87, v91, (uint64_t *)&unk_255848090);
  swift_endAccess();
  v92 = v204.i64[0];
  if (v204.i64[0])
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = *(_OWORD *)(v204.i64[0]
                                                                                            + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
    v93 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges;
    v94 = swift_bridgeObjectRetain();
  }
  else
  {
    v211.columns[0] = (simd_float4)v202;
    v211.columns[1] = v203;
    v211.columns[2] = v201;
    v211.columns[3] = v206;
    *(double *)&v95 = simd_quaternion(v211);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = v95;
    v94 = swift_bridgeObjectRetain();
    v93 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges;
  }
  *(_QWORD *)(v19 + v93) = v94;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationPosition) = *(_OWORD *)(v19
                                                                                                  + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationDimensions) = *v192;
  v96 = v195;
  sub_22643D7A0(v91, v195, (uint64_t *)&unk_255848090);
  v97 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve;
  swift_beginAccess();
  sub_226446510(v96, v97, (uint64_t *)&unk_255848090);
  swift_endAccess();
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationOrientation) = *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  v98 = (float32x2_t *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
  if (v92)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions) = *(_OWORD *)(v92
                                                                                          + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
    v99 = v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    swift_beginAccess();
    v100 = v99;
    v101 = v180;
    sub_22643D7A0(v100, v180, (uint64_t *)&unk_255848090);
    v102 = v182;
    v103 = (_QWORD *)&unk_25585A000;
  }
  else
  {
    *v98 = 0;
    v98[1] = 0;
    v101 = v180;
    v189(v180, 1, 1, v193);
    v102 = v182;
    v103 = &unk_25585A000;
  }
  v104 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v19
                                                                 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve);
  swift_beginAccess();
  v189 = v104;
  sub_226446510(v101, (uint64_t)v104, (uint64_t *)&unk_255848090);
  swift_endAccess();
  if (v92)
  {
    v105 = v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
    swift_beginAccess();
    v106 = v105;
    v107 = v181;
    sub_22643D7A0(v106, v181, &qword_255840818);
  }
  else
  {
    v107 = v181;
    v163(v181, 1, 1, v164);
  }
  v108 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  swift_beginAccess();
  v182 = v108;
  sub_226446510(v107, v108, &qword_255840818);
  swift_endAccess();
  if (v92)
  {
    v109 = v92 + v103[426];
    swift_beginAccess();
    sub_22643D7A0(v109, v102, &qword_255840818);
  }
  else
  {
    v163(v102, 1, 1, v164);
  }
  v110 = v19 + v103[426];
  swift_beginAccess();
  v181 = v110;
  sub_226446510(v102, v110, &qword_255840818);
  swift_endAccess();
  if (v92)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = *(_OWORD *)(v92
                                                                                        + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
    v111 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = *(_OWORD *)(v92
                                                                                           + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    v112 = *(_QWORD *)(v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = v112;
  }
  else
  {
    v113 = (int32x4_t)((__n128 (*)(uint64_t, uint64_t, uint64_t))v178)(v205, 1, v193);
    v113.i32[0] = v114;
    v115.i32[0] = 1;
    v116 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v113, v115), 0);
    v212.columns[3] = v206;
    v117 = (int8x16_t)v206;
    v117.i32[3] = 0;
    *(int8x16_t *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = vbicq_s8(v117, v116);
    v212.columns[0] = (simd_float4)v202;
    v212.columns[1] = v203;
    v212.columns[2] = v201;
    *(double *)&v118 = simd_quaternion(v212);
    v111 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = v118;
  }
  v119 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges) = v77;
  v120 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition) = *(_OWORD *)(v19
                                                                                             + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationOrientation) = *v111;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationDimensions) = *(_OWORD *)v98->f32;
  v121 = *(_QWORD *)(v19 + v119);
  v122 = *(_QWORD *)(v121 + 16);
  v123 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawScanItemEdges);
  v124 = *(_QWORD *)(v123 + 16);
  v193 = v120;
  if (v122)
  {
    v209 = v121;
    v125 = v205;
    v126 = v204.i64[0];
    if (v124)
    {
      v208 = (char *)v123;
      swift_bridgeObjectRetain();
LABEL_40:
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
    swift_bridgeObjectRetain();
    v131 = (char *)sub_226445800(v202, (float32x4_t)v203, (__n128)v206, (float32x2_t)v194.n128_u64[0]);
  }
  else
  {
    v125 = v205;
    v126 = v204.i64[0];
    if (v124)
    {
      *(double *)v127.i64 = MEMORY[0x227699714](*(__n128 *)(v19 + v120), *v111, (__n128)xmmword_22655FA70);
      v130 = sub_226445800(v127, v128, v129, *v98);
      v208 = (char *)v123;
      v209 = v130;
      goto LABEL_40;
    }
    v132 = MEMORY[0x24BEE4AF8];
    v209 = sub_2265249F0(MEMORY[0x24BEE4AF8]);
    v131 = (char *)sub_2265249F0(v132);
  }
  v208 = v131;
LABEL_44:
  v133 = &unk_25585A000;
  v134 = v179;
  sub_226445B80((uint64_t)&v209, &v208);
  if (v134)
  {
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v136 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v137 = objc_msgSend(v136, (SEL)0x1F28A7AC8);

    if (v137)
    {
      sub_22655CD88();

    }
    v138 = v166;
    sub_22643D680();
    sub_22655D124();
    sub_22655CB90();
    v139 = v134;
    v140 = v134;
    v141 = sub_22655CB6C();
    v142 = sub_22655CFF8();
    if (os_log_type_enabled(v141, v142))
    {
      v143 = (uint8_t *)swift_slowAlloc();
      v144 = swift_slowAlloc();
      v210[0] = v144;
      *(_DWORD *)v143 = 136315138;
      swift_getErrorValue();
      v145 = sub_22655D5B0();
      v207 = sub_2264F4EC4(v145, v146, v210);
      v125 = v205;
      sub_22655D154();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_226423000, v141, v142, "%s", v143, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22769A884](v144, -1, -1);
      v147 = v143;
      v133 = (_QWORD *)&unk_25585A000;
      MEMORY[0x22769A884](v147, -1, -1);

      (*(void (**)(char *, uint64_t))(v190 + 8))(v166, v191);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v190 + 8))(v138, v191);
    }
    v126 = v204.i64[0];
  }
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationScanItemEdges) = v209;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_finalAnimationScanItemEdges) = v208;
  v148 = v195;
  sub_22643D7A0((uint64_t)v189, v195, (uint64_t *)&unk_255848090);
  v149 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve;
  swift_beginAccess();
  sub_226446510(v148, v149, (uint64_t *)&unk_255848090);
  swift_endAccess();
  v150 = v187;
  sub_22643D7A0(v182, v187, &qword_255840818);
  v151 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut;
  swift_beginAccess();
  sub_226446510(v150, v151, &qword_255840818);
  swift_endAccess();
  sub_22643D7A0(v181, v150, &qword_255840818);
  v152 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut;
  swift_beginAccess();
  sub_226446510(v150, v152, &qword_255840818);
  swift_endAccess();
  if (v126)
  {
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = *(_BYTE *)(v126
                                                                                        + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory);
    v153 = v126 + v133[428];
    swift_beginAccess();
    v154 = v188;
    sub_22643D7A0(v153, v188, &qword_255841208);
    v155 = v186;
  }
  else
  {
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = 4;
    v154 = v188;
    v155 = v186;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v162)(v188, 1, 1, v186);
  }
  v156 = v19 + v133[428];
  swift_beginAccess();
  sub_226446510(v154, v156, &qword_255841208);
  swift_endAccess();
  v204 = *(float32x4_t *)(v19 + v193);
  v213.columns[0] = (simd_float4)v202;
  v213.columns[1] = v203;
  v213.columns[2] = v201;
  v213.columns[3] = v206;
  v214 = __invert_f4(v213);
  v157 = v196;
  v158 = vsubq_f32(vaddq_f32((float32x4_t)v214.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v214.columns[0], v204.f32[0]), (float32x4_t)v214.columns[1], *(float32x2_t *)v204.f32, 1), (float32x4_t)v214.columns[2], v204, 2)), vaddq_f32((float32x4_t)v214.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v214.columns[0], v206.f32[0]), (float32x4_t)v214.columns[1], *(float32x2_t *)v206.f32, 1),
               (float32x4_t)v214.columns[2],
               (float32x4_t)v206,
               2))).u64[0];
  if (v196 == 3)
  {
    if (*((float *)&v158 + 1) > 0.0)
      v157 = 0;
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v157;
    swift_beginAccess();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v156, 1, v155))
      sub_22648C8DC(*(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners), *v192);
  }
  else
  {
    if (*(float *)&v158 <= 0.0)
      v159 = 1;
    else
      v159 = 2;
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v159;
    swift_beginAccess();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v156, 1, v155))
      sub_22648CB7C(*(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides), *v192);
  }
  swift_endAccess();
  swift_release();
  sub_22643D7E4(v197, &qword_255840818);
  sub_22643D7E4(v198, &qword_255840818);
  sub_22643D7E4(v199, (uint64_t *)&unk_255849AC0);
  (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v200, v184);
  sub_22643D7E4(v125, (uint64_t *)&unk_255848090);
  return v19;
}

uint64_t sub_2264419FC(unint64_t a1, float a2)
{
  float32x4_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  unint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  unint64_t v29;
  int64_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float32x4_t *v66;
  unint64_t v67;
  float32x4_t v68;
  unint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v89;
  float v90;
  float v91;
  float32x4_t v95;
  float v96;
  float32x4_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  simd_float4 v105;
  simd_float4 v106;
  simd_float4 v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  float32x4_t *v115;
  simd_float4x4 v116;

  v96 = a2;
  v4 = sub_22655C140();
  v114 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v95 - v8;
  v110 = sub_2264421FC(*(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32), *(__n128 *)((char *)&v2[3] + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions), 0.16);
  if (a1 >> 62)
    goto LABEL_87;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v10)
  {
    v11 = 0;
    v12 = &unk_25585A000;
    v112 = (uint64_t)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
    v113 = a1 & 0xC000000000000001;
    v99 = a1 & 0xFFFFFFFFFFFFFF8;
    v98 = a1 + 32;
    v97 = v110 + 2;
    v104 = a1;
    v103 = v4;
    v102 = v6;
    v101 = v9;
    v100 = v10;
    while (v113)
    {
      v13 = MEMORY[0x2276999E4](v11, a1);
      v14 = __OFADD__(v11++, 1);
      if (v14)
        goto LABEL_85;
LABEL_12:
      v15 = v13;
      v16 = v114;
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
      v17(v9, v13 + v12[402], v4);
      v17(v6, v112, v4);
      LOBYTE(v17) = sub_22655C104();
      v2 = *(float32x4_t **)(v16 + 8);
      ((void (*)(char *, uint64_t))v2)(v6, v4);
      ((void (*)(char *, uint64_t))v2)(v9, v4);
      if ((v17 & 1) != 0)
      {
        swift_release();
      }
      else
      {
        v111 = v15;
        v116 = __invert_f4(*(simd_float4x4 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform));
        v18 = v110[1].i64[0];
        if (v18)
        {
          v19 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          v115 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          v107 = v116.columns[1];
          v108 = (float32x4_t)v116.columns[0];
          v106 = v116.columns[2];
          v105 = v116.columns[3];
          sub_2264C1310(0, v18, 0);
          v20 = (float32x4_t)v105;
          v21 = (float32x4_t)v106;
          v23 = (float32x4_t)v107;
          v22 = v108;
          v24 = v115;
          v25 = v115[1].u64[0];
          v26 = v97;
          v27 = v109;
          do
          {
            v28 = *v26;
            v115 = v24;
            v29 = v24[1].u64[1];
            v30 = v25 + 1;
            if (v25 >= v29 >> 1)
            {
              v109 = v27;
              v95 = v28;
              sub_2264C1310(v29 > 1, v25 + 1, 1);
              v28 = v95;
              v20 = (float32x4_t)v105;
              v21 = (float32x4_t)v106;
              v23 = (float32x4_t)v107;
              v22 = v108;
              v27.i32[3] = v109.i32[3];
              v24 = v115;
            }
            v31 = vaddq_f32(v20, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, v28.f32[0]), v23, *(float32x2_t *)v28.f32, 1), v21, v28, 2));
            v31.i32[3] = v27.i32[3];
            v24[1].i64[0] = v30;
            v24[v25 + 2] = v31;
            ++v26;
            ++v25;
            v27 = v31;
            --v18;
          }
          while (v18);
          v109 = v31;
        }
        else
        {
          v2 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          v30 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
          if (!v30)
          {
            swift_release();
            swift_bridgeObjectRelease_n();
            v12 = (_QWORD *)&unk_25585A000;
            goto LABEL_5;
          }
          v24 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          v19 = (float32x4_t *)MEMORY[0x24BEE4AF8];
        }
        v32 = v24 + 2;
        v115 = v19;
        sub_2264C7968(0, v30, 0);
        v33 = 0;
        v34 = v115;
        v35 = v115[1].i64[0];
        v36 = v35;
        do
        {
          v37 = v36;
          v38 = v32[v33];
          v115 = v34;
          v39 = v34[1].u64[1];
          if (v35 + v33 >= v39 >> 1)
          {
            v108 = v38;
            sub_2264C7968(v39 > 1, v35 + v33 + 1, 1);
            v38.i32[0] = v108.i32[0];
            v34 = v115;
          }
          v40 = v33 + 1;
          v34[1].i64[0] = v35 + v33 + 1;
          v34[2].i32[v35 + v33] = v38.i32[0];
          v36 = v37 + 1;
          v33 = v40;
        }
        while (v30 != v40);
        v41 = v34[2].f32[0];
        if (v35 + v40 == 1)
        {
          v45 = v34[2].f32[0];
          v49 = (float32x4_t *)MEMORY[0x24BEE4AF8];
        }
        else
        {
          v42 = (uint64_t)v34[2].i64 + 4;
          v43 = &v34[2].f32[1];
          v44 = v37;
          v45 = v34[2].f32[0];
          do
          {
            v46 = *v43++;
            v47 = v46;
            if (v46 < v45)
              v45 = v47;
            --v44;
          }
          while (v44);
          v48 = 0;
          v49 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          do
          {
            if (v41 < *(float *)(v42 + 4 * v48))
              v41 = *(float *)(v42 + 4 * v48);
            ++v48;
          }
          while (v37 != v48);
        }
        swift_bridgeObjectRelease();
        v115 = v49;
        sub_2264C7968(0, v30, 0);
        v50 = 0;
        v51 = v115;
        v52 = v115[1].i64[0];
        v53 = v52;
        do
        {
          v54 = v53;
          v55 = v32[v50];
          v115 = v51;
          v56 = v51[1].u64[1];
          if (v52 + v50 >= v56 >> 1)
          {
            v108 = v55;
            sub_2264C7968(v56 > 1, v52 + v50 + 1, 1);
            v55.i32[1] = v108.i32[1];
            v51 = v115;
          }
          v57 = v50 + 1;
          v51[1].i64[0] = v52 + v50 + 1;
          v51[2].i32[v52 + v50] = v55.i32[1];
          v53 = v54 + 1;
          v50 = v57;
        }
        while (v30 != v57);
        v58 = v51[2].f32[0];
        if (v52 + v57 == 1)
        {
          v62 = v51[2].f32[0];
          v4 = v103;
          v66 = (float32x4_t *)MEMORY[0x24BEE4AF8];
        }
        else
        {
          v59 = (uint64_t)v51[2].i64 + 4;
          v60 = &v51[2].f32[1];
          v61 = v54;
          v62 = v51[2].f32[0];
          v4 = v103;
          do
          {
            v63 = *v60++;
            v64 = v63;
            if (v63 < v62)
              v62 = v64;
            --v61;
          }
          while (v61);
          v65 = 0;
          v66 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          do
          {
            if (v58 < *(float *)(v59 + 4 * v65))
              v58 = *(float *)(v59 + 4 * v65);
            ++v65;
          }
          while (v54 != v65);
        }
        swift_bridgeObjectRelease();
        v115 = v66;
        sub_2264C7968(0, v30, 0);
        v2 = v115;
        v67 = v115[1].u64[0];
        do
        {
          v68 = *v32;
          v115 = v2;
          v69 = v2[1].u64[1];
          if (v67 >= v69 >> 1)
          {
            v108 = v68;
            sub_2264C7968(v69 > 1, v67 + 1, 1);
            v68.i32[2] = v108.i32[2];
            v2 = v115;
          }
          v2[1].i64[0] = v67 + 1;
          v2[2].i32[v67] = v68.i32[2];
          ++v32;
          ++v67;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        v70 = v2[1].i64[0];
        if (v70)
        {
          v71 = v2[2].f32[0];
          v72 = v70 - 1;
          a1 = v104;
          v6 = v102;
          v9 = v101;
          v10 = v100;
          v12 = (_QWORD *)&unk_25585A000;
          v73 = v111;
          if (v72)
          {
            v75 = 0;
            v74 = v2[2].f32[0];
            do
            {
              if (v2[2].f32[v75 + 1] < v74)
                v74 = v2[2].f32[v75 + 1];
              ++v75;
            }
            while (v72 != v75);
            v76 = &v2[2].f32[1];
            do
            {
              v77 = *v76++;
              v78 = v77;
              if (v71 < v77)
                v71 = v78;
              --v72;
            }
            while (v72);
          }
          else
          {
            v74 = v2[2].f32[0];
          }
          swift_bridgeObjectRelease();
          v108 = *(float32x4_t *)(v73 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
          swift_release();
          v79 = vmuls_lane_f32(0.5, v108, 2);
          v80 = 0.0 - v79;
          v81 = (float)(v41 - v45) * v96;
          v82 = v81 > (float)((float)(0.5 * v108.f32[0]) - v45)
             || v81 > (float)(v41 - (float)(0.0 - (float)(0.5 * v108.f32[0])));
          v83 = vmuls_lane_f32(0.5, *(float32x2_t *)v108.f32, 1);
          v84 = 0.0 - v83;
          v85 = v83 - v62;
          v86 = (float)(v58 - v62) * v96;
          v87 = v58 - v84;
          v89 = v82 || v86 > v85 || v86 > v87;
          v90 = v79 - v74;
          v91 = (float)(v71 - v74) * v96;
          if (!v89 && v91 <= v90 && v91 <= (float)(v71 - v80))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 1;
          }
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          a1 = v104;
          v6 = v102;
          v9 = v101;
          v10 = v100;
          v12 = (_QWORD *)&unk_25585A000;
        }
      }
LABEL_5:
      if (v11 == v10)
        goto LABEL_88;
    }
    if (v11 >= *(_QWORD *)(v99 + 16))
      goto LABEL_86;
    v13 = swift_retain();
    v14 = __OFADD__(v11++, 1);
    if (!v14)
      goto LABEL_12;
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    swift_bridgeObjectRetain();
    v10 = sub_22655D400();
  }
LABEL_88:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

float32x4_t *sub_2264421FC(float32x4_t a1, float32x4_t a2, float32x4_t a3, __n128 a4, float32x4_t a5, float a6)
{
  uint64_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t *result;
  float32x4_t *v14;
  char v15;
  unint64_t v16;
  float32x4_t v17;
  _OWORD *f32;
  float32x4_t v19;
  _QWORD *v20;
  char v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int64_t v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64_t v44;
  float32x4_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  float32x2_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __n128 v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;

  if (*(_BYTE *)(v6 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
  {
    a4.n128_u32[3] = 0;
    v58 = a4;
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v7.i32[2] = vmuls_lane_f32(0.5, a5, 2);
  }
  else
  {
    v8 = a6 * 0.5;
    a4.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a4.n128_u64[0], vmul_n_f32(*(float32x2_t *)a3.f32, v8));
    a4.n128_u64[1] = COERCE_UNSIGNED_INT(a4.n128_f32[2] - vmuls_lane_f32(v8, a3, 2));
    v58 = a4;
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v7.f32[2] = v8;
  }
  v7.i32[3] = 0;
  v55 = vmul_n_f32(*(float32x2_t *)a1.f32, v7.f32[0]);
  v59 = vmulq_laneq_f32(v7, a1, 2).f32[0];
  *(float32x2_t *)v9.f32 = v55;
  v9.i64[1] = LODWORD(v59);
  v64 = vmul_lane_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)v7.f32, 1);
  v68 = v9;
  v10 = vmulq_laneq_f32(v7, a2, 2);
  *(float32x2_t *)v11.f32 = v64;
  v11.i64[1] = v10.u32[1];
  v57 = v11;
  v12 = v10.f32[1];
  v50 = vmul_laneq_f32(vneg_f32(*(float32x2_t *)a3.f32), v7, 2);
  v51 = vmuls_lane_f32(-a3.f32[2], v7, 2);
  *(float32x2_t *)v10.f32 = v50;
  v10.i64[1] = LODWORD(v51);
  v70 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
  result = (float32x4_t *)swift_allocObject();
  v14 = result;
  v15 = 0;
  v16 = 0;
  result[1] = (float32x4_t)xmmword_22655FA10;
  *(float32x2_t *)v17.f32 = vsub_f32(0, v55);
  v17.f32[2] = 0.0 - v59;
  v17.i32[3] = 0;
  result[2] = v17;
  f32 = (_OWORD *)result[2].f32;
  result[3] = v68;
  *(float32x2_t *)v19.f32 = vsub_f32(0, v64);
  v19.f32[2] = 0.0 - v12;
  v19.i32[3] = 0;
  v56 = v19;
  *(float32x2_t *)v17.f32 = vsub_f32(0, v50);
  v17.f32[2] = 0.0 - v51;
  v17.i32[3] = 0;
  v69 = v17;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v21 = v15;
    if (v16 >= v14[1].i64[0])
      break;
    v65 = (float32x4_t)f32[v16];
    result = (float32x4_t *)swift_allocObject();
    result[1] = (float32x4_t)xmmword_22655FA10;
    result[2] = v56;
    result[3] = v57;
    if (!result[1].i64[0])
      goto LABEL_22;
    v22 = result;
    v60 = result[2];
    v23 = swift_allocObject();
    *(float32x4_t *)(v23 + 32) = v69;
    *(float32x4_t *)(v23 + 48) = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = sub_226486AE0(0, v20[2] + 1, 1, v20);
    v24 = *(float32x4_t *)(v23 + 32);
    v26 = v20[2];
    v25 = v20[3];
    v27 = v25 >> 1;
    v28 = v26 + 1;
    v29 = (float32x4_t)v58;
    if (v25 >> 1 <= v26)
    {
      v52 = *(float32x4_t *)(v23 + 32);
      v46 = sub_226486AE0((_QWORD *)(v25 > 1), v26 + 1, 1, v20);
      v24 = v52;
      v29 = (float32x4_t)v58;
      v20 = v46;
      v25 = v46[3];
      v27 = v25 >> 1;
    }
    v66 = vaddq_f32(v29, v65);
    v30 = vaddq_f32(v66, v60);
    v31 = vaddq_f32(v30, v24);
    v31.i32[3] = 0;
    v20[2] = v28;
    *(float32x4_t *)&v20[2 * v26 + 4] = v31;
    v32 = *(float32x4_t *)(v23 + 48);
    v33 = v26 + 2;
    if (v27 < v33)
    {
      v62 = v30;
      v53 = *(float32x4_t *)(v23 + 48);
      v47 = sub_226486AE0((_QWORD *)(v25 > 1), v33, 1, v20);
      v32 = v53;
      v30 = v62;
      v20 = v47;
    }
    v34 = vaddq_f32(v30, v32);
    v34.i32[3] = 0;
    v20[2] = v33;
    *(float32x4_t *)&v20[2 * v28 + 4] = v34;
    swift_setDeallocating();
    result = (float32x4_t *)swift_deallocClassInstance();
    if (v22[1].i64[0] < 2uLL)
    {
LABEL_22:
      __break(1u);
      break;
    }
    v61 = v22[3];
    v35 = swift_allocObject();
    *(float32x4_t *)(v35 + 32) = v69;
    *(float32x4_t *)(v35 + 48) = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = sub_226486AE0(0, v20[2] + 1, 1, v20);
    v36 = *(float32x4_t *)(v35 + 32);
    v38 = v20[2];
    v37 = v20[3];
    v39 = v37 >> 1;
    v40 = v38 + 1;
    if (v37 >> 1 <= v38)
    {
      v54 = *(float32x4_t *)(v35 + 32);
      v48 = sub_226486AE0((_QWORD *)(v37 > 1), v38 + 1, 1, v20);
      v36 = v54;
      v20 = v48;
      v37 = v48[3];
      v39 = v37 >> 1;
    }
    v41 = vaddq_f32(v66, v61);
    v42 = vaddq_f32(v41, v36);
    v42.i32[3] = 0;
    v20[2] = v40;
    *(float32x4_t *)&v20[2 * v38 + 4] = v42;
    v43 = *(float32x4_t *)(v35 + 48);
    v44 = v38 + 2;
    if (v39 < v44)
    {
      v63 = *(float32x4_t *)(v35 + 48);
      v67 = v41;
      v49 = sub_226486AE0((_QWORD *)(v37 > 1), v44, 1, v20);
      v43 = v63;
      v41 = v67;
      v20 = v49;
    }
    v45 = vaddq_f32(v41, v43);
    v45.i32[3] = 0;
    v20[2] = v44;
    *(float32x4_t *)&v20[2 * v40 + 4] = v45;
    swift_setDeallocating();
    swift_deallocClassInstance();
    swift_setDeallocating();
    result = (float32x4_t *)swift_deallocClassInstance();
    v15 = 1;
    v16 = 1;
    if ((v21 & 1) != 0)
    {
      swift_setDeallocating();
      swift_deallocClassInstance();
      return (float32x4_t *)v20;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2264426C0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  simd_float4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __n128 v51;
  __n128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __n128 v71;
  char *v72;
  simd_float4x4 v73;

  v2 = v1;
  v71 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  MEMORY[0x24BDAC7A8](v3);
  v69 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v68 = (char *)&v62 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841208);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v66 = (uint64_t)&v62 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for AnimationGraph();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = OBJC_IVAR____TtC8RoomPlan8ScanItem_type;
  v20 = OBJC_IVAR____TtC8RoomPlan8ScanItem_category;
  sub_22648D190(*(_BYTE *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type), *(_BYTE *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category), (uint64_t)v18);
  if (qword_25583F938 != -1)
    swift_once();
  v21 = qword_25585AF10;
  sub_2264B1598();
  sub_22655D5F8();
  v70 = v22;
  sub_22655D604();
  v24 = v23;
  sub_22655D604();
  if (v25 >= v24)
    v26 = v24;
  else
    v26 = v25;
  if (v26 == v24)
  {
    v27 = 2;
    *(_BYTE *)(v21 + 40) = 2;
  }
  else if (v26 == v25)
  {
    v27 = 3;
    *(_BYTE *)(v21 + 40) = 3;
  }
  else
  {
    v27 = *(unsigned __int8 *)(v21 + 40);
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = v27;
  v28 = *(unsigned __int8 *)(v2 + v19);
  v29 = *(unsigned __int8 *)(v2 + v20);
  v30 = 4;
  v72 = v18;
  if (((1 << v28) & 0x37) != 0)
  {
    if (v27 == 2)
      v30 = 2;
    else
      v30 = 1;
  }
  else if (v28 == 3)
  {
    if (qword_25583F830 != -1)
      swift_once();
    if (sub_2265583C8(v29, qword_25585AD98))
    {
      v30 = 1;
    }
    else
    {
      if (qword_25583F828 != -1)
        swift_once();
      if (sub_2265583C8(v29, qword_25585AD90))
        v30 = 1;
      else
        v30 = 3;
    }
  }
  v63 = v19;
  v31 = OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v30;
  v32 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform;
  v73.columns[3] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
  v33 = v73.columns[3];
  v33.i32[3] = 0;
  *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = v33;
  *(_QWORD *)&v70 = OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions;
  v34 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
  v62 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions) = v34;
  v73.columns[0] = *(simd_float4 *)v32;
  v73.columns[1] = *(simd_float4 *)(v32 + 16);
  v73.columns[2] = *(simd_float4 *)(v32 + 32);
  *(double *)&v35 = simd_quaternion(v73);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = v35;
  *(double *)&v36 = sub_226442E44();
  v37 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions) = v36;
  v38 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut;
  swift_beginAccess();
  sub_22643D7A0(v38, (uint64_t)v16, &qword_255840818);
  v39 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  swift_beginAccess();
  sub_226446510((uint64_t)v16, v39, &qword_255840818);
  swift_endAccess();
  v40 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut;
  swift_beginAccess();
  sub_22643D7A0(v40, (uint64_t)v16, &qword_255840818);
  v41 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut;
  swift_beginAccess();
  sub_226446510((uint64_t)v16, v41, &qword_255840818);
  swift_endAccess();
  sub_22643D7A0(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t)v13, (uint64_t *)&unk_255848090);
  v42 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v13, 1, v42);
  sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255848090);
  if (v43 == 1)
  {
    sub_226442F20(*(_BYTE *)(v2 + v31));
    *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = v44;
  }
  else
  {
    v44 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
  }
  v45 = (uint64_t)v72;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition) = v44;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationOrientation) = *(_OWORD *)(v2
                                                                                               + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationDimensions) = *(_OWORD *)(v2 + v37);
  sub_22643D7A0(v39, (uint64_t)v16, &qword_255840818);
  v46 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut;
  swift_beginAccess();
  sub_226446510((uint64_t)v16, v46, &qword_255840818);
  swift_endAccess();
  sub_22643D7A0(v41, (uint64_t)v16, &qword_255840818);
  v47 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut;
  swift_beginAccess();
  sub_226446510((uint64_t)v16, v47, &qword_255840818);
  swift_endAccess();
  __invert_f4(*(simd_float4x4 *)v32);
  v48 = v70;
  v49 = sub_22648D3C4();
  if ((v50 & 1) != 0)
    return sub_226446490(v45);
  v51 = *(__n128 *)(v2 + v48);
  *(_QWORD *)(v45 + 24) = v49;
  sub_22648EFB8(v51);
  v52 = *(__n128 *)(v2 + v62);
  if (*(_BYTE *)(v2 + v63) == 3)
    sub_22648C8DC(*(_DWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners), v52);
  else
    sub_22648CB7C(*(_DWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides), v52);
  v54 = v66;
  sub_2264464CC(v45, v66);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v54, 0, 1, v65);
  v55 = v67;
  sub_226446554(v54, v67, &qword_255841208);
  v56 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  sub_226446510(v55, v56, &qword_255841208);
  swift_endAccess();
  v57 = v68;
  sub_22655C0C8();
  sub_226446490(v45);
  v58 = sub_22655C0E0();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
  v59 = (uint64_t)v57;
  v60 = v69;
  sub_226446554(v59, v69, &qword_255841200);
  v61 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
  swift_beginAccess();
  sub_226446510(v60, v61, &qword_255841200);
  return swift_endAccess();
}

double sub_226442E44()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) != 3)
    goto LABEL_8;
  if (qword_25583F830 != -1)
    swift_once();
  v1 = OBJC_IVAR____TtC8RoomPlan8ScanItem_category;
  if (sub_2265583C8(*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category), qword_25585AD98))
    goto LABEL_8;
  if (qword_25583F828 != -1)
    swift_once();
  if (sub_2265583C8(*(unsigned __int8 *)(v0 + v1), qword_25585AD90))
  {
LABEL_8:
    v2 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions);
    LODWORD(v2) = 0;
  }
  else
  {
    *(_QWORD *)&v2 = vtrn2q_s32(vrev64q_s32(*(int32x4_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions)), (int32x4_t)0).u64[0];
  }
  return *(double *)&v2;
}

void sub_226442F20(char a1)
{
  __asm { BR              X10 }
}

float32x2_t sub_226442F58(unsigned __int8 a1, __n128 a2, double a3, double a4)
{
  uint64_t v4;
  __int128 v5;
  float32x2_t v6;

  v5 = *(_OWORD *)(v4 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
  if ((a1 - 1) > 1u)
    LODWORD(v5) = HIDWORD(*(_QWORD *)(v4 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions));
  a2.n128_f32[0] = (float)(*((float *)&a4 + 1) - *(float *)&v5) * 0.5;
  sub_226442FD4(a1, a2);
  return vadd_f32(v6, *(float32x2_t *)(v4 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48));
}

uint64_t sub_226442FD4(unsigned __int8 a1, __n128 a2)
{
  return ((uint64_t (*)(__n128, __n128))((char *)sub_226442FF4 + 4 * byte_22655FA95[a1]))(a2, (__n128)0);
}

float32x2_t sub_226442FF4(float a1)
{
  uint64_t v1;

  return vmul_n_f32(*(float32x2_t *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16), a1);
}

uint64_t sub_226443080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  v2 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t *)&unk_255849AC0);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t *)&unk_255848090);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut, &qword_255840818);
  swift_bridgeObjectRelease();
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime, &qword_255841200);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_fadeOutAnimationTime, &qword_255841200);
  swift_bridgeObjectRelease();
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve, (uint64_t *)&unk_255848090);
  swift_bridgeObjectRelease();
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve, (uint64_t *)&unk_255848090);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph, &qword_255841208);
  v3 = v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_bodyStartTime;
  v4 = sub_22655C0E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve, (uint64_t *)&unk_255848090);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve, (uint64_t *)&unk_255848090);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve, (uint64_t *)&unk_255848090);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut, &qword_255840818);
  sub_22643D7E4(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut, &qword_255840818);
  return v0;
}

uint64_t sub_2264432CC()
{
  sub_226443080();
  return swift_deallocClassInstance();
}

uint64_t sub_2264432F0()
{
  return type metadata accessor for ScanItem();
}

uint64_t type metadata accessor for ScanItem()
{
  uint64_t result;

  result = qword_255840B40;
  if (!qword_255840B40)
    return swift_getSingletonMetadata();
  return result;
}

void sub_226443334()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  sub_22655C140();
  if (v0 <= 0x3F)
  {
    sub_226443548(319, (unint64_t *)&qword_255847590, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    if (v1 <= 0x3F)
    {
      sub_226443548(319, &qword_255840B50, (void (*)(uint64_t))type metadata accessor for CapturedRoom.Surface.Curve);
      if (v2 <= 0x3F)
      {
        sub_226443548(319, &qword_255840B58, (void (*)(uint64_t))type metadata accessor for ScanItemStrut);
        if (v3 <= 0x3F)
        {
          sub_226443548(319, (unint64_t *)&qword_255840B60, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
          if (v4 <= 0x3F)
          {
            sub_226443548(319, qword_255840B68, (void (*)(uint64_t))type metadata accessor for AnimationGraph);
            if (v5 <= 0x3F)
            {
              sub_22655C0E0();
              if (v6 <= 0x3F)
                swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void sub_226443548(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_22655D13C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_226443594(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_22655D538();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(float *)(v81 + 4 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 4 * v84;
          if (v83 >= *(float *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_DWORD *)(v85 + 4) = *(_DWORD *)v85;
          *(float *)(v81 + 4 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_226443C24((float *)(v86 + 4 * v90), (float *)(v86 + 4 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 4 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_2264CA374((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_22655CEFC();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 4;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v10 + 4 * v9);
      v15 = *(float *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(float *)(v10 + 4 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (int *)(v95 + 4 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (float *)(v95 + 4 * v9);
      do
      {
        v25 = *(float *)(v10 + 4 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2264C9F78(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_2264C9F78((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_226443C24((float *)(v10 + 4 * *(_QWORD *)v73), (float *)(v10 + 4 * *(_QWORD *)v76), v10 + 4 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_22655D3DC();
  __break(1u);
  return result;
}

uint64_t sub_226443C24(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t result;
  float *v22;
  float *v23;
  float *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 3;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 2;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 4 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        v17 = (float *)(a3 - 4);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 4 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_2264CA228((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

float32x2_t sub_226443E90()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  BOOL v3;
  float v4;
  float32x2_t result;
  float v6;
  float32x2_t v7;
  float v8;
  __int128 v9;

  v1 = 0;
  *(float32x2_t *)&v2 = vsub_f32(*(float32x2_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition), *(float32x2_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48));
  *((float *)&v2 + 2) = *(float *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition + 8)
                      - *(float *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 56);
  HIDWORD(v2) = 0;
  while (1)
  {
    v9 = v2;
    v4 = *(float *)((unint64_t)&v9 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v3 = v4 == 0.0;
    if (v1 == 2)
      break;
    while (1)
    {
      ++v1;
      if (v3)
        break;
      if (v1 == 2)
        goto LABEL_7;
      v3 = 0;
    }
  }
  result = 0;
  if (v4 != 0.0)
  {
LABEL_7:
    sub_22655D604();
    v8 = v6 * 0.5;
    sub_22655D5F8();
    return vmul_n_f32(v7, v8);
  }
  return result;
}

void sub_226443F78(simd_float4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  float v44;
  float *v45;
  float32x2_t v46;
  float v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[2];
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  simd_float4 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  simd_float4x4 v78;
  simd_float4x4 v79;

  v2 = v1;
  v66 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v71 = (char *)v59 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v73 = (char *)v59 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v9);
  v70 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v76 = (char *)v59 - v13;
  v75 = sub_22655C0E0();
  v77 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v59[0] = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)v59 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v59 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  MEMORY[0x24BDAC7A8](v20);
  v62 = (char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v59 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_22655C140();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)v59 - v33;
  v35 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
  v74 = 0u;
  v36 = (_QWORD *)&unk_25585A000;
  if (v35 != 18)
  {
    v37 = v75;
    goto LABEL_15;
  }
  sub_22643D7A0(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t)v27, (uint64_t *)&unk_255849AC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_22643D7E4((uint64_t)v27, (uint64_t *)&unk_255849AC0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v34, v27, v28);
    if (qword_25583F808 != -1)
      swift_once();
    v38 = qword_25585AC80;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v34, v28);
    swift_beginAccess();
    v39 = *(_QWORD *)(v38 + 24);
    if (*(_QWORD *)(v39 + 16))
    {
      swift_bridgeObjectRetain();
      v40 = sub_226534858((uint64_t)v31);
      if ((v41 & 1) != 0)
      {
        v69 = v19;
        v42 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v40);
        swift_retain();
        swift_bridgeObjectRelease();
        v43 = *(void (**)(char *, uint64_t))(v29 + 8);
        v43(v31, v28);
        v44 = *(float *)(v42 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 52);
        v74 = *(_OWORD *)(v42 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
        if (qword_25583F9D0 != -1)
          swift_once();
        v45 = (float *)off_25584AF28;
        swift_beginAccess();
        v46 = (float32x2_t)v74;
        v47 = vmuls_lane_f32(v45[13], *(float32x2_t *)&v74, 1);
        *(float *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions + 4) = v47;
        *(float *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 52) = (float)(v44 - vmuls_lane_f32(0.5, v46, 1))+ (float)(v47 * 0.5);
        swift_release();
        v43(v34, v28);
        swift_beginAccess();
        LODWORD(v48) = 0;
        *((float *)&v48 + 1) = v45[15] * 0.5;
        v74 = v48;
        v37 = v75;
        v36 = &unk_25585A000;
LABEL_15:
        v50 = *(_OWORD *)(v2 + v36[408]);
        v65 = OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions;
        *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions) = v50;
        v51 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve;
        v52 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve;
        swift_beginAccess();
        v64 = v51;
        v67 = v52;
        sub_226444F18(v51, v52, (uint64_t *)&unk_255848090);
        swift_endAccess();
        v53 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut;
        v54 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut;
        swift_beginAccess();
        v68 = v54;
        sub_226444F18(v53, v54, &qword_255840818);
        swift_endAccess();
        v55 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut;
        v56 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut;
        swift_beginAccess();
        v69 = (char *)v56;
        sub_226444F18(v55, v56, &qword_255840818);
        swift_endAccess();
        v57 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
        swift_beginAccess();
        v61 = v57;
        sub_22643D7A0(v57, (uint64_t)v24, &qword_255841200);
        v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
        LODWORD(v57) = v60(v24, 1, v37);
        sub_22643D7E4((uint64_t)v24, &qword_255841200);
        if ((_DWORD)v57 == 1)
        {
          sub_2264426C0((__n128)v66);
        }
        else if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 2)
        {
          v78.columns[2] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32);
          v66 = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
          v78.columns[3] = v66;
          v78.columns[0] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
          v78.columns[1] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
          v79 = __invert_f4(v78);
          if (vsubq_f32(vaddq_f32((float32x4_t)v79.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], v66.f32[0]), (float32x4_t)v79.columns[1], *(float32x2_t *)v66.f32, 1), (float32x4_t)v79.columns[2], (float32x4_t)v66, 2)), vaddq_f32((float32x4_t)v79.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v79.columns[0], COERCE_FLOAT(*(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition))), (float32x4_t)v79.columns[1],
                       *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition),
                       1),
                     (float32x4_t)v79.columns[2],
                     *(float32x4_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition),
                     2))).f32[0] >= 0.0)
            v58 = 1;
          else
            v58 = 2;
          *(_BYTE *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v58;
        }
        if (qword_25583F9D0 != -1)
          swift_once();
        __asm { BR              X11 }
      }
      swift_bridgeObjectRelease();
    }
    v49 = *(void (**)(char *, uint64_t))(v29 + 8);
    v49(v31, v28);
    v49(v34, v28);
  }
  v37 = v75;
  v36 = &unk_25585A000;
  goto LABEL_15;
}

uint64_t sub_226444F18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  unsigned __int32 v11;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;

  v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a2);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

unint64_t sub_22644516C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  _QWORD **v31;
  void (*v32)(_QWORD *);
  _QWORD *v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD **v38;
  void (*v39)(_QWORD *);
  _QWORD *v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _QWORD *v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int64_t v76;
  _QWORD *v78;
  __int128 v79;
  uint64_t v80;
  __int128 v82;
  int64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return sub_2265249F0(MEMORY[0x24BEE4AF8]);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 != v4)
  {
    sub_2264465DC();
    swift_allocError();
    *(_QWORD *)v24 = v4;
    *(_QWORD *)(v24 + 8) = v5;
    *(_BYTE *)(v24 + 16) = 1;
    swift_willThrow();
    return (unint64_t)v3;
  }
  v75 = *(_QWORD *)(a1 + 16);
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4B00];
  v8 = MEMORY[0x24BEE4AF8];
  do
  {
    if (v6 >= 4)
    {
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    v10 = *((_BYTE *)&unk_24EDDEA28 + v6 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v7;
    v13 = sub_226534A0C(v10);
    v14 = v7[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      goto LABEL_74;
    v17 = v12;
    if (v7[3] >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v7 = v85;
        if ((v12 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_226548C98();
        v7 = v85;
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_2265430E8(v16, isUniquelyReferenced_nonNull_native);
      v18 = sub_226534A0C(v10);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_79;
      v13 = v18;
      v7 = v85;
      if ((v17 & 1) != 0)
      {
LABEL_4:
        v9 = v7[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v9 + 8 * v13) = v8;
        goto LABEL_5;
      }
    }
    v7[(v13 >> 6) + 8] |= 1 << v13;
    *(_BYTE *)(v7[6] + v13) = v10;
    *(_QWORD *)(v7[7] + 8 * v13) = v8;
    v20 = v7[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_77;
    v7[2] = v22;
LABEL_5:
    ++v6;
    swift_bridgeObjectRelease();
  }
  while (v6 != 4);
  v90 = v7;
  v25 = a2 + 32;
  swift_bridgeObjectRetain();
  v26 = 0;
  v27 = v4 - 1;
  do
  {
    v29 = *(_BYTE *)(v25 + v26);
    if (v27 == v26)
      v30 = 0;
    else
      v30 = v26 + 1;
    v79 = *(_OWORD *)(a1 + 16 * v26 + 32);
    v82 = *(_OWORD *)(a1 + 32 + 16 * v30);
    v32 = sub_22648CDE4(&v85, v29);
    v33 = *v31;
    if (*v31)
    {
      v34 = v31;
      v35 = swift_isUniquelyReferenced_nonNull_native();
      *v34 = v33;
      if ((v35 & 1) == 0)
      {
        v33 = sub_226486AE0(0, v33[2] + 1, 1, v33);
        *v34 = v33;
      }
      v37 = v33[2];
      v36 = v33[3];
      if (v37 >= v36 >> 1)
      {
        v33 = sub_226486AE0((_QWORD *)(v36 > 1), v37 + 1, 1, v33);
        *v34 = v33;
      }
      v33[2] = v37 + 1;
      *(_OWORD *)&v33[2 * v37 + 4] = v79;
    }
    ((void (*)(_QWORD **, _QWORD))v32)(&v85, 0);
    v39 = sub_22648CDE4(&v85, v29);
    v40 = *v38;
    if (*v38)
    {
      v41 = v38;
      v42 = swift_isUniquelyReferenced_nonNull_native();
      *v41 = v40;
      if ((v42 & 1) == 0)
      {
        v40 = sub_226486AE0(0, v40[2] + 1, 1, v40);
        *v41 = v40;
      }
      v44 = v40[2];
      v43 = v40[3];
      if (v44 >= v43 >> 1)
      {
        v40 = sub_226486AE0((_QWORD *)(v43 > 1), v44 + 1, 1, v40);
        *v41 = v40;
      }
      v28 = v75;
      v40[2] = v44 + 1;
      *(_OWORD *)&v40[2 * v44 + 4] = v82;
      ((void (*)(_QWORD **, _QWORD))v39)(&v85, 0);
    }
    else
    {
      ((void (*)(_QWORD **, _QWORD))v39)(&v85, 0);
      v28 = v75;
    }
    ++v26;
  }
  while (v28 != v26);
  swift_bridgeObjectRelease();
  v45 = 0;
  v74 = v90 + 8;
  v78 = v90;
  v46 = 1 << *((_BYTE *)v90 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & v90[8];
  v76 = (unint64_t)(v46 + 63) >> 6;
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (2)
  {
    if (v48)
    {
      v80 = (v48 - 1) & v48;
      v83 = v45;
      v50 = __clz(__rbit64(v48)) | (v45 << 6);
      goto LABEL_59;
    }
    v51 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_76;
    if (v51 >= v76)
    {
LABEL_70:
      swift_release();
      return (unint64_t)v3;
    }
    v52 = v74[v51];
    v53 = v45 + 1;
    if (v52)
      goto LABEL_58;
    v53 = v45 + 2;
    if (v45 + 2 >= v76)
      goto LABEL_70;
    v52 = v74[v53];
    if (v52)
      goto LABEL_58;
    v53 = v45 + 3;
    if (v45 + 3 >= v76)
      goto LABEL_70;
    v52 = v74[v53];
    if (v52)
    {
LABEL_58:
      v80 = (v52 - 1) & v52;
      v83 = v53;
      v50 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_59:
      LOBYTE(v84) = *(_BYTE *)(v78[6] + v50);
      v55 = v84;
      v56 = (_QWORD *)swift_bridgeObjectRetain();
      sub_2264B2FD8(v56, (char *)&v84, (uint64_t)&v85);
      v57 = v85;
      v58 = v86;
      v60 = v87;
      v59 = v88;
      v61 = v89;
      v62 = swift_isUniquelyReferenced_nonNull_native();
      v84 = v3;
      v64 = sub_226534A0C(v55);
      v65 = v3[2];
      v66 = (v63 & 1) == 0;
      v67 = v65 + v66;
      if (__OFADD__(v65, v66))
      {
        __break(1u);
        goto LABEL_73;
      }
      v68 = v63;
      if (v3[3] < v67)
      {
        sub_226542DC4(v67, v62);
        v69 = sub_226534A0C(v55);
        if ((v68 & 1) != (v70 & 1))
          goto LABEL_79;
        v64 = v69;
        v3 = v84;
        if ((v68 & 1) == 0)
          goto LABEL_66;
LABEL_41:
        v49 = v3[7] + 40 * v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v49 = v57;
        *(_BYTE *)(v49 + 8) = v58;
        *(_QWORD *)(v49 + 16) = v60;
        *(_QWORD *)(v49 + 24) = v59;
        *(_DWORD *)(v49 + 32) = v61;
LABEL_42:
        swift_bridgeObjectRelease();
        v45 = v83;
        v48 = v80;
        continue;
      }
      if ((v62 & 1) != 0)
      {
        v3 = v84;
        if ((v63 & 1) != 0)
          goto LABEL_41;
      }
      else
      {
        sub_226548ABC();
        v3 = v84;
        if ((v68 & 1) != 0)
          goto LABEL_41;
      }
LABEL_66:
      v3[(v64 >> 6) + 8] |= 1 << v64;
      *(_BYTE *)(v3[6] + v64) = v55;
      v71 = v3[7] + 40 * v64;
      *(_QWORD *)v71 = v57;
      *(_BYTE *)(v71 + 8) = v58;
      *(_QWORD *)(v71 + 16) = v60;
      *(_QWORD *)(v71 + 24) = v59;
      *(_DWORD *)(v71 + 32) = v61;
      v72 = v3[2];
      v21 = __OFADD__(v72, 1);
      v73 = v72 + 1;
      if (v21)
        goto LABEL_75;
      v3[2] = v73;
      goto LABEL_42;
    }
    break;
  }
  v54 = v45 + 4;
  if (v45 + 4 >= v76)
    goto LABEL_70;
  v52 = v74[v54];
  if (v52)
  {
    v53 = v45 + 4;
    goto LABEL_58;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v76)
      goto LABEL_70;
    v52 = v74[v53];
    ++v54;
    if (v52)
      goto LABEL_58;
  }
LABEL_78:
  __break(1u);
LABEL_79:
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

unint64_t sub_226445800(float32x4_t a1, float32x4_t a2, __n128 a3, float32x2_t a4)
{
  float v4;
  float v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __int128 v11;
  __int128 v12;
  float32x2_t v13;
  __int128 v14;
  float32x2_t v15;
  __int128 v16;
  float32x2_t v17;
  float32x2_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int8 v23;
  __int32 v24;
  uint64_t v25;
  uint64_t v26;
  __int8 v27;
  __int32 v28;
  uint64_t v29;
  uint64_t v30;
  __int8 v31;
  uint64_t inited;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float32x2_t v43;
  float32x2_t v44;
  uint64_t v45;
  float32x2_t v46;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int8 v52;
  __int128 v53;
  __int32 v54;

  v46 = *(float32x2_t *)a2.f32;
  v43 = a4;
  v44 = *(float32x2_t *)a1.f32;
  v4 = vmuls_lane_f32(0.5, a1, 2) * a4.f32[0];
  v5 = vmuls_lane_f32(vmuls_lane_f32(0.5, a2, 2), a4, 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
  v6 = swift_allocObject();
  v7 = vmul_n_f32(vmul_f32(v44, (float32x2_t)0x3F0000003F000000), v43.f32[0]);
  v8 = vsub_f32(0, v7);
  v9 = vmul_lane_f32(vmul_f32(v46, (float32x2_t)0x3F0000003F000000), v43, 1);
  v10 = vadd_f32((float32x2_t)a3.n128_u64[0], v9);
  *(float32x2_t *)&v11 = vadd_f32(v10, v8);
  *((float *)&v11 + 2) = (float)(a3.n128_f32[2] + v5) + (float)(0.0 - v4);
  HIDWORD(v11) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_22655FA10;
  *(_OWORD *)(v6 + 32) = v11;
  *(float32x2_t *)&v12 = vadd_f32(v7, v10);
  *((_QWORD *)&v12 + 1) = COERCE_UNSIGNED_INT(v4 + (float)(a3.n128_f32[2] + v5));
  *(_OWORD *)(v6 + 48) = v12;
  v50 = 0;
  sub_2264B2FD8((_QWORD *)v6, &v50, (uint64_t)&v51);
  v45 = v51;
  v43.i8[0] = v52;
  v46.i32[0] = v54;
  v13 = vadd_f32((float32x2_t)a3.n128_u64[0], v7);
  *(float32x2_t *)&v14 = vadd_f32(v9, v13);
  *((float *)&v14 + 2) = v5 + (float)(a3.n128_f32[2] + v4);
  HIDWORD(v14) = 0;
  v15 = vsub_f32(0, v9);
  *(float32x2_t *)&v16 = vadd_f32(v13, v15);
  *((float *)&v16 + 2) = (float)(a3.n128_f32[2] + v4) + (float)(0.0 - v5);
  HIDWORD(v16) = 0;
  v35 = v16;
  v17 = vadd_f32((float32x2_t)a3.n128_u64[0], v15);
  *(float32x2_t *)&v16 = vadd_f32(v7, v17);
  *((float *)&v16 + 2) = v4 + (float)(a3.n128_f32[2] + (float)(0.0 - v5));
  HIDWORD(v16) = 0;
  v18 = vadd_f32((float32x2_t)a3.n128_u64[0], v8);
  *(float32x2_t *)&v19 = vadd_f32(v8, v17);
  *((float *)&v19 + 2) = (float)(0.0 - v4) + (float)(a3.n128_f32[2] + (float)(0.0 - v5));
  HIDWORD(v19) = 0;
  v36 = v19;
  v37 = v16;
  *(float32x2_t *)&v19 = vadd_f32(v15, v18);
  *((float *)&v19 + 2) = (float)(0.0 - v5) + (float)(a3.n128_f32[2] + (float)(0.0 - v4));
  HIDWORD(v19) = 0;
  v40 = v19;
  v41 = v14;
  *(float32x2_t *)&v20 = vadd_f32(v9, v18);
  *((float *)&v20 + 2) = v5 + (float)(a3.n128_f32[2] + (float)(0.0 - v4));
  HIDWORD(v20) = 0;
  v39 = v20;
  v48 = v53;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_22655FA10;
  *(_OWORD *)(v21 + 32) = v41;
  *(_OWORD *)(v21 + 48) = v35;
  v50 = 1;
  sub_2264B2FD8((_QWORD *)v21, &v50, (uint64_t)&v51);
  v22 = v51;
  v23 = v52;
  v24 = v54;
  v42 = v53;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_22655FA10;
  *(_OWORD *)(v25 + 32) = v37;
  *(_OWORD *)(v25 + 48) = v36;
  v50 = 2;
  sub_2264B2FD8((_QWORD *)v25, &v50, (uint64_t)&v51);
  v26 = v51;
  v27 = v52;
  v28 = v54;
  v38 = v53;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_22655FA10;
  *(_OWORD *)(v29 + 32) = v40;
  *(_OWORD *)(v29 + 48) = v39;
  v50 = 3;
  sub_2264B2FD8((_QWORD *)v29, &v50, (uint64_t)&v51);
  v30 = v51;
  v31 = v52;
  v9.i32[0] = v54;
  v49 = v53;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255841210);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA80;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = v45;
  *(_BYTE *)(inited + 48) = v43.i8[0];
  *(_OWORD *)(inited + 56) = v48;
  *(_DWORD *)(inited + 72) = v46.i32[0];
  *(_BYTE *)(inited + 80) = 1;
  *(_QWORD *)(inited + 88) = v22;
  *(_BYTE *)(inited + 96) = v23;
  *(_OWORD *)(inited + 104) = v42;
  *(_DWORD *)(inited + 120) = v24;
  *(_BYTE *)(inited + 128) = 2;
  *(_QWORD *)(inited + 136) = v26;
  *(_BYTE *)(inited + 144) = v27;
  *(_OWORD *)(inited + 152) = v38;
  *(_DWORD *)(inited + 168) = v28;
  *(_BYTE *)(inited + 176) = 3;
  *(_QWORD *)(inited + 184) = v30;
  *(_BYTE *)(inited + 192) = v31;
  *(_OWORD *)(inited + 200) = v49;
  *(_DWORD *)(inited + 216) = v9.i32[0];
  v33 = sub_2265249F0(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255841218);
  swift_arrayDestroy();
  return v33;
}

uint64_t sub_226445B80(uint64_t result, char **a2)
{
  char **v2;
  uint64_t *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char *v13;
  uint64_t v14;
  char v15;
  char *v16;
  int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v55;
  char v56;
  unint64_t v57;
  char *v58;
  unsigned __int8 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  _BYTE v66[40];
  _BYTE v67[48];
  char *v68;

  v2 = a2;
  v3 = (uint64_t *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16) || *((_QWORD *)*a2 + 2))
  {
    v4 = 0;
    v53 = (uint64_t *)result;
    while (v4 < 4)
    {
      v9 = *((unsigned __int8 *)&unk_24EDDEA50 + v4 + 32);
      v10 = *v3;
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_63;
      v11 = sub_226534A0C(*((_BYTE *)&unk_24EDDEA50 + v4 + 32));
      if ((v12 & 1) == 0)
        goto LABEL_63;
      v13 = *v2;
      if (!*((_QWORD *)*v2 + 2)
        || (v14 = *(_QWORD *)(v10 + 56) + 40 * v11,
            v68 = *(char **)v14,
            v15 = *(_BYTE *)(v14 + 8),
            v16 = *(char **)(v14 + 24),
            v60 = *(_QWORD *)(v14 + 16),
            v17 = *(_DWORD *)(v14 + 32),
            v18 = sub_226534A0C(v9),
            (v19 & 1) == 0))
      {
LABEL_63:
        sub_2264465DC();
        swift_allocError();
        *(_QWORD *)v52 = v9;
        *(_QWORD *)(v52 + 8) = 0;
        *(_BYTE *)(v52 + 16) = 0;
        return swift_willThrow();
      }
      v55 = v15;
      v57 = v4;
      v59 = v9;
      v20 = *((_QWORD *)v13 + 7) + 40 * v18;
      v56 = *(_BYTE *)(v20 + 8);
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      v23 = *(_DWORD *)(v20 + 32);
      v24 = *((_QWORD *)v16 + 2);
      v58 = *(char **)v20;
      if (v24 >= 2)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v25 = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26 = v16;
        while (1)
        {
          v27 = v24 - 1;
          v28 = *((_QWORD *)v26 + 2);
          if (v24 - 1 >= v28)
            break;
          if (v24 - 2 >= v28)
            goto LABEL_66;
          if (vabds_f32(*(float *)&v26[4 * v24 + 28], *(float *)&v26[4 * v24 + 24]) < 0.0001)
          {
            if (v24 == 2)
              v29 = 1;
            else
              v29 = v24 - 2;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v26 = sub_2264C1214((uint64_t)v26);
            v30 = *((_QWORD *)v26 + 2);
            if (v29 >= v30)
              goto LABEL_71;
            v31 = v30 - 1;
            v32 = v30 - 1 - v29;
            if (v32 < 0)
              goto LABEL_75;
            memmove(&v26[4 * v29 + 32], &v26[4 * v29 + 36], 4 * v32);
            *((_QWORD *)v26 + 2) = v31;
          }
          v24 = v27;
          if (v27 <= 1)
          {
            swift_bridgeObjectRelease();
            v16 = v26;
            v22 = v25;
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_28:
      v33 = v22;
      v34 = *(_QWORD *)(v21 + 16);
      if (v34 >= 2)
      {
        swift_bridgeObjectRetain();
        v35 = (char *)v21;
        while (1)
        {
          v36 = v34 - 1;
          v37 = *((_QWORD *)v35 + 2);
          if (v34 - 1 >= v37)
            goto LABEL_67;
          if (v34 - 2 >= v37)
            goto LABEL_68;
          if (vabds_f32(*(float *)&v35[4 * v34 + 28], *(float *)&v35[4 * v34 + 24]) < 0.0001)
          {
            if (v34 == 2)
              v38 = 1;
            else
              v38 = v34 - 2;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v35 = sub_2264C1214((uint64_t)v35);
            v39 = *((_QWORD *)v35 + 2);
            if (v38 >= v39)
              goto LABEL_72;
            v40 = v39 - 1;
            v41 = v39 - 1 - v38;
            if (v41 < 0)
              goto LABEL_75;
            memmove(&v35[4 * v38 + 32], &v35[4 * v38 + 36], 4 * v41);
            *((_QWORD *)v35 + 2) = v40;
          }
          --v34;
          if (v36 <= 1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
      }
      v35 = (char *)v21;
LABEL_45:
      v61 = v16;
      swift_bridgeObjectRetain();
      v42 = swift_bridgeObjectRetain();
      sub_22646B4D0(v42);
      v43 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_2264C1214((uint64_t)v43);
      v44 = *((_QWORD *)v43 + 2);
      v61 = v43 + 32;
      v62 = v44;
      sub_226443594(&v61);
      v45 = *((_QWORD *)v43 + 2);
      if (v45 >= 2)
      {
        swift_bridgeObjectRetain();
        v5 = v43;
        while (1)
        {
          v46 = v45 - 1;
          v47 = *((_QWORD *)v5 + 2);
          if (v45 - 1 >= v47)
            goto LABEL_69;
          if (v45 - 2 >= v47)
            goto LABEL_70;
          if (vabds_f32(*(float *)&v5[4 * v45 + 28], *(float *)&v5[4 * v45 + 24]) < 0.0001)
          {
            if (v45 == 2)
              v48 = 1;
            else
              v48 = v45 - 2;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v5 = sub_2264C1214((uint64_t)v5);
            v49 = *((_QWORD *)v5 + 2);
            if (v48 >= v49)
              goto LABEL_73;
            v50 = v49 - 1;
            v51 = v49 - 1 - v48;
            if (v51 < 0)
              goto LABEL_75;
            memmove(&v5[4 * v48 + 32], &v5[4 * v48 + 36], 4 * v51);
            *((_QWORD *)v5 + 2) = v50;
          }
          --v45;
          if (v46 <= 1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
        }
      }
      v5 = v43;
LABEL_5:
      v4 = v57 + 1;
      v61 = v68;
      LOBYTE(v62) = v55;
      v63 = v60;
      v64 = v16;
      v65 = v17;
      v6 = swift_bridgeObjectRetain();
      sub_2264B3158(v6, (uint64_t)v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v53;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v61 = (char *)*v53;
      *v53 = 0x8000000000000000;
      sub_226522DE4((uint64_t)v67, v59, isUniquelyReferenced_nonNull_native);
      *v53 = (uint64_t)v61;
      swift_bridgeObjectRelease();
      v61 = v58;
      LOBYTE(v62) = v56;
      v63 = v33;
      v64 = v35;
      v65 = v23;
      sub_2264B3158((uint64_t)v5, (uint64_t)v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = a2;
      v8 = swift_isUniquelyReferenced_nonNull_native();
      v61 = *a2;
      *a2 = (char *)0x8000000000000000;
      sub_226522DE4((uint64_t)v66, v59, v8);
      *a2 = v61;
      result = swift_bridgeObjectRelease();
      if (v57 == 3)
        return result;
    }
    __break(1u);
LABEL_75:
    result = sub_22655D43C();
    __break(1u);
  }
  return result;
}

uint64_t sub_22644618C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t ObjCClassFromMetadata;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v2 = sub_22655CB84();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = 0;
    v33 = MEMORY[0x24BEE4AF8];
    v9 = &unk_24EDDEB90;
    v27 = "nBorder";
    *(_QWORD *)&v5 = 136315138;
    v29 = v5;
    v28 = MEMORY[0x24BEE4AD8] + 8;
    v30 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      v10 = v9[v8 + 32];
      if (*(_QWORD *)(a1 + 16) && (v11 = sub_226534A0C(v9[v8 + 32]), (v12 & 1) != 0))
      {
        result = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40 * v11);
        v32 = result;
        if (!*(_QWORD *)(result + 16))
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        sub_226509CE4(0, 1);
        sub_22646A170(v32);
      }
      else
      {
        type metadata accessor for Constants();
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        v14 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata, v27, v28);
        v15 = objc_msgSend(v14, sel_bundleIdentifier);

        if (v15)
        {
          sub_22655CD88();

        }
        sub_22643D680();
        sub_22655D124();
        sub_22655CB90();
        v16 = sub_22655CB6C();
        v17 = sub_22655CFF8();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc();
          v19 = a1;
          v20 = v2;
          v21 = v3;
          v22 = v9;
          v23 = swift_slowAlloc();
          v32 = v23;
          *(_DWORD *)v18 = v29;
          v31 = v10;
          v24 = sub_22655CDDC();
          *(_QWORD *)(v18 + 4) = sub_2264F4EC4(v24, v25, &v32);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_226423000, v16, v17, "Missing edge on %s side", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy();
          v26 = v23;
          v9 = v22;
          v3 = v21;
          v2 = v20;
          a1 = v19;
          v6 = v30;
          MEMORY[0x22769A884](v26, -1, -1);
          MEMORY[0x22769A884](v18, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      }
      if (++v8 == 4)
        return v33;
    }
  }
  return result;
}

uint64_t sub_226446490(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnimationGraph();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2264464CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnimationGraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_226446510(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_226446554(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_226446598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2264465DC()
{
  unint64_t result;

  result = qword_255841220;
  if (!qword_255841220)
  {
    result = MEMORY[0x22769A794](&unk_22655FB70, &type metadata for ScanItemError);
    atomic_store(result, (unint64_t *)&qword_255841220);
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScanItemError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanItemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2264466C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_2264466C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScanItemError()
{
  return &type metadata for ScanItemError;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

uint64_t sub_226446850(float *a1)
{
  float *v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  int v12;
  uint64_t v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = a1[4];
  v3 = a1[5];
  if (vabds_f32(v4, v3) < 0.00000011921
    || (v6 = a1[6], v5 = a1[7], vabds_f32(v6, v5) < 0.00000011921)
    || (v7 = v1[5], v7 <= v4)
    || (v8 = v1[4], v3 <= v8)
    || (v9 = v1[7], v9 <= v6)
    || (v10 = v1[6], v5 <= v10))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_22655FA20;
    *(_QWORD *)(v19 + 32) = v1;
    v24 = v19;
    sub_22655CEE4();
    v17 = v24;
    goto LABEL_31;
  }
  v23 = MEMORY[0x24BEE4AF8];
  if (v8 < v4)
  {
    type metadata accessor for CurvedElement();
    v11 = (float *)swift_allocObject();
    v11[4] = v8;
    v11[5] = v4;
    v11[6] = v10;
    v11[7] = v9;
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    v7 = v1[5];
    v10 = v1[6];
  }
  if (v3 < v7)
  {
    v12 = *((_DWORD *)v1 + 7);
    type metadata accessor for CurvedElement();
    v13 = swift_allocObject();
    *(float *)(v13 + 16) = v3;
    *(float *)(v13 + 20) = v7;
    *(float *)(v13 + 24) = v10;
    *(_DWORD *)(v13 + 28) = v12;
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    v10 = v1[6];
  }
  if (v4 <= v8)
    v4 = v8;
  if (v7 < v3)
    v3 = v7;
  if (v10 < v6)
  {
    type metadata accessor for CurvedElement();
    v14 = (float *)swift_allocObject();
    v14[4] = v4;
    v14[5] = v3;
    v14[6] = v10;
    v14[7] = v6;
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
  }
  v15 = v1[7];
  if (v5 < v15)
  {
    type metadata accessor for CurvedElement();
    v16 = (float *)swift_allocObject();
    v16[4] = v4;
    v16[5] = v3;
    v16[6] = v5;
    v16[7] = v15;
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
  }
  v17 = v23;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = sub_22655D400();
    swift_bridgeObjectRelease();
    if (v21)
      return v17;
    goto LABEL_29;
  }
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_29:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22655FA20;
    *(_QWORD *)(v18 + 32) = v2;
    v22 = v18;
    sub_22655CEE4();
    v17 = v22;
LABEL_31:
    swift_retain();
  }
  return v17;
}

BOOL sub_226446BDC(float *a1)
{
  float *v1;

  return a1[5] <= v1[4] || v1[5] <= a1[4] || a1[7] <= v1[6] || v1[7] <= a1[6];
}

uint64_t sub_226446C28()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CurvedElement()
{
  return objc_opt_self();
}

int32x2_t sub_226446C58(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  void *v37;
  id v38;
  _QWORD *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  __int128 v44;
  float v45;
  void *v46;
  id v47;
  double v48;
  double v49;
  void (*v50)(char *, uint64_t);
  float v51;
  __int128 v52;
  __float2 v53;
  __int128 v54;
  __int128 v55;
  float v56;
  id v57;
  double v58;
  double v59;
  float v60;
  __int128 v61;
  __float2 v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  id v73;
  double v74;
  double v75;
  float v76;
  id v77;
  double v78;
  double v79;
  float v80;
  float v81;
  uint64_t v82;
  int32x2_t result;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  float32x4_t v88;
  __int128 v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;

  v95 = a9;
  v96 = a10;
  v93 = a6;
  v94 = a8;
  v99 = a1;
  v91 = a4;
  v92 = a5;
  v90 = a3;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840958);
  *(_QWORD *)&v89 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v84 - v26;
  v28 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v84 - v33;
  v97 = a2;
  sub_226440140(a2, (uint64_t)v27);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v36 = v35(v27, 1, v28);
  v98 = v34;
  *(_QWORD *)&v87 = v25;
  if (v36 == 1)
  {
    v37 = (void *)objc_opt_self();
    v38 = objc_msgSend(v37, sel_degrees);
    sub_2264472A4();
    v39 = v98;
    sub_22655BDBC();
    v40 = objc_msgSend(v37, sel_degrees);
    v25 = (char *)v87;
    sub_22655BDBC();
    *v39 = 0;
    *((_DWORD *)v39 + 2) = 0;
    sub_226440188((uint64_t)v27);
  }
  else
  {
    sub_226446598((uint64_t)v27, (uint64_t)v34);
  }
  v88 = a17;
  sub_226440140(v99, (uint64_t)v25);
  if (v35(v25, 1, v28) == 1)
  {
    v41 = (void *)objc_opt_self();
    v42 = objc_msgSend(v41, sel_degrees);
    sub_2264472A4();
    sub_22655BDBC();
    v43 = objc_msgSend(v41, sel_degrees);
    sub_22655BDBC();
    *(_QWORD *)v32 = 0;
    *((_DWORD *)v32 + 2) = 0;
    sub_226440188(v87);
  }
  else
  {
    sub_226446598((uint64_t)v25, (uint64_t)v32);
  }
  *(_QWORD *)&v44 = *(_QWORD *)v32;
  v87 = v44;
  v45 = *((float *)v32 + 2);
  v46 = (void *)objc_opt_self();
  v47 = objc_msgSend(v46, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v49 = v48;
  v50 = *(void (**)(char *, uint64_t))(v89 + 8);
  v50(v21, v19);
  v51 = v49;
  *(float *)&v52 = a7 * -0.5;
  v89 = v52;
  v53 = __sincosf_stret(v51);
  *(float *)&v54 = *(float *)&v87 + (float)(v45 * v53.__cosval);
  v86 = v54;
  *(float *)&v55 = *((float *)&v87 + 1) + (float)(v45 * v53.__sinval);
  v87 = v55;
  *(_QWORD *)&v55 = *(_QWORD *)v32;
  v85 = v55;
  v56 = *((float *)v32 + 2);
  v57 = objc_msgSend(v46, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v59 = v58;
  v50(v21, v19);
  v60 = v59;
  *(float *)&v61 = a7 * 0.5;
  v84 = v61;
  v62 = __sincosf_stret(v60);
  v63 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v90, *(float *)&v86), v91, *(float *)&v89), v92, *(float *)&v87), v93);
  v64 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v90, *(float *)&v85 + (float)(v56 * v62.__cosval)), v91, *(float *)&v84), v92, *((float *)&v85 + 1) + (float)(v56 * v62.__sinval)), v93);
  v93 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, v63.f32[0]), v95, *(float32x2_t *)v63.f32, 1), v96, v63, 2), v88, v63, 3);
  v96 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, v64.f32[0]), v95, *(float32x2_t *)v64.f32, 1), v96, v64, 2), v88, v64, 3);
  v65 = (uint64_t)v98;
  LODWORD(v66) = HIDWORD(*v98);
  v67 = v96.f32[0] - COERCE_FLOAT(*v98);
  *(float *)&v59 = v96.f32[2] - v66;
  v68 = atan2f(v93.f32[2] - v66, v93.f32[0] - COERCE_FLOAT(*v98));
  v69 = atan2f(*(float *)&v59, v67);
  v70 = v68 + 6.2832;
  if (v68 >= 0.0)
    v70 = v68;
  else
    v69 = v69 + 6.2832;
  if (v70 < 6.2832)
  {
    v71 = v70;
  }
  else
  {
    v69 = v69 + -6.2832;
    v71 = v70 + -6.2832;
  }
  if (v69 >= v71)
    v72 = v69;
  else
    v72 = v69 + 6.2832;
  v73 = objc_msgSend(v46, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v75 = v74;
  v50(v21, v19);
  v76 = v75;
  if (v71 < v76)
    v71 = v75;
  v77 = objc_msgSend(v46, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v79 = v78;
  v50(v21, v19);
  v80 = v79;
  if (v72 >= v80)
    v81 = v79;
  else
    v81 = v72;
  sub_226440188(v97);
  sub_226440188(v99);
  sub_2264472E0((uint64_t)v32);
  sub_2264472E0(v65);
  type metadata accessor for CurvedElement();
  v82 = swift_allocObject();
  *(float *)(v82 + 16) = v71;
  *(float *)(v82 + 20) = v81;
  result = vzip2_s32(*(int32x2_t *)v93.f32, *(int32x2_t *)v96.f32);
  *(int32x2_t *)(v82 + 24) = result;
  return result;
}

unint64_t sub_2264472A4()
{
  unint64_t result;

  result = qword_255848160;
  if (!qword_255848160)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255848160);
  }
  return result;
}

uint64_t sub_2264472E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22644731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_226447324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_22644732C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_226447334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_22644733C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t sub_226447344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_22644734C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_226447354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t sub_22644735C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t sub_226447364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_22644736C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t sub_226447374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_22644737C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t sub_226447384(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  id v44;
  __int128 v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;

  v2 = v1;
  v4 = sub_22655C140();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - v9;
  v41 = v11;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v48 = a1 + qword_25585ADF8;
  v49 = v12;
  ((void (*)(char *, double))v12)((char *)&v40 - v9, v8);
  v13 = (_QWORD *)(v2 + 24);
  swift_beginAccess();
  v14 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    v15 = sub_226534858((uint64_t)v10);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v4);
      return v17;
    }
    swift_bridgeObjectRelease();
  }
  v47 = *(void (**)(char *, uint64_t))(v41 + 8);
  v47(v10, v4);
  v51 = MEMORY[0x24BEE4AF8];
  v18 = *(_QWORD *)(v2 + 16);
  if (v18 < 0)
    goto LABEL_28;
  if (!v18)
    return MEMORY[0x24BEE4AF8];
  v46 = sub_22655C398();
  v45 = *(_OWORD *)(v2 + 32);
  v19 = *(void **)(v2 + 48);
  v43 = *(_QWORD *)(v2 + 56);
  v44 = v19;
  v42 = xmmword_22655F8F0;
  while (1)
  {
    sub_22655C35C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v42;
    *(_QWORD *)(v21 + 56) = sub_22655C3D4();
    *(_QWORD *)(v21 + 64) = MEMORY[0x24BDE62F8];
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 32));
    v22 = v44;
    sub_22655C3C8();
    sub_22655C1AC();
    swift_allocObject();
    sub_22655C1A0();
    sub_22655C8B4();
    sub_22655C230();
    swift_retain();
    v23 = sub_22655C89C();
    MEMORY[0x227699594](v23);
    if (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    v49(v6, v48, v4);
    v24 = v51;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = (_QWORD *)*v13;
    v26 = v50;
    *v13 = 0x8000000000000000;
    v28 = sub_226534858((uint64_t)v6);
    v29 = v26[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (v26[3] >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v35 = v50;
        if ((v27 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_2265484AC();
        v35 = v50;
        if ((v32 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_2265423C0(v31, isUniquelyReferenced_nonNull_native);
      v33 = sub_226534858((uint64_t)v6);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_29;
      v28 = v33;
      v35 = v50;
      if ((v32 & 1) != 0)
      {
LABEL_8:
        v20 = v35[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v20 + 8 * v28) = v24;
        goto LABEL_9;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v49((char *)(v35[6] + *(_QWORD *)(v41 + 72) * v28), (uint64_t)v6, v4);
    *(_QWORD *)(v35[7] + 8 * v28) = v24;
    v36 = v35[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_27;
    v35[2] = v38;
LABEL_9:
    *v13 = v35;
    swift_bridgeObjectRelease();
    v47(v6, v4);
    swift_endAccess();
    swift_release();
    if (!--v18)
      return v51;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

uint64_t sub_2264477D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  v16 = v1 + 64;
  v2 = 1 << *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v7 << 6);
    }
    else
    {
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_35;
      if (v10 >= v5)
      {
LABEL_33:
        swift_release();
        *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4B00];
        return swift_bridgeObjectRelease();
      }
      v11 = *(_QWORD *)(v16 + 8 * v10);
      ++v7;
      if (!v11)
      {
        v7 = v10 + 1;
        if (v10 + 1 >= v5)
          goto LABEL_33;
        v11 = *(_QWORD *)(v16 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 2;
          if (v10 + 2 >= v5)
            goto LABEL_33;
          v11 = *(_QWORD *)(v16 + 8 * v7);
          if (!v11)
          {
            v7 = v10 + 3;
            if (v10 + 3 >= v5)
              goto LABEL_33;
            v11 = *(_QWORD *)(v16 + 8 * v7);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v5)
                goto LABEL_33;
              v11 = *(_QWORD *)(v16 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v7 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_36;
                  if (v7 >= v5)
                    goto LABEL_33;
                  v11 = *(_QWORD *)(v16 + 8 * v7);
                  ++v12;
                  if (v11)
                    goto LABEL_22;
                }
              }
              v7 = v12;
            }
          }
        }
      }
LABEL_22:
      v4 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v7 << 6);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v9);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_22655D400();
      v14 = result;
      if (!result)
        goto LABEL_4;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v14)
        goto LABEL_4;
    }
    if (v14 < 1)
      break;
    v15 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        MEMORY[0x2276999E4](v15, v13);
      else
        swift_retain();
      ++v15;
      sub_22655C1AC();
      sub_22655C224();
      swift_release();
    }
    while (v14 != v15);
LABEL_4:
    result = swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_226447A38()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebugEntityPools()
{
  return objc_opt_self();
}

BOOL sub_226447A8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s8RoomPlan08CapturedA0V5ErrorO9hashValueSivg_0()
{
  sub_22655D640();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226447AE8()
{
  return sub_22655D64C();
}

uint64_t sub_226447B10()
{
  sub_22655D640();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226447B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43[3];

  v1 = v0;
  v43[1] = *MEMORY[0x24BDAC8D0];
  v2 = sub_22655CB84();
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655C1C4();
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22654F570();
  if (v7 >> 62)
  {
    v9 = sub_22655D400();
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
LABEL_3:
      if (v9 < 1)
        __break(1u);
      v35 = v4;
      v10 = 0;
      v42 = v7 & 0xC000000000000001;
      v31 = "nBorder";
      *(_QWORD *)&v8 = 136315138;
      v33 = v8;
      v32 = MEMORY[0x24BEE4AD8] + 8;
      v34 = v0;
      do
      {
        if (v42)
        {
          v11 = MEMORY[0x2276999E4](v10, v7);
        }
        else
        {
          v11 = *(_QWORD *)(v7 + 8 * v10 + 32);
          swift_retain();
        }
        if (*(_QWORD *)(v11 + qword_25585AE18))
        {
          v12 = *(float *)(v1 + 156);
          LODWORD(v43[0]) = 0;
          swift_retain();
          REMaterialParameterBlockGetFloat();
          if (v12 != *(float *)v43)
          {
            REMaterialParameterBlockSetFloat();
            v13 = v39;
            sub_22655C7E8();
            sub_22655C170();
            (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
            REMeshComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              REMeshComponentRemoveAllMaterials();
              REMeshComponentAddMaterial();
              REMaterialParameterBlockArrayComponentGetComponentType();
              REEntityGetOrAddComponentByClass();
              if (REMaterialParameterBlockArrayComponentSize() != 1)
                REMaterialParameterBlockArrayComponentResize();
              REMaterialParameterBlockArrayComponentSetBlockAtIndex();
              swift_release();
              swift_release();
            }
            else
            {
              sub_22644E994();
              v14 = (void *)swift_allocError();
              *(_QWORD *)v15 = 0;
              *(_QWORD *)(v15 + 8) = 0;
              *(_BYTE *)(v15 + 16) = 4;
              swift_willThrow();
              swift_release();
              type metadata accessor for Constants();
              ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              v17 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata, v31, v32);
              v18 = objc_msgSend(v17, sel_bundleIdentifier);

              if (v18)
              {
                sub_22655CD88();

              }
              sub_22643D680();
              sub_22655D124();
              v19 = v35;
              sub_22655CB90();
              v20 = v14;
              v21 = v14;
              v22 = sub_22655CB6C();
              v23 = sub_22655CFF8();
              v38 = v22;
              if (os_log_type_enabled(v22, v23))
              {
                v24 = swift_slowAlloc();
                v25 = swift_slowAlloc();
                v43[0] = v25;
                *(_DWORD *)v24 = v33;
                swift_getErrorValue();
                v26 = sub_22655D5B0();
                *(_QWORD *)(v24 + 4) = sub_2264F4EC4(v26, v27, v43);
                swift_bridgeObjectRelease();

                v28 = v38;
                _os_log_impl(&dword_226423000, v38, v23, "cannot update edge line width: %s", (uint8_t *)v24, 0xCu);
                swift_arrayDestroy();
                v29 = v25;
                v1 = v34;
                MEMORY[0x22769A884](v29, -1, -1);
                MEMORY[0x22769A884](v24, -1, -1);
                swift_release();

              }
              else
              {
                swift_release();

              }
              (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
            }
            goto LABEL_7;
          }
          swift_release();
        }
        swift_release();
LABEL_7:
        ++v10;
      }
      while (v9 != v10);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2264480DC(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t result;
  int64_t v25;
  __int128 v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t k;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  int64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int64_t v92;
  __int128 v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;

  v98 = a2 & 1;
  v6 = sub_22655CB84();
  v96 = *(_QWORD *)(v6 - 8);
  v97 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v85 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v86 = (char *)&v81 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v87 = (char *)&v81 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v81 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416C8);
  MEMORY[0x24BDAC7A8](v15);
  v91 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v90 = (char *)&v81 - v18;
  swift_beginAccess();
  v82 = v3;
  v19 = *(_QWORD *)(v3 + 96);
  v20 = *(_QWORD *)(v19 + 64);
  v88 = v19 + 64;
  v21 = 1 << *(_BYTE *)(v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  i = v22 & v20;
  v92 = (unint64_t)(v21 + 63) >> 6;
  v94 = v19;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  v89 = "nBorder";
  *(_QWORD *)&v26 = 136315138;
  v93 = v26;
  v83 = MEMORY[0x24BEE4AD8] + 8;
  v84 = (uint64_t)v14;
  v95 = a1;
  if (i)
    goto LABEL_6;
  while (1)
  {
    v27 = __OFADD__(v25++, 1);
    if (v27)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (v25 >= v92)
      goto LABEL_25;
    v28 = *(_QWORD *)(v88 + 8 * v25);
    if (!v28)
      break;
LABEL_19:
    for (i = (v28 - 1) & v28; ; i &= i - 1)
    {
      swift_retain();
      sub_2264CBA10(a1, v98, a3);
      result = swift_release();
      if (!i)
        break;
LABEL_6:
      ;
    }
  }
  v29 = v25 + 1;
  if (v25 + 1 >= v92)
    goto LABEL_25;
  v28 = *(_QWORD *)(v88 + 8 * v29);
  if (v28)
    goto LABEL_18;
  v29 = v25 + 2;
  if (v25 + 2 >= v92)
    goto LABEL_25;
  v28 = *(_QWORD *)(v88 + 8 * v29);
  if (v28)
    goto LABEL_18;
  v29 = v25 + 3;
  if (v25 + 3 >= v92)
    goto LABEL_25;
  v28 = *(_QWORD *)(v88 + 8 * v29);
  if (v28)
  {
LABEL_18:
    v25 = v29;
    goto LABEL_19;
  }
  v29 = v25 + 4;
  if (v25 + 4 < v92)
  {
    v28 = *(_QWORD *)(v88 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        v25 = v29 + 1;
        if (__OFADD__(v29, 1))
          break;
        if (v25 >= v92)
          goto LABEL_25;
        v28 = *(_QWORD *)(v88 + 8 * v25);
        ++v29;
        if (v28)
          goto LABEL_19;
      }
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    goto LABEL_18;
  }
LABEL_25:
  swift_release();
  v30 = v82;
  swift_beginAccess();
  v31 = *(_QWORD *)(v30 + 120);
  v32 = *(_QWORD *)(v31 + 64);
  v87 = (char *)(v31 + 64);
  v33 = 1 << *(_BYTE *)(v31 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  j = v34 & v32;
  v88 = (unint64_t)(v33 + 63) >> 6;
  v92 = v31;
  result = swift_bridgeObjectRetain();
  v36 = 0;
  v84 = MEMORY[0x24BEE4AD8] + 8;
  if (j)
    goto LABEL_30;
  while (1)
  {
    v27 = __OFADD__(v36++, 1);
    if (v27)
      goto LABEL_128;
    if (v36 >= v88)
      break;
    v37 = *(_QWORD *)&v87[8 * v36];
    v39 = (uint64_t)v90;
    v38 = (uint64_t)v91;
    if (!v37)
    {
      v40 = v36 + 1;
      if (v36 + 1 >= v88)
        goto LABEL_50;
      v37 = *(_QWORD *)&v87[8 * v40];
      if (!v37)
      {
        v40 = v36 + 2;
        if (v36 + 2 >= v88)
          goto LABEL_50;
        v37 = *(_QWORD *)&v87[8 * v40];
        if (!v37)
        {
          v40 = v36 + 3;
          if (v36 + 3 >= v88)
            goto LABEL_50;
          v37 = *(_QWORD *)&v87[8 * v40];
          if (!v37)
          {
            v40 = v36 + 4;
            if (v36 + 4 >= v88)
              goto LABEL_50;
            v37 = *(_QWORD *)&v87[8 * v40];
            if (!v37)
            {
              while (1)
              {
                v36 = v40 + 1;
                if (__OFADD__(v40, 1))
                  break;
                if (v36 >= v88)
                  goto LABEL_50;
                v37 = *(_QWORD *)&v87[8 * v36];
                ++v40;
                if (v37)
                  goto LABEL_43;
              }
LABEL_133:
              __break(1u);
              goto LABEL_134;
            }
          }
        }
      }
      v36 = v40;
    }
LABEL_43:
    for (j = (v37 - 1) & v37; ; j &= j - 1)
    {
      swift_retain();
      sub_2264CBA10(a1, v98, a3);
      result = swift_release();
      if (!j)
        break;
LABEL_30:
      ;
    }
  }
  v39 = (uint64_t)v90;
  v38 = (uint64_t)v91;
LABEL_50:
  swift_release();
  v41 = v82;
  swift_beginAccess();
  v42 = *(_QWORD *)(v41 + 112);
  v43 = *(_QWORD *)(v42 + 64);
  v84 = v42 + 64;
  v44 = 1 << *(_BYTE *)(v42 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & v43;
  v88 = (unint64_t)(v44 + 63) >> 6;
  v83 = v88 - 1;
  v92 = v42;
  result = swift_bridgeObjectRetain();
  v47 = 0;
  v87 = (char *)(MEMORY[0x24BEE4AD8] + 8);
  while (2)
  {
    if (v46)
    {
      v49 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v94 = v47;
      v50 = v49 | (v47 << 6);
      goto LABEL_55;
    }
    v56 = v47 + 1;
    if (__OFADD__(v47, 1))
      goto LABEL_131;
    if (v56 >= v88)
      goto LABEL_66;
    v57 = *(_QWORD *)(v84 + 8 * v56);
    if (!v57)
    {
      v47 += 2;
      if (v56 + 1 >= v88)
      {
LABEL_78:
        v94 = v56;
        goto LABEL_67;
      }
      v57 = *(_QWORD *)(v84 + 8 * v47);
      if (v57)
      {
LABEL_62:
        v56 = v47;
        goto LABEL_59;
      }
      if (v56 + 2 < v88)
      {
        v57 = *(_QWORD *)(v84 + 8 * (v56 + 2));
        if (v57)
        {
          v56 += 2;
          goto LABEL_59;
        }
        v47 = v56 + 3;
        if (v56 + 3 < v88)
        {
          v57 = *(_QWORD *)(v84 + 8 * v47);
          if (v57)
            goto LABEL_62;
          while (1)
          {
            v56 = v47 + 1;
            if (__OFADD__(v47, 1))
              goto LABEL_136;
            if (v56 >= v88)
              break;
            v57 = *(_QWORD *)(v84 + 8 * v56);
            ++v47;
            if (v57)
              goto LABEL_59;
          }
          v56 = v83;
          goto LABEL_78;
        }
        v94 = v56 + 2;
LABEL_67:
        v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v38, 1, 1, v58);
        v46 = 0;
        goto LABEL_68;
      }
LABEL_66:
      v94 = v47;
      goto LABEL_67;
    }
LABEL_59:
    v46 = (v57 - 1) & v57;
    v50 = __clz(__rbit64(v57)) + (v56 << 6);
    v94 = v56;
LABEL_55:
    v51 = v92;
    v52 = *(_QWORD *)(v92 + 48);
    v53 = sub_22655C140();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v38, v52 + *(_QWORD *)(*(_QWORD *)(v53 - 8) + 72) * v50, v53);
    v54 = *(_QWORD *)(v51 + 56);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
    *(_QWORD *)(v38 + *(int *)(v55 + 48)) = *(_QWORD *)(v54 + 8 * v50);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v38, 0, 1, v55);
    swift_retain();
LABEL_68:
    sub_22644ED88(v38, v39);
    v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v39, 1, v59) != 1)
    {
      sub_2264653F8(a1, v98, a3);
      swift_release();
      v48 = sub_22655C140();
      v39 = (uint64_t)v90;
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v90, v48);
      v38 = (uint64_t)v91;
      v47 = v94;
      continue;
    }
    break;
  }
  swift_release();
  v60 = v82;
  swift_beginAccess();
  v61 = *(_QWORD *)(v60 + 104);
  v62 = *(_QWORD *)(v61 + 64);
  v91 = (char *)(v61 + 64);
  v63 = 1 << *(_BYTE *)(v61 + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  k = v64 & v62;
  v92 = (unint64_t)(v63 + 63) >> 6;
  v94 = v61;
  result = swift_bridgeObjectRetain();
  v66 = 0;
  v90 = (char *)(MEMORY[0x24BEE4AD8] + 8);
  if (k)
    goto LABEL_84;
  while (2)
  {
    v27 = __OFADD__(v66++, 1);
    if (v27)
      goto LABEL_129;
    if (v66 >= v92)
      break;
    v67 = *(_QWORD *)&v91[8 * v66];
    if (v67)
      goto LABEL_97;
    v68 = v66 + 1;
    if (v66 + 1 >= v92)
      break;
    v67 = *(_QWORD *)&v91[8 * v68];
    if (v67)
      goto LABEL_96;
    v68 = v66 + 2;
    if (v66 + 2 >= v92)
      break;
    v67 = *(_QWORD *)&v91[8 * v68];
    if (v67)
      goto LABEL_96;
    v68 = v66 + 3;
    if (v66 + 3 >= v92)
      break;
    v67 = *(_QWORD *)&v91[8 * v68];
    if (v67)
      goto LABEL_96;
    v68 = v66 + 4;
    if (v66 + 4 < v92)
    {
      v67 = *(_QWORD *)&v91[8 * v68];
      if (!v67)
      {
        while (1)
        {
          v66 = v68 + 1;
          if (__OFADD__(v68, 1))
            break;
          if (v66 >= v92)
            goto LABEL_103;
          v67 = *(_QWORD *)&v91[8 * v66];
          ++v68;
          if (v67)
            goto LABEL_97;
        }
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
LABEL_96:
      v66 = v68;
LABEL_97:
      for (k = (v67 - 1) & v67; ; k &= k - 1)
      {
        swift_retain();
        sub_22645066C(a1, v98, a3);
        result = swift_release();
        if (!k)
          break;
LABEL_84:
        ;
      }
      continue;
    }
    break;
  }
LABEL_103:
  swift_release();
  v69 = v82;
  swift_beginAccess();
  v70 = *(_QWORD *)(v69 + 128);
  v73 = *(_QWORD *)(v70 + 64);
  v72 = v70 + 64;
  v71 = v73;
  v74 = 1 << *(_BYTE *)(*(_QWORD *)(v69 + 128) + 32);
  v75 = -1;
  if (v74 < 64)
    v75 = ~(-1 << v74);
  v76 = v75 & v71;
  v77 = (unint64_t)(v74 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v78 = 0;
  while (2)
  {
    if (v76)
    {
      v76 &= v76 - 1;
LABEL_107:
      swift_retain();
      sub_22654B230();
      result = swift_release();
      continue;
    }
    break;
  }
  v27 = __OFADD__(v78++, 1);
  if (v27)
    goto LABEL_130;
  if (v78 >= v77)
    return swift_release();
  v79 = *(_QWORD *)(v72 + 8 * v78);
  if (v79)
  {
LABEL_121:
    v76 = (v79 - 1) & v79;
    goto LABEL_107;
  }
  v80 = v78 + 1;
  if (v78 + 1 >= v77)
    return swift_release();
  v79 = *(_QWORD *)(v72 + 8 * v80);
  if (v79)
    goto LABEL_120;
  v80 = v78 + 2;
  if (v78 + 2 >= v77)
    return swift_release();
  v79 = *(_QWORD *)(v72 + 8 * v80);
  if (v79)
    goto LABEL_120;
  v80 = v78 + 3;
  if (v78 + 3 >= v77)
    return swift_release();
  v79 = *(_QWORD *)(v72 + 8 * v80);
  if (v79)
    goto LABEL_120;
  v80 = v78 + 4;
  if (v78 + 4 >= v77)
    return swift_release();
  v79 = *(_QWORD *)(v72 + 8 * v80);
  if (v79)
  {
LABEL_120:
    v78 = v80;
    goto LABEL_121;
  }
  while (1)
  {
    v78 = v80 + 1;
    if (__OFADD__(v80, 1))
      break;
    if (v78 >= v77)
      return swift_release();
    v79 = *(_QWORD *)(v72 + 8 * v78);
    ++v80;
    if (v79)
      goto LABEL_121;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

uint64_t sub_226449388(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int v39;
  int v40;
  char v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = sub_22655CB84();
  v61 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)v48 - v6;
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v48[0] = (char *)v48 - v9;
  v10 = type metadata accessor for CapturedRoom.Object(0);
  v49 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v57 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CapturedRoom.Surface(0);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v48 - v16;
  v52 = a1;
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = MEMORY[0x24BEE4AD8];
  v58 = v2;
  v51 = v15;
  v50 = v4;
  if (v19)
  {
    v21 = v18 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    *(_QWORD *)&v60 = *(_QWORD *)(v15 + 72);
    v48[1] = v18;
    swift_bridgeObjectRetain();
    v53 = "nBorder";
    *(_QWORD *)&v22 = 136315138;
    v55 = v22;
    v54 = (char *)(v20 + 8);
    do
    {
      sub_22643D704(v21, (uint64_t)v17, type metadata accessor for CapturedRoom.Surface);
      sub_22644AA84((uint64_t)v17);
      sub_22643D748((uint64_t)v17, type metadata accessor for CapturedRoom.Surface);
      v21 += v60;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  v23 = v52[5];
  v24 = *(_QWORD *)(v23 + 16);
  v25 = (uint64_t)v57;
  if (v24)
  {
    v26 = v23 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v27 = *(_QWORD *)(v49 + 72);
    v53 = (char *)v52[5];
    swift_bridgeObjectRetain();
    v54 = "nBorder";
    *(_QWORD *)&v28 = 136315138;
    v60 = v28;
    *(_QWORD *)&v55 = MEMORY[0x24BEE4AD8] + 8;
    do
    {
      sub_22643D704(v26, v25, type metadata accessor for CapturedRoom.Object);
      sub_22644CD74(v25);
      sub_22643D748(v25, type metadata accessor for CapturedRoom.Object);
      v26 += v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
  }
  v63 = v52[3];
  swift_bridgeObjectRetain();
  v29 = swift_bridgeObjectRetain();
  sub_22646A3FC(v29);
  v30 = swift_bridgeObjectRetain();
  sub_22646A3FC(v30);
  v32 = *(_QWORD *)(v63 + 16);
  if (v32)
  {
    v33 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    *(_QWORD *)&v55 = v63;
    v34 = v63 + v33;
    v35 = *(_QWORD *)(v51 + 72);
    v57 = "nBorder";
    *(_QWORD *)&v31 = 136315138;
    v60 = v31;
    v59 = (char *)(MEMORY[0x24BEE4AD8] + 8);
    v36 = v62;
    v37 = (unsigned __int8 *)v56;
    do
    {
      sub_22643D704(v34, (uint64_t)v37, type metadata accessor for CapturedRoom.Surface);
      v38 = *v37;
      v39 = v38 - 6;
      v40 = v38 & 1;
      if (v39 <= 0xFFFFFFFB && v40 == 0)
        v42 = *(_BYTE *)(v36 + 88) ^ 1;
      else
        v42 = 0;
      if (*(_BYTE *)(v36 + 136) == 1 || (v42 & 1) != 0)
      {
        sub_22644BB20((uint64_t)v37);
      }
      else if (*(_BYTE *)(v36 + 88) == 1)
      {
        sub_22644B7C0((uint64_t)v37);
      }
      sub_22643D748((uint64_t)v37, type metadata accessor for CapturedRoom.Surface);
      v34 += v35;
      --v32;
    }
    while (v32);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v36 = v62;
  }
  if (*(_BYTE *)(v36 + 88) == 1)
  {
    v44 = v52[4];
    v45 = *(_QWORD *)(v44 + 16);
    if (v45)
    {
      v46 = v44 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
      v47 = *(_QWORD *)(v51 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_22644C45C(v46);
        v46 += v47;
        --v45;
      }
      while (v45);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_22644A16C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_22655CB84();
  if (*(_BYTE *)(v1 + 88) == 1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v8 = *(_QWORD *)(v6 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_22644C45C(v7);
        v7 += v8;
        --v5;
      }
      while (v5);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_22644A218(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = v1;
  v4 = type metadata accessor for CapturedRoom.Object(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v80 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22655C140();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v77 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v71 - v11;
  v81 = type metadata accessor for CapturedRoom.Surface(0);
  v74 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v82 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v71 - v15;
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 16);
  v75 = a1;
  v76 = v2;
  v83 = v8;
  v84 = v7;
  if (v18)
  {
    v72 = v4;
    v73 = v5;
    v79 = &v16[*(int *)(v81 + 44)];
    v19 = (uint64_t *)(v2 + 96);
    v20 = v17 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
    v78 = *(_QWORD *)(v74 + 72);
    v71 = v17;
    swift_bridgeObjectRetain();
    do
    {
      sub_22643D704(v20, (uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v79, v7);
      sub_22643D748((uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v21 = sub_226534858((uint64_t)v12);
      v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v25 = *v19;
        v85 = *v19;
        *v19 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_226547A88();
          v25 = v85;
        }
        v26 = *(_QWORD *)(v25 + 48) + *(_QWORD *)(v8 + 72) * v21;
        v7 = v84;
        v27 = *(void (**)(unint64_t, uint64_t))(v83 + 8);
        v27(v26, v84);
        v28 = v85;
        sub_2265462EC(v21, v85);
        *v19 = v28;
        swift_bridgeObjectRelease();
        v27((unint64_t)v12, v7);
        v8 = v83;
        swift_endAccess();
        type metadata accessor for WallEntity();
        swift_retain();
        sub_22655C224();
        swift_release_n();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
        swift_endAccess();
      }
      v20 += v78;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    a1 = v75;
    v2 = v76;
    v4 = v72;
    v5 = v73;
  }
  v29 = a1[5];
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v79 = (char *)(v80 + *(int *)(v4 + 32));
    v31 = (uint64_t *)(v2 + 104);
    v32 = v29 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v78 = *(_QWORD *)(v5 + 72);
    v73 = v29;
    swift_bridgeObjectRetain();
    v33 = (uint64_t)v77;
    do
    {
      v34 = v80;
      sub_22643D704(v32, v80, type metadata accessor for CapturedRoom.Object);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v33, v79, v7);
      sub_22643D748(v34, type metadata accessor for CapturedRoom.Object);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v35 = sub_226534858(v33);
      v37 = v36;
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0)
      {
        v38 = swift_isUniquelyReferenced_nonNull_native();
        v39 = *v31;
        v85 = *v31;
        *v31 = 0x8000000000000000;
        if (!v38)
        {
          sub_226547A94();
          v39 = v85;
        }
        v40 = *(_QWORD *)(v39 + 48) + *(_QWORD *)(v8 + 72) * v35;
        v7 = v84;
        v41 = *(void (**)(unint64_t, uint64_t))(v83 + 8);
        v41(v40, v84);
        v42 = v85;
        sub_2265462EC(v35, v85);
        *v31 = v42;
        swift_bridgeObjectRelease();
        v33 = (uint64_t)v77;
        v41((unint64_t)v77, v7);
        v8 = v83;
        swift_endAccess();
        type metadata accessor for ObjectEntity();
        swift_retain();
        sub_22655C224();
        swift_release_n();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v7);
        swift_endAccess();
      }
      v32 += v78;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    a1 = v75;
    v2 = v76;
  }
  v86 = a1[3];
  swift_bridgeObjectRetain();
  v43 = swift_bridgeObjectRetain();
  sub_22646A3FC(v43);
  v44 = swift_bridgeObjectRetain();
  sub_22646A3FC(v44);
  v45 = *(_QWORD *)(v86 + 16);
  if (v45)
  {
    v46 = (uint64_t *)(v2 + 120);
    v47 = (uint64_t *)(v2 + 128);
    v48 = *(unsigned __int8 *)(v74 + 80);
    v80 = v86;
    v49 = v86 + ((v48 + 32) & ~v48);
    v83 = *(_QWORD *)(v74 + 72);
    v50 = type metadata accessor for CapturedRoom.Surface;
    do
    {
      v51 = v82;
      v52 = v50;
      sub_22643D704(v49, v82, v50);
      v53 = v51 + *(int *)(v81 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v54 = sub_226534858(v53);
      v56 = v55;
      swift_bridgeObjectRelease();
      if ((v56 & 1) != 0)
      {
        v57 = swift_isUniquelyReferenced_nonNull_native();
        v58 = *v46;
        v85 = *v46;
        *v46 = 0x8000000000000000;
        if (!v57)
        {
          sub_226547AA0();
          v58 = v85;
        }
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(*(_QWORD *)(v58 + 48) + *(_QWORD *)(v8 + 72) * v54, v84);
        v59 = v85;
        sub_2265462EC(v54, v85);
        *v46 = v59;
        swift_bridgeObjectRelease();
        swift_endAccess();
        type metadata accessor for OpeningEntity();
        swift_retain();
        sub_22655C224();
        swift_release();
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v60 = sub_226534858(v53);
      v62 = v61;
      swift_bridgeObjectRelease();
      if ((v62 & 1) != 0)
      {
        v63 = swift_isUniquelyReferenced_nonNull_native();
        v64 = *v47;
        v85 = *v47;
        *v47 = 0x8000000000000000;
        if (!v63)
        {
          sub_226547AAC();
          v64 = v85;
        }
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(*(_QWORD *)(v64 + 48) + *(_QWORD *)(v8 + 72) * v60, v84);
        v65 = v85;
        sub_2265462EC(v60, v85);
        *v47 = v65;
        swift_bridgeObjectRelease();
        swift_endAccess();
        type metadata accessor for PlaceholderEntity();
        swift_retain();
        sub_22655C224();
        swift_release();
        swift_release_n();
        v50 = v52;
        sub_22643D748(v82, v52);
      }
      else
      {
        swift_endAccess();
        v50 = v52;
        sub_22643D748(v82, v52);
        swift_release();
      }
      v49 += v83;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    v2 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_retain();
  v66 = swift_bridgeObjectRetain();
  v67 = sub_22644E9D8(v66, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (!(v67 >> 62))
  {
    v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v68)
      goto LABEL_36;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = sub_22655D400();
  v68 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_36:
  if (v68 >= 1)
  {
    v70 = 0;
    do
    {
      if ((v67 & 0xC000000000000001) != 0)
        MEMORY[0x2276999E4](v70, v67);
      else
        swift_retain();
      ++v70;
      type metadata accessor for FloorEntity();
      sub_22655C224();
      swift_release();
    }
    while (v68 != v70);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_22644AA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v41;
  float v42;
  id v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t ObjCClassFromMetadata;
  id v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  os_log_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, char *, uint64_t);
  double (**v74)();
  double (*v75)();
  uint64_t (**v76)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double (**v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ObjectType;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  void (*v106)(char *, uint64_t);
  uint8_t *v107;
  os_log_t v108;
  int v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  __n128 v115;
  void (*v116)(char *, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128[3];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_22655CB84();
  v119 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v120 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22655C140();
  v125 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v125 + 64);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v123 = (char *)&v107 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v107 - v13;
  v15 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  v122 = v2 + 96;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 96) + 16)
    || (swift_bridgeObjectRetain(), sub_226534858(v15), v17 = v16, result = swift_bridgeObjectRelease(), (v17 & 1) == 0))
  {
    v124 = v15;
    if (qword_25583F808 != -1)
      swift_once();
    v19 = qword_25585AC80;
    v20 = v125;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 16);
    v21(v14, v124, v8);
    swift_beginAccess();
    v22 = *(_QWORD *)(v19 + 24);
    if (*(_QWORD *)(v22 + 16))
    {
      swift_bridgeObjectRetain();
      v23 = sub_226534858((uint64_t)v14);
      if ((v24 & 1) != 0)
      {
        v113 = v6;
        v116 = v21;
        v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
        swift_retain();
        swift_bridgeObjectRelease();
        v112 = *(void (**)(char *, uint64_t))(v20 + 8);
        v112(v14, v8);
        v26 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        v117 = v25;
        sub_22644B5AC();
        v28 = v27;
        v30 = v29;
        v32 = v31;
        v114 = v26;
        swift_release();
        v33.i32[0] = 0;
        v34.i32[0] = v32 & 1;
        v35 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v34, v33), 0);
        v34.i64[0] = v28;
        v34.i64[1] = v30;
        __asm { FMOV            V2.4S, #1.0 }
        v115 = (__n128)vbslq_s8(v35, v34, _Q2);
        v41 = *(_QWORD *)(v2 + 144);
        v118 = v2;
        if (v41)
        {
          v42 = *(float *)(v2 + 156);
          type metadata accessor for EdgeEntity();
          swift_allocObject();
          __asm { FMOV            V1.4S, #1.0 }
          v44 = v126;
          v45 = sub_226490F68(v42, _Q1, 1.0, 0.000006);
          v126 = v44;
          v46 = v116;
          if (v44)
          {
            type metadata accessor for Constants();
            ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
            v48 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
            v49 = objc_msgSend(v48, sel_bundleIdentifier);

            if (v49)
            {
              sub_22655CD88();

            }
            v53 = v120;
            v52 = v121;
            sub_22643D680();
            sub_22655D124();
            sub_22655CB90();
            v54 = v126;
            v55 = v126;
            v56 = v54;
            v57 = sub_22655CB6C();
            v58 = sub_22655CFF8();
            v59 = v58;
            if (os_log_type_enabled(v57, v58))
            {
              v109 = v59;
              v50 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
              v108 = v57;
              v60 = (uint8_t *)swift_slowAlloc();
              v61 = swift_slowAlloc();
              v128[0] = v61;
              *(_DWORD *)v60 = 136315138;
              v107 = v60 + 4;
              swift_getErrorValue();
              v62 = sub_22655D5B0();
              v127 = sub_2264F4EC4(v62, v63, v128);
              sub_22655D154();
              swift_bridgeObjectRelease();

              v64 = v108;
              _os_log_impl(&dword_226423000, v108, (os_log_type_t)v109, "Cannot create Edge Entity: %s", v60, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x22769A884](v61, -1, -1);
              MEMORY[0x22769A884](v60, -1, -1);

              (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
            }
            else
            {
              v50 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);

              (*(void (**)(char *, uint64_t))(v119 + 8))(v53, v52);
            }
            v119 = 0;
            v126 = 0;
          }
          else
          {
            v119 = v45;
            v50 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
          }
          v51 = v124;
        }
        else
        {
          v50 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
          v119 = 0;
          v51 = v124;
          v46 = v116;
        }
        v65 = v125;
        v66 = v123;
        v46(v123, v51, v8);
        v125 = swift_allocObject();
        swift_weakInit();
        v46(v50, (uint64_t)v66, v8);
        v67 = *(unsigned __int8 *)(v65 + 80);
        v68 = (v67 + 16) & ~v67;
        v120 = (char *)(v9 + 7);
        v69 = (v9 + 7 + v68) & 0xFFFFFFFFFFFFFFF8;
        v70 = (v69 + 31) & 0xFFFFFFFFFFFFFFF0;
        v71 = swift_allocObject();
        v72 = v71 + v68;
        v73 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 32);
        v73(v72, v50, v8);
        v74 = (double (**)())(v71 + v69);
        v75 = (double (*)())v114;
        *v74 = sub_22644EE84;
        v74[1] = v75;
        *(__n128 *)(v71 + v70) = v115;
        v121 = v71;
        v76 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v71
                                                                                    + ((v70 + 23) & 0xFFFFFFFFFFFFFFF0));
        v77 = v125;
        *v76 = sub_22644EE8C;
        v76[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v77;
        v78 = swift_allocObject();
        v79 = v118;
        swift_weakInit();
        v116(v50, (uint64_t)v123, v8);
        v80 = (v67 + 24) & ~v67;
        v81 = (unint64_t)&v120[v80] & 0xFFFFFFFFFFFFFFF8;
        v82 = swift_allocObject();
        *(_QWORD *)(v82 + 16) = v78;
        v73(v82 + v80, v50, v8);
        v83 = v82;
        v84 = (double (**)())(v82 + v81);
        *v84 = sub_22644EE84;
        v84[1] = v75;
        v85 = (uint64_t)v113;
        sub_22643D7A0(v117 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t)v113, (uint64_t *)&unk_255848090);
        v86 = type metadata accessor for CapturedRoom.Surface.Curve(0);
        LODWORD(v81) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v85, 1, v86);
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        sub_22643D7E4(v85, (uint64_t *)&unk_255848090);
        v87 = MEMORY[0x22769A944](v79 + 16);
        v111 = v8;
        v110 = v50;
        if ((_DWORD)v81 == 1)
        {
          v88 = v83;
          if (v87)
          {
            v89 = v118;
            v90 = *(_QWORD *)(v118 + 24);
            ObjectType = swift_getObjectType();
            v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(ObjectType, v90);
            goto LABEL_25;
          }
        }
        else
        {
          v88 = v83;
          if (v87)
          {
            v89 = v118;
            v93 = *(_QWORD *)(v118 + 24);
            v94 = swift_getObjectType();
            v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 16))(v94, v93);
LABEL_25:
            v95 = v92;
            swift_unknownObjectRelease();
            v96 = *(_BYTE *)(v89 + 88);
            if (v95 != 10)
            {
LABEL_29:
              type metadata accessor for WallEntity();
              v97 = swift_allocObject();
              *(_DWORD *)(v97 + qword_255846748) = 1065353216;
              *(_DWORD *)(v97 + qword_255846750) = 1065353216;
              v98 = v119;
              swift_retain();
              v99 = v117;
              swift_retain();
              swift_retain();
              v100 = v121;
              swift_retain();
              sub_22655C0C8();
              v101 = v118;
              swift_retain();
              LOBYTE(v128[0]) = 1;
              v102 = sub_226467CDC(v99, (uint64_t)sub_22644EE18, v100, (uint64_t)sub_22644EE30, v88, v98, v96, v95, v115, 0, 1, v97, v101);
              swift_release();
              if (v102)
              {
                v103 = (uint64_t)v110;
                v104 = v111;
                v116(v110, v124, v111);
                swift_beginAccess();
                swift_retain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v127 = *(_QWORD *)(v101 + 96);
                *(_QWORD *)(v101 + 96) = 0x8000000000000000;
                sub_2265225D4(v102, v103, isUniquelyReferenced_nonNull_native);
                *(_QWORD *)(v101 + 96) = v127;
                swift_bridgeObjectRelease();
                v106 = v112;
                v112((char *)v103, v104);
                swift_endAccess();
                type metadata accessor for ScanContainer();
                sub_22655C230();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v106(v123, v104);
                return swift_release_n();
              }
              else
              {
                v112(v123, v111);
                swift_release_n();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                return swift_release();
              }
            }
LABEL_28:
            v95 = 0;
            goto LABEL_29;
          }
        }
        v96 = *(_BYTE *)(v118 + 88);
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v14, v8);
  }
  return result;
}

double sub_22644B5AC()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
    __asm { BR              X10 }
  return 0.0;
}

uint64_t sub_22644B6D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result + 32;
    swift_beginAccess();
    sub_226438600(v6, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 112))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_22644B7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v31[2];
  uint64_t v32;

  v3 = v1;
  v5 = sub_22655C140();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v31[0] = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v31 - v12;
  v14 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v3 + 120) + 16))
  {
    swift_bridgeObjectRetain();
    sub_226534858(v14);
    v16 = v15;
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      return result;
  }
  v31[1] = v2;
  if (qword_25583F808 != -1)
    swift_once();
  v18 = qword_25585AC80;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v13, v14, v5);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v18 + 24) + 16))
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  swift_bridgeObjectRetain();
  sub_226534858((uint64_t)v13);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  swift_retain();
  swift_bridgeObjectRelease();
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v13, v5);
  swift_release();
  v22 = qword_25585AC80;
  v19(v10, v14, v5);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v22 + 24) + 16))
    return ((uint64_t (*)(char *, uint64_t))v21)(v10, v5);
  swift_bridgeObjectRetain();
  sub_226534858((uint64_t)v10);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v21)(v10, v5);
  }
  swift_retain();
  swift_bridgeObjectRelease();
  v21(v10, v5);
  v24 = *(_BYTE *)(v3 + 88);
  type metadata accessor for PlaceholderEntity();
  swift_allocObject();
  v25 = swift_retain();
  v26 = sub_22654AEBC(v25, v24);
  if (v26)
  {
    v27 = v26;
    v28 = (void (*)(uint64_t, uint64_t))v21;
    v29 = v31[0];
    v19((char *)v31[0], v14, v5);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = *(_QWORD *)(v3 + 128);
    *(_QWORD *)(v3 + 128) = 0x8000000000000000;
    sub_22652277C(v27, v29, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 128) = v32;
    swift_bridgeObjectRelease();
    v28(v29, v5);
    swift_endAccess();
    type metadata accessor for ScanContainer();
    sub_22655C230();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_22644BB20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  double (**v47)();
  double (*v48)();
  uint64_t (**v49)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double (**v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v5);
  v87 = (uint64_t)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22655C140();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v88 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v89 = (char *)v77 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v77 - v13;
  v15 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  v86 = v3 + 120;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 120) + 16)
    || (swift_bridgeObjectRetain(), sub_226534858(v15), v17 = v16, result = swift_bridgeObjectRelease(), (v17 & 1) == 0))
  {
    v90 = v15;
    if (qword_25583F808 != -1)
      swift_once();
    v19 = qword_25585AC80;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v20(v14, v90, v7);
    swift_beginAccess();
    v21 = *(_QWORD *)(v19 + 24);
    if (*(_QWORD *)(v21 + 16))
    {
      swift_bridgeObjectRetain();
      v22 = sub_226534858((uint64_t)v14);
      if ((v23 & 1) != 0)
      {
        v77[1] = v2;
        v80 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
        swift_retain();
        swift_bridgeObjectRelease();
        v77[0] = *(_QWORD *)(v8 + 8);
        ((void (*)(char *, uint64_t))v77[0])(v14, v7);
        v24 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        v79 = v24;
        sub_22644C248();
        v26 = v25;
        v28 = v27;
        v30 = v29;
        swift_release();
        v31.i32[0] = 0;
        v32.i32[0] = v30 & 1;
        v33 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v32, v31), 0);
        v32.i64[0] = v26;
        v32.i64[1] = v28;
        __asm { FMOV            V2.4S, #1.0 }
        v84 = (__n128)vbslq_s8(v33, v32, _Q2);
        v39 = v89;
        v20(v89, v90, v7);
        v83 = swift_allocObject();
        swift_weakInit();
        v85 = v3;
        v40 = v88;
        v20(v88, (uint64_t)v39, v7);
        v41 = *(unsigned __int8 *)(v8 + 80);
        v42 = (v41 + 16) & ~v41;
        v78 = v9 + 7;
        v43 = (v9 + 7 + v42) & 0xFFFFFFFFFFFFFFF8;
        v82 = (void (*)(char *, char *, uint64_t))v20;
        v44 = (v43 + 31) & 0xFFFFFFFFFFFFFFF0;
        v45 = swift_allocObject();
        v46 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
        v46(v45 + v42, v40, v7);
        v47 = (double (**)())(v45 + v43);
        v48 = (double (*)())v79;
        *v47 = sub_22644EE5C;
        v47[1] = v48;
        *(__n128 *)(v45 + v44) = v84;
        v81 = v45;
        v49 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v45
                                                                                    + ((v44 + 23) & 0xFFFFFFFFFFFFFFF0));
        v50 = v83;
        *v49 = sub_22644EE64;
        v49[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v50;
        v51 = swift_allocObject();
        swift_weakInit();
        v82(v40, v89, v7);
        v52 = (v41 + 24) & ~v41;
        v53 = (v78 + v52) & 0xFFFFFFFFFFFFFFF8;
        v54 = swift_allocObject();
        *(_QWORD *)(v54 + 16) = v51;
        v55 = v40;
        v56 = v85;
        v46(v54 + v52, v55, v7);
        v57 = v80;
        v58 = (double (**)())(v54 + v53);
        *v58 = sub_22644EE5C;
        v58[1] = v48;
        v59 = v87;
        sub_22643D7A0(v57 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, v87, (uint64_t *)&unk_255848090);
        v60 = type metadata accessor for CapturedRoom.Surface.Curve(0);
        LODWORD(v53) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v59, 1, v60);
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        sub_22643D7E4(v59, (uint64_t *)&unk_255848090);
        v61 = MEMORY[0x22769A944](v56 + 16);
        if ((_DWORD)v53 == 1)
        {
          if (v61)
          {
            v62 = *(_QWORD *)(v56 + 24);
            ObjectType = swift_getObjectType();
            v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 24))(ObjectType, v62);
            goto LABEL_14;
          }
        }
        else if (v61)
        {
          v65 = *(_QWORD *)(v56 + 24);
          v66 = swift_getObjectType();
          v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 32))(v66, v65);
LABEL_14:
          v67 = v64;
          swift_unknownObjectRelease();
          v68 = *(_BYTE *)(v56 + 88);
          if (v67 != 10)
          {
LABEL_18:
            type metadata accessor for OpeningEntity();
            v69 = swift_allocObject();
            *(_DWORD *)(v69 + qword_255846748) = 1065353216;
            *(_DWORD *)(v69 + qword_255846750) = 1065353216;
            swift_retain();
            swift_retain();
            v70 = v81;
            swift_retain();
            sub_22655C0C8();
            swift_retain();
            v91 = 1;
            v71 = sub_2264685CC(v57, (uint64_t)sub_22644EE18, v70, (uint64_t)sub_22644EE30, v54, 0, v68, v67, v84, 0, 1, v69, v56);
            swift_release();
            if (v71)
            {
              v72 = v56;
              v73 = (uint64_t)v88;
              v82(v88, (char *)v90, v7);
              swift_beginAccess();
              swift_retain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v92 = *(_QWORD *)(v72 + 120);
              *(_QWORD *)(v72 + 120) = 0x8000000000000000;
              sub_226522768(v71, v73, isUniquelyReferenced_nonNull_native);
              *(_QWORD *)(v72 + 120) = v92;
              swift_bridgeObjectRelease();
              v75 = v73;
              v76 = (void (*)(char *, uint64_t))v77[0];
              ((void (*)(uint64_t, uint64_t))v77[0])(v75, v7);
              swift_endAccess();
              type metadata accessor for ScanContainer();
              sub_22655C230();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v76(v89, v7);
              return swift_release_n();
            }
            else
            {
              ((void (*)(char *, uint64_t))v77[0])(v89, v7);
              swift_release_n();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              return swift_release();
            }
          }
LABEL_17:
          v67 = 0;
          goto LABEL_18;
        }
        v68 = *(_BYTE *)(v56 + 88);
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
  return result;
}

double sub_22644C248()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
    __asm { BR              X10 }
  return 0.0;
}

uint64_t sub_22644C370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result + 32;
    swift_beginAccess();
    sub_226438600(v6, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 120))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_22644C45C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  __n128 v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, char *, uint64_t *);
  double (**v48)();
  double (*v49)();
  uint64_t (**v50)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double (*v54)();
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  double (**v60)();
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  void (*v69)(char *, uint64_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  _QWORD *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  _QWORD *v81;
  uint64_t *v82;
  char *v83;
  char v84;
  uint64_t v85;

  v2 = v1;
  v4 = sub_22655C140();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v83 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v70 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v70 - v11;
  v13 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  v81 = v2 + 14;
  swift_beginAccess();
  if (*(_QWORD *)(v2[14] + 16))
  {
    swift_bridgeObjectRetain();
    sub_226534858(v13);
    v15 = v14;
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return result;
  }
  if (qword_25583F808 != -1)
    swift_once();
  v17 = qword_25585AC80;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, v13, v4);
  swift_beginAccess();
  v19 = *(_QWORD *)(v17 + 24);
  if (!*(_QWORD *)(v19 + 16))
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  swift_bridgeObjectRetain();
  v20 = sub_226534858((uint64_t)v12);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  v80 = v18;
  v76 = v13;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  v74 = *(void (**)(char *, uint64_t))(v5 + 8);
  v74(v12, v4);
  v23 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  v75 = v22;
  sub_22644CB60();
  v25 = v24;
  v27 = v26;
  LOBYTE(v22) = v28;
  v77 = v23;
  swift_release();
  if ((v22 & 1) != 0)
  {
    swift_beginAccess();
    v31 = v2[7];
    v30 = v2[8];
    v32 = __swift_project_boxed_opaque_existential_1(v2 + 4, v31);
    v82 = &v70;
    v33 = *(_QWORD *)(v31 - 8);
    v34 = MEMORY[0x24BDAC7A8](v32);
    v36 = (char *)&v70 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v33 + 16))(v36, v34);
    v37.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v30 + 48))(v31, v30);
    v78 = v37;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v31);
  }
  else
  {
    v29.n128_u64[0] = v25;
    v29.n128_u64[1] = v27;
    v78 = v29;
  }
  v38 = (void (*)(char *, char *, uint64_t))v80;
  v80(v9, v76, v4);
  v70 = swift_allocObject();
  swift_weakInit();
  v79 = v2;
  v82 = (uint64_t *)v4;
  v39 = v4;
  v40 = v83;
  v38(v83, v9, v39);
  v41 = *(unsigned __int8 *)(v5 + 80);
  v42 = (v41 + 16) & ~v41;
  v71 = v6 + 7;
  v43 = (v6 + 7 + v42) & 0xFFFFFFFFFFFFFFF8;
  v44 = v9;
  v45 = (v43 + 31) & 0xFFFFFFFFFFFFFFF0;
  v46 = swift_allocObject();
  v47 = *(void (**)(uint64_t, char *, uint64_t *))(v5 + 32);
  v47(v46 + v42, v40, v82);
  v48 = (double (**)())(v46 + v43);
  v49 = (double (*)())v77;
  *v48 = sub_22644EE34;
  v48[1] = v49;
  *(__n128 *)(v46 + v45) = v78;
  v72 = v46;
  v50 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v46 + ((v45 + 23) & 0xFFFFFFFFFFFFFFF0));
  v51 = v70;
  *v50 = sub_22644EE3C;
  v50[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v51;
  v52 = swift_allocObject();
  swift_weakInit();
  v73 = v44;
  v80(v40, (uint64_t)v44, (uint64_t)v82);
  v53 = (v41 + 24) & ~v41;
  v54 = v49;
  v55 = (v71 + v53) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = v52;
  v57 = v40;
  v58 = v82;
  v59 = (uint64_t)v79;
  v47(v56 + v53, v57, v82);
  v60 = (double (**)())(v56 + v55);
  *v60 = sub_22644EE34;
  v60[1] = v54;
  LODWORD(v55) = *(unsigned __int8 *)(v59 + 88);
  type metadata accessor for FloorEntity();
  v61 = swift_allocObject();
  if ((_DWORD)v55 == 1)
  {
    swift_retain_n();
    swift_retain_n();
    v62 = v75;
    swift_retain();
    swift_retain();
    v63 = v72;
    swift_retain();
    swift_retain();
    v84 = 0;
    v64 = sub_226468600(v62, (uint64_t)sub_22644EE18, v63, (uint64_t)sub_22644EE30, v56, 0, 1, 8, v78, 1042536202, 0, v61, v59);
    if (v64)
    {
      v65 = v64;
      v66 = (uint64_t)v83;
      v80(v83, v76, (uint64_t)v58);
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85 = *(_QWORD *)(v59 + 112);
      *(_QWORD *)(v59 + 112) = 0x8000000000000000;
      sub_226522F50(v65, v66, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v59 + 112) = v85;
      swift_bridgeObjectRelease();
      v68 = v66;
      v69 = (void (*)(char *, uint64_t *))v74;
      v74((char *)v68, (uint64_t)v58);
      swift_endAccess();
      type metadata accessor for ScanContainer();
      sub_22655C230();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v69(v73, v58);
      return swift_release_n();
    }
  }
  else
  {
    swift_deallocPartialClassInstance();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
  }
  v74(v73, (uint64_t)v58);
  swift_release_n();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

double sub_22644CB60()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
    __asm { BR              X10 }
  return 0.0;
}

uint64_t sub_22644CC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result + 32;
    swift_beginAccess();
    sub_226438600(v6, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 128))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_22644CD74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  __n128 v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, char *, uint64_t);
  double (**v48)();
  double (*v49)();
  uint64_t (**v50)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  double (**v58)();
  float v59;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t ObjectType;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __n128 v89;
  uint64_t *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  char v97;

  v2 = v1;
  v4 = sub_22655C140();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v93 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v81 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v81 - v11;
  v13 = a1 + *(int *)(type metadata accessor for CapturedRoom.Object(0) + 32);
  v92 = v2 + 13;
  swift_beginAccess();
  if (*(_QWORD *)(v2[13] + 16))
  {
    swift_bridgeObjectRetain();
    sub_226534858(v13);
    v15 = v14;
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return result;
  }
  v94 = v13;
  if (qword_25583F808 != -1)
    swift_once();
  v17 = qword_25585AC80;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, v94, v4);
  swift_beginAccess();
  v19 = *(_QWORD *)(v17 + 24);
  if (!*(_QWORD *)(v19 + 16))
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  swift_bridgeObjectRetain();
  v20 = sub_226534858((uint64_t)v12);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  v91 = v18;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  v82 = *(void (**)(char *, uint64_t))(v5 + 8);
  v82(v12, v4);
  v23 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  v83 = v22;
  sub_22644D534();
  v25 = v24;
  v27 = v26;
  LOBYTE(v22) = v28;
  v87 = v23;
  swift_release();
  if ((v22 & 1) != 0)
  {
    swift_beginAccess();
    v30 = v2[7];
    v31 = v2[8];
    v32 = __swift_project_boxed_opaque_existential_1(v2 + 4, v30);
    v90 = &v81;
    v33 = v9;
    v34 = *(_QWORD *)(v30 - 8);
    v35 = MEMORY[0x24BDAC7A8](v32);
    v37 = (char *)&v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v34 + 16))(v37, v35);
    v38.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v31 + 56))(v30, v31);
    v89 = v38;
    v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v9 = v33;
    v39(v37, v30);
  }
  else
  {
    v29.n128_u64[0] = v25;
    v29.n128_u64[1] = v27;
    v89 = v29;
  }
  v40 = (void (*)(char *, char *, uint64_t))v91;
  v88 = v9;
  v91(v9, v94, v4);
  v86 = swift_allocObject();
  swift_weakInit();
  v90 = v2;
  v41 = v93;
  v40(v93, v9, v4);
  v42 = *(unsigned __int8 *)(v5 + 80);
  v43 = (v42 + 16) & ~v42;
  v84 = v6 + 7;
  v44 = (v6 + 7 + v43) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v44 + 31) & 0xFFFFFFFFFFFFFFF0;
  v46 = swift_allocObject();
  v47 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v47(v46 + v43, v41, v4);
  v48 = (double (**)())(v46 + v44);
  v49 = (double (*)())v87;
  *v48 = sub_22644EDF4;
  v48[1] = v49;
  *(__n128 *)(v46 + v45) = v89;
  v85 = v46;
  v50 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v46 + ((v45 + 23) & 0xFFFFFFFFFFFFFFF0));
  v51 = v86;
  *v50 = sub_22644EDFC;
  v50[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v51;
  v52 = swift_allocObject();
  swift_weakInit();
  v91(v41, (uint64_t)v88, v4);
  v53 = (v42 + 24) & ~v42;
  v54 = (v84 + v53) & 0xFFFFFFFFFFFFFFF8;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = v52;
  v56 = v41;
  v57 = (uint64_t)v90;
  v47(v55 + v53, v56, v4);
  v58 = (double (**)())(v55 + v54);
  *v58 = sub_22644EDF4;
  v58[1] = v49;
  if (*(_QWORD *)(v57 + 144))
  {
    v59 = *(float *)(v57 + 156);
    type metadata accessor for EdgeEntity();
    swift_allocObject();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    __asm { FMOV            V1.4S, #1.0 }
    v65 = v95;
    v66 = sub_226490F68(v59, _Q1, 1.0, 0.000006);
    v67 = v65;
    v68 = v83;
    if (v65)
    {

      v69 = 0;
      v67 = 0;
    }
    else
    {
      v69 = v66;
    }
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    v69 = 0;
    v67 = v95;
    v68 = v83;
  }
  LODWORD(v95) = *(unsigned __int8 *)(v57 + 88);
  if (MEMORY[0x22769A944](v57 + 16))
  {
    v70 = *(_QWORD *)(v57 + 24);
    ObjectType = swift_getObjectType();
    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 40))(ObjectType, v70);
    swift_unknownObjectRelease();
  }
  else
  {
    v72 = 0;
  }
  type metadata accessor for ObjectEntity();
  v73 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  v74 = v85;
  swift_retain();
  swift_retain();
  v97 = 1;
  v75 = sub_226467D10(v68, (uint64_t)sub_22644EE18, v74, (uint64_t)sub_22644EE30, v55, v69, (char)v95, v72, v89, 0, 1, v73, v57);
  swift_release();
  if (v75)
  {
    v95 = v67;
    v76 = v57;
    v77 = (uint64_t)v93;
    v91(v93, v94, v4);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v96 = *(_QWORD *)(v76 + 104);
    *(_QWORD *)(v76 + 104) = 0x8000000000000000;
    sub_2265225E8(v75, v77, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v76 + 104) = v96;
    swift_bridgeObjectRelease();
    v79 = v77;
    v80 = v82;
    v82((char *)v79, v4);
    swift_endAccess();
    type metadata accessor for ScanContainer();
    sub_22655C230();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v80(v88, v4);
    return swift_release_n();
  }
  else
  {
    v82(v88, v4);
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
}

double sub_22644D534()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
    __asm { BR              X10 }
  return 0.0;
}

uint64_t sub_22644D7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result + 32;
    swift_beginAccess();
    sub_226438600(v6, (uint64_t)v10);
    v7 = v11;
    v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 136))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_22644D8E8(__n128 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  BOOL v23;
  _BOOL4 v24;
  float v25;
  __n128 v26;
  __int128 v27;
  __n128 v28;

  v26 = a1;
  v6 = sub_22655C140();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  if (*(unsigned __int8 *)(result + 136) - 1 > 1)
  {
LABEL_13:
    swift_release();
    return 0;
  }
  if (qword_25583F808 != -1)
    swift_once();
  v11 = qword_25585AC80;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 24);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v13 = sub_226534858((uint64_t)v9);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v16 = a4(v15);
  v18 = v17;
  v20 = v19;
  swift_release();
  swift_release();
  if ((v20 & 1) != 0)
  {
    v24 = 0;
  }
  else
  {
    v21 = 0;
    *(_QWORD *)&v22 = v16;
    *((_QWORD *)&v22 + 1) = v18;
    while (1)
    {
      v27 = v22;
      v25 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      v28 = v26;
      v23 = v25 == *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      v24 = v23;
      if (v21 == 3)
        break;
      while (1)
      {
        ++v21;
        if (v23)
          break;
        v23 = 0;
        v24 = 0;
        if (v21 == 3)
          return !v24;
      }
    }
  }
  return !v24;
}

void sub_22644DB14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, __n128)@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  __n128 v25;
  _QWORD v26[2];
  __n128 v27;
  void (*v28)(uint64_t, __n128);

  v28 = a5;
  v27 = a7;
  v26[1] = a4;
  v11 = sub_22655C140();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    *(_QWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return;
  }
  v26[0] = a3;
  if (qword_25583F808 != -1)
    swift_once();
  v15 = qword_25585AC80;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  swift_beginAccess();
  v16 = *(_QWORD *)(v15 + 24);
  if (*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    v17 = sub_226534858((uint64_t)v14);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v20 = ((uint64_t (*)(uint64_t))v26[0])(v19);
      v22 = v21;
      v24 = v23;
      swift_release();
      v25 = v27;
      if ((v24 & 1) == 0)
      {
        v25.n128_u64[0] = v20;
        v25.n128_u64[1] = v22;
      }
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v25 = v27;
LABEL_11:
  v28(a1, v25);
}

uint64_t sub_22644DCD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t result;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;

  v1 = sub_22655C86C();
  MEMORY[0x24BDAC7A8](v1);
  v92 = (char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416C0);
  v95 = *(_QWORD *)(v3 - 8);
  v96 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v94 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416C8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v88 - v9;
  v93 = v0 + 12;
  swift_beginAccess();
  v97 = v0;
  v11 = v0[12];
  v14 = *(_QWORD *)(v11 + 64);
  v13 = v11 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v0[12] + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v17 &= v17 - 1;
      goto LABEL_5;
    }
    v21 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    if (v21 >= v18)
      goto LABEL_23;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v20;
    if (!v22)
    {
      v20 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_23;
      v22 = *(_QWORD *)(v13 + 8 * v20);
      if (!v22)
      {
        v20 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_23;
        v22 = *(_QWORD *)(v13 + 8 * v20);
        if (!v22)
        {
          v20 = v21 + 3;
          if (v21 + 3 >= v18)
            goto LABEL_23;
          v22 = *(_QWORD *)(v13 + 8 * v20);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
LABEL_5:
    type metadata accessor for WallEntity();
    swift_retain();
    sub_22655C224();
    result = swift_release();
  }
  v23 = v21 + 4;
  if (v23 < v18)
  {
    v22 = *(_QWORD *)(v13 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        v20 = v23 + 1;
        if (__OFADD__(v23, 1))
          break;
        if (v20 >= v18)
          goto LABEL_23;
        v22 = *(_QWORD *)(v13 + 8 * v20);
        ++v23;
        if (v22)
          goto LABEL_22;
      }
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    v20 = v23;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  v24 = v97;
  v91 = v97 + 15;
  swift_beginAccess();
  v25 = v24[15];
  v28 = *(_QWORD *)(v25 + 64);
  v27 = v25 + 64;
  v26 = v28;
  v29 = 1 << *(_BYTE *)(v24[15] + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v26;
  v32 = (unint64_t)(v29 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v33 = 0;
  while (2)
  {
    if (v31)
    {
      v31 &= v31 - 1;
LABEL_27:
      type metadata accessor for OpeningEntity();
      swift_retain();
      sub_22655C224();
      result = swift_release();
      continue;
    }
    break;
  }
  v34 = v33 + 1;
  if (__OFADD__(v33, 1))
    goto LABEL_120;
  if (v34 < v32)
  {
    v35 = *(_QWORD *)(v27 + 8 * v34);
    ++v33;
    if (!v35)
    {
      v33 = v34 + 1;
      if (v34 + 1 >= v32)
        goto LABEL_45;
      v35 = *(_QWORD *)(v27 + 8 * v33);
      if (!v35)
      {
        v33 = v34 + 2;
        if (v34 + 2 >= v32)
          goto LABEL_45;
        v35 = *(_QWORD *)(v27 + 8 * v33);
        if (!v35)
        {
          v33 = v34 + 3;
          if (v34 + 3 >= v32)
            goto LABEL_45;
          v35 = *(_QWORD *)(v27 + 8 * v33);
          if (!v35)
          {
            v36 = v34 + 4;
            if (v36 >= v32)
              goto LABEL_45;
            v35 = *(_QWORD *)(v27 + 8 * v36);
            if (!v35)
            {
              while (1)
              {
                v33 = v36 + 1;
                if (__OFADD__(v36, 1))
                  break;
                if (v33 >= v32)
                  goto LABEL_45;
                v35 = *(_QWORD *)(v27 + 8 * v33);
                ++v36;
                if (v35)
                  goto LABEL_44;
              }
LABEL_125:
              __break(1u);
              goto LABEL_126;
            }
            v33 = v36;
          }
        }
      }
    }
LABEL_44:
    v31 = (v35 - 1) & v35;
    goto LABEL_27;
  }
LABEL_45:
  swift_release();
  v37 = v97;
  v90 = v97 + 14;
  swift_beginAccess();
  v38 = v37[14];
  v39 = *(_QWORD *)(v38 + 64);
  v98 = v38 + 64;
  v40 = 1 << *(_BYTE *)(v38 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & v39;
  v43 = (unint64_t)(v40 + 63) >> 6;
  v89 = v43 - 1;
  result = swift_bridgeObjectRetain();
  v44 = 0;
  if (!v42)
    goto LABEL_52;
LABEL_50:
  v46 = __clz(__rbit64(v42));
  v42 &= v42 - 1;
  v47 = v46 | (v44 << 6);
LABEL_51:
  v48 = *(_QWORD *)(v38 + 48);
  v49 = sub_22655C140();
  (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v7, v48 + *(_QWORD *)(*(_QWORD *)(v49 - 8) + 72) * v47, v49);
  v50 = *(_QWORD *)(v38 + 56);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
  *(_QWORD *)&v7[*(int *)(v51 + 48)] = *(_QWORD *)(v50 + 8 * v47);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v7, 0, 1, v51);
  swift_retain();
  while (1)
  {
    sub_22644ED88((uint64_t)v7, (uint64_t)v10);
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v10, 1, v56) == 1)
      break;
    type metadata accessor for FloorEntity();
    sub_22655C224();
    swift_release();
    v45 = sub_22655C140();
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v10, v45);
    if (v42)
      goto LABEL_50;
LABEL_52:
    v52 = v44 + 1;
    if (__OFADD__(v44, 1))
      goto LABEL_123;
    if (v52 < v43)
    {
      v53 = *(_QWORD *)(v98 + 8 * v52);
      if (v53)
        goto LABEL_55;
      v54 = v44 + 2;
      ++v44;
      if (v52 + 1 < v43)
      {
        v53 = *(_QWORD *)(v98 + 8 * v54);
        if (v53)
          goto LABEL_58;
        v44 = v52 + 1;
        if (v52 + 2 < v43)
        {
          v53 = *(_QWORD *)(v98 + 8 * (v52 + 2));
          if (v53)
          {
            v52 += 2;
            goto LABEL_55;
          }
          v54 = v52 + 3;
          v44 = v52 + 2;
          if (v52 + 3 < v43)
          {
            v53 = *(_QWORD *)(v98 + 8 * v54);
            if (v53)
            {
LABEL_58:
              v52 = v54;
LABEL_55:
              v42 = (v53 - 1) & v53;
              v47 = __clz(__rbit64(v53)) + (v52 << 6);
              v44 = v52;
              goto LABEL_51;
            }
            while (1)
            {
              v52 = v54 + 1;
              if (__OFADD__(v54, 1))
                goto LABEL_128;
              if (v52 >= v43)
                break;
              v53 = *(_QWORD *)(v98 + 8 * v52);
              ++v54;
              if (v53)
                goto LABEL_55;
            }
            v44 = v89;
          }
        }
      }
    }
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v7, 1, 1, v55);
    v42 = 0;
  }
  swift_release();
  v57 = v97;
  v58 = v97 + 13;
  swift_beginAccess();
  v59 = v57[13];
  v62 = *(_QWORD *)(v59 + 64);
  v61 = v59 + 64;
  v60 = v62;
  v63 = 1 << *(_BYTE *)(v57[13] + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  v65 = v64 & v60;
  v66 = (unint64_t)(v63 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v67 = 0;
  while (2)
  {
    if (v65)
    {
      v65 &= v65 - 1;
LABEL_75:
      type metadata accessor for ObjectEntity();
      swift_retain();
      sub_22655C224();
      result = swift_release();
      continue;
    }
    break;
  }
  v68 = v67 + 1;
  if (__OFADD__(v67, 1))
    goto LABEL_121;
  if (v68 < v66)
  {
    v69 = *(_QWORD *)(v61 + 8 * v68);
    ++v67;
    if (!v69)
    {
      v67 = v68 + 1;
      if (v68 + 1 >= v66)
        goto LABEL_93;
      v69 = *(_QWORD *)(v61 + 8 * v67);
      if (!v69)
      {
        v67 = v68 + 2;
        if (v68 + 2 >= v66)
          goto LABEL_93;
        v69 = *(_QWORD *)(v61 + 8 * v67);
        if (!v69)
        {
          v67 = v68 + 3;
          if (v68 + 3 >= v66)
            goto LABEL_93;
          v69 = *(_QWORD *)(v61 + 8 * v67);
          if (!v69)
          {
            v70 = v68 + 4;
            if (v70 >= v66)
              goto LABEL_93;
            v69 = *(_QWORD *)(v61 + 8 * v70);
            if (!v69)
            {
              while (1)
              {
                v67 = v70 + 1;
                if (__OFADD__(v70, 1))
                  break;
                if (v67 >= v66)
                  goto LABEL_93;
                v69 = *(_QWORD *)(v61 + 8 * v67);
                ++v70;
                if (v69)
                  goto LABEL_92;
              }
LABEL_126:
              __break(1u);
              goto LABEL_127;
            }
            v67 = v70;
          }
        }
      }
    }
LABEL_92:
    v65 = (v69 - 1) & v69;
    goto LABEL_75;
  }
LABEL_93:
  swift_release();
  v71 = v97;
  v72 = v97 + 16;
  swift_beginAccess();
  v73 = v71[16];
  v76 = *(_QWORD *)(v73 + 64);
  v75 = v73 + 64;
  v74 = v76;
  v77 = 1 << *(_BYTE *)(v71[16] + 32);
  v78 = -1;
  if (v77 < 64)
    v78 = ~(-1 << v77);
  v79 = v78 & v74;
  v80 = (unint64_t)(v77 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v81 = 0;
  while (2)
  {
    if (v79)
    {
      v79 &= v79 - 1;
LABEL_97:
      type metadata accessor for PlaceholderEntity();
      swift_retain();
      sub_22655C224();
      result = swift_release();
      continue;
    }
    break;
  }
  v82 = v81 + 1;
  if (__OFADD__(v81, 1))
    goto LABEL_122;
  if (v82 >= v80)
  {
LABEL_115:
    swift_release();
    type metadata accessor for ScanContainer();
    sub_22655C23C();
    v85 = v94;
    sub_22655C854();
    v86 = v96;
    sub_22655C860();
    if (v99)
    {
      sub_22655C8B4();
      do
      {
        sub_22655C224();
        swift_release();
        sub_22655C860();
      }
      while (v99);
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v85, v86);
    v87 = MEMORY[0x24BEE4B00];
    *v93 = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
    *v91 = v87;
    swift_bridgeObjectRelease();
    *v90 = v87;
    swift_bridgeObjectRelease();
    *v58 = v87;
    swift_bridgeObjectRelease();
    *v72 = v87;
    return swift_bridgeObjectRelease();
  }
  v83 = *(_QWORD *)(v75 + 8 * v82);
  ++v81;
  if (v83)
    goto LABEL_114;
  v81 = v82 + 1;
  if (v82 + 1 >= v80)
    goto LABEL_115;
  v83 = *(_QWORD *)(v75 + 8 * v81);
  if (v83)
    goto LABEL_114;
  v81 = v82 + 2;
  if (v82 + 2 >= v80)
    goto LABEL_115;
  v83 = *(_QWORD *)(v75 + 8 * v81);
  if (v83)
    goto LABEL_114;
  v81 = v82 + 3;
  if (v82 + 3 >= v80)
    goto LABEL_115;
  v83 = *(_QWORD *)(v75 + 8 * v81);
  if (v83)
  {
LABEL_114:
    v79 = (v83 - 1) & v83;
    goto LABEL_97;
  }
  v84 = v82 + 4;
  if (v84 >= v80)
    goto LABEL_115;
  v83 = *(_QWORD *)(v75 + 8 * v84);
  if (v83)
  {
    v81 = v84;
    goto LABEL_114;
  }
  while (1)
  {
    v81 = v84 + 1;
    if (__OFADD__(v84, 1))
      break;
    if (v81 >= v80)
      goto LABEL_115;
    v83 = *(_QWORD *)(v75 + 8 * v81);
    ++v84;
    if (v83)
      goto LABEL_114;
  }
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
  return result;
}

uint64_t sub_22644E72C()
{
  uint64_t v0;

  sub_22644F0C0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_22644E790()
{
  sub_22644E72C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityManager()
{
  return objc_opt_self();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScanEntityType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanEntityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22644E8B8 + 4 * byte_22655FC6D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22644E8EC + 4 * byte_22655FC68[v4]))();
}

uint64_t sub_22644E8EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22644E8F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22644E8FCLL);
  return result;
}

uint64_t sub_22644E908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22644E910);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22644E914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22644E91C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22644E928(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_22644E930(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScanEntityType()
{
  return &type metadata for ScanEntityType;
}

unint64_t sub_22644E950()
{
  unint64_t result;

  result = qword_2558416B0;
  if (!qword_2558416B0)
  {
    result = MEMORY[0x22769A794](&unk_22655FD58, &type metadata for ScanEntityType);
    atomic_store(result, (unint64_t *)&qword_2558416B0);
  }
  return result;
}

unint64_t sub_22644E994()
{
  unint64_t result;

  result = qword_2558416B8;
  if (!qword_2558416B8)
  {
    result = MEMORY[0x22769A794](&unk_226569DC0, &type metadata for RERoomsMaterialError);
    atomic_store(result, (unint64_t *)&qword_2558416B8);
  }
  return result;
}

uint64_t sub_22644E9D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = MEMORY[0x24BEE4AF8];
  v20 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = type metadata accessor for CapturedRoom.Surface(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = (uint64_t *)(a2 + 112);
    v10 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v11 = v8 + *(int *)(v6 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v12 = sub_226534858(v11);
      LOBYTE(v11) = v13;
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = *v9;
        v19 = *v9;
        *v9 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_226548CB0();
          v15 = v19;
        }
        v16 = *(_QWORD *)(v15 + 48);
        v17 = sub_22655C140();
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v12, v17);
        sub_2265462EC(v12, v19);
        *v9 = v19;
        swift_bridgeObjectRelease();
        v18 = swift_endAccess();
        MEMORY[0x227699594](v18);
        if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
      }
      else
      {
        swift_endAccess();
      }
      v8 += v10;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

uint64_t sub_22644EBAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  char v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v16[5];

  v12 = a3 & 1;
  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  *(_QWORD *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a4 + 72) = 0;
  type metadata accessor for ScanContainer();
  swift_allocObject();
  *(_QWORD *)(a4 + 80) = sub_22655C1DC();
  v14 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(a4 + 96) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(a4 + 104) = v14;
  *(_QWORD *)(a4 + 112) = sub_226513804(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a4 + 120) = v14;
  *(_QWORD *)(a4 + 128) = v14;
  *(_BYTE *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 152) = 0x40A000003FC00000;
  sub_226438600((uint64_t)v16, a4 + 32);
  *(_QWORD *)(a4 + 144) = a2;
  *(_BYTE *)(a4 + 88) = v12;
  *(float *)(a4 + 140) = a7;
  *(float *)(a4 + 156) = a7 * 1.5;
  swift_retain();
  sub_226447B50();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return a4;
}

uint64_t sub_22644ECC0(uint64_t a1, uint64_t a2, char a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a3 & 1;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EntityManager();
  v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a6);
  return sub_22644EBAC((uint64_t)v15, a2, v12, v16, a6, a7, a4);
}

uint64_t sub_22644ED88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558416C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22644EDD0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

double sub_22644EDF4()
{
  return sub_22644D534();
}

uint64_t sub_22644EDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22644D7FC(a1, a2, a3);
}

void sub_22644EE18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22644EF44(a1, a2);
}

double sub_22644EE34()
{
  return sub_22644CB60();
}

uint64_t sub_22644EE3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22644CC88(a1, a2, a3);
}

double sub_22644EE5C()
{
  return sub_22644C248();
}

uint64_t sub_22644EE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22644C370(a1, a2, a3);
}

double sub_22644EE84()
{
  return sub_22644B5AC();
}

uint64_t sub_22644EE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22644B6D4(a1, a2, a3);
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_22655C140();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_22644EF44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_22655C140() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_22644DB14(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(void (**)(uint64_t, __n128))(v2 + ((((v7 + 31) & 0xFFFFFFFFFFFFFFF0) + 23) & 0xFFFFFFFFFFFFFFF0)), a2, *(__n128 *)(v2 + ((v7 + 31) & 0xFFFFFFFFFFFFFFF0)));
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_22655C140();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22644F068(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(sub_22655C140() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return sub_22644D8E8(a1, *(_QWORD *)(v1 + 16), v1 + v3, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_22644F0C0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

_QWORD *sub_22644F0E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v5 = *(int *)(a3 + 44);
    v6 = (char *)(a1 + v5);
    v7 = (char *)a2 + v5;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = sub_22655C140();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(v6, v7, v12);
      v13(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_22644F21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = a1 + *(int *)(a2 + 44);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = sub_22655C140();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v2, v5);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v2 + *(int *)(v3 + 48), v5);
  }
  return result;
}

uint64_t sub_22644F2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(int *)(a3 + 44);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_22655C140();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v5, v6, v10);
    v11(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_22644F3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(int *)(a3 + 44);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      v16 = sub_22655C140();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
      v17(v5, v6, v16);
      v17(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v16);
      return a1;
    }
    sub_22644F54C((uint64_t)v5);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  v12 = sub_22655C140();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v5, v6, v12);
  v13(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_22644F54C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22644F58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(int *)(a3 + 44);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_22655C140();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(v5, v6, v10);
    v11(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_22644F698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(int *)(a3 + 44);
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      v17 = sub_22655C140();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
      v18(v6, v7, v17);
      v18(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v17);
      return a1;
    }
    sub_22644F54C((uint64_t)v6);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  v13 = sub_22655C140();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v6, v7, v13);
  v14(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_22644F804()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22644F810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 44);
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_22644F854()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22644F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 44);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_2558416D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for ScanItemStrut()
{
  uint64_t result;

  result = qword_255841738;
  if (!qword_255841738)
    return swift_getSingletonMetadata();
  return result;
}

void sub_22644F8E4()
{
  unint64_t v0;

  sub_22644F974();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_22644F974()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255841748[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255840960);
    v0 = sub_22655D13C();
    if (!v1)
      atomic_store(v0, qword_255841748);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22769A788](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_22644FA10@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>, simd_float4x4 a3@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a4@<S4>, float a5@<S5>)
{
  return sub_22644FA58(a1, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, a2, a3, a4, a5);
}

uint64_t sub_22644FA34@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>, simd_float4x4 a3@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a4@<S4>, float a5@<S5>)
{
  return sub_22644FA58(a1, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, a2, a3, a4, a5);
}

uint64_t sub_22644FA58@<X0>(float32x2_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>, simd_float4x4 a7@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a8@<S4>, float a9@<S5>)
{
  int8x16_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int32x2_t v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t result;
  simd_float4x4 v33;

  v33 = __invert_f4(a7);
  v17 = (int8x16_t)vaddq_f32((float32x4_t)v33.columns[3], vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_QWORD *)&a1[2])), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], a1[2], 1));
  v18 = vzip1_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  v19 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_QWORD *)((char *)a1 + *a2))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a2), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  v20 = vzip1_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  v21 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_QWORD *)((char *)a1 + *a3))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a3), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  v22 = vzip1_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
  v23 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_QWORD *)((char *)a1 + *a4))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a4), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  v24 = vzip1_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  v33.columns[0] = (simd_float4)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(_QWORD *)((char *)a1 + *a5))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a5), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  v25 = vzip1_s32(*(int32x2_t *)v33.columns[0].f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33.columns[0], (int8x16_t)v33.columns[0], 8uLL));
  v26 = a6 + *(int *)(type metadata accessor for ScanItemStrut() + 44);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840960);
  v28 = v26 + *(int *)(v27 + 48);
  v29 = (char *)a1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftUUID;
  v30 = sub_22655C140();
  v31 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  v31(v26, v29, v30);
  v31(v28, (char *)a1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightUUID, v30);
  swift_release();
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  *(int32x2_t *)a6 = v18;
  *(int32x2_t *)(a6 + 8) = v20;
  *(int32x2_t *)(a6 + 16) = v22;
  *(float *)(a6 + 24) = a8;
  *(int32x2_t *)(a6 + 32) = v24;
  *(int32x2_t *)(a6 + 40) = v25;
  *(float *)(a6 + 48) = a9;
  return result;
}

BOOL sub_22644FC1C(float32x2_t *a1, float a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x2_t v38;
  float v39;
  float v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float v44;
  float32x2_t *v45;
  float32x2_t *v46;
  float v47;
  uint64_t v48;
  float32x2_t *v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v59;
  float32x2_t *v60;
  float32x2_t *v61;
  float32x2_t *v62;
  uint64_t v63;
  char *v64;

  v3 = v2;
  v6 = type metadata accessor for ScanItemStrut();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t)&v59 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v61 = (float32x2_t *)((char *)&v59 - v12);
  MEMORY[0x24BDAC7A8](v13);
  v62 = (float32x2_t *)((char *)&v59 - v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (float32x2_t *)((char *)&v59 - v16);
  MEMORY[0x24BDAC7A8](v18);
  v60 = (float32x2_t *)((char *)&v59 - v19);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (float *)((char *)&v59 - v21);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (float *)((char *)&v59 - v24);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (float32x2_t *)((char *)&v59 - v27);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (float32x2_t *)((char *)&v59 - v30);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (float32x2_t *)((char *)&v59 - v33);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (float32x2_t *)((char *)&v59 - v36);
  v38 = vsub_f32(*v3, *a1);
  v39 = vaddv_f32(vmul_f32(v38, v38));
  v40 = a2 * a2;
  sub_22643F668((uint64_t)v3, (uint64_t)&v59 - v36);
  sub_22643F668((uint64_t)a1, (uint64_t)v34);
  v64 = v8;
  if (v39 >= (float)(a2 * a2))
  {
    sub_22643D748((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643D748((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643F668((uint64_t)v3, (uint64_t)v31);
    sub_22643F668((uint64_t)a1, (uint64_t)v28);
    goto LABEL_9;
  }
  v41 = vsub_f32(v37[1], v34[1]);
  v42 = vaddv_f32(vmul_f32(v41, v41));
  sub_22643D748((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643F668((uint64_t)v3, (uint64_t)v31);
  sub_22643F668((uint64_t)a1, (uint64_t)v28);
  if (v42 >= v40)
  {
LABEL_9:
    sub_22643D748((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643D748((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643F668((uint64_t)v3, (uint64_t)v25);
    sub_22643F668((uint64_t)a1, (uint64_t)v22);
    v46 = v60;
    v45 = v61;
    goto LABEL_10;
  }
  v43 = vsub_f32(v31[2], v28[2]);
  v44 = vaddv_f32(vmul_f32(v43, v43));
  sub_22643D748((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643F668((uint64_t)v3, (uint64_t)v25);
  sub_22643F668((uint64_t)a1, (uint64_t)v22);
  v46 = v60;
  v45 = v61;
  if (v44 >= v40)
  {
LABEL_10:
    sub_22643D748((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643D748((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643F668((uint64_t)v3, (uint64_t)v46);
    sub_22643F668((uint64_t)a1, (uint64_t)v17);
    v48 = (uint64_t)v64;
    v49 = v62;
    goto LABEL_11;
  }
  v47 = vabds_f32(v25[6], v22[6]);
  sub_22643D748((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643F668((uint64_t)v3, (uint64_t)v46);
  sub_22643F668((uint64_t)a1, (uint64_t)v17);
  v48 = (uint64_t)v64;
  v49 = v62;
  if (v47 >= a2)
  {
LABEL_11:
    sub_22643D748((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643D748((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643F668((uint64_t)v3, (uint64_t)v49);
    sub_22643F668((uint64_t)a1, (uint64_t)v45);
    goto LABEL_12;
  }
  v50 = vsub_f32(v46[4], v17[4]);
  v51 = vaddv_f32(vmul_f32(v50, v50));
  sub_22643D748((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643F668((uint64_t)v3, (uint64_t)v49);
  sub_22643F668((uint64_t)a1, (uint64_t)v45);
  if (v51 >= v40)
  {
LABEL_12:
    sub_22643D748((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    sub_22643D748((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
    v57 = (uint64_t)v3;
    v55 = v63;
    sub_22643F668(v57, v63);
    sub_22643F668((uint64_t)a1, v48);
    goto LABEL_13;
  }
  v52 = vsub_f32(v49[5], v45[5]);
  v53 = vaddv_f32(vmul_f32(v52, v52));
  sub_22643D748((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  v54 = (uint64_t)v3;
  v55 = v63;
  sub_22643F668(v54, v63);
  sub_22643F668((uint64_t)a1, v48);
  if (v53 >= v40)
  {
LABEL_13:
    v56 = 0;
    goto LABEL_14;
  }
  v56 = vabds_f32(*(float *)(v55 + 48), *(float *)(v48 + 48)) < a2;
LABEL_14:
  sub_22643D748(v48, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  sub_22643D748(v55, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  return v56;
}

uint64_t sub_226450120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  simd_float4x4 v13;
  float v14;
  float v15;

  if ((a3->i8[OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration] & 1) != 0)
  {
    swift_release();
    sub_22643D748(a2, type metadata accessor for CapturedRoom.Surface);
    sub_22643D748(a1, type metadata accessor for CapturedRoom.Surface);
    v7 = type metadata accessor for ScanItemStrut();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a4;
    v10 = 1;
  }
  else
  {
    v11 = *(float *)(a1 + 24);
    if (v11 <= 0.0)
    {
      if ((*(_BYTE *)a1 - 2) > 3u)
        v12 = 0.08;
      else
        v12 = flt_22655FDA0[(char)(*(_BYTE *)a1 - 2)];
    }
    else
    {
      v12 = v11 * 0.5;
    }
    v14 = *(float *)(a2 + 24);
    if (v14 <= 0.0)
    {
      if ((*(_BYTE *)a2 - 2) > 3u)
        v15 = 0.08;
      else
        v15 = flt_22655FDA0[(char)(*(_BYTE *)a2 - 2)];
    }
    else
    {
      v15 = v14 * 0.5;
    }
    v13 = *(simd_float4x4 *)(a1 + 32);
    sub_22644FA58(a3, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, a4, v13, v12, v15);
    sub_22643D748(a2, type metadata accessor for CapturedRoom.Surface);
    sub_22643D748(a1, type metadata accessor for CapturedRoom.Surface);
    v7 = type metadata accessor for ScanItemStrut();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a4;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_2264502B8(float32x2_t *a1)
{
  float32x2_t *v1;
  float32x2_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  int32x2_t v22;
  __int8 v23;
  float v24;
  float v25;
  char v26;
  char v27;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (float *)((char *)&v29 - v17);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (float *)((char *)&v29 - v20);
  v22 = vceq_f32(*v2, *a1);
  if ((v22.i8[0] & 1) == 0)
  {
    sub_226450538((uint64_t)v2, (uint64_t)&v29 - v20);
    sub_226450538((uint64_t)a1, (uint64_t)v18);
    goto LABEL_7;
  }
  v23 = v22.i8[4];
  sub_226450538((uint64_t)v2, (uint64_t)&v29 - v20);
  sub_226450538((uint64_t)a1, (uint64_t)v18);
  if ((v23 & 1) == 0)
  {
LABEL_7:
    sub_2264472E0((uint64_t)v18);
    sub_2264472E0((uint64_t)v21);
    sub_226450538((uint64_t)v2, (uint64_t)v15);
    sub_226450538((uint64_t)a1, (uint64_t)v12);
    goto LABEL_8;
  }
  v24 = v21[2];
  sub_2264472E0((uint64_t)v21);
  v25 = v18[2];
  sub_2264472E0((uint64_t)v18);
  sub_226450538((uint64_t)v2, (uint64_t)v15);
  sub_226450538((uint64_t)a1, (uint64_t)v12);
  if (v24 != v25)
  {
LABEL_8:
    sub_2264472E0((uint64_t)v12);
    sub_2264472E0((uint64_t)v15);
    sub_226450538((uint64_t)v2, (uint64_t)v9);
    sub_226450538((uint64_t)a1, (uint64_t)v6);
    goto LABEL_9;
  }
  sub_2264472A4();
  v26 = sub_22655BDA4();
  sub_2264472E0((uint64_t)v12);
  sub_2264472E0((uint64_t)v15);
  sub_226450538((uint64_t)v2, (uint64_t)v9);
  sub_226450538((uint64_t)a1, (uint64_t)v6);
  if ((v26 & 1) == 0)
  {
LABEL_9:
    v27 = 0;
    goto LABEL_10;
  }
  v27 = sub_22655BDA4();
LABEL_10:
  sub_2264472E0((uint64_t)v6);
  sub_2264472E0((uint64_t)v9);
  return v27 & 1;
}

uint64_t sub_226450538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_22645057C()
{
  qword_25585AD80 = MEMORY[0x24BEE4AF8];
}

void sub_226450590()
{
  qword_25585AD88 = MEMORY[0x24BEE4AF8];
}

void sub_2264505A4()
{
  qword_25585AD90 = MEMORY[0x24BEE4AF8];
}

void sub_2264505B8()
{
  qword_25585AD98 = (uint64_t)&unk_24EDDE990;
}

void sub_2264505CC()
{
  qword_25585ADA0 = MEMORY[0x24BEE4AF8];
}

void sub_2264505E0()
{
  qword_25585ADA8 = (uint64_t)&unk_24EDDEBB8;
}

uint64_t type metadata accessor for ObjectEntity()
{
  uint64_t result;

  result = qword_255841790;
  if (!qword_255841790)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_226450630()
{
  return swift_initClassMetadata2();
}

uint64_t sub_22645066C(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  float *v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v35;
  _QWORD v36[7];
  _BYTE v37[40];

  v5 = v3;
  v8 = a2 & 1;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22655C140();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2264653F8(a1, v8, a3);
  if (v4)
    return result;
  if (qword_25583F808 != -1)
    swift_once();
  v17 = qword_25585AC80;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v5 + qword_25585ADF8, v12);
  swift_beginAccess();
  v18 = *(_QWORD *)(v17 + 24);
  if (!*(_QWORD *)(v18 + 16))
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_bridgeObjectRetain();
  v19 = sub_226534858((uint64_t)v15);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((*(_BYTE *)(v5 + qword_25585AE08) & 1) == 0
    && *(_BYTE *)(v21 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) == 18)
  {
    v22 = v5 + qword_25585AE00;
    swift_beginAccess();
    sub_226438600(v22, (uint64_t)v37);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2558417E0);
    type metadata accessor for SimpleScanMaterial();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v23 = v36[4];
      sub_226450C20(v21 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t)v11);
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
      sub_226450C68((uint64_t)v11);
      v25 = 1.0;
      if (v24 != 1)
      {
        if (qword_25583F9D0 != -1)
          swift_once();
        v26 = (float *)off_25584AF28;
        swift_beginAccess();
        v25 = 1.0 - (float)(v26[30] + v26[30]);
      }
      if (*(float *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) != v25)
      {
        *(float *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = v25;
        sub_226464E9C();
        type metadata accessor for ObjectEntity();
        sub_226450CA8();
        v27 = (void (*)(_BYTE *, _QWORD))sub_22655C8CC();
        v29 = v28;
        v30 = sub_22655C41C();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
          v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = xmmword_22655F8F0;
          v32 = sub_22655CAD0();
          v33 = MEMORY[0x24BDE74C8];
          *(_QWORD *)(v31 + 56) = v32;
          *(_QWORD *)(v31 + 64) = v33;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 32));
          v35 = v23 + OBJC_IVAR____TtC8RoomPlan22MeshUpdateScanMaterial_customMaterial;
          swift_beginAccess();
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(boxed_opaque_existential_1, v35, v32);
          sub_22655C410();
        }
        v27(v37, 0);
      }
      swift_release();
    }
  }
  return swift_release();
}

uint64_t sub_226450A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + qword_25585AE18))
  {
    type metadata accessor for ScanEntity();
    swift_retain();
    sub_22655C218();
    swift_release();
  }
  if (qword_25583F908 != -1)
    swift_once();
  if (qword_25585AEE0)
  {
    swift_beginAccess();
    v1 = swift_retain();
    sub_2265402FC(v1);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  v2 = sub_22655C8C0();
  v3 = v2 + qword_25585ADF8;
  v4 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v2 + qword_25585AE00);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_226450C18()
{
  return type metadata accessor for ObjectEntity();
}

uint64_t sub_226450C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_226450C68(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_226450CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2558417E8;
  if (!qword_2558417E8)
  {
    v1 = type metadata accessor for ObjectEntity();
    result = MEMORY[0x22769A794](&unk_226560610, v1);
    atomic_store(result, (unint64_t *)&qword_2558417E8);
  }
  return result;
}

uint64_t sub_226450CF0()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ScanItemPerimeterManager();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4AF8];
  type metadata accessor for HullUtility();
  result = swift_allocObject();
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  qword_25585ADC0 = v0;
  return result;
}

uint64_t sub_226450D50()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_226450D58()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScanItemPerimeterManager()
{
  return objc_opt_self();
}

uint64_t sub_226450DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  __n128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0uLL;
  v10 = 0uLL;
LABEL_4:
  v34 = v9;
  v33 = v10;
  while (v5)
  {
    v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v12 = v11 | (v8 << 6);
LABEL_6:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) & 0xFE) == 2)
    {
      v31 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
      v32 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
      v29 = *(__n128 *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
      v30 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32);
      v28 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
      swift_retain();
      v17 = sub_2264421FC(v32, v31, v30, v29, v28, 0.16);
      v18 = v17[1].i64[0];
      if (v18)
      {
        v19 = (int32x4_t *)&v17[2];
        v20 = v34;
        v21 = v33;
        do
        {
          v22 = *v19++;
          v23 = vmovn_s32(vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vtrn1q_s32(v22, v21), (int8x16_t)vtrn2q_s32(v22, v21), 8uLL), (float32x4_t)vextq_s8((int8x16_t)vtrn1q_s32(v20, v22), (int8x16_t)vtrn2q_s32(v20, v22), 8uLL)));
          v24.i64[1] = v21.i64[1];
          v24.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v21, (float32x4_t)v22), (int8x16_t)v22, (int8x16_t)v21).u32[0];
          v25.i64[1] = v20.i64[1];
          v25.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v22, (float32x4_t)v20), (int8x16_t)v22, (int8x16_t)v20).u32[0];
          v26 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s16(v23, *(int16x4_t *)v22.i8)), 0x1FuLL)), (int8x16_t)v22, (int8x16_t)v21);
          v27 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 0)), 0x1FuLL)), (int8x16_t)v22, (int8x16_t)v20);
          v24.i32[1] = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 3)), 0x1FuLL)), *(int8x16_t *)&v22, *(int8x16_t *)&v21).i32[1];
          v25.i32[1] = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 2)), 0x1FuLL)), *(int8x16_t *)&v22, *(int8x16_t *)&v20).i32[1];
          v21 = v24;
          v21.i32[2] = v26.i32[2];
          v20 = v25;
          v20.i32[2] = v27.i32[2];
          --v18;
        }
        while (v18);
        v33 = v21;
        v34 = v20;
      }
      swift_release();
      result = swift_bridgeObjectRelease();
      v9 = v34;
      v10 = v33;
      goto LABEL_4;
    }
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v14 >= v6)
    return swift_release();
  v15 = *(_QWORD *)(v2 + 8 * v14);
  ++v8;
  if (v15)
    goto LABEL_23;
  v8 = v14 + 1;
  if (v14 + 1 >= v6)
    return swift_release();
  v15 = *(_QWORD *)(v2 + 8 * v8);
  if (v15)
    goto LABEL_23;
  v8 = v14 + 2;
  if (v14 + 2 >= v6)
    return swift_release();
  v15 = *(_QWORD *)(v2 + 8 * v8);
  if (v15)
    goto LABEL_23;
  v8 = v14 + 3;
  if (v14 + 3 >= v6)
    return swift_release();
  v15 = *(_QWORD *)(v2 + 8 * v8);
  if (v15)
  {
LABEL_23:
    v5 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v8 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 4;
  if (v16 >= v6)
    return swift_release();
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v6)
      return swift_release();
    v15 = *(_QWORD *)(v2 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

BOOL sub_2264510D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

__n128 sub_2264510E8(int8x16_t a1)
{
  uint64_t v1;
  __n128 result;
  int8x16_t v3;
  unsigned int v4;

  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  if (swift_initStaticObject() == v1)
  {
    return (__n128)a1;
  }
  else
  {
    v3 = a1;
    v3.i32[0] = fabsf(*(float *)(v1 + 20));
    if (*(_BYTE *)(v1 + 24))
      v4 = -1;
    else
      v4 = 0;
    result.n128_u64[0] = vbslq_s8((int8x16_t)vdupq_n_s32(v4), a1, v3).u64[0];
    if ((*(_BYTE *)(v1 + 32) & 1) == 0)
      result.n128_u32[1] = fabsf(*(float *)(v1 + 28));
  }
  return result;
}

__n128 sub_226451174(__n128 a1)
{
  uint64_t v1;

  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  if (swift_initStaticObject() != v1)
    __asm { BR              X10 }
  return a1;
}

uint64_t sub_22645136C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RoomCaptureMeshDimensionsRestriction()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ScanItemType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RoomCaptureMeshDimensionsRestriction.Side(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_226451478 + 4 * byte_22655FE2C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2264514AC + 4 * byte_22655FE27[v4]))();
}

uint64_t sub_2264514AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2264514B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2264514BCLL);
  return result;
}

uint64_t sub_2264514C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2264514D0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2264514D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2264514DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_2264514E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RoomCaptureMeshDimensionsRestriction.Side()
{
  return &type metadata for RoomCaptureMeshDimensionsRestriction.Side;
}

unint64_t sub_226451504()
{
  unint64_t result;

  result = qword_2558419F8;
  if (!qword_2558419F8)
  {
    result = MEMORY[0x22769A794](&unk_22655FEDC, &type metadata for RoomCaptureMeshDimensionsRestriction.Side);
    atomic_store(result, (unint64_t *)&qword_2558419F8);
  }
  return result;
}

uint64_t type metadata accessor for DebugArrowEntity()
{
  uint64_t result;

  result = qword_255841A08;
  if (!qword_255841A08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_226451584()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22655C3D4();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_226451604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v23[32];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841A58);
  MEMORY[0x24BDAC7A8](v2);
  v4 = v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v5 = sub_22655CB60();
  MEMORY[0x24BDAC7A8](v5);
  v6 = qword_25585ADD0;
  v7 = *(void **)(v0 + qword_25585ADD0);
  sub_226451B60();
  v8 = v7;
  v9 = sub_22655D118();

  if ((v9 & 1) == 0)
  {
    v10 = *(void **)(v1 + v6);
    v11 = sub_22655CAE8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
    v12 = v10;
    sub_22655CB54();
    v13 = v1 + qword_255841A00;
    swift_beginAccess();
    sub_22655C3BC();
    swift_endAccess();
    type metadata accessor for DebugArrowEntity();
    sub_226451B9C();
    v14 = (void (*)(_BYTE *, _QWORD))sub_22655C8CC();
    v16 = v15;
    v17 = sub_22655C41C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_22655F8F0;
      v19 = sub_22655C3D4();
      v20 = MEMORY[0x24BDE62F8];
      *(_QWORD *)(v18 + 56) = v19;
      *(_QWORD *)(v18 + 64) = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 32));
      swift_beginAccess();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(boxed_opaque_existential_1, v13, v19);
      sub_22655C410();
    }
    v14(v23, 0);
  }
}

void sub_226451834()
{
  sub_22655D3E8();
  __break(1u);
}

uint64_t sub_22645188C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  _BYTE v20[24];
  uint64_t v21[5];

  v3 = sub_22655C2CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_22655C3D4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_retain();
  v11 = a1;
  sub_22655C3C8();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(v1 + qword_255841A00, v10, v7);
  *(_QWORD *)(v1 + qword_25585ADD0) = v11;
  v12 = v11;
  swift_release();
  v13 = sub_22655C1DC();
  v14 = qword_25583F948;
  swift_retain();
  if (v14 != -1)
    swift_once();
  sub_2264E64D8((uint64_t)v6, (float32x4_t)xmmword_22655FF10, 0.4);
  v15 = sub_226451B9C();
  v16 = v13 + qword_255841A00;
  swift_beginAccess();
  v21[3] = v7;
  v21[4] = MEMORY[0x24BDE62F8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v16, v7);
  v18 = swift_retain();
  sub_2264E8D20(v18, v15, (uint64_t)v6, (uint64_t)v21);

  swift_release_n();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  sub_226451BE4((uint64_t)v21);
  return v13;
}

void sub_226451A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_255841A00;
  v2 = sub_22655C3D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

uint64_t sub_226451AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_22655C8C0();
  v1 = v0 + qword_255841A00;
  v2 = sub_22655C3D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_226451B4C()
{
  return type metadata accessor for DebugArrowEntity();
}

uint64_t sub_226451B54()
{
  return MEMORY[0x24BDE71D0];
}

unint64_t sub_226451B60()
{
  unint64_t result;

  result = qword_255841A60;
  if (!qword_255841A60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_255841A60);
  }
  return result;
}

unint64_t sub_226451B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255841A68;
  if (!qword_255841A68)
  {
    v1 = type metadata accessor for DebugArrowEntity();
    result = MEMORY[0x22769A794](&unk_22655FF60, v1);
    atomic_store(result, (unint64_t *)&qword_255841A68);
  }
  return result;
}

uint64_t sub_226451BE4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843DF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_226451C24(double a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for StateSpring();
  v3 = objc_msgSendSuper2(&v7, sel_initWithValue_, a1);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    objc_msgSend(v5, sel_setParameters_, 0.825, 0.08, 0.65, 0.08);
    objc_msgSend(v5, sel_parameters);
    objc_msgSend(v5, sel_setParameters_, 0.9);
    objc_msgSend(v5, sel_parameters);
    objc_msgSend(v5, sel_setParameters_);

  }
  return v4;
}

id sub_226451D28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StateSpring()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for SpringDouble3(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SpringDouble3()
{
  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SpringDouble3(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for SpringDouble3()
{
  return &type metadata for SpringDouble3;
}

_QWORD *_s8RoomPlan16QuaternionSpringVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t _s8RoomPlan16QuaternionSpringVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_226451EBC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuaternionSpring()
{
  return &type metadata for QuaternionSpring;
}

void sub_226451F0C(__n128 a1, __n128 a2)
{
  sub_226451F24((SEL *)&selRef_setValue_, a1, a2);
}

void sub_226451F18(__n128 a1, __n128 a2)
{
  sub_226451F24((SEL *)&selRef_setTarget_, a1, a2);
}

void sub_226451F24(SEL *a1, __n128 a2, __n128 a3)
{
  id **v3;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  double v13;
  void *v15;

  v5 = (unint64_t)*v3;
  v6 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x2276999E4](0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_15;
    }
    v7 = *(id *)(v5 + 32);
  }
  v8 = v7;
  objc_msgSend(v7, *a1, a2.n128_f64[0], *(_OWORD *)&a3);

  if (!v6)
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v9 = *(id *)(v5 + 40);
      goto LABEL_8;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v9 = (id)MEMORY[0x2276999E4](1, v5);
LABEL_8:
  v10 = v9;
  objc_msgSend(v9, *a1, a2.n128_f64[1]);

  if (v6)
  {
    v11 = (id)MEMORY[0x2276999E4](2, v5);
LABEL_12:
    v15 = v11;
    objc_msgSend(v11, *a1, v13);

    return;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    v11 = *(id *)(v5 + 48);
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
}

void sub_226452028()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v1 = *v0;
  v2 = *v0 & 0xC000000000000001;
  if (v2)
  {
    v3 = (id)MEMORY[0x2276999E4](0, *v0);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_15;
    }
    v3 = *(id *)(v1 + 32);
  }
  v4 = v3;
  objc_msgSend(v3, sel_parameters);
  objc_msgSend(v4, sel_setParameters_);

  if (!v2)
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v5 = *(id *)(v1 + 40);
      goto LABEL_8;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = (id)MEMORY[0x2276999E4](1, v1);
LABEL_8:
  v6 = v5;
  objc_msgSend(v5, sel_parameters);
  objc_msgSend(v6, sel_setParameters_);

  if (v2)
  {
    v7 = (id)MEMORY[0x2276999E4](2, v1);
LABEL_12:
    v8 = v7;
    objc_msgSend(v7, sel_parameters);
    objc_msgSend(v8, sel_setParameters_);

    return;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    v7 = *(id *)(v1 + 48);
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
}

void sub_226452160(unint64_t a1, double a2)
{
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = (id)MEMORY[0x2276999E4](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    v5 = *(id *)(a1 + 32);
  }
  v6 = v5;
  objc_msgSend(v5, sel_step_, a2);

  if (v4)
  {
    v7 = (id)MEMORY[0x2276999E4](1, a1);
    goto LABEL_8;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = *(id *)(a1 + 40);
LABEL_8:
  v8 = v7;
  objc_msgSend(v7, sel_step_, a2);

  if (!v4)
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      v9 = *(id *)(a1 + 48);
      goto LABEL_12;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = (id)MEMORY[0x2276999E4](2, a1);
LABEL_12:
  v10 = v9;
  objc_msgSend(v9, sel_step_, a2);

  if (v4)
  {
    v11 = (id)MEMORY[0x2276999E4](3, a1);
LABEL_16:
    v12 = v11;
    objc_msgSend(v11, sel_step_, a2);

    return;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
  {
    v11 = *(id *)(a1 + 56);
    goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

void sub_2264522AC(unint64_t a1)
{
  sub_2264522D0(a1, (SEL *)&selRef_value);
}

void sub_2264522B8(__n128 a1, __n128 a2)
{
  sub_22645242C((SEL *)&selRef_setValue_, a1, a2);
}

void sub_2264522C4(unint64_t a1)
{
  sub_2264522D0(a1, (SEL *)&selRef_target);
}

void sub_2264522D0(unint64_t a1, SEL *a2)
{
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = (id)MEMORY[0x2276999E4](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    v5 = *(id *)(a1 + 32);
  }
  v6 = v5;
  objc_msgSend(v5, *a2);

  if (v4)
  {
    v7 = (id)MEMORY[0x2276999E4](1, a1);
    goto LABEL_8;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = *(id *)(a1 + 40);
LABEL_8:
  v8 = v7;
  objc_msgSend(v7, *a2);

  if (!v4)
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      v9 = *(id *)(a1 + 48);
      goto LABEL_12;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = (id)MEMORY[0x2276999E4](2, a1);
LABEL_12:
  v10 = v9;
  objc_msgSend(v9, *a2);

  if (v4)
  {
    v11 = (id)MEMORY[0x2276999E4](3, a1);
LABEL_16:
    v12 = v11;
    objc_msgSend(v11, *a2);

    return;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
  {
    v11 = *(id *)(a1 + 56);
    goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

void sub_226452420(__n128 a1, __n128 a2)
{
  sub_22645242C((SEL *)&selRef_setTarget_, a1, a2);
}

void sub_22645242C(SEL *a1, __n128 a2, __n128 a3)
{
  id **v3;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  double v15;
  void *v17;

  v5 = (unint64_t)*v3;
  v6 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x2276999E4](0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    v7 = *(id *)(v5 + 32);
  }
  v8 = v7;
  objc_msgSend(v7, *a1, a2.n128_f64[0], a3.n128_u64[0]);

  if (v6)
  {
    v9 = (id)MEMORY[0x2276999E4](1, v5);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(id *)(v5 + 40);
LABEL_8:
  v10 = v9;
  objc_msgSend(v9, *a1, a2.n128_f64[1]);

  if (!v6)
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      v11 = *(id *)(v5 + 48);
      goto LABEL_12;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = (id)MEMORY[0x2276999E4](2, v5);
LABEL_12:
  v12 = v11;
  objc_msgSend(v11, *a1, v15);

  if (v6)
  {
    v13 = (id)MEMORY[0x2276999E4](3, v5);
LABEL_16:
    v17 = v13;
    objc_msgSend(v13, *a1, a3.n128_f64[1]);

    return;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
  {
    v13 = *(id *)(v5 + 56);
    goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_226452578()
{
  unint64_t v0;
  objc_class *ObjCClassFromMetadata;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22655FFA0;
  type metadata accessor for StateSpring();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(_QWORD *)(v0 + 40) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(_QWORD *)(v0 + 48) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(_QWORD *)(v0 + 56) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  sub_22655CEE4();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_22655D400();
    result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    v3 = 0;
    v4 = v0 & 0xC000000000000001;
    do
    {
      if (v4)
        v7 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v7 = *(id *)(v0 + 8 * v3 + 32);
      v8 = v7;
      objc_msgSend(v7, sel_setTarget_, 1.0);

      if (v4)
        v9 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v9 = *(id *)(v0 + 8 * v3 + 32);
      v10 = v9;
      objc_msgSend(v9, sel_setValue_, 1.0);

      if (v4)
        v5 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v5 = *(id *)(v0 + 8 * v3 + 32);
      v6 = v5;
      ++v3;
      objc_msgSend(v5, sel_setVelocity_, 0.0);

    }
    while (v2 != v3);
  }
  return v0;
}

uint64_t sub_22645275C()
{
  unint64_t v0;
  objc_class *ObjCClassFromMetadata;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22655FFB0;
  type metadata accessor for StateSpring();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(_QWORD *)(v0 + 40) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(_QWORD *)(v0 + 48) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  sub_22655CEE4();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_22655D400();
    result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    v3 = 0;
    v4 = v0 & 0xC000000000000001;
    do
    {
      if (v4)
        v7 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v7 = *(id *)(v0 + 8 * v3 + 32);
      v8 = v7;
      objc_msgSend(v7, sel_setTarget_, 1.0);

      if (v4)
        v9 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v9 = *(id *)(v0 + 8 * v3 + 32);
      v10 = v9;
      objc_msgSend(v9, sel_setValue_, 1.0);

      if (v4)
        v5 = (id)MEMORY[0x2276999E4](v3, v0);
      else
        v5 = *(id *)(v0 + 8 * v3 + 32);
      v6 = v5;
      ++v3;
      objc_msgSend(v5, sel_setVelocity_, 0.0);

    }
    while (v2 != v3);
  }
  return v0;
}

__n128 sub_226452938(float32x4_t *a1, __n128 result, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  int64_t v7;
  unsigned __int32 v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  unsigned __int32 v24;
  float32x4_t v25;
  float32x4_t v27;
  __n128 v28;
  uint64_t v32;
  uint64_t v33;

  v7 = a1[1].i64[0];
  if (v7)
  {
    v32 = MEMORY[0x24BEE4AF8];
    v28 = result;
    sub_2264C1310(0, v7, 0);
    v10 = (float32x4_t)v28;
    v12 = a4;
    v11 = a5;
    v13 = v32;
    v14 = a1 + 2;
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0xBF000000BF000000);
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0x3F0000003F000000);
    v15.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(-0.5, a6, 2));
    v16 = a3;
    v17.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, a6, 2));
    do
    {
      v18 = *v14;
      v33 = v13;
      v20 = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        v25 = v17;
        v27 = v15;
        v23 = v9;
        v24 = v8;
        v22 = *v14;
        sub_2264C1310(v19 > 1, v20 + 1, 1);
        v18 = v22;
        v9 = v23;
        v8 = v24;
        v17 = v25;
        v15 = v27;
        v10 = (float32x4_t)v28;
        v16 = a3;
        v12 = a4;
        v11 = a5;
        v13 = v33;
      }
      v21 = vmaxnmq_f32((float32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v18.f32[0]), v16, *(float32x2_t *)v18.f32, 1), v12, v18, 2), v11).u64[0], v15);
      v21.i32[3] = 0;
      result = (__n128)vminnmq_f32(v21, v17);
      result.n128_u32[3] = v8;
      *(_QWORD *)(v13 + 16) = v20 + 1;
      *(__n128 *)(v13 + 16 * v20 + 32) = result;
      ++v14;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_226452A98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + *(int *)(type metadata accessor for LineAnimation() + 60);
  sub_2264533E8(v6, (uint64_t)v5);
  v7 = sub_22655C0E0();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  sub_2264533A8((uint64_t)v5);
  sub_22655C0C8();
  sub_2264533A8(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
}

uint64_t sub_226452BA4(uint64_t *a1, __n128 a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, double a9)
{
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  double v26;
  double v27;
  double v28;
  void (*v29)(char *, uint64_t);
  double v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  unsigned int v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned int v39;
  float32x4_t v40;
  _QWORD *v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t result;
  __n128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int v56;

  v10 = v9;
  v50 = a8;
  v51 = a7;
  v48 = a5;
  v49 = a6;
  v46 = a3;
  v47 = a4;
  v45 = a2;
  v13 = sub_22655C0E0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v45 - v18;
  v21 = *a1;
  v20 = a1[1];
  v22 = a1[2];
  v23 = a1[3];
  v24 = *((_DWORD *)a1 + 8);
  v25 = v10[4].f32[0];
  sub_226452A98((uint64_t)&v45 - v18);
  if (a9 <= 0.0)
  {
    v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31 = 100.0;
  }
  else
  {
    v26 = v25 * a9;
    sub_22655C0C8();
    sub_22655C0A4();
    v28 = v27;
    v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v16, v13);
    v30 = (v28 - v26) / a9;
    v31 = 0.0;
    if (v30 > 0.0)
    {
      if (v30 > 1.0)
        v30 = 1.0;
      v32 = v30;
      v31 = v32 * 100.0;
    }
  }
  v29(v19, v13);
  v33 = roundf(v31) / 100.0;
  v34 = v10->u8[0];
  v35 = 1.0 - v33;
  if (v10->i8[0])
  {
    v36 = -1;
  }
  else
  {
    v35 = 0.0;
    v36 = 0;
  }
  v37 = v51;
  v38 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v36), v50, (int8x16_t)v51), v51);
  *(float *)&v39 = v51.f32[2] + vmuls_lane_f32(v33, v38, 2);
  v10[6].i32[0] = 0;
  *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v37.f32, vmul_n_f32(*(float32x2_t *)v38.f32, v33));
  v38.i64[1] = v39;
  v10[6].f32[1] = v35;
  v10[2] = v37;
  v10[3] = v38;
  v50 = (int8x16_t)v38;
  if (v34 == 1
    && v21
    && *(_QWORD *)(v21 + 16) >= 2uLL
    && v33 > 0.0
    && (v40 = v10[5],
        v52 = v21,
        v53 = v20,
        v54 = v22,
        v55 = v23,
        v56 = v24,
        (v41 = sub_226452E0C((uint64_t)&v52, v33, v45, v46, v47, v48, v49, v40)) != 0))
  {
    v42 = (uint64_t)v41;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
    v42 = swift_allocObject();
    v43 = v51;
    *(_OWORD *)(v42 + 16) = xmmword_22655FA10;
    *(float32x4_t *)(v42 + 32) = v43;
    *(int8x16_t *)(v42 + 48) = v50;
  }
  result = swift_bridgeObjectRelease();
  v10[7].i64[0] = v42;
  return result;
}

_QWORD *sub_226452E0C(uint64_t a1, float a2, __n128 a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  unint64_t v8;
  _QWORD *v9;
  float32x4_t *v10;
  uint64_t v12;
  float v13;
  float32x4_t *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  float32x4_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  unint64_t v31;
  float32x4_t v32;
  float v33;
  _QWORD *v35;
  float32x4_t v40;
  float32x4_t v42;
  float v44;
  __int128 v45;

  v9 = 0;
  v10 = *(float32x4_t **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) >= 2uLL)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(float *)(a1 + 32);
    v14 = (float32x4_t *)swift_bridgeObjectRetain();
    sub_226452938(v14, a3, a4, a5, a6, a7);
    v16 = v15;
    swift_bridgeObjectRelease();
    v18 = (unint64_t)v16[2];
    if (!v18)
      goto LABEL_25;
    v19 = (uint64_t)&v16[2 * v18 + 4];
    *(float32x2_t *)v17.f32 = vsub_f32(*(float32x2_t *)(v19 - 16), v16[4]);
    v17.f32[2] = *(float *)(v19 - 8) - v16[5].f32[0];
    v20 = (int32x4_t)vmulq_f32(v17, a8);
    a7 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v20, 2), vaddq_f32((float32x4_t)v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1)));
    swift_bridgeObjectRetain();
    if (a7.f32[0] <= 0.0)
    {
      v12 = sub_2264D1FF0(v12);
      v21 = sub_2264D20A8((uint64_t)v16);
      v18 = *(_QWORD *)(v21 + 16);
      if (!v18)
        goto LABEL_26;
      v16 = (float32x2_t *)v21;
    }
    a7 = *(float32x4_t *)v16[4].f32;
    v9 = sub_226486AE0(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v10 = (float32x4_t *)v9[2];
    v18 = v9[3];
    v8 = (unint64_t)v10->u64 + 1;
    if ((unint64_t)v10 >= v18 >> 1)
LABEL_27:
      v9 = sub_226486AE0((_QWORD *)(v18 > 1), v8, 1, v9);
    v9[2] = v8;
    *(float32x4_t *)&v9[2 * (_QWORD)v10 + 4] = a7;
    v22 = *(_QWORD *)(v12 + 16);
    if (v22)
    {
      v8 = 0;
      v10 = (float32x4_t *)&v16[6];
      v23 = 0.0;
      do
      {
        v24 = v8 + 1;
        v25 = v23 + *(float *)(v12 + 4 * v8 + 32);
        if (v25 > (float)(v13 * a2))
        {
          if ((float)((float)(a2 - (float)(v23 / v13)) / (float)((float)(v25 / v13) - (float)(v23 / v13))) > 0.0001)
          {
            v44 = (float)(a2 - (float)(v23 / v13)) / (float)((float)(v25 / v13) - (float)(v23 / v13));
            swift_bridgeObjectRelease();
            v31 = (unint64_t)v16[2];
            if (v8 >= v31)
            {
              __break(1u);
            }
            else if (v8 + 1 < v31)
            {
              v40 = v10[-1];
              v42 = *v10;
              swift_bridgeObjectRelease();
              v32 = vsubq_f32(v42, v40);
              v33 = vmuls_lane_f32(v44, v32, 2);
              *(float32x2_t *)&v30 = vadd_f32(*(float32x2_t *)v40.f32, vmul_n_f32(*(float32x2_t *)v32.f32, v44));
              *((float *)&v30 + 2) = v40.f32[2] + v33;
              HIDWORD(v30) = 0;
              v8 = v9[2];
              v31 = v9[3];
              v12 = v8 + 1;
              if (v8 < v31 >> 1)
              {
LABEL_20:
                v9[2] = v12;
                *(_OWORD *)&v9[2 * v8 + 4] = v30;
                goto LABEL_21;
              }
LABEL_30:
              v45 = v30;
              v35 = sub_226486AE0((_QWORD *)(v31 > 1), v12, 1, v9);
              v30 = v45;
              v9 = v35;
              goto LABEL_20;
            }
            __break(1u);
            goto LABEL_30;
          }
        }
        else
        {
          v18 = (unint64_t)v16[2];
          if (v24 >= v18)
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          v26 = *v10;
          v28 = v9[2];
          v27 = v9[3];
          if (v28 >= v27 >> 1)
          {
            a7 = *v10;
            v29 = sub_226486AE0((_QWORD *)(v27 > 1), v28 + 1, 1, v9);
            v26 = a7;
            v9 = v29;
          }
          v9[2] = v28 + 1;
          *(float32x4_t *)&v9[2 * v28 + 4] = v26;
          v23 = v25;
        }
        ++v10;
        ++v8;
      }
      while (v22 != v24);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    if (v9[2] < 2uLL)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v9;
}

uint64_t sub_22645314C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  __n128 v12;

  v12 = a1;
  v2 = sub_22655C0E0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  sub_22655D604();
  sub_22655C0C8();
  sub_226452A98((uint64_t)v5);
  sub_22655C0A4();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  v9(v8, v2);
  sub_22655C0C8();
  sub_22655C0B0();
  v9(v5, v2);
  v10 = v1 + *(int *)(type metadata accessor for LineAnimation() + 60);
  sub_2264533A8(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v10, v8, v2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
}

uint64_t type metadata accessor for LineAnimation()
{
  uint64_t result;

  result = qword_255841AF0;
  if (!qword_255841AF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2264533A8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2264533E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_226453434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for LineAnimation();
  v4 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  sub_226453518(a1, (uint64_t)&v14 - v7);
  sub_226453518(a2, (uint64_t)v6);
  if (v9 == v10)
  {
    v11 = *((_QWORD *)v8 + 2);
    sub_22645355C((uint64_t)v8);
    v12 = *((_QWORD *)v6 + 2);
    sub_22645355C((uint64_t)v6);
    return v11 == v12;
  }
  else
  {
    sub_22645355C((uint64_t)v6);
    sub_22645355C((uint64_t)v8);
    return 0;
  }
}

uint64_t sub_226453518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22645355C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_226453598(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v5 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v5;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v6 = *(int *)(a3 + 60);
    v7 = (void *)(a1 + v6);
    v8 = (char *)a2 + v6;
    *(_QWORD *)(a1 + 112) = a2[14];
    v9 = sub_22655C0E0();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_2264536C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 60);
  v5 = sub_22655C0E0();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_226453744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(int *)(a3 + 60);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v8 = sub_22655C0E0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_226453848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 60);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_2264539B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(int *)(a3 + 60);
  v6 = (const void *)(a2 + v5);
  v7 = (void *)(a1 + v5);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v8 = sub_22655C0E0();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v7, v6, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_226453AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 60);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_22655C0E0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_226453BFC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_226453C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_226453C88()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_226453C94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 112) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

void sub_226453D0C()
{
  unint64_t v0;

  sub_226453DCC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_226453DCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255840B60)
  {
    sub_22655C0E0();
    v0 = sub_22655D13C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255840B60);
  }
}

uint64_t sub_226453E20(float32x2_t *a1, float a2, float32x2_t a3)
{
  float32x2_t v4;
  simd_float2 v5;
  float v6;
  BOOL v7;
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  BOOL v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unsigned __int8 v16;
  float32x2_t v18;

  if ((a1[4].i8[0] & 1) != 0)
    goto LABEL_13;
  v4 = a1[2];
  v5 = (simd_float2)vsub_f32(a3, v4);
  v6 = fabsf(v5.f32[1]);
  v7 = fabsf(v5.f32[0]) < a2 && v6 < a2;
  if (v7
    || ((v8 = a1[3], v9 = vsub_f32(a3, v8), v10 = fabsf(v9.f32[1]), fabsf(v9.f32[0]) < a2)
      ? (v11 = v10 < a2)
      : (v11 = 0),
        v11))
  {
    v16 = 1;
    return v16 & 1;
  }
  v18 = (float32x2_t)v5;
  v12 = vsub_f32(v8, v4);
  if (fabsf(_simd_orient_vf2(v5, (simd_float2)v12)) > a2 || (v13 = vmul_f32(v18, v12), vaddv_f32(v13) <= 0.0))
  {
LABEL_13:
    v16 = 0;
  }
  else
  {
    v14 = vsub_f32(v4, v8);
    v15 = vmul_f32(v14, v14);
    v16 = vcgt_f32(vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1)), vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1))).u8[0];
  }
  return v16 & 1;
}

uint64_t sub_226453EFC(uint64_t a1, float a2, double a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  float32x2_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  unint64_t v16;
  float32x2_t v17;
  simd_float2 v18;
  float v19;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 >> 62)
    goto LABEL_44;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v5)
  {
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = (float32x2_t *)MEMORY[0x2276999E4](0, v4);
      }
      else
      {
        if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v7 = *(float32x2_t **)(v4 + 32);
        swift_retain();
      }
      if ((sub_226453E20(v7, a2, *(float32x2_t *)&a3) & 1) != 0)
      {
LABEL_7:
        swift_bridgeObjectRelease();
        swift_release();
        v8 = 1;
        return v8 & 1;
      }
      v9 = 0;
      v8 = 0;
      v10 = v5 - 1;
      while (1)
      {
        LODWORD(v11) = HIDWORD(*(_QWORD *)&v7[2]);
        LODWORD(v12) = HIDWORD(*(_QWORD *)&v7[3]);
        v13 = vabds_f32(v12, *((float *)&a3 + 1));
        v14 = vabds_f32(v11, v12) > 0.00000011921 || v13 > 0.00000011921;
        if (!v14
          && (vmvn_s8(veor_s8((int8x8_t)vcge_f32(v7[2], *(float32x2_t *)&a3), (int8x8_t)vcge_f32(v7[3], *(float32x2_t *)&a3))).u8[0] & 1) == 0)
        {
          swift_release();
LABEL_41:
          swift_bridgeObjectRelease();
          v8 = 1;
          return v8 & 1;
        }
        v29 = v7[3];
        v30 = v7[2];
        swift_release();
        if (*((float *)&a3 + 1) >= v11 == *((float *)&a3 + 1) < v12)
        {
          v15 = v30.f32[0]
              + (float)((float)((float)(*((float *)&a3 + 1) - v11) * vsub_f32(v29, v30).f32[0]) / (float)(v12 - v11));
          if (vabds_f32(*(float *)&a3, v15) <= 0.00000011921)
            goto LABEL_41;
          if (*(float *)&a3 <= v15)
            v8 ^= 1u;
        }
        if (v10 == v9)
        {
          swift_bridgeObjectRelease();
          return v8 & 1;
        }
        v16 = v9 + 1;
        if ((v4 & 0xC000000000000001) == 0)
          break;
        v7 = (float32x2_t *)MEMORY[0x2276999E4](v9 + 1, v4);
        if (__OFADD__(v16, 1))
          goto LABEL_42;
LABEL_26:
        if ((v7[4].i8[0] & 1) == 0)
        {
          v17 = v7[2];
          v18 = (simd_float2)vsub_f32(*(float32x2_t *)&a3, v17);
          v19 = fabsf(v18.f32[1]);
          if (fabsf(v18.f32[0]) < a2 && v19 < a2)
            goto LABEL_7;
          v21 = v7[3];
          v22 = vsub_f32(*(float32x2_t *)&a3, v21);
          v23 = fabsf(v22.f32[1]);
          if (fabsf(v22.f32[0]) < a2 && v23 < a2)
            goto LABEL_7;
          v31 = (float32x2_t)v18;
          v25 = vsub_f32(v21, v17);
          if (fabsf(_simd_orient_vf2(v18, (simd_float2)v25)) <= a2)
          {
            v26 = vmul_f32(v31, v25);
            if (vaddv_f32(v26) > 0.0)
            {
              v27 = vsub_f32(v17, v21);
              v28 = vmul_f32(v27, v27);
              if ((vcgt_f32(vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)), vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1))).u8[0] & 1) != 0)goto LABEL_7;
            }
          }
        }
        ++v9;
      }
      if (v16 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_43;
      v7 = *(float32x2_t **)(v4 + 8 * v9 + 40);
      swift_retain();
      if (!__OFADD__(v16, 1))
        goto LABEL_26;
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      result = sub_22655D400();
      v5 = result;
    }
    while (result);
  }
  swift_bridgeObjectRelease();
  v8 = 0;
  return v8 & 1;
}

_OWORD *sub_2264541EC()
{
  float32x2_t *v0;
  float v1;
  float v2;
  float v3;
  float32x2_t v4;
  float v5;
  __int128 v6;
  unsigned int v7;
  __int128 v8;
  _OWORD *result;
  _OWORD *v10;
  char v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  char v16;
  _OWORD *v17;
  char v18;
  unint64_t v19;
  _OWORD *v20;
  float32x2_t v21;
  float v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  float32x2_t v30;
  float v31;
  __int128 v32;
  __int128 v33;
  int64_t v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  float32x2_t v38;
  unsigned int v39;
  float32x2_t v40;
  __int128 v41;
  float32x2_t v42;
  __int128 v43;
  unsigned int v44;
  _OWORD *v45;
  __int128 v46;
  float v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v1 = v0[2].f32[0] * 0.5;
  v2 = v0[2].f32[1] * 0.5;
  v3 = v0[3].f32[0] * 0.5;
  v4 = v0[10];
  v5 = v0[11].f32[0];
  *(float *)&v44 = v1 * v0[5].f32[0];
  *(float32x2_t *)&v6 = vmul_n_f32(v0[4], v1);
  *((_QWORD *)&v6 + 1) = v44;
  v50 = v6;
  v40 = (float32x2_t)v6;
  v42 = vmul_n_f32(v0[6], v2);
  *(float *)&v7 = v2 * v0[7].f32[0];
  *(float32x2_t *)&v6 = v42;
  *((_QWORD *)&v6 + 1) = v7;
  v46 = v6;
  v47 = *(float *)&v7;
  v38 = vmul_n_f32(vneg_f32(v0[8]), v3);
  *(float *)&v39 = -(float)(v0[9].f32[0] * v3);
  *(float32x2_t *)&v8 = v38;
  *((_QWORD *)&v8 + 1) = v39;
  v49 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
  result = (_OWORD *)swift_allocObject();
  v10 = result;
  v11 = 0;
  v12 = 0;
  result[1] = xmmword_22655FA10;
  *(float32x2_t *)&v13 = vsub_f32(0, v40);
  *((float *)&v13 + 2) = 0.0 - *(float *)&v44;
  HIDWORD(v13) = 0;
  result[2] = v13;
  v45 = result + 2;
  result[3] = v50;
  *(float32x2_t *)&v14 = vsub_f32(0, v42);
  *((float *)&v14 + 2) = 0.0 - v47;
  HIDWORD(v14) = 0;
  v43 = v14;
  *(float32x2_t *)&v13 = vsub_f32(0, v38);
  *((float *)&v13 + 2) = 0.0 - *(float *)&v39;
  HIDWORD(v13) = 0;
  v48 = v13;
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (2)
  {
    v16 = v11;
    if (v12 >= *((_QWORD *)v10 + 2))
    {
LABEL_16:
      __break(1u);
    }
    else
    {
      v51 = v45[v12];
      result = (_OWORD *)swift_allocObject();
      v17 = result;
      v18 = 0;
      v19 = 0;
      result[1] = xmmword_22655FA10;
      result[2] = v43;
      v20 = result + 2;
      result[3] = v46;
      v21 = vadd_f32(v4, *(float32x2_t *)&v51);
      v22 = v5 + *((float *)&v51 + 2);
      do
      {
        v23 = v18;
        if (v19 >= *((_QWORD *)v17 + 2))
        {
          __break(1u);
          goto LABEL_16;
        }
        v52 = v20[v19];
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 32) = v48;
        *(_OWORD *)(v24 + 48) = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = sub_226486AE0(0, v15[2] + 1, 1, v15);
        v25 = *(_OWORD *)(v24 + 32);
        v27 = v15[2];
        v26 = v15[3];
        v28 = v26 >> 1;
        v29 = v27 + 1;
        if (v26 >> 1 <= v27)
        {
          v41 = *(_OWORD *)(v24 + 32);
          v36 = sub_226486AE0((_QWORD *)(v26 > 1), v27 + 1, 1, v15);
          v25 = v41;
          v15 = v36;
          v26 = v36[3];
          v28 = v26 >> 1;
        }
        v30 = vadd_f32(v21, *(float32x2_t *)&v52);
        v31 = v22 + *((float *)&v52 + 2);
        *(float32x2_t *)&v32 = vadd_f32(v30, *(float32x2_t *)&v25);
        *((float *)&v32 + 2) = (float)(v22 + *((float *)&v52 + 2)) + *((float *)&v25 + 2);
        HIDWORD(v32) = 0;
        v15[2] = v29;
        *(_OWORD *)&v15[2 * v27 + 4] = v32;
        v33 = *(_OWORD *)(v24 + 48);
        v34 = v27 + 2;
        if (v28 < v34)
        {
          v53 = *(_OWORD *)(v24 + 48);
          v37 = sub_226486AE0((_QWORD *)(v26 > 1), v34, 1, v15);
          v33 = v53;
          v15 = v37;
        }
        *(float32x2_t *)&v35 = vadd_f32(v30, *(float32x2_t *)&v33);
        *((float *)&v35 + 2) = v31 + *((float *)&v33 + 2);
        HIDWORD(v35) = 0;
        v15[2] = v34;
        *(_OWORD *)&v15[2 * v29 + 4] = v35;
        swift_setDeallocating();
        result = (_OWORD *)swift_deallocClassInstance();
        v18 = 1;
        v19 = 1;
      }
      while ((v23 & 1) == 0);
      swift_setDeallocating();
      result = (_OWORD *)swift_deallocClassInstance();
      v11 = 1;
      v12 = 1;
      if ((v16 & 1) == 0)
        continue;
      swift_setDeallocating();
      swift_deallocClassInstance();
      return v15;
    }
    return result;
  }
}

BOOL sub_22645458C(uint64_t a1, float a2)
{
  _OWORD *v4;
  int64_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  float32x4_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  unint64_t v29;
  int64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v42;
  float v43;
  unint64_t v44;
  float32x4_t v45;
  float v46;
  float v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  BOOL v55;
  float v56;
  BOOL v57;
  float32x4_t v59;
  __int32 v60;
  simd_float4 v61;
  simd_float4 v62;
  simd_float4 v63;
  int v64;
  simd_float4 v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  simd_float4x4 v72;

  v72 = __invert_f4(*(simd_float4x4 *)(a1 + 32));
  v63 = v72.columns[1];
  v65 = v72.columns[0];
  v61 = v72.columns[3];
  v62 = v72.columns[2];
  v4 = sub_2264541EC();
  v5 = *((_QWORD *)v4 + 2);
  if (v5)
  {
    v68 = MEMORY[0x24BEE4AF8];
    sub_2264C1310(0, v5, 0);
    v7 = 0;
    v8 = v68;
    v9 = *(_QWORD *)(v68 + 16);
    v11 = (float32x4_t)v63;
    v10 = (float32x4_t)v65;
    v13 = (float32x4_t)v61;
    v12 = (float32x4_t)v62;
    do
    {
      v14 = (float32x4_t)v4[v7 + 2];
      v15 = *(_QWORD *)(v68 + 24);
      if (v9 >= v15 >> 1)
      {
        v59 = (float32x4_t)v4[v7 + 2];
        v60 = v6;
        sub_2264C1310(v15 > 1, v9 + 1, 1);
        v14 = v59;
        v6 = v60;
        v13 = (float32x4_t)v61;
        v12 = (float32x4_t)v62;
        v11 = (float32x4_t)v63;
        v10 = (float32x4_t)v65;
      }
      v16 = vaddq_f32(v13, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v14.f32[0]), v11, *(float32x2_t *)v14.f32, 1), v12, v14, 2));
      ++v7;
      v16.i32[3] = v6;
      *(_QWORD *)(v68 + 16) = v9 + 1;
      *(float32x4_t *)(v68 + 16 * v9++ + 32) = v16;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v8 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v69 = MEMORY[0x24BEE4AF8];
    sub_2264C7968(0, v17, 0);
    v18 = v69;
    v19 = (__int128 *)(v8 + 32);
    v20 = *(_QWORD *)(v69 + 16);
    v21 = v17;
    do
    {
      v22 = *v19;
      v23 = *(_QWORD *)(v69 + 24);
      if (v20 >= v23 >> 1)
      {
        v66 = *v19;
        sub_2264C7968(v23 > 1, v20 + 1, 1);
        LODWORD(v22) = v66;
      }
      *(_QWORD *)(v69 + 16) = v20 + 1;
      *(_DWORD *)(v69 + 4 * v20 + 32) = v22;
      ++v19;
      ++v20;
      --v21;
    }
    while (v21);
  }
  v24 = sub_2264DC480(v18);
  if ((v24 & 0x100000000) != 0)
    goto LABEL_28;
  v25 = *(float *)&v24;
  v26 = sub_2264DC4D8(v18);
  swift_bridgeObjectRelease();
  if ((v26 & 0x100000000) != 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  v27 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v70 = MEMORY[0x24BEE4AF8];
    sub_2264C7968(0, v17, 0);
    v27 = v70;
    v28 = (__int128 *)(v8 + 32);
    v29 = *(_QWORD *)(v70 + 16);
    v30 = v17;
    do
    {
      v31 = *v28;
      v32 = *(_QWORD *)(v70 + 24);
      if (v29 >= v32 >> 1)
      {
        v67 = HIDWORD(*(_QWORD *)v28);
        sub_2264C7968(v32 > 1, v29 + 1, 1);
        DWORD1(v31) = v67;
      }
      *(_QWORD *)(v70 + 16) = v29 + 1;
      *(_DWORD *)(v70 + 4 * v29 + 32) = DWORD1(v31);
      ++v28;
      ++v29;
      --v30;
    }
    while (v30);
  }
  v33 = sub_2264DC480(v27);
  if ((v33 & 0x100000000) != 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v34 = *(float *)&v33;
  v35 = sub_2264DC4D8(v27);
  swift_bridgeObjectRelease();
  if ((v35 & 0x100000000) != 0)
    goto LABEL_29;
  if (v17)
  {
    v71 = MEMORY[0x24BEE4AF8];
    sub_2264C7968(0, v17, 0);
    v36 = 0;
    v37 = v71;
    v38 = *(_QWORD *)(v71 + 16);
    do
    {
      v39 = *(_OWORD *)(v8 + 16 * v36 + 32);
      v40 = *(_QWORD *)(v71 + 24);
      if (v38 >= v40 >> 1)
      {
        v64 = *(_QWORD *)(v8 + 16 * v36 + 40);
        sub_2264C7968(v40 > 1, v38 + 1, 1);
        DWORD2(v39) = v64;
      }
      ++v36;
      *(_QWORD *)(v71 + 16) = v38 + 1;
      *(_DWORD *)(v71 + 4 * v38++ + 32) = DWORD2(v39);
    }
    while (v17 != v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v37 = MEMORY[0x24BEE4AF8];
  }
  v42 = sub_2264DC480(v37);
  if ((v42 & 0x100000000) != 0)
    goto LABEL_29;
  v43 = *(float *)&v42;
  v44 = sub_2264DC4D8(v37);
  swift_bridgeObjectRelease();
  if ((v44 & 0x100000000) != 0)
    return 0;
  v45 = *(float32x4_t *)(a1 + 16);
  v46 = vmuls_lane_f32(0.5, v45, 2);
  v47 = (float)(*(float *)&v26 - v25) * a2;
  v48 = v47 > (float)((float)(0.5 * v45.f32[0]) - v25)
     || v47 > (float)(*(float *)&v26 - (float)(0.0 - (float)(0.5 * v45.f32[0])));
  v49 = vmuls_lane_f32(0.5, *(float32x2_t *)v45.f32, 1);
  v50 = 0.0 - v49;
  v51 = v49 - v34;
  v52 = (float)(*(float *)&v35 - v34) * a2;
  v53 = *(float *)&v35 - v50;
  v54 = v48 || v52 > v51;
  v55 = v54 || v52 > v53;
  v56 = (float)(*(float *)&v44 - v43) * a2;
  v57 = v55 || v56 > (float)(v46 - v43);
  return !v57 && v56 <= (float)(*(float *)&v44 - (float)(0.0 - v46));
}

uint64_t sub_2264549E4(char a1)
{
  uint64_t result;

  if ((a1 & 8) != 0)
  {
    if ((a1 & 4) == 0)
    {
      result = 240;
      if ((a1 & 2) == 0)
      {
        if ((a1 & 1) != 0)
          goto LABEL_22;
        return result;
      }
      goto LABEL_16;
    }
    result = 255;
    if ((a1 & 2) == 0)
      goto LABEL_18;
    goto LABEL_13;
  }
  if ((a1 & 4) == 0)
  {
    result = 0;
    if ((a1 & 2) == 0)
    {
      if ((a1 & 1) == 0)
        return result;
LABEL_20:
      LODWORD(result) = result | 0x40;
LABEL_21:
      if ((result & 4) != 0)
        return result | 0x88;
LABEL_22:
      LODWORD(result) = result | 4;
      return result | 0x88;
    }
LABEL_14:
    LODWORD(result) = result | 0x20;
LABEL_15:
    if ((result & 2) != 0)
    {
LABEL_17:
      result = result | 0x11;
      goto LABEL_18;
    }
LABEL_16:
    LODWORD(result) = result | 2;
    goto LABEL_17;
  }
  result = 15;
  if ((a1 & 2) != 0)
  {
LABEL_13:
    if ((result & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_18:
  if ((a1 & 1) != 0)
  {
    if ((result & 0x40) != 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_226454A60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _OWORD *v22;
  float v23;
  float v24;
  float v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  void *v63;
  id v64;
  void *v65;
  unsigned int v66;
  id v67;
  void *v68;
  unsigned int v69;
  id v70;
  id v71;
  void *v72;
  unsigned int v73;
  void *v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  _QWORD *v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  _OWORD *v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  __int128 v100;
  __int128 v101;
  float v102;
  float v103;
  float v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  unint64_t v118;
  __int128 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  char v135;
  void *v136;
  void *v137;
  id v138;
  id v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  id v143;
  void *v144;
  char *v145;
  void *v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  id v152;
  uint64_t v153;
  _QWORD *v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  float *v173;
  _QWORD *v174;
  unint64_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  v161 = sub_22655C05C();
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x24BDAC7A8](v161);
  v159 = (char *)&v153 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_22655C0E0();
  v157 = *(_QWORD *)(v158 - 8);
  MEMORY[0x24BDAC7A8](v158);
  v156 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for CapturedRoom.Object(0);
  v168 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v173 = (float *)((char *)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v167 = type metadata accessor for CapturedRoom.Surface(0);
  v169 = *(_QWORD *)(v167 - 8);
  MEMORY[0x24BDAC7A8](v167);
  v175 = (unint64_t)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_logPerimeterDirectoryPath;
  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_logPerimeterDirectoryPath + 8);
  if (result)
    goto LABEL_2;
  v55 = (_QWORD *)(v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_captureSession);
  result = swift_beginAccess();
  if (!*v55)
  {
    __break(1u);
    return result;
  }
  v56 = *v55 + OBJC_IVAR____TtC8RoomPlan18RoomCaptureSession_debugDelegate;
  swift_beginAccess();
  result = MEMORY[0x22769A944](v56);
  if (result)
  {
    v57 = *(_QWORD *)(v56 + 8);
    ObjectType = swift_getObjectType();
    v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(ObjectType, v57);
    v61 = v60;
    swift_unknownObjectRelease();
    *(_QWORD *)&v179 = v59;
    *((_QWORD *)&v179 + 1) = v61;
    swift_bridgeObjectRetain();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v62 = v179;
    v63 = (void *)objc_opt_self();
    v64 = objc_msgSend(v63, sel_defaultManager);
    v65 = (void *)sub_22655CD64();
    v66 = objc_msgSend(v64, sel_fileExistsAtPath_, v65);

    if (v66)
    {
      v67 = objc_msgSend(v63, sel_defaultManager);
      v68 = (void *)sub_22655CD64();
      *(_QWORD *)&v179 = 0;
      v69 = objc_msgSend(v67, sel_removeItemAtPath_error_, v68, &v179);

      if (!v69)
        goto LABEL_59;
      v70 = (id)v179;
    }
    v71 = objc_msgSend(v63, sel_defaultManager);
    v72 = (void *)sub_22655CD64();
    *(_QWORD *)&v179 = 0;
    v73 = objc_msgSend(v71, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v72, 1, 0, &v179);

    v74 = (void *)v179;
    if (v73)
    {
      *(_OWORD *)v7 = v62;
      v75 = v74;
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(v7 + 8);
      if (result)
      {
LABEL_2:
        *(_QWORD *)&v155 = *(_QWORD *)v7;
        v9 = *a1;
        v165 = *(_QWORD *)(*a1 + 16);
        *((_QWORD *)&v155 + 1) = result;
        if (v165)
        {
          v154 = a1;
          v164 = v9 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 = 0;
          v11 = (char *)MEMORY[0x24BEE4AF8];
          v163 = xmmword_22655FA10;
          v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v162 = v9;
          do
          {
            if (v10 >= *(_QWORD *)(v9 + 16))
            {
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
            }
            v13 = v175;
            sub_22643D704(v164 + *(_QWORD *)(v169 + 72) * v10, v175, type metadata accessor for CapturedRoom.Surface);
            v14 = *(_OWORD *)(v13 + 16);
            v15 = vmuls_lane_f32(-0.5, *(float32x2_t *)&v14, 1);
            v16 = v15 * *(float *)(v13 + 48);
            v17 = v15 * *(float *)(v13 + 52);
            v18 = v15 * *(float *)(v13 + 56);
            *(float *)&v14 = 0.5 * *(float *)&v14;
            v19 = *(float *)&v14 * *(float *)(v13 + 32);
            v20 = *(float *)&v14 * *(float *)(v13 + 36);
            v21 = *(float *)&v14 * *(float *)(v13 + 40);
            __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
            v22 = (_OWORD *)swift_allocObject();
            v22[1] = v163;
            v23 = *(float *)(v13 + 80);
            v24 = *(float *)(v13 + 84);
            v25 = *(float *)(v13 + 88);
            HIDWORD(v26) = 0;
            *(float *)&v26 = v16 + (float)(v23 - v19);
            *((float *)&v26 + 1) = v17 + (float)(v24 - v20);
            *((float *)&v26 + 2) = v18 + (float)(v25 - v21);
            v22[2] = v26;
            v27 = v22 + 2;
            HIDWORD(v28) = 0;
            *(float *)&v28 = v16 + (float)(v19 + v23);
            *((float *)&v28 + 1) = v17 + (float)(v20 + v24);
            *((float *)&v28 + 2) = v18 + (float)(v21 + v25);
            v22[3] = v28;
            v29 = sub_22655C0EC();
            v180 = MEMORY[0x24BEE0D00];
            *(_QWORD *)&v179 = v29;
            *((_QWORD *)&v179 + 1) = v30;
            sub_226455C88(&v179, &v178);
            v31 = MEMORY[0x24BEE4B00];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v177 = v31;
            sub_226522F64(&v178, 0x696669746E656469, 0xEA00000000007265, isUniquelyReferenced_nonNull_native);
            v33 = v177;
            swift_bridgeObjectRelease();
            v172 = v22;
            if (*((_QWORD *)v22 + 2) < 2uLL)
              goto LABEL_62;
            v170 = v33;
            v174 = v12;
            v34 = 0;
            v35 = 0;
            v171 = v10 + 1;
            v36 = v11;
            do
            {
              v37 = v34;
              v176 = v27[v35];
              v38 = sub_2264880D8(0, 1, 1, v11);
              v40 = *((_QWORD *)v38 + 2);
              v39 = *((_QWORD *)v38 + 3);
              v41 = v39 >> 1;
              v42 = v40 + 1;
              if (v39 >> 1 <= v40)
              {
                v38 = sub_2264880D8((char *)(v39 > 1), v40 + 1, 1, v38);
                v39 = *((_QWORD *)v38 + 3);
                v41 = v39 >> 1;
              }
              *((_QWORD *)v38 + 2) = v42;
              v43 = v176;
              *(_DWORD *)&v38[4 * v40 + 32] = v176;
              v44 = v40 + 2;
              if (v41 < (uint64_t)(v40 + 2))
              {
                v48 = sub_2264880D8((char *)(v39 > 1), v40 + 2, 1, v38);
                v43 = v176;
                v38 = v48;
              }
              *((_QWORD *)v38 + 2) = v44;
              *(_DWORD *)&v38[4 * v42 + 32] = DWORD2(v43);
              v45 = *((_QWORD *)v38 + 3);
              if ((uint64_t)(v40 + 3) > (uint64_t)(v45 >> 1))
              {
                v49 = sub_2264880D8((char *)(v45 > 1), v40 + 3, 1, v38);
                DWORD1(v43) = DWORD1(v176);
                v38 = v49;
              }
              *((_QWORD *)v38 + 2) = v40 + 3;
              *(_DWORD *)&v38[4 * v44 + 32] = DWORD1(v43);
              v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B50);
              *(_QWORD *)&v179 = v38;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v36 = sub_2264881E4(0, v36[2] + 1, 1, v36);
              v47 = v36[2];
              v46 = v36[3];
              if (v47 >= v46 >> 1)
                v36 = sub_2264881E4((_QWORD *)(v46 > 1), v47 + 1, 1, v36);
              v36[2] = v47 + 1;
              sub_226455C88(&v179, &v36[4 * v47 + 4]);
              v34 = 1;
              v35 = 1;
            }
            while ((v37 & 1) == 0);
            swift_bridgeObjectRelease();
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B58);
            *(_QWORD *)&v179 = v36;
            sub_226455C88(&v179, &v178);
            v50 = v170;
            v51 = swift_isUniquelyReferenced_nonNull_native();
            v177 = v50;
            sub_226522F64(&v178, 0x73746E696F70, 0xE600000000000000, v51);
            v52 = v177;
            swift_bridgeObjectRelease();
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B60);
            *(_QWORD *)&v179 = v52;
            v12 = v174;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v12 = sub_2264881E4(0, v12[2] + 1, 1, v12);
            v9 = v162;
            v10 = v171;
            v54 = v12[2];
            v53 = v12[3];
            if (v54 >= v53 >> 1)
              v12 = sub_2264881E4((_QWORD *)(v53 > 1), v54 + 1, 1, v12);
            v12[2] = v54 + 1;
            sub_226455C88(&v179, &v12[4 * v54 + 4]);
            sub_22643D748(v175, type metadata accessor for CapturedRoom.Surface);
          }
          while (v10 != v165);
          swift_bridgeObjectRelease();
          a1 = v154;
        }
        else
        {
          swift_bridgeObjectRetain();
          v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v76 = a1[5];
        v170 = *(_QWORD *)(v76 + 16);
        if (v170)
        {
          v174 = v12;
          v169 = v76 + ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80));
          swift_bridgeObjectRetain();
          v77 = 0;
          v78 = (char *)MEMORY[0x24BEE4AF8];
          v167 = xmmword_22655FA80;
          v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v165 = v76;
          do
          {
            if (v77 >= *(_QWORD *)(v76 + 16))
              goto LABEL_63;
            v80 = v173;
            sub_22643D704(v169 + *(_QWORD *)(v168 + 72) * v77, (uint64_t)v173, type metadata accessor for CapturedRoom.Object);
            v81 = v80[4];
            v82 = v80[5] * -0.5;
            v83 = v82 * v80[12];
            v84 = v82 * v80[13];
            *(float *)&v176 = v82 * v80[14];
            v85 = (float)(v81 * 0.5) * v80[8];
            v86 = (float)(v81 * 0.5) * v80[9];
            v87 = (float)(v81 * 0.5) * v80[10];
            v88 = v80[6] * 0.5;
            v89 = -(float)(v80[16] * v88);
            v90 = -(float)(v80[17] * v88);
            v91 = -(float)(v80[18] * v88);
            __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
            v92 = (_OWORD *)swift_allocObject();
            v93 = v80[20];
            v94 = v80[21];
            v95 = v80[22];
            v96 = v83 + (float)(v93 - v85);
            v97 = v84 + (float)(v94 - v86);
            v98 = *(float *)&v176;
            v99 = *(float *)&v176 + (float)(v95 - v87);
            HIDWORD(v100) = 0;
            *(float *)&v100 = v96 - v89;
            *((float *)&v100 + 1) = v97 - v90;
            *((float *)&v100 + 2) = v99 - v91;
            v92[1] = v167;
            v92[2] = v100;
            HIDWORD(v101) = 0;
            *(float *)&v101 = v89 + v96;
            *((float *)&v101 + 1) = v90 + v97;
            *((float *)&v101 + 2) = v91 + v99;
            v102 = v83 + (float)(v85 + v93);
            v103 = v84 + (float)(v86 + v94);
            v104 = v98 + (float)(v87 + v95);
            HIDWORD(v105) = 0;
            *(float *)&v105 = v89 + v102;
            *((float *)&v105 + 1) = v90 + v103;
            *((float *)&v105 + 2) = v91 + v104;
            v92[3] = v101;
            v92[4] = v105;
            HIDWORD(v106) = 0;
            *(float *)&v106 = v102 - v89;
            *((float *)&v106 + 1) = v103 - v90;
            *((float *)&v106 + 2) = v104 - v91;
            v92[5] = v106;
            v107 = sub_22655C0EC();
            v180 = MEMORY[0x24BEE0D00];
            *(_QWORD *)&v179 = v107;
            *((_QWORD *)&v179 + 1) = v108;
            sub_226455C88(&v179, &v178);
            v109 = MEMORY[0x24BEE4B00];
            v110 = swift_isUniquelyReferenced_nonNull_native();
            v177 = v109;
            sub_226522F64(&v178, 0x696669746E656469, 0xEA00000000007265, v110);
            v111 = v177;
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v92 + 2) < 4uLL)
              goto LABEL_64;
            v171 = v111;
            v172 = v79;
            v175 = v77 + 1;
            v112 = 2;
            v113 = v78;
            do
            {
              v176 = v92[v112];
              v114 = sub_2264880D8(0, 1, 1, v78);
              v116 = *((_QWORD *)v114 + 2);
              v115 = *((_QWORD *)v114 + 3);
              v117 = v115 >> 1;
              v118 = v116 + 1;
              if (v115 >> 1 <= v116)
              {
                v114 = sub_2264880D8((char *)(v115 > 1), v116 + 1, 1, v114);
                v115 = *((_QWORD *)v114 + 3);
                v117 = v115 >> 1;
              }
              *((_QWORD *)v114 + 2) = v118;
              v119 = v176;
              *(_DWORD *)&v114[4 * v116 + 32] = v176;
              v120 = v116 + 2;
              if (v117 < (uint64_t)(v116 + 2))
              {
                v124 = sub_2264880D8((char *)(v115 > 1), v116 + 2, 1, v114);
                v119 = v176;
                v114 = v124;
              }
              *((_QWORD *)v114 + 2) = v120;
              *(_DWORD *)&v114[4 * v118 + 32] = DWORD2(v119);
              v121 = *((_QWORD *)v114 + 3);
              if ((uint64_t)(v116 + 3) > (uint64_t)(v121 >> 1))
              {
                v125 = sub_2264880D8((char *)(v121 > 1), v116 + 3, 1, v114);
                DWORD1(v119) = DWORD1(v176);
                v114 = v125;
              }
              *((_QWORD *)v114 + 2) = v116 + 3;
              *(_DWORD *)&v114[4 * v120 + 32] = DWORD1(v119);
              v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B50);
              *(_QWORD *)&v179 = v114;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v113 = sub_2264881E4(0, v113[2] + 1, 1, v113);
              v123 = v113[2];
              v122 = v113[3];
              if (v123 >= v122 >> 1)
                v113 = sub_2264881E4((_QWORD *)(v122 > 1), v123 + 1, 1, v113);
              v113[2] = v123 + 1;
              sub_226455C88(&v179, &v113[4 * v123 + 4]);
              ++v112;
            }
            while (v112 != 6);
            swift_bridgeObjectRelease();
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B58);
            *(_QWORD *)&v179 = v113;
            sub_226455C88(&v179, &v178);
            v126 = v171;
            v127 = swift_isUniquelyReferenced_nonNull_native();
            v177 = v126;
            sub_226522F64(&v178, 0x73746E696F70, 0xE600000000000000, v127);
            v128 = v177;
            swift_bridgeObjectRelease();
            v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B60);
            *(_QWORD *)&v179 = v128;
            v79 = v172;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v79 = sub_2264881E4(0, v79[2] + 1, 1, v79);
            v76 = v165;
            v77 = v175;
            v130 = v79[2];
            v129 = v79[3];
            if (v130 >= v129 >> 1)
              v79 = sub_2264881E4((_QWORD *)(v129 > 1), v130 + 1, 1, v79);
            v79[2] = v130 + 1;
            sub_226455C88(&v179, &v79[4 * v130 + 4]);
            sub_22643D748((uint64_t)v173, type metadata accessor for CapturedRoom.Object);
          }
          while (v77 != v170);
          swift_bridgeObjectRelease();
          v12 = v174;
        }
        else
        {
          v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841B58);
        v180 = v131;
        *(_QWORD *)&v179 = v12;
        sub_226455C88(&v179, &v178);
        v132 = MEMORY[0x24BEE4B00];
        v133 = swift_isUniquelyReferenced_nonNull_native();
        v177 = v132;
        sub_226522F64(&v178, 0x736C6C6177, 0xE500000000000000, v133);
        v134 = v177;
        swift_bridgeObjectRelease();
        v180 = v131;
        *(_QWORD *)&v179 = v79;
        sub_226455C88(&v179, &v178);
        v135 = swift_isUniquelyReferenced_nonNull_native();
        v177 = v134;
        sub_226522F64(&v178, 0x737463656A626FLL, 0xE700000000000000, v135);
        swift_bridgeObjectRelease();
        v136 = (void *)objc_opt_self();
        v137 = (void *)sub_22655CCBC();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v179 = 0;
        v138 = objc_msgSend(v136, sel_dataWithPropertyList_format_options_error_, v137, 100, 0, &v179);

        v139 = (id)v179;
        if (v138)
        {
          v140 = sub_22655C080();
          v142 = v141;

          v143 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
          v144 = (void *)sub_22655CD64();
          objc_msgSend(v143, sel_setDateFormat_, v144);

          v145 = v156;
          sub_22655C0D4();
          v146 = (void *)sub_22655C0BC();
          (*(void (**)(char *, uint64_t))(v157 + 8))(v145, v158);
          v147 = objc_msgSend(v143, sel_stringFromDate_, v146);

          v148 = sub_22655CD88();
          v150 = v149;

          *(_QWORD *)&v179 = v148;
          *((_QWORD *)&v179 + 1) = v150;
          swift_bridgeObjectRetain();
          sub_22655CE24();
          v151 = v159;
          swift_bridgeObjectRelease();
          v179 = v155;
          swift_bridgeObjectRetain();
          sub_22655CE24();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_22655BFC0();
          swift_bridgeObjectRelease();
          sub_22655C08C();
          (*(void (**)(char *, uint64_t))(v160 + 8))(v151, v161);

          return sub_226455C98(v140, v142);
        }
        v152 = v139;
        swift_bridgeObjectRelease();
        goto LABEL_60;
      }
      return result;
    }
LABEL_59:
    v152 = (id)v179;
    swift_bridgeObjectRelease();
LABEL_60:
    sub_22655BF6C();

    return swift_willThrow();
  }
  return result;
}

_OWORD *sub_226455C88(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_226455C98(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_226455CDC()
{
  uint64_t result;

  type metadata accessor for RoomCaptureGeometryManager();
  result = swift_initStaticObject();
  qword_255841B68 = result;
  return result;
}

uint64_t static RoomCaptureGeometryManager.shared.getter()
{
  type metadata accessor for RoomCaptureGeometryManager();
  return swift_initStaticObject();
}

uint64_t type metadata accessor for RoomCaptureGeometryManager()
{
  return objc_opt_self();
}

_QWORD *sub_226455D40(uint64_t a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;

  v12 = 0;
  v11 = MEMORY[0x24BEE4AF8];
  v6 = sub_22645C9EC(a1, a4);
  if (a3)
  {
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_2264EA930(v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_226455E10(v6, a2, v8, &v12, &v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v9;
}

_QWORD *sub_226455E10(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t inited;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;

  type metadata accessor for CDTTriangulator();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 24) = 0;
  *(_WORD *)(inited + 16) = 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v61 = MEMORY[0x24BEE4AF8];
    sub_2264C79C4(0, v9, 0);
    v11 = v61;
    v12 = (__int128 *)(a1 + 32);
    v13 = *(_QWORD *)(v61 + 16);
    do
    {
      v14 = *v12;
      v61 = v11;
      v15 = *(_QWORD *)(v11 + 24);
      if (v13 >= v15 >> 1)
      {
        v57 = v14;
        sub_2264C79C4(v15 > 1, v13 + 1, 1);
        *(_QWORD *)&v14 = v57;
        v11 = v61;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_QWORD *)(v11 + 8 * v13 + 32) = v14;
      ++v12;
      ++v13;
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  *a5 = v10;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_22655D400();
    v16 = (uint64_t)result;
    if (!result)
      goto LABEL_20;
  }
  else
  {
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (!v16)
      goto LABEL_20;
  }
  if (v16 < 1)
  {
    __break(1u);
LABEL_69:
    __break(1u);
    return result;
  }
  v18 = 0;
  do
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v19 = MEMORY[0x2276999E4](v18, a2);
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 8 * v18 + 32);
      swift_retain();
    }
    v58 = *(_QWORD *)(v19 + 16);
    v56 = *(_QWORD *)(v19 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
    v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_22655FA80;
    *(_QWORD *)(v20 + 32) = v58;
    *(_QWORD *)(v20 + 40) = __PAIR64__(HIDWORD(v58), v56);
    *(_QWORD *)(v20 + 48) = v56;
    *(_QWORD *)(v20 + 56) = __PAIR64__(HIDWORD(v56), v58);
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    sub_2264EA930(v20);
    MEMORY[0x227699594]();
    if (*(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    ++v18;
    sub_22655CF08();
    sub_22655CEE4();
    swift_release();
  }
  while (v16 != v18);
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v53 + 16) == 1)
  {
    v21 = swift_bridgeObjectRetain();
    v22 = sub_2264D1D78(v21);
    type metadata accessor for CDTPolygon();
    swift_initStackObject();
    v23 = sub_2264EA930(v22);
    v24 = a4;
    if (a3)
    {
      v25 = a3;
    }
    else
    {
      swift_allocObject();
      v25 = sub_2264EA930(MEMORY[0x24BEE4AF8]);
    }
    swift_retain();
    swift_release();
    sub_2264E1678(v23, v25, MEMORY[0x24BEE4AF8]);
    swift_release();
  }
  else
  {
    v24 = a4;
  }
  swift_release();
  v26 = swift_bridgeObjectRetain();
  v27 = sub_2264D1D78(v26);
  type metadata accessor for CDTPolygon();
  swift_allocObject();
  v28 = sub_2264EA930(v27);
  *v24 = v28;
  if ((sub_2264EB070() & 1) != 0)
  {
    swift_release();
    swift_allocObject();
    v28 = sub_2264EA930(v11);
    *v24 = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v29 = MEMORY[0x24BEE4AF8];
  v30 = a3;
  if (a3)
  {
    swift_retain();
    if ((sub_2264EB070() & 1) != 0)
    {
      v31 = swift_bridgeObjectRetain();
      v32 = sub_2264D1D78(v31);
      swift_allocObject();
      v33 = sub_2264EA930(v32);
      swift_release();
      v30 = v33;
    }
    v34 = sub_2264DCB14(v28, v30);
    swift_release();
    swift_release();
    *v24 = v34;
    v28 = v34;
  }
  v35 = sub_2264DCBF4(*a5);
  swift_bridgeObjectRelease();
  *a5 = v35;
  if (v35 >> 62)
  {
LABEL_58:
    swift_bridgeObjectRetain();
    result = (_QWORD *)sub_22655D400();
    v36 = (uint64_t)result;
    if (result)
    {
LABEL_35:
      if (v36 >= 1)
      {
        v37 = 0;
        v29 = 953267991;
        while (1)
        {
          if ((v35 & 0xC000000000000001) != 0)
          {
            v38 = MEMORY[0x2276999E4](v37, v35);
          }
          else
          {
            v38 = *(_QWORD *)(v35 + 8 * v37 + 32);
            swift_retain();
          }
          if ((sub_2264EADEC() & 1) != 0 && (sub_2264EAB50(v28, 0.001) & 1) == 0)
          {
            swift_retain();
            v40 = v38;
            goto LABEL_50;
          }
          if ((sub_2264EADEC() & 1) != 0 && (sub_2264EADEC() & 1) != 0)
          {
            v39 = sub_2264E21A4(v38, v28, 0);
            if (!v39)
              goto LABEL_47;
          }
          else
          {
            v39 = sub_2264DE6A8(v38, v28, 0, 1, 0.0001);
            if (!v39)
            {
LABEL_47:
              swift_allocObject();
              v39 = sub_2264EA930(MEMORY[0x24BEE4AF8]);
            }
          }
          v40 = v39;
LABEL_50:
          v41 = *a5;
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a5 = v41;
          if (!isUniquelyReferenced_nonNull_bridgeObject
            || (v41 & 0x8000000000000000) != 0
            || (v41 & 0x4000000000000000) != 0)
          {
            sub_2264C10BC(v41);
          }
          if (v37 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_58;
          }
          *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v37 + 0x20) = v40;
          swift_release();
          sub_22655CEE4();
          swift_release();
          if (v36 == ++v37)
          {
            swift_bridgeObjectRelease();
            v29 = MEMORY[0x24BEE4AF8];
            goto LABEL_60;
          }
        }
      }
      goto LABEL_69;
    }
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v36)
      goto LABEL_35;
  }
  swift_bridgeObjectRelease();
LABEL_60:
  v43 = *a5;
  swift_bridgeObjectRetain();
  v44 = sub_2264DCEE8(v28, v43, 0, 0, 1);
  swift_bridgeObjectRelease();
  v61 = v29;
  v60 = (char *)v29;
  sub_2264E4CE4(v44, (uint64_t)&v61, &v60);
  swift_bridgeObjectRelease();
  v45 = v61;
  v46 = *(_QWORD *)(v61 + 16);
  if (v46)
  {
    swift_bridgeObjectRetain();
    sub_2264C1310(0, v46, 0);
    v48 = 0;
    v49 = *(_QWORD *)(v29 + 16);
    do
    {
      *(_QWORD *)&v47 = *(_QWORD *)(v45 + 8 * v48 + 32);
      v50 = *(_QWORD *)(v29 + 24);
      if (v49 >= v50 >> 1)
      {
        v59 = v47;
        sub_2264C1310(v50 > 1, v49 + 1, 1);
        v47 = v59;
      }
      ++v48;
      *(_QWORD *)(v29 + 16) = v49 + 1;
      *(_OWORD *)(v29 + 16 * v49++ + 32) = v47;
    }
    while (v46 != v48);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_2265143CC(*(_QWORD *)(v29 + 16), (__n128)xmmword_226560080);
  v51 = swift_bridgeObjectRetain();
  sub_22646A170(v51);
  swift_bridgeObjectRelease();
  swift_release();
  v52 = v60;
  type metadata accessor for RoomCaptureMesh();
  result = (_QWORD *)swift_allocObject();
  result[2] = v29;
  result[3] = v29;
  result[4] = v52;
  return result;
}

_QWORD *sub_226456594(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, float a8, float32_t a9, float a10)
{
  float32x2_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int32x2_t v47;
  float32x4_t v48;
  uint64_t v49;
  int32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  int32x4_t v59;
  float32x2_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  __int128 v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  int64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v100;
  unint64_t v101;
  int64_t v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int32x2_t v130;
  __int128 v131;
  __int128 v132;
  float32x2_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int32x2_t v138;
  float v139;
  float32x2_t v140;
  uint64_t v141;
  BOOL v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  int32x4_t v147;
  __int128 v148;
  __int128 v149;
  float32x2_t v150;
  int32x4_t v151;
  int32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x4_t v157;
  uint64_t v158;
  float32x4_t v159;
  _QWORD *v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  unint64_t v181;
  int64_t v182;
  int64_t v183;
  int64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 v191;
  unint64_t v192;
  __int128 v193;
  unint64_t v194;
  unint64_t v195;
  __int128 v196;
  unint64_t v197;
  _QWORD *result;
  uint64_t v199;
  uint64_t v200;
  int64_t v201;
  uint64_t v202;
  float32x4_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  float32x4_t v211;
  uint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  int64_t v218;
  uint64_t v219;
  float32x4_t v220;
  uint64_t v221;
  uint64_t *v222;
  unint64_t v223;
  int64_t v224;
  unint64_t v225;
  unint64_t v226;
  float v227;
  float32x4_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  double v234;
  double v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  double v239;
  float32x2_t *v240;
  _QWORD *v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  int v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int64_t v256;
  uint64_t v257;
  float32x4_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  float v263;
  uint64_t v264;
  uint64_t v265;
  float32x4_t v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  char v272;
  int64_t v273;
  uint64_t v274;
  float32x4_t v275;
  uint64_t v276;
  uint64_t *v277;
  unint64_t v278;
  int64_t v279;
  unint64_t v280;
  unint64_t v281;
  float v282;
  float32x4_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  double v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  double v294;
  float32x2_t *v295;
  _QWORD *v296;
  uint64_t v297;
  int64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  int v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  __n128 v320;
  uint64_t v321;
  unint64_t v322;
  __int128 v323;
  __int128 v324;
  char *v325;
  float32x2_t *v326;
  char *v327;
  float32x2_t *v328;
  float32x4_t v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  __int128 v333;
  int32x4_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  float32x4_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;

  v11.f32[0] = a9;
  v313 = a6;
  LODWORD(v332) = a4;
  v320 = a7;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v327 = (char *)&v312 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v325 = (char *)&v312 - v20;
  v316 = type metadata accessor for ScanItemStrut();
  v314 = *(_QWORD *)(v316 - 8);
  v21 = MEMORY[0x24BDAC7A8](v316);
  v328 = (float32x2_t *)((char *)&v312 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21);
  v326 = (float32x2_t *)((char *)&v312 - v23);
  v343 = MEMORY[0x24BEE4AF8];
  v344 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v341 = 0;
  v342 = MEMORY[0x24BEE4AF8];
  v340 = MEMORY[0x24BEE4AF8];
  v24 = sub_22645C9EC(a1, a10);
  v315 = a5;
  if (a3)
  {
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    v25 = swift_bridgeObjectRetain();
    v26 = sub_2264EA930(v25);
  }
  else
  {
    v26 = 0;
  }
  v322 = a2;
  v27 = (unint64_t)sub_226455E10(v24, a2, v26, &v341, &v340);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v28 = swift_bridgeObjectRetain();
  v29 = sub_22645A430(v28, a8);
  swift_bridgeObjectRelease();
  swift_release();
  sub_22646A170(v29);
  v30 = swift_bridgeObjectRetain();
  sub_22646A170(v30);
  v317 = v27;
  v31 = *(_QWORD *)(v27 + 32);
  v32 = swift_bridgeObjectRetain();
  sub_22646A2B4(v32);
  v33 = *(_QWORD *)(v31 + 16);
  v34 = MEMORY[0x24BEE4AF8];
  if (v33)
  {
    v338.i64[0] = 0;
    v339 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v33, 0);
    v35 = 0;
    v34 = v339;
    v36 = v344;
    while (1)
    {
      v37 = v36[2];
      if (HIDWORD(v37))
        goto LABEL_260;
      v38 = *(_DWORD *)(v31 + 4 * v35 + 32);
      v39 = v38 + v37;
      if (__CFADD__(v38, (_DWORD)v37))
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v339 = v34;
      v27 = *(_QWORD *)(v34 + 16);
      v40 = *(_QWORD *)(v34 + 24);
      if (v27 >= v40 >> 1)
      {
        sub_2264C7984(v40 > 1, v27 + 1, 1);
        v34 = v339;
      }
      ++v35;
      *(_QWORD *)(v34 + 16) = v27 + 1;
      *(_DWORD *)(v34 + 4 * v27 + 32) = v39;
      if (v33 == v35)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_22646AD7C(v34);
  v41 = v317;
  swift_retain();
  v42 = swift_bridgeObjectRetain();
  v43 = sub_22645A520(v42, v11.f32[0]);
  swift_bridgeObjectRelease();
  swift_release();
  sub_22646A170(v43);
  v44 = sub_2265143CC(*(_QWORD *)(*(_QWORD *)(v41 + 16) + 16), (__n128)xmmword_226560090);
  sub_22646A170(v44);
  if (!v341)
    goto LABEL_259;
  v27 = *(_QWORD *)(v341 + 24);
  if (v27 >> 62)
  {
LABEL_68:
    swift_bridgeObjectRetain();
    v45 = sub_22655D400();
    if (v45)
      goto LABEL_15;
  }
  else
  {
    v45 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v45)
    {
LABEL_15:
      if (v45 >= 1)
      {
        v49 = 0;
        *(_QWORD *)&v331 = v27 & 0xC000000000000001;
        v50.i32[1] = v320.n128_i32[1];
        v51 = vmuls_lane_f32(-0.5, (float32x2_t)v320.n128_u64[0], 1);
        *(float *)v50.i32 = a8 * 0.0;
        v48.f32[0] = a8 + 0.0;
        *(float *)v47.i32 = v11.f32[0] * 0.0;
        *(float *)&v46 = 0.0 - v11.f32[0];
        v337 = v46;
        *(float *)&v46 = (float)(0.0 - v11.f32[0]) - (float)(a8 + 0.0);
        v330 = v46;
        v338 = v48;
        *(float *)&v46 = v48.f32[0] - v48.f32[0];
        v324 = v46;
        v52 = (float32x2_t)vdup_lane_s32(v50, 0);
        v53 = (float32x2_t)vdup_lane_s32(v47, 0);
        v323 = xmmword_2265600A0;
        while (1)
        {
          if ((_QWORD)v331)
          {
            v56 = MEMORY[0x2276999E4](v49, v27);
          }
          else
          {
            v56 = *(_QWORD *)(v27 + 8 * v49 + 32);
            swift_retain();
          }
          if ((v332 & 1) == 0
            || vabds_f32(*(float *)(v56 + 20), v51) >= 0.0001
            || vabds_f32(*(float *)(v56 + 28), v51) >= 0.0001)
          {
            v60 = *(float32x2_t *)(v56 + 16);
            *(_QWORD *)&v57 = *(_QWORD *)(v56 + 24);
            *(float32x2_t *)v59.i8 = vadd_f32(v52, *(float32x2_t *)&v57);
            *(float32x2_t *)&v57 = vadd_f32(v53, *(float32x2_t *)&v57);
            v333 = v57;
            *(float32x2_t *)v61.i8 = vsub_f32(*(float32x2_t *)&v57, *(float32x2_t *)v59.i8);
            *(float32x2_t *)&v58 = vadd_f32(v52, v60);
            v61.i64[1] = v330;
            v62 = (int32x4_t)vmulq_f32((float32x4_t)v61, (float32x4_t)v61);
            v63 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v62, 2), vaddq_f32((float32x4_t)v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 1)));
            v335 = v58;
            v334 = v59;
            if (*(float *)v63.i32 >= 1.4211e-14)
            {
              *(float32x2_t *)v63.i8 = vsub_f32(*(float32x2_t *)&v58, *(float32x2_t *)v59.i8);
              v63.i32[2] = v324;
              v64 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v61, v61), (int8x16_t)v61, 0xCuLL), vnegq_f32((float32x4_t)v63)), (float32x4_t)v61, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v63, v63), (int8x16_t)v63, 0xCuLL));
              v65 = (int32x4_t)vmulq_f32((float32x4_t)v64, (float32x4_t)v64);
              v65.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), *(float32x2_t *)v65.i8)).u32[0];
              v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL);
              *(float32x2_t *)v64.i8 = vrsqrte_f32((float32x2_t)v65.u32[0]);
              *(float32x2_t *)v64.i8 = vmul_f32(*(float32x2_t *)v64.i8, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8)));
              v67 = vmulq_n_f32(v66, vmul_f32(*(float32x2_t *)v64.i8, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8))).f32[0]);
              v67.i32[3] = v329.i32[3];
              v336 = (__int128)v67;
              v329 = v67;
            }
            else
            {
              v336 = v323;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_255849BA0);
            v68 = sub_22655CEFC();
            *(_QWORD *)(v68 + 16) = 4;
            v69 = v336;
            *(_OWORD *)(v68 + 32) = v336;
            *(_OWORD *)(v68 + 48) = v69;
            *(_OWORD *)(v68 + 64) = v69;
            *(_OWORD *)(v68 + 80) = v69;
            v339 = MEMORY[0x24BEE4AF8];
            sub_2264C7984(0, 6, 0);
            v70 = v344;
            if (HIDWORD(v344[2]))
              goto LABEL_260;
            v71 = v344[2];
            v72 = v339;
            v74 = *(_QWORD *)(v339 + 16);
            v73 = *(_QWORD *)(v339 + 24);
            v75 = v74 + 1;
            if (v74 >= v73 >> 1)
            {
              sub_2264C7984(v73 > 1, v74 + 1, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v75;
            *(_DWORD *)(v72 + 4 * v74 + 32) = v71;
            v76 = v70[2];
            if (HIDWORD(v76))
              goto LABEL_260;
            v77 = v76 + 1;
            if ((_DWORD)v76 == -1)
              goto LABEL_65;
            v339 = v72;
            v78 = *(_QWORD *)(v72 + 24);
            v79 = v74 + 2;
            if (v75 >= v78 >> 1)
            {
              sub_2264C7984(v78 > 1, v79, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v79;
            *(_DWORD *)(v72 + 4 * v75 + 32) = v77;
            v80 = v70[2];
            if (HIDWORD(v80))
              goto LABEL_260;
            v81 = v80 + 2;
            if (v80 >= 0xFFFFFFFE)
              goto LABEL_65;
            v339 = v72;
            v83 = *(_QWORD *)(v72 + 16);
            v82 = *(_QWORD *)(v72 + 24);
            v84 = v83 + 1;
            if (v83 >= v82 >> 1)
            {
              sub_2264C7984(v82 > 1, v83 + 1, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v84;
            *(_DWORD *)(v72 + 4 * v83 + 32) = v81;
            v85 = v70[2];
            if (HIDWORD(v85))
              goto LABEL_260;
            v86 = v85 + 2;
            if (v85 >= 0xFFFFFFFE)
              goto LABEL_65;
            v339 = v72;
            v87 = *(_QWORD *)(v72 + 24);
            v88 = v83 + 2;
            if (v84 >= v87 >> 1)
            {
              sub_2264C7984(v87 > 1, v88, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v88;
            *(_DWORD *)(v72 + 4 * v84 + 32) = v86;
            v89 = v70[2];
            if (HIDWORD(v89))
              goto LABEL_260;
            v90 = v89 + 3;
            if (v89 >= 0xFFFFFFFD)
            {
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
            v339 = v72;
            v92 = *(_QWORD *)(v72 + 16);
            v91 = *(_QWORD *)(v72 + 24);
            v93 = v92 + 1;
            if (v92 >= v91 >> 1)
            {
              sub_2264C7984(v91 > 1, v92 + 1, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v93;
            *(_DWORD *)(v72 + 4 * v92 + 32) = v90;
            if (HIDWORD(v70[2]))
              goto LABEL_260;
            v94 = v70[2];
            v339 = v72;
            v95 = *(_QWORD *)(v72 + 24);
            v96 = v92 + 2;
            if (v93 >= v95 >> 1)
            {
              sub_2264C7984(v95 > 1, v96, 1);
              v72 = v339;
            }
            *(_QWORD *)(v72 + 16) = v96;
            *(_DWORD *)(v72 + 4 * v93 + 32) = v94;
            sub_22646A2B4(v72);
            v97 = v70[2];
            v98 = v97 + 4;
            if (__OFADD__(v97, 4))
              goto LABEL_67;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0
              || (v100 = v70[3], v101 = v100 >> 1, (uint64_t)(v100 >> 1) < v98))
            {
              if (v97 <= v98)
                v102 = v97 + 4;
              else
                v102 = v97;
              v70 = sub_226486AE0((_QWORD *)isUniquelyReferenced_nonNull_native, v102, 1, v70);
              v100 = v70[3];
              v101 = v100 >> 1;
            }
            *(_QWORD *)&v103 = v335;
            *(_QWORD *)&v104 = v334.i64[0];
            v105 = v70[2];
            v106 = v105 + 1;
            if (v101 <= v105)
            {
              v112 = sub_226486AE0((_QWORD *)(v100 > 1), v105 + 1, 1, v70);
              *(_QWORD *)&v104 = v334.i64[0];
              *(_QWORD *)&v103 = v335;
              v70 = v112;
              v100 = v112[3];
              v101 = v100 >> 1;
            }
            *((_QWORD *)&v104 + 1) = v338.u32[0];
            v70[2] = v106;
            *(_OWORD *)&v70[2 * v105 + 4] = v104;
            v107 = v105 + 2;
            if ((uint64_t)v101 < (uint64_t)(v105 + 2))
            {
              v113 = sub_226486AE0((_QWORD *)(v100 > 1), v105 + 2, 1, v70);
              *(_QWORD *)&v103 = v335;
              v70 = v113;
            }
            *((_QWORD *)&v103 + 1) = v338.u32[0];
            v70[2] = v107;
            *(_OWORD *)&v70[2 * v106 + 4] = v103;
            v108 = v70[3];
            v109 = v105 + 3;
            if ((uint64_t)(v105 + 3) > (uint64_t)(v108 >> 1))
              v70 = sub_226486AE0((_QWORD *)(v108 > 1), v105 + 3, 1, v70);
            *(float32x2_t *)&v110 = vadd_f32(v53, v60);
            *((_QWORD *)&v110 + 1) = v337;
            v70[2] = v109;
            *(_OWORD *)&v70[2 * v107 + 4] = v110;
            v111 = v70[3];
            if ((uint64_t)(v105 + 4) > (uint64_t)(v111 >> 1))
              v70 = sub_226486AE0((_QWORD *)(v111 > 1), v105 + 4, 1, v70);
            *(_QWORD *)&v54 = v333;
            *((_QWORD *)&v54 + 1) = v337;
            v70[2] = v105 + 4;
            *(_OWORD *)&v70[2 * v109 + 4] = v54;
            v344 = v70;
            v55 = swift_bridgeObjectRetain();
            sub_22646A170(v55);
            swift_bridgeObjectRelease();
          }
          ++v49;
          swift_release();
          if (v45 == v49)
            goto LABEL_69;
        }
      }
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      result = (_QWORD *)sub_22655D3DC();
      __break(1u);
      goto LABEL_261;
    }
  }
LABEL_69:
  swift_bridgeObjectRelease();
  if ((v332 & 1) != 0)
  {
    v114 = sub_22645D070(v322, v320.n128_f64[0], a8, v11.f32[0]);
    v115 = sub_2264CE9A0(v114);
    swift_bridgeObjectRelease();
    v116 = v115[4];
    v117 = *(_QWORD *)(v116 + 16);
    v118 = MEMORY[0x24BEE4AF8];
    if (v117)
    {
      v339 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2264C7984(0, v117, 0);
      v119 = 0;
      v118 = v339;
      v120 = v344;
      while (1)
      {
        v121 = v120[2];
        if (HIDWORD(v121))
          goto LABEL_260;
        v122 = *(_DWORD *)(v116 + 4 * v119 + 32);
        v123 = v122 + v121;
        if (__CFADD__(v122, (_DWORD)v121))
          goto LABEL_251;
        v339 = v118;
        v125 = *(_QWORD *)(v118 + 16);
        v124 = *(_QWORD *)(v118 + 24);
        if (v125 >= v124 >> 1)
        {
          sub_2264C7984(v124 > 1, v125 + 1, 1);
          v118 = v339;
        }
        ++v119;
        *(_QWORD *)(v118 + 16) = v125 + 1;
        *(_DWORD *)(v118 + 4 * v125 + 32) = v123;
        if (v117 == v119)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    sub_22646A2B4(v118);
    v126 = swift_bridgeObjectRetain();
    sub_22646A170(v126);
    v127 = swift_bridgeObjectRetain();
    sub_22646A170(v127);
    swift_release();
  }
  v322 = v340;
  if (v340 >> 62)
    goto LABEL_257;
  v128 = *(_QWORD *)((v322 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_81:
  v133 = v328;
  v134 = (uint64_t)v327;
  v135 = (unint64_t)v326;
  v136 = (uint64_t)v325;
  if (v128)
  {
    v137 = 0;
    *(_QWORD *)&v323 = v322 & 0xC000000000000001;
    v319 = v322 & 0xFFFFFFFFFFFFFF8;
    v318 = v322 + 32;
    v138.i32[1] = v320.n128_i32[1];
    v139 = vmuls_lane_f32(-0.5, (float32x2_t)v320.n128_u64[0], 1);
    *(float *)v138.i32 = a8 * 0.0;
    *(float *)&v131 = a8 + 0.0;
    *(float *)v130.i32 = v11.f32[0] * 0.0;
    *(float *)&v129 = 0.0 - v11.f32[0];
    *(float *)&v132 = *(float *)&v131 - *(float *)&v131;
    v331 = v132;
    v336 = v129;
    v337 = v131;
    *(float *)&v129 = (float)(0.0 - v11.f32[0]) - (float)(a8 + 0.0);
    v330 = v129;
    v11 = (float32x2_t)vdup_lane_s32(v130, 0);
    v140 = (float32x2_t)vdup_lane_s32(v138, 0);
    v321 = v128;
    do
    {
      if ((_QWORD)v323)
      {
        v141 = MEMORY[0x2276999E4](v137, v322);
        v142 = __OFADD__(v137++, 1);
        if (v142)
          goto LABEL_252;
      }
      else
      {
        if (v137 >= *(_QWORD *)(v319 + 16))
          goto LABEL_256;
        v141 = *(_QWORD *)(v318 + 8 * v137);
        swift_retain();
        v142 = __OFADD__(v137++, 1);
        if (v142)
          goto LABEL_252;
      }
      v143 = *(_QWORD *)(v141 + 24);
      if (v143 >> 62)
      {
        swift_bridgeObjectRetain();
        v144 = sub_22655D400();
        if (v144)
        {
LABEL_93:
          if (v144 < 1)
            goto LABEL_253;
          *(_QWORD *)&v324 = v141;
          v329.i64[0] = v137;
          v145 = 0;
          v332 = v143 & 0xC000000000000001;
          while (1)
          {
            if (v332)
            {
              v136 = MEMORY[0x2276999E4](v145, v143);
            }
            else
            {
              v136 = *(_QWORD *)(v143 + 8 * v145 + 32);
              swift_retain();
            }
            v147.i64[0] = *(_QWORD *)(v136 + 16);
            if (vabds_f32(*(float *)&v147.i32[1], v139) >= 0.0001 || vabds_f32(*(float *)(v136 + 28), v139) >= 0.0001)
            {
              v150 = *(float32x2_t *)(v136 + 24);
              *(float32x2_t *)&v149 = vadd_f32(v140, *(float32x2_t *)v147.i8);
              *(float32x2_t *)&v148 = vadd_f32(v11, *(float32x2_t *)v147.i8);
              *(float32x2_t *)v147.i8 = vadd_f32(v140, v150);
              v334 = v147;
              *(float32x2_t *)v147.i8 = vsub_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)&v149);
              v147.i32[2] = v331;
              v335 = v148;
              v333 = v149;
              *(float32x2_t *)v151.i8 = vsub_f32(*(float32x2_t *)&v148, *(float32x2_t *)&v149);
              v151.i64[1] = __PAIR64__(HIDWORD(v331), v330);
              v152 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v151, v151), (int8x16_t)v151, 0xCuLL), vnegq_f32((float32x4_t)v147)), (float32x4_t)v151, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v147, v147), (int8x16_t)v147, 0xCuLL));
              v153 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v152, v152), (int8x16_t)v152, 0xCuLL);
              v154 = (int32x4_t)vmulq_f32((float32x4_t)v152, (float32x4_t)v152);
              v154.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v154.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v154, 2), *(float32x2_t *)v154.i8)).u32[0];
              v155 = vrsqrte_f32((float32x2_t)v154.u32[0]);
              v156 = vmul_f32(v155, vrsqrts_f32((float32x2_t)v154.u32[0], vmul_f32(v155, v155)));
              v157 = vmulq_n_f32(v153, vmul_f32(v156, vrsqrts_f32((float32x2_t)v154.u32[0], vmul_f32(v156, v156))).f32[0]);
              v157.i32[3] = v338.i32[3];
              v338 = v157;
              __swift_instantiateConcreteTypeFromMangledName(&qword_255849BA0);
              v158 = sub_22655CEFC();
              *(_QWORD *)(v158 + 16) = 4;
              v159 = v338;
              *(float32x4_t *)(v158 + 32) = v338;
              *(float32x4_t *)(v158 + 48) = v159;
              *(float32x4_t *)(v158 + 64) = v159;
              *(float32x4_t *)(v158 + 80) = v159;
              v339 = MEMORY[0x24BEE4AF8];
              sub_2264C7984(0, 6, 0);
              v160 = v344;
              if (HIDWORD(v344[2]))
                goto LABEL_260;
              v161 = v344[2];
              v162 = v339;
              v135 = *(_QWORD *)(v339 + 16);
              v163 = *(_QWORD *)(v339 + 24);
              v164 = v135 + 1;
              if (v135 >= v163 >> 1)
              {
                sub_2264C7984(v163 > 1, v135 + 1, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v164;
              *(_DWORD *)(v162 + 4 * v135 + 32) = v161;
              v165 = v160[2];
              if (HIDWORD(v165))
                goto LABEL_260;
              v166 = v165 + 1;
              if ((_DWORD)v165 == -1)
                goto LABEL_143;
              v339 = v162;
              v167 = *(_QWORD *)(v162 + 24);
              v135 += 2;
              if (v164 >= v167 >> 1)
              {
                sub_2264C7984(v167 > 1, v135, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v135;
              *(_DWORD *)(v162 + 4 * v164 + 32) = v166;
              v168 = v160[2];
              if (HIDWORD(v168))
                goto LABEL_260;
              v169 = v168 + 2;
              if (v168 >= 0xFFFFFFFE)
                goto LABEL_143;
              v339 = v162;
              v135 = *(_QWORD *)(v162 + 16);
              v170 = *(_QWORD *)(v162 + 24);
              v171 = v135 + 1;
              if (v135 >= v170 >> 1)
              {
                sub_2264C7984(v170 > 1, v135 + 1, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v171;
              *(_DWORD *)(v162 + 4 * v135 + 32) = v169;
              v172 = v160[2];
              if (HIDWORD(v172))
                goto LABEL_260;
              v173 = v172 + 2;
              if (v172 >= 0xFFFFFFFE)
                goto LABEL_143;
              v339 = v162;
              v174 = *(_QWORD *)(v162 + 24);
              v135 += 2;
              if (v171 >= v174 >> 1)
              {
                sub_2264C7984(v174 > 1, v135, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v135;
              *(_DWORD *)(v162 + 4 * v171 + 32) = v173;
              v175 = v160[2];
              if (HIDWORD(v175))
                goto LABEL_260;
              v176 = v175 + 3;
              if (v175 >= 0xFFFFFFFD)
              {
LABEL_143:
                __break(1u);
                goto LABEL_144;
              }
              v339 = v162;
              v178 = *(_QWORD *)(v162 + 16);
              v177 = *(_QWORD *)(v162 + 24);
              v179 = v178 + 1;
              if (v178 >= v177 >> 1)
              {
                sub_2264C7984(v177 > 1, v178 + 1, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v179;
              *(_DWORD *)(v162 + 4 * v178 + 32) = v176;
              if (HIDWORD(v160[2]))
                goto LABEL_260;
              v180 = v160[2];
              v339 = v162;
              v181 = *(_QWORD *)(v162 + 24);
              v182 = v178 + 2;
              if (v179 >= v181 >> 1)
              {
                sub_2264C7984(v181 > 1, v182, 1);
                v162 = v339;
              }
              *(_QWORD *)(v162 + 16) = v182;
              *(_DWORD *)(v162 + 4 * v179 + 32) = v180;
              sub_22646A2B4(v162);
              v183 = v160[2];
              v184 = v183 + 4;
              if (__OFADD__(v183, 4))
              {
                __break(1u);
LABEL_251:
                __break(1u);
LABEL_252:
                __break(1u);
LABEL_253:
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                __break(1u);
LABEL_257:
                swift_bridgeObjectRetain();
                v128 = sub_22655D400();
                goto LABEL_81;
              }
              v185 = swift_isUniquelyReferenced_nonNull_native();
              if ((v185 & 1) == 0 || (v186 = v160[3], v187 = v186 >> 1, (uint64_t)(v186 >> 1) < v184))
              {
                if (v183 <= v184)
                  v188 = v183 + 4;
                else
                  v188 = v183;
                v160 = sub_226486AE0((_QWORD *)v185, v188, 1, v160);
                v186 = v160[3];
                v187 = v186 >> 1;
              }
              v189 = v160[2];
              v190 = v189 + 1;
              if (v187 <= v189)
              {
                v160 = sub_226486AE0((_QWORD *)(v186 > 1), v189 + 1, 1, v160);
                v186 = v160[3];
                v187 = v186 >> 1;
              }
              *(_QWORD *)&v191 = v333;
              *((_QWORD *)&v191 + 1) = v337;
              v160[2] = v190;
              *(_OWORD *)&v160[2 * v189 + 4] = v191;
              v192 = v189 + 2;
              if ((uint64_t)v187 < (uint64_t)(v189 + 2))
                v160 = sub_226486AE0((_QWORD *)(v186 > 1), v189 + 2, 1, v160);
              *(_QWORD *)&v193 = v334.i64[0];
              *((_QWORD *)&v193 + 1) = v337;
              v160[2] = v192;
              *(_OWORD *)&v160[2 * v190 + 4] = v193;
              v194 = v160[3];
              v195 = v189 + 3;
              if ((uint64_t)(v189 + 3) > (uint64_t)(v194 >> 1))
                v160 = sub_226486AE0((_QWORD *)(v194 > 1), v189 + 3, 1, v160);
              *(float32x2_t *)&v196 = vadd_f32(v11, v150);
              *((_QWORD *)&v196 + 1) = v336;
              v160[2] = v195;
              *(_OWORD *)&v160[2 * v192 + 4] = v196;
              v197 = v160[3];
              if ((uint64_t)(v189 + 4) > (uint64_t)(v197 >> 1))
                v160 = sub_226486AE0((_QWORD *)(v197 > 1), v189 + 4, 1, v160);
              *(_QWORD *)&v146 = v335;
              *((_QWORD *)&v146 + 1) = v336;
              v160[2] = v189 + 4;
              *(_OWORD *)&v160[2 * v195 + 4] = v146;
              v344 = v160;
              sub_22646A170(v158);
            }
            ++v145;
            swift_release();
            if (v144 == v145)
            {
              swift_release();
              v128 = v321;
              v137 = v329.i64[0];
              goto LABEL_84;
            }
          }
        }
      }
      else
      {
        v144 = *(_QWORD *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v144)
          goto LABEL_93;
      }
      swift_release();
LABEL_84:
      swift_bridgeObjectRelease();
      v133 = v328;
      v134 = (uint64_t)v327;
      v135 = (unint64_t)v326;
      v136 = (uint64_t)v325;
    }
    while (v137 != v128);
  }
  swift_bridgeObjectRelease();
  sub_22645E1AC(v315, v136);
  v145 = *(_QWORD *)(v314 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v136, 1, v316) == 1)
  {
    sub_22645E1F4(v136);
  }
  else
  {
LABEL_144:
    result = (_QWORD *)sub_22645E234(v136, v135);
    v199 = v341;
    if (!v341)
    {
LABEL_261:
      __break(1u);
      goto LABEL_262;
    }
    v200 = *(_QWORD *)(v341 + 16);
    v201 = *(_QWORD *)(v200 + 16);
    v202 = MEMORY[0x24BEE4AF8];
    if (v201)
    {
      v339 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2264C7968(0, v201, 0);
      v204 = 0;
      v202 = v339;
      v205 = *(_QWORD *)(v339 + 16);
      do
      {
        v203.i64[0] = *(_QWORD *)(v200 + 8 * v204 + 32);
        v339 = v202;
        v206 = *(_QWORD *)(v202 + 24);
        if (v205 >= v206 >> 1)
        {
          v338 = v203;
          sub_2264C7968(v206 > 1, v205 + 1, 1);
          v203 = v338;
          v202 = v339;
        }
        ++v204;
        *(_QWORD *)(v202 + 16) = v205 + 1;
        *(_DWORD *)(v202 + 4 * v205++ + 32) = v203.i32[0];
      }
      while (v201 != v204);
      swift_bridgeObjectRelease();
    }
    v207 = sub_2264DC480(v202);
    swift_bridgeObjectRelease();
    if ((v207 & 0x100000000) != 0)
      v208 = -0.5 * v320.n128_f32[0];
    else
      v208 = *(float *)&v207;
    v209 = *(_QWORD *)(v199 + 16);
    v210 = *(_QWORD *)(v209 + 16);
    if (v210)
    {
      swift_bridgeObjectRetain();
      v212 = 0;
      v213 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v211.i64[0] = *(_QWORD *)(v209 + 8 * v212 + 32);
        if (vabds_f32(v211.f32[0], v208) < 0.0001)
        {
          v338 = v211;
          v217 = swift_isUniquelyReferenced_nonNull_native();
          v339 = (uint64_t)v213;
          if ((v217 & 1) == 0)
          {
            sub_2264C79C4(0, v213[2] + 1, 1);
            v213 = (_QWORD *)v339;
          }
          v215 = v213[2];
          v214 = v213[3];
          v216 = v338.i64[0];
          if (v215 >= v214 >> 1)
          {
            sub_2264C79C4(v214 > 1, v215 + 1, 1);
            v216 = v338.i64[0];
            v213 = (_QWORD *)v339;
          }
          v213[2] = v215 + 1;
          v213[v215 + 4] = v216;
        }
        ++v212;
      }
      while (v210 != v212);
      swift_bridgeObjectRelease();
    }
    else
    {
      v213 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v218 = v213[2];
    v219 = MEMORY[0x24BEE4AF8];
    if (v218)
    {
      v339 = MEMORY[0x24BEE4AF8];
      sub_2264C7968(0, v218, 0);
      v221 = v339;
      v222 = v213 + 4;
      v223 = *(_QWORD *)(v339 + 16);
      v224 = v218;
      do
      {
        v220.i64[0] = *v222;
        v339 = v221;
        v225 = *(_QWORD *)(v221 + 24);
        if (v223 >= v225 >> 1)
        {
          v338 = v220;
          sub_2264C7968(v225 > 1, v223 + 1, 1);
          v220 = v338;
          v221 = v339;
        }
        *(_QWORD *)(v221 + 16) = v223 + 1;
        *(_DWORD *)(v221 + 4 * v223 + 32) = v220.i32[1];
        ++v222;
        ++v223;
        --v224;
      }
      while (v224);
    }
    else
    {
      v221 = MEMORY[0x24BEE4AF8];
    }
    v226 = sub_2264DC480(v221);
    swift_bridgeObjectRelease();
    v227 = vmuls_lane_f32(-0.5, (float32x2_t)v320.n128_u64[0], 1);
    if ((v226 & 0x100000000) != 0)
      v11.f32[0] = v227;
    else
      v11.f32[0] = *(float *)&v226;
    if (v218)
    {
      v339 = v219;
      sub_2264C7968(0, v218, 0);
      v229 = 0;
      v230 = v339;
      v231 = *(_QWORD *)(v339 + 16);
      do
      {
        v228.i64[0] = v213[v229 + 4];
        v339 = v230;
        v232 = *(_QWORD *)(v230 + 24);
        if (v231 >= v232 >> 1)
        {
          v338 = v228;
          sub_2264C7968(v232 > 1, v231 + 1, 1);
          v228 = v338;
          v230 = v339;
        }
        ++v229;
        *(_QWORD *)(v230 + 16) = v231 + 1;
        *(_DWORD *)(v230 + 4 * v231++ + 32) = v228.i32[1];
      }
      while (v218 != v229);
      swift_release();
    }
    else
    {
      swift_release();
      v230 = MEMORY[0x24BEE4AF8];
    }
    v233 = sub_2264DC4D8(v230);
    swift_bridgeObjectRelease();
    v238.n128_f32[0] = vmuls_lane_f32(0.5, (float32x2_t)v320.n128_u64[0], 1);
    v239 = COERCE_DOUBLE(__PAIR64__(v320.n128_u32[1], v233));
    if ((v233 & 0x100000000) != 0)
      *(float *)&v239 = v238.n128_f32[0];
    v133 = v328;
    v134 = (uint64_t)v327;
    v240 = v326;
    v238.n128_u64[0] = (unint64_t)*v326;
    v238.n128_u32[0] = v11.i32[0];
    v241 = sub_22645E278(v326, a8 > 0.0, v238, v239, (float32x2_t)COERCE_UNSIGNED_INT(v208 - COERCE_FLOAT(*v326)), v234, v235, v236, v237);
    if (v241)
    {
      v242 = v241[4];
      v243 = *(_QWORD *)(v242 + 16);
      v244 = MEMORY[0x24BEE4AF8];
      if (v243)
      {
        v338.i64[0] = v145;
        v339 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_2264C7984(0, v243, 0);
        v245 = 0;
        v244 = v339;
        v246 = v344;
        while (1)
        {
          v247 = v246[2];
          if (HIDWORD(v247))
            goto LABEL_260;
          v248 = *(_DWORD *)(v242 + 4 * v245 + 32);
          v249 = v248 + v247;
          if (__CFADD__(v248, (_DWORD)v247))
            goto LABEL_254;
          v339 = v244;
          v251 = *(_QWORD *)(v244 + 16);
          v250 = *(_QWORD *)(v244 + 24);
          if (v251 >= v250 >> 1)
          {
            sub_2264C7984(v250 > 1, v251 + 1, 1);
            v244 = v339;
          }
          ++v245;
          *(_QWORD *)(v244 + 16) = v251 + 1;
          *(_DWORD *)(v244 + 4 * v251 + 32) = v249;
          if (v243 == v245)
          {
            swift_bridgeObjectRelease();
            v145 = v338.i64[0];
            break;
          }
        }
      }
      sub_22646A2B4(v244);
      v252 = swift_bridgeObjectRetain();
      sub_22646A170(v252);
      v253 = swift_bridgeObjectRetain();
      sub_22646A170(v253);
      sub_22645F9C8((uint64_t)v326);
      swift_release();
      v133 = v328;
      v134 = (uint64_t)v327;
    }
    else
    {
      sub_22645F9C8((uint64_t)v240);
    }
  }
  sub_22645E1AC(v313, v134);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v134, 1, v316) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_22645E1F4(v134);
    goto LABEL_249;
  }
  result = (_QWORD *)sub_22645E234(v134, (uint64_t)v133);
  v254 = v341;
  if (v341)
  {
    v255 = *(_QWORD *)(v341 + 16);
    v256 = *(_QWORD *)(v255 + 16);
    v257 = MEMORY[0x24BEE4AF8];
    if (v256)
    {
      v339 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2264C7968(0, v256, 0);
      v259 = 0;
      v257 = v339;
      v260 = *(_QWORD *)(v339 + 16);
      do
      {
        v258.i64[0] = *(_QWORD *)(v255 + 8 * v259 + 32);
        v339 = v257;
        v261 = *(_QWORD *)(v257 + 24);
        if (v260 >= v261 >> 1)
        {
          v338 = v258;
          sub_2264C7968(v261 > 1, v260 + 1, 1);
          v258 = v338;
          v257 = v339;
        }
        ++v259;
        *(_QWORD *)(v257 + 16) = v260 + 1;
        *(_DWORD *)(v257 + 4 * v260++ + 32) = v258.i32[0];
      }
      while (v256 != v259);
      swift_bridgeObjectRelease();
    }
    v262 = sub_2264DC4D8(v257);
    swift_bridgeObjectRelease();
    if ((v262 & 0x100000000) != 0)
      v263 = 0.5 * v320.n128_f32[0];
    else
      v263 = *(float *)&v262;
    v264 = *(_QWORD *)(v254 + 16);
    v265 = *(_QWORD *)(v264 + 16);
    if (v265)
    {
      swift_bridgeObjectRetain();
      v267 = 0;
      v268 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v266.i64[0] = *(_QWORD *)(v264 + 8 * v267 + 32);
        if (vabds_f32(v266.f32[0], v263) < 0.0001)
        {
          v338 = v266;
          v272 = swift_isUniquelyReferenced_nonNull_native();
          v339 = (uint64_t)v268;
          if ((v272 & 1) == 0)
          {
            sub_2264C79C4(0, v268[2] + 1, 1);
            v268 = (_QWORD *)v339;
          }
          v270 = v268[2];
          v269 = v268[3];
          v271 = v338.i64[0];
          if (v270 >= v269 >> 1)
          {
            sub_2264C79C4(v269 > 1, v270 + 1, 1);
            v271 = v338.i64[0];
            v268 = (_QWORD *)v339;
          }
          v268[2] = v270 + 1;
          v268[v270 + 4] = v271;
        }
        ++v267;
      }
      while (v265 != v267);
      swift_bridgeObjectRelease();
    }
    else
    {
      v268 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v273 = v268[2];
    v274 = MEMORY[0x24BEE4AF8];
    if (v273)
    {
      v339 = MEMORY[0x24BEE4AF8];
      sub_2264C7968(0, v273, 0);
      v276 = v339;
      v277 = v268 + 4;
      v278 = *(_QWORD *)(v339 + 16);
      v279 = v273;
      do
      {
        v275.i64[0] = *v277;
        v339 = v276;
        v280 = *(_QWORD *)(v276 + 24);
        if (v278 >= v280 >> 1)
        {
          v338 = v275;
          sub_2264C7968(v280 > 1, v278 + 1, 1);
          v275 = v338;
          v276 = v339;
        }
        *(_QWORD *)(v276 + 16) = v278 + 1;
        *(_DWORD *)(v276 + 4 * v278 + 32) = v275.i32[1];
        ++v277;
        ++v278;
        --v279;
      }
      while (v279);
    }
    else
    {
      v276 = MEMORY[0x24BEE4AF8];
    }
    v281 = sub_2264DC480(v276);
    swift_bridgeObjectRelease();
    v282 = vmuls_lane_f32(-0.5, (float32x2_t)v320.n128_u64[0], 1);
    if ((v281 & 0x100000000) != 0)
      v11.f32[0] = v282;
    else
      v11.f32[0] = *(float *)&v281;
    if (v273)
    {
      v339 = v274;
      sub_2264C7968(0, v273, 0);
      v284 = 0;
      v285 = v339;
      v286 = *(_QWORD *)(v339 + 16);
      do
      {
        v283.i64[0] = v268[v284 + 4];
        v339 = v285;
        v287 = *(_QWORD *)(v285 + 24);
        if (v286 >= v287 >> 1)
        {
          v338 = v283;
          sub_2264C7968(v287 > 1, v286 + 1, 1);
          v283 = v338;
          v285 = v339;
        }
        ++v284;
        *(_QWORD *)(v285 + 16) = v286 + 1;
        *(_DWORD *)(v285 + 4 * v286++ + 32) = v283.i32[1];
      }
      while (v273 != v284);
      swift_release();
    }
    else
    {
      swift_release();
      v285 = MEMORY[0x24BEE4AF8];
    }
    v288 = sub_2264DC4D8(v285);
    swift_bridgeObjectRelease();
    v293.n128_f32[0] = vmuls_lane_f32(0.5, (float32x2_t)v320.n128_u64[0], 1);
    v294 = COERCE_DOUBLE(__PAIR64__(v320.n128_u32[1], v288));
    if ((v288 & 0x100000000) != 0)
      *(float *)&v294 = v293.n128_f32[0];
    v295 = v328;
    v293.n128_u64[0] = (unint64_t)*v328;
    v293.n128_u32[0] = v11.i32[0];
    v296 = sub_22645E278(v328, a8 > 0.0, v293, v294, (float32x2_t)COERCE_UNSIGNED_INT(v263 - COERCE_FLOAT(*v328)), v289, v290, v291, v292);
    if (v296)
    {
      v297 = v296[4];
      v298 = *(_QWORD *)(v297 + 16);
      v299 = MEMORY[0x24BEE4AF8];
      if (v298)
      {
        v339 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_2264C7984(0, v298, 0);
        v300 = 0;
        v299 = v339;
        v301 = v344;
        while (1)
        {
          v302 = v301[2];
          if (HIDWORD(v302))
            goto LABEL_260;
          v303 = *(_DWORD *)(v297 + 4 * v300 + 32);
          v304 = v303 + v302;
          if (__CFADD__(v303, (_DWORD)v302))
            goto LABEL_255;
          v339 = v299;
          v306 = *(_QWORD *)(v299 + 16);
          v305 = *(_QWORD *)(v299 + 24);
          if (v306 >= v305 >> 1)
          {
            sub_2264C7984(v305 > 1, v306 + 1, 1);
            v299 = v339;
          }
          ++v300;
          *(_QWORD *)(v299 + 16) = v306 + 1;
          *(_DWORD *)(v299 + 4 * v306 + 32) = v304;
          if (v298 == v300)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      sub_22646A2B4(v299);
      v307 = swift_bridgeObjectRetain();
      sub_22646A170(v307);
      v308 = swift_bridgeObjectRetain();
      sub_22646A170(v308);
      swift_release();
      sub_22645F9C8((uint64_t)v328);
      swift_release();
    }
    else
    {
      swift_release();
      sub_22645F9C8((uint64_t)v295);
      swift_bridgeObjectRelease();
    }
    swift_release();
LABEL_249:
    v310 = v343;
    v309 = v344;
    v311 = v342;
    type metadata accessor for RoomCaptureMesh();
    result = (_QWORD *)swift_allocObject();
    result[2] = v309;
    result[3] = v311;
    result[4] = v310;
    return result;
  }
LABEL_262:
  __break(1u);
  return result;
}

_QWORD *sub_226458318(float32x2_t *a1, unint64_t a2, double a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  __int128 v46;
  float32x2_t *v47;
  void *v48;
  id v49;
  char *v50;
  double v51;
  double v52;
  void (*v53)(char *, uint64_t);
  float v54;
  id v55;
  double v56;
  double v57;
  float32x2_t v58;
  uint64_t inited;
  double v60;
  float v61;
  _QWORD *v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float *v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *result;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  _QWORD *v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  int v118;
  float32x2_t *v119;
  uint64_t v120;
  _QWORD *v121;
  double v122[2];
  uint64_t v123;
  float v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;

  v122[0] = a3;
  v16 = a9 & 1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840958);
  v115 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v116 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BEE4AF8];
  v128 = MEMORY[0x24BEE4AF8];
  v129 = MEMORY[0x24BEE4AF8];
  v127 = MEMORY[0x24BEE4AF8];
  v119 = a1;
  v117 = a2;
  v120 = a8;
  v118 = v16;
  v20 = sub_22645C200(a1, a2, a8, v16, v122[0]);
  *(_QWORD *)&v114 = v9;
  v123 = v9;
  v124 = a4;
  v125 = v20;
  v21 = swift_bridgeObjectRetain();
  v22 = sub_22645FA58(v21, (void (*)(uint64_t, __n128))sub_22645FA04);
  swift_bridgeObjectRelease();
  sub_22646A170(v22);
  v23 = swift_bridgeObjectRetain();
  sub_22646A170(v23);
  v121 = v20;
  v24 = v20[4];
  v25 = swift_bridgeObjectRetain();
  sub_22646A2B4(v25);
  v26 = *(_QWORD *)(v24 + 16);
  if (v26)
  {
    v113 = 0;
    v27 = v17;
    v126 = v19;
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v26, 0);
    v28 = 0;
    v19 = v126;
    v29 = v129;
    while (1)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (HIDWORD(v30))
        goto LABEL_70;
      v31 = *(_DWORD *)(v24 + 4 * v28 + 32);
      v32 = v31 + v30;
      if (__CFADD__(v31, (_DWORD)v30))
        break;
      v126 = v19;
      v34 = *(_QWORD *)(v19 + 16);
      v33 = *(_QWORD *)(v19 + 24);
      v10 = v34 + 1;
      if (v34 >= v33 >> 1)
      {
        sub_2264C7984(v33 > 1, v34 + 1, 1);
        v19 = v126;
      }
      ++v28;
      *(_QWORD *)(v19 + 16) = v10;
      *(_DWORD *)(v19 + 4 * v34 + 32) = v32;
      if (v26 == v28)
      {
        swift_bridgeObjectRelease();
        v17 = v27;
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_9:
  v35 = sub_22646AD7C(v19);
  v36 = v121;
  MEMORY[0x24BDAC7A8](v35);
  v37 = swift_bridgeObjectRetain();
  v38 = sub_22645FA58(v37, (void (*)(uint64_t, __n128))sub_22645FB58);
  swift_bridgeObjectRelease();
  sub_22646A170(v38);
  v39 = v36[3];
  v40 = *(_QWORD *)(v39 + 16);
  v41 = MEMORY[0x24BEE4AF8];
  if (v40)
  {
    v126 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C1310(0, v40, 0);
    v42 = 0;
    v41 = v126;
    v43 = *(_QWORD *)(v126 + 16);
    do
    {
      v44 = *(_OWORD *)(v39 + 16 * v42 + 32);
      v126 = v41;
      v45 = *(_QWORD *)(v41 + 24);
      if (v43 >= v45 >> 1)
      {
        v114 = v44;
        sub_2264C1310(v45 > 1, v43 + 1, 1);
        v44 = v114;
        v41 = v126;
      }
      *(float32x2_t *)&v46 = vsub_f32(0, *(float32x2_t *)&v44);
      *((float *)&v46 + 2) = 0.0 - *((float *)&v44 + 2);
      HIDWORD(v46) = 0;
      ++v42;
      *(_QWORD *)(v41 + 16) = v43 + 1;
      *(_OWORD *)(v41 + 16 * v43++ + 32) = v46;
    }
    while (v40 != v42);
    swift_bridgeObjectRelease();
  }
  sub_22646A170(v41);
  type metadata accessor for CapturedRoom.Surface.Curve(0);
  v47 = v119;
  v48 = (void *)objc_opt_self();
  v49 = objc_msgSend(v48, sel_radians);
  v50 = v116;
  sub_22655BDD4();

  sub_22655BDC8();
  v52 = v51;
  v53 = *(void (**)(char *, uint64_t))(v115 + 8);
  v53(v50, v17);
  v54 = v52;
  v55 = objc_msgSend(v48, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v57 = v56;
  v53(v50, v17);
  *(float *)&v57 = v57;
  v58 = vmul_n_f32((float32x2_t)0x3F000000BF000000, *(float *)v122);
  v116 = (char *)type metadata accessor for CurvedElement();
  inited = swift_initStackObject();
  *(float *)(inited + 16) = v54;
  *(_DWORD *)(inited + 20) = LODWORD(v57);
  *(float32x2_t *)(inited + 24) = v58;
  v60 = *(double *)v47;
  v61 = v47[1].f32[0];
  *(_QWORD *)&v122[0] = inited;
  v62 = sub_2264602E4((float *)inited, v120, v118, 0, v60, v61, a4, a5);
  v10 = (uint64_t)v62;
  v63 = v62[4];
  v64 = *(_QWORD *)(v63 + 16);
  v65 = MEMORY[0x24BEE4AF8];
  if (v64)
  {
    v66 = v62;
    v126 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v64, 0);
    v10 = 0;
    v65 = v126;
    v29 = v129;
    while (1)
    {
      v67 = *(_QWORD *)(v29 + 16);
      if (HIDWORD(v67))
        goto LABEL_70;
      v68 = *(_DWORD *)(v63 + 4 * v10 + 32);
      v69 = v68 + v67;
      if (__CFADD__(v68, (_DWORD)v67))
        break;
      v126 = v65;
      v71 = *(_QWORD *)(v65 + 16);
      v70 = *(_QWORD *)(v65 + 24);
      if (v71 >= v70 >> 1)
      {
        sub_2264C7984(v70 > 1, v71 + 1, 1);
        v65 = v126;
      }
      ++v10;
      *(_QWORD *)(v65 + 16) = v71 + 1;
      *(_DWORD *)(v65 + 4 * v71 + 32) = v69;
      if (v64 == v10)
      {
        swift_bridgeObjectRelease();
        v10 = (uint64_t)v66;
        goto LABEL_23;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
LABEL_23:
  sub_22646A2B4(v65);
  v72 = swift_bridgeObjectRetain();
  sub_22646A170(v72);
  v73 = swift_bridgeObjectRetain();
  sub_22646A170(v73);
  v29 = v117;
  if (v117 >> 62)
  {
LABEL_68:
    swift_bridgeObjectRetain();
    v74 = sub_22655D400();
    goto LABEL_25;
  }
  v74 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_25:
  v75 = v122[0];
  if (!v74)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v107 = v128;
    v106 = v129;
    v108 = v127;
    type metadata accessor for RoomCaptureMesh();
    result = (_QWORD *)swift_allocObject();
    result[2] = v106;
    result[3] = v107;
    result[4] = v108;
    return result;
  }
  if (v74 < 1)
  {
    __break(1u);
    goto LABEL_70;
  }
  v76 = 0;
  v77 = v29 & 0xC000000000000001;
  v78 = v29 + 32;
  while (1)
  {
    if (v77)
    {
      v79 = (float *)MEMORY[0x2276999E4](v76, v29);
    }
    else
    {
      v79 = *(float **)(v78 + 8 * v76);
      swift_retain();
    }
    v81 = v79[4];
    v80 = v79[5];
    if (vabds_f32(v81, v80) >= 0.00000011921)
    {
      v83 = v79[6];
      v82 = v79[7];
      if (vabds_f32(v83, v82) >= 0.00000011921)
      {
        v85 = *(float *)(*(_QWORD *)&v75 + 16);
        v84 = *(float *)(*(_QWORD *)&v75 + 20);
        if (vabds_f32(v85, v84) >= 0.00000011921)
        {
          v87 = *(float *)(*(_QWORD *)&v75 + 24);
          v86 = *(float *)(*(_QWORD *)&v75 + 28);
          if (vabds_f32(v87, v86) >= 0.00000011921 && v84 > v81 && v80 > v85 && v86 > v83 && v82 > v87)
            break;
        }
      }
    }
    swift_release();
LABEL_60:
    if (++v76 == v74)
      goto LABEL_64;
  }
  *(_QWORD *)&v114 = v78;
  v115 = v10;
  if (v81 > v85)
    v88 = v81;
  else
    v88 = v85;
  if (v84 >= v80)
    v89 = v80;
  else
    v89 = v84;
  if (v83 > v87)
    v90 = v83;
  else
    v90 = v87;
  if (v86 >= v82)
    v91 = v82;
  else
    v91 = v86;
  v92 = (float *)swift_initStackObject();
  v92[4] = v88;
  v92[5] = v89;
  v92[6] = v90;
  v92[7] = v91;
  v113 = sub_2264602E4(v92, v120, v118, 1, *(double *)v119, v119[1].f32[0], a4, a5);
  v93 = v113[4];
  v94 = *(_QWORD *)(v93 + 16);
  if (!v94)
  {
    v10 = MEMORY[0x24BEE4AF8];
LABEL_63:
    sub_22646A2B4(v10);
    v104 = swift_bridgeObjectRetain();
    sub_22646A170(v104);
    v105 = swift_bridgeObjectRetain();
    sub_22646A170(v105);
    swift_release();
    swift_release();
    v10 = v115;
    v78 = v114;
    goto LABEL_60;
  }
  v126 = MEMORY[0x24BEE4AF8];
  v112 = v93;
  v111 = v94;
  swift_bridgeObjectRetain();
  sub_2264C7984(0, v111, 0);
  v95 = v111;
  v96 = v112;
  v29 = 0;
  v10 = v126;
  v97 = v129;
  while (1)
  {
    v98 = *(_QWORD *)(v97 + 16);
    if (HIDWORD(v98))
      break;
    v99 = *(_DWORD *)(v96 + 4 * v29 + 32);
    v100 = v99 + v98;
    if (__CFADD__(v99, (_DWORD)v98))
      goto LABEL_67;
    v126 = v10;
    v102 = *(_QWORD *)(v10 + 16);
    v101 = *(_QWORD *)(v10 + 24);
    if (v102 >= v101 >> 1)
    {
      v103 = v97;
      sub_2264C7984(v101 > 1, v102 + 1, 1);
      v97 = v103;
      v95 = v111;
      v96 = v112;
      v10 = v126;
    }
    ++v29;
    *(_QWORD *)(v10 + 16) = v102 + 1;
    *(_DWORD *)(v10 + 4 * v102 + 32) = v100;
    if (v95 == v29)
    {
      swift_bridgeObjectRelease();
      v29 = v117;
      v75 = v122[0];
      goto LABEL_63;
    }
  }
LABEL_70:
  result = (_QWORD *)sub_22655D3DC();
  __break(1u);
  return result;
}

_QWORD *sub_226458C90(unint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, float a5, float a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  float32x2_t *v53;
  __n128 v54;
  double v55;
  double v56;
  __n128 v57;
  __n128 v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t *v72;
  uint64_t v73;
  __n128 v74;
  double v75;
  double v76;
  __n128 v77;
  __n128 v78;
  _QWORD *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *result;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  float32x2_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  float32x2_t *v106;
  _QWORD *v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v100 = a3;
  v103 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))a2;
  v108 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v102 = (uint64_t)&v96 - v13;
  v105 = type metadata accessor for ScanItemStrut();
  v101 = *(_QWORD *)(v105 - 8);
  v14 = MEMORY[0x24BDAC7A8](v105);
  v106 = (float32x2_t *)((char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v99 = (float32x2_t *)((char *)&v96 - v16);
  v17 = MEMORY[0x24BEE4AF8];
  v111 = MEMORY[0x24BEE4AF8];
  v112 = MEMORY[0x24BEE4AF8];
  v110 = MEMORY[0x24BEE4AF8];
  v18 = sub_22645B8C8(a1, (float32x2_t)v108.n128_u64[0], 0.0);
  v19 = sub_2264CE9A0(v18);
  swift_bridgeObjectRelease();
  swift_retain();
  v20 = swift_bridgeObjectRetain();
  v21 = sub_22645A248(v20, a5);
  v104 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  sub_22646A170(v21);
  v22 = swift_bridgeObjectRetain();
  sub_22646A170(v22);
  v107 = v19;
  v23 = v19[4];
  v24 = swift_bridgeObjectRetain();
  sub_22646A2B4(v24);
  v25 = *(_QWORD *)(v23 + 16);
  if (v25)
  {
    v97 = a1;
    v98 = v12;
    v109 = v17;
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v25, 0);
    v26 = 0;
    v17 = v109;
    v27 = v112;
    while (1)
    {
      v28 = *(_QWORD *)(v27 + 16);
      if (HIDWORD(v28))
        goto LABEL_49;
      v29 = *(_DWORD *)(v23 + 4 * v26 + 32);
      v30 = v29 + v28;
      if (__CFADD__(v29, (_DWORD)v28))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v109 = v17;
      v32 = *(_QWORD *)(v17 + 16);
      v31 = *(_QWORD *)(v17 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_2264C7984(v31 > 1, v32 + 1, 1);
        v17 = v109;
      }
      ++v26;
      *(_QWORD *)(v17 + 16) = v32 + 1;
      *(_DWORD *)(v17 + 4 * v32 + 32) = v30;
      if (v25 == v26)
      {
        swift_bridgeObjectRelease();
        v12 = v98;
        a1 = v97;
        break;
      }
    }
  }
  sub_22646AD7C(v17);
  v33 = v107;
  swift_retain();
  v34 = swift_bridgeObjectRetain();
  v35 = sub_22645A33C(v34, a6);
  swift_bridgeObjectRelease();
  swift_release();
  sub_22646A170(v35);
  v36 = sub_2265143CC(*(_QWORD *)(v33[2] + 16), (__n128)xmmword_226560090);
  sub_22646A170(v36);
  v37 = sub_22645D780(a1, v108.n128_f64[0], a5, a6);
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_QWORD *)(v38 + 16);
  v40 = MEMORY[0x24BEE4AF8];
  v104 = v37;
  if (v39)
  {
    v109 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v39, 0);
    v41 = 0;
    v40 = v109;
    v42 = v112;
    while (1)
    {
      v43 = *(_QWORD *)(v42 + 16);
      if (HIDWORD(v43))
        goto LABEL_49;
      v44 = *(_DWORD *)(v38 + 4 * v41 + 32);
      v45 = v44 + v43;
      if (__CFADD__(v44, (_DWORD)v43))
        goto LABEL_46;
      v109 = v40;
      v47 = *(_QWORD *)(v40 + 16);
      v46 = *(_QWORD *)(v40 + 24);
      if (v47 >= v46 >> 1)
      {
        sub_2264C7984(v46 > 1, v47 + 1, 1);
        v40 = v109;
      }
      ++v41;
      *(_QWORD *)(v40 + 16) = v47 + 1;
      *(_DWORD *)(v40 + 4 * v47 + 32) = v45;
      if (v39 == v41)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_22646A2B4(v40);
  v48 = swift_bridgeObjectRetain();
  sub_22646A170(v48);
  v49 = swift_bridgeObjectRetain();
  sub_22646A170(v49);
  v50 = v102;
  sub_22645E1AC((uint64_t)v103, v102);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  v52 = v105;
  if (v51(v50, 1, v105) == 1)
  {
    sub_22645E1F4(v50);
LABEL_30:
    v72 = v106;
    v73 = v100;
    goto LABEL_31;
  }
  v53 = v99;
  sub_22645E234(v50, (uint64_t)v99);
  v54.n128_f32[0] = vmuls_lane_f32(-0.5, (float32x2_t)v108.n128_u64[0], 1);
  *(float *)&v55 = vmuls_lane_f32(0.5, (float32x2_t)v108.n128_u64[0], 1);
  v59 = sub_22645E278(v53, a5 > 0.0, v54, v55, (float32x2_t)COERCE_UNSIGNED_INT((float)(-0.5 * v108.n128_f32[0]) - COERCE_FLOAT(*v53)), v108.n128_f64[0], v56, v57, v58);
  if (!v59)
  {
    sub_22645F9C8((uint64_t)v53);
    goto LABEL_30;
  }
  v103 = v51;
  v60 = v59[4];
  v61 = *(_QWORD *)(v60 + 16);
  v62 = MEMORY[0x24BEE4AF8];
  if (v61)
  {
    v98 = v12;
    v109 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v61, 0);
    v63 = 0;
    v62 = v109;
    v64 = v112;
    while (1)
    {
      v65 = *(_QWORD *)(v64 + 16);
      if (HIDWORD(v65))
        goto LABEL_49;
      v66 = *(_DWORD *)(v60 + 4 * v63 + 32);
      v67 = v66 + v65;
      if (__CFADD__(v66, (_DWORD)v65))
        goto LABEL_47;
      v109 = v62;
      v69 = *(_QWORD *)(v62 + 16);
      v68 = *(_QWORD *)(v62 + 24);
      if (v69 >= v68 >> 1)
      {
        sub_2264C7984(v68 > 1, v69 + 1, 1);
        v62 = v109;
      }
      ++v63;
      *(_QWORD *)(v62 + 16) = v69 + 1;
      *(_DWORD *)(v62 + 4 * v69 + 32) = v67;
      if (v61 == v63)
      {
        swift_bridgeObjectRelease();
        v12 = v98;
        v52 = v105;
        break;
      }
    }
  }
  sub_22646A2B4(v62);
  v70 = swift_bridgeObjectRetain();
  sub_22646A170(v70);
  v71 = swift_bridgeObjectRetain();
  sub_22646A170(v71);
  sub_22645F9C8((uint64_t)v99);
  swift_release();
  v72 = v106;
  v73 = v100;
  v51 = v103;
LABEL_31:
  sub_22645E1AC(v73, (uint64_t)v12);
  if (v51((uint64_t)v12, 1, v52) == 1)
  {
    swift_release();
    swift_release();
    sub_22645E1F4((uint64_t)v12);
LABEL_44:
    v93 = v111;
    v92 = v112;
    v94 = v110;
    type metadata accessor for RoomCaptureMesh();
    result = (_QWORD *)swift_allocObject();
    result[2] = v92;
    result[3] = v94;
    result[4] = v93;
    return result;
  }
  sub_22645E234((uint64_t)v12, (uint64_t)v72);
  v74.n128_f32[0] = vmuls_lane_f32(-0.5, (float32x2_t)v108.n128_u64[0], 1);
  *(float *)&v75 = vmuls_lane_f32(0.5, (float32x2_t)v108.n128_u64[0], 1);
  v79 = sub_22645E278(v72, a5 > 0.0, v74, v75, (float32x2_t)COERCE_UNSIGNED_INT((float)(0.5 * v108.n128_f32[0]) - COERCE_FLOAT(*v72)), v108.n128_f64[0], v76, v77, v78);
  if (!v79)
  {
    swift_release();
    swift_release();
    sub_22645F9C8((uint64_t)v72);
    goto LABEL_44;
  }
  v80 = v79[4];
  v81 = *(_QWORD *)(v80 + 16);
  v82 = MEMORY[0x24BEE4AF8];
  if (!v81)
  {
LABEL_42:
    sub_22646A2B4(v82);
    v90 = swift_bridgeObjectRetain();
    sub_22646A170(v90);
    v91 = swift_bridgeObjectRetain();
    sub_22646A170(v91);
    swift_release();
    swift_release();
    sub_22645F9C8((uint64_t)v106);
    swift_release();
    goto LABEL_44;
  }
  v109 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_2264C7984(0, v81, 0);
  v83 = 0;
  v82 = v109;
  v84 = v112;
  while (1)
  {
    v85 = *(_QWORD *)(v84 + 16);
    if (HIDWORD(v85))
      break;
    v86 = *(_DWORD *)(v80 + 4 * v83 + 32);
    v87 = v86 + v85;
    if (__CFADD__(v86, (_DWORD)v85))
      goto LABEL_48;
    v109 = v82;
    v89 = *(_QWORD *)(v82 + 16);
    v88 = *(_QWORD *)(v82 + 24);
    if (v89 >= v88 >> 1)
    {
      sub_2264C7984(v88 > 1, v89 + 1, 1);
      v82 = v109;
    }
    ++v83;
    *(_QWORD *)(v82 + 16) = v89 + 1;
    *(_DWORD *)(v82 + 4 * v89 + 32) = v87;
    if (v81 == v83)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
  }
LABEL_49:
  result = (_QWORD *)sub_22655D3DC();
  __break(1u);
  return result;
}

uint64_t sub_226459464(uint64_t *a1)
{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
    sub_2264C10BC(v2);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_22645950C(v6);
  return sub_22655CEE4();
}

uint64_t RoomCaptureGeometryManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RoomCaptureGeometryManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for RoomCaptureGeometryManager()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_22645950C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *__dst;
  uint64_t v103;

  v2 = v1;
  v4 = a1[1];
  result = sub_22655D538();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_134;
    if ((unint64_t)v4 >= 2)
    {
      v12 = 0;
      v13 = *a1;
      for (i = 1; i != v4; ++i)
      {
        v15 = *(_QWORD *)(v13 + 8 * i);
        v16 = v12;
        do
        {
          v17 = (_QWORD *)(v13 + 8 * v16);
          v18 = *v17;
          if (COERCE_FLOAT(*(_QWORD *)(v15 + 16)) >= COERCE_FLOAT(*(_QWORD *)(*v17 + 16)))
            break;
          if (!v13)
            goto LABEL_138;
          *v17 = v15;
          v17[1] = v18;
          --v16;
        }
        while (v16 != -1);
        ++v12;
      }
    }
    return result;
  }
  if (v4 >= 0)
    v8 = v4;
  else
    v8 = v4 + 1;
  if (v4 < -1)
    goto LABEL_143;
  v9 = result;
  v97 = a1;
  if (v4 < 2)
  {
    v19 = (char *)MEMORY[0x24BEE4AF8];
    v103 = MEMORY[0x24BEE4AF8];
    __dst = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v22 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_100:
      v89 = v19;
      if (v22 >= 2)
      {
        v90 = *v97;
        do
        {
          v91 = v22 - 2;
          if (v22 < 2)
            goto LABEL_129;
          if (!v90)
            goto LABEL_142;
          v92 = v89;
          v93 = *(_QWORD *)&v89[16 * v91 + 32];
          v94 = *(_QWORD *)&v89[16 * v22 + 24];
          sub_226459BBC((char *)(v90 + 8 * v93), (char *)(v90 + 8 * *(_QWORD *)&v89[16 * v22 + 16]), v90 + 8 * v94, __dst, v6, v7);
          if (v2)
            break;
          if (v94 < v93)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v92 = sub_2264CA374((uint64_t)v92);
          if (v91 >= *((_QWORD *)v92 + 2))
            goto LABEL_131;
          v95 = &v92[16 * v91 + 32];
          *(_QWORD *)v95 = v93;
          *((_QWORD *)v95 + 1) = v94;
          v96 = *((_QWORD *)v92 + 2);
          if (v22 > v96)
            goto LABEL_132;
          memmove(&v92[16 * v22 + 16], &v92[16 * v22 + 32], 16 * (v96 - v22));
          v89 = v92;
          *((_QWORD *)v92 + 2) = v96 - 1;
          v22 = v96 - 1;
        }
        while (v96 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v103 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_22655CEE4();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v8 >> 1;
    type metadata accessor for OpeningElement();
    v11 = sub_22655CEFC();
    *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    __dst = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    v103 = v11;
  }
  v20 = 0;
  v21 = *a1;
  v98 = *a1 - 8;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v99 = v9;
  v100 = v4;
  v101 = *a1;
  while (1)
  {
    v23 = v20++;
    if (v20 < v4)
    {
      v24 = *(float32x2_t *)(*(_QWORD *)(v21 + 8 * v20) + 16);
      v25 = (int8x8_t)vcgt_f32(*(float32x2_t *)(*(_QWORD *)(v21 + 8 * v23) + 16), v24);
      v20 = v23 + 2;
      if (v23 + 2 < v4)
      {
        while (1)
        {
          v26 = v24;
          v24 = *(float32x2_t *)(*(_QWORD *)(v21 + 8 * v20) + 16);
          if ((vmvn_s8(veor_s8((int8x8_t)vcgt_f32(v26, v24), v25)).u8[0] & 1) == 0)
            break;
          if (v4 == ++v20)
          {
            v20 = v4;
            break;
          }
        }
      }
      if ((v25.i8[0] & 1) != 0)
      {
        if (v20 < v23)
          goto LABEL_135;
        if (v23 < v20)
        {
          v27 = (uint64_t *)(v98 + 8 * v20);
          v28 = v20;
          v29 = v23;
          v30 = (uint64_t *)(v21 + 8 * v23);
          do
          {
            if (v29 != --v28)
            {
              if (!v21)
                goto LABEL_141;
              v31 = *v30;
              *v30 = *v27;
              *v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v20 >= v4)
      goto LABEL_50;
    if (__OFSUB__(v20, v23))
      goto LABEL_133;
    if (v20 - v23 >= v9)
      goto LABEL_50;
    v32 = v23 + v9;
    if (__OFADD__(v23, v9))
      goto LABEL_136;
    if (v32 >= v4)
      v32 = v4;
    if (v32 < v23)
      break;
    if (v20 != v32)
    {
      v33 = (_QWORD *)(v98 + 8 * v20);
      do
      {
        v34 = *(_QWORD *)(v21 + 8 * v20);
        v35 = v23;
        v36 = v33;
        do
        {
          v37 = *v36;
          if (COERCE_FLOAT(*(_QWORD *)(v34 + 16)) >= COERCE_FLOAT(*(_QWORD *)(*v36 + 16)))
            break;
          if (!v21)
            goto LABEL_139;
          *v36 = v34;
          v36[1] = v37;
          --v36;
          ++v35;
        }
        while (v20 != v35);
        ++v20;
        ++v33;
      }
      while (v20 != v32);
      v20 = v32;
    }
LABEL_50:
    if (v20 < v23)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_2264C9F78(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v39 = *((_QWORD *)v19 + 2);
    v38 = *((_QWORD *)v19 + 3);
    v22 = v39 + 1;
    v21 = v101;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_2264C9F78((char *)(v38 > 1), v39 + 1, 1, v19);
      v21 = v101;
      v19 = v88;
    }
    *((_QWORD *)v19 + 2) = v22;
    v40 = v19 + 32;
    v41 = &v19[16 * v39 + 32];
    *(_QWORD *)v41 = v23;
    *((_QWORD *)v41 + 1) = v20;
    if (v39)
    {
      while (1)
      {
        v42 = v22 - 1;
        if (v22 >= 4)
        {
          v47 = &v40[16 * v22];
          v48 = *((_QWORD *)v47 - 8);
          v49 = *((_QWORD *)v47 - 7);
          v53 = __OFSUB__(v49, v48);
          v50 = v49 - v48;
          if (v53)
            goto LABEL_117;
          v52 = *((_QWORD *)v47 - 6);
          v51 = *((_QWORD *)v47 - 5);
          v53 = __OFSUB__(v51, v52);
          v45 = v51 - v52;
          v46 = v53;
          if (v53)
            goto LABEL_118;
          v54 = v22 - 2;
          v55 = &v40[16 * v22 - 32];
          v57 = *(_QWORD *)v55;
          v56 = *((_QWORD *)v55 + 1);
          v53 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v53)
            goto LABEL_120;
          v53 = __OFADD__(v45, v58);
          v59 = v45 + v58;
          if (v53)
            goto LABEL_123;
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v53 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v53)
              goto LABEL_127;
            v70 = v45 < v80;
            goto LABEL_87;
          }
        }
        else
        {
          if (v22 != 3)
          {
            v71 = *((_QWORD *)v19 + 4);
            v72 = *((_QWORD *)v19 + 5);
            v53 = __OFSUB__(v72, v71);
            v64 = v72 - v71;
            v65 = v53;
            goto LABEL_81;
          }
          v44 = *((_QWORD *)v19 + 4);
          v43 = *((_QWORD *)v19 + 5);
          v53 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          v46 = v53;
        }
        if ((v46 & 1) != 0)
          goto LABEL_119;
        v54 = v22 - 2;
        v60 = &v40[16 * v22 - 32];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v63 = __OFSUB__(v61, v62);
        v64 = v61 - v62;
        v65 = v63;
        if (v63)
          goto LABEL_122;
        v66 = &v40[16 * v42];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v53 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v53)
          goto LABEL_125;
        if (__OFADD__(v64, v69))
          goto LABEL_126;
        if (v64 + v69 >= v45)
        {
          v70 = v45 < v69;
LABEL_87:
          if (v70)
            v42 = v54;
          goto LABEL_89;
        }
LABEL_81:
        if ((v65 & 1) != 0)
          goto LABEL_121;
        v73 = &v40[16 * v42];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v53 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v53)
          goto LABEL_124;
        if (v76 < v64)
          goto LABEL_20;
LABEL_89:
        v81 = v42 - 1;
        if (v42 - 1 >= v22)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v21)
          goto LABEL_140;
        v82 = v19;
        v83 = &v40[16 * v81];
        v84 = *(_QWORD *)v83;
        v85 = &v40[16 * v42];
        v86 = *((_QWORD *)v85 + 1);
        sub_226459BBC((char *)(v21 + 8 * *(_QWORD *)v83), (char *)(v21 + 8 * *(_QWORD *)v85), v21 + 8 * v86, __dst, v6, v7);
        if (v1)
          goto LABEL_97;
        if (v86 < v84)
          goto LABEL_114;
        if (v42 > *((_QWORD *)v82 + 2))
          goto LABEL_115;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v40[16 * v81 + 8] = v86;
        v87 = *((_QWORD *)v82 + 2);
        if (v42 >= v87)
          goto LABEL_116;
        v19 = v82;
        v22 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((_QWORD *)v82 + 2) = v87 - 1;
        v21 = v101;
        if (v87 <= 2)
          goto LABEL_20;
      }
    }
    v22 = 1;
LABEL_20:
    v9 = v99;
    v4 = v100;
    if (v20 >= v100)
    {
      v2 = v1;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  result = sub_22655D3DC();
  __break(1u);
  return result;
}

uint64_t sub_226459BBC(char *__src, char *a2, unint64_t a3, char *__dst, __n128 a5, __n128 a6)
{
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  char *v25;
  char *v26;

  v6 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v26 = __src;
  v25 = __dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst)
        memmove(__dst, a2, 8 * v15);
      v18 = &v6[8 * v15];
      v24 = v18;
      v26 = v8;
      if (v9 < v8 && v13 >= 8)
      {
        v19 = (char *)(a3 - 8);
        while (1)
        {
          v20 = v19 + 8;
          v21 = v8 - 8;
          v22 = *((_QWORD *)v8 - 1);
          a5.n128_u64[0] = *(_QWORD *)(*((_QWORD *)v18 - 1) + 16);
          a6.n128_u64[0] = *(_QWORD *)(v22 + 16);
          if (a5.n128_f32[0] >= a6.n128_f32[0])
          {
            v24 = v18 - 8;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_QWORD *)v19 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            if (v8 <= v9)
              goto LABEL_42;
          }
          else
          {
            if (v20 != v8 || v19 >= v8)
              *(_QWORD *)v19 = v22;
            v26 = v8 - 8;
            v8 -= 8;
            if (v21 <= v9)
              goto LABEL_42;
          }
          v19 -= 8;
          if (v18 <= v6)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst)
      memmove(__dst, __src, 8 * v12);
    v16 = &v6[8 * v12];
    v24 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      do
      {
        a5.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v8 + 16);
        a6.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v6 + 16);
        if (a5.n128_f32[0] >= a6.n128_f32[0])
        {
          if (v9 != v6)
            *(_QWORD *)v9 = *(_QWORD *)v6;
          v6 += 8;
          v25 = v6;
          v17 = v8;
        }
        else
        {
          v17 = v8 + 8;
          if (v9 < v8 || v9 >= v17 || v9 != v8)
            *(_QWORD *)v9 = *(_QWORD *)v8;
        }
        v9 += 8;
        if (v6 >= v16)
          break;
        v8 = v17;
      }
      while ((unint64_t)v17 < a3);
      v26 = v9;
    }
LABEL_42:
    sub_2264CA070(&v26, &v25, &v24, a5, a6);
    return 1;
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

_QWORD *sub_226459E38(float32x4_t a1, __n128 a2, double a3, __n128 a4)
{
  float v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v26;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  int v31;
  __int128 v32;
  float v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  float v37;
  __int128 v38;
  float v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;

  a4.n128_f32[0] = 0.5 * a1.f32[0];
  v4 = vmuls_lane_f32(0.5, *(float32x2_t *)a1.f32, 1);
  v5 = vmuls_lane_f32(0.5, a1, 2);
  *(float *)&v6 = a2.n128_f32[0] - a4.n128_f32[0];
  v40 = COERCE_UNSIGNED_INT(a2.n128_f32[0] - a4.n128_f32[0]);
  *((float *)&v6 + 1) = a2.n128_f32[1] - v4;
  v44 = v6;
  v7 = a2.n128_f32[2] - v5;
  v46 = COERCE_UNSIGNED_INT(a4.n128_f32[0] + a2.n128_f32[0]);
  v8 = v4 + a2.n128_f32[1];
  v39 = v5 + a2.n128_f32[2];
  a4.n128_f32[0] = a4.n128_f32[0] + a2.n128_f32[0];
  a2.n128_u32[1] = 0;
  a2.n128_f32[0] = a2.n128_f32[0] - a4.n128_f32[0];
  v9 = a2;
  v9.n128_u32[1] = HIDWORD(v6);
  a2.n128_f32[1] = v8;
  a4.n128_u64[0] = a4.n128_u32[0];
  v48 = MEMORY[0x24BEE4AF8];
  v10 = a4;
  v31 = HIDWORD(v6);
  v33 = v8;
  v10.n128_f32[1] = v8;
  a4.n128_u32[1] = HIDWORD(v6);
  v28 = v10;
  v29 = v9;
  v35 = a2;
  v37 = v7;
  v30 = a4;
  v11 = sub_226481014(v9, a2, v10, a4, (__n128)xmmword_226560090, v7);
  MEMORY[0x227699594](v11);
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  v12 = v46;
  *((float *)&v12 + 1) = v33;
  v42 = v12;
  v13 = v44;
  *((float *)&v13 + 2) = v37;
  v34 = v13;
  sub_22655CF08();
  sub_22655CEE4();
  v14 = sub_226481014(v29, v30, v28, v35, (__n128)xmmword_226560080, v39);
  MEMORY[0x227699594](v14);
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  v15 = v42;
  *((float *)&v15 + 2) = v39;
  v36 = v15;
  sub_22655CF08();
  sub_22655CEE4();
  v16 = v44;
  v17 = v46;
  *((float *)&v16 + 2) = v39;
  v45 = v16;
  DWORD1(v17) = v31;
  v18 = v17;
  *((float *)&v18 + 2) = v37;
  v32 = v18;
  *((float *)&v17 + 2) = v39;
  v47 = v17;
  type metadata accessor for RoomCaptureQuad();
  v19 = (_OWORD *)swift_allocObject();
  v19[1] = v45;
  v19[2] = v34;
  v19[3] = v32;
  v19[4] = v47;
  v19[5] = xmmword_2265600B0;
  MEMORY[0x227699594]();
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v21 = v40;
  v20 = v42;
  *((float *)&v20 + 2) = v37;
  v43 = v20;
  *((float *)&v21 + 1) = v33;
  v22 = v21;
  *((float *)&v22 + 2) = v37;
  v38 = v22;
  *((float *)&v21 + 2) = v39;
  v41 = v21;
  v23 = (_OWORD *)swift_allocObject();
  v23[1] = v36;
  v23[2] = v43;
  v23[3] = v38;
  v23[4] = v41;
  v23[5] = xmmword_2265600C0;
  MEMORY[0x227699594]();
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v24 = (_OWORD *)swift_allocObject();
  v24[1] = v41;
  v24[2] = v38;
  v24[3] = v34;
  v24[4] = v45;
  v24[5] = xmmword_2265600D0;
  MEMORY[0x227699594]();
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v25 = (_OWORD *)swift_allocObject();
  v25[1] = v47;
  v25[2] = v32;
  v25[3] = v43;
  v25[4] = v36;
  v25[5] = xmmword_2265600A0;
  MEMORY[0x227699594]();
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v26 = sub_2264CE9A0(v48);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_22645A248(uint64_t a1, float a2)
{
  int64_t v3;
  uint64_t result;
  __int128 *v6;
  int32x2_t v7;
  float32x2_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2264C1310(0, v3, 0);
    result = v14;
    v6 = (__int128 *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    v8 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v9 = *v6;
      v15 = result;
      v11 = *(_QWORD *)(result + 16);
      v10 = *(_QWORD *)(result + 24);
      if (v11 >= v10 >> 1)
      {
        v13 = *v6;
        sub_2264C1310(v10 > 1, v11 + 1, 1);
        v9 = v13;
        result = v15;
      }
      *(float32x2_t *)&v12 = vadd_f32(v8, *(float32x2_t *)&v9);
      *((float *)&v12 + 2) = *((float *)&v9 + 2) + a2;
      HIDWORD(v12) = 0;
      *(_QWORD *)(result + 16) = v11 + 1;
      *(_OWORD *)(result + 16 * v11 + 32) = v12;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22645A33C(uint64_t a1, float a2)
{
  int64_t v3;
  uint64_t result;
  __int128 *v6;
  int32x2_t v7;
  float32x2_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2264C1310(0, v3, 0);
    result = v14;
    v6 = (__int128 *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    v8 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v9 = *v6;
      v15 = result;
      v11 = *(_QWORD *)(result + 16);
      v10 = *(_QWORD *)(result + 24);
      if (v11 >= v10 >> 1)
      {
        v13 = *v6;
        sub_2264C1310(v10 > 1, v11 + 1, 1);
        v9 = v13;
        result = v15;
      }
      *(float32x2_t *)&v12 = vadd_f32(v8, *(float32x2_t *)&v9);
      *((float *)&v12 + 2) = *((float *)&v9 + 2) - a2;
      HIDWORD(v12) = 0;
      *(_QWORD *)(result + 16) = v11 + 1;
      *(_OWORD *)(result + 16 * v11 + 32) = v12;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22645A430(uint64_t a1, float a2)
{
  int64_t v3;
  uint64_t result;
  __int128 *v6;
  int32x2_t v7;
  __int128 v8;
  float32x2_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2264C1310(0, v3, 0);
    result = v16;
    v6 = (__int128 *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    *(float *)&v8 = a2 + 0.0;
    v9 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v10 = *v6;
      v17 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = *v6;
        v15 = v8;
        sub_2264C1310(v11 > 1, v12 + 1, 1);
        *(_QWORD *)&v10 = v14;
        v8 = v15;
        result = v17;
      }
      *(float32x2_t *)&v13 = vadd_f32(v9, *(float32x2_t *)&v10);
      *((_QWORD *)&v13 + 1) = v8;
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_OWORD *)(result + 16 * v12 + 32) = v13;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22645A520(uint64_t a1, float a2)
{
  int64_t v3;
  uint64_t result;
  __int128 *v6;
  int32x2_t v7;
  __int128 v8;
  float32x2_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2264C1310(0, v3, 0);
    result = v16;
    v6 = (__int128 *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    *(float *)&v8 = 0.0 - a2;
    v9 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v10 = *v6;
      v17 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = *v6;
        v15 = v8;
        sub_2264C1310(v11 > 1, v12 + 1, 1);
        *(_QWORD *)&v10 = v14;
        v8 = v15;
        result = v17;
      }
      *(float32x2_t *)&v13 = vadd_f32(v9, *(float32x2_t *)&v10);
      *((_QWORD *)&v13 + 1) = v8;
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_OWORD *)(result + 16 * v12 + 32) = v13;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_22645A610(_QWORD *a1, __n128 a2, float32x4_t a3, float a4, __n128 a5)
{
  uint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  float32x2_t *v14;
  __int128 v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  __int128 v20;
  __int128 v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  float v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  float v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  float32x2_t v47;
  float v48;
  float v49;
  float v50;
  float32x4_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  __int128 v60;
  __int128 v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32_t v68;
  float v69;
  unsigned int v70;
  float32_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  _OWORD *v76;
  __int128 v77;
  float32x4_t v78;
  float32x4_t v79;
  _OWORD *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  _OWORD *v84;
  float32x4_t v85;
  float32x4_t v86;
  _OWORD *v87;
  float32x4_t v88;
  __int128 v89;
  float32x4_t v90;
  _OWORD *v91;
  float32x4_t v92;
  __int128 v93;
  float32x4_t v94;
  _OWORD *v95;
  _QWORD *v96;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float v116;
  __int128 v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  __int128 v128;
  float32x4_t v129;
  __int128 v130;
  float32x4_t v131;
  __int128 v132;
  __int128 v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  __int128 v137;
  __int128 v138;
  float v139;
  float32x4_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  float v144;
  float32x4_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  float v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x4_t v154;
  __int128 v155;
  __int128 v156;
  float32x4_t v157;
  float32x4_t v158;
  unint64_t v159;

  v6 = a1[2];
  if (!v6)
    return sub_226459E38(a3, a2, a2.n128_f64[0], a5);
  v8 = sub_226463E70(a1, a2, (__n128)a3);
  v159 = MEMORY[0x24BEE4AF8];
  v10 = v8[2];
  v11 = "";
  v12 = "";
  v13 = "";
  if (v10)
  {
    v112 = vmuls_lane_f32(0.5, a3, 2);
    v14 = (float32x2_t *)((char *)v8 + 52);
    v15 = xmmword_2265600A0;
    do
    {
      *(float *)&v15 = v14[-1].f32[1] * 0.5;
      v16 = v14[-3].f32[1];
      v116 = v16 - *(float *)&v15;
      *(float *)&v23 = v16 - *(float *)&v15;
      *(float *)&v15 = v16 + *(float *)&v15;
      v122 = v15;
      LODWORD(v24) = v15;
      v17 = vmul_f32(*v14, (float32x2_t)0x3F0000003F000000);
      v18 = v14[-2];
      v19 = vsub_f32(v18, v17);
      v20 = v23;
      DWORD1(v20) = v19.i32[0];
      v147 = v20;
      DWORD2(v20) = v19.i32[1];
      v128 = v20;
      *(float32x2_t *)&v9 = vadd_f32(v18, v17);
      v21 = v24;
      DWORD1(v21) = v9;
      v22 = v112;
      HIDWORD(v23) = v9;
      v137 = v23;
      v155 = v21;
      DWORD2(v21) = v19.i32[1];
      v130 = v21;
      v152 = v19;
      HIDWORD(v24) = v19.i32[0];
      v142 = v24;
      v132 = v9;
      if (fabsf(v19.f32[1] + v112) < a4)
      {
        v25 = v23;
        DWORD2(v25) = v19.i32[1];
        v100 = v25;
        v26 = v24;
        DWORD2(v26) = v19.i32[1];
        v105 = v26;
        type metadata accessor for RoomCaptureQuad();
        v27 = (_OWORD *)swift_allocObject();
        v27[1] = v128;
        v27[2] = v100;
        v27[3] = v130;
        v27[4] = v105;
        v27[5] = xmmword_226560090;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v22 = v112;
        v9 = v132;
      }
      v28 = v155;
      DWORD2(v28) = DWORD1(v9);
      v156 = v28;
      v29 = v147;
      DWORD2(v29) = DWORD1(v9);
      v148 = v29;
      if (vabds_f32(*((float *)&v9 + 1), v22) < a4)
      {
        v30 = v142;
        DWORD2(v30) = DWORD1(v9);
        v106 = v30;
        v31 = v137;
        DWORD2(v31) = DWORD1(v9);
        v101 = v31;
        type metadata accessor for RoomCaptureQuad();
        v32 = (_OWORD *)swift_allocObject();
        v32[1] = v148;
        v32[2] = v106;
        v32[3] = v156;
        v32[4] = v101;
        v32[5] = xmmword_226560080;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v9 = v132;
      }
      v33 = a3.f32[1] * 0.5;
      if (fabsf(v152.f32[0] + (float)(a3.f32[1] * 0.5)) < a4)
      {
        v34 = v142;
        v35 = v142;
        DWORD2(v35) = v152.i32[1];
        DWORD2(v34) = DWORD1(v9);
        v102 = v34;
        v107 = v35;
        type metadata accessor for RoomCaptureQuad();
        v36 = (_OWORD *)swift_allocObject();
        v36[1] = v148;
        v36[2] = v128;
        v36[3] = v107;
        v36[4] = v102;
        v36[5] = xmmword_2265600B0;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v33 = a3.f32[1] * 0.5;
        v9 = v132;
      }
      if (vabds_f32(*(float *)&v9, v33) < a4)
      {
        v37 = v137;
        v38 = v137;
        DWORD2(v38) = v152.i32[1];
        DWORD2(v37) = DWORD1(v9);
        v103 = v37;
        v108 = v38;
        type metadata accessor for RoomCaptureQuad();
        v39 = (_OWORD *)swift_allocObject();
        v39[1] = v156;
        v39[2] = v130;
        v39[3] = v108;
        v39[4] = v103;
        v39[5] = xmmword_2265600C0;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v9 = v132;
      }
      v40 = 0.5 * a3.f32[0];
      if (fabsf(v116 + (float)(0.5 * a3.f32[0])) < a4)
      {
        v41 = v137;
        v42 = v137;
        DWORD2(v42) = DWORD1(v9);
        v117 = v42;
        DWORD2(v41) = v152.i32[1];
        v138 = v41;
        type metadata accessor for RoomCaptureQuad();
        v43 = (_OWORD *)swift_allocObject();
        v43[1] = v117;
        v43[2] = v138;
        v43[3] = v128;
        v43[4] = v148;
        v43[5] = xmmword_2265600D0;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v40 = 0.5 * a3.f32[0];
        v9 = v132;
      }
      v15 = v122;
      if (vabds_f32(*(float *)&v122, v40) < a4)
      {
        v44 = v142;
        v45 = v142;
        DWORD2(v45) = DWORD1(v9);
        v149 = v45;
        DWORD2(v44) = v152.i32[1];
        v143 = v44;
        type metadata accessor for RoomCaptureQuad();
        v46 = (_OWORD *)swift_allocObject();
        v46[1] = v149;
        v46[2] = v143;
        v46[3] = v130;
        v46[4] = v156;
        v46[5] = xmmword_2265600A0;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
      }
      v14 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v11 = "QuaternionSpring" + 16;
    v12 = "QuaternionSpring" + 16;
    v13 = "QuaternionSpring" + 16;
    v47 = *(float32x2_t *)a3.f32;
    v49 = a3.f32[1] * 0.5;
    v48 = v112;
    v50 = 0.5 * a3.f32[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    v47 = *(float32x2_t *)a3.f32;
    v50 = 0.5 * a3.f32[0];
    v49 = a3.f32[1] * 0.5;
    v48 = vmuls_lane_f32(0.5, a3, 2);
  }
  *(float32x2_t *)v52.f32 = vmul_f32(v47, (float32x2_t)0xBF000000BF000000);
  v53 = (float)(a3.f32[2] * -0.5) + a4;
  v54 = v48 - a4;
  v55 = v52.f32[1] + a4;
  v56 = v49 - a4;
  v57 = v52.f32[0] + a4;
  v58 = v50 - a4;
  v52.i64[1] = COERCE_UNSIGNED_INT(a3.f32[2] * -0.5);
  v59.i64[0] = __PAIR64__(LODWORD(v49), LODWORD(v50));
  v59.i64[1] = LODWORD(v48);
  v129 = v59;
  v131 = v52;
  swift_bridgeObjectRetain();
  v62 = (float *)(a1 + 7);
  v104 = *((_OWORD *)v11 + 9);
  v99 = *((_OWORD *)v12 + 12);
  v98 = *((_OWORD *)v13 + 11);
  do
  {
    v63 = *(v62 - 2) * 0.5;
    v64 = *(v62 - 1) * 0.5;
    v65 = *v62 * 0.5;
    v66 = *(v62 - 6);
    v67 = *(v62 - 5);
    v68 = v66 - v63;
    *(float *)&v61 = v67 - v64;
    v69 = *(v62 - 4);
    *(float *)&v70 = v69 - v65;
    v71 = v66 + v63;
    *(float *)&v60 = v69 + v65;
    v144 = v68;
    v72.f32[0] = v68;
    v72.f32[1] = v67 - v64;
    v72.i64[1] = v70;
    v150 = v71;
    v153 = vmaxnmq_f32(v72, v131);
    v72.f32[0] = v71;
    v139 = v67 + v64;
    v72.f32[1] = v67 + v64;
    v72.i64[1] = v60;
    v157 = vminnmq_f32(v72, v129);
    v133 = v61;
    if (v53 < *(float *)&v70)
    {
      v123 = v60;
      v73 = v153;
      v73.i32[3] = 0;
      v74 = v73;
      v75 = v73;
      v110 = v73;
      v74.i32[1] = v157.i32[1];
      v74.i32[2] = v153.i32[2];
      v118 = v74;
      v74.i64[0] = v157.i64[0];
      v74.i64[1] = v153.u32[2];
      v113 = v74;
      v75.i32[0] = v157.i32[0];
      v109 = v75;
      type metadata accessor for RoomCaptureQuad();
      v76 = (_OWORD *)swift_allocObject();
      v76[1] = v110;
      v76[2] = v109;
      v76[3] = v113;
      v76[4] = v118;
      v76[5] = xmmword_226560080;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v61 = v133;
      v60 = v123;
      if (*(float *)&v123 >= v54)
      {
LABEL_37:
        if (v55 >= *(float *)&v61)
          goto LABEL_48;
LABEL_45:
        v81 = v153;
        v81.i32[3] = 0;
        v134 = v81;
        v82 = v81;
        v82.i32[2] = v157.i32[2];
        v125 = v82;
        v82.i64[0] = __PAIR64__(v153.u32[1], v157.u32[0]);
        v83 = v153;
        v83.i32[0] = v157.i32[0];
        v83.i32[3] = 0;
        v82.i64[1] = v157.u32[2];
        v115 = v82;
        v120 = v83;
        type metadata accessor for RoomCaptureQuad();
        v84 = (_OWORD *)swift_allocObject();
        v84[1] = v125;
        v84[2] = v115;
        v84[3] = v120;
        v84[4] = v134;
        v84[5] = v99;
        MEMORY[0x227699594]();
        if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        goto LABEL_48;
      }
    }
    else if (*(float *)&v60 >= v54)
    {
      goto LABEL_37;
    }
    *(_QWORD *)&v77 = v153.i64[0];
    *((_QWORD *)&v77 + 1) = v157.u32[2];
    v124 = v77;
    v78 = v157;
    v78.i32[3] = 0;
    v79 = v78;
    v79.i32[1] = v153.i32[1];
    v79.i32[2] = v157.i32[2];
    v114 = v78;
    v119 = v79;
    v78.i32[0] = v153.i32[0];
    v111 = v78;
    type metadata accessor for RoomCaptureQuad();
    v80 = (_OWORD *)swift_allocObject();
    v80[1] = v124;
    v80[2] = v111;
    v80[3] = v114;
    v80[4] = v119;
    v80[5] = v104;
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    v61 = v133;
    if (v55 < *(float *)&v133)
      goto LABEL_45;
LABEL_48:
    if (v139 < v56)
    {
      v85 = v157;
      v85.i32[3] = 0;
      v135 = v85;
      v85.i32[2] = v153.i32[2];
      v140 = v85;
      v85.i64[0] = __PAIR64__(v157.u32[1], v153.u32[0]);
      v86 = v157;
      v86.i32[0] = v153.i32[0];
      v86.i32[3] = 0;
      v85.i32[2] = v153.i32[2];
      v121 = v85;
      v126 = v86;
      type metadata accessor for RoomCaptureQuad();
      v87 = (_OWORD *)swift_allocObject();
      v87[1] = v135;
      v87[2] = v126;
      v87[3] = v121;
      v87[4] = v140;
      v87[5] = v98;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
    }
    if (v57 < v144)
    {
      v88 = v153;
      *(_QWORD *)&v89 = __PAIR64__(v157.u32[1], v153.u32[0]);
      v90 = v157;
      v90.i32[0] = v153.i32[0];
      v90.i32[3] = 0;
      *((_QWORD *)&v89 + 1) = v153.u32[2];
      v141 = v89;
      v145 = v90;
      v88.i32[3] = 0;
      v136 = v88;
      v88.i32[2] = v157.i32[2];
      v127 = v88;
      type metadata accessor for RoomCaptureQuad();
      v91 = (_OWORD *)swift_allocObject();
      v91[1] = v145;
      v91[2] = v127;
      v91[3] = v136;
      v91[4] = v141;
      v91[5] = xmmword_2265600A0;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
    }
    if (v150 < v58)
    {
      v92 = v157;
      *(_QWORD *)&v93 = __PAIR64__(v153.u32[1], v157.u32[0]);
      v94 = v153;
      v94.i32[0] = v157.i32[0];
      v94.i32[3] = 0;
      *((_QWORD *)&v93 + 1) = v157.u32[2];
      v146 = v93;
      v151 = v94;
      v92.i32[3] = 0;
      v158 = v92;
      v92.i32[2] = v153.i32[2];
      v154 = v92;
      type metadata accessor for RoomCaptureQuad();
      v95 = (_OWORD *)swift_allocObject();
      v95[1] = v146;
      v95[2] = v158;
      v95[3] = v154;
      v95[4] = v151;
      v95[5] = xmmword_2265600D0;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
    }
    v62 += 8;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  v96 = sub_2264CE9A0(v159);
  swift_bridgeObjectRelease();
  return v96;
}

uint64_t sub_22645B230(uint64_t a1, float32x2_t a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x2_t *v23;
  float32x2_t v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  float v40;
  float v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  float v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x2_t *v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float32x2_t v74;
  float v75;
  float v76;
  float32x2_t v77;
  float v78;
  _QWORD *v79;

  v3 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
  v4 = vmul_f32(vsub_f32(v3, v3), (float32x2_t)0x3F0000003F000000);
  v5 = vadd_f32(v3, v3);
  v6 = sub_226487198(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v8 = v6[2];
  v7 = v6[3];
  v9 = v8 + 1;
  if (v8 >= v7 >> 1)
    goto LABEL_81;
LABEL_2:
  v6[2] = v9;
  v10 = (float32x2_t *)&v6[2 * v8];
  v10[4] = v4;
  v10[5] = v5;
  v79 = v6;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = sub_22655D400();
    if (!v8)
    {
LABEL_86:
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_86;
  }
  v11 = a1;
  a1 = 0;
  v71 = v8;
  v72 = v11 & 0xC000000000000001;
  v69 = v11 & 0xFFFFFFFFFFFFFF8;
  v70 = v11;
  v68 = v11 + 32;
  while (1)
  {
    if (v72)
    {
      v12 = MEMORY[0x2276999E4](a1, v70);
      v13 = __OFADD__(a1++, 1);
      if (v13)
        goto LABEL_79;
    }
    else
    {
      v7 = *(_QWORD *)(v69 + 16);
      if (a1 >= v7)
        goto LABEL_80;
      v12 = *(_QWORD *)(v68 + 8 * a1);
      swift_retain();
      v13 = __OFADD__(a1++, 1);
      if (v13)
        goto LABEL_79;
    }
    v6 = v79;
    v77 = *(float32x2_t *)(v12 + 16);
    v74 = *(float32x2_t *)(v12 + 32);
    v14 = swift_bridgeObjectRetain();
    v15 = (float32x2_t *)sub_2264D54B0(v14);
    v9 = (unint64_t)v15[2];
    swift_bridgeObjectRelease();
    if (v9 >= 2)
    {
      v8 = 0;
      v6 = (_QWORD *)(v9 >> 1);
      v59 = v9 - 1;
      v60 = 24 * v9 + 16;
      v61 = 6;
      do
      {
        if (v8 != v59)
        {
          v7 = (unint64_t)v15[2];
          if (v8 >= v7)
          {
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            v6 = sub_226487198((_QWORD *)(v7 > 1), v9, 1, v6);
            goto LABEL_2;
          }
          if (v59 >= v7)
            goto LABEL_77;
          v64 = v15[v61 - 2];
          v4 = v15[v61 - 1];
          v5 = v15[v61];
          v9 = *(unint64_t *)((char *)&v15[-1] + v60);
          v65 = *(float32x2_t *)((char *)v15 + v60);
          v66 = *(float32x2_t *)((char *)v15 + v60 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v15 = (float32x2_t *)sub_2264C1138(v15);
          v62 = &v15[v61];
          v62[-2] = (float32x2_t)v9;
          v62[-1] = v65;
          *v62 = v66;
          v63 = (float32x2_t *)((char *)v15 + v60);
          v63[-1] = v64;
          *v63 = v4;
          v63[1] = v5;
        }
        ++v8;
        v61 += 3;
        --v59;
        v60 -= 24;
      }
      while (v6 != (_QWORD *)v8);
    }
    v8 = (unint64_t)v15[2];
    if (v8)
      break;
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    v8 = v71;
    if (a1 == v71)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v79;
    }
  }
  v16 = 0.5 * vadd_f32(v77, v74).f32[0];
  v17 = (float)(v77.f32[1] + v74.f32[1]) * 0.5;
  v18 = vsub_f32(v74, v77).f32[0] * 0.5;
  v5.f32[0] = v16 + v18;
  v19 = v16 - v18;
  v20 = (float)(v74.f32[1] - v77.f32[1]) * 0.5;
  v21 = v17 + v20;
  v22 = v17 - v20;
  v23 = v15 + 6;
  while (1)
  {
    v24 = v23[-1];
    v25 = 0.5 * COERCE_FLOAT(*v23);
    v4.f32[0] = v24.f32[0] - v25;
    v26 = v24.f32[0] + v25;
    v27 = (float)(v24.f32[0] - v25) < v5.f32[0] && v19 < v26;
    v28 = vmuls_lane_f32(0.5, *v23, 1);
    v29 = v24.f32[1] - v28;
    v30 = v27 && v29 < v21;
    v31 = v24.f32[1] + v28;
    if (!v30 || v22 >= v31)
      goto LABEL_25;
    v33 = (unint64_t)v23[-2];
    v78 = v31 + v29;
    v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4.f32[0] < v19)
    {
      v34 = sub_226487198(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v36 = v34[2];
      v35 = v34[3];
      if (v36 >= v35 >> 1)
        v34 = sub_226487198((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
      *(float *)&v37 = (float)(v19 + v4.f32[0]) * 0.5;
      *((float *)&v37 + 1) = v78 * 0.5;
      *(float *)&v38 = v19 - v4.f32[0];
      *((float *)&v38 + 1) = v31 - v29;
      v34[2] = v36 + 1;
      v39 = &v34[2 * v36];
      v39[4] = v37;
      v39[5] = v38;
      if (v29 >= v22)
      {
LABEL_29:
        if (v21 >= v31)
          goto LABEL_30;
        goto LABEL_46;
      }
    }
    else if (v29 >= v22)
    {
      goto LABEL_29;
    }
    if (v19 > v4.f32[0])
      v40 = v19;
    else
      v40 = v4.f32[0];
    if (v26 >= v5.f32[0])
      v41 = v5.f32[0];
    else
      v41 = v26;
    v73 = v41;
    v75 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v34 = sub_226487198(0, v34[2] + 1, 1, v34);
    v43 = v34[2];
    v42 = v34[3];
    if (v43 >= v42 >> 1)
      v34 = sub_226487198((_QWORD *)(v42 > 1), v43 + 1, 1, v34);
    *(float *)&v44 = (float)(v75 + v73) * 0.5;
    *((float *)&v44 + 1) = (float)(v22 + v29) * 0.5;
    *(float *)&v45 = v73 - v75;
    *((float *)&v45 + 1) = v22 - v29;
    v34[2] = v43 + 1;
    v46 = &v34[2 * v43];
    v46[4] = v44;
    v46[5] = v45;
    if (v21 >= v31)
    {
LABEL_30:
      if (v5.f32[0] >= v26)
        goto LABEL_62;
LABEL_57:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = sub_226487198(0, v34[2] + 1, 1, v34);
      v54 = v34[2];
      v53 = v34[3];
      if (v54 >= v53 >> 1)
        v34 = sub_226487198((_QWORD *)(v53 > 1), v54 + 1, 1, v34);
      *(float *)&v55 = (float)(v5.f32[0] + v26) * 0.5;
      *((float *)&v55 + 1) = v78 * 0.5;
      *(float *)&v56 = v26 - v5.f32[0];
      *((float *)&v56 + 1) = v31 - v29;
      v34[2] = v54 + 1;
      v57 = &v34[2 * v54];
      v57[4] = v55;
      v57[5] = v56;
      goto LABEL_62;
    }
LABEL_46:
    if (v19 > v4.f32[0])
      v47 = v19;
    else
      v47 = v4.f32[0];
    v76 = v47;
    if (v26 >= v5.f32[0])
      v4.f32[0] = v5.f32[0];
    else
      v4.f32[0] = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v34 = sub_226487198(0, v34[2] + 1, 1, v34);
    v49 = v34[2];
    v48 = v34[3];
    if (v49 >= v48 >> 1)
      v34 = sub_226487198((_QWORD *)(v48 > 1), v49 + 1, 1, v34);
    *(float *)&v50 = (float)(v76 + v4.f32[0]) * 0.5;
    *((float *)&v50 + 1) = (float)(v21 + v31) * 0.5;
    *(float *)&v51 = v4.f32[0] - v76;
    *((float *)&v51 + 1) = v31 - v21;
    v34[2] = v49 + 1;
    v52 = &v34[2 * v49];
    v52[4] = v50;
    v52[5] = v51;
    if (v5.f32[0] < v26)
      goto LABEL_57;
LABEL_62:
    v6 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_2264C1124(v6);
    v7 = v6[2];
    if (v33 >= v7)
      goto LABEL_78;
    v9 = v7 - 1;
    v58 = v7 - 1 - v33;
    if (v58 < 0)
      break;
    memmove(&v6[2 * v33 + 4], &v6[2 * v33 + 6], 16 * v58);
    v6[2] = v9;
    v79 = v6;
    v6 = &v79;
    sub_22650A300(v33, v33, (uint64_t)v34);
    swift_bridgeObjectRelease();
LABEL_25:
    v23 += 3;
    if (!--v8)
      goto LABEL_5;
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22645B8C8(uint64_t a1, float32x2_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float32x2_t *v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = sub_22645B230(a1, a2);
  v21 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    type metadata accessor for RoomCaptureQuad();
    v5 = (float32x2_t *)(v3 + 40);
    do
    {
      v6 = v5[-1];
      v7 = 0.5 * COERCE_FLOAT(*v5);
      v8 = vmuls_lane_f32(0.5, *v5, 1);
      v9 = v6.f32[1] - v8;
      v10 = v6.f32[1] + v8;
      v11 = COERCE_UNSIGNED_INT(v6.f32[0] - v7);
      v12 = v11;
      *((float *)&v11 + 1) = v9;
      *((float *)&v11 + 2) = a3;
      v20 = v11;
      *(float *)&v11 = v6.f32[0] + v7;
      v13 = COERCE_UNSIGNED_INT(v6.f32[0] + v7);
      *((float *)&v13 + 1) = v9;
      *((float *)&v13 + 2) = a3;
      *((float *)&v11 + 1) = v10;
      *((_QWORD *)&v11 + 1) = LODWORD(a3);
      v18 = v11;
      v19 = v13;
      *((float *)&v12 + 1) = v10;
      *((float *)&v12 + 2) = a3;
      v17 = v12;
      v14 = (_OWORD *)swift_allocObject();
      v14[1] = v20;
      v14[2] = v19;
      v14[3] = v18;
      v14[4] = v17;
      v14[5] = xmmword_226560080;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

void sub_22645BA5C(uint64_t a1, _QWORD **a2, uint64_t a3, float a4, float a5, float a6, float32x2_t a7, float a8, float a9, float a10)
{
  int64_t v10;
  float32x2_t v17;
  __float2 v18;
  _QWORD *v19;
  unint64_t v20;
  int32x4_t v21;
  __int128 v22;
  int32x4_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  _QWORD *v32;
  int32x4_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  int v40;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  __float2 v52;
  float32x2_t v53;
  __int128 v54;
  __int128 v55;
  int32x4_t v56;
  unint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int32x4_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  int32x4_t v80;
  __int128 v81;
  int32x4_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v86;
  uint64_t v87;
  __int128 v89;
  __int128 v90;
  float32x2_t v92;
  float32x2_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint64_t v96;

  v18 = __sincosf_stret(a4);
  v17.f32[0] = v18.__cosval;
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (HIDWORD(v20))
  {
    sub_22655D3DC();
    __break(1u);
    return;
  }
  v17.i32[1] = LODWORD(v18.__sinval);
  v21.i64[1] = v87;
  *(float32x2_t *)v21.i8 = vadd_f32(vmul_n_f32(v17, a8), a7);
  v80 = v21;
  v81 = v21.u32[0];
  v78 = __PAIR64__(LODWORD(a9), v21.u32[0]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = sub_226486AE0(0, v20 + 1, 1, v19);
  v22 = v81;
  *((float *)&v22 + 1) = a10;
  v24 = v78;
  v23 = v80;
  DWORD2(v24) = v80.i32[1];
  v26 = v19[2];
  v25 = v19[3];
  v27 = v25 >> 1;
  v28 = v26 + 1;
  if (v25 >> 1 <= v26)
  {
    v83 = v22;
    v79 = v24;
    v69 = sub_226486AE0((_QWORD *)(v25 > 1), v26 + 1, 1, v19);
    v24 = v79;
    v23 = v80;
    v22 = v83;
    v19 = v69;
    v25 = v69[3];
    v27 = v25 >> 1;
  }
  DWORD2(v22) = v23.i32[1];
  v19[2] = v28;
  *(_OWORD *)&v19[2 * v26 + 4] = v24;
  if (v27 < (uint64_t)(v26 + 2))
  {
    v84 = v22;
    v70 = sub_226486AE0((_QWORD *)(v25 > 1), v26 + 2, 1, v19);
    v23 = v80;
    v22 = v84;
    v19 = v70;
  }
  v19[2] = v26 + 2;
  *(_OWORD *)&v19[2 * v28 + 4] = v22;
  *(float32x2_t *)v23.i8 = vsub_f32(*(float32x2_t *)v23.i8, a7);
  v29 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
  *(_QWORD *)a1 = v19;
  v29.i32[0] = vadd_f32(v29, (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1)).u32[0];
  v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
  *(float32x2_t *)v23.i8 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)v23.i8, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]));
  v82 = vrev64q_s32(vzip1q_s32(v23, v23));
  v32 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v32 = sub_226486AE0(0, v32[2] + 1, 1, v32);
  v33 = vtrn2q_s32(v82, (int32x4_t)0);
  v35 = v32[2];
  v34 = v32[3];
  v36 = v34 >> 1;
  v37 = (char *)(v35 + 1);
  if (v34 >> 1 <= v35)
  {
    v82 = v33;
    v71 = sub_226486AE0((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
    v33 = v82;
    v32 = v71;
    v34 = v71[3];
    v36 = v34 >> 1;
  }
  v32[2] = v37;
  *(int32x4_t *)&v32[2 * v35 + 4] = v33;
  v38 = v35 + 2;
  if (v36 < (uint64_t)(v35 + 2))
  {
    v82 = v33;
    v72 = sub_226486AE0((_QWORD *)(v34 > 1), v35 + 2, 1, v32);
    v33 = v82;
    v32 = v72;
  }
  v32[2] = v38;
  v39 = (unint64_t)&v32[2 * (_QWORD)v37];
  *(int32x4_t *)(v39 + 32) = v33;
  *a2 = v32;
  v40 = v20 + 3;
  if (v20 >= 0xFFFFFFFD)
  {
    __break(1u);
  }
  else
  {
    v37 = *(char **)a3;
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    v38 = v10 + 6;
    if (!__OFADD__(v10, 6))
    {
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      v77 = a2;
      if (!(_DWORD)isUniquelyReferenced_nonNull_native
        || (v39 = *((_QWORD *)v37 + 3), v42 = v39 >> 1, (uint64_t)(v39 >> 1) < v38))
      {
        if (v10 <= v38)
          v43 = v10 + 6;
        else
          v43 = v10;
        v37 = sub_226486AEC(isUniquelyReferenced_nonNull_native, v43, 1, v37);
        v39 = *((_QWORD *)v37 + 3);
        v42 = v39 >> 1;
      }
      v82.i64[0] = a1;
      LODWORD(a2) = v20 + 2;
      v10 = *((_QWORD *)v37 + 2);
      v38 = v10 + 1;
      a1 = a3;
      if (v42 > v10)
        goto LABEL_23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_46:
  v37 = sub_226486AEC((char *)(v39 > 1), v38, 1, v37);
  v39 = *((_QWORD *)v37 + 3);
  v42 = v39 >> 1;
LABEL_23:
  *((_QWORD *)v37 + 2) = v38;
  *(_DWORD *)&v37[4 * v10 + 32] = v20;
  v44 = v10 + 2;
  if ((uint64_t)v42 < v10 + 2)
    v37 = sub_226486AEC((char *)(v39 > 1), v10 + 2, 1, v37);
  *((_QWORD *)v37 + 2) = v44;
  *(_DWORD *)&v37[4 * v38 + 32] = (_DWORD)a2;
  v45 = *((_QWORD *)v37 + 3);
  v46 = v10 + 3;
  if (v10 + 3 > (uint64_t)(v45 >> 1))
    v37 = sub_226486AEC((char *)(v45 > 1), v10 + 3, 1, v37);
  *((_QWORD *)v37 + 2) = v46;
  *(_DWORD *)&v37[4 * v44 + 32] = v40;
  v47 = *((_QWORD *)v37 + 3);
  v48 = v10 + 4;
  if (v10 + 4 > (uint64_t)(v47 >> 1))
    v37 = sub_226486AEC((char *)(v47 > 1), v10 + 4, 1, v37);
  *((_QWORD *)v37 + 2) = v48;
  *(_DWORD *)&v37[4 * v46 + 32] = v20;
  v49 = *((_QWORD *)v37 + 3);
  v50 = v10 + 5;
  if (v10 + 5 > (uint64_t)(v49 >> 1))
    v37 = sub_226486AEC((char *)(v49 > 1), v10 + 5, 1, v37);
  *((_QWORD *)v37 + 2) = v50;
  *(_DWORD *)&v37[4 * v48 + 32] = v40;
  v51 = *((_QWORD *)v37 + 3);
  if (v10 + 6 > (uint64_t)(v51 >> 1))
    v37 = sub_226486AEC((char *)(v51 > 1), v10 + 6, 1, v37);
  *((_QWORD *)v37 + 2) = v10 + 6;
  *(_DWORD *)&v37[4 * v50 + 32] = v20 + 1;
  *(_QWORD *)a1 = v37;
  if (a5 == a6)
  {
    v52 = __sincosf_stret(a5);
    v53 = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v52.__sinval), LODWORD(v52.__cosval)), a8), a7);
    v54 = __PAIR64__(LODWORD(a10), v53.u32[0]);
    v55 = v53.u32[0];
    *((float *)&v55 + 1) = a9;
    DWORD2(v55) = v53.i32[1];
    v56.i64[1] = v96;
    v58 = v19[2];
    v57 = v19[3];
    v59 = v57 >> 1;
    v60 = v58 + 1;
    if (v57 >> 1 <= v58)
    {
      v89 = __PAIR64__(LODWORD(a10), v53.u32[0]);
      v92 = v53;
      v86 = v55;
      v73 = sub_226486AE0((_QWORD *)(v57 > 1), v58 + 1, 1, v19);
      v55 = v86;
      v54 = v89;
      v53 = v92;
      v19 = v73;
      v57 = v73[3];
      v59 = v57 >> 1;
    }
    DWORD2(v54) = v53.i32[1];
    v19[2] = v60;
    *(_OWORD *)&v19[2 * v58 + 4] = v55;
    if (v59 < (uint64_t)(v58 + 2))
    {
      v90 = v54;
      v93 = v53;
      v74 = sub_226486AE0((_QWORD *)(v57 > 1), v58 + 2, 1, v19);
      v54 = v90;
      v53 = v93;
      v19 = v74;
    }
    v19[2] = v58 + 2;
    *(_OWORD *)&v19[2 * v60 + 4] = v54;
    *(_QWORD *)v82.i64[0] = v19;
    *(float32x2_t *)v56.i8 = vsub_f32(v53, a7);
    v61 = vmul_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8);
    v61.i32[0] = vadd_f32(v61, (float32x2_t)vdup_lane_s32((int32x2_t)v61, 1)).u32[0];
    v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    *(float32x2_t *)v56.i8 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)v56.i8, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]));
    v64 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v56, v56)), (int32x4_t)0);
    v66 = v32[2];
    v65 = v32[3];
    v67 = v65 >> 1;
    v68 = v66 + 1;
    if (v65 >> 1 <= v66)
    {
      v94 = v64;
      v75 = sub_226486AE0((_QWORD *)(v65 > 1), v66 + 1, 1, v32);
      v64 = v94;
      v32 = v75;
      v65 = v75[3];
      v67 = v65 >> 1;
    }
    v32[2] = v68;
    *(int32x4_t *)&v32[2 * v66 + 4] = v64;
    if (v67 < (uint64_t)(v66 + 2))
    {
      v95 = v64;
      v76 = sub_226486AE0((_QWORD *)(v65 > 1), v66 + 2, 1, v32);
      v64 = v95;
      v32 = v76;
    }
    v32[2] = v66 + 2;
    *(int32x4_t *)&v32[2 * v68 + 4] = v64;
    *v77 = v32;
  }
}

uint64_t sub_22645C0F0(uint64_t result, uint64_t a2, float32x2_t a3, float a4)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v19 = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v7 = 0;
      v9 = *(float *)(result + 16);
      v8 = *(float *)(result + 20);
      v10 = *(float *)(result + 24);
      v11 = *(float *)(result + 28);
      v12 = (float)a2;
      do
      {
        v13 = v7 + 1;
        sub_22645BA5C((uint64_t)&v19, &v18, (uint64_t)&v17, v9 + (float)((float)(v8 - v9) * (float)((float)v7 / v12)), v9 + (float)((float)(v8 - v9) * (float)((float)(v7 + 1) / v12)), v8, a3, a4, v10, v11);
        v7 = v13;
      }
      while (a2 != v13);
      v14 = v18;
      v15 = v19;
      v16 = v17;
    }
    else
    {
      v16 = MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = MEMORY[0x24BEE4AF8];
    }
    type metadata accessor for RoomCaptureMesh();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v15;
    *(_QWORD *)(result + 24) = v14;
    *(_QWORD *)(result + 32) = v16;
  }
  return result;
}

_QWORD *sub_22645C200(float32x2_t *a1, unint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float32x2_t v11;
  float v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  void (*v17)(char *, uint64_t);
  float v18;
  id v19;
  double v20;
  double v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t inited;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *result;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v75 = a4;
  v71 = a3;
  *(double *)&v78 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840958);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1].f32[0];
  type metadata accessor for CapturedRoom.Surface.Curve(0);
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  v18 = v16;
  v19 = objc_msgSend(v13, sel_radians);
  sub_22655BDD4();

  sub_22655BDC8();
  v21 = v20;
  v17(v10, v7);
  *(float *)&v21 = v21;
  v22 = vmul_n_f32((float32x2_t)0x3F000000BF000000, *(float *)&v78);
  type metadata accessor for CurvedElement();
  v23 = swift_allocObject();
  *(float *)(v23 + 16) = v18;
  *(_DWORD *)(v23 + 20) = LODWORD(v21);
  *(float32x2_t *)(v23 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA20;
  *(_QWORD *)(inited + 32) = v23;
  v84 = inited;
  sub_22655CEE4();
  v25 = a2;
  v26 = v84;
  if (a2 >> 62)
    goto LABEL_71;
  v27 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
LABEL_3:
  v73 = v23;
  if (v27)
  {
    v28 = 0;
    *(_QWORD *)&v78 = v25 & 0xFFFFFFFFFFFFFF8;
    v77 = v25 + 32;
    do
    {
      if ((v25 & 0xC000000000000001) != 0)
      {
        v29 = (float *)MEMORY[0x2276999E4](v28, v25);
        v30 = __OFADD__(v28++, 1);
        if (v30)
          goto LABEL_65;
      }
      else
      {
        if (v28 >= *(_QWORD *)(v78 + 16))
          goto LABEL_69;
        v29 = *(float **)(v77 + 8 * v28);
        swift_retain();
        v30 = __OFADD__(v28++, 1);
        if (v30)
        {
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          swift_retain();
          swift_bridgeObjectRetain();
          v27 = sub_22655D400();
          goto LABEL_3;
        }
      }
      v84 = MEMORY[0x24BEE4AF8];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        v31 = sub_22655D400();
        swift_bridgeObjectRelease();
        if (!v31)
          goto LABEL_5;
      }
      else
      {
        v31 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v31)
          goto LABEL_5;
      }
      if (v31 < 1)
        goto LABEL_67;
      if ((v26 & 0xC000000000000001) != 0)
      {
        v23 = 0;
        do
        {
          MEMORY[0x2276999E4](v23++, v26);
          v32 = sub_226446850(v29);
          sub_22646AA3C(v32);
          swift_unknownObjectRelease();
        }
        while (v31 != v23);
      }
      else
      {
        v23 = 0;
        do
        {
          ++v23;
          swift_retain();
          v33 = sub_226446850(v29);
          sub_22646AA3C(v33);
          swift_release();
        }
        while (v31 != v23);
      }
LABEL_5:
      swift_release();
      swift_bridgeObjectRelease();
      v26 = v84;
    }
    while (v28 != v27);
  }
  swift_bridgeObjectRelease();
  v83 = MEMORY[0x24BEE4AF8];
  v84 = MEMORY[0x24BEE4AF8];
  v82 = MEMORY[0x24BEE4AF8];
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = v73;
  if (v34)
  {
    v35 = 0;
    v74 = v26 & 0xC000000000000001;
    v70 = v26 & 0xFFFFFFFFFFFFFF8;
    v69 = v26 + 32;
    v36 = *(float *)&v71;
    v72 = v34;
    while (1)
    {
      if (v74)
      {
        v23 = MEMORY[0x2276999E4](v35, v26);
        v30 = __OFADD__(v35++, 1);
        if (v30)
          goto LABEL_66;
      }
      else
      {
        if (v35 >= *(_QWORD *)(v70 + 16))
          goto LABEL_70;
        v23 = *(_QWORD *)(v69 + 8 * v35);
        swift_retain();
        v30 = __OFADD__(v35++, 1);
        if (v30)
          goto LABEL_66;
      }
      *(_QWORD *)&v78 = v23;
      if ((v75 & 1) != 0)
      {
        v51 = MEMORY[0x24BEE4AF8];
        v80 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v81 = MEMORY[0x24BEE4AF8];
        v79 = MEMORY[0x24BEE4AF8];
        v53 = *(float *)(v23 + 16);
        v52 = *(float *)(v23 + 20);
        v54 = MEMORY[0x24BEE4AF8];
        v55 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (v53 < v52)
        {
          v56 = 0;
          v57 = *(float *)(v23 + 24);
          v58 = *(float *)(v23 + 28);
          while (1)
          {
            v59 = v53 + (float)(v36 * (float)v56);
            v60 = v59 + v36;
            v61 = (float)(v59 + v36) >= v52 ? v52 : v59 + v36;
            sub_22645BA5C((uint64_t)&v81, &v80, (uint64_t)&v79, v59, v61, v52, v11, v12, v57, v58);
            if (__OFADD__(v56, 1))
              break;
            ++v56;
            if (v60 >= v52)
            {
              v55 = v80;
              v51 = v81;
              v54 = v79;
              goto LABEL_58;
            }
          }
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
LABEL_58:
        v62 = v54;
        type metadata accessor for RoomCaptureMesh();
        v63 = (_QWORD *)swift_allocObject();
        v39 = v62;
        v63[2] = v51;
        v63[3] = v55;
        v63[4] = v62;
        v23 = *(_QWORD *)(v62 + 16);
        if (!v23)
        {
LABEL_59:
          v44 = MEMORY[0x24BEE4AF8];
          goto LABEL_29;
        }
      }
      else
      {
        v39 = *(_QWORD *)(sub_22645C0F0(v23, v71, v11, v12) + 32);
        v23 = *(_QWORD *)(v39 + 16);
        if (!v23)
          goto LABEL_59;
      }
      v76 = v35;
      v81 = MEMORY[0x24BEE4AF8];
      v77 = v39;
      swift_bridgeObjectRetain();
      sub_2264C7984(0, v23, 0);
      v40 = v77;
      v25 = v84;
      v41 = *(_QWORD *)(v84 + 16);
      if (HIDWORD(v41))
        goto LABEL_73;
      v42 = *(_DWORD *)(v77 + 32);
      v43 = v42 + v41;
      if (__CFADD__(v42, (_DWORD)v41))
        goto LABEL_68;
      v44 = v81;
      v46 = *(_QWORD *)(v81 + 16);
      v45 = *(_QWORD *)(v81 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_2264C7984(v45 > 1, v46 + 1, 1);
        v40 = v77;
        v44 = v81;
      }
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_DWORD *)(v44 + 4 * v46 + 32) = v43;
      if (--v23)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v47 = v46 + 9;
        v48 = (_DWORD *)(v40 + 36);
        while (!HIDWORD(v25))
        {
          v49 = *v48 + v25;
          if (__CFADD__(*v48, (_DWORD)v25))
          {
            __break(1u);
            goto LABEL_64;
          }
          v81 = v44;
          v50 = *(_QWORD *)(v44 + 24);
          if (v47 - 8 >= v50 >> 1)
          {
            sub_2264C7984(v50 > 1, v47 - 7, 1);
            v44 = v81;
          }
          *(_QWORD *)(v44 + 16) = v47 - 7;
          *(_DWORD *)(v44 + 4 * v47++) = v49;
          ++v48;
          if (!--v23)
            goto LABEL_28;
        }
LABEL_73:
        result = (_QWORD *)sub_22655D3DC();
        __break(1u);
        return result;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      v25 = v73;
      v34 = v72;
      v35 = v76;
LABEL_29:
      sub_22646A2B4(v44);
      v37 = swift_bridgeObjectRetain();
      sub_22646A170(v37);
      v38 = swift_bridgeObjectRetain();
      sub_22646A170(v38);
      swift_release();
      swift_release();
      if (v35 == v34)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v64 = v83;
        v65 = v84;
        v66 = v82;
        goto LABEL_62;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  v66 = MEMORY[0x24BEE4AF8];
  v64 = MEMORY[0x24BEE4AF8];
  v65 = MEMORY[0x24BEE4AF8];
LABEL_62:
  type metadata accessor for RoomCaptureMesh();
  result = (_QWORD *)swift_allocObject();
  result[2] = v65;
  result[3] = v64;
  result[4] = v66;
  return result;
}

uint64_t sub_22645C9EC(uint64_t a1, float a2)
{
  float32x2_t v2;
  float32x2_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x4_t v9;
  __int128 v10;
  unint64_t v11;
  float32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unsigned __int32 v17;
  unint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  unint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unsigned __int32 v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  float v40;
  __int128 v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  __int128 v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  float32x2_t *v52;
  unint64_t *v53;
  int64_t v54;
  int64_t v55;
  uint64_t inited;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t result;
  uint64_t v74;
  _QWORD *v75;
  __int128 v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  float32x4_t v81;
  uint64_t v82;
  _QWORD *v83;

  v4 = a1;
  if (a2 == 0.0)
  {
    swift_bridgeObjectRetain();
    return v4;
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_29;
  v7 = a1 + 32;
  swift_bridgeObjectRetain();
  v8 = 0;
  v3.i32[0] = 0;
  do
  {
    if (v8)
      v11 = v8;
    else
      v11 = v6;
    if (v11 > v6)
    {
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    v12 = *(float32x4_t *)(v7 + 16 * v8);
    v13 = v8 + 1;
    v14 = vsubq_f32(v12, *(float32x4_t *)(v7 + 16 * v11 - 16)).u64[0];
    v15.f32[0] = -*((float *)&v14 + 1);
    v15.i32[1] = v14;
    v16 = vmul_f32(v15, v15);
    v17 = vadd_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).u32[0];
    if (v6 - 1 == v8)
      v18 = 0;
    else
      v18 = v8 + 1;
    v19 = vrsqrte_f32((float32x2_t)v17);
    v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v17, vmul_f32(v19, v19)));
    LODWORD(v21) = vmul_f32(v20, vrsqrts_f32((float32x2_t)v17, vmul_f32(v20, v20))).u32[0];
    v79 = v12;
    v22 = vsubq_f32(*(float32x4_t *)(v7 + 16 * v18), v12).u64[0];
    v23.f32[0] = -*((float *)&v22 + 1);
    v23.i32[1] = v22;
    v24 = vmul_f32(v23, v23);
    v25 = vmul_n_f32(v15, v21);
    v26 = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
    v27 = vrsqrte_f32((float32x2_t)v26);
    v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26, vmul_f32(v27, v27)));
    v29 = vmul_n_f32(v23, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26, vmul_f32(v28, v28))).f32[0]);
    v30 = _simd_orient_vf2((simd_float2)v25, (simd_float2)v29);
    v2.i32[0] = atan2f(v30, vaddv_f32(vmul_f32(v25, v29)));
    if (fabsf(v2.f32[0]) >= 2.0944)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_226486AE0(0, v5[2] + 1, 1, v5);
      v37 = v5[2];
      v36 = v5[3];
      v38 = v36 >> 1;
      v39 = v37 + 1;
      if (v36 >> 1 <= v37)
      {
        v5 = sub_226486AE0((_QWORD *)(v36 > 1), v37 + 1, 1, v5);
        v36 = v5[3];
        v38 = v36 >> 1;
      }
      v40 = a2;
      v9 = v79;
      *(float32x2_t *)&v41 = vadd_f32(*(float32x2_t *)v79.f32, vmul_n_f32(v25, a2));
      *((_QWORD *)&v41 + 1) = v79.u32[2];
      v5[2] = v39;
      *(_OWORD *)&v5[2 * v37 + 4] = v41;
      v34 = v37 + 2;
      if (v38 < (uint64_t)(v37 + 2))
      {
        v43 = sub_226486AE0((_QWORD *)(v36 > 1), v37 + 2, 1, v5);
        v40 = a2;
        v9 = v79;
        v5 = v43;
      }
      v5[2] = v34;
      *(float32x4_t *)&v5[2 * v39 + 4] = v9;
      v42 = v5[3];
      v35 = v37 + 3;
      if ((uint64_t)(v37 + 3) > (uint64_t)(v42 >> 1))
      {
        v44 = sub_226486AE0((_QWORD *)(v42 > 1), v37 + 3, 1, v5);
        v40 = a2;
        v9 = v79;
        v5 = v44;
      }
      v32 = vmul_n_f32(v29, v40);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_226486AE0(0, v5[2] + 1, 1, v5);
      v31 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, v3), 0), (int8x8_t)vsub_f32(vsub_f32(0, v25), v29), (int8x8_t)vadd_f32(v25, v29));
      v32 = vmul_n_f32(v31, a2 / vaddv_f32(vmul_f32(v25, v31)));
      v34 = v5[2];
      v33 = v5[3];
      v35 = v34 + 1;
      if (v34 >= v33 >> 1)
        v5 = sub_226486AE0((_QWORD *)(v33 > 1), v34 + 1, 1, v5);
      v9 = v79;
    }
    *(float32x2_t *)&v10 = vadd_f32(*(float32x2_t *)v9.f32, v32);
    *((_QWORD *)&v10 + 1) = v9.u32[2];
    v5[2] = v35;
    *(_OWORD *)&v5[2 * v34 + 4] = v10;
    v8 = v13;
  }
  while (v6 != v13);
  swift_bridgeObjectRelease();
  v83 = v5;
LABEL_29:
  v45 = v5[2];
  if (!v45)
    return (uint64_t)v5;
  v46 = 0;
  while (1)
  {
    if (v46 >= v45)
      goto LABEL_74;
    v47 = v46;
    v48 = *(_OWORD *)&v5[2 * v46++ + 4];
    if (v46 == v45)
      v49 = 0;
    else
      v49 = v47 + 1;
    v75 = v5 + 4;
    v77 = *(_OWORD *)&v5[2 * v49 + 4];
    v80 = *(double *)&v48;
    type metadata accessor for CDTEdge();
    swift_initStackObject();
    v50 = sub_226495C8C(v80, *(double *)&v77);
    v51 = v5[2];
    if (v51 < v47)
      goto LABEL_75;
    v52 = (float32x2_t *)v50;
    if (v51 != v47)
      break;
LABEL_64:
    swift_release();
LABEL_65:
    v5 = v83;
    v45 = v83[2];
    if (v46 >= v45)
      return (uint64_t)v5;
  }
  if (v51)
  {
    v74 = v46;
    v53 = v5 + 2;
    v54 = v5[2];
    while (1)
    {
      if (v47 >= v54)
      {
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      v55 = v54 - 1;
      if (v54 - 1 >= *v53)
        goto LABEL_71;
      if (v54 % v51 >= *v53)
        goto LABEL_72;
      v78 = *(float32x4_t *)&v75[2 * (v54 % v51)];
      v81 = *(float32x4_t *)&v53[2 * v54];
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v81.i64[0];
      *(_QWORD *)(inited + 24) = v78.i64[0];
      *(_BYTE *)(inited + 32) = vmovn_s32(vceqq_f32(v81, v78)).u8[0] & (v81.f32[1] == v78.f32[1]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
      v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_22655FA10;
      *(_QWORD *)(v57 + 32) = v81.i64[0];
      *(_QWORD *)(v57 + 40) = v78.i64[0];
      v82 = v57;
      swift_bridgeObjectRetain();
      sub_22649532C(&v82);
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 40) = v82;
      if ((sub_226453E20(v52, 0.0001, *(float32x2_t *)v81.f32) & 1) == 0
        && (sub_226453E20(v52, 0.0001, *(float32x2_t *)v78.f32) & 1) == 0)
      {
        v58 = v52[2];
        v59 = v52[3];
        v60 = v78.f32[1] - v58.f32[1];
        v61 = (float)(v78.f32[1] - v58.f32[1]) * (float)(v81.f32[0] - v58.f32[0]);
        v62 = v78.f32[0] - v58.f32[0];
        v63 = (float)(v81.f32[1] - v58.f32[1]) * (float)(v78.f32[0] - v58.f32[0]);
        v64 = vabds_f32(v61, v63);
        v65 = (float)(v78.f32[1] - v59.f32[1]) * (float)(v81.f32[0] - v59.f32[0]);
        v66 = (float)(v81.f32[1] - v59.f32[1]) * (float)(v78.f32[0] - v59.f32[0]);
        if (vabds_f32(v65, v66) >= 1.4211e-14)
        {
          v67 = v61 - v63;
          if ((float)(v65 - v66) <= 0.0)
          {
            if (v64 >= 1.4211e-14 && v67 <= 0.0)
              goto LABEL_40;
          }
          else if (v64 >= 1.4211e-14 && v67 > 0.0)
          {
            goto LABEL_40;
          }
        }
        else if (v64 < 1.4211e-14)
        {
          goto LABEL_40;
        }
        v59.f32[0] = vsub_f32(v59, v58).f32[0];
        v68 = (float)(v81.f32[1] - v58.f32[1]) * v59.f32[0];
        v69 = (float)(v81.f32[0] - v58.f32[0]) * (float)(v59.f32[1] - v58.f32[1]);
        v58.f32[0] = vabds_f32(v68, v69);
        v70 = v60 * v59.f32[0];
        v71 = v62 * (float)(v59.f32[1] - v58.f32[1]);
        if (vabds_f32(v60 * v59.f32[0], v71) < 1.4211e-14)
        {
          if (v58.f32[0] >= 1.4211e-14)
            goto LABEL_62;
        }
        else
        {
          v72 = v68 - v69;
          if ((float)(v70 - v71) <= 0.0)
          {
            if (v58.f32[0] < 1.4211e-14 || v72 > 0.0)
            {
LABEL_62:
              v46 = v74;
              if (v54 <= v74)
                goto LABEL_77;
              sub_226509CE4(v74, v54);
              swift_release();
              goto LABEL_64;
            }
          }
          else if (v58.f32[0] < 1.4211e-14 || v72 <= 0.0)
          {
            goto LABEL_62;
          }
        }
      }
LABEL_40:
      swift_release();
      --v54;
      if (v47 == v55)
      {
        swift_release();
        v46 = v74;
        goto LABEL_65;
      }
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_22645D070(unint64_t a1, double a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  float v20;
  char *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float v47;
  __int128 v48;
  float v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;

  *(float *)&v44 = a3;
  v9 = a1;
  v10 = MEMORY[0x24BEE4AF8];
  v53 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_22655D400();
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_18;
  }
  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_64;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v11; ++i)
    {
      if ((*(_BYTE *)(MEMORY[0x2276999E4](i, v9) + 48) & 4) != 0)
      {
        v13 = swift_retain();
        MEMORY[0x227699594](v13);
        if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    for (j = 0; j != v11; ++j)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 8 * j + 32) + 48) & 4) != 0)
      {
        v15 = swift_retain_n();
        MEMORY[0x227699594](v15);
        if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        swift_release();
      }
    }
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v7 = -0.5;
  v52 = v10;
  sub_226459464((uint64_t *)&v53);
  v9 = v53;
  v4 = v53 >> 62;
  if (v53 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    v16 = sub_22655D400();
  }
  else
  {
    v16 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v6 = v7 * *(float *)&a2;
  if (v16)
  {
    v5 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_66;
      }
      v17 = *(_QWORD *)(v9 + 32);
      swift_retain();
LABEL_24:
      result = swift_bridgeObjectRelease();
      if ((*(_BYTE *)(v17 + 48) & 1) == 0)
      {
        swift_release();
        goto LABEL_27;
      }
      LODWORD(v49) = *(_QWORD *)(v17 + 32);
      if (!v4)
      {
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_54;
        goto LABEL_72;
      }
LABEL_66:
      swift_bridgeObjectRetain();
      v33 = sub_22655D400();
      result = swift_bridgeObjectRelease();
      if (v33)
      {
        swift_bridgeObjectRetain();
        v34 = sub_22655D400();
        result = swift_bridgeObjectRelease();
        if (!v34)
        {
          __break(1u);
          goto LABEL_69;
        }
LABEL_54:
        if (!v5)
        {
          if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_73:
            __break(1u);
            return result;
          }
          result = swift_retain();
          if (!v4)
            goto LABEL_57;
          goto LABEL_70;
        }
LABEL_69:
        result = MEMORY[0x2276999E4](0, v9);
        if (!v4)
        {
LABEL_57:
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_58;
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
LABEL_70:
        swift_bridgeObjectRetain();
        v35 = sub_22655D400();
        result = swift_bridgeObjectRelease();
        if (v35)
        {
LABEL_58:
          sub_22650A2E8(0, 1);
          swift_release();
          swift_release();
          v9 = v53;
          if (!(v53 >> 62))
            goto LABEL_28;
LABEL_59:
          swift_bridgeObjectRetain();
          v19 = sub_22655D400();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        goto LABEL_71;
      }
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
LABEL_64:
    v17 = MEMORY[0x2276999E4](0, v9);
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  v49 = v6;
  if (v9 >> 62)
    goto LABEL_59;
LABEL_28:
  v19 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_29:
  v20 = vmuls_lane_f32(v7, *(float32x2_t *)&a2, 1);
  v21 = "";
  if (v19)
  {
    v22 = 0;
    v7 = a4 * 0.0;
    v37 = vadd_f32((float32x2_t)__PAIR64__(v44, LODWORD(v20)), (float32x2_t)COERCE_UNSIGNED_INT(*(float *)&v44 * 0.0));
    v39 = v20 + (float)(a4 * 0.0);
    v40 = *(float *)&v44 * 0.0;
    v38 = 0.0 - a4;
    v23 = 1;
LABEL_31:
    v36 = v23;
    v24 = v22;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x2276999E4](v24, v9);
        v22 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_60;
      }
      else
      {
        if (v24 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_61;
        v4 = *(_QWORD *)(v9 + 8 * v24 + 32);
        swift_retain();
        v22 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
      }
      v25 = *(_QWORD *)(v4 + 16);
      a2 = *(double *)(v4 + 32);
      HIDWORD(v26) = 0;
      *(float *)&v26 = v40 + *(float *)&v25;
      *(float32x2_t *)((char *)&v26 + 4) = v37;
      v44 = v26;
      HIDWORD(v27) = 0;
      *(float *)&v27 = v40 + v49;
      *(float32x2_t *)((char *)&v27 + 4) = v37;
      v42 = v27;
      HIDWORD(v27) = 0;
      *(float *)&v27 = v7 + v49;
      *((float *)&v27 + 1) = v39;
      *((float *)&v27 + 2) = 0.0 - a4;
      v50 = v27;
      HIDWORD(v27) = 0;
      *(float *)&v27 = v7 + *(float *)&v25;
      v41 = v27;
      type metadata accessor for RoomCaptureQuad();
      v28 = (_OWORD *)swift_allocObject();
      v28[1] = v44;
      v28[2] = v42;
      v28[3] = v50;
      v28[4] = v41;
      v28[5] = xmmword_2265600B0;
      MEMORY[0x227699594]();
      if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v29 = *(_DWORD *)(v4 + 48);
      swift_release();
      v49 = *(float *)&a2;
      if ((v29 & 2) != 0)
      {
        v23 = 0;
        if (v22 != v19)
          goto LABEL_31;
        swift_bridgeObjectRelease();
        return v52;
      }
      ++v24;
    }
    while (v22 != v19);
    swift_bridgeObjectRelease();
    v21 = "QuaternionSpring" + 16;
    if ((v36 & 1) != 0)
      goto LABEL_48;
  }
  else
  {
    v47 = v20;
    swift_bridgeObjectRelease();
    v37 = vadd_f32((float32x2_t)__PAIR64__(v44, LODWORD(v47)), (float32x2_t)COERCE_UNSIGNED_INT(*(float *)&v44 * 0.0));
    v7 = a4 * 0.0;
    v39 = v47 + (float)(a4 * 0.0);
    v40 = *(float *)&v44 * 0.0;
    v38 = 0.0 - a4;
LABEL_48:
    HIDWORD(v30) = 0;
    *(float *)&v30 = (float)(0.0 - v6) + v40;
    *(float32x2_t *)((char *)&v30 + 4) = v37;
    v48 = v30;
    HIDWORD(v31) = 0;
    *(float *)&v31 = v40 + v49;
    *(float32x2_t *)((char *)&v31 + 4) = v37;
    v45 = v31;
    *(float *)&v31 = v7 + v49;
    *((float *)&v31 + 1) = v39;
    *((_QWORD *)&v31 + 1) = LODWORD(v38);
    v51 = v31;
    HIDWORD(v31) = 0;
    *(float *)&v31 = (float)(0.0 - v6) + v7;
    v43 = v31;
    type metadata accessor for RoomCaptureQuad();
    v32 = (_OWORD *)swift_allocObject();
    v32[1] = v48;
    v32[2] = v45;
    v32[3] = v51;
    v32[4] = v43;
    v32[5] = *((_OWORD *)v21 + 11);
    MEMORY[0x227699594]();
    if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
  }
  return v52;
}

uint64_t sub_22645D780(unint64_t a1, double a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t result;
  int32x2_t v9;
  uint64_t v10;
  float v11;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t v14;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  __n128 v27;
  float32x4_t v28;
  __n128 v29;
  float32x4_t v30;
  float32x4_t v31;
  _OWORD *v32;
  uint64_t v33;
  float32x4_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  float32x2_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  _OWORD *v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float32x4_t v51;
  __n128 v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __n128 v57;
  float32x4_t v58;
  float32x4_t v59;
  _OWORD *v60;
  uint64_t v61;
  __n128 v62;
  float32x4_t v63;
  __n128 v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  __n128 v73;
  _OWORD *v74;
  unint64_t v75;
  float32x4_t v76;
  __n128 v77;
  __n128 v78;
  float32x4_t v79;
  float32x4_t v80;
  __n128 v81;
  _QWORD *v82;
  __int128 v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  __n128 v89;
  float32x4_t v90;
  __n128 v91;
  int v92;
  float v93;
  float32x4_t v94;
  float32x4_t v95;
  float v96;
  float32x4_t v97;
  float v98;
  float v99;
  float v100;
  __n128 v101;
  float32x4_t v102;
  float v103;
  float v104;
  float v105;
  float32x4_t v106;
  float v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float v119;
  float32x4_t v120;
  float32x4_t v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float v134;
  float v135;
  float v136;
  float v137;
  __int32 v138;
  float v139;
  __int32 v140;
  unint64_t v141;

  v141 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_22655D400();
    v7 = result;
    if (result)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease();
    v11 = a3 * 0.0;
    v65 = a3 + 0.0;
    v67 = a4 * 0.0;
    v66 = 0.0 - a4;
    goto LABEL_35;
  }
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_34;
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v10 = 0;
    v11 = a3 * 0.0;
    v139 = a3 + 0.0;
    *(float *)v9.i32 = a4 * 0.0;
    v134 = a4 * 0.0;
    v137 = 0.0 - a4;
    v12 = (float32x2_t)vdup_lane_s32(v9, 0);
    do
    {
      v13 = MEMORY[0x2276999E4](v10, a1);
      v14 = *(float32x2_t *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 32);
      v16 = v14.f32[1];
      v104 = v11 + v14.f32[1];
      v107 = v14.f32[0];
      if ((*(_BYTE *)(v13 + 48) & 4) != 0)
      {
        v26.i32[3] = 0;
        v26.f32[0] = v11 + *(float *)&v15;
        v28 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + *(float *)&v15);
        v28.f32[1] = v11 + v14.f32[1];
        v23 = a3 + 0.0;
        v28.f32[2] = a3 + 0.0;
        v25 = a4 * 0.0;
        v27.n128_u32[3] = 0;
        v27.n128_f32[0] = v134 + *(float *)&v15;
        v22 = (float32x4_t)COERCE_UNSIGNED_INT(v134 + *(float *)&v15);
        v99 = v134 + v16;
        v22.f32[1] = v134 + v16;
        v24 = 0.0 - a4;
        v22.f32[2] = 0.0 - a4;
      }
      else
      {
        v17.i32[3] = 0;
        v17.f32[0] = v11 + v14.f32[0];
        v17.f32[1] = v11 + v14.f32[1];
        v17.f32[2] = a3 + 0.0;
        v87 = v17;
        v17.i32[3] = 0;
        v17.f32[0] = v11 + *(float *)&v15;
        v128 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + *(float *)&v15);
        v17.f32[1] = v11 + v14.f32[1];
        v17.f32[2] = a3 + 0.0;
        v114 = v17;
        v92 = HIDWORD(*(_QWORD *)(v13 + 32));
        v18.i32[3] = 0;
        v18.f32[0] = v134 + *(float *)&v15;
        *(float32x2_t *)&v19 = vadd_f32(v12, v14);
        v122 = (__n128)COERCE_UNSIGNED_INT(v134 + *(float *)&v15);
        v18.i32[1] = DWORD1(v19);
        v18.f32[2] = 0.0 - a4;
        v94 = v18;
        v103 = *((float *)&v19 + 1);
        *((_QWORD *)&v19 + 1) = LODWORD(v137);
        v84 = v19;
        type metadata accessor for RoomCaptureQuad();
        v20 = (_OWORD *)swift_allocObject();
        v20[1] = v87;
        v20[2] = v114;
        v20[3] = v94;
        v20[4] = v84;
        v20[5] = xmmword_2265600C0;
        MEMORY[0x227699594](v20, v21);
        if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v22 = v94;
        v99 = v103;
        v24 = 0.0 - a4;
        v23 = a3 + 0.0;
        v25 = a4 * 0.0;
        v27 = v122;
        v26 = v128;
        HIDWORD(v15) = v92;
        v28 = v114;
      }
      v26.f32[1] = v11 + *((float *)&v15 + 1);
      v26.f32[2] = v23;
      v129 = v26;
      v88 = v25 + *((float *)&v15 + 1);
      v27.n128_f32[1] = v25 + *((float *)&v15 + 1);
      v27.n128_f32[2] = v24;
      v115 = v11 + *((float *)&v15 + 1);
      v123 = v27;
      v29 = sub_226481088(v28, v26, v27, v22);
      MEMORY[0x227699594](v29);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v30.i32[3] = 0;
      v30.f32[0] = v11 + v107;
      v95 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v107);
      v30.f32[1] = v115;
      v30.f32[2] = a3 + 0.0;
      v116 = v30;
      v31.i32[3] = 0;
      v31.f32[0] = v134 + v107;
      v89 = (__n128)COERCE_UNSIGNED_INT(v134 + v107);
      v31.f32[1] = v88;
      v31.f32[2] = 0.0 - a4;
      v108 = v31;
      type metadata accessor for RoomCaptureQuad();
      v32 = (_OWORD *)swift_allocObject();
      v32[1] = v129;
      v32[2] = v116;
      v32[3] = v108;
      v32[4] = v123;
      v32[5] = xmmword_2265600B0;
      MEMORY[0x227699594](v32, v33);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v35 = v89;
      v34 = v95;
      v34.f32[1] = v104;
      v34.f32[2] = a3 + 0.0;
      v35.n128_f32[1] = v99;
      v35.n128_f32[2] = 0.0 - a4;
      v36 = sub_226481088(v116, v34, v35, v108);
      MEMORY[0x227699594](v36);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      ++v10;
      sub_22655CF08();
      sub_22655CEE4();
      swift_unknownObjectRelease();
    }
    while (v7 != v10);
  }
  else
  {
    v37 = 0;
    v11 = a3 * 0.0;
    v139 = a3 + 0.0;
    *(float *)v9.i32 = a4 * 0.0;
    v134 = a4 * 0.0;
    v137 = 0.0 - a4;
    v38 = (float32x2_t)vdup_lane_s32(v9, 0);
    do
    {
      v39 = *(float32x2_t **)(a1 + 8 * v37 + 32);
      v40 = v39[2];
      v41 = v39[4];
      v100 = v40.f32[0];
      v105 = v11 + v40.f32[1];
      v93 = v41.f32[1];
      if ((v39[6].i8[0] & 4) != 0)
      {
        v55.i32[3] = 0;
        v55.f32[0] = v11 + v41.f32[0];
        v131 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v41.f32[0]);
        v55.f32[1] = v11 + v40.f32[1];
        v55.f32[2] = a3 + 0.0;
        v56.i32[3] = 0;
        v56.f32[0] = v134 + v41.f32[0];
        v118 = v55;
        v125 = (__n128)COERCE_UNSIGNED_INT(v134 + v41.f32[0]);
        v96 = v134 + v40.f32[1];
        v56.f32[1] = v134 + v40.f32[1];
        v56.f32[2] = 0.0 - a4;
        v110 = v56;
        swift_retain();
        v47 = v93;
        v54 = v110;
        v53 = v118;
        v50 = a4 * 0.0;
        v49 = 0.0 - a4;
        v52 = v125;
        v51 = v131;
        v48 = a3 + 0.0;
      }
      else
      {
        v42.i32[3] = 0;
        v42.f32[0] = v11 + v40.f32[0];
        v42.f32[1] = v11 + v40.f32[1];
        v42.f32[2] = a3 + 0.0;
        v86 = v42;
        v42.i32[3] = 0;
        v42.f32[0] = v11 + v41.f32[0];
        v130 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v41.f32[0]);
        v42.f32[1] = v11 + v40.f32[1];
        v42.f32[2] = a3 + 0.0;
        v43.i32[3] = 0;
        v43.f32[0] = v134 + v41.f32[0];
        *(float32x2_t *)&v44 = vadd_f32(v38, v40);
        v117 = v42;
        v124 = (__n128)COERCE_UNSIGNED_INT(v134 + v41.f32[0]);
        v43.i32[1] = DWORD1(v44);
        v43.f32[2] = 0.0 - a4;
        v109 = v43;
        v98 = *((float *)&v44 + 1);
        *((_QWORD *)&v44 + 1) = LODWORD(v137);
        v85 = v44;
        type metadata accessor for RoomCaptureQuad();
        v45 = (_OWORD *)swift_allocObject();
        v45[1] = v86;
        v45[2] = v117;
        v45[3] = v109;
        v45[4] = v85;
        v45[5] = xmmword_2265600C0;
        v46 = swift_retain();
        MEMORY[0x227699594](v46);
        if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22655CEF0();
        sub_22655CF08();
        sub_22655CEE4();
        v47 = v93;
        v96 = v98;
        v49 = 0.0 - a4;
        v48 = a3 + 0.0;
        v50 = a4 * 0.0;
        v52 = v124;
        v51 = v130;
        v54 = v109;
        v53 = v117;
      }
      v51.f32[1] = v11 + v47;
      v51.f32[2] = v48;
      v111 = v50 + v47;
      v119 = v11 + v47;
      v52.n128_f32[1] = v50 + v47;
      v52.n128_f32[2] = v49;
      v126 = v52;
      v132 = v51;
      v57 = sub_226481088(v53, v51, v52, v54);
      MEMORY[0x227699594](v57);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v58.i32[3] = 0;
      v58.f32[0] = v11 + v100;
      v90 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v100);
      v58.f32[1] = v119;
      v58.f32[2] = a3 + 0.0;
      v120 = v58;
      v59.i32[3] = 0;
      v59.f32[0] = v134 + v100;
      v101 = (__n128)COERCE_UNSIGNED_INT(v134 + v100);
      v59.f32[1] = v111;
      v59.f32[2] = 0.0 - a4;
      v112 = v59;
      type metadata accessor for RoomCaptureQuad();
      v60 = (_OWORD *)swift_allocObject();
      v60[1] = v132;
      v60[2] = v120;
      v60[3] = v112;
      v60[4] = v126;
      v60[5] = xmmword_2265600B0;
      MEMORY[0x227699594](v60, v61);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      v62 = v101;
      v63 = v90;
      v63.f32[1] = v105;
      v63.f32[2] = a3 + 0.0;
      v62.n128_f32[1] = v96;
      v62.n128_f32[2] = 0.0 - a4;
      v64 = sub_226481088(v120, v63, v62, v112);
      MEMORY[0x227699594](v64);
      if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      ++v37;
      sub_22655CF08();
      sub_22655CEE4();
      swift_release();
    }
    while (v7 != v37);
  }
  swift_bridgeObjectRelease();
  v66 = v137;
  v65 = v139;
  v67 = v134;
LABEL_35:
  v135 = v67;
  v138 = LODWORD(v66);
  v140 = LODWORD(v65);
  v68 = vmuls_lane_f32(-0.5, *(float32x2_t *)&a2, 1);
  v69.f32[0] = (float)(-0.5 * *(float *)&a2) + v11;
  v106 = (float32x4_t)v69.u32[0];
  v69.f32[1] = (float)(0.0 - v68) + v11;
  v69.i64[1] = LODWORD(v65);
  v133 = v69;
  v70 = 0.0 - (float)(-0.5 * *(float *)&a2);
  v71.f32[0] = v70 + v11;
  v97 = (float32x4_t)COERCE_UNSIGNED_INT(v70 + v11);
  v71.f32[1] = v69.f32[1];
  v71.i64[1] = LODWORD(v65);
  v72.f32[0] = v70 + v67;
  v91 = (__n128)COERCE_UNSIGNED_INT(v70 + v67);
  v72.f32[1] = (float)(0.0 - v68) + v67;
  v72.i64[1] = LODWORD(v66);
  v113 = v72;
  v121 = v71;
  v73.n128_f32[0] = (float)(-0.5 * *(float *)&a2) + v67;
  v102 = (float32x4_t)v73.n128_u32[0];
  v73.n128_f32[1] = v72.f32[1];
  v73.n128_u64[1] = LODWORD(v66);
  v127 = v73;
  type metadata accessor for RoomCaptureQuad();
  v74 = (_OWORD *)swift_allocObject();
  v74[1] = v133;
  v74[2] = v121;
  v74[3] = v113;
  v74[4] = v127;
  v74[5] = xmmword_2265600C0;
  MEMORY[0x227699594]();
  if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v75 = sub_22645D070(a1, a2, a3, a4);
  sub_22646AD58(v75);
  v77 = v91;
  v76 = v97;
  v76.f32[1] = v68 + v11;
  v76.i32[2] = v140;
  v136 = v68 + v135;
  v77.n128_f32[1] = v136;
  v77.n128_u32[2] = v138;
  v78 = sub_226481088(v121, v76, v77, v113);
  MEMORY[0x227699594](v78);
  if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v80 = v102;
  v79 = v106;
  v79.f32[1] = v68 + v11;
  v79.i32[2] = v140;
  v80.f32[1] = v136;
  v80.i32[2] = v138;
  v81 = sub_226481088(v79, v133, v127, v80);
  MEMORY[0x227699594](v81);
  if (*(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v82 = sub_2264CE9A0(v141);
  swift_bridgeObjectRelease();
  return (uint64_t)v82;
}

uint64_t sub_22645E1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22645E1F4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22645E234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_22645E278(float32x2_t *a1, char a2, __n128 a3, double a4, float32x2_t a5, double a6, double a7, __n128 a8, __n128 a9)
{
  float32x2_t v9;
  __n128 v10;
  __n128 v11;
  unsigned int v12;
  int8x8_t v13;
  __n128 v14;
  float32x2_t v15;
  float32x2_t v16;
  __int128 v17;
  char v18;
  float32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  int32x2_t v22;
  float32x2_t v23;
  _QWORD *result;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  __n128 v31;
  __int32 v32;
  unint64_t v33;
  int32x4_t v34;
  __n128 v35;
  __n128 v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  int32x4_t v41;
  int32x4_t *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unsigned __int32 v50;
  int v51;
  __n128 v52;
  unint64_t v53;
  __int32 v54;
  __n128 v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  int32x4_t v60;
  uint64_t v61;
  unint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  int64_t v155;
  unint64_t v156;
  int64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  int64_t v180;
  int64_t v181;
  int64_t v182;
  unint64_t v183;
  unint64_t v184;
  int64_t v185;
  int64_t v186;
  unint64_t v187;
  int64_t v188;
  unint64_t v189;
  int64_t v190;
  int64_t v191;
  int64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __n128 v200;
  __n128 v201;
  __int128 v202;
  int32x4_t v203;
  __n128 v204;
  __n128 v205;
  int32x4_t v206;
  __int128 v207;
  __n128 v208;
  __n128 v209;
  int32x4_t v210;
  int32x4_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  unint64_t v224;
  _QWORD *v225;

  *(double *)&v207 = a4;
  v206.i32[0] = a3.n128_u32[0];
  a3.n128_u32[0] = a1[3].u32[0];
  v9 = a1[1];
  a9.n128_u64[0] = (unint64_t)a1[2];
  v10 = a9;
  v10.n128_u32[0] = 1.0;
  v11 = a9;
  v11.n128_u32[0] = 2.0;
  if ((a2 & 1) != 0)
    v12 = -1;
  else
    v12 = 0;
  v13 = (int8x8_t)vdup_n_s32(v12);
  v11.n128_u64[0] = (unint64_t)vbsl_s8(v13, (int8x8_t)v11.n128_u64[0], (int8x8_t)v10.n128_u64[0]);
  a8.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(*a1, a5), (float32x2_t)vand_s8((int8x8_t)vmul_n_f32((float32x2_t)a9.n128_u64[0], a3.n128_f32[0]), v13));
  v204 = v11;
  v205 = a9;
  v14 = a9;
  v14.n128_u32[1] = v11.n128_u32[1];
  a3.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a8.n128_u64[0], vmul_n_f32((float32x2_t)v14.n128_u64[0], a3.n128_f32[0] * v11.n128_f32[0]));
  v10.n128_u64[0] = (unint64_t)a1[4];
  v15 = a1[5];
  v208 = a8;
  v209 = a3;
  v14.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a8.n128_u64[0], vmul_n_f32(v15, a1[6].f32[0]));
  v210 = (int32x4_t)v14;
  v203 = (int32x4_t)v10;
  sub_226503D48();
  if ((v18 & 1) != 0)
    return 0;
  *(float32x2_t *)&v17 = v16;
  v202 = v17;
  v19 = vsub_f32(v16, (float32x2_t)v208.n128_u64[0]);
  v20 = (int32x2_t)vmul_f32(v19, v19);
  v21 = vsub_f32(vadd_f32(vsub_f32((float32x2_t)v209.n128_u64[0], (float32x2_t)v208.n128_u64[0]), *(float32x2_t *)v210.i8), (float32x2_t)v208.n128_u64[0]);
  v22 = (int32x2_t)vmul_f32(v21, v21);
  v23 = vadd_f32((float32x2_t)vzip1_s32(v22, v20), (float32x2_t)vzip2_s32(v22, v20));
  if ((float)(4.0 * v23.f32[0]) < v23.f32[1])
    return 0;
  v25 = MEMORY[0x24BEE4AF8];
  v225 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_2264C1310(0, 4, 0);
  v26 = v225;
  v28 = v225[2];
  v27 = v225[3];
  v29 = v27 >> 1;
  v30 = v28 + 1;
  if (v27 >> 1 <= v28)
    goto LABEL_188;
  while (1)
  {
    v31 = v208;
    v31.n128_u32[3] = 0;
    v201 = v31;
    v32 = v206.i32[0];
    v31.n128_u32[1] = v206.i32[0];
    v31.n128_u32[2] = v208.n128_u32[1];
    v26[2] = v30;
    *(__n128 *)&v26[2 * v28 + 4] = v31;
    v33 = v28 + 2;
    v35 = v209;
    v34 = v210;
    if (v29 < (uint64_t)(v28 + 2))
    {
      sub_2264C1310(v27 > 1, v28 + 2, 1);
      v32 = v206.i32[0];
      v35 = v209;
      v34 = v210;
      v26 = v225;
    }
    v36 = v35;
    v36.n128_u32[3] = 0;
    v200 = v36;
    v36.n128_u32[1] = v32;
    v36.n128_u32[2] = v35.n128_u32[1];
    v26[2] = v33;
    *(__n128 *)&v26[2 * v30 + 4] = v36;
    v37 = v26[3];
    v38 = v28 + 3;
    if ((uint64_t)(v28 + 3) > (uint64_t)(v37 >> 1))
    {
      sub_2264C1310(v37 > 1, v28 + 3, 1);
      v32 = v206.i32[0];
      v34 = v210;
      v26 = v225;
    }
    v39 = v202;
    HIDWORD(v39) = 0;
    v199 = v39;
    DWORD1(v39) = v32;
    DWORD2(v39) = DWORD1(v202);
    v26[2] = v38;
    *(_OWORD *)&v26[2 * v33 + 4] = v39;
    v40 = v26[3];
    if ((uint64_t)(v28 + 4) > (uint64_t)(v40 >> 1))
    {
      sub_2264C1310(v40 > 1, v28 + 4, 1);
      v32 = v206.i32[0];
      v34 = v210;
      v26 = v225;
    }
    v41 = v34;
    v41.i32[3] = 0;
    v206 = v41;
    v41.i32[1] = v32;
    v41.i32[2] = v34.i32[1];
    v26[2] = v28 + 4;
    v42 = (int32x4_t *)(v26 + 4);
    *(int32x4_t *)&v26[2 * v38 + 4] = v41;
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_255849BA0);
    v44 = sub_22655CEFC();
    *(_QWORD *)(v44 + 16) = 4;
    *(_OWORD *)(v44 + 32) = xmmword_2265600B0;
    *(_OWORD *)(v44 + 48) = xmmword_2265600B0;
    *(_OWORD *)(v44 + 64) = xmmword_2265600B0;
    *(_OWORD *)(v44 + 80) = xmmword_2265600B0;
    v225 = (_QWORD *)v25;
    sub_2264C1310(0, 4, 0);
    v45 = v25;
    v47 = *(_QWORD *)(v25 + 16);
    v46 = *(_QWORD *)(v25 + 24);
    v48 = v46 >> 1;
    v49 = v47 + 1;
    if (v46 >> 1 <= v47)
    {
      sub_2264C1310(v46 > 1, v47 + 1, 1);
      v45 = v25;
      v46 = *(_QWORD *)(v25 + 24);
      v48 = v46 >> 1;
    }
    v50 = v209.n128_u32[1];
    v51 = v207;
    v52 = v201;
    v52.n128_u32[1] = v207;
    v52.n128_u32[2] = v208.n128_u32[1];
    *(_QWORD *)(v45 + 16) = v49;
    *(__n128 *)(v45 + 16 * v47 + 32) = v52;
    v53 = v47 + 2;
    v54 = v210.i32[1];
    if (v48 < (uint64_t)(v47 + 2))
    {
      sub_2264C1310(v46 > 1, v47 + 2, 1);
      v50 = v209.n128_u32[1];
      v54 = v210.i32[1];
      v51 = v207;
      v45 = v25;
    }
    v55 = v200;
    v55.n128_u32[1] = v51;
    v55.n128_u32[2] = v50;
    *(_QWORD *)(v45 + 16) = v53;
    *(__n128 *)(v45 + 16 * v49 + 32) = v55;
    v56 = *(_QWORD *)(v45 + 24);
    v28 = v47 + 3;
    if ((uint64_t)(v47 + 3) > (uint64_t)(v56 >> 1))
    {
      sub_2264C1310(v56 > 1, v47 + 3, 1);
      v54 = v210.i32[1];
      v51 = v207;
      v45 = v25;
    }
    v57 = v199;
    DWORD1(v57) = v51;
    DWORD2(v57) = DWORD1(v202);
    *(_QWORD *)(v45 + 16) = v28;
    *(_OWORD *)(v45 + 16 * v53 + 32) = v57;
    v58 = *(_QWORD *)(v45 + 24);
    v59 = v47 + 4;
    if ((uint64_t)(v47 + 4) > (uint64_t)(v58 >> 1))
    {
      sub_2264C1310(v58 > 1, v47 + 4, 1);
      v54 = v210.i32[1];
      v51 = v207;
      v45 = v25;
    }
    v60 = v206;
    v60.i32[1] = v51;
    v60.i32[2] = v54;
    *(_QWORD *)(v45 + 16) = v59;
    *(int32x4_t *)(v45 + 16 * v28 + 32) = v60;
    v61 = sub_22655CEFC();
    *(_QWORD *)(v61 + 16) = 4;
    *(_OWORD *)(v61 + 32) = xmmword_2265600C0;
    *(_OWORD *)(v61 + 48) = xmmword_2265600C0;
    *(_OWORD *)(v61 + 64) = xmmword_2265600C0;
    *(_OWORD *)(v61 + 80) = xmmword_2265600C0;
    v62 = v26[2];
    if (!v62)
    {
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
      goto LABEL_195;
    }
    if (v62 == 1)
      goto LABEL_190;
    v62 = *(_QWORD *)(v45 + 16);
    if (v62 < 2)
      goto LABEL_191;
    v47 = v61;
    v206 = *v42;
    v207 = *((_OWORD *)v26 + 3);
    v63 = *(int32x4_t *)(v45 + 32);
    v208 = *(__n128 *)(v45 + 48);
    v209 = (__n128)v63;
    *(float32x2_t *)v63.i8 = vsub_f32(0, v9);
    v210 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v63, v63)), (int32x4_t)0);
    v64 = sub_22655CEFC();
    *(_QWORD *)(v64 + 16) = 4;
    *(int32x4_t *)(v64 + 32) = v210;
    *(int32x4_t *)(v64 + 48) = v210;
    *(int32x4_t *)(v64 + 64) = v210;
    *(int32x4_t *)(v64 + 80) = v210;
    v62 = v26[2];
    if (v62 < 3)
      goto LABEL_192;
    v62 = *(_QWORD *)(v45 + 16);
    if (v62 < 3)
      goto LABEL_193;
    v42 = (int32x4_t *)v64;
    v199 = *((_OWORD *)v26 + 3);
    v200 = *((__n128 *)v26 + 4);
    v201 = *(__n128 *)(v45 + 64);
    v202 = *(_OWORD *)(v45 + 48);
    v65.i32[1] = 0;
    v65.i32[3] = 0;
    *(float *)v65.i32 = 0.0 - v205.n128_f32[0];
    *(float *)&v65.i32[2] = 0.0 - v204.n128_f32[1];
    v210 = v65;
    v66 = sub_22655CEFC();
    *(_QWORD *)(v66 + 16) = 4;
    *(int32x4_t *)(v66 + 32) = v210;
    *(int32x4_t *)(v66 + 48) = v210;
    *(int32x4_t *)(v66 + 64) = v210;
    *(int32x4_t *)(v66 + 80) = v210;
    v62 = v26[2];
    if (v62 < 4)
      goto LABEL_194;
    v62 = *(_QWORD *)(v45 + 16);
    if (v62 >= 4)
    {
      v59 = v66;
      v197 = *((_OWORD *)v26 + 4);
      v198 = *((_OWORD *)v26 + 5);
      v67 = *(int32x4_t *)(v45 + 64);
      v204 = *(__n128 *)(v45 + 80);
      v205 = (__n128)v67;
      *(float32x2_t *)v67.i8 = vsub_f32(0, v15);
      v211 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v67, v67)), (int32x4_t)0);
      v28 = sub_22655CEFC();
      *(_QWORD *)(v28 + 16) = 4;
      *(int32x4_t *)(v28 + 32) = v211;
      *(int32x4_t *)(v28 + 48) = v211;
      *(int32x4_t *)(v28 + 64) = v211;
      *(int32x4_t *)(v28 + 80) = v211;
      v193 = *((_OWORD *)v26 + 5);
      v194 = *((_OWORD *)v26 + 2);
      v195 = *(_OWORD *)(v45 + 32);
      v210 = vtrn2q_s32(vzip1q_s32(v203, v203), (int32x4_t)0);
      v203 = *(int32x4_t *)(v45 + 80);
      v68 = sub_22655CEFC();
      *(_QWORD *)(v68 + 16) = 4;
      *(int32x4_t *)(v68 + 32) = v210;
      *(int32x4_t *)(v68 + 48) = v210;
      *(int32x4_t *)(v68 + 64) = v210;
      *(int32x4_t *)(v68 + 80) = v210;
      v196 = v68;
      v224 = v44;
      v225 = v26;
      v212 = v25;
      v223 = &unk_24EDDECF8;
      sub_2264C7984(0, 6, 0);
      if (HIDWORD(v26[2]))
        goto LABEL_214;
      v43 = v26[2];
      v69 = v25;
      v25 = *(_QWORD *)(v25 + 16);
      v62 = *(_QWORD *)(v212 + 24);
      v44 = v25 + 1;
      if (v25 < v62 >> 1)
        goto LABEL_31;
      goto LABEL_196;
    }
LABEL_195:
    __break(1u);
LABEL_196:
    sub_2264C7984(v62 > 1, v44, 1);
    v69 = v212;
LABEL_31:
    *(_QWORD *)(v69 + 16) = v44;
    *(_DWORD *)(v69 + 4 * v25 + 32) = v43;
    v27 = v26[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_183;
    v212 = v69;
    v70 = *(_QWORD *)(v69 + 24);
    v71 = v25 + 2;
    if (v44 >= v70 >> 1)
    {
      v210.i64[0] = v25 + 2;
      sub_2264C7984(v70 > 1, v25 + 2, 1);
      v71 = v25 + 2;
      v69 = v212;
    }
    *(_QWORD *)(v69 + 16) = v71;
    *(_DWORD *)(v69 + 4 * v44 + 32) = v30;
    v27 = v26[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 1);
    if ((_DWORD)v27 == -1)
      goto LABEL_183;
    v212 = v69;
    v25 = *(_QWORD *)(v69 + 16);
    v72 = *(_QWORD *)(v69 + 24);
    v73 = v25 + 1;
    if (v25 >= v72 >> 1)
    {
      sub_2264C7984(v72 > 1, v25 + 1, 1);
      v69 = v212;
    }
    *(_QWORD *)(v69 + 16) = v73;
    *(_DWORD *)(v69 + 4 * v25 + 32) = v30;
    v27 = v26[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 3);
    if (v27 >= 0xFFFFFFFD)
      goto LABEL_183;
    v212 = v69;
    v74 = *(_QWORD *)(v69 + 24);
    v75 = v25 + 2;
    if (v73 >= v74 >> 1)
    {
      v210.i64[0] = v25 + 2;
      sub_2264C7984(v74 > 1, v25 + 2, 1);
      v75 = v25 + 2;
      v69 = v212;
    }
    *(_QWORD *)(v69 + 16) = v75;
    *(_DWORD *)(v69 + 4 * v73 + 32) = v30;
    v27 = v26[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
    {
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    v213 = v69;
    v77 = *(_QWORD *)(v69 + 16);
    v76 = *(_QWORD *)(v69 + 24);
    v78 = v77 + 1;
    if (v77 >= v76 >> 1)
    {
      sub_2264C7984(v76 > 1, v77 + 1, 1);
      v69 = v213;
    }
    *(_QWORD *)(v69 + 16) = v78;
    *(_DWORD *)(v69 + 4 * v77 + 32) = v30;
    if (HIDWORD(v26[2]))
      goto LABEL_214;
    v79 = v26[2];
    v214 = v69;
    v80 = *(_QWORD *)(v69 + 24);
    v81 = v77 + 2;
    if (v78 >= v80 >> 1)
    {
      v210.i64[0] = v77 + 2;
      sub_2264C7984(v80 > 1, v77 + 2, 1);
      v81 = v77 + 2;
      v69 = v214;
    }
    *(_QWORD *)(v69 + 16) = v81;
    *(_DWORD *)(v69 + 4 * v78 + 32) = v79;
    sub_22646A2B4(v69);
    sub_22646A170(v45);
    sub_22646A170(v47);
    v212 = MEMORY[0x24BEE4AF8];
    sub_2264C7984(0, 6, 0);
    v82 = v225;
    v83 = v225[2];
    if (HIDWORD(v83))
      goto LABEL_214;
    v25 = v83;
    v84 = v212;
    v86 = *(_QWORD *)(v212 + 16);
    v85 = *(_QWORD *)(v212 + 24);
    v87 = v86 + 1;
    if (v86 >= v85 >> 1)
    {
      sub_2264C7984(v85 > 1, v86 + 1, 1);
      v84 = v212;
    }
    *(_QWORD *)(v84 + 16) = v87;
    *(_DWORD *)(v84 + 4 * v86 + 32) = v25;
    v27 = v225[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_184;
    v212 = v84;
    v88 = *(_QWORD *)(v84 + 24);
    v89 = v86 + 2;
    if (v87 >= v88 >> 1)
    {
      sub_2264C7984(v88 > 1, v89, 1);
      v84 = v212;
    }
    *(_QWORD *)(v84 + 16) = v89;
    *(_DWORD *)(v84 + 4 * v87 + 32) = v30;
    v27 = v225[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 1);
    if ((_DWORD)v27 == -1)
      goto LABEL_184;
    v212 = v84;
    v91 = *(_QWORD *)(v84 + 16);
    v90 = *(_QWORD *)(v84 + 24);
    v92 = v91 + 1;
    if (v91 >= v90 >> 1)
    {
      sub_2264C7984(v90 > 1, v91 + 1, 1);
      v84 = v212;
    }
    *(_QWORD *)(v84 + 16) = v92;
    *(_DWORD *)(v84 + 4 * v91 + 32) = v30;
    v27 = v225[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 3);
    if (v27 >= 0xFFFFFFFD)
      goto LABEL_184;
    v212 = v84;
    v93 = *(_QWORD *)(v84 + 24);
    v94 = v91 + 2;
    if (v92 >= v93 >> 1)
    {
      sub_2264C7984(v93 > 1, v94, 1);
      v84 = v212;
    }
    *(_QWORD *)(v84 + 16) = v94;
    *(_DWORD *)(v84 + 4 * v92 + 32) = v30;
    v27 = v225[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_184;
    v215 = v84;
    v96 = *(_QWORD *)(v84 + 16);
    v95 = *(_QWORD *)(v84 + 24);
    v97 = v96 + 1;
    if (v96 >= v95 >> 1)
    {
      sub_2264C7984(v95 > 1, v96 + 1, 1);
      v84 = v215;
    }
    *(_QWORD *)(v84 + 16) = v97;
    *(_DWORD *)(v84 + 4 * v96 + 32) = v30;
    if (HIDWORD(v225[2]))
      goto LABEL_214;
    v98 = v225[2];
    v216 = v84;
    v99 = *(_QWORD *)(v84 + 24);
    v100 = v96 + 2;
    if (v97 >= v99 >> 1)
    {
      sub_2264C7984(v99 > 1, v100, 1);
      v84 = v216;
    }
    *(_QWORD *)(v84 + 16) = v100;
    *(_DWORD *)(v84 + 4 * v97 + 32) = v98;
    sub_22646A2B4(v84);
    v102 = v225[2];
    v103 = v102 + 4;
    v25 = MEMORY[0x24BEE4AF8];
    if (__OFADD__(v102, 4))
    {
      __break(1u);
LABEL_198:
      v82 = sub_226486AE0((_QWORD *)(v101 > 1), v103, 1, v82);
      v101 = v82[3];
      v105 = v101 >> 1;
      goto LABEL_80;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0
      || (v101 = v225[3], v105 = v101 >> 1, (uint64_t)(v101 >> 1) < v103))
    {
      if (v102 <= v103)
        v106 = v102 + 4;
      else
        v106 = v102;
      v82 = sub_226486AE0((_QWORD *)isUniquelyReferenced_nonNull_native, v106, 1, v225);
      v101 = v82[3];
      v105 = v101 >> 1;
    }
    v100 = v82[2];
    v103 = v100 + 1;
    if (v105 <= v100)
      goto LABEL_198;
LABEL_80:
    v82[2] = v103;
    *(int32x4_t *)&v82[2 * v100 + 4] = v206;
    v107 = v100 + 2;
    if ((uint64_t)v105 < (uint64_t)(v100 + 2))
      v82 = sub_226486AE0((_QWORD *)(v101 > 1), v100 + 2, 1, v82);
    v82[2] = v107;
    *(_OWORD *)&v82[2 * v103 + 4] = v207;
    v108 = v82[3];
    v109 = v100 + 3;
    if ((uint64_t)(v100 + 3) > (uint64_t)(v108 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v108 > 1), v100 + 3, 1, v82);
    v82[2] = v109;
    *(__n128 *)&v82[2 * v107 + 4] = v208;
    v110 = v82[3];
    if ((uint64_t)(v100 + 4) > (uint64_t)(v110 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v110 > 1), v100 + 4, 1, v82);
    v82[2] = v100 + 4;
    *(__n128 *)&v82[2 * v109 + 4] = v209;
    v225 = v82;
    sub_22646A170((uint64_t)v42);
    v212 = v25;
    sub_2264C7984(0, 6, 0);
    if (HIDWORD(v82[2]))
      goto LABEL_214;
    v111 = v82[2];
    v112 = v25;
    v114 = *(_QWORD *)(v25 + 16);
    v113 = *(_QWORD *)(v25 + 24);
    v115 = v114 + 1;
    if (v114 >= v113 >> 1)
    {
      sub_2264C7984(v113 > 1, v114 + 1, 1);
      v112 = v25;
    }
    *(_QWORD *)(v112 + 16) = v115;
    *(_DWORD *)(v112 + 4 * v114 + 32) = v111;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_185;
    v212 = v112;
    v116 = *(_QWORD *)(v112 + 24);
    v117 = v114 + 2;
    if (v115 >= v116 >> 1)
    {
      sub_2264C7984(v116 > 1, v117, 1);
      v112 = v212;
    }
    *(_QWORD *)(v112 + 16) = v117;
    *(_DWORD *)(v112 + 4 * v115 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 1);
    if ((_DWORD)v27 == -1)
      goto LABEL_185;
    v212 = v112;
    v119 = *(_QWORD *)(v112 + 16);
    v118 = *(_QWORD *)(v112 + 24);
    v120 = v119 + 1;
    if (v119 >= v118 >> 1)
    {
      sub_2264C7984(v118 > 1, v119 + 1, 1);
      v112 = v212;
    }
    *(_QWORD *)(v112 + 16) = v120;
    *(_DWORD *)(v112 + 4 * v119 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 3);
    if (v27 >= 0xFFFFFFFD)
      goto LABEL_185;
    v212 = v112;
    v121 = *(_QWORD *)(v112 + 24);
    v122 = v119 + 2;
    if (v120 >= v121 >> 1)
    {
      sub_2264C7984(v121 > 1, v122, 1);
      v112 = v212;
    }
    *(_QWORD *)(v112 + 16) = v122;
    *(_DWORD *)(v112 + 4 * v120 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_185;
    v217 = v112;
    v124 = *(_QWORD *)(v112 + 16);
    v123 = *(_QWORD *)(v112 + 24);
    v125 = v124 + 1;
    if (v124 >= v123 >> 1)
    {
      sub_2264C7984(v123 > 1, v124 + 1, 1);
      v112 = v217;
    }
    *(_QWORD *)(v112 + 16) = v125;
    *(_DWORD *)(v112 + 4 * v124 + 32) = v30;
    if (HIDWORD(v82[2]))
      goto LABEL_214;
    v126 = v82[2];
    v218 = v112;
    v127 = *(_QWORD *)(v112 + 24);
    v128 = v124 + 2;
    if (v125 >= v127 >> 1)
    {
      sub_2264C7984(v127 > 1, v128, 1);
      v112 = v218;
    }
    *(_QWORD *)(v112 + 16) = v128;
    *(_DWORD *)(v112 + 4 * v125 + 32) = v126;
    sub_22646A2B4(v112);
    v129 = v82[2];
    v130 = v129 + 4;
    if (__OFADD__(v129, 4))
    {
      __break(1u);
    }
    else
    {
      v131 = v82[3];
      v132 = v131 >> 1;
      if ((uint64_t)(v131 >> 1) >= v130)
        goto LABEL_110;
    }
    v190 = (uint64_t)v129 <= v130 ? v129 + 4 : v129;
    v82 = sub_226486AE0((_QWORD *)1, v190, 1, v82);
    v129 = v82[2];
    v131 = v82[3];
    v132 = v131 >> 1;
LABEL_110:
    v133 = v129 + 1;
    if (v132 <= v129)
    {
      v82 = sub_226486AE0((_QWORD *)(v131 > 1), v129 + 1, 1, v82);
      v131 = v82[3];
      v132 = v131 >> 1;
    }
    v82[2] = v133;
    *(_OWORD *)&v82[2 * v129 + 4] = v199;
    v134 = v129 + 2;
    if ((uint64_t)v132 < (uint64_t)(v129 + 2))
      v82 = sub_226486AE0((_QWORD *)(v131 > 1), v129 + 2, 1, v82);
    v82[2] = v134;
    *(__n128 *)&v82[2 * v133 + 4] = v200;
    v135 = v82[3];
    v136 = v129 + 3;
    if ((uint64_t)(v129 + 3) > (uint64_t)(v135 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v135 > 1), v129 + 3, 1, v82);
    v82[2] = v136;
    *(__n128 *)&v82[2 * v134 + 4] = v201;
    v137 = v82[3];
    if ((uint64_t)(v129 + 4) > (uint64_t)(v137 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v137 > 1), v129 + 4, 1, v82);
    v82[2] = v129 + 4;
    *(_OWORD *)&v82[2 * v136 + 4] = v202;
    v225 = v82;
    sub_22646A170(v59);
    v212 = v25;
    sub_2264C7984(0, 6, 0);
    if (HIDWORD(v82[2]))
      goto LABEL_214;
    v138 = v82[2];
    v139 = v25;
    v141 = *(_QWORD *)(v25 + 16);
    v140 = *(_QWORD *)(v25 + 24);
    v142 = v141 + 1;
    if (v141 >= v140 >> 1)
    {
      sub_2264C7984(v140 > 1, v141 + 1, 1);
      v139 = v25;
    }
    *(_QWORD *)(v139 + 16) = v142;
    *(_DWORD *)(v139 + 4 * v141 + 32) = v138;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_186;
    v212 = v139;
    v143 = *(_QWORD *)(v139 + 24);
    v144 = v141 + 2;
    if (v142 >= v143 >> 1)
    {
      sub_2264C7984(v143 > 1, v144, 1);
      v139 = v212;
    }
    *(_QWORD *)(v139 + 16) = v144;
    *(_DWORD *)(v139 + 4 * v142 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 1);
    if ((_DWORD)v27 == -1)
      goto LABEL_186;
    v212 = v139;
    v146 = *(_QWORD *)(v139 + 16);
    v145 = *(_QWORD *)(v139 + 24);
    v147 = v146 + 1;
    if (v146 >= v145 >> 1)
    {
      sub_2264C7984(v145 > 1, v146 + 1, 1);
      v139 = v212;
    }
    *(_QWORD *)(v139 + 16) = v147;
    *(_DWORD *)(v139 + 4 * v146 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 3);
    if (v27 >= 0xFFFFFFFD)
      goto LABEL_186;
    v212 = v139;
    v148 = *(_QWORD *)(v139 + 24);
    v149 = v146 + 2;
    if (v147 >= v148 >> 1)
    {
      sub_2264C7984(v148 > 1, v149, 1);
      v139 = v212;
    }
    *(_QWORD *)(v139 + 16) = v149;
    *(_DWORD *)(v139 + 4 * v147 + 32) = v30;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 >= 0xFFFFFFFE)
      goto LABEL_186;
    v219 = v139;
    v151 = *(_QWORD *)(v139 + 16);
    v150 = *(_QWORD *)(v139 + 24);
    v152 = v151 + 1;
    if (v151 >= v150 >> 1)
    {
      sub_2264C7984(v150 > 1, v151 + 1, 1);
      v139 = v219;
    }
    *(_QWORD *)(v139 + 16) = v152;
    *(_DWORD *)(v139 + 4 * v151 + 32) = v30;
    if (HIDWORD(v82[2]))
      goto LABEL_214;
    v153 = v82[2];
    v220 = v139;
    v154 = *(_QWORD *)(v139 + 24);
    v155 = v151 + 2;
    if (v152 >= v154 >> 1)
    {
      sub_2264C7984(v154 > 1, v155, 1);
      v139 = v220;
    }
    *(_QWORD *)(v139 + 16) = v155;
    *(_DWORD *)(v139 + 4 * v152 + 32) = v153;
    sub_22646A2B4(v139);
    v156 = v82[2];
    v157 = v156 + 4;
    if (__OFADD__(v156, 4))
    {
      __break(1u);
    }
    else
    {
      v158 = v82[3];
      v159 = v158 >> 1;
      if ((uint64_t)(v158 >> 1) >= v157)
        goto LABEL_142;
    }
    v191 = (uint64_t)v156 <= v157 ? v156 + 4 : v156;
    v82 = sub_226486AE0((_QWORD *)1, v191, 1, v82);
    v156 = v82[2];
    v158 = v82[3];
    v159 = v158 >> 1;
LABEL_142:
    v160 = v156 + 1;
    if (v159 <= v156)
    {
      v82 = sub_226486AE0((_QWORD *)(v158 > 1), v156 + 1, 1, v82);
      v158 = v82[3];
      v159 = v158 >> 1;
    }
    v82[2] = v160;
    *(_OWORD *)&v82[2 * v156 + 4] = v197;
    v161 = v156 + 2;
    if ((uint64_t)v159 < (uint64_t)(v156 + 2))
      v82 = sub_226486AE0((_QWORD *)(v158 > 1), v156 + 2, 1, v82);
    v82[2] = v161;
    *(_OWORD *)&v82[2 * v160 + 4] = v198;
    v162 = v82[3];
    v163 = v156 + 3;
    if ((uint64_t)(v156 + 3) > (uint64_t)(v162 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v162 > 1), v156 + 3, 1, v82);
    v82[2] = v163;
    *(__n128 *)&v82[2 * v161 + 4] = v204;
    v164 = v82[3];
    if ((uint64_t)(v156 + 4) > (uint64_t)(v164 >> 1))
      v82 = sub_226486AE0((_QWORD *)(v164 > 1), v156 + 4, 1, v82);
    v82[2] = v156 + 4;
    *(__n128 *)&v82[2 * v163 + 4] = v205;
    v225 = v82;
    sub_22646A170(v28);
    v212 = v25;
    sub_2264C7984(0, 6, 0);
    if (HIDWORD(v82[2]))
      goto LABEL_214;
    v165 = v82[2];
    v166 = v25;
    v168 = *(_QWORD *)(v25 + 16);
    v167 = *(_QWORD *)(v25 + 24);
    v28 = v168 + 1;
    if (v168 >= v167 >> 1)
    {
      sub_2264C7984(v167 > 1, v168 + 1, 1);
      v166 = v25;
    }
    *(_QWORD *)(v166 + 16) = v28;
    *(_DWORD *)(v166 + 4 * v168 + 32) = v165;
    v27 = v82[2];
    if (HIDWORD(v27))
      goto LABEL_214;
    v30 = (v27 + 2);
    if (v27 < 0xFFFFFFFE)
    {
      v212 = v166;
      v169 = *(_QWORD *)(v166 + 24);
      v170 = v168 + 2;
      if (v28 >= v169 >> 1)
      {
        sub_2264C7984(v169 > 1, v170, 1);
        v166 = v212;
      }
      *(_QWORD *)(v166 + 16) = v170;
      *(_DWORD *)(v166 + 4 * v28 + 32) = v30;
      v27 = v82[2];
      if (HIDWORD(v27))
        goto LABEL_214;
      v30 = (v27 + 1);
      if ((_DWORD)v27 != -1)
      {
        v212 = v166;
        v172 = *(_QWORD *)(v166 + 16);
        v171 = *(_QWORD *)(v166 + 24);
        v28 = v172 + 1;
        if (v172 >= v171 >> 1)
        {
          sub_2264C7984(v171 > 1, v172 + 1, 1);
          v166 = v212;
        }
        *(_QWORD *)(v166 + 16) = v28;
        *(_DWORD *)(v166 + 4 * v172 + 32) = v30;
        v27 = v82[2];
        if (HIDWORD(v27))
          goto LABEL_214;
        v30 = (v27 + 3);
        if (v27 < 0xFFFFFFFD)
        {
          v212 = v166;
          v173 = *(_QWORD *)(v166 + 24);
          v174 = v172 + 2;
          if (v28 >= v173 >> 1)
          {
            sub_2264C7984(v173 > 1, v174, 1);
            v166 = v212;
          }
          *(_QWORD *)(v166 + 16) = v174;
          *(_DWORD *)(v166 + 4 * v28 + 32) = v30;
          v27 = v82[2];
          if (HIDWORD(v27))
            goto LABEL_214;
          v30 = (v27 + 2);
          if (v27 < 0xFFFFFFFE)
            break;
        }
      }
    }
LABEL_187:
    __break(1u);
LABEL_188:
    sub_2264C1310(v27 > 1, v30, 1);
    v26 = v225;
    v27 = v225[3];
    v29 = v27 >> 1;
  }
  v221 = v166;
  v176 = *(_QWORD *)(v166 + 16);
  v175 = *(_QWORD *)(v166 + 24);
  v177 = v176 + 1;
  if (v176 >= v175 >> 1)
  {
    sub_2264C7984(v175 > 1, v176 + 1, 1);
    v166 = v221;
  }
  *(_QWORD *)(v166 + 16) = v177;
  *(_DWORD *)(v166 + 4 * v176 + 32) = v30;
  if (HIDWORD(v82[2]))
  {
LABEL_214:
    result = (_QWORD *)sub_22655D3DC();
    __break(1u);
    return result;
  }
  v178 = v82[2];
  v222 = v166;
  v179 = *(_QWORD *)(v166 + 24);
  v180 = v176 + 2;
  if (v177 >= v179 >> 1)
  {
    sub_2264C7984(v179 > 1, v180, 1);
    v166 = v222;
  }
  *(_QWORD *)(v166 + 16) = v180;
  *(_DWORD *)(v166 + 4 * v177 + 32) = v178;
  sub_22646A2B4(v166);
  v181 = v82[2];
  v182 = v181 + 4;
  if (__OFADD__(v181, 4))
  {
    __break(1u);
  }
  else
  {
    v183 = v82[3];
    v184 = v183 >> 1;
    if ((uint64_t)(v183 >> 1) >= v182)
      goto LABEL_174;
  }
  if (v181 <= v182)
    v192 = v181 + 4;
  else
    v192 = v181;
  v82 = sub_226486AE0((_QWORD *)1, v192, 1, v82);
  v181 = v82[2];
  v183 = v82[3];
  v184 = v183 >> 1;
LABEL_174:
  v185 = v181 + 1;
  if (v184 <= v181)
  {
    v82 = sub_226486AE0((_QWORD *)(v183 > 1), v181 + 1, 1, v82);
    v183 = v82[3];
    v184 = v183 >> 1;
  }
  v82[2] = v185;
  *(_OWORD *)&v82[2 * v181 + 4] = v193;
  v186 = v181 + 2;
  if ((uint64_t)v184 < v181 + 2)
    v82 = sub_226486AE0((_QWORD *)(v183 > 1), v181 + 2, 1, v82);
  v82[2] = v186;
  *(_OWORD *)&v82[2 * v185 + 4] = v194;
  v187 = v82[3];
  v188 = v181 + 3;
  if (v181 + 3 > (uint64_t)(v187 >> 1))
    v82 = sub_226486AE0((_QWORD *)(v187 > 1), v181 + 3, 1, v82);
  v82[2] = v188;
  *(_OWORD *)&v82[2 * v186 + 4] = v195;
  v189 = v82[3];
  if (v181 + 4 > (uint64_t)(v189 >> 1))
    v82 = sub_226486AE0((_QWORD *)(v189 > 1), v181 + 4, 1, v82);
  v82[2] = v181 + 4;
  *(int32x4_t *)&v82[2 * v188 + 4] = v203;
  sub_22646A170(v196);
  type metadata accessor for RoomCaptureMesh();
  result = (_QWORD *)swift_allocObject();
  result[2] = v82;
  result[3] = v224;
  result[4] = v223;
  return result;
}

uint64_t sub_22645F9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_22645FA04(unint64_t result)
{
  uint64_t v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_22645FA58(uint64_t a1, void (*a2)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  sub_2264C1310(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 32;
    do
    {
      a2(v5, *(__n128 *)(v6 + 16 * v5));
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
      {
        v11 = v7;
        sub_2264C1310(v8 > 1, v9 + 1, 1);
        v7 = v11;
      }
      ++v5;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      *(_OWORD *)(v12 + 16 * v9 + 32) = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_22645FB58(unint64_t result)
{
  uint64_t v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 24) + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_22645FBBC(uint64_t a1, char **a2, float a3, float a4, float a5, float a6, float32x2_t a7, float a8, float a9)
{
  char *v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  float sinval;
  float32x2_t v20;
  __float2 v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  _QWORD *v45;
  uint64_t result;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  float32x2_t v52;
  float v53;
  float v54;
  int64_t v55;
  __int128 v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  float v63;
  float v64;
  __int32 v65;
  float cosval;
  __int128 v68;
  __int128 v69;
  float32x2_t v71;

  v21 = __sincosf_stret(a3);
  v20.f32[0] = v21.__cosval;
  sinval = v21.__sinval;
  v22 = a8;
  v23 = a9;
  if (a3 < a4)
  {
    v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v25 = HIDWORD(v24);
    if (HIDWORD(v24))
    {
      result = sub_22655D3DC();
      __break(1u);
      return result;
    }
    v26 = v24 + 3;
    if (v24 >= 0xFFFFFFFD)
    {
      __break(1u);
    }
    else
    {
      v9 = *a2;
      v10 = *((_QWORD *)*a2 + 2);
      v11 = v10 + 6;
      if (!__OFADD__(v10, 6))
      {
        v64 = v21.__sinval;
        cosval = v21.__cosval;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)isUniquelyReferenced_nonNull_native
          || (v25 = *((_QWORD *)v9 + 3), v28 = v25 >> 1, (uint64_t)(v25 >> 1) < v11))
        {
          if (v10 <= v11)
            v29 = v10 + 6;
          else
            v29 = v10;
          v9 = sub_226486AEC(isUniquelyReferenced_nonNull_native, v29, 1, v9);
          v25 = *((_QWORD *)v9 + 3);
          v28 = v25 >> 1;
        }
        LODWORD(v11) = v24 + 1;
        v12 = *((_QWORD *)v9 + 2);
        v10 = v12 + 1;
        v20.i32[0] = LODWORD(v21.__cosval);
        sinval = v21.__sinval;
        if (v28 > v12)
          goto LABEL_12;
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_32:
    v57 = sub_226486AEC((char *)(v25 > 1), v10, 1, v9);
    sinval = v64;
    v20.f32[0] = cosval;
    v9 = v57;
    v25 = *((_QWORD *)v57 + 3);
    v28 = v25 >> 1;
LABEL_12:
    *((_QWORD *)v9 + 2) = v10;
    *(_DWORD *)&v9[4 * v12 + 32] = v24;
    v30 = v12 + 2;
    if ((uint64_t)v28 < (uint64_t)(v12 + 2))
    {
      v58 = sub_226486AEC((char *)(v25 > 1), v12 + 2, 1, v9);
      sinval = v64;
      v20.f32[0] = cosval;
      v9 = v58;
    }
    *((_QWORD *)v9 + 2) = v30;
    *(_DWORD *)&v9[4 * v10 + 32] = v11;
    v31 = *((_QWORD *)v9 + 3);
    v32 = v12 + 3;
    if ((uint64_t)(v12 + 3) > (uint64_t)(v31 >> 1))
    {
      v59 = sub_226486AEC((char *)(v31 > 1), v12 + 3, 1, v9);
      sinval = v64;
      v20.f32[0] = cosval;
      v9 = v59;
    }
    *((_QWORD *)v9 + 2) = v32;
    *(_DWORD *)&v9[4 * v30 + 32] = v26;
    v33 = *((_QWORD *)v9 + 3);
    v34 = v12 + 4;
    if ((uint64_t)(v12 + 4) > (uint64_t)(v33 >> 1))
    {
      v60 = sub_226486AEC((char *)(v33 > 1), v12 + 4, 1, v9);
      sinval = v64;
      v20.f32[0] = cosval;
      v9 = v60;
    }
    *((_QWORD *)v9 + 2) = v34;
    *(_DWORD *)&v9[4 * v32 + 32] = v24;
    v35 = *((_QWORD *)v9 + 3);
    v36 = v12 + 5;
    if ((uint64_t)(v12 + 5) > (uint64_t)(v35 >> 1))
    {
      v61 = sub_226486AEC((char *)(v35 > 1), v12 + 5, 1, v9);
      sinval = v64;
      v20.f32[0] = cosval;
      v9 = v61;
    }
    *((_QWORD *)v9 + 2) = v36;
    *(_DWORD *)&v9[4 * v34 + 32] = v26;
    v37 = *((_QWORD *)v9 + 3);
    if ((uint64_t)(v12 + 6) > (uint64_t)(v37 >> 1))
    {
      v62 = sub_226486AEC((char *)(v37 > 1), v12 + 6, 1, v9);
      sinval = v64;
      v20.f32[0] = cosval;
      v9 = v62;
    }
    *((_QWORD *)v9 + 2) = v12 + 6;
    *(_DWORD *)&v9[4 * v36 + 32] = v24 + 2;
    *a2 = v9;
    v22 = a8;
    v23 = a9;
  }
  v20.f32[1] = sinval;
  v38 = vadd_f32(vmul_n_f32(v20, v22), a7);
  v39 = vsub_f32(a7, v38);
  v40 = vmul_f32(v39, v39);
  v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
  v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
  v43 = vmul_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
  v39.f32[0] = a5 * v43.f32[0];
  v71 = v43;
  v43.f32[0] = vmuls_lane_f32(a5, v43, 1);
  v40.f32[0] = (float)(a5 * 0.0) + v23;
  v44 = v38.f32[1];
  v63 = v38.f32[1] + v43.f32[0];
  v65 = v38.i32[0];
  v68 = __PAIR64__(v40.u32[0], v38.f32[0] + v39.f32[0]);
  v45 = *(_QWORD **)a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_226486AE0(0, v45[2] + 1, 1, v45);
    v45 = (_QWORD *)result;
  }
  v47 = v68;
  *((float *)&v47 + 2) = v63;
  v49 = v45[2];
  v48 = v45[3];
  v50 = v48 >> 1;
  v51 = v49 + 1;
  v52 = v71;
  v53 = a9;
  if (v48 >> 1 <= v49)
  {
    v69 = v47;
    result = (uint64_t)sub_226486AE0((_QWORD *)(v48 > 1), v49 + 1, 1, v45);
    v47 = v69;
    v52 = v71;
    v53 = a9;
    v45 = (_QWORD *)result;
    v48 = *(_QWORD *)(result + 24);
    v50 = v48 >> 1;
  }
  v54 = v52.f32[1];
  v45[2] = v51;
  *(_OWORD *)&v45[2 * v49 + 4] = v47;
  v55 = v49 + 2;
  if (v50 < v55)
  {
    result = (uint64_t)sub_226486AE0((_QWORD *)(v48 > 1), v55, 1, v45);
    v52.i32[0] = v71.i32[0];
    v53 = a9;
    v45 = (_QWORD *)result;
  }
  *(float32x2_t *)&v56 = vadd_f32((float32x2_t)__PAIR64__(LODWORD(v53), v65), vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(0.0 - v52.f32[0]), a6));
  *((float *)&v56 + 2) = v44 + (float)((float)(0.0 - v54) * a6);
  HIDWORD(v56) = 0;
  v45[2] = v55;
  *(_OWORD *)&v45[2 * v51 + 4] = v56;
  *(_QWORD *)a1 = v45;
  return result;
}

_QWORD *sub_226460038(_QWORD *result, uint64_t a2, float a3, float a4, float32x2_t a5, float a6, float a7, float a8, float a9)
{
  char v10;
  float v15;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  char *v24;
  uint64_t v25;

  v24 = (char *)MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = (char)result;
    v15 = a4 - a3;
    v23 = (float)a2;
    sub_22645FBBC((uint64_t)&v25, &v24, (float)((float)(a4 - a3) * (float)(0.0 / (float)a2)) + a3, a4, a8, a9, a5, a6, a7);
    if (a2)
    {
      v19 = 0;
      do
        sub_22645FBBC((uint64_t)&v25, &v24, (float)(v15 * (float)((float)++v19 / v23)) + a3, a4, a8, a9, a5, a6, a7);
      while (a2 != v19);
    }
    if ((v10 & 1) != 0)
    {
      v20 = (char *)sub_2264D1E30((uint64_t)v24);
      v21 = v25;
      v22 = sub_2265143CC(*(_QWORD *)(v25 + 16), (__n128)xmmword_2265600C0);
    }
    else
    {
      v21 = v25;
      v22 = sub_2265143CC(*(_QWORD *)(v25 + 16), (__n128)xmmword_2265600B0);
      v20 = v24;
    }
    type metadata accessor for RoomCaptureMesh();
    result = (_QWORD *)swift_allocObject();
    result[2] = v21;
    result[3] = v22;
    result[4] = v20;
  }
  return result;
}

_QWORD *sub_2264601A4(char a1, float a2, float a3, float32x2_t a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v17;
  float v18;
  _QWORD *result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;

  v24 = (char *)MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  if (a2 >= a3)
  {
LABEL_8:
    if ((a1 & 1) != 0)
    {
      v20 = (char *)sub_2264D1E30((uint64_t)v24);
      v21 = v25;
      v22 = sub_2265143CC(*(_QWORD *)(v25 + 16), (__n128)xmmword_2265600C0);
    }
    else
    {
      v21 = v25;
      v22 = sub_2265143CC(*(_QWORD *)(v25 + 16), (__n128)xmmword_2265600B0);
      v20 = v24;
    }
    type metadata accessor for RoomCaptureMesh();
    result = (_QWORD *)swift_allocObject();
    result[2] = v21;
    result[3] = v22;
    result[4] = v20;
  }
  else
  {
    v17 = 0;
    while (1)
    {
      v18 = (float)((float)((float)v17 * a9) + a2) <= a3 ? (float)((float)v17 * a9) + a2 : a3;
      result = (_QWORD *)sub_22645FBBC((uint64_t)&v25, &v24, v18, a3, a7, a8, a4, a5, a6);
      if (__OFADD__(v17, 1))
        break;
      ++v17;
      if (v18 >= a3)
        goto LABEL_8;
    }
    __break(1u);
  }
  return result;
}

_QWORD *sub_2264602E4(float *a1, uint64_t a2, char a3, char a4, double a5, float a6, float a7, float a8)
{
  float v12;
  float v13;
  float v14;
  __float2 v15;
  float v16;
  float v17;
  __float2 v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  __n128 v22;
  float32x2_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  __n128 v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  __int128 v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  _QWORD *result;
  float v114;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  __n128 v120;
  char v121;
  float v122;
  __int128 v123;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v136 = MEMORY[0x24BEE4AF8];
  v137 = MEMORY[0x24BEE4AF8];
  v135 = MEMORY[0x24BEE4AF8];
  v12 = a1[5];
  v14 = a1[6];
  v13 = a1[7];
  v114 = a1[4];
  v15 = __sincosf_stret(v114);
  v16 = *(float *)&a5 + (float)(v15.__cosval * a6);
  v122 = a6;
  v17 = *((float *)&a5 + 1) + (float)(v15.__sinval * a6);
  v18 = __sincosf_stret(v12);
  v19.f32[0] = *(float *)&a5 - v16;
  v19.f32[1] = *((float *)&a5 + 1) - v17;
  v20 = vmul_f32(v19, v19);
  v20.i32[0] = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
  v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  v22.n128_u64[0] = (unint64_t)vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  v23 = vmul_n_f32(v19, vmul_f32((float32x2_t)v22.n128_u64[0], vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32((float32x2_t)v22.n128_u64[0], (float32x2_t)v22.n128_u64[0]))).f32[0]);
  v22.n128_u32[3] = 0;
  v22.n128_f32[0] = v16 + (float)(a7 * v23.f32[0]);
  v24 = (float32x4_t)v22.n128_u32[0];
  v24.f32[1] = (float)(a7 * 0.0) + v14;
  v24.f32[2] = v17 + vmuls_lane_f32(a7, v23, 1);
  v22.n128_f32[1] = (float)(a7 * 0.0) + v13;
  v22.n128_f32[2] = v24.f32[2];
  v25 = (float)(0.0 - v23.f32[1]) * a8;
  v26.i32[3] = 0;
  v26.f32[0] = v16 + (float)((float)(0.0 - v23.f32[0]) * a8);
  v27 = (float32x4_t)v26.u32[0];
  v27.f32[1] = (float)(a8 * 0.0) + v14;
  v27.f32[2] = v17 + v25;
  v26.f32[1] = (float)(a8 * 0.0) + v13;
  v26.f32[2] = v17 + v25;
  sub_226481088(v27, v24, v22, v26);
  v29 = v28;
  if ((a4 & 1) != 0)
  {
    sub_226480F60();
    v31 = v30;
    swift_release();
    v29 = v31;
  }
  v121 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA20;
  *(_QWORD *)(inited + 32) = v29;
  v127 = inited;
  sub_22655CEE4();
  swift_retain();
  v33 = sub_2264CE9A0(v127);
  swift_bridgeObjectRelease();
  v34 = v33[4];
  v35 = *(_QWORD *)(v34 + 16);
  v36 = MEMORY[0x24BEE4AF8];
  if (v35)
  {
    v128 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v35, 0);
    v37 = 0;
    v38 = v128;
    while (1)
    {
      v39 = *(_QWORD *)(v36 + 16);
      if (HIDWORD(v39))
        goto LABEL_60;
      v40 = *(_DWORD *)(v34 + 4 * v37 + 32);
      v41 = v40 + v39;
      if (__CFADD__(v40, (_DWORD)v39))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v43 = *(_QWORD *)(v128 + 16);
      v42 = *(_QWORD *)(v128 + 24);
      if (v43 >= v42 >> 1)
        sub_2264C7984(v42 > 1, v43 + 1, 1);
      ++v37;
      *(_QWORD *)(v128 + 16) = v43 + 1;
      *(_DWORD *)(v128 + 4 * v43 + 32) = v41;
      if (v35 == v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
  }
  v38 = MEMORY[0x24BEE4AF8];
LABEL_12:
  v44 = *(float *)&a5 + (float)(v18.__cosval * v122);
  v45 = *((float *)&a5 + 1) + (float)(v18.__sinval * v122);
  v46.f32[0] = *(float *)&a5 - v44;
  v46.f32[1] = *((float *)&a5 + 1) - v45;
  v47 = vmul_f32(v46, v46);
  v47.i32[0] = vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)).u32[0];
  v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
  v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
  v50 = vmul_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
  v51.i32[3] = 0;
  v51.f32[0] = v44 + (float)((float)(0.0 - v50.f32[0]) * a8);
  v52 = (__n128)COERCE_UNSIGNED_INT(v44 + (float)(a7 * v50.f32[0]));
  v52.n128_f32[1] = (float)(a7 * 0.0) + v14;
  v53 = (float32x4_t)__PAIR64__((float)(a7 * 0.0) + v13, v44 + (float)(a7 * v50.f32[0]));
  v54 = (float32x4_t)v51.u32[0];
  v54.f32[1] = (float)(a8 * 0.0) + v14;
  v51.f32[1] = (float)(a8 * 0.0) + v13;
  v52.n128_f32[2] = v45 + vmuls_lane_f32(a7, v50, 1);
  v53.i32[2] = v52.n128_i32[2];
  v54.f32[2] = v45 + (float)((float)(0.0 - v50.f32[1]) * a8);
  v119 = v54;
  v120 = v52;
  v51.f32[2] = v54.f32[2];
  v117 = v51;
  v118 = v53;
  sub_22646A2B4(v38);
  v55 = swift_bridgeObjectRetain();
  sub_22646A170(v55);
  v56 = swift_bridgeObjectRetain();
  sub_22646A170(v56);
  sub_226481088(v117, v118, v120, v119);
  v58 = v57;
  if ((v121 & 1) != 0)
  {
    sub_226480F60();
    v60 = v59;
    swift_release();
    v58 = v60;
  }
  v61 = swift_initStackObject();
  *(_OWORD *)(v61 + 16) = xmmword_22655FA20;
  *(_QWORD *)(v61 + 32) = v58;
  v129 = v61;
  sub_22655CEE4();
  swift_retain();
  v62 = sub_2264CE9A0(v129);
  swift_bridgeObjectRelease();
  v63 = v62[4];
  v64 = *(_QWORD *)(v63 + 16);
  v65 = MEMORY[0x24BEE4AF8];
  if (v64)
  {
    v130 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v64, 0);
    v66 = 0;
    v65 = v130;
    while (1)
    {
      v67 = *(_QWORD *)(v137 + 16);
      if (HIDWORD(v67))
        goto LABEL_60;
      v68 = *(_DWORD *)(v63 + 4 * v66 + 32);
      v69 = v68 + v67;
      if (__CFADD__(v68, (_DWORD)v67))
        goto LABEL_56;
      v71 = *(_QWORD *)(v130 + 16);
      v70 = *(_QWORD *)(v130 + 24);
      if (v71 >= v70 >> 1)
        sub_2264C7984(v70 > 1, v71 + 1, 1);
      ++v66;
      *(_QWORD *)(v130 + 16) = v71 + 1;
      *(_DWORD *)(v130 + 4 * v71 + 32) = v69;
      if (v64 == v66)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_22646A2B4(v65);
  v72 = swift_bridgeObjectRetain();
  sub_22646A170(v72);
  v73 = swift_bridgeObjectRetain();
  sub_22646A170(v73);
  if ((a3 & 1) != 0)
    v74 = sub_2264601A4(v121 & 1, v114, v12, *(float32x2_t *)&a5, v122, v14, a7, a8, *(float *)&a2);
  else
    v74 = sub_226460038((_QWORD *)(v121 & 1), a2, v114, v12, *(float32x2_t *)&a5, v122, v14, a7, a8);
  v75 = v74;
  v76 = v74[4];
  v77 = *(_QWORD *)(v76 + 16);
  v78 = MEMORY[0x24BEE4AF8];
  if (v77)
  {
    v131 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v77, 0);
    v79 = 0;
    v78 = v131;
    while (1)
    {
      v80 = *(_QWORD *)(v137 + 16);
      if (HIDWORD(v80))
        break;
      v81 = *(_DWORD *)(v76 + 4 * v79 + 32);
      v82 = v81 + v80;
      if (__CFADD__(v81, (_DWORD)v80))
        goto LABEL_57;
      v84 = *(_QWORD *)(v131 + 16);
      v83 = *(_QWORD *)(v131 + 24);
      if (v84 >= v83 >> 1)
        sub_2264C7984(v83 > 1, v84 + 1, 1);
      ++v79;
      *(_QWORD *)(v131 + 16) = v84 + 1;
      *(_DWORD *)(v131 + 4 * v84 + 32) = v82;
      if (v77 == v79)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
LABEL_60:
    result = (_QWORD *)sub_22655D3DC();
    __break(1u);
    return result;
  }
LABEL_33:
  sub_22646A2B4(v78);
  v85 = swift_bridgeObjectRetain();
  sub_22646A170(v85);
  v86 = swift_bridgeObjectRetain();
  sub_22646A170(v86);
  v87 = v75[4];
  v88 = *(_QWORD *)(v87 + 16);
  v89 = MEMORY[0x24BEE4AF8];
  if (v88)
  {
    v132 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7984(0, v88, 0);
    v89 = v132;
    v90 = v88 + 7;
    while (v90 != 7)
    {
      v91 = *(_QWORD *)(v137 + 16);
      if (HIDWORD(v91))
        goto LABEL_60;
      v92 = *(_DWORD *)(v87 + 4 * v90);
      v93 = v92 + v91;
      if (__CFADD__(v92, (_DWORD)v91))
        goto LABEL_59;
      v95 = *(_QWORD *)(v132 + 16);
      v94 = *(_QWORD *)(v132 + 24);
      if (v95 >= v94 >> 1)
        sub_2264C7984(v94 > 1, v95 + 1, 1);
      *(_QWORD *)(v132 + 16) = v95 + 1;
      *(_DWORD *)(v132 + 4 * v95 + 32) = v93;
      if (--v90 == 7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_42:
  sub_22646A2B4(v89);
  v96 = v75[2];
  v97 = *(_QWORD *)(v96 + 16);
  v98 = MEMORY[0x24BEE4AF8];
  if (v97)
  {
    v133 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C1310(0, v97, 0);
    v99 = 0;
    v98 = v133;
    v100 = *(_QWORD *)(v133 + 16);
    LODWORD(v101) = 0;
    *((float *)&v101 + 1) = v13 - v14;
    do
    {
      v102 = *(_OWORD *)(v96 + 16 * v99 + 32);
      v103 = *(_QWORD *)(v133 + 24);
      if (v100 >= v103 >> 1)
      {
        v125 = v101;
        v123 = *(_OWORD *)(v96 + 16 * v99 + 32);
        sub_2264C1310(v103 > 1, v100 + 1, 1);
        v102 = v123;
        v101 = v125;
      }
      *(float32x2_t *)&v104 = vadd_f32(*(float32x2_t *)&v101, *(float32x2_t *)&v102);
      *((float *)&v104 + 2) = *((float *)&v102 + 2) + 0.0;
      HIDWORD(v104) = 0;
      ++v99;
      *(_QWORD *)(v133 + 16) = v100 + 1;
      *(_OWORD *)(v133 + 16 * v100++ + 32) = v104;
    }
    while (v97 != v99);
    swift_bridgeObjectRelease();
  }
  sub_22646A170(v98);
  v105 = v75[3];
  v106 = *(_QWORD *)(v105 + 16);
  if (v106)
  {
    v134 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C1310(0, v106, 0);
    v107 = 0;
    v108 = *(_QWORD *)(v134 + 16);
    do
    {
      v109 = *(_OWORD *)(v105 + 16 * v107 + 32);
      v110 = *(_QWORD *)(v134 + 24);
      if (v108 >= v110 >> 1)
      {
        v126 = *(_OWORD *)(v105 + 16 * v107 + 32);
        sub_2264C1310(v110 > 1, v108 + 1, 1);
        v109 = v126;
      }
      *(float32x2_t *)&v111 = vsub_f32(0, *(float32x2_t *)&v109);
      *((float *)&v111 + 2) = 0.0 - *((float *)&v109 + 2);
      HIDWORD(v111) = 0;
      ++v107;
      *(_QWORD *)(v134 + 16) = v108 + 1;
      *(_OWORD *)(v134 + 16 * v108++ + 32) = v111;
    }
    while (v106 != v107);
    swift_bridgeObjectRelease();
  }
  v112 = swift_bridgeObjectRetain();
  sub_22646A170(v112);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for RoomCaptureMesh();
  result = (_QWORD *)swift_allocObject();
  result[2] = v137;
  result[3] = v136;
  result[4] = v135;
  return result;
}

uint64_t type metadata accessor for Constants()
{
  return objc_opt_self();
}

uint64_t sub_226460CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_226460CC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_226460CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_226460CF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_226460CF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_226460D00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_226460D08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_226460D10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_226460D18(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_226460D20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_226460D28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_226460D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_226460D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t sub_226460D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t sub_226460D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t sub_226460D90(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(a2 + 64))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 112))(v5, a1, a2, a3);
}

uint64_t sub_226460E04(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(a2 + 72))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 120))(v5, a1, a2, a3);
}

uint64_t sub_226460E78(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(a2 + 80))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 128))(v5, a1, a2, a3);
}

uint64_t sub_226460EEC(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(a2 + 88))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 136))(v5, a1, a2, a3);
}

uint64_t sub_226460F60@<X0>(int a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v54 = a5;
  v57 = a2;
  v58 = a4;
  v49 = a1;
  v52 = a6;
  v7 = sub_22655CB3C();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22655CA64();
  MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22655CA4C();
  MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_22655CAAC();
  MEMORY[0x24BDAC7A8](v13);
  v50 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842738);
  MEMORY[0x24BDAC7A8](v15);
  v48 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_22655CA04();
  v45 = *(_QWORD *)(v17 - 8);
  v46 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_22655C9D4();
  v20 = *(_QWORD *)(v47 - 8);
  v21 = MEMORY[0x24BDAC7A8](v47);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v42 - v24;
  v26 = sub_22655C9BC();
  v55 = *(_QWORD *)(v26 - 8);
  v56 = v26;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v42 - v30;
  if (!a3)
  {
    v32 = v55;
    v33 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))((char *)&v42 - v30, *MEMORY[0x24BDE7510], v56);
    v34 = sub_22655C9B0();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
    v35 = 0xD00000000000001BLL;
    if ((v34 & 1) == 0)
      v35 = 0xD00000000000001DLL;
    v57 = (char *)v35;
  }
  type metadata accessor for MetalConstants();
  swift_bridgeObjectRetain();
  swift_initStaticObject();
  sub_22648BCD8();
  sub_22655C9C8();
  sub_22648BCD8();
  sub_22655C9F8();
  v36 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v57 = v25;
  v37 = v47;
  v36(v23, v25, v47);
  v38 = v45;
  v39 = v46;
  v40 = v48;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v48, v19, v46);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v29, v58, v56);
  sub_22655C9EC();
  sub_22655CA40();
  sub_22655CAC4();
  sub_22655CA40();
  sub_22655CA7C();
  sub_22655CA40();
  sub_22655CA88();
  if ((v54 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, *MEMORY[0x24BDE7A78], v44);
    sub_22655C98C();
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v57, v37);
}

uint64_t sub_226461418()
{
  return 24;
}

uint64_t sub_226461420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841DC0);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841DC0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, (char *)0xD000000000000016, 0x800000022656B660, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226461508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841DD8);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841DD8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, (char *)0xD000000000000016, 0x800000022656B660, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2264615F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841DF0);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841DF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2264616C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  void (*v10)(uint64_t *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_QWORD *)(v1 + 96) = a1;
  sub_22655C398();
  swift_unknownObjectRetain();
  sub_22655C350();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22655F8F0;
  v5 = qword_25583F868;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = sub_22655CAD0();
  v7 = __swift_project_value_buffer(v6, (uint64_t)qword_255841DF0);
  v8 = MEMORY[0x24BDE74C8];
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 32));
  v10 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v10(boxed_opaque_existential_1, v7, v6);
  sub_22655C1AC();
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22655F8F0;
  if (qword_25583F858 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v6, (uint64_t)qword_255841DC0);
  *(_QWORD *)(v11 + 56) = v6;
  *(_QWORD *)(v11 + 64) = v8;
  v13 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v11 + 32));
  v10(v13, v12, v6);
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_2264618D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 v24;
  uint64_t v25;

  v24 = a3;
  v23 = a2;
  v5 = sub_22655CAD0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  if (qword_25583F868 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v5, (uint64_t)qword_255841DF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, v12, v5);
  v14 = *(_QWORD *)(v3 + 96);
  v15 = type metadata accessor for SimpleScanMaterial();
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v16 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v13(v9, (uint64_t)v11, v5);
  swift_unknownObjectRetain();
  v17 = v25;
  v18 = sub_2264B3B30((unint64_t)v9, v14, a1, 0, v24, v24);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v20 = v18;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v21 = v23;
  v23[3] = v15;
  v21[4] = (uint64_t)&off_24EDE3DA0;
  *v21 = v20;
  return result;
}

uint64_t type metadata accessor for OcclusionMaterialFactory()
{
  return objc_opt_self();
}

uint64_t sub_226461AB0()
{
  return 4;
}

uint64_t sub_226461AB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226461B10(a1, &qword_25583F858, (uint64_t)qword_255841DC0, (uint64_t)sub_226461420, a2, a3);
}

uint64_t sub_226461AE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226461B10(a1, &qword_25583F868, (uint64_t)qword_255841DF0, (uint64_t)sub_2264615F0, a2, a3);
}

uint64_t sub_226461B10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t updated;
  uint64_t result;
  __n128 v21;
  uint64_t v22;

  v22 = a4;
  v21 = a6;
  v12 = sub_22655CAD0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v6;
  if (*a2 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v12, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
  v18 = *(_QWORD *)(v16 + 96);
  updated = type metadata accessor for MeshUpdateScanMaterial();
  swift_allocObject();
  swift_unknownObjectRetain();
  result = sub_2264B3B30((unint64_t)v15, v18, a1, 0, v21, v21);
  if (!v7)
  {
    a5[3] = updated;
    a5[4] = (uint64_t)&off_24EDE3DA0;
    *a5 = result;
  }
  return result;
}

uint64_t sub_226461C44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226461B10(a1, &qword_25583F860, (uint64_t)qword_255841DD8, (uint64_t)sub_226461508, a2, a3);
}

uint64_t sub_226461C70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264618D4(a1, a2, a3);
}

uint64_t sub_226461C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E08);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E08);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, 0, 0, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226461D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E20);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E20);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, 0, 0, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226461E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E38);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E38);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(0, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226461F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 32) = _Q0;
  *(_OWORD *)(v1 + 48) = _Q0;
  *(_OWORD *)(v1 + 64) = _Q0;
  *(_OWORD *)(v1 + 80) = _Q0;
  *(_QWORD *)(v1 + 96) = a1;
  sub_22655C398();
  swift_unknownObjectRetain();
  sub_22655C350();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22655F8F0;
  v10 = qword_25583F880;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = sub_22655CAD0();
  v12 = __swift_project_value_buffer(v11, (uint64_t)qword_255841E38);
  v13 = MEMORY[0x24BDE74C8];
  *(_QWORD *)(v9 + 56) = v11;
  *(_QWORD *)(v9 + 64) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 32));
  v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v15(boxed_opaque_existential_1, v12, v11);
  sub_22655C1AC();
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_22655F8F0;
  if (qword_25583F870 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v11, (uint64_t)qword_255841E08);
  *(_QWORD *)(v16 + 56) = v11;
  *(_QWORD *)(v16 + 64) = v13;
  v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 32));
  v15(v18, v17, v11);
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_226462124@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264621A8(a1, &qword_25583F870, (uint64_t)qword_255841E08, a2, a3);
}

uint64_t sub_226462150@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264621A8(a1, &qword_25583F880, (uint64_t)qword_255841E38, a2, a3);
}

uint64_t sub_22646217C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264621A8(a1, &qword_25583F878, (uint64_t)qword_255841E20, a2, a3);
}

uint64_t sub_2264621A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  __n128 v33;
  uint64_t v34;

  v33 = a5;
  v32 = a4;
  v9 = sub_22655CAD0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v31 - v14;
  if (*a2 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v9, a3);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, v16, v9);
  v18 = *(_QWORD *)(v5 + 96);
  v19 = type metadata accessor for SimpleScanMaterial();
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v20 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v17(v13, (uint64_t)v15, v9);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  v26 = v34;
  v27 = sub_2264B3B30((unint64_t)v13, v18, a1, 0, v33, _Q1);
  if (v26)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v29 = v27;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v30 = v32;
  v32[3] = v19;
  v30[4] = (uint64_t)&off_24EDE3DA0;
  *v30 = v29;
  return result;
}

uint64_t type metadata accessor for DebugMaterialFactory()
{
  return objc_opt_self();
}

__n128 sub_22646237C()
{
  __n128 **v0;

  return (*v0)[2];
}

__n128 sub_226462388()
{
  __n128 **v0;

  return (*v0)[3];
}

__n128 sub_226462394()
{
  __n128 **v0;

  return (*v0)[4];
}

__n128 sub_2264623A0()
{
  __n128 **v0;

  return (*v0)[5];
}

uint64_t sub_2264623AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462124(a1, a2, a3);
}

uint64_t sub_2264623CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22646217C(a1, a2, a3);
}

uint64_t sub_2264623EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462150(a1, a2, a3);
}

uint64_t sub_22646240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E50);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E50);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7510], v0);
  sub_226460F60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2264624E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E68);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E68);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7510], v0);
  sub_226460F60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2264625BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E80);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E80);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7510], v0);
  sub_226460F60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226462694(uint64_t a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  return sub_226462F9C(a1, &qword_25583F888, (uint64_t)qword_255841E50, _Q0);
}

uint64_t sub_2264626B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462C0C(a1, &qword_25583F890, (uint64_t)qword_255841E68, a2, a3);
}

uint64_t sub_2264626E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462C0C(a1, &qword_25583F888, (uint64_t)qword_255841E50, a2, a3);
}

uint64_t sub_22646270C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462C0C(a1, &qword_25583F898, (uint64_t)qword_255841E80, a2, a3);
}

void sub_226462738(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;

  v27 = a3;
  v25 = a2;
  v26 = a1;
  v4 = sub_22655CAD0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  if (qword_25583F888 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E50);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  v13 = *(_QWORD *)(v3 + 96);
  v14 = type metadata accessor for SimpleScanMaterial();
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v12(v8, (uint64_t)v10, v4);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  v21 = v28;
  v22 = sub_2264B3B30((unint64_t)v8, v13, v26, 1, v27, _Q1);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    *(_DWORD *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = v27.n128_u32[3];
    sub_226464E9C();
    v24 = v25;
    v25[3] = v14;
    v24[4] = (uint64_t)&off_24EDE3DA0;
    *v24 = v23;
  }
}

uint64_t type metadata accessor for DollhouseDebugMaterialFactory()
{
  return objc_opt_self();
}

uint64_t sub_226462920()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t sub_226462948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264626E0(a1, a2, a3);
}

uint64_t sub_226462968@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22646270C(a1, a2, a3);
}

void sub_226462988(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  sub_226462738(a1, a2, a3);
}

uint64_t sub_2264629A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841E98);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841E98);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226462A80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462C0C(a1, &qword_25583F8A0, (uint64_t)qword_255841E98, a2, a3);
}

uint64_t sub_226462AAC()
{
  uint64_t v0;

  sub_22644F0C0(v0 + 16);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DollhouseColorMaterialFactory()
{
  return objc_opt_self();
}

uint64_t sub_226462AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841EB0);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841EB0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7518], v0);
  sub_226460F60(1, (char *)0xD00000000000001ELL, 0x800000022656B750, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226462BE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462C0C(a1, &qword_25583F8A8, (uint64_t)qword_255841EB0, a2, a3);
}

uint64_t sub_226462C0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  __n128 v33;
  uint64_t v34;

  v33 = a5;
  v32 = a4;
  v9 = sub_22655CAD0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v31 - v14;
  if (*a2 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v9, a3);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, v16, v9);
  v18 = *(_QWORD *)(v5 + 96);
  v19 = type metadata accessor for SimpleScanMaterial();
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v20 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v17(v13, (uint64_t)v15, v9);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  v26 = v34;
  v27 = sub_2264B3B30((unint64_t)v13, v18, a1, 1, v33, _Q1);
  if (v26)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v29 = v27;
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v30 = v32;
  v32[3] = v19;
  v30[4] = (uint64_t)&off_24EDE3DA0;
  *v30 = v29;
  return result;
}

uint64_t sub_226462DC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  __n128 v29;
  uint64_t v30;

  v29 = a3;
  v28 = a2;
  v5 = sub_22655CAD0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - v10;
  if (qword_25583F8A8 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v5, (uint64_t)qword_255841EB0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, v12, v5);
  v14 = *(_QWORD *)(v3 + 96);
  v15 = type metadata accessor for SimpleScanMaterial();
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v16 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v13(v9, (uint64_t)v11, v5);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  v22 = v30;
  v23 = sub_2264B3B30((unint64_t)v9, v14, a1, 1, v29, _Q1);
  if (v22)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v25 = v23;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v26 = v28;
  v28[3] = v15;
  v26[4] = (uint64_t)&off_24EDE3DA0;
  *v26 = v25;
  return result;
}

uint64_t sub_226462F78(uint64_t a1)
{
  return sub_226462F9C(a1, &qword_25583F8A8, (uint64_t)qword_255841EB0, (__n128)xmmword_226560160);
}

uint64_t sub_226462F9C(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;

  *(_QWORD *)(v4 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v4 + 32) = _Q0;
  *(_OWORD *)(v4 + 48) = _Q0;
  *(__n128 *)(v4 + 64) = a4;
  *(_OWORD *)(v4 + 80) = _Q0;
  *(_QWORD *)(v4 + 96) = a1;
  sub_22655C398();
  swift_unknownObjectRetain();
  sub_22655C350();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22655F8F0;
  if (*a2 != -1)
    swift_once();
  v14 = sub_22655CAD0();
  v15 = __swift_project_value_buffer(v14, a3);
  v16 = MEMORY[0x24BDE74C8];
  *(_QWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, v15, v14);
  sub_22655C1AC();
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t type metadata accessor for DollHouseDebugNormalsMaterialFactory()
{
  return objc_opt_self();
}

uint64_t sub_226463114@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462BE0(a1, a2, a3);
}

uint64_t sub_226463134@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226462DC0(a1, a2, a3);
}

uint64_t sub_226463154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841EC8);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841EC8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7510], v0);
  sub_226460F60(1, (char *)0xD00000000000001BLL, 0x800000022656B730, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_22646323C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_22655C9BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22655CAD0();
  __swift_allocate_value_buffer(v4, qword_255841EE0);
  v5 = __swift_project_value_buffer(v4, (uint64_t)qword_255841EE0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDE7510], v0);
  sub_226460F60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_226463314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;

  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 32) = _Q0;
  *(_OWORD *)(v1 + 48) = _Q0;
  *(_OWORD *)(v1 + 64) = xmmword_226560160;
  *(_OWORD *)(v1 + 80) = xmmword_226560170;
  *(_QWORD *)(v1 + 96) = a1;
  sub_22655C398();
  swift_unknownObjectRetain();
  sub_22655C350();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22655F8F0;
  if (qword_25583F8B0 != -1)
    swift_once();
  v9 = sub_22655CAD0();
  v10 = __swift_project_value_buffer(v9, (uint64_t)qword_255841EC8);
  v11 = MEMORY[0x24BDE74C8];
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
  sub_22655C1AC();
  swift_allocObject();
  sub_22655C1A0();
  swift_release();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_226463470@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264634C8(a1, &qword_25583F8B0, (uint64_t)qword_255841EC8, (uint64_t)sub_226463154, a2, a3);
}

uint64_t sub_22646349C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264634C8(a1, &qword_25583F8B8, (uint64_t)qword_255841EE0, (uint64_t)sub_22646323C, a2, a3);
}

uint64_t sub_2264634C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[2];
  uint64_t *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;

  v34[1] = a4;
  v35 = a5;
  v38 = a3;
  v39 = a1;
  v40 = a6;
  v8 = sub_22655CAD0();
  v36 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v34 - v12;
  v14 = MEMORY[0x22769A944](v6 + 16);
  v15 = v40;
  if (v14)
  {
    v16 = *(_QWORD *)(v6 + 24);
    ObjectType = swift_getObjectType();
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
    v20 = v19;
    v22 = v21;
    swift_unknownObjectRelease();
    v15 = v40;
    if ((v22 & 1) == 0)
    {
      v15.n128_u64[0] = v18;
      v15.n128_u64[1] = v20;
    }
  }
  v37 = v15;
  if (*a2 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v8, v38);
  v24 = v36;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v25(v13, v23, v8);
  v26 = *(_QWORD *)(v6 + 96);
  v27 = type metadata accessor for SimpleScanMaterial();
  v28 = swift_allocObject();
  *(_DWORD *)(v28 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v28 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v25(v11, (uint64_t)v13, v8);
  swift_unknownObjectRetain();
  v29 = v41;
  v30 = sub_2264B3B30((unint64_t)v11, v26, v39, 1, v40, v37);
  if (v29)
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v8);
  v32 = v30;
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v8);
  v33 = v35;
  v35[3] = v27;
  v33[4] = (uint64_t)&off_24EDE3DA0;
  *v33 = v32;
  return result;
}

uint64_t type metadata accessor for DollhouseMaterialFactory()
{
  return objc_opt_self();
}

uint64_t sub_2264636F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226463470(a1, a2, a3);
}

uint64_t sub_226463710@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_22646349C(a1, a2, a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_226463788()
{
  return 0;
}

uint64_t sub_2264637A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264623EC(a1, a2, a3);
}

uint64_t sub_2264637BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_226463114(a1, a2, a3);
}

uint64_t sub_2264637D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2264636F0(a1, a2, a3);
}

BOOL sub_2264637E4(_BYTE *a1, _BYTE *a2)
{
  float v2;
  float v3;

  v2 = -1.0;
  if (*a1)
    v3 = 1.0;
  else
    v3 = -1.0;
  if (*a2)
    v2 = 1.0;
  return v3 == v2;
}

uint64_t sub_226463810()
{
  return sub_2264AD874();
}

uint64_t sub_226463818()
{
  return sub_22655D664();
}

uint64_t sub_226463850()
{
  return sub_2264ADF64();
}

float *sub_226463858@<X0>(float *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result == 1.0)
    v2 = 1;
  else
    v2 = 2;
  if (*result == -1.0)
    v2 = 0;
  *a2 = v2;
  return result;
}

void sub_226463880(float *a1@<X8>)
{
  _BYTE *v1;
  float v2;

  v2 = -1.0;
  if (*v1)
    v2 = 1.0;
  *a1 = v2;
}

float sub_22646389C(unint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float result;

  v2 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
  LODWORD(result) = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(a1), (int8x16_t)xmmword_2265603E0))), (int8x8_t)vneg_f32(v2), (int8x8_t)v2).u32[0];
  return result;
}

uint64_t __swift_memcpy5_1(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Corner(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[5])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Corner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Corner()
{
  return &type metadata for Corner;
}

uint64_t sub_226463994()
{
  sub_22655D664();
  sub_22655D664();
  sub_22655D664();
  sub_22655D658();
  return sub_22655D658();
}

uint64_t sub_2264639F8()
{
  sub_22655D640();
  sub_22655D664();
  sub_22655D664();
  sub_22655D664();
  sub_22655D658();
  sub_22655D658();
  return sub_22655D670();
}

uint64_t sub_226463A88()
{
  return sub_2264639F8();
}

uint64_t sub_226463AE0()
{
  return sub_226463994();
}

uint64_t sub_226463B38()
{
  sub_22655D640();
  sub_22655D664();
  sub_22655D664();
  sub_22655D664();
  sub_22655D658();
  sub_22655D658();
  return sub_22655D670();
}

uint64_t sub_226463BE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  if (a1[4])
    v11 = 0x100000000;
  else
    v11 = 0;
  v12 = v5 == 0;
  v13 = 0x1000000;
  if (v12)
    v14 = 0;
  else
    v14 = 0x1000000;
  v12 = v4 == 0;
  v15 = 0x10000;
  if (v12)
    v16 = 0;
  else
    v16 = 0x10000;
  v12 = v3 == 0;
  v17 = 256;
  if (v12)
    v18 = 0;
  else
    v18 = 256;
  v19 = v18 | v2 | v16 | v14 | v11;
  if (v10)
    v20 = 0x100000000;
  else
    v20 = 0;
  if (!v9)
    v13 = 0;
  if (!v8)
    v15 = 0;
  if (!v7)
    v17 = 0;
  return sub_226463CC8(v19, v17 | v6 | v15 | v13 | v20);
}

unint64_t sub_226463C84()
{
  unint64_t result;

  result = qword_255842750;
  if (!qword_255842750)
  {
    result = MEMORY[0x22769A794](&unk_22656040C, &type metadata for Corner);
    atomic_store(result, (unint64_t *)&qword_255842750);
  }
  return result;
}

uint64_t sub_226463CC8(unint64_t a1, unint64_t a2)
{
  int v3;

  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 0;
  }
  else if ((a1 & 1) != 0)
  {
    return 0;
  }
  if ((a2 & 0x100) != 0)
  {
    if ((a1 & 0x100) == 0)
      return 0;
  }
  else if ((a1 & 0x100) != 0)
  {
    return 0;
  }
  v3 = (a1 >> 24) & 1 ^ (a2 >> 24) & 1;
  if ((a2 & 0x10000) != 0)
  {
    if ((a1 & 0x10000) == 0)
      LOBYTE(v3) = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  else if ((a1 >> 16) & 1 | (a1 >> 24) & 1 ^ (a2 >> 24) & 1)
  {
    return 0;
  }
  return ((a1 & 0x100000000) == 0) ^ BYTE4(a2) & 1u;
}

uint64_t storeEnumTagSinglePayload for Extent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_226463D98 + 4 * byte_2265603F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_226463DCC + 4 * byte_2265603F0[v4]))();
}

uint64_t sub_226463DCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226463DD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x226463DDCLL);
  return result;
}

uint64_t sub_226463DE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226463DF0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_226463DF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226463DFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Extent()
{
  return &type metadata for Extent;
}

unint64_t sub_226463E1C()
{
  unint64_t result;

  result = qword_255842758;
  if (!qword_255842758)
  {
    result = MEMORY[0x22769A794](&unk_2265604F4, &type metadata for Extent);
    atomic_store(result, (unint64_t *)&qword_255842758);
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectElement()
{
  return &type metadata for ObjectElement;
}

_QWORD *sub_226463E70(_QWORD *a1, __n128 a2, __n128 a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  __n128 *v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float32x2_t v16;
  __int128 v17;
  __int128 v18;
  __n128 *v19;
  __n128 v20;
  float32x2_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v30;
  float v31;
  float v32;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  __n128 *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unint64_t v52;
  unint64_t v53;
  __n128 *v54;
  float v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  float v60;
  float v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __n128 *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  __n128 v79;
  __n128 v80;
  __int128 v81;
  __n128 v82;
  __n128 v83;
  __int128 v84;
  float32x4_t v85;
  float32x4_t v86;
  __n128 v89;
  float32x4_t v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  float32x4_t v99;
  float32x4_t v100;
  __n128 v101;
  __n128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD *v111;

  v4 = sub_226486F68(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v6 = v4[2];
  v5 = v4[3];
  v7 = (_QWORD *)(v6 + 1);
  if (v6 >= v5 >> 1)
    goto LABEL_60;
  while (1)
  {
    v4[2] = v7;
    v8 = (__n128 *)&v4[4 * v6];
    v8[2] = a2;
    v8[3] = a3;
    v111 = v4;
    v70 = a1[2];
    if (!v70)
      return v4;
    v71 = a1 + 4;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      v72 = v9;
      v10 = (float32x4_t *)&v71[4 * v9];
      v85 = v10[1];
      v86 = *v10;
      v7 = v111;
      v11 = swift_bridgeObjectRetain();
      a1 = (_QWORD *)sub_2264D5318(v11);
      v12 = a1[2];
      swift_bridgeObjectRelease();
      if (v12 >= 2)
      {
        v6 = 0;
        v7 = (_QWORD *)(v12 >> 1);
        v62 = v12 - 1;
        v63 = 48 * v12 - 16;
        v64 = 8;
        do
        {
          if (v6 != v62)
          {
            v5 = a1[2];
            if (v6 >= v5)
              goto LABEL_58;
            if (v62 >= v5)
              goto LABEL_59;
            v67 = a1[v64 - 4];
            a2 = *(__n128 *)&a1[v64];
            a3 = *(__n128 *)&a1[v64 - 2];
            v68 = *(_QWORD *)((char *)a1 + v63);
            v81 = *(_OWORD *)((char *)a1 + v63 + 32);
            v84 = *(_OWORD *)((char *)a1 + v63 + 16);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              a1 = sub_2264C1110(a1);
            v65 = &a1[v64];
            *((_QWORD *)v65 - 4) = v68;
            *(v65 - 1) = v84;
            *v65 = v81;
            v66 = (__n128 *)((char *)a1 + v63);
            v66->n128_u64[0] = v67;
            v66[1] = a3;
            v66[2] = a2;
          }
          ++v6;
          v64 += 6;
          --v62;
          v63 -= 48;
        }
        while (v7 != (_QWORD *)v6);
      }
      v6 = a1[2];
      if (v6)
        break;
LABEL_4:
      swift_bridgeObjectRelease();
      v9 = v72 + 1;
      if (v72 + 1 == v70)
      {
LABEL_55:
        swift_bridgeObjectRelease();
        return v111;
      }
    }
    v13 = 0;
    v14 = a1 + 4;
    v15 = vmuls_lane_f32(0.5, v85, 2);
    v16 = vmul_f32(*(float32x2_t *)v85.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)&v17 = vsub_f32(*(float32x2_t *)v86.f32, v16);
    v77 = (float32x2_t)v17;
    *((float *)&v17 + 2) = v86.f32[2] - v15;
    HIDWORD(v17) = 0;
    *(float32x2_t *)&v18 = vadd_f32(*(float32x2_t *)v86.f32, v16);
    v75 = v17;
    v76 = (float32x2_t)v18;
    *((_QWORD *)&v18 + 1) = COERCE_UNSIGNED_INT(v86.f32[2] + v15);
    v74 = v18;
    while (1)
    {
      v5 = a1[2];
      if (v13 >= v5)
        break;
      v19 = (__n128 *)&v14[6 * v13];
      v20 = v19[1];
      v78 = (float32x4_t)v19[2];
      v21 = vmul_f32(*(float32x2_t *)v78.f32, (float32x2_t)0x3F0000003F000000);
      *(float32x2_t *)&v22 = vsub_f32((float32x2_t)v20.n128_u64[0], v21);
      *(float32x2_t *)&v23 = vadd_f32((float32x2_t)v20.n128_u64[0], v21);
      if ((vorr_s8((int8x8_t)vcge_f32(v77, *(float32x2_t *)&v23), (int8x8_t)vcge_f32(*(float32x2_t *)&v22, v76)).u8[0] & 1) == 0)
      {
        v24 = v19->n128_u64[0];
        v25 = vmuls_lane_f32(0.5, v78, 2);
        *((float *)&v22 + 2) = v20.n128_f32[2] - v25;
        HIDWORD(v22) = 0;
        *((float *)&v23 + 2) = v20.n128_f32[2] + v25;
        HIDWORD(v23) = 0;
        v107 = v75;
        v26 = *(float *)((unint64_t)&v107 & 0xFFFFFFFFFFFFFFF3 | 4);
        v108 = v23;
        v27 = *(float *)((unint64_t)&v108 & 0xFFFFFFFFFFFFFFF3 | 4);
        v109 = v74;
        v28 = *(float *)((unint64_t)&v109 & 0xFFFFFFFFFFFFFFF3 | 4);
        v110 = v22;
        if (v27 > v26 && v28 > *(float *)((unint64_t)&v110 & 0xFFFFFFFFFFFFFFF3 | 4))
        {
          v103 = v75;
          v30 = *(float *)((unint64_t)&v103 & 0xFFFFFFFFFFFFFFF3 | 8);
          v104 = v23;
          v31 = *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFF3 | 8);
          v105 = v74;
          v32 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFF3 | 8);
          v106 = v22;
          if (v31 > v30 && v32 > *(float *)((unint64_t)&v106 & 0xFFFFFFFFFFFFFFF3 | 8))
          {
            v73 = v24;
            v34 = 0;
            v7 = v111;
            v35 = (__n128)v78;
            do
            {
              v36 = *(_QWORD *)((char *)&unk_24EDDEC88 + v34 + 32);
              if (v36 > 2)
              {
                __break(1u);
                goto LABEL_55;
              }
              v99 = v86;
              v37 = *(float *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              v100 = v85;
              v38 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              v101 = v20;
              v39 = *(float *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              v102 = v35;
              v40 = *(float *)((unint64_t)&v102 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              v41 = v40 * 0.5;
              v42 = v39 + (float)(v40 * 0.5);
              v43 = v38 * 0.5;
              v44 = v37 + (float)(v38 * 0.5);
              if ((float)(v44 + 0.0001) < v42)
              {
                a3 = v20;
                v98 = v20;
                *(float *)((unint64_t)&v98 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v44 + v42) * 0.5;
                v82 = v98;
                a2 = v35;
                v97 = v35;
                *(float *)((unint64_t)&v97 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v42 - v44;
                v79 = v97;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v7 = sub_226486F68(0, v7[2] + 1, 1, v7);
                v46 = v7[2];
                v45 = v7[3];
                v35 = a2;
                v20 = a3;
                if (v46 >= v45 >> 1)
                {
                  v56 = sub_226486F68((_QWORD *)(v45 > 1), v46 + 1, 1, v7);
                  v35 = a2;
                  v20 = a3;
                  v7 = v56;
                }
                v7[2] = v46 + 1;
                v47 = (__n128 *)&v7[4 * v46];
                v47[2] = v82;
                v47[3] = v79;
                v48 = v39 - v41;
                if ((float)((float)(v39 - v41) + 0.0001) < v44)
                {
                  v39 = (float)(v48 + v44) * 0.5;
                  v96 = v20;
                  *(float *)((unint64_t)&v96 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v39;
                  v20 = v96;
                  v40 = v44 - v48;
                  v95 = v35;
                  *(float *)((unint64_t)&v95 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v44 - v48;
                  v35 = v95;
                }
              }
              v49 = v40 * -0.5;
              v50 = v39 + (float)(v40 * -0.5);
              v51 = v37 - v43;
              if ((float)(v50 + 0.0001) < v51)
              {
                a3 = v20;
                v94 = v20;
                *(float *)((unint64_t)&v94 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v51 + v50) * 0.5;
                v83 = v94;
                a2 = v35;
                v93 = v35;
                *(float *)((unint64_t)&v93 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v51 - v50;
                v80 = v93;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v7 = sub_226486F68(0, v7[2] + 1, 1, v7);
                v53 = v7[2];
                v52 = v7[3];
                v35 = a2;
                v20 = a3;
                if (v53 >= v52 >> 1)
                {
                  v57 = sub_226486F68((_QWORD *)(v52 > 1), v53 + 1, 1, v7);
                  v35 = a2;
                  v20 = a3;
                  v7 = v57;
                }
                v7[2] = v53 + 1;
                v54 = (__n128 *)&v7[4 * v53];
                v54[2] = v83;
                v54[3] = v80;
                v55 = v39 - v49;
                if ((float)(v51 + 0.0001) < (float)(v39 - v49))
                {
                  v92 = v20;
                  *(float *)((unint64_t)&v92 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v51 + v55) * 0.5;
                  v20 = v92;
                  v91 = v35;
                  *(float *)((unint64_t)&v91 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v55 - v51;
                  v35 = v91;
                }
              }
              v34 += 8;
            }
            while (v34 != 24);
            v58 = 0;
            v111 = v7;
            v14 = a1 + 4;
            while (1)
            {
              v89 = v35;
              v60 = *(float *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
              v90 = v78;
              v61 = *(float *)((unint64_t)&v90 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
              v59 = v60 == v61;
              if (v58 == 2)
                break;
              while (1)
              {
                ++v58;
                if (v59)
                  break;
                if (v58 == 2)
                  goto LABEL_8;
                v59 = 0;
              }
            }
            if (v60 != v61)
            {
LABEL_8:
              v7 = &v111;
              sub_2264D1604(v73);
            }
          }
        }
      }
      if (++v13 == v6)
        goto LABEL_4;
    }
    __break(1u);
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    v4 = sub_226486F68((_QWORD *)(v5 > 1), (int64_t)v7, 1, v4);
  }
}

uint64_t sub_226464594(_BOOL8 a1)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  int v7;
  unsigned int v8;

  if (qword_25583F818 != -1)
    swift_once();
  v2 = sub_2265583C8(a1, qword_25585AD80);
  if (qword_25583F820 != -1)
    swift_once();
  v3 = sub_2265583C8(a1, qword_25585AD88);
  if (qword_25583F828 != -1)
    swift_once();
  v4 = sub_2265583C8(a1, qword_25585AD90);
  if (qword_25583F830 != -1)
    swift_once();
  v5 = sub_2265583C8(a1, qword_25585AD98);
  if (qword_25583F838 != -1)
    swift_once();
  v6 = sub_2265583C8(a1, qword_25585ADA0);
  if (qword_25583F840 != -1)
    swift_once();
  v7 = v2;
  if (v3)
    v7 = v2 | 2;
  if (v4)
    v7 |= 4u;
  if (v5)
    v7 |= 8u;
  if (v6)
    v8 = v7 | 0x20;
  else
    v8 = v7;
  if (sub_2265583C8(a1, qword_25585ADA8) && (v8 & 0x10) == 0)
    return v8 | 0x10;
  else
    return v8;
}

BOOL sub_226464770(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  _BOOL8 result;
  float v5;
  float v6;
  float v7;
  float v9;
  _BOOL4 v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  result = 0;
  if ((vmovn_s32(vcgeq_f32(a1, a4)).u8[0] & 1) == 0 && (vmovn_s32(vcgeq_f32(a3, a2)).u8[0] & 1) == 0)
  {
    v16 = a1;
    v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | 4);
    v17 = a4;
    v6 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | 4);
    v18 = a2;
    v7 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | 4);
    v19 = a3;
    if (v6 > v5 && v7 > *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | 4))
    {
      v12 = a1;
      v9 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | 8);
      v13 = a4;
      v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | 8) > v9;
      v14 = a2;
      v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | 8);
      v15 = a3;
      return v11 > *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | 8) && v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22646486C(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  BOOL v13;
  unsigned int v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned __int8 v26;
  BOOL v27;
  unsigned int v28;
  float32x4_t v29;
  float32x4_t v30;
  unsigned __int8 v31;

  *(float32x2_t *)v4.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
  v4.f32[2] = 0.0 - a2.f32[2];
  v4.i32[3] = 0;
  v5 = vmulq_f32(v4, a1);
  a2.i32[3] = 0;
  v6 = vmulq_f32(a2, a1);
  v7 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))))).u8[0];
  if ((v7 & 1) != 0)
    v8 = -1;
  else
    v8 = 0;
  v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v8), (int8x16_t)a2, (int8x16_t)v4);
  v10 = vmulq_f32(v9, a1);
  *(float32x2_t *)v11.f32 = vsub_f32(0, *(float32x2_t *)a3.f32);
  v11.f32[2] = 0.0 - a3.f32[2];
  v11.i32[3] = 0;
  v12 = vmulq_f32(v11, a1);
  v10.i8[0] = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))))).u8[0];
  v13 = (v10.i8[0] & 1) == 0;
  if ((v10.i8[0] & 1) != 0)
    v14 = -1;
  else
    v14 = 0;
  v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v14), (int8x16_t)v11, (int8x16_t)v9);
  v16 = vmulq_f32(v15, a1);
  a3.i32[3] = 0;
  v17 = vmulq_f32(a3, a1);
  v18 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))))).u8[0];
  v19 = v7 & 1;
  if (!v13)
    v19 = 2;
  v20 = (v18 & 1) == 0;
  if ((v18 & 1) != 0)
    v21 = -1;
  else
    v21 = 0;
  v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v21), (int8x16_t)a3, (int8x16_t)v15);
  v23 = vmulq_f32(v22, a1);
  v24 = vnegq_f32(a4);
  v24.i32[3] = 0;
  v25 = vmulq_f32(v24, a1);
  v26 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))))).u8[0];
  if (!v20)
    v19 = 3;
  v27 = (v26 & 1) == 0;
  if ((v26 & 1) != 0)
    v28 = -1;
  else
    v28 = 0;
  v29 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v28), (int8x16_t)v24, (int8x16_t)v22), a1);
  v30 = vmulq_f32(a1, a4);
  v31 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))))).u8[0];
  if (!v27)
    v19 = 4;
  if ((v31 & 1) != 0)
    v19 = 5;
  return dword_24EDDEC18[v19 + 8];
}

uint64_t sub_226464A2C(char a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  float32x4_t v12;
  int v13;
  int v14;
  float32x4_t v15;
  int v16;
  int v17;
  float32x4_t v19;
  int v20;
  int v21;
  float32x4_t v22;
  int v23;
  int v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v29 = a6;
  v30 = a7;
  v28 = a5;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
    {
      if ((a1 & 4) == 0)
      {
        if ((a1 & 8) == 0)
        {
          if ((a1 & 0x20) == 0)
            goto LABEL_6;
LABEL_17:
          LODWORD(v8) = 0;
          goto LABEL_44;
        }
        LODWORD(v8) = 0;
        goto LABEL_40;
      }
      LODWORD(v8) = 0;
      goto LABEL_28;
    }
    LODWORD(v8) = 0;
    goto LABEL_20;
  }
  v25 = a2;
  *(float32x2_t *)a2.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
  a2.f32[2] = 0.0 - a2.f32[2];
  a2.i32[3] = 0;
  v9 = sub_22646486C(a2, a5, a6, a7);
  if ((_DWORD)v9)
  {
    v8 = v9;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    a2 = v25;
    if ((a1 & 2) == 0)
    {
      if ((a1 & 4) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
LABEL_20:
    a2.i32[3] = 0;
    v10 = sub_22646486C(a2, a5, a6, a7);
    a5 = v28;
    a6 = v29;
    a7 = v30;
    if ((v10 & ~(_DWORD)v8) != 0)
      v11 = v10;
    else
      v11 = 0;
    v8 = v11 | v8;
    if ((a1 & 4) == 0)
    {
LABEL_24:
      if ((a1 & 8) != 0)
        goto LABEL_40;
      goto LABEL_32;
    }
LABEL_28:
    *(float32x2_t *)v12.f32 = vsub_f32(0, *(float32x2_t *)a3.f32);
    v12.f32[2] = 0.0 - a3.f32[2];
    v12.i32[3] = 0;
    v13 = sub_22646486C(v12, a5, a6, a7);
    a5 = v28;
    a6 = v29;
    a7 = v30;
    if ((v13 & ~(_DWORD)v8) != 0)
      v14 = v13;
    else
      v14 = 0;
    v8 = v14 | v8;
    if ((a1 & 8) != 0)
      goto LABEL_40;
LABEL_32:
    if ((a1 & 0x20) != 0)
      goto LABEL_44;
LABEL_33:
    if ((a1 & 0x10) == 0)
      return v8;
    goto LABEL_34;
  }
  if ((a1 & 2) != 0)
  {
    LODWORD(v8) = 0;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    a2 = v25;
    goto LABEL_20;
  }
  if ((a1 & 4) != 0)
  {
    LODWORD(v8) = 0;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    goto LABEL_28;
  }
  if ((a1 & 8) == 0)
  {
    a6 = v29;
    a7 = v30;
    a5 = v28;
    if ((a1 & 0x20) == 0)
    {
LABEL_6:
      v8 = 0;
      if ((a1 & 0x10) == 0)
        return v8;
      goto LABEL_34;
    }
    goto LABEL_17;
  }
  LODWORD(v8) = 0;
  a6 = v29;
  a7 = v30;
  a5 = v28;
LABEL_40:
  v19 = a3;
  v19.i32[3] = 0;
  v20 = sub_22646486C(v19, a5, a6, a7);
  a5 = v28;
  a6 = v29;
  a7 = v30;
  if ((v20 & ~(_DWORD)v8) != 0)
    v21 = v20;
  else
    v21 = 0;
  v8 = v21 | v8;
  if ((a1 & 0x20) == 0)
    goto LABEL_33;
LABEL_44:
  v22 = vnegq_f32(a4);
  v22.i32[3] = 0;
  v23 = sub_22646486C(v22, a5, a6, a7);
  a5 = v28;
  a6 = v29;
  a7 = v30;
  if ((v23 & ~(_DWORD)v8) != 0)
    v24 = v23;
  else
    v24 = 0;
  v8 = v24 | v8;
  if ((a1 & 0x10) != 0)
  {
LABEL_34:
    v15 = a4;
    v15.i32[3] = 0;
    v16 = sub_22646486C(v15, a5, a6, a7);
    if ((v16 & ~(_DWORD)v8) != 0)
      v17 = v16;
    else
      v17 = 0;
    return v17 | v8;
  }
  return v8;
}

uint64_t sub_226464C40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, float32x4_t a8@<Q5>, float32x4_t a9@<Q6>, float32x4_t a10@<Q7>, __int128 a11, __int128 a12)
{
  __int128 v13;
  char v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  char v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  __int128 v38;
  float32x4_t v39;
  simd_float4 v40;
  int8x16_t v41;
  simd_float4 v42;
  simd_float4 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v52;
  int32x4_t v54;
  float v56;
  simd_float4x4 v57;
  simd_float4x4 v58;

  v13 = 0uLL;
  if ((_DWORD)result)
  {
    v14 = result;
    v57.columns[2] = (simd_float4)a11;
    v57.columns[3] = (simd_float4)a12;
    v57.columns[0] = (simd_float4)a9;
    v57.columns[1] = (simd_float4)a10;
    v58 = __invert_f4(v57);
    v15.i64[1] = a7.i64[1];
    v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v58.columns[0], a7.f32[0]), (float32x4_t)v58.columns[1], *(float32x2_t *)a7.f32, 1), (float32x4_t)v58.columns[2], a7, 2), (float32x4_t)v58.columns[3], a7, 3);
    v58.columns[2].f32[0] = vmuls_lane_f32(0.5, a3, 2);
    v17 = vmul_f32(*(float32x2_t *)a3.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v58.columns[0].f32 = vsub_f32(*(float32x2_t *)v16.f32, v17);
    v58.columns[0].f32[2] = v16.f32[2] - v58.columns[2].f32[0];
    v58.columns[0].i32[3] = 0;
    *(float32x2_t *)v58.columns[1].f32 = vadd_f32(v17, *(float32x2_t *)v16.f32);
    v58.columns[1].f32[2] = v58.columns[2].f32[0] + v16.f32[2];
    v58.columns[1].i32[3] = 0;
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a8.f32, (float32x2_t)0xBF000000BF000000);
    v16.f32[0] = vmuls_lane_f32(-0.5, a8, 2);
    v45 = (int8x16_t)v15;
    v58.columns[2].i64[0] = v15.i64[0];
    v58.columns[2].i64[1] = v16.u32[0];
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a8.f32, (float32x2_t)0x3F0000003F000000);
    v52 = (int8x16_t)v15;
    v54 = (int32x4_t)v16;
    v56 = vmuls_lane_f32(0.5, a8, 2);
    v15.i64[1] = LODWORD(v56);
    v42 = v58.columns[1];
    v43 = v58.columns[0];
    v39 = v15;
    v40 = v58.columns[2];
    result = sub_226464770((float32x4_t)v58.columns[0], (float32x4_t)v58.columns[1], (float32x4_t)v58.columns[2], v15);
    if ((result & 1) != 0)
    {
      v18 = (float32x4_t)v43;
      v18.i32[3] = 0;
      v19 = (float32x4_t)v40;
      v19.i32[3] = 0;
      v41 = (int8x16_t)vmaxnmq_f32(v18, v19);
      v20 = (float32x4_t)v42;
      v20.i32[3] = 0;
      v21 = v39;
      v21.i32[3] = 0;
      v44 = (int8x16_t)vminnmq_f32(v20, v21);
      result = sub_226464A2C(v14, a4, a5, a6, a9, a10, (float32x4_t)a11);
      v22.i32[0] = 0;
      v23 = 0;
      v24.i32[0] = result & 1;
      v25 = (int32x4_t)v41;
      v27 = (int32x4_t)v44;
      v26 = (int32x4_t)v45;
      v25.i32[0] = v45.i32[0];
      v28 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v24, v22), 0), v41, (int8x16_t)v25);
      v25.i32[0] = result & 2;
      v29 = (int32x4_t)v44;
      v29.i32[0] = v52.i32[0];
      v30 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v25, v22), 0), v44, (int8x16_t)v29);
      v29.i32[0] = result & 4;
      v26.i32[0] = result & 8;
      v27.i32[0] = result & 0x20;
      v28.i32[1] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vceqq_s32(v29, v22), 0), v28, v45).i32[1];
      v30.i32[1] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vceqq_s32(v26, v22), 0), v30, v52).i32[1];
      v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v27, v22), 0);
      v32 = v28;
      v33 = v54;
      v32.i32[2] = v54.i32[0];
      v33.i32[0] = result & 0x10;
      v34 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v33, v22), 0);
      v35 = v30;
      *(float *)&v35.i32[2] = v56;
      v36 = vbslq_s8(v31, v28, v32);
      v37 = vbslq_s8(v34, v30, v35);
      *(float32x2_t *)&v13 = vmul_f32(vadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v37.i8), (float32x2_t)0x3F0000003F000000);
      *((float *)&v13 + 2) = (float)(*(float *)&v36.i32[2] + *(float *)&v37.i32[2]) * 0.5;
      HIDWORD(v13) = 0;
      *(float32x2_t *)&v38 = vsub_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v36.i8);
      *((float *)&v38 + 2) = *(float *)&v37.i32[2] - *(float *)&v36.i32[2];
      HIDWORD(v38) = 0;
    }
    else
    {
      v23 = 1;
      v38 = 0uLL;
      v13 = 0uLL;
    }
  }
  else
  {
    v23 = 1;
    v38 = 0uLL;
  }
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v38;
  *(_BYTE *)(a2 + 32) = v23;
  return result;
}

float sub_226464E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float v11;
  float v12;
  float result;
  uint64_t v14;

  v1 = v0;
  v2 = sub_22655CB48();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22655CA34();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity;
  v11 = *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity);
  v12 = *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity);
  if (v11 == 1.0)
  {
    if (v12 != 1.0)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDE7C18], v2);
      sub_22655CA28();
      goto LABEL_8;
    }
    if (v11 != 1.0)
    {
LABEL_6:
      sub_22655CA1C();
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDE7570], v6);
LABEL_8:
      swift_beginAccess();
      sub_22655CA70();
      swift_endAccess();
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_6;
  }
  result = *(float *)(v1 + v10);
  *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = result;
  return result;
}

uint64_t sub_226465028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8RoomPlan22MeshUpdateScanMaterial_customMaterial;
  v2 = sub_22655CAD0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_22646508C()
{
  return type metadata accessor for SimpleScanMaterial();
}

uint64_t type metadata accessor for SimpleScanMaterial()
{
  uint64_t result;

  result = qword_255842788;
  if (!qword_255842788)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2264650D0()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for ScanEntity()
{
  uint64_t result;

  result = qword_2558428C0;
  if (!qword_2558428C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_226465150()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22655C140();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_226465224(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = 0;
  v14 = MEMORY[0x24BEE4AF8];
  v2 = result + 64;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v13 = result;
  while (v5)
  {
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v8 = v7 | (v1 << 6);
LABEL_19:
    v12 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v8);
    if (*(_BYTE *)(v12 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3
      && *(_BYTE *)(v12 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) != 10)
    {
      swift_retain();
      sub_22655D364();
      sub_22655D388();
      sub_22655D394();
      sub_22655D370();
      result = v13;
    }
  }
  if (__OFADD__(v1++, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v1 >= v6)
    goto LABEL_26;
  v10 = *(_QWORD *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_18:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_19;
  }
  v11 = v1 + 1;
  if (v1 + 1 >= v6)
    goto LABEL_26;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
    goto LABEL_17;
  v11 = v1 + 2;
  if (v1 + 2 >= v6)
    goto LABEL_26;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
    goto LABEL_17;
  v11 = v1 + 3;
  if (v1 + 3 >= v6)
    goto LABEL_26;
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
    goto LABEL_17;
  v11 = v1 + 4;
  if (v1 + 4 >= v6)
  {
LABEL_26:
    swift_release();
    return v14;
  }
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
  {
LABEL_17:
    v1 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v6)
      goto LABEL_26;
    v10 = *(_QWORD *)(v2 + 8 * v1);
    ++v11;
    if (v10)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2264653F8(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  float v50;
  float *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t *v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  __n128 v60;
  __n128 v61;
  unsigned __int32 v62;
  int64_t v63;
  float32x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int32 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t inited;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  char *v101;
  double (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  _BOOL4 IsVoiceOverRunning;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x4_t *v141;
  unint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  unint64_t v148;
  float32x4_t v149;
  float32x4_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  int64_t v172;
  int isUniquelyReferenced_nonNull_native;
  int64_t v174;
  uint64_t v175;
  int64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  int v207;
  int64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __n128 v237;
  unsigned int v238;
  __n128 v239;
  __int128 v240;
  __int128 v241;
  __n128 v242;
  __n128 v243;
  void (*v244)(char *, uint64_t);
  float32x4_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  float32x4_t v251;
  char *v252;
  uint64_t v253;
  void (*v254)(char *, uint64_t, uint64_t);
  uint64_t v255;
  char *v256;
  __n128 v257;
  float32x4_t v258;
  float32x4_t v259;
  uint64_t v260;
  float32x4_t v261;
  float32x4_t v262;
  char *v263;
  float32x4_t v264;
  unsigned int (*v265)(uint64_t, uint64_t, uint64_t);
  uint64_t v266;
  uint64_t v267;
  float32x4_t v268;
  char *v269;
  float32x4_t *v270;
  _QWORD v271[3];
  uint64_t v272;
  uint64_t v273;
  int v274;
  char v275;
  simd_float4x4 v276;
  simd_float4x4 v277;

  v5 = v4;
  v6 = v3;
  v274 = a2;
  v255 = a1;
  v260 = sub_22655C830();
  v259.i64[0] = *(_QWORD *)(v260 - 8);
  MEMORY[0x24BDAC7A8](v260);
  v258.i64[0] = (uint64_t)&v229 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22655C434();
  MEMORY[0x24BDAC7A8](v9);
  v252 = (char *)&v229 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22655C4F4();
  v248 = *(_QWORD *)(v11 - 8);
  v249 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v250 = (char *)&v229 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257.n128_u64[0] = sub_22655C518();
  v253 = *(_QWORD *)(v257.n128_u64[0] - 8);
  MEMORY[0x24BDAC7A8](v257.n128_u64[0]);
  v251.i64[0] = (uint64_t)&v229 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v14);
  v266 = (uint64_t)&v229 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v265 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v229 - v17);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v18);
  v264.i64[0] = (uint64_t)&v229 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841208);
  MEMORY[0x24BDAC7A8](v20);
  v263 = (char *)&v229 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v229 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v261.i64[0] = (uint64_t)&v229 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v262.i64[0] = (uint64_t)&v229 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (float *)((char *)&v229 - v30);
  v32 = sub_22655C140();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v256 = (char *)&v229 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v229 - v37;
  if (qword_25583F808 != -1)
  {
    v80 = v36;
    swift_once();
    v36 = v80;
  }
  v39 = qword_25585AC80;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v267 = v36;
  v254 = v40;
  v40(v38, v6 + qword_25585ADF8, v36);
  swift_beginAccess();
  v41 = *(_QWORD *)(v39 + 24);
  if (!*(_QWORD *)(v41 + 16))
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v38, v267);
  swift_bridgeObjectRetain();
  v42 = sub_226534858((uint64_t)v38);
  if ((v43 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v38, v267);
  }
  v247 = v24;
  v44 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42);
  swift_retain();
  swift_bridgeObjectRelease();
  v45 = *(void (**)(char *, uint64_t))(v33 + 8);
  v46 = v44;
  v244 = v45;
  v45(v38, v267);
  if ((sub_22655C890() & 1) == 0)
    goto LABEL_11;
  v47 = v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  sub_22643D7A0(v47, (uint64_t)v31, &qword_255841208);
  v48 = type metadata accessor for AnimationGraph();
  if ((*(unsigned int (**)(float *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v31, 1, v48) == 1)
  {
    sub_22643D7E4((uint64_t)v31, &qword_255841208);
    goto LABEL_11;
  }
  v50 = v31[4];
  sub_226446490((uint64_t)v31);
  if (v50 != 0.0)
  {
LABEL_11:
    if ((sub_22655C890() & 1) != 0)
      goto LABEL_13;
  }
  sub_22655C89C();
LABEL_13:
  if (qword_25583F9D0 != -1)
    swift_once();
  v51 = (float *)off_25584AF28;
  swift_beginAccess();
  if (!*((_BYTE *)v51 + 177))
  {
    swift_beginAccess();
    if (*((_BYTE *)v51 + 41) == 1 && *(_BYTE *)(v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) == 10)
    {
      swift_beginAccess();
      v52 = swift_bridgeObjectRetain();
      v53 = sub_226465224(v52);
      swift_beginAccess();
      sub_2264419FC(v53, v51[11]);
      swift_bridgeObjectRelease();
      sub_22655C89C();
    }
  }
  if ((sub_22655C890() & 1) == 0)
    return swift_release();
  v54 = qword_25585AE08;
  if (*(_BYTE *)(v6 + qword_25585AE08) == 1)
  {
    v55 = *(_OWORD *)(v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    v56 = &OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
  }
  else
  {
    v55 = *(_OWORD *)(v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
    v56 = &OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  }
  v57 = *(_OWORD *)(v44 + *v56);
  v240 = v55;
  v241 = v57;
  *(double *)v58.i64 = MEMORY[0x227699714]();
  v268 = v58;
  v245 = v59;
  v242 = v61;
  v243 = v60;
  v232 = v54;
  v62 = *(unsigned __int8 *)(v6 + v54);
  v63 = swift_retain();
  v64 = sub_2264CD060(v63, v62, v268, v245, v243, v242);
  swift_release();
  v65 = qword_2558428B8;
  v66 = *(_QWORD *)(v6 + qword_2558428B8);
  v268.i64[0] = v6;
  v245.i64[0] = (uint64_t)v64;
  if (v66)
  {
    swift_retain();
    v67 = sub_2264CCB70(v64, 0.001);
    swift_release();
    if (v67)
      goto LABEL_53;
  }
  v231 = v65;
  v68 = (_BYTE *)OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects;
  v69 = *(unint64_t *)((char *)v64->u64 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects);
  if (v69 >> 62)
  {
    swift_bridgeObjectRetain();
    v70 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  else
  {
    v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v71 = MEMORY[0x24BEE4AF8];
  v246 = v44;
  if (v70 >= 1)
  {
    v72 = *(_QWORD *)&v68[v245.i64[0]];
    if (v72 >> 62)
    {
      swift_bridgeObjectRetain();
      v46 = sub_22655D400();
      if (v46)
        goto LABEL_31;
    }
    else
    {
      v46 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v46)
      {
LABEL_31:
        v242.n128_u64[0] = v72;
        v243.n128_u64[0] = v5;
        v271[0] = v71;
        sub_2264C7A18(0, v46 & ~(v46 >> 63), 0);
        if (v46 < 0)
        {
          __break(1u);
          goto LABEL_98;
        }
        v73 = 0;
        v71 = v271[0];
        v74 = v242.n128_u64[0];
        v75 = v242.n128_u64[0] & 0xC000000000000001;
        do
        {
          if (v75)
            v76 = MEMORY[0x2276999E4](v73, v74);
          else
            v76 = swift_retain();
          v77 = *(_BYTE *)(v76 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
          swift_release();
          v271[0] = v71;
          v79 = *(_QWORD *)(v71 + 16);
          v78 = *(_QWORD *)(v71 + 24);
          if (v79 >= v78 >> 1)
          {
            sub_2264C7A18(v78 > 1, v79 + 1, 1);
            v74 = v242.n128_u64[0];
            v71 = v271[0];
          }
          ++v73;
          *(_QWORD *)(v71 + 16) = v79 + 1;
          *(_BYTE *)(v71 + v79 + 32) = v77;
          v6 = v268.i64[0];
        }
        while (v46 != v73);
        swift_bridgeObjectRelease();
        v5 = v243.n128_u64[0];
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
LABEL_43:
    v46 = v246;
  }
  v243.n128_u64[0] = v5;
  if (qword_25583F948 != -1)
    swift_once();
  v242.n128_u64[0] = qword_25585AFC8;
  v81 = v245.i64[0];
  v237 = *(__n128 *)(v245.i64[0] + 16);
  v82 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
  v238 = *(unsigned __int8 *)(v6 + qword_255842890);
  v239.n128_u32[0] = v82;
  v83 = v264.i64[0];
  sub_22643D7A0(v245.i64[0] + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_curve, v264.i64[0], (uint64_t *)&unk_255848090);
  v236 = *(_QWORD *)(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_polygonCorners);
  v235 = *(_QWORD *)(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_straightOpeningElements);
  v234 = *(_QWORD *)(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_curvedOpeningElements);
  v233 = *(_QWORD *)(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjectElements);
  v230 = OBJC_IVAR____TtC8RoomPlan8ScanItem_type;
  v84 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type);
  v85 = (uint64_t)v265;
  sub_22643D7A0(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_leftStrut, (uint64_t)v265, &qword_255840818);
  v86 = v266;
  sub_22643D7A0(v81 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_rightStrut, v266, &qword_255840818);
  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  inited = swift_initStaticObject();
  sub_2264E5BA8(v238, v239.n128_i32[0], v83, v236, v235, v234, v233, v71, v237, v84 != 6, v84 != 6, v85, v86, inited);
  v89 = v88;
  swift_bridgeObjectRelease();
  sub_22643D7E4(v86, &qword_255840818);
  sub_22643D7E4(v85, &qword_255840818);
  sub_22643D7E4(v83, (uint64_t *)&unk_255848090);
  v90 = qword_2558428B0;
  LODWORD(v266) = sub_2264955A0(*(_QWORD *)(v89 + 32), *(_QWORD *)(v268.i64[0] + qword_2558428B0));
  v91 = (_QWORD *)(v268.i64[0] + qword_25585AE00);
  swift_beginAccess();
  sub_226438600((uint64_t)v91, (uint64_t)v271);
  v92 = v272;
  v93 = v273;
  __swift_project_boxed_opaque_existential_1(v271, v272);
  LODWORD(v265) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v93 + 40))(*(_QWORD *)(*(_QWORD *)(v89 + 16) + 16), v92, v93);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v271);
  *(_QWORD *)(v268.i64[0] + v90) = *(_QWORD *)(v89 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = *(_QWORD *)(v268.i64[0] + qword_2558428A0 + 8);
  v264.i64[0] = *(_QWORD *)(v268.i64[0] + qword_2558428A0);
  v242.n128_u64[0] = v94;
  v95 = v91[3];
  v96 = v91[4];
  v97 = __swift_project_boxed_opaque_existential_1(v91, v95);
  v98 = *(_QWORD *)(v95 - 8);
  v99 = MEMORY[0x24BDAC7A8](v97);
  v101 = (char *)&v229 - v100;
  (*(void (**)(char *, double))(v98 + 16))((char *)&v229 - v100, v99);
  v102 = *(double (**)(uint64_t, uint64_t))(v96 + 16);
  v103 = v96;
  v104 = v89;
  v105.n128_f64[0] = v102(v95, v103);
  v239 = v105;
  v106 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v101, v95);
  v107 = ((uint64_t (*)(uint64_t, __n128))v264.i64[0])(v106, v239);
  v108 = v243.n128_u64[0];
  sub_226466EB4(v89, v107 & 1 | ((v266 & 1) == 0) | v265 & 1);
  if (v108)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  sub_226438600((uint64_t)v91, (uint64_t)v271);
  v109 = v272;
  v110 = v273;
  __swift_project_boxed_opaque_existential_1(v271, v272);
  v112 = *(_QWORD *)(v104 + 16);
  v111 = *(_QWORD *)(v104 + 24);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v110 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v113(v246, v112, v111, v109, v110, a3);
  v5 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v271);
  v6 = v268.i64[0];
  *(_QWORD *)(v268.i64[0] + v231) = v245.i64[0];
  swift_retain();
  swift_release();
  IsVoiceOverRunning = UIAccessibilityIsVoiceOverRunning();
  v46 = v246;
  if (IsVoiceOverRunning && *(_BYTE *)(v246 + v230) == 2 && *(_BYTE *)(v6 + v232) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v115 = swift_allocObject();
    *(_OWORD *)(v115 + 16) = xmmword_22655FA20;
    sub_22655C3B0();
    *(_QWORD *)(v115 + 32) = MEMORY[0x227698A84](*(__n128 *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions));
    v271[0] = v115;
    sub_22655CEE4();
    (*(void (**)(char *, _QWORD, uint64_t))(v248 + 104))(v250, *MEMORY[0x24BDE6588], v249);
    sub_22655C428();
    v266 = v104;
    v116 = v251.i64[0];
    sub_22655C500();
    v117 = v258.i64[0];
    sub_22655C800();
    v118 = v257.n128_u64[0];
    sub_22655C818();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v259.i64[0] + 8))(v117, v260);
    (*(void (**)(uint64_t, unint64_t))(v253 + 8))(v116, v118);
  }
  else
  {
    v119 = v258.i64[0];
    sub_22655C800();
    sub_22655C824();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v259.i64[0] + 8))(v119, v260);
  }
LABEL_53:
  type metadata accessor for ScanEntity();
  sub_22655C260();
  sub_22655C290();
  v120 = *(_QWORD *)(v6 + qword_25585AE18);
  if (v120)
    sub_22655C89C();
  v260 = v120;
  v68 = &unk_25585A000;
  if ((dword_25585AED8 & 1) != 0)
  {
    if (qword_25583F908 == -1)
    {
LABEL_57:
      v121 = qword_25585AEE0;
      if (qword_25585AEE0)
      {
        if (*(_BYTE *)(qword_25585AEE0 + 16) == 1)
        {
          swift_beginAccess();
          v122 = *(_QWORD *)(v121 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          v123 = sub_22649C86C(v6, v122);
          swift_release();
          swift_bridgeObjectRelease();
          if (v123)
          {
            if ((sub_22655C890() & 1) == 0)
              sub_22655C89C();
            swift_release();
          }
        }
      }
      goto LABEL_63;
    }
LABEL_98:
    swift_once();
    goto LABEL_57;
  }
LABEL_63:
  if ((!v260 || (sub_22655C890() & 1) == 0) && ((v68[3800] & 1) == 0 || *(_BYTE *)(v6 + v232) != 1))
    goto LABEL_70;
  v124 = v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  v125 = v262.i64[0];
  sub_22643D7A0(v124, v262.i64[0], &qword_255841208);
  v126 = type metadata accessor for AnimationGraph();
  v127 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 48);
  if (v127(v125, 1, v126) == 1
    || (v253 = *(unsigned int *)(v125 + 16),
        sub_226446490(v125),
        v125 = v261.i64[0],
        sub_22643D7A0(v124, v261.i64[0], &qword_255841208),
        v127(v125, 1, v126) == 1))
  {
    sub_22643D7E4(v125, &qword_255841208);
LABEL_70:
    if (*(_QWORD *)(v6 + qword_2558428A8))
      REMeshComponentSetBoundsMargin();
    swift_release();
    return swift_release();
  }
  v266 = v126;
  v128 = swift_bridgeObjectRetain();
  v252 = (char *)sub_226467830(v128);
  swift_bridgeObjectRelease();
  v129 = sub_226446490(v125);
  v130 = *(__n128 *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  v131 = *(__n128 *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  v257 = (__n128)xmmword_22655FA70;
  *(double *)v276.columns[0].i64 = MEMORY[0x227699714](v129, v130, v131);
  v277 = __invert_f4(v276);
  v261 = (float32x4_t)v277.columns[1];
  v262 = (float32x4_t)v277.columns[0];
  v258 = (float32x4_t)v277.columns[3];
  v259 = (float32x4_t)v277.columns[2];
  v132 = swift_bridgeObjectRetain();
  v133 = sub_22644618C(v132);
  swift_bridgeObjectRelease();
  v134 = *(_QWORD *)(v133 + 16);
  swift_bridgeObjectRelease();
  v243.n128_u64[0] = v5;
  v265 = v127;
  if (v134)
  {
    v135 = swift_bridgeObjectRetain();
    v136 = sub_22644618C(v135);
    swift_bridgeObjectRelease();
    v137 = *(_QWORD *)(v136 + 16);
    if (v137)
    {
      v138 = v46;
      v270 = (float32x4_t *)MEMORY[0x24BEE4AF8];
      sub_2264C1310(0, v137, 0);
      v140 = 0;
      v141 = v270;
      v142 = v270[1].u64[0];
      v144 = v261;
      v143 = v262;
      v146 = v258;
      v145 = v259;
      do
      {
        v147 = *(float32x4_t *)(v136 + 16 * v140 + 32);
        v270 = v141;
        v148 = v141[1].u64[1];
        if (v142 >= v148 >> 1)
        {
          v264 = v139;
          v251 = v147;
          sub_2264C1310(v148 > 1, v142 + 1, 1);
          v147 = v251;
          v139.i32[3] = v264.i32[3];
          v146 = v258;
          v145 = v259;
          v144 = v261;
          v143 = v262;
          v141 = v270;
        }
        v149 = vaddq_f32(v146, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v147.f32[0]), v144, *(float32x2_t *)v147.f32, 1), v145, v147, 2));
        ++v140;
        v149.i32[3] = v139.i32[3];
        v141[1].i64[0] = v142 + 1;
        v141[v142++ + 2] = v149;
        v139 = v149;
      }
      while (v137 != v140);
      swift_bridgeObjectRelease();
      v46 = v138;
    }
    else
    {
      swift_bridgeObjectRelease();
      v141 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    sub_226503DBC(*(double *)(v46 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions));
    v141 = v150;
  }
  v151 = *(_QWORD *)(v245.i64[0] + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childOpenings);
  v152 = (uint64_t)v263;
  if (!(v151 >> 62))
  {
    v153 = *(_QWORD *)((v151 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    v246 = v46;
    if (v153)
      goto LABEL_84;
LABEL_100:
    v155 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_101:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v166 = v155[2];
    if (!v166)
    {
      v168 = (uint64_t *)MEMORY[0x24BEE4AF8];
      goto LABEL_125;
    }
    swift_bridgeObjectRetain();
    v167 = 0;
    v168 = (uint64_t *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v169 = v155[v167 + 4];
      v170 = *(_QWORD *)(v169 + 16);
      v171 = v168[2];
      v172 = v171 + v170;
      if (__OFADD__(v171, v170))
        goto LABEL_178;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v172 <= (uint64_t)((unint64_t)v168[3] >> 1))
      {
        if (*(_QWORD *)(v169 + 16))
          goto LABEL_114;
      }
      else
      {
        if (v171 <= v172)
          v174 = v171 + v170;
        else
          v174 = v171;
        v168 = (uint64_t *)sub_226487704(isUniquelyReferenced_nonNull_native, v174, 1, (unint64_t)v168);
        if (*(_QWORD *)(v169 + 16))
        {
LABEL_114:
          v175 = v168[2];
          v176 = ((unint64_t)v168[3] >> 1) - v175;
          v177 = type metadata accessor for LineAnimation();
          if (v176 < v170)
            goto LABEL_182;
          v178 = *(_QWORD *)(v177 - 8);
          v179 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
          v180 = *(_QWORD *)(v178 + 72);
          v181 = (char *)v168 + v179 + v180 * v175;
          v182 = v169 + v179;
          v183 = v180 * v170;
          v184 = &v181[v183];
          v185 = v182 + v183;
          if (v182 < (unint64_t)v184 && (unint64_t)v181 < v185)
            goto LABEL_188;
          swift_arrayInitWithCopy();
          if (v170)
          {
            v187 = v168[2];
            v188 = __OFADD__(v187, v170);
            v189 = v187 + v170;
            if (v188)
              goto LABEL_184;
            v168[2] = v189;
          }
          goto LABEL_104;
        }
      }
      if (v170)
        goto LABEL_179;
LABEL_104:
      ++v167;
      swift_bridgeObjectRelease();
      if (v166 == v167)
      {
        swift_bridgeObjectRelease();
LABEL_125:
        swift_bridgeObjectRelease();
        v166 = *(_QWORD *)(v245.i64[0] + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects);
        if ((unint64_t)v166 >> 62)
          goto LABEL_186;
        v190 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_retain();
LABEL_127:
        v261.i64[0] = (uint64_t)v168;
        v191 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (v190)
        {
          v263 = (char *)v166;
          v264.i64[0] = v166 & 0xC000000000000001;
          v192 = 4;
          v168 = &qword_255841208;
          v262.i64[0] = v190;
          do
          {
            v193 = v192 - 4;
            if (v264.i64[0])
            {
              v166 = MEMORY[0x2276999E4](v192 - 4, v166);
              v194 = v192 - 3;
              if (__OFADD__(v193, 1))
                goto LABEL_177;
            }
            else
            {
              v166 = *(_QWORD *)(v166 + 8 * v192);
              swift_retain();
              v194 = v192 - 3;
              if (__OFADD__(v193, 1))
              {
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
LABEL_186:
                swift_bridgeObjectRetain_n();
                swift_retain();
                v190 = sub_22655D400();
                goto LABEL_127;
              }
            }
            v195 = sub_226464594(*(unsigned __int8 *)(v166 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category));
            v196 = v166 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
            swift_beginAccess();
            v197 = v196;
            v198 = (uint64_t)v247;
            sub_22643D7A0(v197, (uint64_t)v247, &qword_255841208);
            if (v265(v198, 1, v266) == 1)
            {
              sub_22643D7E4(v198, &qword_255841208);
              swift_release();
            }
            else
            {
              v199 = sub_22648DE08(v166, v246, v195);
              sub_226446490(v198);
              swift_release();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v191 = sub_226487A38(0, v191[2] + 1, 1, v191);
              v201 = v191[2];
              v200 = v191[3];
              if (v201 >= v200 >> 1)
                v191 = sub_226487A38((_QWORD *)(v200 > 1), v201 + 1, 1, v191);
              v191[2] = v201 + 1;
              v191[v201 + 4] = v199;
            }
            ++v192;
            v166 = (uint64_t)v263;
          }
          while (v194 != v262.i64[0]);
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        if (!v191[2])
        {
          v203 = MEMORY[0x24BEE4AF8];
LABEL_166:
          v222 = v261.i64[0];
          swift_bridgeObjectRelease();
          v269 = v252;
          sub_22646AF74(v222);
          sub_22646AF74(v203);
          v223 = (uint64_t)v269;
          v6 = v268.i64[0];
          if (qword_25583F908 != -1)
            swift_once();
          v224 = qword_25585AEE0;
          v225 = v243.n128_u64[0];
          v226 = v256;
          if (qword_25585AEE0)
          {
            v254(v256, v246 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v267);
            swift_beginAccess();
            v227 = *(_QWORD *)(v224 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            v228 = sub_22649C86C(v6, v227);
            swift_release();
            swift_bridgeObjectRelease();
            if (v228)
            {
              sub_22649D7F4(v223);
              swift_release();
            }
            v244(v226, v267);
          }
          if (v260)
          {
            v275 = 0;
            sub_226491224(v223, v253, v255, v274 & 1);
            if (v225)
            {
              swift_release();
              swift_release();
              return swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_70;
        }
        v168 = (uint64_t *)v191[2];
        swift_bridgeObjectRetain();
        v202 = 0;
        v203 = MEMORY[0x24BEE4AF8];
        while (2)
        {
          v204 = v191[(_QWORD)v202 + 4];
          v205 = *(_QWORD *)(v204 + 16);
          v206 = *(_QWORD *)(v203 + 16);
          v166 = v206 + v205;
          if (__OFADD__(v206, v205))
            goto LABEL_180;
          swift_bridgeObjectRetain();
          v207 = swift_isUniquelyReferenced_nonNull_native();
          if (v207 && v166 <= *(_QWORD *)(v203 + 24) >> 1)
          {
            if (!*(_QWORD *)(v204 + 16))
            {
LABEL_144:
              if (v205)
                goto LABEL_181;
              goto LABEL_145;
            }
          }
          else
          {
            if (v206 <= v166)
              v208 = v206 + v205;
            else
              v208 = v206;
            v203 = sub_226487704(v207, v208, 1, v203);
            if (!*(_QWORD *)(v204 + 16))
              goto LABEL_144;
          }
          v166 = *(_QWORD *)(v203 + 16);
          v209 = (*(_QWORD *)(v203 + 24) >> 1) - v166;
          v210 = type metadata accessor for LineAnimation();
          if (v209 < v205)
            goto LABEL_183;
          v211 = *(_QWORD *)(v210 - 8);
          v212 = (*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
          v213 = *(_QWORD *)(v211 + 72);
          v214 = v203 + v212 + v213 * v166;
          v215 = v204 + v212;
          v216 = v213 * v205;
          v217 = v214 + v216;
          v218 = v215 + v216;
          if (v215 < v217 && v214 < v218)
            goto LABEL_188;
          swift_arrayInitWithCopy();
          if (v205)
          {
            v220 = *(_QWORD *)(v203 + 16);
            v188 = __OFADD__(v220, v205);
            v221 = v220 + v205;
            if (v188)
              goto LABEL_185;
            *(_QWORD *)(v203 + 16) = v221;
          }
LABEL_145:
          v202 = (uint64_t *)((char *)v202 + 1);
          swift_bridgeObjectRelease();
          if (v168 == v202)
          {
            swift_bridgeObjectRelease();
            goto LABEL_166;
          }
          continue;
        }
      }
    }
  }
  swift_bridgeObjectRetain_n();
  v153 = sub_22655D400();
  v246 = v46;
  if (!v153)
    goto LABEL_100;
LABEL_84:
  if (v153 >= 1)
  {
    v154 = 0;
    v264.i64[0] = v151 & 0xC000000000000001;
    v155 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v156 = v151;
    do
    {
      if (v264.i64[0])
      {
        v157 = MEMORY[0x2276999E4](v154, v151);
      }
      else
      {
        v157 = *(_QWORD *)(v151 + 8 * v154 + 32);
        swift_retain();
      }
      v158 = v157 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
      swift_beginAccess();
      sub_22643D7A0(v158, v152, &qword_255841208);
      if (v265(v152, 1, v266) == 1)
      {
        sub_22643D7E4(v152, &qword_255841208);
        swift_release();
      }
      else
      {
        *(double *)v159.i64 = MEMORY[0x227699714](*(__n128 *)(v157 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition), *(__n128 *)(v157 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation), v257);
        v163 = sub_22648D56C(v141, v159, v160, v161, v162, v262, v261, v259, v258);
        sub_226446490(v152);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v155 = sub_226487A38(0, v155[2] + 1, 1, v155);
        v165 = v155[2];
        v164 = v155[3];
        if (v165 >= v164 >> 1)
          v155 = sub_226487A38((_QWORD *)(v164 > 1), v165 + 1, 1, v155);
        v155[2] = v165 + 1;
        v155[v165 + 4] = v163;
        v152 = (uint64_t)v263;
      }
      ++v154;
      v151 = v156;
    }
    while (v153 != v154);
    goto LABEL_101;
  }
  __break(1u);
LABEL_188:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

void sub_226466E1C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + qword_2558428A8) = 0;
  *(_QWORD *)(v0 + qword_2558428B0) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + qword_2558428B8) = 0;
  swift_release();
  sub_22655D3E8();
  __break(1u);
}

uint64_t sub_226466EB4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t ComponentByClass;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  void (*v55)(__int128 *__return_ptr, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69[6];
  uint64_t v70;

  v4 = v3;
  v5 = v2;
  v64 = a1;
  v58 = sub_22655C1C4();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842910);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22655C2CC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842918);
  MEMORY[0x24BDAC7A8](v16);
  v60 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v66 = (char *)&v53 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v59 = (char *)&v53 - v21;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v63 = *(unsigned __int8 *)(v5 + qword_255842890);
  v70 = v13;
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v26 = (char *)&v53 - v25;
  v61 = v24;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v24)((char *)&v53 - v25, 1, 1, v12, v23);
  if ((a2 & 1) == 0)
  {
    v31 = v70;
LABEL_9:
    v32 = (uint64_t)v66;
    goto LABEL_10;
  }
  v65 = v12;
  v62 = v3;
  if (qword_25583F948 != -1)
    swift_once();
  sub_2264E58B0(v64, v63);
  v27 = v5 + qword_25585AE00;
  swift_beginAccess();
  sub_226438600(v27, (uint64_t)v69);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558417E0);
  type metadata accessor for MeshUpdateScanMaterial();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v31 = v70;
    v12 = v65;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v65);
    v4 = v62;
    goto LABEL_9;
  }
  v54 = (uint64_t *)v27;
  swift_release();
  v55 = *(void (**)(__int128 *__return_ptr, uint64_t))(v5 + qword_255842898);
  v28 = v65;
  sub_22655CB00();
  v29 = sub_22655C938();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v30 = v62;
  v55(&v67, v29);
  v4 = v30;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v28);
    return sub_22643D7E4((uint64_t)v26, &qword_255842918);
  }
  v31 = v70;
  v32 = (uint64_t)v66;
  if (v68)
  {
    sub_22643D7E4((uint64_t)v26, &qword_255842918);
    sub_226438644(&v67, (uint64_t)v69);
    v12 = v65;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v26, v15, v65);
    v61(v26, 0, 1, v12);
    v52 = v54;
    swift_beginAccess();
    __swift_assign_boxed_opaque_existential_1(v52, v69);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    *(_QWORD *)(v5 + qword_2558428A8) = 0;
  }
  else
  {
    v12 = v65;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v65);
    sub_22643D7E4((uint64_t)&v67, &qword_255842920);
  }
LABEL_10:
  if (*(_QWORD *)(v5 + qword_2558428A8))
    return sub_22643D7E4((uint64_t)v26, &qword_255842918);
  v66 = (char *)qword_2558428A8;
  v34 = v5;
  v62 = v4;
  sub_22643D7A0((uint64_t)v26, v32, &qword_255842918);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v35(v32, 1, v12) == 1)
  {
    if (qword_25583F948 != -1)
      swift_once();
    v36 = v59;
    sub_2264E58B0(v64, v63);
    v37 = (uint64_t)v36;
    sub_22643D7E4((uint64_t)v26, &qword_255842918);
    sub_22643D7E4(v32, &qword_255842918);
  }
  else
  {
    sub_22643D7E4((uint64_t)v26, &qword_255842918);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
    v37 = (uint64_t)v59;
    v38(v59, v32, v12);
  }
  v61((char *)v37, 0, 1, v12);
  sub_226467B2C(v37, (uint64_t)v26);
  v39 = (uint64_t)v60;
  if (qword_25583F948 != -1)
    swift_once();
  sub_22643D7A0((uint64_t)v26, v39, &qword_255842918);
  v65 = v12;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v35)(v39, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v40 = sub_226437F28((unint64_t *)&qword_255840100, (uint64_t (*)(uint64_t))type metadata accessor for ScanEntity, (uint64_t)&unk_226560610);
    v41 = (_QWORD *)(v34 + qword_25585AE00);
    swift_beginAccess();
    v42 = v41[3];
    v43 = v41[4];
    v44 = __swift_project_boxed_opaque_existential_1(v41, v42);
    v45 = *(_QWORD *)(v42 - 8);
    v46 = MEMORY[0x24BDAC7A8](v44);
    v48 = (char *)&v53 - v47;
    (*(void (**)(char *, double))(v45 + 16))((char *)&v53 - v47, v46);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v43 + 8))(v69, v42, v43);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v42);
    v49 = v62;
    sub_2264E8D20(v34, v40, v39, (uint64_t)v69);
    sub_22643D7E4((uint64_t)v69, &qword_255843DF0);
    if (v49)
    {
      sub_22643D7E4((uint64_t)v26, &qword_255842918);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v39, v65);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v39, v65);
      v50 = v56;
      sub_22655C7E8();
      sub_22655C170();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v58);
      REMeshComponentGetComponentType();
      ComponentByClass = REEntityGetComponentByClass();
      result = sub_22643D7E4((uint64_t)v26, &qword_255842918);
      *(_QWORD *)&v66[v34] = ComponentByClass;
    }
  }
  return result;
}

uint64_t sub_2264675F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_25585ADF8;
  v2 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + qword_25585AE00);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_226467698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + qword_25585AE18))
  {
    type metadata accessor for ScanEntity();
    swift_retain();
    sub_22655C218();
    swift_release();
  }
  if (qword_25583F908 != -1)
    swift_once();
  if (qword_25585AEE0)
  {
    swift_beginAccess();
    v1 = swift_retain();
    sub_2265402FC(v1);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  v2 = sub_22655C8C0();
  v3 = v2 + qword_25585ADF8;
  v4 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v2 + qword_25585AE00);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_226467828()
{
  return type metadata accessor for ScanEntity();
}

uint64_t sub_226467830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int isUniquelyReferenced_nonNull_native;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;

  v35 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
    }
    else
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_47;
      if (v10 >= v5)
      {
LABEL_42:
        swift_release();
        return v7;
      }
      v11 = *(_QWORD *)(v35 + 8 * v10);
      ++v6;
      if (!v11)
      {
        v6 = v10 + 1;
        if (v10 + 1 >= v5)
          goto LABEL_42;
        v11 = *(_QWORD *)(v35 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 2;
          if (v10 + 2 >= v5)
            goto LABEL_42;
          v11 = *(_QWORD *)(v35 + 8 * v6);
          if (!v11)
          {
            v6 = v10 + 3;
            if (v10 + 3 >= v5)
              goto LABEL_42;
            v11 = *(_QWORD *)(v35 + 8 * v6);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v5)
                goto LABEL_42;
              v11 = *(_QWORD *)(v35 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v6 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_48;
                  if (v6 >= v5)
                    goto LABEL_42;
                  v11 = *(_QWORD *)(v35 + 8 * v6);
                  ++v12;
                  if (v11)
                    goto LABEL_23;
                }
              }
              v6 = v12;
            }
          }
        }
      }
LABEL_23:
      v4 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v7 + 16);
    v16 = v15 + v14;
    if (__OFADD__(v15, v14))
      break;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v16 <= *(_QWORD *)(v7 + 24) >> 1)
    {
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v15 <= v16)
        v18 = v15 + v14;
      else
        v18 = v15;
      v7 = sub_226487704(isUniquelyReferenced_nonNull_native, v18, 1, v7);
      if (!*(_QWORD *)(v13 + 16))
      {
LABEL_4:
        if (v14)
          goto LABEL_44;
        goto LABEL_5;
      }
    }
    v19 = *(_QWORD *)(v7 + 16);
    v20 = (*(_QWORD *)(v7 + 24) >> 1) - v19;
    v21 = type metadata accessor for LineAnimation();
    if (v20 < v14)
      goto LABEL_45;
    v22 = *(_QWORD *)(v21 - 8);
    v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v24 = *(_QWORD *)(v22 + 72);
    v25 = v7 + v23 + v24 * v19;
    v26 = v13 + v23;
    v27 = v24 * v14;
    v28 = v25 + v27;
    v29 = v26 + v27;
    if (v26 < v28 && v25 < v29)
      goto LABEL_49;
    swift_arrayInitWithCopy();
    if (v14)
    {
      v31 = *(_QWORD *)(v7 + 16);
      v32 = __OFADD__(v31, v14);
      v33 = v31 + v14;
      if (v32)
        goto LABEL_46;
      *(_QWORD *)(v7 + 16) = v33;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_226467AE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + qword_25585ADF8;
  v4 = sub_22655C140();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_226467B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_226467CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_226467D44(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))sub_226460D90);
}

uint64_t sub_226467D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_226467D44(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))sub_226460EEC);
}

uint64_t sub_226467D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13, void (*a14)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, double);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;

  v56 = a9;
  v48 = a8;
  v59 = a6;
  v60 = a5;
  v46 = a4;
  v45 = a2;
  v55 = a14;
  v16 = a7 & 1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842928);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_22655CB84();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v52 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_22655C140();
  v22 = *(_QWORD **)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a12 + qword_2558428A8) = 0;
  v50 = qword_2558428B0;
  *(_QWORD *)(a12 + qword_2558428B0) = MEMORY[0x24BEE4AF8];
  v51 = qword_2558428B8;
  *(_QWORD *)(a12 + qword_2558428B8) = 0;
  v57 = a1;
  v26 = a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  v47 = (void (*)(char *, double))v22[2];
  v47(v25, v23);
  v27 = (void (*)(void))v22[4];
  v49 = a12 + qword_25585ADF8;
  v27();
  *(_BYTE *)(a12 + qword_25585AE08) = v16;
  swift_beginAccess();
  sub_226438600(a13 + 32, (uint64_t)v61);
  v28 = v62;
  v29 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  swift_retain();
  v55(&v64, v28, v29, v56);
  v58 = a3;
  v56.n128_u64[0] = (unint64_t)v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  sub_226438644(&v64, a12 + qword_25585AE00);
  v30 = (_QWORD *)(a12 + qword_255842898);
  *v30 = v45;
  v30[1] = a3;
  v31 = (_QWORD *)(a12 + qword_2558428A0);
  v33 = v59;
  v32 = v60;
  *v31 = v46;
  v31[1] = v32;
  *(_BYTE *)(a12 + qword_255842890) = v48;
  *(_QWORD *)(a12 + qword_25585AE18) = v33;
  v34 = a12 + qword_25585AE10;
  *(_DWORD *)v34 = a10;
  *(_BYTE *)(v34 + 4) = a11 & 1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v35 = sub_22655C1DC();
  v36 = v26;
  v37 = v26;
  v38 = (void (*)(char *, uint64_t, uint64_t))v47;
  ((void (*)(char *, uint64_t, uint64_t))v47)(v25, v37, v21);
  v39 = sub_226437F28((unint64_t *)&qword_255840820, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  swift_retain();
  v55 = (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))v39;
  sub_22655D544();
  v40 = (void (*)(char *, uint64_t))v22[1];
  v40(v25, v21);
  sub_22655C884();
  if (v33)
  {
    v38(v25, v36, v21);
    swift_retain();
    *(_QWORD *)&v64 = sub_22655D544();
    *((_QWORD *)&v64 + 1) = v41;
    v40(v25, v21);
    sub_22655CE24();
    sub_22655C884();
    type metadata accessor for ScanEntity();
    sub_22655C230();
    swift_release();
  }
  v55 = (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))v40;
  v42 = sub_22655C56C();
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v56.n128_u64[0], 1, 1, v42);
  type metadata accessor for ScanEntity();
  sub_22655C524();
  sub_22655C8FC();
  sub_22655C2A8();
  if (qword_25583F908 != -1)
    swift_once();
  if (qword_25585AEE0)
  {
    v38(v25, v36, v21);
    sub_22649CF20(v35, (uint64_t)v25);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v55)(v25, v21);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return v35;
}

uint64_t sub_2264685CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_226467D44(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))sub_226460E04);
}

uint64_t sub_226468600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_226467D44(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))sub_226460E78);
}

uint64_t sub_226468634(uint64_t a1, char a2, float a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float v21;
  double v22;
  float32x4_t v28;

  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 24) = v11;
  v12 = (_QWORD **)(v7 + 16);
  *(_QWORD *)(v7 + 32) = v11;
  *(_DWORD *)(v7 + 44) = 1048576000;
  *(float *)(v7 + 40) = a3;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 0;
    do
    {
      v28 = *(float32x4_t *)(a1 + 16 * v14 + 32);
      swift_beginAccess();
      v15 = *v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v12 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v15 = sub_226487C74(0, v15[2] + 1, 1, v15);
        *v12 = v15;
      }
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
      {
        v15 = sub_226487C74((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
        *v12 = v15;
      }
      ++v14;
      v19 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, v28.f32[0]), a5, *(float32x2_t *)v28.f32, 1), a6, v28, 2), a7);
      v19.i32[3] = 0;
      v15[2] = v18 + 1;
      v20 = (float32x4_t *)&v15[4 * v18];
      v20[2] = v19;
      v20[3].f32[0] = a3;
      swift_endAccess();
    }
    while (v13 != v14);
  }
  swift_bridgeObjectRelease();
  sub_2264690BC(a2);
  if (a2 != 2)
  {
    v21 = a3 * 0.05;
    sub_2264687D4(v21);
    *(float *)&v22 = v21;
    sub_226468AFC(v22);
  }
  return v7;
}

uint64_t sub_2264687D4(float a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float v15;
  float32x2_t v16;
  __int128 v17;
  __int128 v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float32x4_t v38;
  __int128 v39;

  v6 = v1;
  swift_beginAccess();
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 == 1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 < 3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 == 3)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    v4 = sub_2264C11B0((uint64_t)v4);
    goto LABEL_7;
  }
  v35 = *(_OWORD *)(v7 + 64);
  v36 = *(_OWORD *)(v7 + 32);
  v33 = *(_OWORD *)(v7 + 128);
  v34 = *(_OWORD *)(v7 + 96);
  *(float32x2_t *)&v9 = sub_22652F398(*(float32x2_t *)&v36, *(float32x2_t *)(v7 + 64), *(float32x2_t *)&v34, *(float32x2_t *)(v7 + 128), 0.0);
  v39 = v9;
  *(float32x2_t *)v10.f32 = sub_22652F468(*(float32x2_t *)&v36, *(float32x2_t *)&v35, *(float32x2_t *)&v34, *(float32x2_t *)&v33, 0.0);
  v11 = (int32x4_t)vmulq_f32(v10, v10);
  v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  v15 = vmuls_lane_f32(a1, v14, 2);
  v16 = vmul_n_f32(*(float32x2_t *)v14.f32, a1);
  *(float32x2_t *)&v35 = vsub_f32(*(float32x2_t *)&v39, v16);
  v14.i64[0] = v35;
  v14.f32[2] = *((float *)&v39 + 2) - v15;
  v14.i32[3] = 0;
  v38 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255842CD0);
  v1 = swift_allocObject();
  *(float32x2_t *)&v17 = vadd_f32(*(float32x2_t *)&v35, vmul_f32(v16, (float32x2_t)vdup_n_s32(0xBA83126F)));
  *((float *)&v17 + 2) = (float)(*((float *)&v39 + 2) - v15) + (float)(v15 * -0.001);
  HIDWORD(v17) = 0;
  *(_OWORD *)(v1 + 16) = xmmword_22655FA80;
  *(_OWORD *)(v1 + 32) = v17;
  *(_DWORD *)(v1 + 48) = 0;
  LODWORD(v17) = *(_DWORD *)(v6 + 40);
  *(float32x4_t *)(v1 + 64) = v38;
  *(_DWORD *)(v1 + 80) = v17;
  __asm { FMOV            V2.2S, #0.25 }
  *(float32x2_t *)&v23 = vadd_f32(*(float32x2_t *)&v39, vmul_f32(v16, _D2));
  *((float *)&v23 + 2) = *((float *)&v39 + 2) + (float)(v15 * 0.25);
  HIDWORD(v23) = 0;
  *(_OWORD *)(v1 + 96) = v23;
  *(_DWORD *)(v1 + 112) = v17;
  *(_OWORD *)(v1 + 128) = v23;
  *(_DWORD *)(v1 + 144) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255842CD8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22655FA10;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v2 + 32) = _D0;
  *(_QWORD *)(v2 + 40) = _D0;
  v3 = (char **)(v6 + 32);
  swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
  if (!v5)
    goto LABEL_12;
  swift_beginAccess();
  v4 = *v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_19;
LABEL_7:
  v26 = 0;
  do
  {
    *v3 = v4;
    if (v26 >= *((_QWORD *)v4 + 2))
    {
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v27 = &v4[2 * v26];
    v28 = *((unsigned __int16 *)v27 + 16) + 4;
    if ((v28 & 0x10000) != 0)
      goto LABEL_14;
    ++v26;
    *((_WORD *)v27 + 16) = v28;
    v4 = *v3;
  }
  while (v5 != v26);
  swift_endAccess();
LABEL_12:
  v29 = swift_bridgeObjectRetain();
  sub_22646B38C(v29);
  *(_QWORD *)(v6 + 16) = v1;
  swift_bridgeObjectRelease();
  v30 = swift_bridgeObjectRetain();
  sub_22646B248(v30);
  *(_QWORD *)(v6 + 32) = &unk_24EDDE458;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v31 = swift_bridgeObjectRetain();
  sub_22646B104(v31);
  *(_QWORD *)(v6 + 24) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_226468AFC(double a1)
{
  uint64_t v1;
  uint64_t inited;
  _QWORD *v3;
  int64_t v4;
  unint64_t v5;
  int v6;
  float v7;
  float32x2_t v8;
  float v9;
  uint64_t v10;
  _QWORD **v11;
  unint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  __int128 v15;
  float32x4_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v31;
  int64_t v32;
  float32x4_t v33;
  float v34;
  float32x4_t v35;
  __int128 v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  float32x4_t *v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int64_t v53;
  _QWORD *v54;
  unint64_t v55;
  int64_t v56;
  int64_t v58;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 v64;
  float32x4_t v65;
  float32x4_t v66;
  __int128 v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;

  v10 = v1;
  *(double *)v66.i64 = a1;
  v11 = (_QWORD **)(v1 + 16);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13 < 4)
  {
    __break(1u);
    goto LABEL_40;
  }
  v14 = (float32x2_t *)(v12 + 32 * v13);
  *(float32x2_t *)&v15 = sub_22652F398(v14[-12], v14[-8], v14[-4], *v14, 1.0);
  v67 = v15;
  *(float32x2_t *)v16.f32 = sub_22652F468(v14[-12], v14[-8], v14[-4], *v14, 1.0);
  v65 = v16;
  v6 = *(_DWORD *)(v10 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255842CC8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_226560650;
  *(_OWORD *)(inited + 32) = xmmword_226560660;
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 32);
  v17 = *(_QWORD *)(v12 + 16);
  if (!v17)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v12 = *(unsigned __int16 *)(v12 + 2 * v17 + 30) + 1;
  if ((v12 & 0x10000) != 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v18 = *(unsigned __int16 *)(inited + 32) + (unsigned __int16)v12;
  if ((v18 & 0x10000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  *(_WORD *)(inited + 32) = v18;
  v19 = *(unsigned __int16 *)(inited + 34) + (unsigned __int16)v12;
  if ((v19 & 0x10000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(_WORD *)(inited + 34) = v19;
  v20 = *(unsigned __int16 *)(inited + 36) + (unsigned __int16)v12;
  if ((v20 & 0x10000) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  *(_WORD *)(inited + 36) = v20;
  v21 = *(unsigned __int16 *)(inited + 38) + (unsigned __int16)v12;
  if ((v21 & 0x10000) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(_WORD *)(inited + 38) = v21;
  v22 = *(unsigned __int16 *)(inited + 40) + (unsigned __int16)v12;
  if ((v22 & 0x10000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *(_WORD *)(inited + 40) = v22;
  v23 = *(unsigned __int16 *)(inited + 42) + (unsigned __int16)v12;
  if ((v23 & 0x10000) != 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  *(_WORD *)(inited + 42) = v23;
  v24 = *(unsigned __int16 *)(inited + 44) + (unsigned __int16)v12;
  if ((v24 & 0x10000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  *(_WORD *)(inited + 44) = v24;
  v12 = *(unsigned __int16 *)(inited + 46) + (unsigned __int16)v12;
  if ((v12 & 0x10000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *(_WORD *)(inited + 46) = v12;
  v25 = *v11;
  v3 = (_QWORD *)v25[2];
  v4 = (int64_t)v3 + 4;
  if (__OFADD__(v3, 4))
  {
LABEL_50:
    __break(1u);
LABEL_51:
    v60 = sub_226487C74((_QWORD *)(v12 > 1), v4, 1, v3);
    v34 = v65.f32[0];
    v33 = v66;
    v3 = v60;
    v12 = v60[3];
    v31 = v12 >> 1;
    goto LABEL_21;
  }
  v26 = (int32x4_t)vmulq_f32(v65, v65);
  v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
  v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
  v29 = vmulq_n_f32(v65, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
  v7 = vmuls_lane_f32(v66.f32[0], v29, 2);
  v8 = vmul_n_f32(*(float32x2_t *)v29.f32, v66.f32[0]);
  *(float32x2_t *)v29.f32 = vadd_f32(*(float32x2_t *)&v67, vmul_f32(v8, (float32x2_t)vdup_n_s32(0x3F7FBE77u)));
  v66 = v29;
  v9 = *((float *)&v67 + 2);
  v65.f32[0] = *((float *)&v67 + 2) + (float)(v7 * 0.999);
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (v12 = v25[3], v31 = v12 >> 1, (uint64_t)(v12 >> 1) >= v4))
  {
    v3 = v25;
  }
  else
  {
    if ((uint64_t)v3 <= v4)
      v32 = (int64_t)v3 + 4;
    else
      v32 = (int64_t)v3;
    v3 = sub_226487C74(isUniquelyReferenced_nonNull_native, v32, 1, v25);
    v12 = v3[3];
    v31 = v12 >> 1;
  }
  v5 = v3[2];
  v4 = v5 + 1;
  v34 = *((float *)&v67 + 2) + (float)(v7 * 0.999);
  v33 = v66;
  if (v31 <= v5)
    goto LABEL_51;
LABEL_21:
  v35 = v33;
  v35.f32[2] = v34;
  __asm { FMOV            V1.2S, #-0.25 }
  *(float32x2_t *)&v41 = vadd_f32(*(float32x2_t *)&v67, vmul_f32(v8, _D1));
  *((float *)&v41 + 2) = v9 + (float)(v7 * -0.25);
  HIDWORD(v41) = 0;
  v3[2] = v4;
  v42 = &v3[4 * v5];
  *((_OWORD *)v42 + 2) = v41;
  *((_DWORD *)v42 + 12) = v6;
  v43 = v5 + 2;
  if (v31 < (uint64_t)(v5 + 2))
  {
    v68 = v35;
    v64 = v41;
    v61 = sub_226487C74((_QWORD *)(v12 > 1), v5 + 2, 1, v3);
    v41 = v64;
    v34 = v65.f32[0];
    v33.i64[0] = v66.i64[0];
    v35 = v68;
    v3 = v61;
    v12 = v61[3];
    v31 = v12 >> 1;
  }
  v35.i32[3] = 0;
  v3[2] = v43;
  v44 = &v3[4 * v4];
  *((_OWORD *)v44 + 2) = v41;
  *((_DWORD *)v44 + 12) = v6;
  v45 = v5 + 3;
  if (v31 < (uint64_t)(v5 + 3))
  {
    v69 = v35;
    v62 = sub_226487C74((_QWORD *)(v12 > 1), v5 + 3, 1, v3);
    v33.i64[0] = v66.i64[0];
    v35 = v69;
    v34 = v65.f32[0];
    v3 = v62;
    v12 = v62[3];
    v31 = v12 >> 1;
  }
  v3[2] = v45;
  v46 = (float32x4_t *)&v3[4 * v43];
  v46[2] = v35;
  v46[3].i32[0] = v6;
  if (v31 < (uint64_t)(v5 + 4))
  {
    v63 = sub_226487C74((_QWORD *)(v12 > 1), v5 + 4, 1, v3);
    v34 = v65.f32[0];
    v33.i64[0] = v66.i64[0];
    v3 = v63;
  }
  *(float32x2_t *)&v47 = vadd_f32(vmul_f32(v8, (float32x2_t)vdup_n_s32(0x3C23D70Au)), *(float32x2_t *)v33.f32);
  *((float *)&v47 + 2) = (float)(v7 * 0.01) + v34;
  HIDWORD(v47) = 0;
  v3[2] = v5 + 4;
  v48 = &v3[4 * v45];
  *((_OWORD *)v48 + 2) = v47;
  *((_DWORD *)v48 + 12) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v10 + 16) = v3;
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(v10 + 32);
  swift_bridgeObjectRetain();
  sub_22646B248(inited);
  *(_QWORD *)(v10 + 32) = v70;
  swift_bridgeObjectRelease();
  v49 = (_QWORD *)(v10 + 24);
  swift_beginAccess();
  v51 = *(_QWORD **)(v10 + 24);
  v52 = (_QWORD *)v51[2];
  v53 = (int64_t)v52 + 2;
  if (__OFADD__(v52, 2))
  {
    __break(1u);
LABEL_53:
    v52 = sub_226487A60((_QWORD *)(v50 > 1), v53, 1, v52);
    v50 = v52[3];
    v55 = v50 >> 1;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain_n();
  v54 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)v54 && (v50 = v51[3], v55 = v50 >> 1, (uint64_t)(v50 >> 1) >= v53))
  {
    v52 = v51;
  }
  else
  {
    if ((uint64_t)v52 <= v53)
      v56 = (int64_t)v52 + 2;
    else
      v56 = (int64_t)v52;
    v52 = sub_226487A60(v54, v56, 1, v51);
    v50 = v52[3];
    v55 = v50 >> 1;
  }
  v45 = v52[2];
  v53 = v45 + 1;
  if (v55 <= v45)
    goto LABEL_53;
LABEL_36:
  v52[2] = v53;
  __asm { FMOV            V8.2S, #1.0 }
  v52[v45 + 4] = _D8;
  v58 = v45 + 2;
  if ((uint64_t)v55 < v58)
    v52 = sub_226487A60((_QWORD *)(v50 > 1), v58, 1, v52);
  v52[2] = v58;
  v52[v53 + 4] = _D8;
  swift_bridgeObjectRelease();
  *v49 = v52;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2264690BC(char a1)
{
  char *v1;
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t i;
  char *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  char **v51;
  _QWORD **v52;
  uint64_t v53;
  char *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char **v77;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  char v127;
  unint64_t v128;
  unint64_t v129;

  if (a1)
  {
    if (a1 == 1)
    {
      v1 = v2 + 32;
      swift_beginAccess();
      v8 = (char *)*((_QWORD *)v2 + 4);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *((_QWORD *)v2 + 4) = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_4:
        v11 = *((_QWORD *)v8 + 2);
        v10 = *((_QWORD *)v8 + 3);
        if (v11 >= v10 >> 1)
        {
          v8 = sub_226487B6C((char *)(v10 > 1), v11 + 1, 1, v8);
          *(_QWORD *)v1 = v8;
        }
        *((_QWORD *)v8 + 2) = v11 + 1;
        *(_WORD *)&v8[2 * v11 + 32] = 0;
        v12 = *(char **)v1;
        v14 = *(_QWORD *)(*(_QWORD *)v1 + 16);
        v13 = *(_QWORD *)(*(_QWORD *)v1 + 24);
        if (v14 >= v13 >> 1)
        {
          v12 = sub_226487B6C((char *)(v13 > 1), v14 + 1, 1, v12);
          *(_QWORD *)v1 = v12;
        }
        *((_QWORD *)v12 + 2) = v14 + 1;
        *(_WORD *)&v12[2 * v14 + 32] = 1;
        v15 = *(char **)v1;
        v17 = *(_QWORD *)(*(_QWORD *)v1 + 16);
        v16 = *(_QWORD *)(*(_QWORD *)v1 + 24);
        if (v17 >= v16 >> 1)
        {
          v15 = sub_226487B6C((char *)(v16 > 1), v17 + 1, 1, v15);
          *(_QWORD *)v1 = v15;
        }
        *((_QWORD *)v15 + 2) = v17 + 1;
        *(_WORD *)&v15[2 * v17 + 32] = 2;
        v18 = *(char **)v1;
        v20 = *(_QWORD *)(*(_QWORD *)v1 + 16);
        v19 = *(_QWORD *)(*(_QWORD *)v1 + 24);
        if (v20 >= v19 >> 1)
        {
          v18 = sub_226487B6C((char *)(v19 > 1), v20 + 1, 1, v18);
          *(_QWORD *)v1 = v18;
        }
        *((_QWORD *)v18 + 2) = v20 + 1;
        *(_WORD *)&v18[2 * v20 + 32] = 3;
        swift_endAccess();
        v4 = v2 + 24;
        swift_beginAccess();
        v21 = (_QWORD *)*((_QWORD *)v2 + 3);
        v22 = swift_isUniquelyReferenced_nonNull_native();
        *((_QWORD *)v2 + 3) = v21;
        if ((v22 & 1) == 0)
        {
          v21 = sub_226487A60(0, v21[2] + 1, 1, v21);
          *v4 = v21;
        }
        v5 = v21[2];
        v23 = v21[3];
        if (v5 >= v23 >> 1)
        {
          v21 = sub_226487A60((_QWORD *)(v23 > 1), v5 + 1, 1, v21);
          *v4 = v21;
        }
        v21[2] = v5 + 1;
        __asm { FMOV            V8.2S, #1.0 }
        v21[v5 + 4] = _D8;
        swift_endAccess();
        v3 = v2 + 16;
        swift_beginAccess();
        v6 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 16);
        if (v6 >= 3)
        {
          v5 = 65537;
          if (v6 == 3)
          {
            LOWORD(v6) = 3;
          }
          else
          {
            for (i = 3; i != v6; ++i)
            {
              swift_beginAccess();
              v29 = *(char **)v1;
              v30 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v1 = v29;
              if ((v30 & 1) == 0)
              {
                v29 = sub_226487B6C(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
                *(_QWORD *)v1 = v29;
              }
              v32 = *((_QWORD *)v29 + 2);
              v31 = *((_QWORD *)v29 + 3);
              if (v32 >= v31 >> 1)
              {
                v29 = sub_226487B6C((char *)(v31 > 1), v32 + 1, 1, v29);
                *(_QWORD *)v1 = v29;
              }
              *((_QWORD *)v29 + 2) = v32 + 1;
              *(_WORD *)&v29[2 * v32 + 32] = i - 3;
              swift_endAccess();
              swift_beginAccess();
              v33 = *(char **)v1;
              v34 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v1 = v33;
              if ((v34 & 1) == 0)
              {
                v33 = sub_226487B6C(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
                *(_QWORD *)v1 = v33;
              }
              v36 = *((_QWORD *)v33 + 2);
              v35 = *((_QWORD *)v33 + 3);
              if (v36 >= v35 >> 1)
              {
                v33 = sub_226487B6C((char *)(v35 > 1), v36 + 1, 1, v33);
                *(_QWORD *)v1 = v33;
              }
              *((_QWORD *)v33 + 2) = v36 + 1;
              *(_WORD *)&v33[2 * v36 + 32] = i - 2;
              swift_endAccess();
              swift_beginAccess();
              v37 = *(char **)v1;
              v38 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v1 = v37;
              if ((v38 & 1) == 0)
              {
                v37 = sub_226487B6C(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
                *(_QWORD *)v1 = v37;
              }
              v40 = *((_QWORD *)v37 + 2);
              v39 = *((_QWORD *)v37 + 3);
              if (v40 >= v39 >> 1)
              {
                v37 = sub_226487B6C((char *)(v39 > 1), v40 + 1, 1, v37);
                *(_QWORD *)v1 = v37;
              }
              *((_QWORD *)v37 + 2) = v40 + 1;
              *(_WORD *)&v37[2 * v40 + 32] = i - 1;
              swift_endAccess();
              if (i == 0x10000)
                goto LABEL_145;
              swift_beginAccess();
              v41 = *(char **)v1;
              v42 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v1 = v41;
              if ((v42 & 1) == 0)
              {
                v41 = sub_226487B6C(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
                *(_QWORD *)v1 = v41;
              }
              v44 = *((_QWORD *)v41 + 2);
              v43 = *((_QWORD *)v41 + 3);
              if (v44 >= v43 >> 1)
              {
                v41 = sub_226487B6C((char *)(v43 > 1), v44 + 1, 1, v41);
                *(_QWORD *)v1 = v41;
              }
              *((_QWORD *)v41 + 2) = v44 + 1;
              *(_WORD *)&v41[2 * v44 + 32] = i;
              swift_endAccess();
              swift_beginAccess();
              v45 = (_QWORD *)*v4;
              v46 = swift_isUniquelyReferenced_nonNull_native();
              *v4 = v45;
              if ((v46 & 1) == 0)
              {
                v45 = sub_226487A60(0, v45[2] + 1, 1, v45);
                *v4 = v45;
              }
              v48 = v45[2];
              v47 = v45[3];
              if (v48 >= v47 >> 1)
              {
                v45 = sub_226487A60((_QWORD *)(v47 > 1), v48 + 1, 1, v45);
                *v4 = v45;
              }
              v45[2] = v48 + 1;
              v45[v48 + 4] = _D8;
              swift_endAccess();
            }
            v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
            if (v6 <= 2 || v6 > 0x10002)
              goto LABEL_145;
          }
          swift_beginAccess();
          v2 = *(char **)v1;
          v108 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v1 = v2;
          if ((v108 & 1) != 0)
            goto LABEL_109;
          goto LABEL_144;
        }
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        v2 = sub_226487B6C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
        *(_QWORD *)v1 = v2;
LABEL_109:
        v110 = *((_QWORD *)v2 + 2);
        v109 = *((_QWORD *)v2 + 3);
        if (v110 >= v109 >> 1)
        {
          v2 = sub_226487B6C((char *)(v109 > 1), v110 + 1, 1, v2);
          *(_QWORD *)v1 = v2;
        }
        *((_QWORD *)v2 + 2) = v110 + 1;
        *(_WORD *)&v2[2 * v110 + 32] = v6 - 3;
        swift_endAccess();
        v111 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (v111 <= 1 || v111 > v5)
          goto LABEL_145;
        swift_beginAccess();
        v112 = *(char **)v1;
        v113 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v1 = v112;
        if ((v113 & 1) == 0)
        {
          v112 = sub_226487B6C(0, *((_QWORD *)v112 + 2) + 1, 1, v112);
          *(_QWORD *)v1 = v112;
        }
        v115 = *((_QWORD *)v112 + 2);
        v114 = *((_QWORD *)v112 + 3);
        if (v115 >= v114 >> 1)
        {
          v112 = sub_226487B6C((char *)(v114 > 1), v115 + 1, 1, v112);
          *(_QWORD *)v1 = v112;
        }
        *((_QWORD *)v112 + 2) = v115 + 1;
        *(_WORD *)&v112[2 * v115 + 32] = v111 - 2;
        swift_endAccess();
        v116 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (!v116 || v116 > 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v117 = *(char **)v1;
        v118 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v1 = v117;
        if ((v118 & 1) == 0)
        {
          v117 = sub_226487B6C(0, *((_QWORD *)v117 + 2) + 1, 1, v117);
          *(_QWORD *)v1 = v117;
        }
        v120 = *((_QWORD *)v117 + 2);
        v119 = *((_QWORD *)v117 + 3);
        if (v120 >= v119 >> 1)
        {
          v117 = sub_226487B6C((char *)(v119 > 1), v120 + 1, 1, v117);
          *(_QWORD *)v1 = v117;
        }
        *((_QWORD *)v117 + 2) = v120 + 1;
        *(_WORD *)&v117[2 * v120 + 32] = v116 - 1;
        swift_endAccess();
        v121 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (!v121 || v121 > 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v122 = *(char **)v1;
        v123 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v1 = v122;
        if ((v123 & 1) == 0)
        {
          v122 = sub_226487B6C(0, *((_QWORD *)v122 + 2) + 1, 1, v122);
          *(_QWORD *)v1 = v122;
        }
        v125 = *((_QWORD *)v122 + 2);
        v124 = *((_QWORD *)v122 + 3);
        if (v125 >= v124 >> 1)
        {
          v122 = sub_226487B6C((char *)(v124 > 1), v125 + 1, 1, v122);
          *(_QWORD *)v1 = v122;
        }
        *((_QWORD *)v122 + 2) = v125 + 1;
        *(_WORD *)&v122[2 * v125 + 32] = v121 - 1;
        swift_endAccess();
        swift_beginAccess();
        v126 = (_QWORD *)*v4;
        v127 = swift_isUniquelyReferenced_nonNull_native();
        *v4 = v126;
        if ((v127 & 1) == 0)
        {
          v126 = sub_226487A60(0, v126[2] + 1, 1, v126);
          *v4 = v126;
        }
        v129 = v126[2];
        v128 = v126[3];
        if (v129 >= v128 >> 1)
        {
          v126 = sub_226487A60((_QWORD *)(v128 > 1), v129 + 1, 1, v126);
          *v4 = v126;
        }
        v126[2] = v129 + 1;
        v126[v129 + 4] = _D8;
        return swift_endAccess();
      }
    }
    else
    {
      v1 = v2 + 16;
      result = swift_beginAccess();
      v75 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 16);
      if (!v75)
        return result;
      v76 = 0;
      v77 = (char **)(v2 + 32);
      v8 = v2 + 24;
      __asm { FMOV            V8.2S, #1.0 }
      while (1)
      {
        v79 = *(_QWORD *)(*(_QWORD *)v1 + 16) - 1;
        if (*(_QWORD *)(*(_QWORD *)v1 + 16) == 1)
          break;
        v80 = v76 % v79;
        if ((unint64_t)(v76 % v79) >= 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v2 = *v77;
        v81 = swift_isUniquelyReferenced_nonNull_native();
        *v77 = v2;
        if ((v81 & 1) == 0)
        {
          v2 = sub_226487B6C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          *v77 = v2;
        }
        v83 = *((_QWORD *)v2 + 2);
        v82 = *((_QWORD *)v2 + 3);
        if (v83 >= v82 >> 1)
        {
          v2 = sub_226487B6C((char *)(v82 > 1), v83 + 1, 1, v2);
          *v77 = v2;
        }
        *((_QWORD *)v2 + 2) = v83 + 1;
        *(_WORD *)&v2[2 * v83 + 32] = v80;
        swift_endAccess();
        v84 = *(_QWORD *)(*(_QWORD *)v1 + 16) - 1;
        if (*(_QWORD *)(*(_QWORD *)v1 + 16) == 1)
          goto LABEL_136;
        v85 = v76 + 1;
        v86 = v85 % v84;
        if ((unint64_t)(v85 % v84) >= 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v2 = *v77;
        v87 = swift_isUniquelyReferenced_nonNull_native();
        *v77 = v2;
        if ((v87 & 1) == 0)
        {
          v2 = sub_226487B6C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          *v77 = v2;
        }
        v89 = *((_QWORD *)v2 + 2);
        v88 = *((_QWORD *)v2 + 3);
        if (v89 >= v88 >> 1)
        {
          v2 = sub_226487B6C((char *)(v88 > 1), v89 + 1, 1, v2);
          *v77 = v2;
        }
        *((_QWORD *)v2 + 2) = v89 + 1;
        *(_WORD *)&v2[2 * v89 + 32] = v86;
        swift_endAccess();
        v90 = *(_QWORD *)(*(_QWORD *)v1 + 16) - 1;
        if (*(_QWORD *)(*(_QWORD *)v1 + 16) == 1)
          goto LABEL_137;
        v91 = v85 + 1;
        v92 = v91 % v90;
        if ((unint64_t)(v91 % v90) >= 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v2 = *v77;
        v93 = swift_isUniquelyReferenced_nonNull_native();
        *v77 = v2;
        if ((v93 & 1) == 0)
        {
          v2 = sub_226487B6C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          *v77 = v2;
        }
        v95 = *((_QWORD *)v2 + 2);
        v94 = *((_QWORD *)v2 + 3);
        if (v95 >= v94 >> 1)
        {
          v2 = sub_226487B6C((char *)(v94 > 1), v95 + 1, 1, v2);
          *v77 = v2;
        }
        *((_QWORD *)v2 + 2) = v95 + 1;
        *(_WORD *)&v2[2 * v95 + 32] = v92;
        swift_endAccess();
        v96 = v91 - 2;
        if (v91 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_138;
        v97 = *(_QWORD *)(*(_QWORD *)v1 + 16);
        v98 = v97 - 1;
        if (v97 == 1)
          goto LABEL_139;
        v99 = v91 + 1;
        if (v96 == 0x7FFFFFFFFFFFFFFDLL && !v97)
          goto LABEL_140;
        v100 = v99 % v98;
        if (v99 % v98 < 0 || v100 >= 0x10000)
          goto LABEL_145;
        swift_beginAccess();
        v101 = *v77;
        v102 = swift_isUniquelyReferenced_nonNull_native();
        *v77 = v101;
        if ((v102 & 1) == 0)
        {
          v101 = sub_226487B6C(0, *((_QWORD *)v101 + 2) + 1, 1, v101);
          *v77 = v101;
        }
        v104 = *((_QWORD *)v101 + 2);
        v103 = *((_QWORD *)v101 + 3);
        if (v104 >= v103 >> 1)
        {
          v101 = sub_226487B6C((char *)(v103 > 1), v104 + 1, 1, v101);
          *v77 = v101;
        }
        *((_QWORD *)v101 + 2) = v104 + 1;
        *(_WORD *)&v101[2 * v104 + 32] = v100;
        swift_endAccess();
        swift_beginAccess();
        v2 = *(char **)v8;
        v105 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v8 = v2;
        if ((v105 & 1) == 0)
        {
          v2 = (char *)sub_226487A60(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          *(_QWORD *)v8 = v2;
        }
        v107 = *((_QWORD *)v2 + 2);
        v106 = *((_QWORD *)v2 + 3);
        if (v107 >= v106 >> 1)
        {
          v2 = (char *)sub_226487A60((_QWORD *)(v106 > 1), v107 + 1, 1, v2);
          *(_QWORD *)v8 = v2;
        }
        *((_QWORD *)v2 + 2) = v107 + 1;
        *(_QWORD *)&v2[8 * v107 + 32] = _D8;
        result = swift_endAccess();
        v76 = v99 - 2;
        if (v76 == v75)
          return result;
      }
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
    }
    v8 = sub_226487B6C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *(_QWORD *)v1 = v8;
    goto LABEL_4;
  }
  result = swift_beginAccess();
  v50 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 16);
  if (v50 < 3)
    goto LABEL_143;
  if (v50 != 3)
  {
    v51 = (char **)(v2 + 32);
    v52 = (_QWORD **)(v2 + 24);
    v53 = 3;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      swift_beginAccess();
      v55 = *v51;
      v56 = swift_isUniquelyReferenced_nonNull_native();
      *v51 = v55;
      if ((v56 & 1) == 0)
      {
        v55 = sub_226487B6C(0, *((_QWORD *)v55 + 2) + 1, 1, v55);
        *v51 = v55;
      }
      v58 = *((_QWORD *)v55 + 2);
      v57 = *((_QWORD *)v55 + 3);
      if (v58 >= v57 >> 1)
      {
        v55 = sub_226487B6C((char *)(v57 > 1), v58 + 1, 1, v55);
        *v51 = v55;
      }
      *((_QWORD *)v55 + 2) = v58 + 1;
      *(_WORD *)&v55[2 * v58 + 32] = v53 - 3;
      swift_endAccess();
      swift_beginAccess();
      v59 = *v51;
      v60 = swift_isUniquelyReferenced_nonNull_native();
      *v51 = v59;
      if ((v60 & 1) == 0)
      {
        v59 = sub_226487B6C(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
        *v51 = v59;
      }
      v62 = *((_QWORD *)v59 + 2);
      v61 = *((_QWORD *)v59 + 3);
      if (v62 >= v61 >> 1)
      {
        v59 = sub_226487B6C((char *)(v61 > 1), v62 + 1, 1, v59);
        *v51 = v59;
      }
      *((_QWORD *)v59 + 2) = v62 + 1;
      *(_WORD *)&v59[2 * v62 + 32] = v53 - 2;
      swift_endAccess();
      swift_beginAccess();
      v63 = *v51;
      v64 = swift_isUniquelyReferenced_nonNull_native();
      *v51 = v63;
      if ((v64 & 1) == 0)
      {
        v63 = sub_226487B6C(0, *((_QWORD *)v63 + 2) + 1, 1, v63);
        *v51 = v63;
      }
      v66 = *((_QWORD *)v63 + 2);
      v65 = *((_QWORD *)v63 + 3);
      if (v66 >= v65 >> 1)
      {
        v63 = sub_226487B6C((char *)(v65 > 1), v66 + 1, 1, v63);
        *v51 = v63;
      }
      *((_QWORD *)v63 + 2) = v66 + 1;
      *(_WORD *)&v63[2 * v66 + 32] = v53 - 1;
      swift_endAccess();
      if (v53 == 0x10000)
        break;
      swift_beginAccess();
      v67 = *v51;
      v68 = swift_isUniquelyReferenced_nonNull_native();
      *v51 = v67;
      if ((v68 & 1) == 0)
      {
        v67 = sub_226487B6C(0, *((_QWORD *)v67 + 2) + 1, 1, v67);
        *v51 = v67;
      }
      v70 = *((_QWORD *)v67 + 2);
      v69 = *((_QWORD *)v67 + 3);
      if (v70 >= v69 >> 1)
      {
        v67 = sub_226487B6C((char *)(v69 > 1), v70 + 1, 1, v67);
        *v51 = v67;
      }
      *((_QWORD *)v67 + 2) = v70 + 1;
      *(_WORD *)&v67[2 * v70 + 32] = v53;
      swift_endAccess();
      swift_beginAccess();
      v71 = *v52;
      v72 = swift_isUniquelyReferenced_nonNull_native();
      *v52 = v71;
      if ((v72 & 1) == 0)
      {
        v71 = sub_226487A60(0, v71[2] + 1, 1, v71);
        *v52 = v71;
      }
      v74 = v71[2];
      v73 = v71[3];
      if (v74 >= v73 >> 1)
      {
        v71 = sub_226487A60((_QWORD *)(v73 > 1), v74 + 1, 1, v71);
        *v52 = v71;
      }
      v71[2] = v74 + 1;
      v71[v74 + 4] = _D8;
      result = swift_endAccess();
      if (v50 == ++v53)
        return result;
    }
    while (1)
    {
LABEL_145:
      sub_22655D3DC();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_22646A170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_226486AE0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646A2B4(uint64_t a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_226486AEC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[4 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[4 * v8] && (unint64_t)v10 < a1 + 32 + 4 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 4 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *((_QWORD *)v3 + 2);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *((_QWORD *)v3 + 2) = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646A3FC(uint64_t a1)
{
  return sub_22646AF88(a1, (uint64_t (*)(void))sub_226486C18, type metadata accessor for CapturedRoom.Surface);
}

uint64_t sub_22646A410(uint64_t result)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;

  v4 = v2;
  v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    result = sub_22655D274();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_22655D400();
    result = swift_bridgeObjectRelease();
    v8 = v20 + v6;
    if (!__OFADD__(v20, v6))
      goto LABEL_6;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v6;
  if (__OFADD__(v7, v6))
    goto LABEL_24;
LABEL_6:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v9;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8)
    v13 = v8;
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x2276999F0](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *v4 = v14;
  v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (*(_QWORD *)(v12 + 24) >> 1) - v15;
  result = sub_22653B5BC((uint64_t)&v42, (_QWORD *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    v17 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v18 = __OFADD__(v17, result);
    v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!sub_22655D298())
        goto LABEL_21;
      type metadata accessor for HullPointUUID();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v24 = v41;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24)
          goto LABEL_21;
        while (1)
        {
          v25 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(_QWORD *)(v25 + 0x18) >> 1)
          {
            sub_22655CEF0();
            v25 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v26 = *(_QWORD *)(v25 + 24) >> 1;
          if (v3 < v26)
            break;
LABEL_37:
          *(_QWORD *)(v25 + 16) = v3;
        }
        v27 = v25 + 32;
        while (1)
        {
          *(_QWORD *)(v27 + 8 * v3++) = v24;
          v28 = v45;
          if (v42 < 0)
          {
            if (!sub_22655D298())
              goto LABEL_74;
            type metadata accessor for HullPointUUID();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v24 = v41;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v46)
            break;
          v29 = (v46 - 1) & v46;
          v30 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_45:
          v24 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v30);
          swift_retain();
LABEL_46:
          v45 = v28;
          v46 = v29;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v26)
          {
            v25 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        v31 = v45 + 1;
        if (__OFADD__(v45, 1))
        {
          __break(1u);
LABEL_98:
          v24 = 0;
          v22 = 0;
          v21 = v1;
LABEL_30:
          v45 = v21;
          v46 = v22;
          continue;
        }
        break;
      }
      v32 = (unint64_t)(v44 + 64) >> 6;
      if (v31 >= v32)
      {
        v24 = 0;
        v29 = 0;
        goto LABEL_46;
      }
      v33 = *(_QWORD *)(v43 + 8 * v31);
      if (!v33)
      {
        v34 = v45 + 2;
        if (v45 + 2 >= v32)
          goto LABEL_71;
        v33 = *(_QWORD *)(v43 + 8 * v34);
        if (!v33)
        {
          v1 = v45 + 3;
          if (v45 + 3 >= v32)
            goto LABEL_72;
          v33 = *(_QWORD *)(v43 + 8 * v1);
          if (v33)
          {
            v31 = v45 + 3;
            goto LABEL_55;
          }
          v34 = v45 + 4;
          if (v45 + 4 >= v32)
          {
            v24 = 0;
            v29 = 0;
            v28 = v45 + 3;
            goto LABEL_46;
          }
          v33 = *(_QWORD *)(v43 + 8 * v34);
          if (!v33)
          {
            v31 = v45 + 5;
            if (v45 + 5 >= v32)
            {
LABEL_72:
              v24 = 0;
              v29 = 0;
              v28 = v34;
              goto LABEL_46;
            }
            v33 = *(_QWORD *)(v43 + 8 * v31);
            if (!v33)
            {
              v31 = v32 - 1;
              v35 = v45 + 6;
              while (v32 != v35)
              {
                v33 = *(_QWORD *)(v43 + 8 * v35++);
                if (v33)
                {
                  v31 = v35 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              v24 = 0;
              v29 = 0;
              v28 = v31;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        v31 = v34;
      }
LABEL_55:
      v29 = (v33 - 1) & v33;
      v30 = __clz(__rbit64(v33)) + (v31 << 6);
      v28 = v31;
      goto LABEL_45;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    sub_22646C924();
    return sub_22655CEE4();
  }
LABEL_26:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v21 = v45;
  if (v42 < 0)
    goto LABEL_33;
  if (v46)
  {
    v22 = (v46 - 1) & v46;
    v23 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_29:
    v24 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v23);
    swift_retain();
    goto LABEL_30;
  }
  v36 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    v37 = (unint64_t)(v44 + 64) >> 6;
    if (v36 >= v37)
    {
      v24 = 0;
      v22 = 0;
      goto LABEL_30;
    }
    v38 = *(_QWORD *)(v43 + 8 * v36);
    if (v38)
      goto LABEL_79;
    v39 = v45 + 2;
    if (v45 + 2 >= v37)
    {
LABEL_95:
      v24 = 0;
      v22 = 0;
      v21 = v36;
      goto LABEL_30;
    }
    v38 = *(_QWORD *)(v43 + 8 * v39);
    if (v38)
      goto LABEL_83;
    v1 = v45 + 3;
    if (v45 + 3 < v37)
    {
      v38 = *(_QWORD *)(v43 + 8 * v1);
      if (v38)
      {
        v36 = v45 + 3;
        goto LABEL_79;
      }
      v39 = v45 + 4;
      if (v45 + 4 >= v37)
        goto LABEL_98;
      v38 = *(_QWORD *)(v43 + 8 * v39);
      if (v38)
      {
LABEL_83:
        v36 = v39;
LABEL_79:
        v22 = (v38 - 1) & v38;
        v23 = __clz(__rbit64(v38)) + (v36 << 6);
        v21 = v36;
        goto LABEL_29;
      }
      v36 = v45 + 5;
      if (v45 + 5 < v37)
      {
        v38 = *(_QWORD *)(v43 + 8 * v36);
        if (!v38)
        {
          v36 = v37 - 1;
          v40 = v45 + 6;
          do
          {
            if (v37 == v40)
              goto LABEL_95;
            v38 = *(_QWORD *)(v43 + 8 * v40++);
          }
          while (!v38);
          v36 = v40 - 1;
        }
        goto LABEL_79;
      }
    }
    v24 = 0;
    v22 = 0;
    v21 = v39;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_22646A9F4(unint64_t a1)
{
  return sub_22646B86C(a1, (unint64_t *)type metadata accessor for HullPoint, &qword_255842CE8, &qword_255842CE0, (uint64_t *)sub_2265243FC);
}

uint64_t sub_22646AA18(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for HullPointUUID, &qword_255842CF8, &qword_255842CF0, (uint64_t *)sub_226524450);
}

uint64_t sub_22646AA3C(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for CurvedElement, &qword_255842C70, &qword_255842C68, (uint64_t *)sub_226524450);
}

uint64_t sub_22646AA60(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_2264874D4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646ABA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_226486C2C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646ACEC(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for CDTTriangle, &qword_255842CA0, &qword_255842C98, (uint64_t *)sub_226524450);
}

uint64_t sub_22646AD10(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for CDTTriangleEdge, &qword_255842C80, &qword_255842C78, (uint64_t *)sub_226524450);
}

uint64_t sub_22646AD34(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for CDTEdge, &qword_255842C90, &qword_255842C88, (uint64_t *)sub_226524450);
}

uint64_t sub_22646AD58(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for RoomCaptureQuad, &qword_255842CC0, &qword_255842CB8, (uint64_t *)sub_2265243A4);
}

uint64_t sub_22646AD7C(uint64_t result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  int *v18;
  int v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  int *v24;
  char *v25;
  _BYTE v26[32];
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_226486AEC(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = v8 - v10;
  result = sub_22646BF80(&v27, &v3[4 * v10 + 32], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v12 = *((_QWORD *)v3 + 2);
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_31;
    }
    *((_QWORD *)v3 + 2) = v14;
  }
  if (result != v11)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_16:
  if (!v28)
    goto LABEL_13;
  v15 = v28 - 1;
  if (!__OFSUB__(v28, 1))
  {
    v2 = *((_QWORD *)v3 + 2);
    v16 = v27;
    v17 = sub_226524598((uint64_t (*)())v26, v28 - 1, v27);
    v19 = *v18;
    ((void (*)(_BYTE *, _QWORD))v17)(v26, 0);
    while (1)
    {
      v20 = *((_QWORD *)v3 + 3);
      v21 = v20 >> 1;
      v22 = v2 + 1;
      if ((uint64_t)(v20 >> 1) < v2 + 1)
      {
        v25 = sub_226486AEC((char *)(v20 > 1), v2 + 1, 1, v3);
        v22 = v2 + 1;
        v3 = v25;
        v21 = *((_QWORD *)v25 + 3) >> 1;
        if (v2 < v21)
        {
LABEL_23:
          *(_DWORD *)&v3[4 * v2 + 32] = v19;
          if (v15)
          {
            while (1)
            {
              v13 = __OFSUB__(v15--, 1);
              if (v13)
                break;
              v23 = sub_226524598((uint64_t (*)())v26, v15, v16);
              v19 = *v24;
              ((void (*)(_BYTE *, _QWORD))v23)(v26, 0);
              if (v21 - 1 == v2)
              {
                v2 = v21;
                goto LABEL_20;
              }
              *(_DWORD *)&v3[4 * v2++ + 36] = v19;
              if (!v15)
                goto LABEL_32;
            }
LABEL_31:
            __break(1u);
LABEL_32:
            v22 = v2 + 1;
          }
          *((_QWORD *)v3 + 2) = v22;
          goto LABEL_13;
        }
      }
      else if (v2 < v21)
      {
        goto LABEL_23;
      }
LABEL_20:
      *((_QWORD *)v3 + 2) = v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22646AF74(uint64_t a1)
{
  return sub_22646AF88(a1, (uint64_t (*)(void))sub_226487704, (uint64_t (*)(_QWORD))type metadata accessor for LineAnimation);
}

uint64_t sub_22646AF88(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  v12 = (*(_QWORD *)(v5 + 24) >> 1) - v11;
  v13 = a3(0);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v5 + v15 + v16 * v11;
  v18 = a1 + v15;
  v19 = v16 * v10;
  v20 = v17 + v19;
  v21 = v18 + v19;
  if (v18 < v20 && v17 < v21)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v10);
  v25 = v23 + v10;
  if (!v24)
  {
    *(_QWORD *)(v5 + 16) = v25;
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646B104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_226487A60(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646B248(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_226487B6C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646B38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_226487C74(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646B4D0(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2264880D8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646B614(unint64_t a1)
{
  return sub_22646B638(a1, (unint64_t *)type metadata accessor for OpeningElement, &qword_255842CB0, &qword_255842CA8, (uint64_t *)sub_226524450);
}

uint64_t sub_22646B638(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_22655D400();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x2276999F0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = sub_22646C114(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_22655CEE4();
  }
  __break(1u);
  return result;
}

uint64_t sub_22646B848(unint64_t a1)
{
  return sub_22646B86C(a1, (unint64_t *)sub_22646C8E8, &qword_255842C60, &qword_255842C58, (uint64_t *)sub_2265244A4);
}

uint64_t sub_22646B86C(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_22655D400();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x2276999F0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = sub_22646C3AC(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_22655CEE4();
  }
  __break(1u);
  return result;
}

uint64_t sub_22646BA7C(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = MEMORY[0x24BEE4AF8];
  v1[2] = MEMORY[0x24BEE4AF8];
  v1[3] = v3;
  v4 = (_QWORD **)(v1 + 2);
  v1[4] = v3;
  if (a1 >> 62)
    goto LABEL_23;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v5)
  {
    while ((a1 & 0xC000000000000001) == 0)
    {
      if (v5 < 1)
        goto LABEL_30;
      v27 = v1;
      v17 = 0;
      v1 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFF8);
      while (v17 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v18 = *(_QWORD *)(a1 + 8 * v17 + 32);
        swift_beginAccess();
        swift_beginAccess();
        v19 = *(_QWORD *)(v18 + 16);
        swift_beginAccess();
        v20 = *v4;
        swift_retain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v4 = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v20 = sub_226487C80(0, v20[2] + 1, 1, v20);
          *v4 = v20;
        }
        v23 = v20[2];
        v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          v20 = sub_226487C80((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
          *v4 = v20;
        }
        ++v17;
        v20[2] = v23 + 1;
        v20[v23 + 4] = v19;
        swift_endAccess();
        swift_release();
        if (v5 == v17)
        {
          result = swift_bridgeObjectRelease();
          v1 = v27;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      result = sub_22655D400();
      v5 = result;
      if (!result)
        goto LABEL_24;
    }
    if (v5 >= 1)
    {
      v7 = 0;
      do
      {
        v8 = MEMORY[0x2276999E4](v7, a1);
        swift_beginAccess();
        swift_beginAccess();
        v9 = *(_QWORD *)(v8 + 16);
        swift_beginAccess();
        v10 = *v4;
        swift_bridgeObjectRetain();
        v11 = swift_isUniquelyReferenced_nonNull_native();
        *v4 = v10;
        if ((v11 & 1) == 0)
        {
          v10 = sub_226487C80(0, v10[2] + 1, 1, v10);
          *v4 = v10;
        }
        v13 = v10[2];
        v12 = v10[3];
        if (v13 >= v12 >> 1)
        {
          v10 = sub_226487C80((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
          *v4 = v10;
        }
        ++v7;
        v10[2] = v13 + 1;
        v10[v13 + 4] = v9;
        swift_endAccess();
        swift_unknownObjectRelease();
      }
      while (v5 != v7);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
LABEL_24:
    result = swift_bridgeObjectRelease();
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_12:
      v14 = MEMORY[0x2276999E4](0, a1);
      swift_beginAccess();
      v15 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v1[3] = v15;
      swift_bridgeObjectRelease();
      v16 = MEMORY[0x2276999E4](0, a1);
LABEL_27:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v26 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v1[4] = v26;
      swift_bridgeObjectRelease();
      return (uint64_t)v1;
    }
LABEL_25:
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v24 = *(_QWORD *)(a1 + 32);
      swift_retain();
      swift_beginAccess();
      v25 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v1[3] = v25;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a1 + 32);
      swift_retain();
      goto LABEL_27;
    }
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_22646BE50()
{
  return sub_22646BEA0();
}

uint64_t type metadata accessor for BlendableSplineGroup()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SplineGroup()
{
  return objc_opt_self();
}

uint64_t sub_22646BE98()
{
  return sub_22646BEA0();
}

uint64_t sub_22646BEA0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Spline()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PatchData()
{
  return &type metadata for PatchData;
}

__n128 __swift_memcpy20_16(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ControlPoint(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ControlPoint(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ControlPoint()
{
  return &type metadata for ControlPoint;
}

uint64_t sub_22646BF80(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  _DWORD *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v5 = *(_QWORD *)(a4 + 16);
    v4 = 0;
    goto LABEL_26;
  }
  if (!a3)
  {
    v5 = *(_QWORD *)(a4 + 16);
    goto LABEL_18;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!v4)
  {
LABEL_29:
    v5 = 0;
    goto LABEL_26;
  }
  v5 = v4 - 1;
  *a2 = *(_DWORD *)(a4 + 4 * (v4 - 1) + 32);
  if (a3 == 1)
  {
LABEL_18:
    v4 = a3;
    goto LABEL_26;
  }
  if (v4 != 1)
  {
    v6 = a3 - 2;
    if (v4 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    else
      v7 = v4 - 2;
    v8 = v7 + 1;
    if (v8 < 0x15)
      goto LABEL_15;
    if (v4 - 2 < v6)
      v6 = v4 - 2;
    if ((unint64_t)(a2 + 1) >= 4 * v4 + a4 + 28 || 4 * v4 - 4 * v6 + a4 + 24 >= (unint64_t)&a2[v6 + 2])
    {
      v11 = v8 & 7;
      if ((v8 & 7) == 0)
        v11 = 8;
      v12 = v8 - v11;
      v5 -= v8 - v11;
      v10 = &a2[v8 - v11];
      v9 = v12 + 2;
      v13 = (int32x4_t *)(a4 + 4 * v4 + 12);
      v14 = (int8x16_t *)(a2 + 5);
      do
      {
        v15 = (int8x16_t)vrev64q_s32(*v13);
        v16 = (int8x16_t)vrev64q_s32(v13[-1]);
        v14[-1] = vextq_s8(v15, v15, 8uLL);
        *v14 = vextq_s8(v16, v16, 8uLL);
        v13 -= 2;
        v14 += 2;
        v12 -= 8;
      }
      while (v12);
    }
    else
    {
LABEL_15:
      v9 = 2;
      v10 = a2;
    }
    v17 = v10 + 1;
    while (1)
    {
      v18 = v5 - 1;
      *v17 = *(_DWORD *)(a4 + 28 + 4 * v5);
      if (a3 == v9)
        break;
      ++v9;
      ++v17;
      --v5;
      if (!v18)
        goto LABEL_26;
    }
    --v5;
    goto LABEL_18;
  }
LABEL_26:
  *a1 = a4;
  a1[1] = v5;
  return v4;
}

uint64_t sub_22646C0CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C114(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for DistanceAngleHullPoint, &qword_255842D08, &qword_255842D00, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_226524450);
}

uint64_t sub_22646C0F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C3AC(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for HullPoint, &qword_255842CE8, &qword_255842CE0, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2265243FC);
}

uint64_t sub_22646C114(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_22655D400();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = sub_22655D400();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = sub_22646C92C(a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646C31C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C114(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CDTEdge, &qword_255842C90, &qword_255842C88, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_226524450);
}

uint64_t sub_22646C340(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C114(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CDTTriangle, &qword_255842CA0, &qword_255842C98, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_226524450);
}

uint64_t sub_22646C364(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C114(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CDTTriangleEdge, &qword_255842C80, &qword_255842C78, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_226524450);
}

uint64_t sub_22646C388(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22646C114(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for OpeningElement, &qword_255842CB0, &qword_255842CA8, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_226524450);
}

uint64_t sub_22646C3AC(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_22655D400();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = sub_22655D400();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = sub_22646C92C(a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22646C5B4(unint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = a1;
  v3 = MEMORY[0x24BEE4AF8];
  v1[2] = MEMORY[0x24BEE4AF8];
  v4 = v1 + 2;
  v1[3] = v3;
  v1[4] = v3;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
    return v18;
  }
LABEL_23:
  v5 = sub_22655D400();
  if (!v5)
    return v18;
LABEL_3:
  v6 = 0;
  LOWORD(v7) = 0;
  v23 = v5;
  v24 = v2 & 0xC000000000000001;
  v19 = v2 + 32;
  v20 = v2 & 0xFFFFFFFFFFFFFF8;
  v21 = v4;
  v22 = v2;
  while (1)
  {
    if (v24)
    {
      v8 = (_QWORD *)MEMORY[0x2276999E4](v6, v2);
      v9 = __OFADD__(v6++, 1);
      if (v9)
        goto LABEL_21;
    }
    else
    {
      if (v6 >= *(_QWORD *)(v20 + 16))
        goto LABEL_22;
      v8 = *(_QWORD **)(v19 + 8 * v6);
      swift_retain();
      v9 = __OFADD__(v6++, 1);
      if (v9)
        goto LABEL_21;
    }
    swift_beginAccess();
    v10 = v8[2];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    sub_22646B38C(v10);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v11 = v8[4];
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v25 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2264C7A60(0, v12, 0);
      v4 = 0;
      while (1)
      {
        v2 = *(unsigned __int16 *)(v11 + 2 * (_QWORD)v4 + 32) + (unsigned __int16)v7;
        if ((v2 & 0x10000) != 0)
          break;
        v14 = *(_QWORD *)(v25 + 16);
        v13 = *(_QWORD *)(v25 + 24);
        if (v14 >= v13 >> 1)
          sub_2264C7A60(v13 > 1, v14 + 1, 1);
        v4 = (_QWORD *)((char *)v4 + 1);
        *(_QWORD *)(v25 + 16) = v14 + 1;
        *(_WORD *)(v25 + 2 * v14 + 32) = v2;
        if ((_QWORD *)v12 == v4)
        {
          swift_bridgeObjectRelease();
          v4 = v21;
          v2 = v22;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_17:
    swift_beginAccess();
    v15 = swift_bridgeObjectRetain();
    sub_22646B248(v15);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v16 = v8[3];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    sub_22646B104(v16);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    v7 = *(_QWORD *)(*v4 + 16);
    if (v7 >> 16)
      break;
    if (v6 == v23)
      return v18;
  }
  result = sub_22655D3DC();
  __break(1u);
  return result;
}

unint64_t sub_22646C8E8()
{
  unint64_t result;

  result = qword_2558480B0;
  if (!qword_2558480B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2558480B0);
  }
  return result;
}

uint64_t sub_22646C924()
{
  return swift_release();
}

uint64_t sub_22646C92C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22769A794](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22646C96C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x2_t *v81;
  uint64_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  char v93;
  char v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t *v123;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v125;
  float v126;
  float v127;
  simd_float4 *v128;
  float32x2_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  char v135;
  char v136;
  char v137;
  unint64_t v138;
  void (*v139)(unint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t result;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  simd_float4 v161;
  simd_float4 v162;
  simd_float4 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  simd_float4 v170;
  uint64_t *v171;
  char *v172;
  simd_float4 *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t (*v195)(unint64_t, uint64_t);
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  simd_float4x4 v202;

  v3 = v2;
  v6 = type metadata accessor for ScanItemStrut();
  v181 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v160 = (uint64_t)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v165 = (uint64_t)&v155 - v9;
  v182 = sub_22655C140();
  v185 = *(_QWORD **)(v182 - 8);
  v10 = MEMORY[0x24BDAC7A8](v182);
  v176 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v172 = (char *)&v155 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v177 = (uint64_t)&v155 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v157 = (uint64_t)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v159 = (uint64_t)&v155 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v156 = (char *)&v155 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (uint64_t)&v155 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v175 = (uint64_t)&v155 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (uint64_t *)((char *)&v155 - v28);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v169 = (uint64_t *)((char *)&v155 - v31);
  MEMORY[0x24BDAC7A8](v30);
  v187 = (uint64_t *)((char *)&v155 - v32);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v33);
  v174 = (uint64_t)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842D10);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v184 = (uint64_t)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v192 = (uint64_t *)((char *)&v155 - v38);
  v39 = type metadata accessor for CapturedRoom.Surface(0);
  v40 = *(uint64_t **)(v39 - 8);
  v41 = MEMORY[0x24BDAC7A8](v39);
  v168 = (uint64_t)&v155 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v41);
  v167 = (uint64_t)&v155 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v166 = (uint64_t)&v155 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v173 = (simd_float4 *)((char *)&v155 - v48);
  v49 = MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)&v155 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49);
  v188 = (uint64_t)&v155 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)&v155 - v55;
  MEMORY[0x24BDAC7A8](v54);
  v193 = (uint64_t)&v155 - v57;
  if (qword_25583F810 != -1)
LABEL_86:
    swift_once();
  v196 = a1;
  v197 = a2;
  v58 = sub_2264400BC(v3, a1, a2);
  v191 = v58;
  if (v58 >> 62)
  {
    v59 = sub_22655D400();
    v58 = v191;
    if (v59)
      goto LABEL_4;
LABEL_88:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v59)
    goto LABEL_88;
LABEL_4:
  a1 = 0;
  v195 = *(uint64_t (**)(unint64_t, uint64_t))(v197 + 24);
  v190 = v58 & 0xC000000000000001;
  v180 = v58 & 0xFFFFFFFFFFFFFF8;
  v179 = v58 + 32;
  v164 = MEMORY[0x24BEE4B00];
  v178 = (uint64_t *)MEMORY[0x24BEE4B00];
  v158 = v24;
  v171 = v29;
  v189 = v59;
  v186 = v3;
  v183 = v6;
  v194 = v40;
  while (1)
  {
    if (v190)
    {
      v199 = MEMORY[0x2276999E4](a1, v58);
    }
    else
    {
      if (a1 >= *(_QWORD *)(v180 + 16))
        goto LABEL_84;
      v199 = *(_QWORD *)(v179 + 8 * a1);
      swift_retain();
    }
    v60 = __OFADD__(a1++, 1);
    if (v60)
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    v198 = a1;
    v61 = v195(v196, v197);
    a2 = v61;
    v62 = *(_QWORD *)(v61 + 16);
    if (v62)
    {
      v6 = v61 + ((*((unsigned __int8 *)v40 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v40 + 80));
      v63 = v40[9];
      while (1)
      {
        sub_2264400FC(v6, (uint64_t)v56);
        if ((sub_22655C104() & 1) != 0)
          break;
        sub_2264401C8((uint64_t)v56);
        v6 += v63;
        if (!--v62)
          goto LABEL_17;
      }
      v29 = v192;
      sub_22643F6AC((uint64_t)v56, (uint64_t)v192, type metadata accessor for CapturedRoom.Surface);
      v24 = v40[7];
      ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v24)(v29, 0, 1, v39);
    }
    else
    {
LABEL_17:
      v24 = v40[7];
      v29 = v192;
      ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v24)(v192, 1, 1, v39);
    }
    swift_bridgeObjectRelease();
    v64 = (unsigned int (*)(uint64_t *, uint64_t, uint64_t))v40[6];
    if (v64(v29, 1, v39) != 1)
      break;
    swift_release();
    sub_22643D7E4((uint64_t)v29, &qword_255842D10);
LABEL_6:
    v40 = v194;
    a1 = v198;
LABEL_7:
    v58 = v191;
    if (a1 == v189)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v178;
    }
  }
  sub_22643F6AC((uint64_t)v29, v193, type metadata accessor for CapturedRoom.Surface);
  v65 = v195(v196, v197);
  a2 = v65;
  v66 = *(_QWORD *)(v65 + 16);
  if (v66)
  {
    v67 = v65 + ((*((unsigned __int8 *)v194 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v194 + 80));
    v68 = v194[9];
    while (1)
    {
      sub_2264400FC(v67, (uint64_t)v51);
      if ((sub_22655C104() & 1) != 0)
        break;
      sub_2264401C8((uint64_t)v51);
      v67 += v68;
      if (!--v66)
        goto LABEL_24;
    }
    v69 = v184;
    sub_22643F6AC((uint64_t)v51, v184, type metadata accessor for CapturedRoom.Surface);
    v70 = v69;
    v71 = 0;
  }
  else
  {
LABEL_24:
    v69 = v184;
    v70 = v184;
    v71 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v70, v71, 1, v39);
  swift_bridgeObjectRelease();
  v72 = v64((uint64_t *)v69, 1, v39);
  v6 = v183;
  v29 = v187;
  v73 = v188;
  if (v72 == 1)
  {
    sub_2264401C8(v193);
    swift_release();
    sub_22643D7E4(v69, &qword_255842D10);
    v3 = v186;
    goto LABEL_6;
  }
  sub_22643F6AC(v69, v188, type metadata accessor for CapturedRoom.Surface);
  v74 = v174;
  sub_22643D7A0(v73 + *(int *)(v39 + 52), v174, (uint64_t *)&unk_255848090);
  v75 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v74, 1, v75);
  sub_22643D7E4(v74, (uint64_t *)&unk_255848090);
  v77 = (uint64_t)v176;
  if (v76 == 1)
  {
    v78 = v193;
    v79 = v167;
    sub_2264400FC(v193, v167);
    v80 = v168;
    sub_2264400FC(v73, v168);
    v81 = (float32x2_t *)v199;
    swift_retain();
    v82 = v175;
    sub_226450120(v79, v80, v81, v175);
    v83 = v81[2];
    v83.i32[1] = HIDWORD(*(_QWORD *)(v78 + 80));
    *(float32x2_t *)v84.f32 = vsub_f32(v83, *(float32x2_t *)(v78 + 80));
    v84.f32[2] = COERCE_FLOAT(HIDWORD(*(_QWORD *)&v81[2])) - *(float *)(v78 + 88);
    v85 = vmulq_f32(*(float32x4_t *)(v78 + 32), v84);
    v86 = v78 + *(int *)(v39 + 44);
    v3 = v186;
    v87 = (void (*)(uint64_t, uint64_t, uint64_t))v185[2];
    v88 = (uint64_t)v172;
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).f32[0] <= 0.0)
    {
      v24 = v182;
      v87(v77, v86, v182);
      v105 = v159;
      v29 = &qword_255840818;
      sub_22643D7A0(v82, v159, &qword_255840818);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v105, 1, v6) != 1)
      {
        v122 = v160;
        sub_22643F6AC(v105, v160, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
        v123 = v178;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v200 = v123;
        sub_226523094(v122, v77, isUniquelyReferenced_nonNull_native);
        v120 = v200;
        v121 = (uint64_t **)&v201;
        goto LABEL_46;
      }
      sub_22643D7E4(v105, &qword_255840818);
      v106 = v178;
      swift_bridgeObjectRetain();
      v24 = sub_226534858(v77);
      v108 = v107;
      swift_bridgeObjectRelease();
      if ((v108 & 1) != 0)
      {
        v109 = swift_isUniquelyReferenced_nonNull_native();
        v200 = v106;
        if ((v109 & 1) == 0)
        {
          sub_2265490D0();
          v106 = v200;
        }
        v110 = v106[6] + v185[9] * v24;
        v170.i64[0] = v185[1];
        v111 = v182;
        ((void (*)(uint64_t, uint64_t))v170.i64[0])(v110, v182);
        v112 = (uint64_t)v200;
        v113 = v157;
        sub_22643F6AC(v200[7] + *(_QWORD *)(v181 + 72) * v24, v157, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
        v178 = (uint64_t *)v112;
        sub_226546B24(v24, v112);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v181 + 56))(v113, 0, 1, v6);
        v29 = &qword_255840818;
        ((void (*)(uint64_t, uint64_t))v170.i64[0])(v77, v111);
      }
      else
      {
        v113 = v157;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56))(v157, 1, 1, v6);
        ((void (*)(uint64_t, uint64_t))v185[1])(v77, v182);
      }
      v125 = v113;
LABEL_53:
      sub_22643D7E4(v125, &qword_255840818);
    }
    else
    {
      v24 = v182;
      v87((uint64_t)v172, v86, v182);
      v89 = v82;
      v90 = v158;
      sub_22643D7A0(v89, v158, &qword_255840818);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v90, 1, v6) == 1)
      {
        sub_22643D7E4(v90, &qword_255840818);
        v91 = (uint64_t *)v164;
        swift_bridgeObjectRetain();
        v92 = sub_226534858(v88);
        v94 = v93;
        swift_bridgeObjectRelease();
        v24 = (uint64_t)v156;
        if ((v94 & 1) != 0)
        {
          v95 = swift_isUniquelyReferenced_nonNull_native();
          v200 = v91;
          if ((v95 & 1) == 0)
          {
            sub_2265490D0();
            v91 = v200;
          }
          v96 = v91[6] + v185[9] * v92;
          v170.i64[0] = v185[1];
          v97 = v182;
          ((void (*)(unint64_t, uint64_t))v170.i64[0])(v96, v182);
          v98 = (uint64_t)v200;
          v99 = v181;
          sub_22643F6AC(v200[7] + *(_QWORD *)(v181 + 72) * v92, v24, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
          v164 = v98;
          sub_226546B24(v92, v98);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56))(v24, 0, 1, v6);
          ((void (*)(char *, uint64_t))v170.i64[0])(v172, v97);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56))(v156, 1, 1, v6);
          ((void (*)(char *, uint64_t))v185[1])(v172, v182);
        }
        v125 = v24;
        v29 = &qword_255840818;
        goto LABEL_53;
      }
      v116 = v90;
      v117 = v160;
      sub_22643F6AC(v116, v160, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
      v118 = (uint64_t *)v164;
      v119 = swift_isUniquelyReferenced_nonNull_native();
      v200 = v118;
      v29 = &qword_255840818;
      v77 = v88;
      sub_226523094(v117, v88, v119);
      v120 = v200;
      v121 = &v194;
LABEL_46:
      *(v121 - 32) = v120;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v185[1])(v77, v24);
    }
    a2 = v188;
    swift_release();
    sub_22643D7E4(v175, &qword_255840818);
    sub_2264401C8(a2);
    sub_2264401C8(v193);
    goto LABEL_6;
  }
  v100 = v73;
  v101 = (float *)v173;
  sub_2264400FC(v100, (uint64_t)v173);
  v102 = v166;
  sub_2264400FC(v193, v166);
  v3 = v186;
  if ((*(_BYTE *)(v199 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration) & 1) != 0)
  {
    sub_2264401C8(v102);
    sub_2264401C8((uint64_t)v101);
    v103 = v181;
    v170.i64[0] = *(_QWORD *)(v181 + 56);
    ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v170.i64[0])(v29, 1, 1, v6);
    v104 = (uint64_t)v171;
  }
  else
  {
    v114 = v101[6];
    v104 = (uint64_t)v171;
    if (v114 <= 0.0)
    {
      if ((*(_BYTE *)v101 - 2) > 3u)
        v115 = 0.08;
      else
        v115 = flt_22655FDA0[(char)(*(_BYTE *)v101 - 2)];
    }
    else
    {
      v115 = v114 * 0.5;
    }
    v126 = *(float *)(v102 + 24);
    if (v126 <= 0.0)
    {
      if ((*(_BYTE *)v102 - 2) > 3u)
        v127 = 0.08;
      else
        v127 = flt_22655FDA0[(char)(*(_BYTE *)v102 - 2)];
    }
    else
    {
      v127 = v126 * 0.5;
    }
    v128 = v173;
    v170 = v173[2];
    v163 = v173[3];
    v162 = v173[4];
    v161 = v173[5];
    v129 = (float32x2_t *)swift_retain();
    v202.columns[0] = v170;
    v202.columns[1] = v163;
    v202.columns[2] = v162;
    v202.columns[3] = v161;
    sub_22644FA10(v129, (uint64_t)v29, v202, v115, v127);
    sub_2264401C8(v102);
    sub_2264401C8((uint64_t)v128);
    v103 = v181;
    v170.i64[0] = *(_QWORD *)(v181 + 56);
    ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v170.i64[0])(v29, 0, 1, v6);
  }
  v130 = v188 + *(int *)(v39 + 44);
  v131 = v177;
  v163.i64[0] = v185[2];
  ((void (*)(unint64_t, uint64_t, uint64_t))v163.i64[0])(v177, v130, v182);
  v132 = (uint64_t)v29;
  v29 = v169;
  v40 = &qword_255840818;
  sub_22643D7A0(v132, (uint64_t)v169, &qword_255840818);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v103 + 48))(v29, 1, v6) == 1)
  {
    sub_22643D7E4((uint64_t)v29, &qword_255840818);
    v133 = v178;
    swift_bridgeObjectRetain();
    v134 = sub_226534858(v131);
    v136 = v135;
    swift_bridgeObjectRelease();
    if ((v136 & 1) != 0)
    {
      v137 = swift_isUniquelyReferenced_nonNull_native();
      v200 = v133;
      if ((v137 & 1) == 0)
      {
        sub_2265490D0();
        v133 = v200;
      }
      v138 = v133[6] + v185[9] * v134;
      v139 = (void (*)(unint64_t, uint64_t))v185[1];
      v140 = v182;
      v139(v138, v182);
      v141 = (uint64_t)v200;
      v142 = (uint64_t)v171;
      sub_22643F6AC(v200[7] + *(_QWORD *)(v181 + 72) * v134, (uint64_t)v171, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
      v178 = (uint64_t *)v141;
      sub_226546B24(v134, v141);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v170.i64[0])(v142, 0, 1, v6);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v170.i64[0])(v104, 1, 1, v6);
      v139 = (void (*)(unint64_t, uint64_t))v185[1];
      v142 = v104;
      v140 = v182;
    }
    v139(v177, v140);
    v24 = (uint64_t)&qword_255840818;
    sub_22643D7E4(v142, &qword_255840818);
    v29 = v187;
    a2 = v188;
    v40 = v194;
    a1 = v198;
    goto LABEL_81;
  }
  sub_22643F6AC((uint64_t)v29, v165, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  a2 = (uint64_t)v178;
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v200 = (uint64_t *)a2;
  a1 = sub_226534858(v131);
  v144 = *(_QWORD *)(a2 + 16);
  v145 = (v143 & 1) == 0;
  v146 = v144 + v145;
  if (__OFADD__(v144, v145))
    goto LABEL_85;
  v6 = v143;
  if (*(_QWORD *)(a2 + 24) >= v146)
  {
    v29 = v187;
    v40 = v194;
    if ((v24 & 1) != 0)
    {
      v149 = v200;
      if ((v143 & 1) == 0)
        goto LABEL_78;
    }
    else
    {
      sub_2265490D0();
      v149 = v200;
      if ((v6 & 1) == 0)
        goto LABEL_78;
    }
    goto LABEL_76;
  }
  sub_2265436CC(v146, v24);
  v147 = sub_226534858(v177);
  v29 = v187;
  v40 = v194;
  if ((v6 & 1) != (v148 & 1))
    goto LABEL_90;
  a1 = v147;
  v149 = v200;
  if ((v6 & 1) != 0)
  {
LABEL_76:
    v178 = v149;
    sub_22646DC48(v165, v149[7] + *(_QWORD *)(v181 + 72) * a1);
    v150 = v182;
    v151 = v177;
LABEL_80:
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v185[1])(v151, v150);
    a2 = v188;
    a1 = v198;
    v24 = (uint64_t)&qword_255840818;
    v3 = v186;
LABEL_81:
    swift_release();
    sub_22643D7E4((uint64_t)v29, &qword_255840818);
    sub_2264401C8(a2);
    sub_2264401C8(v193);
    goto LABEL_7;
  }
LABEL_78:
  v149[(a1 >> 6) + 8] |= 1 << a1;
  v151 = v177;
  v150 = v182;
  ((void (*)(unint64_t, unint64_t, uint64_t))v163.i64[0])(v149[6] + v185[9] * a1, v177, v182);
  sub_22643F6AC(v165, v149[7] + *(_QWORD *)(v181 + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
  v152 = v149[2];
  v60 = __OFADD__(v152, 1);
  v153 = v152 + 1;
  if (!v60)
  {
    v149[2] = v153;
    v178 = v200;
    goto LABEL_80;
  }
  __break(1u);
LABEL_90:
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

uint64_t sub_22646DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpriteKitUtilities()
{
  return objc_opt_self();
}

uint64_t sub_22646DCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid;
  v2 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_22646DCFC()
{
  return type metadata accessor for HullPointUUID();
}

uint64_t type metadata accessor for HullPointUUID()
{
  uint64_t result;

  result = qword_255842DE8;
  if (!qword_255842DE8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22646DD40()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22655C140();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_22646DDC0()
{
  sub_22655D640();
  sub_22655C11C();
  return sub_22655D670();
}

uint64_t sub_22646DE0C()
{
  return sub_22655C11C();
}

uint64_t sub_22646DE38()
{
  sub_22655D640();
  sub_22655C11C();
  return sub_22655D670();
}

BOOL sub_22646DE80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  return (sub_22655C104() & 1) != 0
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type) == *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type);
}

id sub_22646DF04()
{
  return sub_22646DF78(type metadata accessor for HullPoint);
}

uint64_t type metadata accessor for HullPoint()
{
  return objc_opt_self();
}

id sub_22646DF6C()
{
  return sub_22646DF78(type metadata accessor for HullPointHierarchy);
}

id sub_22646DF78(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for HullPointHierarchy()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for HullPointType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HullPointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22646E120 + 4 * byte_226560775[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22646E154 + 4 * asc_226560770[v4]))();
}

uint64_t sub_22646E154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22646E15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22646E164);
  return result;
}

uint64_t sub_22646E170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22646E178);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22646E17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22646E184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HullPointType()
{
  return &type metadata for HullPointType;
}

unint64_t sub_22646E1A4()
{
  unint64_t result;

  result = qword_255842F08;
  if (!qword_255842F08)
  {
    result = MEMORY[0x22769A794](&unk_226560844, &type metadata for HullPointType);
    atomic_store(result, (unint64_t *)&qword_255842F08);
  }
  return result;
}

unint64_t sub_22646E1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255842F10;
  if (!qword_255842F10)
  {
    v1 = type metadata accessor for HullPointUUID();
    result = MEMORY[0x22769A794](&unk_22656086C, v1);
    atomic_store(result, (unint64_t *)&qword_255842F10);
  }
  return result;
}

uint64_t sub_22646E234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t sub_22646E23C()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for FramerateLogManager();
  v0 = swift_allocObject();
  result = sub_22646ED40();
  qword_25585AE48 = v0;
  return result;
}

uint64_t sub_22646E278(char *a1, char *a2)
{
  return sub_2264AC8EC(*a1, *a2);
}

uint64_t sub_22646E284()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_22646E2DC()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22646E308()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_22646E35C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_22646EF10();
  *a1 = result;
  return result;
}

void sub_22646E388(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_226560A98[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t sub_22646E3A4(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[6];

  if ((result & 0x100000000) == 0)
  {
    v2 = result;
    v3 = *(NSObject **)(v1 + 40);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v1;
    *(_DWORD *)(v4 + 24) = v2;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_22646F110;
    *(_QWORD *)(v5 + 24) = v4;
    v8[4] = sub_22646F12C;
    v8[5] = v5;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1107296256;
    v8[2] = sub_226558F38;
    v8[3] = &block_descriptor_13;
    v6 = _Block_copy(v8);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v3, v6);
    _Block_release(v6);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_22646E4D4(uint64_t a1, float a2)
{
  float *v4;
  uint64_t result;
  float v6;
  char v7;

  *(float *)(a1 + 48) = a2;
  if (qword_25583F9D0 != -1)
    swift_once();
  v4 = (float *)off_25584AF28;
  result = swift_beginAccess();
  if (v4[36] <= a2)
  {
    v7 = 2;
  }
  else
  {
    v6 = *(float *)(a1 + 48);
    result = swift_beginAccess();
    if (v6 >= v4[37])
      return result;
    v7 = 1;
  }
  *(_BYTE *)(a1 + 52) = v7;
  return result;
}

uint64_t sub_22646E58C(double a1)
{
  uint64_t v1;
  double (*v3)();
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  _QWORD v10[6];

  if ((*(_BYTE *)(v1 + 72) & 1) != 0)
  {
    v3 = 0;
LABEL_4:
    *(double *)(v1 + 64) = a1;
    *(_BYTE *)(v1 + 72) = 0;
    return sub_22646F06C((uint64_t)v3);
  }
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(NSObject **)(v1 + 40);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v1;
  *(double *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v4;
  v7 = swift_allocObject();
  v3 = sub_22646F0A0;
  *(_QWORD *)(v7 + 16) = sub_22646F0A0;
  *(_QWORD *)(v7 + 24) = v6;
  v10[4] = sub_22646F0CC;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_226558F38;
  v10[3] = &block_descriptor_0;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t sub_22646E6EC(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  double v13;
  void (*v14)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v16[24];

  v4 = sub_22655C0E0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v16[-v9];
  *(double *)(a1 + 80) = 1.0 / a2;
  sub_22655C0C8();
  v11 = a1 + OBJC_IVAR____TtC8RoomPlan19FramerateLogManager_lastDisplayTime;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
  sub_22655C0A4();
  v13 = v12;
  v14 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v14)(v10, v4);
  if (v13 >= 0.1)
  {
    sub_22646E864(*(_BYTE *)(a1 + 52), *(float *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 80));
    *(_BYTE *)(a1 + 52) = 0;
    sub_22655C0C8();
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v11, v10, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_22646E864(char a1, float a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;

  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843100);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22655FA10;
  v11 = qword_226560A98[a1];
  *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v10 + 64) = sub_22646F028();
  v12 = MEMORY[0x24BEE14E8];
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = 0xE300000000000000;
  v13 = MEMORY[0x24BEE1568];
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = v13;
  *(float *)(v10 + 72) = a2;
  v24 = sub_22655CDAC();
  v25 = v14;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22655F8F0;
  v16 = MEMORY[0x24BEE13C8];
  v17 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v15 + 64) = v17;
  *(double *)(v15 + 32) = a3;
  sub_22655CDAC();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_22655F8F0;
  *(_QWORD *)(v18 + 56) = v16;
  *(_QWORD *)(v18 + 64) = v17;
  *(double *)(v18 + 32) = a4;
  sub_22655CDAC();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v19 = MEMORY[0x22769A944](v5 + 16);
  if (!v19)
    return swift_bridgeObjectRelease();
  v20 = v19 + OBJC_IVAR____TtC8RoomPlan18RoomCaptureSession_debugDelegate;
  swift_beginAccess();
  if (MEMORY[0x22769A944](v20))
  {
    v21 = *(_QWORD *)(v20 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 32))(v24, v25, ObjectType, v21);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_22646EAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_22644F0C0(v0 + 16);

  v1 = v0 + OBJC_IVAR____TtC8RoomPlan19FramerateLogManager_lastDisplayTime;
  v2 = sub_22655C0E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_22646EB28()
{
  return type metadata accessor for FramerateLogManager();
}

uint64_t type metadata accessor for FramerateLogManager()
{
  uint64_t result;

  result = qword_255842F48;
  if (!qword_255842F48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22646EB6C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22655C0E0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FramerateLogManager.DeviceVelocityMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22646EC78 + 4 * byte_2265608E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22646ECAC + 4 * byte_2265608E0[v4]))();
}

uint64_t sub_22646ECAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22646ECB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22646ECBCLL);
  return result;
}

uint64_t sub_22646ECC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22646ECD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22646ECD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22646ECDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FramerateLogManager.DeviceVelocityMode()
{
  return &type metadata for FramerateLogManager.DeviceVelocityMode;
}

unint64_t sub_22646ECFC()
{
  unint64_t result;

  result = qword_2558430F8;
  if (!qword_2558430F8)
  {
    result = MEMORY[0x22769A794](&unk_226560A6C, &type metadata for FramerateLogManager.DeviceVelocityMode);
    atomic_store(result, (unint64_t *)&qword_2558430F8);
  }
  return result;
}

uint64_t sub_22646ED40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = sub_22655D064();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655D04C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_22655CBFC();
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 32) = 0;
  sub_22646EF58();
  sub_22655CBCC();
  v8[1] = MEMORY[0x24BEE4AF8];
  sub_22646EF94();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558442B0);
  sub_22646EFDC();
  sub_22655D214();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  *(_QWORD *)(v0 + 40) = sub_22655D088();
  *(_DWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 52) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0;
  sub_22655C0C8();
  return v0;
}

uint64_t sub_22646EF10()
{
  unint64_t v0;

  v0 = sub_22655D454();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_22646EF58()
{
  unint64_t result;

  result = qword_2558442A0;
  if (!qword_2558442A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2558442A0);
  }
  return result;
}

unint64_t sub_22646EF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2558491E0;
  if (!qword_2558491E0)
  {
    v1 = sub_22655D04C();
    result = MEMORY[0x22769A794](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_2558491E0);
  }
  return result;
}

unint64_t sub_22646EFDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2558491F0;
  if (!qword_2558491F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2558442B0);
    result = MEMORY[0x22769A794](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2558491F0);
  }
  return result;
}

unint64_t sub_22646F028()
{
  unint64_t result;

  result = qword_255849B40;
  if (!qword_255849B40)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_255849B40);
  }
  return result;
}

uint64_t sub_22646F06C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_22646F07C()
{
  swift_release();
  return swift_deallocObject();
}

double sub_22646F0A0()
{
  uint64_t v0;
  double result;

  result = 1.0 / (*(double *)(v0 + 24) - *(double *)(v0 + 32));
  *(double *)(*(_QWORD *)(v0 + 16) + 56) = result;
  return result;
}

uint64_t sub_22646F0BC()
{
  return swift_deallocObject();
}

uint64_t sub_22646F0CC()
{
  uint64_t v0;

  return sub_2264F4E34(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_22646F0EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22646F110()
{
  uint64_t v0;

  return sub_22646E4D4(*(_QWORD *)(v0 + 16), *(float *)(v0 + 24));
}

uint64_t sub_22646F11C()
{
  return swift_deallocObject();
}

uint64_t sub_22646F138(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_22655D55C() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = sub_22655D55C();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t sub_22646F21C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
  v4 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = *(_QWORD *)(*v1 + 16);
  if (v8 == v10)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  if (v8 >= v10)
  {
    __break(1u);
  }
  else
  {
    v11 = type metadata accessor for CapturedRoom.Surface(0);
    v12 = v9
        + ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v8;
    v1[1] = v8 + 1;
    v13 = (uint64_t)&v7[*(int *)(v3 + 48)];
    v14 = v1[2];
    result = sub_22643D704(v12, v13, type metadata accessor for CapturedRoom.Surface);
    if (!__OFADD__(v14, 1))
    {
      v1[2] = v14 + 1;
      v15 = (uint64_t)a1 + *(int *)(v3 + 48);
      *a1 = v14;
      sub_22643F6AC(v13, v15, type metadata accessor for CapturedRoom.Surface);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22646F364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v59 = __swift_instantiateConcreteTypeFromMangledName(qword_255843328);
  v3 = MEMORY[0x24BDAC7A8](v59);
  v58 = (uint64_t)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)v47 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)v47 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843320);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (!v11)
    return v12;
  v47[1] = v1;
  v62 = MEMORY[0x24BEE4AF8];
  sub_2264C7BC8(0, v11, 0);
  result = sub_22647B690(a1);
  v15 = result;
  v16 = 0;
  v17 = a1 + 64;
  v48 = a1 + 80;
  v49 = v11;
  v52 = v10;
  v53 = a1;
  v50 = v14;
  v51 = a1 + 64;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    v20 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_26;
    v60 = v16;
    v61 = 1 << v15;
    v21 = v59;
    v22 = (uint64_t)v56;
    v23 = &v56[*(int *)(v59 + 48)];
    v24 = *(_QWORD *)(a1 + 48);
    v25 = sub_22655C140();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v27(v22, v24 + *(_QWORD *)(v26 + 72) * v15, v25);
    v28 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v15);
    v29 = *v28;
    v30 = v28[1];
    *(_QWORD *)v23 = *v28;
    *((_QWORD *)v23 + 1) = v30;
    v31 = v57;
    v27((uint64_t)v57, v22, v25);
    v32 = &v31[*(int *)(v21 + 48)];
    *(_QWORD *)v32 = v29;
    *((_QWORD *)v32 + 1) = v30;
    v33 = (uint64_t)v31;
    v34 = v58;
    sub_226446554(v33, v58, qword_255843328);
    swift_bridgeObjectRetain_n();
    sub_22643D7E4(v22, qword_255843328);
    v35 = *(int *)(v21 + 48);
    v36 = v52;
    v37 = (uint64_t *)(v34 + v35);
    v38 = *v37;
    v39 = v37[1];
    v27((uint64_t)v52 + *(int *)(v55 + 48), v34, v25);
    *v36 = v38;
    v36[1] = v39;
    swift_bridgeObjectRetain();
    sub_22643D7E4(v34, qword_255843328);
    v12 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2264C7BC8(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = v62;
    }
    v41 = *(_QWORD *)(v12 + 16);
    v40 = *(_QWORD *)(v12 + 24);
    a1 = v53;
    if (v41 >= v40 >> 1)
    {
      sub_2264C7BC8(v40 > 1, v41 + 1, 1);
      v12 = v62;
    }
    *(_QWORD *)(v12 + 16) = v41 + 1;
    result = sub_226446554((uint64_t)v36, v12+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v41, &qword_255843320);
    v18 = 1 << *(_BYTE *)(a1 + 32);
    if (v15 >= v18)
      goto LABEL_27;
    v17 = v51;
    v42 = *(_QWORD *)(v51 + 8 * v20);
    if ((v42 & v61) == 0)
      goto LABEL_28;
    LODWORD(v14) = v50;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v50)
      goto LABEL_29;
    v43 = v42 & (-2 << (v15 & 0x3F));
    if (v43)
    {
      v18 = __clz(__rbit64(v43)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v19 = v49;
    }
    else
    {
      v44 = v20 + 1;
      v45 = (unint64_t)(v18 + 63) >> 6;
      v19 = v49;
      if (v20 + 1 < v45)
      {
        v46 = *(_QWORD *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          v18 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v20)
          {
            v46 = *(_QWORD *)(v48 + 8 * v20++);
            if (v46)
            {
              v44 = v20 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v16 = v60 + 1;
    v15 = v18;
    if (v60 + 1 == v19)
      return v12;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_22646F754(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void (*v19)(_QWORD *__return_ptr, _QWORD);
  _QWORD v20[4];
  char v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(type metadata accessor for CapturedRoom.Object(0) - 8);
  v8 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v9 = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v18 = v9;
  v19 = a1;
  do
  {
    a1(v20, v8);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    if ((v21 & 1) == 0)
    {
      v12 = v20[1];
      v22 = v20[0];
      v14 = v20[2];
      v13 = v20[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_226486F68(0, v10[2] + 1, 1, v10);
      v16 = v10[2];
      v15 = v10[3];
      if (v16 >= v15 >> 1)
        v10 = sub_226486F68((_QWORD *)(v15 > 1), v16 + 1, 1, v10);
      v10[2] = v16 + 1;
      v11 = &v10[4 * v16];
      v11[4] = v22;
      v11[5] = v12;
      v11[6] = v14;
      v11[7] = v13;
      a1 = v19;
      v9 = v18;
    }
    v8 += v9;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_22646F8CC()
{
  _QWORD *v0;
  unint64_t result;
  char v2;

  sub_22655C044();
  sub_22647D7C4();
  v0 = (_QWORD *)sub_22655D178();
  swift_bridgeObjectRelease();
  result = sub_22646F138(0x737465737361, 0xE600000000000000, v0);
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (!result)
    {
LABEL_6:
      __swift_instantiateConcreteTypeFromMangledName(&qword_2558432C0);
      sub_22647F26C();
      sub_22655CCF8();
      swift_bridgeObjectRelease();
      sub_22655CE24();
      swift_bridgeObjectRelease();
      return 12078;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v0[2] >= result)
    {
      sub_22650A5DC(0, result);
      goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22646FA0C()
{
  uint64_t v0;

  v0 = sub_22655BE28();
  __swift_allocate_value_buffer(v0, qword_25585AE50);
  __swift_project_value_buffer(v0, (uint64_t)qword_25585AE50);
  return sub_22655BDEC();
}

uint64_t sub_22646FA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = sub_22655BE28();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v10 - v6;
  __swift_allocate_value_buffer(v5, qword_25585AE68);
  __swift_project_value_buffer(v0, (uint64_t)qword_25585AE68);
  sub_22655BDEC();
  sub_22655BDEC();
  sub_22655BDF8();
  if (qword_25583F8C8 != -1)
    swift_once();
  __swift_project_value_buffer(v0, (uint64_t)qword_25585AE50);
  sub_22655BE1C();
  sub_22655BE04();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v0);
}

void sub_22646FB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = sub_22655C05C();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for USDModel.Error();
  MEMORY[0x24BDAC7A8](v2);
  sub_22643D704(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_22646FC58 + 4 * byte_226560AB0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22646FC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
  *(_QWORD *)(v4 - 64) = 0;
  *(_QWORD *)(v4 - 56) = 0xE000000000000000;
  sub_22655D2EC();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 - 64) = 0xD000000000000012;
  *(_QWORD *)(v4 - 56) = 0x800000022656C0A0;
  sub_22655C044();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v5;
}

uint64_t sub_226470028(_QWORD *a1, uint64_t a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t), void **a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  char *v79;
  uint64_t result;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  void *v91;
  id v92;
  void *v93;
  unsigned int v94;
  id v95;
  void *v96;
  unsigned int v97;
  id v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char *v107;
  void *v108;
  void (*v109)(char *, uint64_t);
  id v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  id v121;
  id v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  void (*v133)(char *, uint64_t);
  char *v134;
  char *v135;
  uint64_t v136;
  id v137;
  void (*v138)(char *, uint64_t);
  char *v139;
  void *v140;
  id v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  id v151;
  uint64_t v152;
  void *v153;
  void (*v154)(char *, uint64_t);
  unsigned __int8 v155;
  id v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  void (*v178)(char *, uint64_t);
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  id v187;
  void (*v188)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  unint64_t v190;
  void (*v191)(char *, uint64_t, uint64_t);
  uint64_t v192;
  void (*v193)(char *, uint64_t);
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  int v206;
  void *v207;
  char *v208;
  uint64_t v209;
  unsigned int (*v210)(uint64_t, uint64_t, uint64_t);
  id v211;
  char *v212;
  char *v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  id v223;
  unint64_t v224;
  uint64_t v225;

  v210 = a3;
  v214 = a1;
  v225 = *MEMORY[0x24BDAC8D0];
  v203 = sub_22655C140();
  v202 = *(_QWORD *)(v203 - 8);
  MEMORY[0x24BDAC7A8](v203);
  v201 = (char *)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255849210);
  MEMORY[0x24BDAC7A8](v9);
  v198 = (uint64_t)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v205 = (uint64_t)&v186 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v208 = (char *)&v186 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v200 = (char *)&v186 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v199 = (char *)&v186 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v209 = (uint64_t)&v186 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v218 = (uint64_t)&v186 - v22;
  v23 = sub_22655C05C();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v213 = (char *)&v186 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v204 = (char *)&v186 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v212 = (char *)&v186 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v216 = (char *)&v186 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v217 = (char *)&v186 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v220 = (char *)&v186 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v186 - v37;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v186 - v40;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v186 - v43;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432F0);
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v186 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *a4;
  v49 = a4[1];
  v207 = v48;
  v206 = *a5;
  if ((sub_22655BF90() & 1) == 0)
  {
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v51, a2, v23);
    goto LABEL_17;
  }
  v215 = v24;
  if ((sub_22655BFCC() & 1) != 0)
  {
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v215 + 16))(v50, a2, v23);
LABEL_17:
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  v193 = (void (*)(char *, uint64_t))v38;
  v190 = (unint64_t)v49;
  v223 = (id)sub_22655BFA8();
  v224 = v52;
  v221 = 6583157;
  v222 = 0xE300000000000000;
  v53 = sub_22655C164();
  v54 = (uint64_t)v47;
  v55 = a2;
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v195 = v53;
  v56(v54, 1, 1);
  v185 = sub_22647D7C4();
  v57 = sub_22655D1A8();
  v194 = v54;
  sub_22643D7E4(v54, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58 = v215;
  v59 = *(void (**)(char *, uint64_t, uint64_t))(v215 + 16);
  v192 = v55;
  v59(v44, v55, v23);
  v196 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v56;
  v197 = v185;
  if (!v57)
  {
    v73 = v44;
    v64 = *(void (**)(char *, uint64_t))(v58 + 8);
    v64(v73, v23);
    v65 = v192;
    v59(v41, v192, v23);
    v68 = v195;
    v66 = (char *)v193;
LABEL_12:
    v64(v41, v23);
    v59(v66, v65, v23);
    v72 = v65;
LABEL_13:
    v64(v66, v23);
    goto LABEL_14;
  }
  v223 = (id)sub_22655BFA8();
  v224 = v60;
  v221 = 1633973109;
  v222 = 0xE400000000000000;
  v61 = v194;
  v196(v194, 1, 1, v195);
  v62 = sub_22655D1A8();
  sub_22643D7E4(v61, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v63 = v44;
  v64 = *(void (**)(char *, uint64_t))(v58 + 8);
  v64(v63, v23);
  v65 = v192;
  v59(v41, v192, v23);
  v66 = (char *)v193;
  if (!v62)
  {
    v68 = v195;
    goto LABEL_12;
  }
  v223 = (id)sub_22655BFA8();
  v224 = v67;
  v221 = 1667527541;
  v222 = 0xE400000000000000;
  v68 = v195;
  v196(v61, 1, 1, v195);
  v69 = sub_22655D1A8();
  sub_22643D7E4(v61, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64(v41, v23);
  v59(v66, v65, v23);
  if (!v69)
  {
    v72 = v65;
    goto LABEL_13;
  }
  v223 = (id)sub_22655BFA8();
  v224 = v70;
  v221 = 2053403509;
  v222 = 0xE400000000000000;
  v196(v61, 1, 1, v68);
  v71 = sub_22655D1A8();
  sub_22643D7E4(v61, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64(v66, v23);
  v72 = v65;
  if (v71)
  {
LABEL_16:
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v59(v79, v72, v23);
    goto LABEL_17;
  }
LABEL_14:
  v193 = v64;
  v223 = (id)sub_22655BFB4();
  v224 = v74;
  v75 = (void *)sub_22655D19C();
  v77 = v76;
  swift_bridgeObjectRelease();
  if (v77)
  {
    v223 = v75;
    v224 = v77;
    v221 = 92;
    v222 = 0xE100000000000000;
    v78 = sub_22655D1B4();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
      goto LABEL_16;
  }
  v191 = v59;
  v223 = (id)sub_22655BFA8();
  v224 = v81;
  v221 = 1633973109;
  v222 = 0xE400000000000000;
  v82 = v194;
  v83 = v196;
  v196(v194, 1, 1, v68);
  v84 = sub_22655D1A8();
  sub_22643D7E4(v82, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v189 = v23;
  if (v84)
  {
    v223 = (id)sub_22655BFA8();
    v224 = v85;
    v221 = 1667527541;
    v222 = 0xE400000000000000;
    v83(v82, 1, 1, v68);
    v86 = sub_22655D1A8();
    sub_22643D7E4(v82, &qword_2558432F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87 = v219 + 4;
    v88 = v82;
    if (v86)
      v89 = 1633973109;
    else
      v89 = 1667527541;
    v219[3] = v89;
  }
  else
  {
    v87 = v219 + 4;
    v219[3] = 1633973109;
    v88 = v82;
  }
  v90 = v191;
  *v87 = 0xE400000000000000;
  swift_bridgeObjectRelease();
  v91 = (void *)objc_opt_self();
  v92 = objc_msgSend(v91, sel_defaultManager);
  sub_22655C044();
  v93 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v94 = objc_msgSend(v92, sel_fileExistsAtPath_, v93);

  if (v94)
  {
    v95 = objc_msgSend(v91, sel_defaultManager);
    v96 = (void *)sub_22655BFE4();
    v223 = 0;
    v97 = objc_msgSend(v95, sel_removeItemAtURL_error_, v96, &v223);

    if (!v97)
    {
      v141 = v223;
      sub_22655BF6C();

      return swift_willThrow();
    }
    v98 = v223;
  }
  v223 = (id)sub_22655BFA8();
  v224 = v99;
  v221 = 2053403509;
  v222 = 0xE400000000000000;
  v196(v88, 1, 1, v195);
  v192 = sub_22655D1A8();
  sub_22643D7E4(v88, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v100 = v220;
  v101 = v189;
  v90(v220, v72, v189);
  v102 = v217;
  v90(v217, (uint64_t)v100, v101);
  v103 = v215;
  v104 = v218;
  v188 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v215 + 56);
  v188(v218, 1, 1, v101);
  v105 = v101;
  v106 = objc_msgSend(v91, sel_defaultManager);
  v107 = v216;
  sub_22655C020();
  v108 = (void *)sub_22655BFE4();
  v109 = v193;
  v193(v107, v105);
  v223 = 0;
  LODWORD(v107) = objc_msgSend(v106, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v108, 1, 0, &v223);

  v110 = v223;
  if (!(_DWORD)v107)
  {
    v140 = v110;
    sub_22655BF6C();

    swift_willThrow();
    sub_22643D7E4(v104, &qword_255849210);
    v109(v102, v105);
    return ((uint64_t (*)(char *, uint64_t))v109)(v220, v105);
  }
  v111 = v102;
  v112 = sub_22647B7A0(v214);
  v219[2] = v112;
  swift_bridgeObjectRelease();
  v113 = v209;
  sub_22643D7A0((uint64_t)v210, v209, &qword_255849210);
  v210 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v210(v113, 1, v105) == 1)
  {
    v187 = v91;
    sub_22643D7E4(v113, &qword_255849210);
    v114 = v211;
    v115 = v218;
    v116 = (uint64_t)v213;
    v117 = (uint64_t)v208;
    goto LABEL_32;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v212, v113, v105);
  v142 = sub_22655BFA8();
  v144 = v143;
  v145 = swift_bridgeObjectRetain();
  v146 = v211;
  v147 = sub_22646F364(v145);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v147 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255843300);
    v148 = (void *)sub_22655D430();
  }
  else
  {
    v148 = (void *)MEMORY[0x24BEE4B00];
  }
  v116 = (uint64_t)v213;
  v223 = v148;
  sub_22647CC28(v147, 1, &v223);
  if (v146)
    goto LABEL_68;
  swift_bridgeObjectRelease();
  v158 = HIBYTE(v144) & 0xF;
  if ((v144 & 0x2000000000000000) == 0)
    v158 = v142 & 0xFFFFFFFFFFFFLL;
  if (!v158)
  {
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v164 = v212;
    v191((char *)v166, (uint64_t)v212, v105);
    goto LABEL_57;
  }
  v209 = 0;
  v211 = v223;
  v187 = v91;
  v223 = (id)v142;
  v224 = v144;
  v221 = 1852797802;
  v222 = 0xE400000000000000;
  v159 = v194;
  v160 = v195;
  v161 = v196;
  v196(v194, 1, 1, v195);
  v162 = sub_22655D1A8();
  sub_22643D7E4(v159, &qword_2558432F0);
  swift_bridgeObjectRelease();
  if (v162)
  {
    v223 = (id)v142;
    v224 = v144;
    v221 = 0x7473696C70;
    v222 = 0xE500000000000000;
    v161(v159, 1, 1, v160);
    v163 = sub_22655D1A8();
    sub_22643D7E4(v159, &qword_2558432F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v163)
    {
      swift_release();
      type metadata accessor for USDModel.Error();
      sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
      swift_allocError();
      v164 = v212;
      v191((char *)v165, (uint64_t)v212, v105);
LABEL_57:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v167 = v193;
      v193(v164, v105);
      sub_22643D7E4(v218, &qword_255849210);
      v167(v217, v105);
      return ((uint64_t (*)(char *, uint64_t))v167)(v220, v105);
    }
    sub_22655BF54();
    swift_allocObject();
    sub_22655BF48();
    v223 = v211;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255843308);
    sub_22647F4B8();
    v172 = v209;
    v173 = sub_22655BF3C();
    v175 = v220;
    v176 = v218;
    v177 = v212;
    if (v172)
    {
      swift_release();
      v178 = v193;
      v193(v177, v105);
      sub_22643D7E4(v176, &qword_255849210);
      v178(v217, v105);
      v178(v175, v105);
      return swift_release();
    }
    v179 = v173;
    v180 = v174;
    sub_22655C08C();
    v114 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_22655BD98();
    swift_allocObject();
    sub_22655BD8C();
    v223 = v211;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255843308);
    sub_22647F4B8();
    v168 = v209;
    v169 = sub_22655BD80();
    if (v168)
    {
      swift_release();
      v171 = v193;
      v193(v212, v105);
      sub_22643D7E4(v218, &qword_255849210);
      v171(v217, v105);
      v171(v220, v105);
      return swift_release();
    }
    v179 = v169;
    v180 = v170;
    v177 = v212;
    sub_22655C08C();
    v114 = 0;
  }
  sub_226455C98(v179, v180);
  swift_release();
  sub_22655BF54();
  swift_allocObject();
  sub_22655BF48();
  v223 = v211;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843308);
  sub_22647F4B8();
  v181 = sub_22655BF3C();
  v117 = (uint64_t)v208;
  v182 = v181;
  v184 = v183;
  swift_release();
  sub_22655C08C();
  v193(v177, v105);
  sub_226455C98(v182, v184);
  swift_release();
  v111 = v217;
  v115 = v218;
LABEL_32:
  if (v192)
  {
LABEL_36:
    v136 = (uint64_t)v220;
    sub_22655C020();
    sub_22655BFF0();
    v223 = v207;
    v224 = v190;
    LODWORD(v221) = v206;
    v137 = sub_226471954(v214, v136, v116, (uint64_t *)&v223, (int *)&v221);
    v138 = v193;
    if (v114)
    {
      v193((char *)v116, v105);
      sub_22643D7E4(v115, &qword_255849210);
      v139 = v111;
LABEL_47:
      v138(v139, v105);
      return ((uint64_t (*)(uint64_t, uint64_t))v138)(v136, v105);
    }
    v149 = v137;
    if (v192)
    {
LABEL_46:

      v138((char *)v116, v105);
      sub_22643D7E4(v115, &qword_255849210);
      v139 = v217;
      goto LABEL_47;
    }
    v150 = (void *)sub_22655BFE4();
    objc_msgSend(v149, sel_saveAndCreateUSDZPackageWithURL_, v150);

    v151 = objc_msgSend(v187, sel_defaultManager);
    v152 = v198;
    sub_22643D7A0(v115, v198, &qword_255849210);
    if (v210(v152, 1, v105) != 1)
    {
      v153 = (void *)sub_22655BFE4();
      v154 = v193;
      v193((char *)v152, v105);
      v223 = 0;
      v155 = objc_msgSend(v151, sel_removeItemAtURL_error_, v153, &v223);

      v138 = v154;
      v156 = v223;
      v115 = v218;
      if ((v155 & 1) == 0)
      {
        v157 = v156;
        sub_22655BF6C();

        swift_willThrow();
      }
      goto LABEL_46;
    }
    goto LABEL_67;
  }
  v118 = v216;
  sub_22655BFFC();
  v119 = sub_22655BFD8();
  v211 = v120;
  v212 = (char *)v119;
  v193(v118, v105);
  v121 = objc_msgSend(v187, sel_defaultManager);
  v122 = objc_msgSend(v121, sel_temporaryDirectory);

  v123 = (uint64_t)v199;
  sub_22655C02C();

  sub_22643D7E4(v115, &qword_255849210);
  v124 = v188;
  v188(v123, 0, 1, v105);
  sub_226446554(v123, v115, &qword_255849210);
  sub_22643D7A0(v115, v117, &qword_255849210);
  v125 = v210;
  if (v210(v117, 1, v105) == 1)
  {
    __break(1u);
  }
  else
  {
    v126 = v117;
    v127 = v201;
    sub_22655C134();
    sub_22655C0EC();
    (*(void (**)(char *, uint64_t))(v202 + 8))(v127, v203);
    v128 = (uint64_t)v200;
    sub_22655C008();
    swift_bridgeObjectRelease();
    sub_22643D7E4(v115, &qword_255849210);
    v193((char *)v126, v105);
    v124(v128, 0, 1, v105);
    sub_226446554(v128, v115, &qword_255849210);
    v129 = v205;
    sub_22643D7A0(v115, v205, &qword_255849210);
    if (v125(v129, 1, v105) != 1)
    {
      v130 = v204;
      v132 = (unint64_t)v211;
      v131 = v212;
      sub_22655C008();
      v133 = v193;
      v193((char *)v129, v105);
      v223 = v131;
      v224 = v132;
      sub_22655CE24();
      swift_bridgeObjectRetain();
      sub_22655CE24();
      swift_bridgeObjectRelease();
      v134 = v216;
      sub_22655C008();
      swift_bridgeObjectRelease();
      v133(v130, v105);
      v135 = v220;
      v133(v220, v105);
      (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v135, v134, v105);
      v111 = v217;
      v115 = v218;
      v116 = (uint64_t)v213;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

id sub_226471954(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  v61 = a1;
  v62 = a3;
  v63 = a2;
  v7 = sub_22655C05C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v53 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v53 - v15;
  v17 = *a4;
  v18 = a4[1];
  v19 = *a5;
  v20 = v66;
  v21 = sub_22647CEE8(v63);
  if (v20)
    return v21;
  v56 = v13;
  v57 = v16;
  LODWORD(v63) = v19;
  v66 = 0;
  v54 = v18;
  v55 = v17;
  v22 = v61;
  v58 = v10;
  v59 = v7;
  v60 = v8;
  v23 = 1836019538;
  v24 = (void *)sub_22655CD64();
  v25 = objc_msgSend(v21, sel_metadataWithKey_, v24);

  if (v25)
  {
    v26 = objc_msgSend(v25, sel_stringValue);

    v27 = v22;
    if (v26)
    {
      v23 = sub_22655CD88();
      v29 = v28;

    }
    else
    {
      v29 = 0xE400000000000000;
    }
  }
  else
  {
    v29 = 0xE400000000000000;
    v27 = v22;
  }
  v30 = (void *)*MEMORY[0x24BEBEE28];
  v31 = objc_msgSend(v21, sel_rootNode);
  v32 = v66;
  v33 = sub_22647D430(v23, v29, v30, 0, v31, v21);
  if (v32)
  {

    swift_bridgeObjectRelease();
    return v21;
  }
  v34 = v33;

  swift_bridgeObjectRelease();
  v35 = sub_22647D430(0x5F6E6F6974636553, 0xEB00000000707267, v30, 1, v34, v21);
  v61 = v30;
  v36 = v27[3];
  v37 = v27[4];
  v66 = v35;
  __swift_project_boxed_opaque_existential_1(v27, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 72))(v36, v37);
  sub_22647DC14(v38);
  swift_bridgeObjectRelease();
  v39 = v63;
  if ((v63 & 2) != 0)
  {
    v41 = v61;
    v44 = sub_22647D430(0x7072675F6873654DLL, 0xE800000000000000, v61, 1, v34, v21);
    v53 = v34;
    v45 = (uint64_t)v57;
    sub_22655C008();
    v64 = 0;
    v65 = 0;
    sub_226471F1C(v27, v44, v21, v45, &v64);
    v46 = v45;
    v40 = v59;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v46, v59);

    v34 = v53;
    v39 = v63;
    if ((v63 & 1) == 0)
      goto LABEL_11;
LABEL_16:
    v47 = sub_22647D430(0x7274656D61726150, 0xEE007072675F6369, v41, 1, v34, v21);
    v48 = v34;
    v42 = v60;
    v50 = v47;
    v53 = v48;
    v51 = (uint64_t)v56;
    sub_22655C008();
    sub_226478564(v27, v50, v21, v51);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v51, v40);

    v34 = v53;
    v39 = v63;
    goto LABEL_12;
  }
  v40 = v59;
  v41 = v61;
  if ((v63 & 1) != 0)
    goto LABEL_16;
LABEL_11:
  v42 = v60;
LABEL_12:
  v43 = (uint64_t)v58;
  if ((v39 & 4) != 0)
  {
    v52 = sub_22647D430(0x72675F6C65646F4DLL, 0xE900000000000070, v41, 1, v34, v21);
    v53 = v34;
    sub_22655C008();
    v64 = v55;
    v65 = v54;
    sub_226471F1C(v27, v52, v21, v43, &v64);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v59);

    v34 = v53;
  }
  objc_msgSend(v21, sel_save);

  return v21;
}

void sub_226471F1C(_QWORD *a1, void *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  simd_float4 v121;
  unsigned __int8 *v122;
  float v123;
  float v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  void *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  unsigned __int8 *v164;
  int64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  float32x4_t v173;
  unint64_t v174;
  float v175;
  uint64_t v176;
  float v177;
  float v178;
  uint64_t v179;
  void (*v180)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  unsigned __int8 *v186;
  int64_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  float32x4_t v195;
  unint64_t v196;
  float v197;
  uint64_t v198;
  float v199;
  float v200;
  uint64_t v201;
  void (*v202)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  unsigned __int8 *v209;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  float32x4_t v218;
  unint64_t v219;
  float v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  float v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void (*v230)(char *, uint64_t);
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  void *v240;
  float v241;
  float v242;
  float v243;
  uint64_t v244;
  void (*v245)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t);
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  int64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t (*v270)(uint64_t);
  int64_t v271;
  _QWORD *v272;
  char *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v277;
  unint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t (*v288)(uint64_t);
  unsigned __int8 *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unsigned __int8 *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned __int8 *v300;
  uint64_t v301;
  void *v302;
  void (*v303)(char *, uint64_t);
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  unsigned __int8 *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  uint64_t v321;
  void (*v322)(char *, uint64_t, uint64_t);
  char *v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  void (*v334)(uint64_t, uint64_t);
  float32x4_t v335;
  void *v336;
  void *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  char *v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t *v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  unsigned __int8 *v360;
  char *v361;
  uint64_t v362;
  float32x4_t *v363;
  uint64_t v364;
  float32x4_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  char *v376;
  simd_float4 v377;
  simd_float4 v378;
  simd_float4 v379;
  simd_float4 v380;
  unsigned __int8 *v381;
  void *v382;
  unsigned __int8 *v383;
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  simd_float4 v388;
  id v389;
  unsigned __int8 *v390;
  uint64_t v391;
  char *v392;
  unsigned __int8 *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  uint64_t v402;
  simd_float4x4 v403;
  simd_float4x4 v404;
  simd_float4x4 v405;

  v345 = a4;
  v382 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v8);
  v350 = (uint64_t)&v335 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v357 = sub_22655C140();
  v356 = *(_QWORD *)(v357 - 8);
  MEMORY[0x24BDAC7A8](v357);
  v343 = (char *)&v335 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558480D0);
  MEMORY[0x24BDAC7A8](v11);
  v348 = (uint64_t)&v335 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = type metadata accessor for CapturedRoom.Object(0);
  v364 = *(_QWORD *)(v355 - 8);
  MEMORY[0x24BDAC7A8](v355);
  v360 = (unsigned __int8 *)&v335 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v362 = (uint64_t)&v335 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v363 = (float32x4_t *)((char *)&v335 - v17);
  MEMORY[0x24BDAC7A8](v18);
  v344 = (char *)&v335 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v20);
  v359 = (char *)&v335 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v358 = (char *)&v335 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v376 = (char *)&v335 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v375 = (char *)&v335 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v370 = (char *)&v335 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v369 = (char *)&v335 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v385 = (char *)&v335 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v384 = (char *)&v335 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v392 = (char *)&v335 - v37;
  MEMORY[0x24BDAC7A8](v38);
  v368 = (uint64_t)&v335 - v39;
  v354 = type metadata accessor for CapturedRoom.Surface(0);
  v391 = *(_QWORD *)(v354 - 8);
  MEMORY[0x24BDAC7A8](v354);
  v381 = (unsigned __int8 *)&v335 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v393 = (unsigned __int8 *)&v335 - v42;
  MEMORY[0x24BDAC7A8](v43);
  v390 = (unsigned __int8 *)&v335 - v44;
  MEMORY[0x24BDAC7A8](v45);
  v396 = (uint64_t)&v335 - v46;
  MEMORY[0x24BDAC7A8](v47);
  v383 = (unsigned __int8 *)&v335 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432D8);
  MEMORY[0x24BDAC7A8](v49);
  v353 = (uint64_t *)((char *)v335.i64 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v51);
  v352 = (uint64_t *)((char *)&v335 - v52);
  v397 = sub_22655C05C();
  v395 = *(_QWORD *)(v397 - 8);
  MEMORY[0x24BDAC7A8](v397);
  v349 = (char *)&v335 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54);
  v351 = (char *)&v335 - v55;
  MEMORY[0x24BDAC7A8](v56);
  v373 = (uint64_t)&v335 - v57;
  MEMORY[0x24BDAC7A8](v58);
  v361 = (char *)&v335 - v59;
  MEMORY[0x24BDAC7A8](v60);
  v374 = (uint64_t)&v335 - v61;
  MEMORY[0x24BDAC7A8](v62);
  v64 = (char *)&v335 - v63;
  MEMORY[0x24BDAC7A8](v65);
  v67 = (char *)&v335 - v66;
  MEMORY[0x24BDAC7A8](v68);
  v70 = (char *)&v335 - v69;
  MEMORY[0x24BDAC7A8](v71);
  v73 = (char *)&v335 - v72;
  MEMORY[0x24BDAC7A8](v74);
  v76 = (char *)&v335 - v75;
  v347 = *a5;
  v346 = a5[1];
  v77 = a1[3];
  v78 = a1[4];
  v372 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v77);
  v79 = sub_22646C96C(v77, v78);
  v81 = v80;
  v82 = (void *)*MEMORY[0x24BEBEE28];
  v83 = (uint64_t)v394;
  v84 = sub_22647D430(0x7072675F68637241, 0xE800000000000000, (void *)*MEMORY[0x24BEBEE28], 1, a2, v382);
  v388.i64[0] = v83;
  if (v83)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v387 = v67;
  v386 = v64;
  v340 = v81;
  v339 = v79;
  v342 = v70;
  v394 = v73;
  v336 = a2;
  v337 = v82;
  v341 = v84;
  v338 = v76;
  sub_22655C008();
  v85 = v372[3];
  v86 = v372[4];
  __swift_project_boxed_opaque_existential_1(v372, v85);
  v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 24))(v85, v86);
  v402 = 0;
  v401 = (unint64_t)v87;
  v88 = v353;
  sub_22646F21C(v353);
  v89 = v352;
  sub_226446554((uint64_t)v88, (uint64_t)v352, &qword_2558432D8);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90) != 1)
  {
    v91 = v388.i64[0];
    while (1)
    {
      v93 = *v89;
      sub_22643F6AC((uint64_t)v89 + *(int *)(v90 + 48), (uint64_t)v383, type metadata accessor for CapturedRoom.Surface);
      v399 = 0x5F6C6C6157;
      v400 = 0xE500000000000000;
      v398 = v93;
      sub_22655D544();
      sub_22655CE24();
      swift_bridgeObjectRelease();
      sub_22655CE24();
      v389 = sub_22647D430(v399, v400, v337, 1, v341, v382);
      if (v91)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v395 + 8))(v338, v397);
        sub_22643D748((uint64_t)v383, type metadata accessor for CapturedRoom.Surface);
        return;
      }
      swift_bridgeObjectRelease();
      v398 = v93;
      v399 = 1819042135;
      v400 = 0xE400000000000000;
      sub_22655D544();
      sub_22655CE24();
      swift_bridgeObjectRelease();
      sub_22655C008();
      swift_bridgeObjectRelease();
      v94 = v372;
      v95 = v372[3];
      v96 = v372[4];
      __swift_project_boxed_opaque_existential_1(v372, v95);
      v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 32))(v95, v96);
      MEMORY[0x24BDAC7A8](v97);
      v98 = (uint64_t)v383;
      *((_QWORD *)&v335 - 2) = v383;
      sub_226506044((uint64_t (*)(char *))sub_226480024, (uint64_t)(&v335 - 2), v99);
      v388.i64[0] = v100;
      v101 = v94[3];
      v102 = v94[4];
      __swift_project_boxed_opaque_existential_1(v94, v101);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 40))(v101, v102);
      MEMORY[0x24BDAC7A8](v103);
      *((_QWORD *)&v335 - 2) = v98;
      sub_226506044((uint64_t (*)(char *))sub_22647F408, (uint64_t)(&v335 - 2), v104);
      v106 = v105;
      v107 = v94[3];
      v108 = v94[4];
      __swift_project_boxed_opaque_existential_1(v94, v107);
      v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 48))(v107, v108);
      MEMORY[0x24BDAC7A8](v109);
      *((_QWORD *)&v335 - 2) = v98;
      sub_226506044((uint64_t (*)(char *))sub_226480024, (uint64_t)(&v335 - 2), v110);
      v112 = v111;
      v113 = v94[3];
      v114 = v94[4];
      __swift_project_boxed_opaque_existential_1(v94, v113);
      v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 56))(v113, v114);
      MEMORY[0x24BDAC7A8](v115);
      *((_QWORD *)&v335 - 2) = v98;
      sub_226506068((uint64_t (*)(char *))sub_22647F424, (uint64_t)(&v335 - 2), v116);
      v118 = v117;
      v91 = 0;
      v399 = v388.i64[0];
      swift_bridgeObjectRetain();
      v119 = swift_bridgeObjectRetain();
      v367 = v106;
      sub_22646A3FC(v119);
      v120 = swift_bridgeObjectRetain();
      v371 = v112;
      sub_22646A3FC(v120);
      v121 = *(simd_float4 *)(v98 + 16);
      v380 = v121;
      v122 = (unsigned __int8 *)v98;
      if (v121.f32[2] <= 0.0)
      {
        v124 = 0.0;
        if ((*(_BYTE *)v98 - 2) > 3u)
          v123 = 0.08;
        else
          v123 = flt_22655FDA0[(char)(*(_BYTE *)v98 - 2)];
      }
      else
      {
        v123 = v121.f32[2] * 0.5;
        v124 = v121.f32[2] * 0.5;
      }
      v125 = v394;
      v126 = v397;
      v127 = v118;
      v128 = v399;
      v129 = (uint64_t)&v122[*(int *)(v354 + 44)];
      if (*(_QWORD *)(v339 + 16)
        && (v130 = v339, v131 = sub_226534858((uint64_t)&v122[*(int *)(v354 + 44)]), (v132 & 1) != 0))
      {
        v133 = v131;
        v134 = *(_QWORD *)(v130 + 56);
        v135 = type metadata accessor for ScanItemStrut();
        v136 = *(_QWORD *)(v135 - 8);
        v137 = v134 + *(_QWORD *)(v136 + 72) * v133;
        v122 = v383;
        v138 = v368;
        sub_22643D704(v137, v368, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
        v139 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56);
        v125 = v394;
        v139(v138, 0, 1, v135);
      }
      else
      {
        v140 = type metadata accessor for ScanItemStrut();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v368, 1, 1, v140);
      }
      if (*(_QWORD *)(v340 + 16) && (v141 = v340, v142 = sub_226534858(v129), (v143 & 1) != 0))
      {
        v144 = v142;
        v145 = *(_QWORD *)(v141 + 56);
        v146 = type metadata accessor for ScanItemStrut();
        v147 = *(_QWORD *)(v146 - 8);
        v148 = v145 + *(_QWORD *)(v147 + 72) * v144;
        v122 = v383;
        v149 = (uint64_t)v392;
        sub_22643D704(v148, (uint64_t)v392, (uint64_t (*)(_QWORD))type metadata accessor for ScanItemStrut);
        v150 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v147 + 56);
        v125 = v394;
        v150(v149, 0, 1, v146);
      }
      else
      {
        v151 = type metadata accessor for ScanItemStrut();
        v149 = (uint64_t)v392;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 56))(v392, 1, 1, v151);
      }
      sub_2264756B4(v122, v128, v127, 0, 1, v368, v149, (uint64_t)v342, v124, v123, 0.0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_22646F8CC();
      if (v152)
      {
        v153 = (void *)sub_22655CD64();
        swift_bridgeObjectRelease();
      }
      else
      {
        v153 = 0;
      }
      objc_msgSend(v389, sel_addReferenceWithPath_nodePath_, v153, 0);

      if (qword_25583F9D0 != -1)
        swift_once();
      v154 = off_25584AF28;
      swift_beginAccess();
      v155 = v395;
      if ((v154[136] & 1) != 0 || (swift_beginAccess(), v154[137] == 1))
      {
        v156 = (uint64_t)v383;
        v157 = *(_QWORD *)&v383[*(int *)(v354 + 64)];
        if (*(_QWORD *)(v157 + 16))
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_226503DBC(*(double *)v380.i64);
          v159 = v158;
          MEMORY[0x24BDAC7A8](v158);
          *((_QWORD *)&v335 - 2) = v156;
          v157 = sub_2264B4270((void (*)(__int128 *__return_ptr, __int128 *))sub_22647F440, (uint64_t)(&v335 - 2), v159);
          v155 = v395;
          swift_bridgeObjectRelease();
        }
        v125 = v394;
      }
      else
      {
        v157 = 0;
      }
      v160 = off_25584AF28;
      swift_beginAccess();
      if (v160[136] == 1)
      {
        v161 = v388.i64[0];
        v366 = *(_QWORD *)(v388.i64[0] + 16);
        if (v366)
        {
          v162 = 0;
          v365.i64[0] = v388.i64[0]
                      + ((*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80));
          while (v162 < *(_QWORD *)(v161 + 16))
          {
            v164 = (unsigned __int8 *)v396;
            sub_22643D704(v365.i64[0] + *(_QWORD *)(v391 + 72) * v162, v396, type metadata accessor for CapturedRoom.Surface);
            v403 = __invert_f4(*(simd_float4x4 *)(v164 + 32));
            if (!v157)
              goto LABEL_183;
            v165 = *(_QWORD *)(v157 + 16);
            if (v165)
            {
              v399 = MEMORY[0x24BEE4AF8];
              v380 = v403.columns[0];
              v379 = v403.columns[1];
              v378 = v403.columns[2];
              v377 = v403.columns[3];
              swift_bridgeObjectRetain();
              sub_2264C79C4(0, v165, 0);
              v166 = (float32x4_t)v377;
              v167 = (float32x4_t)v378;
              v168 = (float32x4_t)v379;
              v169 = (float32x4_t)v380;
              v170 = 0;
              v171 = v399;
              v172 = *(_QWORD *)(v399 + 16);
              do
              {
                v173 = *(float32x4_t *)(v157 + 16 * v170 + 32);
                v399 = v171;
                v174 = *(_QWORD *)(v171 + 24);
                if (v172 >= v174 >> 1)
                {
                  v335 = v173;
                  sub_2264C79C4(v174 > 1, v172 + 1, 1);
                  v173 = v335;
                  v166 = (float32x4_t)v377;
                  v167 = (float32x4_t)v378;
                  v168 = (float32x4_t)v379;
                  v169 = (float32x4_t)v380;
                  v171 = v399;
                }
                ++v170;
                *(_QWORD *)(v171 + 16) = v172 + 1;
                *(_QWORD *)(v171 + 8 * v172++ + 32) = vaddq_f32(v166, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v169, v173.f32[0]), v168, *(float32x2_t *)v173.f32, 1), v167, v173, 2)).u64[0];
              }
              while (v165 != v170);
              swift_bridgeObjectRelease();
              v164 = (unsigned __int8 *)v396;
            }
            else
            {
              v171 = MEMORY[0x24BEE4AF8];
            }
            v175 = *((float *)v164 + 6);
            v176 = (uint64_t)v385;
            if (v175 <= 0.0)
            {
              v178 = 0.0;
              if ((*v164 - 2) > 3u)
                v177 = 0.08;
              else
                v177 = flt_22655FDA0[(char)(*v164 - 2)];
            }
            else
            {
              v177 = v175 * 0.5;
              v178 = v175 * 0.5;
            }
            v179 = type metadata accessor for ScanItemStrut();
            v180 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56);
            v181 = (uint64_t)v384;
            v180(v384, 1, 1, v179);
            v180((char *)v176, 1, 1, v179);
            v125 = v394;
            sub_2264756B4((unsigned __int8 *)v396, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v171, 1, v181, v176, (uint64_t)v387, v178, v177, 0.0);
            swift_bridgeObjectRelease();
            sub_22643D7E4(v176, &qword_255840818);
            sub_22643D7E4(v181, &qword_255840818);
            sub_22646F8CC();
            if (v182)
            {
              v163 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v163 = 0;
            }
            v149 = (uint64_t)v392;
            ++v162;
            objc_msgSend(v389, sel_addReferenceWithPath_nodePath_, v163, 0);

            v155 = v395;
            v126 = v397;
            (*(void (**)(char *, uint64_t))(v395 + 8))(v387, v397);
            sub_22643D748(v396, type metadata accessor for CapturedRoom.Surface);
            v161 = v388.i64[0];
            if (v162 == v366)
              goto LABEL_56;
          }
          __break(1u);
          swift_release();

          swift_bridgeObjectRelease();
          v334 = *(void (**)(uint64_t, uint64_t))(v395 + 8);
          v334((uint64_t)v351, v126);
          swift_release();
          v251 = v361;
LABEL_117:
          v334((uint64_t)v251, v126);
          v334((uint64_t)v338, v126);
          return;
        }
LABEL_56:
        swift_bridgeObjectRelease();
        v183 = v367;
        v377.i64[0] = *(_QWORD *)(v367 + 16);
        if (v377.i64[0])
        {
          v184 = 0;
          v366 = v367 + ((*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80));
          while (v184 < *(_QWORD *)(v183 + 16))
          {
            v186 = v390;
            sub_22643D704(v366 + *(_QWORD *)(v391 + 72) * v184, (uint64_t)v390, type metadata accessor for CapturedRoom.Surface);
            v404 = __invert_f4(*(simd_float4x4 *)(v186 + 32));
            if (!v157)
              goto LABEL_184;
            v187 = *(_QWORD *)(v157 + 16);
            if (v187)
            {
              v399 = MEMORY[0x24BEE4AF8];
              v388 = v404.columns[0];
              v380 = v404.columns[1];
              v379 = v404.columns[2];
              v378 = v404.columns[3];
              swift_bridgeObjectRetain();
              sub_2264C79C4(0, v187, 0);
              v188 = (float32x4_t)v378;
              v189 = (float32x4_t)v379;
              v190 = (float32x4_t)v380;
              v191 = (float32x4_t)v388;
              v192 = 0;
              v193 = v399;
              v194 = *(_QWORD *)(v399 + 16);
              do
              {
                v195 = *(float32x4_t *)(v157 + 16 * v192 + 32);
                v399 = v193;
                v196 = *(_QWORD *)(v193 + 24);
                if (v194 >= v196 >> 1)
                {
                  v365 = v195;
                  sub_2264C79C4(v196 > 1, v194 + 1, 1);
                  v195 = v365;
                  v188 = (float32x4_t)v378;
                  v189 = (float32x4_t)v379;
                  v190 = (float32x4_t)v380;
                  v191 = (float32x4_t)v388;
                  v193 = v399;
                }
                ++v192;
                *(_QWORD *)(v193 + 16) = v194 + 1;
                *(_QWORD *)(v193 + 8 * v194++ + 32) = vaddq_f32(v188, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v191, v195.f32[0]), v190, *(float32x2_t *)v195.f32, 1), v189, v195, 2)).u64[0];
              }
              while (v187 != v192);
              swift_bridgeObjectRelease();
              v186 = v390;
            }
            else
            {
              v193 = MEMORY[0x24BEE4AF8];
            }
            v197 = *((float *)v186 + 6);
            v198 = (uint64_t)v370;
            if (v197 <= 0.0)
            {
              v200 = 0.0;
              if ((*v186 - 2) > 3u)
                v199 = 0.08;
              else
                v199 = flt_22655FDA0[(char)(*v186 - 2)];
            }
            else
            {
              v199 = v197 * 0.5;
              v200 = v197 * 0.5;
            }
            v201 = type metadata accessor for ScanItemStrut();
            v202 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v201 - 8) + 56);
            v203 = (uint64_t)v369;
            v202(v369, 1, 1, v201);
            v202((char *)v198, 1, 1, v201);
            v125 = v394;
            sub_2264756B4(v390, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v193, 1, v203, v198, (uint64_t)v386, v200, v199, 0.0);
            swift_bridgeObjectRelease();
            sub_22643D7E4(v198, &qword_255840818);
            sub_22643D7E4(v203, &qword_255840818);
            sub_22646F8CC();
            if (v204)
            {
              v185 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v185 = 0;
            }
            v149 = (uint64_t)v392;
            v126 = v397;
            ++v184;
            objc_msgSend(v389, sel_addReferenceWithPath_nodePath_, v185, 0);

            v155 = v395;
            (*(void (**)(char *, uint64_t))(v395 + 8))(v386, v126);
            sub_22643D748((uint64_t)v390, type metadata accessor for CapturedRoom.Surface);
            v183 = v367;
            if (v184 == v377.i64[0])
              goto LABEL_76;
          }
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_76:
      swift_bridgeObjectRelease();
      v205 = off_25584AF28;
      swift_beginAccess();
      if (v205[137] == 1)
      {
        v206 = v371;
        v367 = *(_QWORD *)(v371 + 16);
        if (v367)
        {
          v388.i64[0] = 0;
          v207 = 0;
          v366 = v371 + ((*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80));
          while (v207 < *(_QWORD *)(v206 + 16))
          {
            v209 = v393;
            sub_22643D704(v366 + *(_QWORD *)(v391 + 72) * v207, (uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
            v405 = __invert_f4(*(simd_float4x4 *)(v209 + 32));
            if (!v157)
              goto LABEL_185;
            v210 = *(_QWORD *)(v157 + 16);
            if (v210)
            {
              v399 = MEMORY[0x24BEE4AF8];
              v380 = v405.columns[0];
              v379 = v405.columns[1];
              v378 = v405.columns[2];
              v377 = v405.columns[3];
              swift_bridgeObjectRetain();
              sub_2264C79C4(0, v210, 0);
              v211 = (float32x4_t)v377;
              v212 = (float32x4_t)v378;
              v213 = (float32x4_t)v379;
              v214 = (float32x4_t)v380;
              v215 = 0;
              v216 = v399;
              v217 = *(_QWORD *)(v399 + 16);
              do
              {
                v218 = *(float32x4_t *)(v157 + 16 * v215 + 32);
                v399 = v216;
                v219 = *(_QWORD *)(v216 + 24);
                if (v217 >= v219 >> 1)
                {
                  v365 = v218;
                  sub_2264C79C4(v219 > 1, v217 + 1, 1);
                  v218 = v365;
                  v211 = (float32x4_t)v377;
                  v212 = (float32x4_t)v378;
                  v213 = (float32x4_t)v379;
                  v214 = (float32x4_t)v380;
                  v216 = v399;
                }
                ++v215;
                *(_QWORD *)(v216 + 16) = v217 + 1;
                *(_QWORD *)(v216 + 8 * v217++ + 32) = vaddq_f32(v211, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v214, v218.f32[0]), v213, *(float32x2_t *)v218.f32, 1), v212, v218, 2)).u64[0];
              }
              while (v210 != v215);
              swift_bridgeObjectRelease();
              v209 = v393;
            }
            else
            {
              v216 = MEMORY[0x24BEE4AF8];
            }
            v220 = *((float *)v209 + 6);
            v221 = (uint64_t)v376;
            if (v220 <= 0.0)
            {
              v222 = v388.i64[0];
              v224 = 0.0;
              if ((*v209 - 2) > 3u)
                v223 = 0.08;
              else
                v223 = flt_22655FDA0[(char)(*v209 - 2)];
            }
            else
            {
              v222 = v388.i64[0];
              v223 = v220 * 0.5;
              v224 = v220 * 0.5;
            }
            v225 = type metadata accessor for ScanItemStrut();
            v226 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v225 - 8) + 56);
            v227 = (uint64_t)v375;
            v226(v375, 1, 1, v225);
            v226((char *)v221, 1, 1, v225);
            v228 = v374;
            v125 = v394;
            sub_2264756B4(v393, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], v216, 1, v227, v221, v374, v224, v223, 0.0);
            if (v222)
            {
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              sub_22643D7E4(v221, &qword_255840818);
              sub_22643D7E4(v227, &qword_255840818);
              sub_22643D748((uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
              swift_bridgeObjectRelease();
              v249 = *(void (**)(char *, uint64_t))(v395 + 8);
              v250 = v397;
              v249(v342, v397);
              sub_22643D7E4((uint64_t)v392, &qword_255840818);
              sub_22643D7E4(v368, &qword_255840818);
              v249(v125, v250);
              swift_bridgeObjectRelease();
              v249(v338, v250);
              sub_22643D748((uint64_t)v383, type metadata accessor for CapturedRoom.Surface);
              return;
            }
            swift_bridgeObjectRelease();
            sub_22643D7E4(v221, &qword_255840818);
            sub_22643D7E4(v227, &qword_255840818);
            sub_22646F8CC();
            if (v229)
            {
              v208 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v208 = 0;
            }
            v149 = (uint64_t)v392;
            ++v207;
            objc_msgSend(v389, sel_addReferenceWithPath_nodePath_, v208, 0);

            v155 = v395;
            (*(void (**)(uint64_t, uint64_t))(v395 + 8))(v228, v397);
            sub_22643D748((uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
            v388.i64[0] = 0;
            v206 = v371;
            if (v207 == v367)
            {

              swift_bridgeObjectRelease();
              v126 = v397;
              v91 = v388.i64[0];
              goto LABEL_101;
            }
          }
          __break(1u);
          goto LABEL_179;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();

      }
LABEL_101:
      swift_bridgeObjectRelease();
      v230 = *(void (**)(char *, uint64_t))(v155 + 8);
      v230(v342, v126);
      sub_22643D7E4(v149, &qword_255840818);
      sub_22643D7E4(v368, &qword_255840818);
      v230(v125, v126);
      sub_22643D748((uint64_t)v383, type metadata accessor for CapturedRoom.Surface);
      v231 = v353;
      sub_22646F21C(v353);
      v89 = v352;
      sub_226446554((uint64_t)v231, (uint64_t)v352, &qword_2558432D8);
      v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90) == 1)
        goto LABEL_5;
    }
  }
  v91 = v388.i64[0];
LABEL_5:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = (unsigned __int8 *)sub_22647D430(0x72675F726F6F6C46, 0xE900000000000070, v337, 1, v336, v382);
  if (!v91)
  {
    v393 = v92;
    sub_22655C008();
    v232 = v372[3];
    v233 = v372[4];
    __swift_project_boxed_opaque_existential_1(v372, v232);
    v234 = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 64))(v232, v233);
    v235 = *(_QWORD *)(v234 + 16);
    v126 = v397;
    if (v235)
    {
      v236 = (*(unsigned __int8 *)(v391 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v391 + 80);
      v394 = (char *)v234;
      v237 = v234 + v236;
      v396 = *(_QWORD *)(v391 + 72);
      v238 = MEMORY[0x24BEE4AF8];
      v239 = v381;
      do
      {
        sub_22643D704(v237, (uint64_t)v239, type metadata accessor for CapturedRoom.Surface);
        v241 = *((float *)v239 + 6);
        if (v241 <= 0.0)
        {
          v243 = 0.0;
          if ((*v239 - 2) > 3u)
            v242 = 0.08;
          else
            v242 = flt_22655FDA0[(char)(*v239 - 2)];
        }
        else
        {
          v242 = v241 * 0.5;
          v243 = v241 * 0.5;
        }
        v244 = type metadata accessor for ScanItemStrut();
        v245 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v244 - 8) + 56);
        v246 = (uint64_t)v358;
        v245(v358, 1, 1, v244);
        v247 = (uint64_t)v359;
        v245(v359, 1, 1, v244);
        sub_2264756B4(v381, v238, v238, 0, 0, v246, v247, v373, v243, v242, 0.16);
        sub_22643D7E4(v247, &qword_255840818);
        sub_22643D7E4(v246, &qword_255840818);
        sub_22646F8CC();
        if (v248)
        {
          v240 = (void *)sub_22655CD64();
          swift_bridgeObjectRelease();
        }
        else
        {
          v240 = 0;
        }
        v239 = v381;
        objc_msgSend(v393, sel_addReferenceWithPath_nodePath_, v240, 0);

        (*(void (**)(uint64_t, uint64_t))(v395 + 8))(v373, v397);
        sub_22643D748((uint64_t)v239, type metadata accessor for CapturedRoom.Surface);
        v237 += v396;
        --v235;
      }
      while (v235);
      swift_bridgeObjectRelease();
      v126 = v397;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v385 = (char *)sub_22647D430(0x675F7463656A624FLL, 0xEA00000000007072, v337, 1, v336, v382);
    v252 = v372[3];
    v253 = v372[4];
    __swift_project_boxed_opaque_existential_1(v372, v252);
    v254 = (*(uint64_t (**)(uint64_t, uint64_t))(v253 + 56))(v252, v253);
    v255 = *(_QWORD *)(v254 + 16);
    if (v255)
    {
      *(_QWORD *)&v401 = MEMORY[0x24BEE4AF8];
      sub_2264C7B78(0, v255, 0);
      v256 = (*(unsigned __int8 *)(v364 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v364 + 80);
      v396 = v254;
      v257 = v254 + v256;
      v258 = *(_QWORD *)(v364 + 72);
      v259 = v401;
      do
      {
        v260 = v344;
        sub_22643D704(v257, (uint64_t)v344, type metadata accessor for CapturedRoom.Object);
        v261 = *v260;
        sub_22643D748((uint64_t)v260, type metadata accessor for CapturedRoom.Object);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2264C7B78(0, *(_QWORD *)(v259 + 16) + 1, 1);
          v259 = v401;
        }
        v263 = *(_QWORD *)(v259 + 16);
        v262 = *(_QWORD *)(v259 + 24);
        if (v263 >= v262 >> 1)
        {
          sub_2264C7B78(v262 > 1, v263 + 1, 1);
          v259 = v401;
        }
        *(_QWORD *)(v259 + 16) = v263 + 1;
        *(_BYTE *)(v259 + v263 + 32) = v261;
        v257 += v258;
        --v255;
        v126 = v397;
      }
      while (v255);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v259 = MEMORY[0x24BEE4AF8];
    }
    v264 = sub_22653D190(v259);
    swift_bridgeObjectRelease();
    v265 = 0;
    v266 = (char *)(v264 + 56);
    v267 = 1 << *(_BYTE *)(v264 + 32);
    v268 = -1;
    if (v267 < 64)
      v268 = ~(-1 << v267);
    v269 = v268 & *(_QWORD *)(v264 + 56);
    v270 = type metadata accessor for CapturedRoom.Object;
    v271 = (unint64_t)(v267 + 63) >> 6;
    v272 = v372;
    v273 = v361;
    v386 = (char *)v264;
    v384 = (char *)(v264 + 56);
    v383 = (unsigned __int8 *)v271;
    while (1)
    {
      if (v269)
      {
        v274 = __clz(__rbit64(v269));
        v269 &= v269 - 1;
        v275 = v274 | (v265 << 6);
      }
      else
      {
        if (__OFADD__(v265++, 1))
          goto LABEL_181;
        v277 = v395;
        if (v265 >= v271)
        {
LABEL_176:

          swift_release();
          v334 = *(void (**)(uint64_t, uint64_t))(v277 + 8);
          v251 = v273;
          goto LABEL_117;
        }
        v278 = *(_QWORD *)&v266[8 * v265];
        if (!v278)
        {
          v279 = v265 + 1;
          if (v265 + 1 >= v271)
            goto LABEL_176;
          v278 = *(_QWORD *)&v266[8 * v279];
          if (!v278)
          {
            v279 = v265 + 2;
            if (v265 + 2 >= v271)
              goto LABEL_176;
            v278 = *(_QWORD *)&v266[8 * v279];
            if (!v278)
            {
              v279 = v265 + 3;
              if (v265 + 3 >= v271)
                goto LABEL_176;
              v278 = *(_QWORD *)&v266[8 * v279];
              if (!v278)
              {
                while (1)
                {
                  v265 = v279 + 1;
                  if (__OFADD__(v279, 1))
                    goto LABEL_182;
                  if (v265 >= v271)
                    goto LABEL_176;
                  v278 = *(_QWORD *)&v266[8 * v265];
                  ++v279;
                  if (v278)
                    goto LABEL_143;
                }
              }
            }
          }
          v265 = v279;
        }
LABEL_143:
        v269 = (v278 - 1) & v278;
        v275 = __clz(__rbit64(v278)) + (v265 << 6);
      }
      LODWORD(v396) = *(unsigned __int8 *)(*(_QWORD *)(v264 + 48) + v275);
      if ((_DWORD)v396 != 15)
      {
        v387 = (char *)v269;
        v388.i64[0] = v265;
        v280 = v272[3];
        v281 = v272[4];
        __swift_project_boxed_opaque_existential_1(v272, v280);
        v282 = (*(uint64_t (**)(uint64_t, uint64_t))(v281 + 56))(v280, v281);
        v283 = (_QWORD *)MEMORY[0x24BEE4AF8];
        *(_QWORD *)&v401 = MEMORY[0x24BEE4AF8];
        v394 = *(char **)(v282 + 16);
        if (v394)
        {
          v284 = 0;
          v285 = v364;
          while (v284 < *(_QWORD *)(v282 + 16))
          {
            v286 = (*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80);
            v287 = *(_QWORD *)(v285 + 72);
            v288 = v270;
            v289 = (unsigned __int8 *)v363;
            sub_22643D704(v282 + v286 + v287 * v284, (uint64_t)v363, v288);
            if (*v289 == (_DWORD)v396)
            {
              sub_22643F6AC((uint64_t)v289, v362, v288);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                sub_2264C7B9C(0, v283[2] + 1, 1);
              v283 = (_QWORD *)v401;
              v291 = *(_QWORD *)(v401 + 16);
              v290 = *(_QWORD *)(v401 + 24);
              if (v291 >= v290 >> 1)
              {
                sub_2264C7B9C(v290 > 1, v291 + 1, 1);
                v283 = (_QWORD *)v401;
              }
              v283[2] = v291 + 1;
              v292 = (uint64_t)v283 + v286 + v291 * v287;
              v270 = type metadata accessor for CapturedRoom.Object;
              sub_22643F6AC(v362, v292, type metadata accessor for CapturedRoom.Object);
              v126 = v397;
              v285 = v364;
            }
            else
            {
              sub_22643D748((uint64_t)v289, v288);
              v126 = v397;
              v270 = v288;
            }
            if (v394 == (char *)++v284)
            {
              v283 = (_QWORD *)v401;
              goto LABEL_157;
            }
          }
          goto LABEL_180;
        }
LABEL_157:
        swift_bridgeObjectRelease();
        v293 = (unsigned __int8 *)v283[2];
        if (v293)
        {
          v389 = v283;
          LOBYTE(v401) = v396;
          *(_QWORD *)&v401 = sub_22655CDDC();
          *((_QWORD *)&v401 + 1) = v294;
          sub_22647D7C4();
          v295 = sub_22655D184();
          v297 = v296;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v401 = v295;
          *((_QWORD *)&v401 + 1) = v297;
          swift_bridgeObjectRetain();
          sub_22655CE24();
          v299 = *((_QWORD *)&v401 + 1);
          v298 = v401;
          sub_22655C008();
          swift_bridgeObjectRelease();
          v392 = (char *)sub_22647D430(v298, v299, v337, 1, v385, v382);
          swift_bridgeObjectRelease();
          v390 = (unsigned __int8 *)((*(unsigned __int8 *)(v364 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v364 + 80));
          v300 = &v390[(_QWORD)v389];
          v391 = *(_QWORD *)(v364 + 72);
          v301 = (uint64_t)v360;
          do
          {
            v396 = (uint64_t)v293;
            sub_22643D704((uint64_t)v300, v301, v270);
            v304 = v372;
            v305 = v301;
            v306 = v372[3];
            v307 = v372[4];
            __swift_project_boxed_opaque_existential_1(v372, v306);
            v308 = (*(uint64_t (**)(uint64_t, uint64_t))(v307 + 56))(v306, v307);
            MEMORY[0x24BDAC7A8](v308);
            *((_QWORD *)&v335 - 2) = v305;
            sub_226506068((uint64_t (*)(char *))sub_22647F3A0, (uint64_t)(&v335 - 2), v309);
            v394 = v310;
            v311 = v355;
            v312 = (unsigned __int8 *)v305;
            v313 = v350;
            sub_22643D7A0(v305 + *(int *)(v355 + 44), v350, (uint64_t *)&unk_255849AC0);
            v314 = v356;
            v315 = v357;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v356 + 48))(v313, 1, v357) == 1)
            {
              sub_22643D7E4(v313, (uint64_t *)&unk_255849AC0);
              v316 = v348;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v364 + 56))(v348, 1, 1, v311);
              v317 = v347;
              v318 = v346;
              v319 = v312;
              v320 = (unsigned __int8 *)v396;
              v321 = (uint64_t)v394;
            }
            else
            {
              v322 = *(void (**)(char *, uint64_t, uint64_t))(v314 + 32);
              v323 = v343;
              v322(v343, v313, v315);
              v324 = v304[3];
              v325 = v304[4];
              __swift_project_boxed_opaque_existential_1(v304, v324);
              v326 = v323;
              v327 = (*(uint64_t (**)(uint64_t, uint64_t))(v325 + 56))(v324, v325);
              MEMORY[0x24BDAC7A8](v327);
              *((_QWORD *)&v335 - 2) = v323;
              sub_226506068((uint64_t (*)(char *))sub_22647F3BC, (uint64_t)(&v335 - 2), v328);
              if (*(_QWORD *)(v329 + 16))
              {
                v316 = v348;
                sub_22643D704((uint64_t)&v390[v329], v348, type metadata accessor for CapturedRoom.Object);
                v330 = 0;
              }
              else
              {
                v330 = 1;
                v316 = v348;
              }
              v317 = v347;
              v318 = v346;
              v320 = (unsigned __int8 *)v396;
              v321 = (uint64_t)v394;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v364 + 56))(v316, v330, 1, v355);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v356 + 8))(v326, v357);
              v319 = v360;
            }
            *(_QWORD *)&v401 = v317;
            *((_QWORD *)&v401 + 1) = v318;
            v331 = v349;
            sub_22647677C((uint64_t)v351, v319, v316, v321, &v401, v349);
            swift_bridgeObjectRelease();
            sub_22646F8CC();
            v332 = v331;
            v126 = v397;
            if (v333)
            {
              v302 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v302 = 0;
            }
            v270 = type metadata accessor for CapturedRoom.Object;
            objc_msgSend(v392, sel_addReferenceWithPath_nodePath_, v302, 0);

            v303 = *(void (**)(char *, uint64_t))(v395 + 8);
            v303(v332, v126);
            sub_22643D7E4(v316, (uint64_t *)&unk_2558480D0);
            v301 = (uint64_t)v360;
            sub_22643D748((uint64_t)v360, type metadata accessor for CapturedRoom.Object);
            v300 += v391;
            v293 = v320 - 1;
          }
          while (v293);
          swift_release();

          v303(v351, v126);
        }
        else
        {
          swift_release();
        }
        v272 = v372;
        v273 = v361;
        v264 = (uint64_t)v386;
        v266 = v384;
        v265 = v388.i64[0];
        v271 = (int64_t)v383;
        v269 = (unint64_t)v387;
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v395 + 8))(v338, v397);

}

uint64_t sub_226474D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = sub_22655C140();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v9);
  v29 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  v17 = type metadata accessor for CapturedRoom.Surface(0);
  sub_22643D7A0(a1 + *(int *)(v17 + 56), (uint64_t)v16, (uint64_t *)&unk_255849AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v30 + *(int *)(v17 + 44), v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_22643D7A0((uint64_t)v16, (uint64_t)v8, (uint64_t *)&unk_255849AC0);
  sub_22643D7A0((uint64_t)v13, v18, (uint64_t *)&unk_255849AC0);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1, v3) == 1)
  {
    sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
    sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
    v20 = v19(v18, 1, v3);
    if (v20 == 1)
      v21 = (uint64_t *)&unk_255849AC0;
    else
      v21 = &qword_2558432E8;
    if (v20 == 1)
      v22 = -1;
    else
      v22 = 0;
  }
  else
  {
    v23 = v29;
    sub_22643D7A0((uint64_t)v8, v29, (uint64_t *)&unk_255849AC0);
    if (v19(v18, 1, v3) == 1)
    {
      sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, v3);
      v22 = 0;
      v21 = &qword_2558432E8;
    }
    else
    {
      v24 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v28, v18, v3);
      sub_226437F28((unint64_t *)&qword_255840120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v22 = sub_22655CD04();
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v24, v3);
      v21 = (uint64_t *)&unk_255849AC0;
      sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
      v25((char *)v23, v3);
    }
  }
  sub_22643D7E4((uint64_t)v8, v21);
  return v22 & 1;
}

uint64_t sub_226475074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  char *v29;
  uint64_t v30;

  v4 = sub_22655C140();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v10);
  v30 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - v16;
  v18 = type metadata accessor for CapturedRoom.Object(0);
  sub_22643D7A0(a1 + *(int *)(v18 + 44), (uint64_t)v17, (uint64_t *)&unk_255849AC0);
  v19 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, a2 + *(int *)(v19 + 44), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  v20 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_22643D7A0((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_255849AC0);
  sub_22643D7A0((uint64_t)v14, v20, (uint64_t *)&unk_255849AC0);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v9, 1, v4) == 1)
  {
    sub_22643D7E4((uint64_t)v14, (uint64_t *)&unk_255849AC0);
    sub_22643D7E4((uint64_t)v17, (uint64_t *)&unk_255849AC0);
    v22 = v21(v20, 1, v4);
    if (v22 == 1)
      v23 = (uint64_t *)&unk_255849AC0;
    else
      v23 = &qword_2558432E8;
    if (v22 == 1)
      v24 = -1;
    else
      v24 = 0;
  }
  else
  {
    v25 = v30;
    sub_22643D7A0((uint64_t)v9, v30, (uint64_t *)&unk_255849AC0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_22643D7E4((uint64_t)v14, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v17, (uint64_t *)&unk_255849AC0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v25, v4);
      v24 = 0;
      v23 = &qword_2558432E8;
    }
    else
    {
      v26 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v29, v20, v4);
      sub_226437F28((unint64_t *)&qword_255840120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v24 = sub_22655CD04();
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      v23 = (uint64_t *)&unk_255849AC0;
      sub_22643D7E4((uint64_t)v14, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v17, (uint64_t *)&unk_255849AC0);
      v27((char *)v25, v4);
    }
  }
  sub_22643D7E4((uint64_t)v9, v23);
  return v24 & 1;
}

uint64_t sub_226475394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = sub_22655C140();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v9);
  v29 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  v17 = type metadata accessor for CapturedRoom.Object(0);
  sub_22643D7A0(a1 + *(int *)(v17 + 44), (uint64_t)v16, (uint64_t *)&unk_255849AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v30 + *(int *)(v17 + 32), v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_22643D7A0((uint64_t)v16, (uint64_t)v8, (uint64_t *)&unk_255849AC0);
  sub_22643D7A0((uint64_t)v13, v18, (uint64_t *)&unk_255849AC0);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1, v3) == 1)
  {
    sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
    sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
    v20 = v19(v18, 1, v3);
    if (v20 == 1)
      v21 = (uint64_t *)&unk_255849AC0;
    else
      v21 = &qword_2558432E8;
    if (v20 == 1)
      v22 = -1;
    else
      v22 = 0;
  }
  else
  {
    v23 = v29;
    sub_22643D7A0((uint64_t)v8, v29, (uint64_t *)&unk_255849AC0);
    if (v19(v18, 1, v3) == 1)
    {
      sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, v3);
      v22 = 0;
      v21 = &qword_2558432E8;
    }
    else
    {
      v24 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v28, v18, v3);
      sub_226437F28((unint64_t *)&qword_255840120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v22 = sub_22655CD04();
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v24, v3);
      v21 = (uint64_t *)&unk_255849AC0;
      sub_22643D7E4((uint64_t)v13, (uint64_t *)&unk_255849AC0);
      sub_22643D7E4((uint64_t)v16, (uint64_t *)&unk_255849AC0);
      v25((char *)v23, v3);
    }
  }
  sub_22643D7E4((uint64_t)v8, v21);
  return v22 & 1;
}

void sub_2264756B4(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S0>, float32_t a10@<S1>, float a11@<S2>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  unint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  simd_float4 v101;
  simd_float4 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  simd_float4 v117;
  simd_float4 v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  BOOL v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  float32x2_t *v134;
  double v135;
  int v136;
  double v137;
  BOOL v138;
  float v139;
  void *v140;
  id v141;
  void *v142;
  simd_float4 v143;
  simd_float4 v144;
  simd_float4 v145;
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  id v150[3];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  float32x2_t *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  float32x4_t v166;
  __n128 v167;
  char v168[8];
  char v169[8];
  char v170[8];
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  simd_float4x4 v174;

  v13 = v11;
  v158 = a5;
  v160 = a4;
  v161 = a3;
  v163 = a2;
  v165 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v167.n128_u64[0] = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v159 = (float32x2_t *)((char *)&v141 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  v23 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v22);
  v162 = (char *)&v141 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v166.i64[0] = (uint64_t)&v141 - v25;
  v26 = type metadata accessor for CapturedRoom.Surface(0);
  v27 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v26);
  v28 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v27);
  v29 = ((uint64_t (*)(uint64_t))MEMORY[0x24BDAC7A8])(v28);
  v34 = (char *)&v141 - v33;
  v35 = *(int *)(v29 + 44);
  v164 = a1;
  v36 = (uint64_t)&a1[v35];
  v37 = *(_QWORD *)(v13 + 16);
  if (!*(_QWORD *)(v37 + 16))
    goto LABEL_6;
  v154 = v32;
  v156 = v31;
  v155 = (_BYTE *)v30;
  v157 = v29;
  swift_bridgeObjectRetain();
  v38 = sub_226534858(v36);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v46 = v45;
    *v45 = sub_22655C0EC();
    v46[1] = v47;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  v152 = a6;
  v153 = a7;
  v40 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 16 * v38);
  v41 = *v40;
  v42 = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v171 = v41;
  v172 = v42;
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  sub_22655C008();
  swift_bridgeObjectRelease();
  v43 = sub_22647CEE8(a8);
  if (v12)
  {
    v44 = sub_22655C05C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(a8, v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = v43;
    sub_22655BFD8();
    v50 = v49;
    v51 = objc_msgSend(v48, sel_rootNode);
    v52 = (void *)*MEMORY[0x24BEBEE28];
    v150[0] = v51;
    v146 = sub_22647D430(v41, v42, v52, 2, v51, v48);
    v144.i64[0] = sub_22655CD64();
    v143.i64[0] = sub_22655CD64();
    v171 = 12078;
    v172 = 0xE200000000000000;
    v151 = v42;
    v148 = v41;
    v145.i64[0] = v50;
    sub_22655CE24();
    v53 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
    v149 = 0;
    v54 = v53;
    v55 = (void *)sub_22655CD64();
    swift_bridgeObjectRelease();
    v56 = objc_msgSend(v54, sel_initWithResourcePath_, v55);

    v147 = v48;
    v57 = v146;
    v58 = (void *)v144.i64[0];
    v59 = (void *)v143.i64[0];
    objc_msgSend(v146, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v144.i64[0], v143.i64[0], v56);

    v60 = (void *)sub_22655CD64();
    v61 = (void *)sub_22655CD64();
    v62 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
    swift_bridgeObjectRetain();
    v63 = (void *)sub_22655CD64();
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v62, sel_initWithString_, v63);

    objc_msgSend(v57, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v60, v61, v64);
    swift_bridgeObjectRelease();

    v65 = (void *)sub_22655CD64();
    sub_22655C0EC();
    v66 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
    v67 = (void *)sub_22655CD64();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, sel_initWithString_, v67);

    objc_msgSend(v57, sel_setCustomMetadata_value_, v65, v68);
    v69 = (void *)sub_22655CD64();
    LOBYTE(v171) = *v164;
    v171 = sub_22655CDDC();
    v172 = v70;
    sub_22647D7C4();
    sub_22655D184();
    swift_bridgeObjectRelease();
    v71 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
    v72 = (void *)sub_22655CD64();
    v73 = v148;
    swift_bridgeObjectRelease();
    v74 = objc_msgSend(v71, sel_initWithString_, v72);

    v75 = v151;
    v76 = v147;
    objc_msgSend(v57, sel_setCustomMetadata_value_, v69, v74);

    v77 = v149;
    v78 = sub_22647D430(v73, v75, (void *)*MEMORY[0x24BEBEDF8], 3, v57, v76);
    if (v77)
    {
      v79 = sub_22655C05C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(a8, v79);

      swift_bridgeObjectRelease();
    }
    else
    {
      v80 = v78;
      v149 = 0;
      v81 = (void *)sub_22655CD64();
      v82 = *MEMORY[0x24BEBEDB8];
      v142 = v80;
      v83 = objc_msgSend(v80, sel_newPropertyWithName_type_role_, v81, v82, 0);

      if (v83)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
        v84 = swift_allocObject();
        *(_OWORD *)(v84 + 16) = xmmword_22655FA20;
        v85 = objc_allocWithZone(MEMORY[0x24BEBED08]);
        v86 = (void *)sub_22655CD64();
        v87 = objc_msgSend(v85, sel_initWithString_, v86);

        *(_QWORD *)(v84 + 32) = v87;
        v171 = v84;
        sub_22655CEE4();
        sub_22643F548(0, &qword_2558432A8);
        v88 = (void *)sub_22655CEC0();
        swift_bridgeObjectRelease();
        v141 = v83;
        objc_msgSend(v83, sel_setTokenArray_, v88);

        v89 = (float32x4_t *)v164;
        v174 = __invert_f4(*(simd_float4x4 *)(v164 + 32));
        v91 = MEMORY[0x24BEE4AF8];
        v173 = MEMORY[0x24BEE4AF8];
        v92 = v163;
        v93 = *(_QWORD *)(v163 + 16);
        v94 = v165;
        *(simd_float4 *)v150 = v174.columns[0];
        v145 = v174.columns[1];
        v144 = v174.columns[2];
        v143 = v174.columns[3];
        if (v93)
        {
          *(double *)&v95 = MEMORY[0x24BDAC7A8](v90);
          *((_OWORD *)&v141 - 5) = v95;
          *((_OWORD *)&v141 - 4) = v96;
          *((_OWORD *)&v141 - 3) = v97;
          *((_OWORD *)&v141 - 2) = v98;
          *(&v141 - 2) = v89;
          v99 = v149;
          v100 = sub_2264B44F4((void (*)(uint64_t *__return_ptr, uint64_t))sub_22647F338, (uint64_t)(&v141 - 12), v92, (uint64_t)v168);
          v149 = v99;
          v90 = sub_22646B614(v100);
        }
        if (*(_QWORD *)(v161 + 16))
        {
          MEMORY[0x24BDAC7A8](v90);
          v101 = v145;
          *((_OWORD *)&v141 - 5) = *(_OWORD *)v150;
          *((simd_float4 *)&v141 - 4) = v101;
          v102 = v143;
          *((simd_float4 *)&v141 - 3) = v144;
          *((simd_float4 *)&v141 - 2) = v102;
          *(&v141 - 2) = v89;
          v103 = v149;
          v105 = sub_2264B4510((void (*)(uint64_t *__return_ptr, uint64_t))sub_22647F338, (uint64_t)(&v141 - 12), v104, (uint64_t)v169);
          v149 = v103;
          sub_22646B614(v105);
        }
        v171 = v91;
        swift_bridgeObjectRetain();
        if (v93)
        {
          v106 = *(_QWORD *)(v154 + 72);
          v154 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
          v107 = v92 + v154;
          v108 = MEMORY[0x24BEE4AF8];
          v109 = v94;
          do
          {
            v161 = v93;
            sub_22643D704(v107, (uint64_t)v34, type metadata accessor for CapturedRoom.Surface);
            v111 = v166.i64[0];
            sub_22643D7A0((uint64_t)&v34[*(int *)(v157 + 52)], v166.i64[0], (uint64_t *)&unk_255848090);
            v112 = v109;
            v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167.n128_u64[0] + 48))(v111, 1, v109);
            sub_22643D7E4(v111, (uint64_t *)&unk_255848090);
            if (v113 == 1)
            {
              sub_22643D748((uint64_t)v34, type metadata accessor for CapturedRoom.Surface);
              v109 = v112;
              v110 = v161;
            }
            else
            {
              sub_22643F6AC((uint64_t)v34, v156, type metadata accessor for CapturedRoom.Surface);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                sub_2264C7B14(0, *(_QWORD *)(v108 + 16) + 1, 1);
              v108 = v171;
              v115 = *(_QWORD *)(v171 + 16);
              v114 = *(_QWORD *)(v171 + 24);
              v110 = v161;
              if (v115 >= v114 >> 1)
              {
                sub_2264C7B14(v114 > 1, v115 + 1, 1);
                v108 = v171;
              }
              *(_QWORD *)(v108 + 16) = v115 + 1;
              sub_22643F6AC(v156, v108 + v154 + v115 * v106, type metadata accessor for CapturedRoom.Surface);
              v109 = v165;
            }
            v107 += v106;
            v93 = v110 - 1;
          }
          while (v93);
          v94 = v109;
          v91 = v171;
          v89 = (float32x4_t *)v164;
        }
        v116 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(v91 + 16))
        {
          MEMORY[0x24BDAC7A8](v116);
          v117 = v145;
          *((_OWORD *)&v141 - 5) = *(_OWORD *)v150;
          *((simd_float4 *)&v141 - 4) = v117;
          v118 = v143;
          *((simd_float4 *)&v141 - 3) = v144;
          *((simd_float4 *)&v141 - 2) = v118;
          *(&v141 - 2) = v89;
          v119 = sub_2264B44F4((void (*)(uint64_t *__return_ptr, uint64_t))sub_22647F314, (uint64_t)(&v141 - 12), v91, (uint64_t)v170);
          swift_release();
        }
        else
        {
          swift_release();
          v119 = MEMORY[0x24BEE4AF8];
        }
        v120 = v142;
        v166 = v89[1];
        v121 = (uint64_t)v162;
        if (qword_25583F9D0 != -1)
          swift_once();
        v122 = off_25584AF28;
        swift_beginAccess();
        LOBYTE(v122) = v122[138];
        v123 = v155;
        sub_22643D704((uint64_t)v89, (uint64_t)v155, type metadata accessor for CapturedRoom.Surface);
        v124 = (v122 & 1) == 0 && *v123 != 5;
        sub_22643D748((uint64_t)v123, type metadata accessor for CapturedRoom.Surface);
        v125 = v157;
        sub_22643D7A0((uint64_t)v89 + *(int *)(v157 + 52), v121, (uint64_t *)&unk_255848090);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167.n128_u64[0] + 48))(v121, 1, v94) == 1)
        {
          v126.n128_f32[0] = a11 + a11;
          v126.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v126.n128_u64[0], 0), *(float32x2_t *)v166.f32);
          v167 = v126;
          swift_bridgeObjectRelease();
          sub_22643D7E4(v121, (uint64_t *)&unk_255848090);
          v127 = *(uint64_t *)((char *)v89->i64 + *(int *)(v125 + 60));
          if (*(_QWORD *)(v127 + 16))
            v128 = v124;
          else
            v128 = 1;
          if ((v128 & 1) != 0)
          {
            v129 = v160;
            if (v160)
            {
              sub_226503DBC(v167.n128_f64[0]);
              v131 = v130;
              type metadata accessor for RoomCaptureGeometryManager();
              swift_initStaticObject();
              v132 = sub_226456594(v131, v173, v129, v158 & 1, v152, v153, v167, a9, a10, a11);
              swift_bridgeObjectRelease();
            }
            else
            {
              type metadata accessor for RoomCaptureGeometryManager();
              swift_initStaticObject();
              v132 = sub_226458C90(v173, v152, v153, v167, a9, a10);
            }
          }
          else
          {
            type metadata accessor for RoomCaptureGeometryManager();
            swift_initStaticObject();
            v132 = sub_226456594(v127, v173, v160, v158 & 1, v152, v153, v167, a9, a10, a11);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v133 = v121;
          v134 = v159;
          sub_22643F6AC(v133, (uint64_t)v159, type metadata accessor for CapturedRoom.Surface.Curve);
          type metadata accessor for RoomCaptureGeometryManager();
          swift_initStaticObject();
          LODWORD(v135) = v89[1].i32[1];
          v132 = sub_226458318(v134, v119, v135, a9, a10, v152, v153, 1016003125, 1);
          swift_bridgeObjectRelease();
          sub_22643D748((uint64_t)v134, type metadata accessor for CapturedRoom.Surface.Curve);
        }
        sub_22647E594(v120, v132, v89[2], v89[3], v89[4], v89[5]);
        v136 = v89->u8[0];
        if (v136 == 5 || (v137 = 0.0, v136 == 2))
          v137 = 0.00781250185;
        v138 = v136 == 5 || v136 == 2;
        v139 = 0.0;
        if (v138)
          v139 = 1.0;
        v140 = v147;
        sub_22647EA84(v120, v137, v139, v148, v151, v147);
        swift_bridgeObjectRelease();
        objc_msgSend(v140, sel_save);

        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_226476648(float32x4_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;

  v31 = a7;
  v32 = a4;
  v33 = a5;
  v34 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = a1[2];
  v29 = a1[3];
  v30 = v16;
  v17 = a1[4];
  v27 = a1[5];
  v28 = v17;
  v18 = type metadata accessor for CapturedRoom.Surface(0);
  sub_22643D7A0((uint64_t)a1 + *(int *)(v18 + 52), (uint64_t)v15, (uint64_t *)&unk_255848090);
  v19 = a1[1].f32[1];
  sub_22643D7A0(a2 + *(int *)(v18 + 52), (uint64_t)v13, (uint64_t *)&unk_255848090);
  sub_226446C58((uint64_t)v15, (uint64_t)v13, v30, v29, v28, v27, v19, v32, v33, v34, v20, v21, v22, v23, v24, v25, v31);
  *a3 = v26;
}

void sub_22647677C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  int v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  void (*v73)(char *, char *, uint64_t);
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  double v83;
  __n128 v84;
  void *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  _QWORD *v88;
  __n128 v89;
  float32x4_t v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  char *v95;
  float32x4_t v96;
  __n128 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float *v103;
  int v104;
  float v105;
  uint64_t v106;
  float *v107;
  BOOL v108;
  uint64_t v109;
  void *v110;
  char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  float32x4_t v122;
  char *v123;
  float32x4_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  __int128 v128;

  v125 = a1;
  v7 = v6;
  v122.i64[0] = a4;
  v120 = a3;
  v123 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558480D0);
  MEMORY[0x24BDAC7A8](v10);
  v121.n128_u64[0] = (unint64_t)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)&v118 = (char *)&v109 - v13;
  v14 = type metadata accessor for CapturedRoom.Object(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v117 = (uint64_t)&v109 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_255849210);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_22655C05C();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v127 = (char *)&v109 - v29;
  v119 = v14;
  v30 = *(int *)(v14 + 32);
  v124 = (float32x4_t *)a2;
  v31 = (uint64_t)&a2[v30];
  v32 = *(_QWORD *)(v7 + 16);
  if (!*(_QWORD *)(v32 + 16))
    goto LABEL_6;
  v116 = v28;
  v115 = *a5;
  swift_bridgeObjectRetain();
  v33 = sub_226534858(v31);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v42 = v41;
    *v41 = sub_22655C0EC();
    v42[1] = v43;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  v113 = (void *)v31;
  v112 = v15;
  v111 = v17;
  v114 = v24;
  v35 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v33);
  v36 = *v35;
  v37 = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v128 = v36;
  *((_QWORD *)&v128 + 1) = v37;
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v38 = v127;
  sub_22655C008();
  swift_bridgeObjectRelease();
  v39 = v126;
  v40 = sub_22647CEE8((uint64_t)v38);
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v114 + 8))(v38, v116);
    swift_bridgeObjectRelease();
    return;
  }
  v44 = v40;
  v125 = v36;
  v126 = v37;
  v45 = v114;
  if ((_QWORD)v115)
  {
    v128 = v115;
    CapturedRoom.ModelProvider.modelFileURL(for:)((unsigned __int8 *)v124, v22);
    v46 = v44;
    v47 = v116;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v22, 1, v116) != 1)
    {
      swift_bridgeObjectRelease();
      v73 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v73(v26, v22, v47);
      sub_22647754C(v46, v38, (uint64_t)v124, (uint64_t)v26);
      objc_msgSend(v46, sel_save);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v47);
      v95 = v123;
LABEL_39:
      v73(v95, v127, v47);
      return;
    }
    sub_22643D7E4((uint64_t)v22, &qword_255849210);
  }
  sub_22655BFD8();
  v48 = objc_msgSend(v44, sel_rootNode);
  v49 = sub_22647D430(v125, v126, (void *)*MEMORY[0x24BEBEE28], 2, v48, v44);
  v50 = sub_22655CD64();
  *(_QWORD *)&v115 = v44;
  v51 = (void *)v50;
  v52 = (void *)sub_22655CD64();
  *(_QWORD *)&v128 = 12078;
  *((_QWORD *)&v128 + 1) = 0xE200000000000000;
  sub_22655CE24();
  v53 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v54 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v55 = objc_msgSend(v53, sel_initWithResourcePath_, v54);

  objc_msgSend(v49, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v51, v52, v55);
  v56 = (void *)sub_22655CD64();
  v57 = (void *)sub_22655CD64();
  v58 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  swift_bridgeObjectRetain();
  v59 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v58, sel_initWithString_, v59);

  objc_msgSend(v49, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v56, v57, v60);
  swift_bridgeObjectRelease();

  v61 = (void *)sub_22655CD64();
  sub_22655C0EC();
  v62 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v63 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(v62, sel_initWithString_, v63);

  objc_msgSend(v49, sel_setCustomMetadata_value_, v61, v64);
  v65 = (void *)sub_22655CD64();
  v66 = v124->u8[0];
  LOBYTE(v128) = v124->i8[0];
  *(_QWORD *)&v128 = sub_22655CDDC();
  *((_QWORD *)&v128 + 1) = v67;
  sub_22647D7C4();
  sub_22655D184();
  swift_bridgeObjectRelease();
  v68 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v69 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v70 = objc_msgSend(v68, sel_initWithString_, v69);

  v71 = v126;
  objc_msgSend(v49, sel_setCustomMetadata_value_, v65, v70);

  v72 = (void *)v115;
  v74 = sub_22647D430(v125, v71, (void *)*MEMORY[0x24BEBEDF8], 3, v49, v72);
  v113 = v49;
  v75 = (void *)sub_22655CD64();
  v76 = objc_msgSend(v74, sel_newPropertyWithName_type_role_, v75, *MEMORY[0x24BEBEDB8], 0);

  if (v76)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_22655FA20;
    v78 = objc_allocWithZone(MEMORY[0x24BEBED08]);
    v79 = (void *)sub_22655CD64();
    v80 = objc_msgSend(v78, sel_initWithString_, v79);

    *(_QWORD *)(v77 + 32) = v80;
    *(_QWORD *)&v128 = v77;
    sub_22655CEE4();
    sub_22643F548(0, &qword_2558432A8);
    v81 = (void *)sub_22655CEC0();
    swift_bridgeObjectRelease();
    objc_msgSend(v76, sel_setTokenArray_, v81);

    if (*(_QWORD *)(v122.i64[0] + 16))
    {
      v85 = v74;
      MEMORY[0x24BDAC7A8](v82);
      v86 = (unsigned __int8 *)v124;
      *(&v109 - 2) = (uint64_t)v124;
      v88 = sub_22646F754((void (*)(_QWORD *__return_ptr, _QWORD))sub_22647F2FC, (uint64_t)(&v109 - 4), v87);
      v90 = *((float32x4_t *)v86 + 1);
      v95 = v123;
      v91 = v113;
      if (qword_25583F850 != -1)
      {
        v122 = *((float32x4_t *)v86 + 1);
        swift_once();
        v90 = v122;
      }
      v92 = sub_22645A610(v88, (__n128)0, v90, 0.0001, v89);
      swift_bridgeObjectRelease();
      v93 = v121.n128_u64[0];
      v94 = (void *)v115;
    }
    else
    {
      v95 = v123;
      v86 = (unsigned __int8 *)v124;
      v96 = v124[1];
      v97 = 0uLL;
      v91 = v113;
      if (v66 == 12)
      {
        v122 = v124[1];
        v110 = v74;
        v98 = v118;
        sub_22643D7A0(v120, v118, (uint64_t *)&unk_2558480D0);
        v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v98, 1, v119);
        v93 = v121.n128_u64[0];
        v94 = (void *)v115;
        if (v99 == 1)
        {
          sub_22643D7E4(v98, (uint64_t *)&unk_2558480D0);
          v85 = v110;
          v96 = v122;
          v97 = 0uLL;
        }
        else
        {
          v100 = v98;
          v101 = v117;
          sub_22643F6AC(v100, v117, type metadata accessor for CapturedRoom.Object);
          v102 = *(float *)(v101 + 84);
          v118 = *(_OWORD *)(v101 + 16);
          if (qword_25583F9D0 != -1)
            swift_once();
          v103 = (float *)off_25584AF28;
          sub_22643D748(v101, type metadata accessor for CapturedRoom.Object);
          swift_beginAccess();
          HIDWORD(v83) = DWORD1(v118);
          v84.n128_f32[0] = vmuls_lane_f32(v103[13], *(float32x2_t *)&v118, 1);
          v96 = v122;
          v96.i32[1] = v84.n128_u32[0];
          *(float *)&v83 = (float)((float)(v102 - vmuls_lane_f32(0.5, *(float32x2_t *)&v118, 1))
                                 + (float)(v84.n128_f32[0] * 0.5))
                         - *((float *)v86 + 21);
          v97.n128_u32[0] = 0;
          v97.n128_u64[1] = 0;
          v97.n128_u32[1] = LODWORD(v83);
          v85 = v110;
        }
      }
      else
      {
        v85 = v74;
        v93 = v121.n128_u64[0];
        v94 = (void *)v115;
      }
      if (qword_25583F850 != -1)
      {
        v121 = v97;
        v122 = v96;
        swift_once();
        v97 = v121;
        v96 = v122;
      }
      v92 = sub_226459E38(v96, v97, v83, v84);
    }
    sub_22647E594(v85, v92, *((float32x4_t *)v86 + 2), *((float32x4_t *)v86 + 3), *((float32x4_t *)v86 + 4), *((float32x4_t *)v86 + 5));
    v104 = *v86;
    v105 = 0.0;
    if (v104 == 2 || v104 == 15)
      goto LABEL_38;
    if (v104 == 4)
    {
      sub_22643D7A0(v120, v93, (uint64_t *)&unk_2558480D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v93, 1, v119) != 1)
      {
        v106 = (uint64_t)v111;
        sub_22643F6AC(v93, (uint64_t)v111, type metadata accessor for CapturedRoom.Object);
        if (qword_25583F9D0 != -1)
          swift_once();
        v107 = (float *)off_25584AF28;
        swift_beginAccess();
        v108 = sub_22645458C(v106, v107[11]);
        sub_22643D748(v106, type metadata accessor for CapturedRoom.Object);
        v105 = 0.0;
        if (!v108)
          v105 = 1.0;
        v94 = (void *)v115;
        goto LABEL_38;
      }
      sub_22643D7E4(v93, (uint64_t *)&unk_2558480D0);
    }
    v105 = 1.0;
LABEL_38:
    sub_22647EA84(v85, 0.00781250185, v105, v125, v126, v94);
    swift_bridgeObjectRelease();
    objc_msgSend(v94, sel_save);

    swift_release();
    v73 = *(void (**)(char *, char *, uint64_t))(v114 + 32);
    v47 = v116;
    goto LABEL_39;
  }
  __break(1u);
}

uint64_t sub_2264774BC@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[48];

  v9[0] = a1->i8[0];
  v6 = sub_22652F1F4();
  v7 = sub_226464594(v6);
  sub_226464C40(v7, (uint64_t)v9, a1[1], a1[2], a1[3], a1[4], a1[5], *(float32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 48), *(_OWORD *)(a2 + 64), *(_OWORD *)(a2 + 80));
  return sub_226446554((uint64_t)v9, a3, &qword_2558432F8);
}

void sub_22647754C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  float64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  void *v33;
  void (**v34)(uint64_t, uint64_t, uint64_t);
  void *v35;
  unsigned int v36;
  id v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  float64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  unint64_t v75;
  id v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  __int128 v100;
  float32x4_t v101;
  void *v102;
  id v103;
  float32x4_t v104;
  unint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  unsigned int v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  void (**v113)(uint64_t, uint64_t, uint64_t);
  void *v114;
  void *v115;
  uint64_t v116;
  id v117;
  __int128 v118;
  void (*v119)(uint64_t, uint64_t, uint64_t);
  void *v120;
  unint64_t v121;
  float32x4_t v122;
  __int128 v123;
  float32x4_t v124;
  uint64_t v125;
  _QWORD *v126;
  void *v127;
  id v128;
  void (**v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;

  v124.i64[0] = a3;
  v128 = a2;
  v127 = a1;
  v141 = *MEMORY[0x24BDAC8D0];
  v126 = (_QWORD *)sub_22655BF9C();
  v5 = *(v126 - 1);
  MEMORY[0x24BDAC7A8](v126);
  v7 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22655C05C();
  v129 = *(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  v130 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v116 - v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432F0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v131.f64[0] = sub_22655BFA8();
  v131.f64[1] = v17;
  v139 = 1667527541;
  v140 = 0xE400000000000000;
  v18 = sub_22655C164();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  v19 = sub_22647D7C4();
  v20 = sub_22655D1A8();
  sub_22643D7E4((uint64_t)v16, &qword_2558432F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20)
  {
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v129[2](v21, a4, v130);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  sub_22655C020();
  v122.i64[0] = a4;
  *(_QWORD *)&v131.f64[0] = sub_22655BFD8();
  v131.f64[1] = v22;
  v23 = v126;
  (*(void (**)(char *, _QWORD, _QWORD *))(v5 + 104))(v7, *MEMORY[0x24BDCD7A0], v126);
  sub_22655C050();
  (*(void (**)(char *, _QWORD *))(v5 + 8))(v7, v23);
  swift_bridgeObjectRelease();
  v24 = v130;
  v25 = v129[1];
  ((void (*)(char *, uint64_t))v25)(v10, v130);
  v26 = (void *)objc_opt_self();
  v27 = objc_msgSend(v26, sel_defaultManager);
  v129 = v13;
  sub_22655C038();
  v28 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v27, sel_fileExistsAtPath_, v28);

  v30 = v24;
  v31 = v10;
  if ((v29 & 1) == 0)
  {
    v32 = objc_msgSend(v26, sel_defaultManager);
    v33 = (void *)sub_22655BFE4();
    v34 = v129;
    v35 = (void *)sub_22655BFE4();
    v131.f64[0] = 0.0;
    v36 = objc_msgSend(v32, sel_copyItemAtURL_toURL_error_, v33, v35, &v131);

    if (!v36)
    {
      v72 = *(id *)&v131.f64[0];
      sub_22655BF6C();

      swift_willThrow();
      ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v25)(v34, v30);
      return;
    }
    v37 = *(id *)&v131.f64[0];
  }
  v121 = v19;
  sub_22655BFFC();
  v38 = (_QWORD *)sub_22655BFD8();
  v40 = v39;
  ((void (*)(char *, uint64_t))v25)(v31, v30);
  sub_22655BFD8();
  v41 = v127;
  v42 = objc_msgSend(v127, sel_rootNode);
  v43 = (void *)*MEMORY[0x24BEBEE28];
  v126 = v38;
  v128 = v40;
  v44 = v125;
  v45 = sub_22647D430((uint64_t)v38, (uint64_t)v40, v43, 2, v42, v41);
  if (v44)
  {
    ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v25)(v129, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  v46 = v45;
  v119 = v25;
  v47 = (void *)sub_22655CD64();
  v48 = sub_22655CD64();
  v120 = v43;
  v49 = (void *)v48;
  *(_QWORD *)&v131.f64[0] = 12078;
  v131.f64[1] = -1.15172193e164;
  sub_22655CE24();
  v50 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v125 = 0;
  v51 = v50;
  v52 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v53 = objc_msgSend(v51, sel_initWithResourcePath_, v52);

  objc_msgSend(v46, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v47, v49, v53);
  v54 = (void *)sub_22655CD64();
  v55 = (void *)sub_22655CD64();
  v56 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v57 = (uint64_t)v128;
  swift_bridgeObjectRetain();
  v58 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v59 = objc_msgSend(v56, sel_initWithString_, v58);

  objc_msgSend(v46, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v54, v55, v59);
  swift_bridgeObjectRelease();

  v60 = (void *)sub_22655CD64();
  type metadata accessor for CapturedRoom.Object(0);
  v61 = v124.i64[0];
  sub_22655C0EC();
  v62 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v63 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(v62, sel_initWithString_, v63);

  objc_msgSend(v46, sel_setCustomMetadata_value_, v60, v64);
  v65 = (void *)sub_22655CD64();
  LOBYTE(v131.f64[0]) = *(_BYTE *)v61;
  *(_QWORD *)&v131.f64[0] = sub_22655CDDC();
  v131.f64[1] = v66;
  sub_22655D184();
  swift_bridgeObjectRelease();
  v67 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v68 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v69 = objc_msgSend(v67, sel_initWithString_, v68);

  objc_msgSend(v46, sel_setCustomMetadata_value_, v65, v69);
  v70 = v125;
  v71 = sub_22647D430((uint64_t)v126, v57, v120, 0, v46, v127);
  if (v70)
  {
    ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v119)(v129, v130);

    swift_bridgeObjectRelease();
    return;
  }
  v73 = v71;
  v126 = v46;
  swift_bridgeObjectRelease();
  v74 = (void *)sub_22655CD64();
  v75 = *MEMORY[0x24BEBED30];
  v76 = objc_msgSend(v73, sel_newPropertyWithName_type_role_, v74, *MEMORY[0x24BEBED30], 0);

  if (!v76)
  {
    __break(1u);
    goto LABEL_20;
  }
  v121 = v75;
  v125 = 0;
  v77 = *(float32x4_t *)(v61 + 32);
  v78 = *(float32x4_t *)(v61 + 48);
  v79 = *(float32x4_t *)(v61 + 64);
  v80 = *(float32x4_t *)(v61 + 80);
  v131 = vcvtq_f64_f32(*(float32x2_t *)v77.f32);
  v132 = vcvt_hight_f64_f32(v77);
  v133 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
  v134 = vcvt_hight_f64_f32(v78);
  v135 = vcvtq_f64_f32(*(float32x2_t *)v79.f32);
  v136 = vcvt_hight_f64_f32(v79);
  v137 = vcvtq_f64_f32(*(float32x2_t *)v80.f32);
  v138 = vcvt_hight_f64_f32(v80);
  v128 = v76;
  objc_msgSend(v76, sel_setDouble4x4Value_, &v131);
  v81 = (void *)sub_22655CD64();
  v82 = *MEMORY[0x24BEBEDB8];
  v83 = objc_msgSend(v73, sel_newPropertyWithName_type_role_, v81, *MEMORY[0x24BEBEDB8], 0);

  if (!v83)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  v84 = swift_allocObject();
  v118 = xmmword_22655FA20;
  *(_OWORD *)(v84 + 16) = xmmword_22655FA20;
  v85 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v86 = (void *)sub_22655CD64();
  v87 = objc_msgSend(v85, sel_initWithString_, v86);

  *(_QWORD *)(v84 + 32) = v87;
  *(_QWORD *)&v131.f64[0] = v84;
  sub_22655CEE4();
  sub_22643F548(0, &qword_2558432A8);
  v88 = (void *)sub_22655CEC0();
  swift_bridgeObjectRelease();
  objc_msgSend(v83, sel_setTokenArray_, v88);

  v89 = v125;
  v90 = sub_22647D430(0x6C65646F6DLL, 0xE500000000000000, v120, 0, v73, v127);
  if (v89)
  {
    ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v119)(v129, v130);

    return;
  }
  v91 = v90;
  v117 = v83;
  v125 = 0;
  v92 = (void *)sub_22655CD64();
  v127 = v91;
  v93 = objc_msgSend(v91, sel_newPropertyWithName_type_role_, v92, v82, 0);

  v120 = v93;
  if (!v93)
    goto LABEL_21;
  v94 = swift_allocObject();
  *(_OWORD *)(v94 + 16) = v118;
  v95 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v96 = (void *)sub_22655CD64();
  v97 = objc_msgSend(v95, sel_initWithString_, v96);

  *(_QWORD *)(v94 + 32) = v97;
  *(_QWORD *)&v131.f64[0] = v94;
  sub_22655CEE4();
  v98 = (void *)sub_22655CEC0();
  swift_bridgeObjectRelease();
  v99 = v120;
  objc_msgSend(v120, sel_setTokenArray_, v98);

  *(double *)&v100 = sub_226478364(v122.i64[0]);
  v123 = v100;
  v122 = v101;
  v124 = *(float32x4_t *)(v124.i64[0] + 16);
  v102 = (void *)sub_22655CD64();
  v103 = objc_msgSend(v127, sel_newPropertyWithName_type_role_, v102, v121, 0);

  if (!v103)
  {
LABEL_22:
    __break(1u);
    return;
  }
  v104 = vdivq_f32(v124, v122);
  LODWORD(v105) = 0;
  HIDWORD(v105) = v104.i32[1];
  v106.i64[0] = 0;
  v106.i64[1] = v104.u32[2];
  v107 = vmulq_n_f32((float32x4_t)v104.u32[0], 0.0 - *(float *)&v123);
  v108 = vaddq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v104.u32[0], (float32x4_t)0, (float32x4_t)v105), (float32x4_t)0, v106), (float32x4_t)0);
  *(float *)&v109 = 0.0 * v104.f32[0];
  v110 = vaddq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v105, (float32x4_t)COERCE_UNSIGNED_INT(0.0 * v104.f32[0])), (float32x4_t)0, v106), (float32x4_t)0);
  v111 = vaddq_f32(vaddq_f32(v106, vmlaq_f32((float32x4_t)v109, (float32x4_t)0, (float32x4_t)v105)), (float32x4_t)0);
  v131 = vcvtq_f64_f32(*(float32x2_t *)v108.f32);
  v132 = vcvt_hight_f64_f32(v108);
  v112 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(v107, (float32x4_t)v105, 0.0 - *((float *)&v123 + 1)), v106, 0.0 - *((float *)&v123 + 2)), (float32x4_t)xmmword_22655FA60);
  v133 = vcvtq_f64_f32(*(float32x2_t *)v110.f32);
  v134 = vcvt_hight_f64_f32(v110);
  v135 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
  v136 = vcvt_hight_f64_f32(v111);
  v137 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
  v138 = vcvt_hight_f64_f32(v112);
  objc_msgSend(v103, sel_setDouble4x4Value_, &v131);
  *(_QWORD *)&v131.f64[0] = 12078;
  v131.f64[1] = -1.15172193e164;
  v113 = v129;
  sub_22655BFD8();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v114 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v115 = v127;
  objc_msgSend(v127, sel_addReferenceWithPath_nodePath_, v114, 0);

  ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v119)(v113, v130);
}

double sub_226478364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  float32x4_t v12;
  id v13;
  void *v14;
  id v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  char isUniquelyReferenced_nonNull_native;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;

  v3 = sub_22655C05C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(v1 + 40);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 40);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v9 = sub_226534D28(a1);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v13 = objc_allocWithZone(MEMORY[0x24BDDE6D8]);
    v14 = (void *)sub_22655BFE4();
    v15 = objc_msgSend(v13, sel_initWithURL_, v14);

    objc_msgSend(v15, sel_boundingBox);
    v26 = v16;
    objc_msgSend(v15, sel_boundingBox);
    v18 = vaddq_f32(v26, v17);
    *(float32x2_t *)v19.f32 = vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)0x3F0000003F000000);
    v19.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v18, 2));
    v26 = v19;
    objc_msgSend(v15, sel_boundingBox);
    v25 = v20;
    objc_msgSend(v15, sel_boundingBox);
    v22 = vsubq_f32(v25, v21);
    v22.i32[3] = 0;
    v25 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *v7;
    *v7 = 0x8000000000000000;
    sub_226523344((uint64_t)v6, isUniquelyReferenced_nonNull_native, (__n128)v26, (__n128)v25);
    *v7 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_endAccess();

    return *(double *)v26.i64;
  }
  v11 = *(_QWORD *)(v8 + 56) + 32 * v9;
  v12 = *(float32x4_t *)v11;
  v25 = *(float32x4_t *)(v11 + 16);
  v26 = v12;
  swift_bridgeObjectRelease();
  return *(double *)v26.i64;
}

void sub_226478564(_QWORD *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  void *v55;
  void *v56;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t *v89;
  char *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float32x4_t *v113;
  void *v114;
  void *v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  float32x4_t *v120;
  int v121;
  char *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  float32x4_t *v133;
  void *v134;
  uint64_t v135;
  float32x4_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void (*v190)(char *, uint64_t);
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  uint64_t v193;
  void *v194;
  char *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  float32x4_t *v210;
  char *v211;
  float32x4_t *i;
  char *v213;
  unsigned __int8 *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  float32x4_t *v218;
  float32x4_t *v219;
  char *v220;
  float32x4_t *v221;
  id v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v205 = a4;
  v217 = a1;
  v6 = type metadata accessor for CapturedRoom.Object(0);
  v216 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v207 = (uint64_t)&v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v215 = (uint64_t)&v193 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v214 = (unsigned __int8 *)&v193 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v201 = (char *)&v193 - v13;
  v14 = type metadata accessor for CapturedRoom.Surface(0);
  v202 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  i = (float32x4_t *)((char *)&v193 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v218 = (float32x4_t *)((char *)&v193 - v17);
  MEMORY[0x24BDAC7A8](v18);
  v219 = (float32x4_t *)((char *)&v193 - v19);
  MEMORY[0x24BDAC7A8](v20);
  v221 = (float32x4_t *)((char *)&v193 - v21);
  MEMORY[0x24BDAC7A8](v22);
  v210 = (float32x4_t *)((char *)&v193 - v23);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432D8);
  MEMORY[0x24BDAC7A8](v24);
  v203 = (uint64_t *)((char *)&v193 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v26);
  v204 = (uint64_t *)((char *)&v193 - v27);
  v28 = sub_22655C05C();
  v224 = *(_QWORD *)(v28 - 8);
  v225 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v206 = (char *)&v193 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v208 = (char *)&v193 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v211 = (char *)&v193 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v213 = (char *)&v193 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v193 - v37;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v193 - v40;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v193 - v43;
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v193 - v46;
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v193 - v49;
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)&v193 - v52;
  v54 = (void *)*MEMORY[0x24BEBEE28];
  v55 = v223;
  v56 = sub_22647D430(0x7072675F68637241, 0xE800000000000000, (void *)*MEMORY[0x24BEBEE28], 1, a2, a3);
  v222 = v55;
  if (!v55)
  {
    v220 = v44;
    v195 = v41;
    v209 = v38;
    v196 = v47;
    v223 = v50;
    v57 = v210;
    v194 = a2;
    v197 = v54;
    v199 = v56;
    v198 = a3;
    v200 = v53;
    sub_22655C008();
    v58 = v217[3];
    v59 = v217[4];
    __swift_project_boxed_opaque_existential_1(v217, v58);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 24))(v58, v59);
    v229 = 0;
    v230 = 0;
    v228 = v60;
    v61 = v203;
    sub_22646F21C(v203);
    v62 = v204;
    sub_226446554((uint64_t)v61, (uint64_t)v204, &qword_2558432D8);
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) == 1)
    {
      v64 = v197;
      v65 = v222;
LABEL_4:
      swift_bridgeObjectRelease();
      v66 = v194;
      v67 = (char *)sub_22647D430(0x72675F726F6F6C46, 0xE900000000000070, v64, 1, v194, v198);
      if (v65)
      {
        (*(void (**)(char *, uint64_t))(v224 + 8))(v200, v225);

      }
      else
      {
        v122 = v67;
        sub_22655C008();
        v123 = v217;
        v124 = v217[3];
        v125 = v217[4];
        __swift_project_boxed_opaque_existential_1(v217, v124);
        v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 64))(v124, v125);
        v127 = *(_QWORD *)(v126 + 16);
        if (v127)
        {
          v128 = v122;
          v129 = *(unsigned __int8 *)(v202 + 80);
          v223 = (char *)v126;
          v130 = v126 + ((v129 + 32) & ~v129);
          v131 = *(_QWORD *)(v202 + 72);
          v132 = v211;
          v133 = i;
          do
          {
            sub_22643D704(v130, (uint64_t)v133, type metadata accessor for CapturedRoom.Surface);
            sub_226479B68(v133, 0, v132);
            sub_22646F8CC();
            if (v135)
            {
              v134 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v134 = 0;
            }
            objc_msgSend(v128, sel_addReferenceWithPath_nodePath_, v134, 0);

            v132 = v211;
            (*(void (**)(char *, uint64_t))(v224 + 8))(v211, v225);
            v133 = i;
            sub_22643D748((uint64_t)i, type metadata accessor for CapturedRoom.Surface);
            v130 += v131;
            --v127;
          }
          while (v127);
          swift_bridgeObjectRelease();
          v123 = v217;
          v66 = v194;
          v122 = v128;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v136 = (float32x4_t *)sub_22647D430(0x675F7463656A624FLL, 0xEA00000000007072, v197, 1, v66, v198);
        v137 = v216;
        v219 = v136;
        v211 = v122;
        v138 = v123[3];
        v139 = v123[4];
        __swift_project_boxed_opaque_existential_1(v123, v138);
        v140 = (*(uint64_t (**)(uint64_t, uint64_t))(v139 + 56))(v138, v139);
        v141 = *(_QWORD *)(v140 + 16);
        if (v141)
        {
          v228 = MEMORY[0x24BEE4AF8];
          sub_2264C7B78(0, v141, 0);
          v142 = *(unsigned __int8 *)(v137 + 80);
          v223 = (char *)v140;
          v143 = v140 + ((v142 + 32) & ~v142);
          v144 = *(_QWORD *)(v137 + 72);
          v145 = v228;
          do
          {
            v146 = v201;
            sub_22643D704(v143, (uint64_t)v201, type metadata accessor for CapturedRoom.Object);
            v147 = *v146;
            sub_22643D748((uint64_t)v146, type metadata accessor for CapturedRoom.Object);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_2264C7B78(0, *(_QWORD *)(v145 + 16) + 1, 1);
              v145 = v228;
            }
            v149 = *(_QWORD *)(v145 + 16);
            v148 = *(_QWORD *)(v145 + 24);
            if (v149 >= v148 >> 1)
            {
              sub_2264C7B78(v148 > 1, v149 + 1, 1);
              v145 = v228;
            }
            *(_QWORD *)(v145 + 16) = v149 + 1;
            *(_BYTE *)(v145 + v149 + 32) = v147;
            v143 += v144;
            --v141;
          }
          while (v141);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v145 = MEMORY[0x24BEE4AF8];
        }
        v150 = sub_22653D190(v145);
        swift_bridgeObjectRelease();
        v151 = 0;
        v152 = v150 + 56;
        v153 = 1 << *(_BYTE *)(v150 + 32);
        v154 = -1;
        if (v153 < 64)
          v154 = ~(-1 << v153);
        v155 = v154 & *(_QWORD *)(v150 + 56);
        v156 = (unint64_t)(v153 + 63) >> 6;
        v157 = v225;
        v158 = v217;
        v220 = (char *)v150;
        v218 = (float32x4_t *)(v150 + 56);
        for (i = (float32x4_t *)v156; ; v156 = (int64_t)i)
        {
          do
          {
            if (v155)
            {
              v159 = __clz(__rbit64(v155));
              v155 &= v155 - 1;
              v160 = v159 | (v151 << 6);
            }
            else
            {
              if (__OFADD__(v151++, 1))
                goto LABEL_100;
              if (v151 >= v156)
              {
LABEL_98:

                swift_release();
                v192 = *(void (**)(char *, uint64_t))(v224 + 8);
                v192(v213, v157);
                v192(v200, v157);
                return;
              }
              v162 = *(_QWORD *)(v152 + 8 * v151);
              if (!v162)
              {
                v163 = v151 + 1;
                if (v151 + 1 >= v156)
                  goto LABEL_98;
                v162 = *(_QWORD *)(v152 + 8 * v163);
                if (!v162)
                {
                  v163 = v151 + 2;
                  if (v151 + 2 >= v156)
                    goto LABEL_98;
                  v162 = *(_QWORD *)(v152 + 8 * v163);
                  if (!v162)
                  {
                    v163 = v151 + 3;
                    if (v151 + 3 >= v156)
                      goto LABEL_98;
                    v162 = *(_QWORD *)(v152 + 8 * v163);
                    if (!v162)
                    {
                      while (1)
                      {
                        v151 = v163 + 1;
                        if (__OFADD__(v163, 1))
                          goto LABEL_101;
                        if (v151 >= v156)
                          goto LABEL_98;
                        v162 = *(_QWORD *)(v152 + 8 * v151);
                        ++v163;
                        if (v162)
                          goto LABEL_70;
                      }
                    }
                  }
                }
                v151 = v163;
              }
LABEL_70:
              v155 = (v162 - 1) & v162;
              v160 = __clz(__rbit64(v162)) + (v151 << 6);
            }
            LODWORD(v223) = *(unsigned __int8 *)(*(_QWORD *)(v150 + 48) + v160);
          }
          while ((_DWORD)v223 == 15);
          v221 = (float32x4_t *)v155;
          v222 = (id)v151;
          v164 = v158[3];
          v165 = v158[4];
          __swift_project_boxed_opaque_existential_1(v158, v164);
          v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v165 + 56))(v164, v165);
          v167 = MEMORY[0x24BEE4AF8];
          v228 = MEMORY[0x24BEE4AF8];
          v168 = *(_QWORD *)(v166 + 16);
          if (v168)
            break;
          v175 = (char *)MEMORY[0x24BEE4AF8];
LABEL_85:
          swift_bridgeObjectRelease();
          v176 = *((_QWORD *)v175 + 2);
          if (v176)
          {
            LOBYTE(v228) = (_BYTE)v223;
            v228 = sub_22655CDDC();
            v229 = v177;
            sub_22647D7C4();
            v178 = sub_22655D184();
            v180 = v179;
            swift_bridgeObjectRelease();
            v228 = v178;
            v229 = v180;
            swift_bridgeObjectRetain();
            sub_22655CE24();
            v181 = v228;
            v182 = v229;
            sub_22655C008();
            swift_bridgeObjectRelease();
            v183 = sub_22647D430(v181, v182, v197, 1, v219, v198);
            swift_bridgeObjectRelease();
            v184 = *(unsigned __int8 *)(v216 + 80);
            v223 = v175;
            v185 = (uint64_t)&v175[(v184 + 32) & ~v184];
            v186 = *(_QWORD *)(v216 + 72);
            v187 = v207;
            v188 = (uint64_t)v206;
            do
            {
              sub_22643D704(v185, v187, type metadata accessor for CapturedRoom.Object);
              sub_22647AD00(v187, v188);
              sub_22646F8CC();
              if (v191)
              {
                v189 = (void *)sub_22655CD64();
                swift_bridgeObjectRelease();
              }
              else
              {
                v189 = 0;
              }
              objc_msgSend(v183, sel_addReferenceWithPath_nodePath_, v189, 0);

              v190 = *(void (**)(char *, uint64_t))(v224 + 8);
              v188 = (uint64_t)v206;
              v190(v206, v225);
              v187 = v207;
              sub_22643D748(v207, type metadata accessor for CapturedRoom.Object);
              v185 += v186;
              --v176;
            }
            while (v176);
            swift_release();

            v157 = v225;
            v190(v208, v225);
          }
          else
          {
            swift_release();
            v157 = v225;
          }
          v158 = v217;
          v152 = (uint64_t)v218;
          v150 = (uint64_t)v220;
          v155 = (unint64_t)v221;
          v151 = (uint64_t)v222;
        }
        v169 = 0;
        while (v169 < *(_QWORD *)(v166 + 16))
        {
          v170 = (*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80);
          v171 = *(_QWORD *)(v216 + 72);
          v172 = v214;
          sub_22643D704(v166 + v170 + v171 * v169, (uint64_t)v214, type metadata accessor for CapturedRoom.Object);
          if (*v172 == (_DWORD)v223)
          {
            sub_22643F6AC((uint64_t)v172, v215, type metadata accessor for CapturedRoom.Object);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_2264C7B9C(0, *(_QWORD *)(v167 + 16) + 1, 1);
            v167 = v228;
            v174 = *(_QWORD *)(v228 + 16);
            v173 = *(_QWORD *)(v228 + 24);
            if (v174 >= v173 >> 1)
            {
              sub_2264C7B9C(v173 > 1, v174 + 1, 1);
              v167 = v228;
            }
            *(_QWORD *)(v167 + 16) = v174 + 1;
            sub_22643F6AC(v215, v167 + v170 + v174 * v171, type metadata accessor for CapturedRoom.Object);
          }
          else
          {
            sub_22643D748((uint64_t)v172, type metadata accessor for CapturedRoom.Object);
          }
          if (v168 == ++v169)
          {
            v175 = (char *)v228;
            goto LABEL_85;
          }
        }
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
      }
    }
    else
    {
      v68 = MEMORY[0x24BEE17D8];
      v64 = v197;
      v69 = (uint64_t)v57;
      v65 = v222;
      while (1)
      {
        v70 = v64;
        v71 = *v62;
        v72 = (uint64_t)v62 + *(int *)(v63 + 48);
        v73 = (float32x4_t *)v69;
        sub_22643F6AC(v72, v69, type metadata accessor for CapturedRoom.Surface);
        v226 = 0x5F6C6C6157;
        v227 = 0xE500000000000000;
        v231 = v71;
        sub_22655D544();
        sub_22655CE24();
        swift_bridgeObjectRelease();
        sub_22655CE24();
        v222 = sub_22647D430(v226, v227, v70, 1, v199, v198);
        if (v65)
          break;
        v74 = v68;
        swift_bridgeObjectRelease();
        v226 = 1819042135;
        v227 = 0xE400000000000000;
        v231 = v71;
        sub_22655D544();
        sub_22655CE24();
        swift_bridgeObjectRelease();
        sub_22655C008();
        swift_bridgeObjectRelease();
        sub_226479B68(v73, 1, v196);
        sub_22646F8CC();
        if (v75)
        {
          v76 = (void *)sub_22655CD64();
          swift_bridgeObjectRelease();
        }
        else
        {
          v76 = 0;
        }
        v77 = v202;
        v78 = v195;
        v79 = v217;
        objc_msgSend(v222, sel_addReferenceWithPath_nodePath_, v76, 0, v193);

        v80 = v79[3];
        v81 = v79[4];
        __swift_project_boxed_opaque_existential_1(v79, v80);
        v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 32))(v80, v81);
        MEMORY[0x24BDAC7A8](v82);
        *(&v193 - 2) = (uint64_t)v73;
        sub_226506044((uint64_t (*)(char *))sub_226480024, (uint64_t)(&v193 - 4), v83);
        v85 = *(_QWORD *)(v84 + 16);
        if (v85)
        {
          v86 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
          v193 = v84;
          v87 = v84 + v86;
          v88 = *(_QWORD *)(v77 + 72);
          v90 = v220;
          v89 = v221;
          do
          {
            sub_22643D704(v87, (uint64_t)v89, type metadata accessor for CapturedRoom.Surface);
            sub_226479B68(v89, 1, v90);
            sub_22646F8CC();
            if (v92)
            {
              v91 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v91 = 0;
            }
            objc_msgSend(v222, sel_addReferenceWithPath_nodePath_, v91, 0, v193);

            v90 = v220;
            (*(void (**)(char *, uint64_t))(v224 + 8))(v220, v225);
            v89 = v221;
            sub_22643D748((uint64_t)v221, type metadata accessor for CapturedRoom.Surface);
            v87 += v88;
            --v85;
          }
          while (v85);
          swift_bridgeObjectRelease();
          v77 = v202;
          v73 = v210;
          v74 = MEMORY[0x24BEE17D8];
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v93 = v217[3];
        v94 = v217[4];
        __swift_project_boxed_opaque_existential_1(v217, v93);
        v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 40))(v93, v94);
        MEMORY[0x24BDAC7A8](v95);
        *(&v193 - 2) = (uint64_t)v73;
        sub_226506044((uint64_t (*)(char *))sub_226480024, (uint64_t)(&v193 - 4), v96);
        v98 = *(_QWORD *)(v97 + 16);
        if (v98)
        {
          v99 = v97 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
          v100 = *(_QWORD *)(v77 + 72);
          v101 = v219;
          do
          {
            sub_22643D704(v99, (uint64_t)v101, type metadata accessor for CapturedRoom.Surface);
            sub_226479B68(v101, 1, v78);
            sub_22646F8CC();
            if (v103)
            {
              v102 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v102 = 0;
            }
            objc_msgSend(v222, sel_addReferenceWithPath_nodePath_, v102, 0);

            (*(void (**)(void *, uint64_t))(v224 + 8))(v78, v225);
            v101 = v219;
            sub_22643D748((uint64_t)v219, type metadata accessor for CapturedRoom.Surface);
            v99 += v100;
            --v98;
          }
          while (v98);
          swift_bridgeObjectRelease();
          v77 = v202;
          v73 = v210;
          v74 = MEMORY[0x24BEE17D8];
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v104 = v217[3];
        v105 = v217[4];
        __swift_project_boxed_opaque_existential_1(v217, v104);
        v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 48))(v104, v105);
        MEMORY[0x24BDAC7A8](v106);
        *(&v193 - 2) = (uint64_t)v73;
        sub_226506044((uint64_t (*)(char *))sub_226480024, (uint64_t)(&v193 - 4), v107);
        v109 = *(_QWORD *)(v108 + 16);
        if (v109)
        {
          v110 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
          v193 = v108;
          v111 = v108 + v110;
          v112 = *(_QWORD *)(v77 + 72);
          v113 = v218;
          v114 = v209;
          do
          {
            sub_22643D704(v111, (uint64_t)v113, type metadata accessor for CapturedRoom.Surface);
            sub_226479B68(v113, 1, v114);
            sub_22646F8CC();
            if (v117)
            {
              v115 = (void *)sub_22655CD64();
              swift_bridgeObjectRelease();
            }
            else
            {
              v115 = 0;
            }
            objc_msgSend(v222, sel_addReferenceWithPath_nodePath_, v115, 0, v193);

            v116 = *(void (**)(char *, uint64_t))(v224 + 8);
            v114 = v209;
            v116(v209, v225);
            v113 = v218;
            sub_22643D748((uint64_t)v218, type metadata accessor for CapturedRoom.Surface);
            v111 += v112;
            --v109;
          }
          while (v109);
          v68 = MEMORY[0x24BEE17D8];
          swift_bridgeObjectRelease();

          v73 = v210;
        }
        else
        {
          v68 = v74;
          swift_bridgeObjectRelease();

          v116 = *(void (**)(char *, uint64_t))(v224 + 8);
        }
        v118 = v225;
        v116((char *)v196, v225);
        v116(v223, v118);
        sub_22643D748((uint64_t)v73, type metadata accessor for CapturedRoom.Surface);
        v119 = v203;
        sub_22646F21C(v203);
        v120 = v73;
        v62 = v204;
        sub_226446554((uint64_t)v119, (uint64_t)v204, &qword_2558432D8);
        v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
        v121 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63);
        v69 = (uint64_t)v120;
        v64 = v197;
        if (v121 == 1)
          goto LABEL_4;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v224 + 8))(v200, v225);
      sub_22643D748((uint64_t)v73, type metadata accessor for CapturedRoom.Surface);
    }
  }
}

void sub_226479B68(float32x4_t *a1@<X1>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  float64_t v53;
  id v54;
  void *v55;
  id v56;
  __n128 *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  __int32 v74;
  uint64_t v75;
  __n128 (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  float32x2_t *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  id v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  id v112;
  void *v113;
  void *v114;
  id v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  void *v120;
  void *v121;
  int v122;
  id v123;
  double v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  float32x4_t v132;
  char *v133;
  char *v134;
  __int128 v135;
  float32x4_t *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  float32x2_t *v142;
  __n128 v143;
  _QWORD *v144;
  void *v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64_t v154;

  v140 = a2;
  v145 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255840818);
  MEMORY[0x24BDAC7A8](v6);
  v141 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v126 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = (_QWORD *)type metadata accessor for CapturedRoom.Surface.Curve(0);
  v143.n128_u64[0] = *(v144 - 1);
  MEMORY[0x24BDAC7A8](v144);
  v142 = (float32x2_t *)((char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CapturedRoom.Surface(0);
  v16 = (uint64_t)a1 + *(int *)(v15 + 44);
  v17 = *(_QWORD *)(v3 + 16);
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_6;
  v18 = v15;
  swift_bridgeObjectRetain();
  v19 = sub_226534858(v16);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v25 = v24;
    *v24 = sub_22655C0EC();
    v25[1] = v26;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  v21 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 16 * v19);
  v22 = v21[1];
  v139 = *v21;
  v138 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v137 = a1->u8[0];
  v136 = a1;
  v133 = v10;
  v134 = v13;
  if ((v137 - 2) >= 4u)
    LODWORD(v23) = 973279855;
  else
    LODWORD(v23) = dword_226560BE0[(char)(v137 - 2)];
  v135 = v23;
  v27 = v139;
  v28 = v138;
  *(_QWORD *)&v146.f64[0] = v139;
  *(_QWORD *)&v146.f64[1] = v138;
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v29 = v145;
  sub_22655C008();
  swift_bridgeObjectRelease();
  v30 = sub_22647CEE8((uint64_t)v29);
  if (v4)
  {
    v31 = sub_22655C05C();
    (*(void (**)(void *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
    swift_bridgeObjectRelease();
    return;
  }
  v32 = v30;
  sub_22655BFD8();
  v34 = v33;
  v35 = objc_msgSend(v32, sel_rootNode);
  v36 = (void *)*MEMORY[0x24BEBEE28];
  v132.i64[0] = (uint64_t)v35;
  v131 = sub_22647D430(v27, v28, v36, 2, v35, v32);
  v130 = v32;
  v128 = sub_22655CD64();
  v127 = sub_22655CD64();
  *(_QWORD *)&v146.f64[0] = 12078;
  v146.f64[1] = -1.15172193e164;
  v129 = v34;
  sub_22655CE24();
  v37 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v38 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v37, sel_initWithResourcePath_, v38);

  v40 = v131;
  v41 = (void *)v128;
  v42 = (void *)v127;
  objc_msgSend(v131, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v128, v127, v39);

  v43 = (void *)sub_22655CD64();
  v44 = (void *)sub_22655CD64();
  v45 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  swift_bridgeObjectRetain();
  v46 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v45, sel_initWithString_, v46);

  objc_msgSend(v40, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v43, v44, v47);
  swift_bridgeObjectRelease();

  v48 = (void *)sub_22655CD64();
  sub_22655C0EC();
  v49 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v50 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v51 = objc_msgSend(v49, sel_initWithString_, v50);

  objc_msgSend(v40, sel_setCustomMetadata_value_, v48, v51);
  v52 = (void *)sub_22655CD64();
  LOBYTE(v146.f64[0]) = v137;
  *(_QWORD *)&v146.f64[0] = sub_22655CDDC();
  v146.f64[1] = v53;
  sub_22647D7C4();
  sub_22655D184();
  swift_bridgeObjectRelease();
  v54 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v55 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v54, sel_initWithString_, v55);

  objc_msgSend(v40, sel_setCustomMetadata_value_, v52, v56);
  v57 = (__n128 *)v136;
  v58 = COERCE_FLOAT(v136[1].i64[1]);
  v132 = v136[1];
  v59 = vmuls_lane_f32(0.5, v132, 2);
  if (v58 <= 0.0)
    v60 = *(float *)&v135;
  else
    v60 = v59;
  if (v58 <= 0.0)
    v61 = 0.0;
  else
    v61 = v59;
  v62 = (uint64_t)v134;
  sub_22643D7A0((uint64_t)v136 + *(int *)(v18 + 52), (uint64_t)v134, (uint64_t *)&unk_255848090);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v143.n128_u64[0] + 48))(v62, 1, v144) != 1)
  {
    sub_22643F6AC(v62, (uint64_t)v142, type metadata accessor for CapturedRoom.Surface.Curve);
    v64 = v138;
    v65 = sub_22647D430(v139, v138, (void *)*MEMORY[0x24BEBEDF8], 3, v40, v130);
    v66 = (void *)sub_22655CD64();
    v67 = *MEMORY[0x24BEBEDB8];
    v145 = v65;
    v68 = objc_msgSend(v65, sel_newPropertyWithName_type_role_, v66, v67, 0);

    if (v68)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
      v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_22655FA20;
      v70 = objc_allocWithZone(MEMORY[0x24BEBED08]);
      v71 = (void *)sub_22655CD64();
      v72 = objc_msgSend(v70, (SEL)&selRef_walls, v71);

      *(_QWORD *)(v69 + 32) = v72;
      *(_QWORD *)&v146.f64[0] = v69;
      sub_22655CEE4();
      sub_22643F548(0, &qword_2558432A8);
      v73 = (void *)sub_22655CEC0();
      swift_bridgeObjectRelease();
      objc_msgSend(v68, sel_setTokenArray_, v73);

      type metadata accessor for RoomCaptureGeometryManager();
      swift_initStaticObject();
      v74 = v132.i32[1];
      v75 = type metadata accessor for ScanItemStrut();
      v76 = *(__n128 (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
      v77 = (uint64_t)v133;
      v76(v133, 1, 1, v75);
      v78 = (uint64_t)v141;
      v79 = v76(v141, 1, 1, v75);
      v79.n128_u32[0] = v74;
      v80 = v142;
      v81 = sub_226458318(v142, MEMORY[0x24BEE4AF8], v79.n128_f64[0], v61, v60, v77, v78, 1016003125, 1);
      sub_22643D7E4(v78, &qword_255840818);
      sub_22643D7E4(v77, &qword_255840818);
      v57 = (__n128 *)v136;
      v82 = v145;
      sub_22647E594(v145, v81, v136[2], v136[3], v136[4], v136[5]);

      swift_release();
      sub_22643D748((uint64_t)v80, type metadata accessor for CapturedRoom.Surface.Curve);
      goto LABEL_33;
    }
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_22643D7E4(v62, (uint64_t *)&unk_255848090);
  if (v137 == 5)
  {
    v63 = *(uint64_t *)((char *)v57->n128_i64 + *(int *)(v18 + 60));
    if (*(_QWORD *)(v63 + 16))
    {
      v64 = v138;
      v83 = sub_22647D430(v139, v138, (void *)*MEMORY[0x24BEBEDF8], 3, v40, v130);
      v84 = (void *)sub_22655CD64();
      v85 = *MEMORY[0x24BEBEDB8];
      v145 = v83;
      v86 = objc_msgSend(v83, sel_newPropertyWithName_type_role_, v84, v85, 0);

      if (v86)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
        v87 = swift_allocObject();
        *(_OWORD *)(v87 + 16) = xmmword_22655FA20;
        v88 = objc_allocWithZone(MEMORY[0x24BEBED08]);
        v89 = (void *)sub_22655CD64();
        v90 = objc_msgSend(v88, sel_initWithString_, v89);

        *(_QWORD *)(v87 + 32) = v90;
        *(_QWORD *)&v146.f64[0] = v87;
        sub_22655CEE4();
        sub_22643F548(0, &qword_2558432A8);
        v91 = (void *)sub_22655CEC0();
        swift_bridgeObjectRelease();
        objc_msgSend(v86, sel_setTokenArray_, v91);

        type metadata accessor for RoomCaptureGeometryManager();
        swift_initStaticObject();
        v143 = v57[1];
        v92 = type metadata accessor for ScanItemStrut();
        v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56);
        v94 = (uint64_t)v133;
        v93(v133, 1, 1, v92);
        v144 = v86;
        v95 = (uint64_t)v141;
        v93(v141, 1, 1, v92);
        v96 = sub_226456594(v63, MEMORY[0x24BEE4AF8], 0, v140 & 1, v94, v95, v143, v61, v60, 0.0);
        sub_22643D7E4(v95, &qword_255840818);
        sub_22643D7E4(v94, &qword_255840818);
        v82 = v145;
        sub_22647E594(v145, v96, (float32x4_t)v57[2], (float32x4_t)v57[3], (float32x4_t)v57[4], (float32x4_t)v57[5]);

        swift_release();
        goto LABEL_33;
      }
      goto LABEL_39;
    }
  }
  v97 = sub_22647D430(v139, v138, (void *)*MEMORY[0x24BEBEDE0], 3, v40, v130);
  v98 = (void *)sub_22655CD64();
  v99 = objc_msgSend(v97, sel_newPropertyWithName_type_role_, v98, *MEMORY[0x24BEBEDB8], 0);

  if (!v99)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v145 = v99;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = xmmword_22655FA20;
  v101 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v102 = (void *)sub_22655CD64();
  v103 = objc_msgSend(v101, sel_initWithString_, v102);

  *(_QWORD *)(v100 + 32) = v103;
  *(_QWORD *)&v146.f64[0] = v100;
  sub_22655CEE4();
  v154 = v146.f64[0];
  v104 = (void *)sub_22655CD64();
  v105 = objc_msgSend(v97, sel_newPropertyWithName_type_role_, v104, *MEMORY[0x24BEBED20], 0);

  if (!v105)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(v105, sel_setDoubleValue_, 1.0);
  v106 = (void *)sub_22655CD64();
  v107 = v97;
  v108 = objc_msgSend(v97, sel_newPropertyWithName_type_role_, v106, *MEMORY[0x24BEBED28], 0);

  if (!v108)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  v109 = (float32x4_t)v57[1];
  v109.i32[3] = 0;
  v110 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v135, 0);
  v110.i32[3] = 0;
  v111 = vmaxnmq_f32(v109, v110);
  v146 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
  v147 = (float64x2_t)COERCE_UNSIGNED_INT64(v111.f32[2]);
  objc_msgSend(v108, sel_setDouble3Value_, &v146);
  v112 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v113 = (void *)sub_22655CD64();
  objc_msgSend(v112, sel_initWithString_, v113);

  MEMORY[0x227699594]();
  if (*(_QWORD *)((*(_QWORD *)&v154 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v154 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  v114 = (void *)sub_22655CD64();
  v115 = objc_msgSend(v107, sel_newPropertyWithName_type_role_, v114, *MEMORY[0x24BEBED30], 0);

  if (!v115)
    goto LABEL_43;
  v116 = (float32x4_t)v57[2];
  v117 = (float32x4_t)v57[3];
  v118 = (float32x4_t)v57[4];
  v119 = (float32x4_t)v57[5];
  v146 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
  v147 = vcvt_hight_f64_f32(v116);
  v148 = vcvtq_f64_f32(*(float32x2_t *)v117.f32);
  v149 = vcvt_hight_f64_f32(v117);
  v150 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
  v151 = vcvt_hight_f64_f32(v118);
  v152 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
  v153 = vcvt_hight_f64_f32(v119);
  objc_msgSend(v115, sel_setDouble4x4Value_, &v146);
  sub_22643F548(0, &qword_2558432A8);
  v120 = (void *)sub_22655CEC0();
  swift_bridgeObjectRelease();
  v121 = v145;
  objc_msgSend(v145, sel_setTokenArray_, v120);

  v64 = v138;
  v82 = v107;
LABEL_33:
  v122 = v57->n128_u8[0];
  v123 = v131;
  if (v122 == 5 || v122 == 2)
    v124 = 0.00781250185;
  else
    v124 = 0.000000743866278;
  v125 = v130;
  sub_22647EA84(v82, v124, 1.0, v139, v64, v130);
  swift_bridgeObjectRelease();
  objc_msgSend(v125, sel_save);

}

void sub_22647AD00(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  float64_t v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  unint64_t v39;
  void *v40;
  id v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  void *v74;

  v6 = a1 + *(int *)(type metadata accessor for CapturedRoom.Object(0) + 32);
  v7 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v8 = sub_226534858(v6);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    v16 = v15;
    *v15 = sub_22655C0EC();
    v16[1] = v17;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
  v12 = *v10;
  v11 = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v66.f64[0] = v12;
  *(_QWORD *)&v66.f64[1] = v11;
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  sub_22655C008();
  swift_bridgeObjectRelease();
  v13 = sub_22647CEE8(a2);
  if (v3)
  {
    v14 = sub_22655C05C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
    swift_bridgeObjectRelease();
    return;
  }
  v74 = v13;
  sub_22655BFD8();
  v64 = objc_msgSend(v74, sel_rootNode);
  v62 = sub_22647D430(v12, v11, (void *)*MEMORY[0x24BEBEE28], 2, v64, v74);
  v58 = (void *)sub_22655CD64();
  v57 = (void *)sub_22655CD64();
  sub_22655CE24();
  v63 = v12;
  v18 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v19 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_initWithResourcePath_, v19);

  objc_msgSend(v62, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v58, v57, v20);
  v59 = (void *)sub_22655CD64();
  v21 = (void *)sub_22655CD64();
  v22 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  swift_bridgeObjectRetain();
  v23 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v22, sel_initWithString_, v23);

  objc_msgSend(v62, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v59, v21, v24);
  swift_bridgeObjectRelease();

  v25 = (void *)sub_22655CD64();
  sub_22655C0EC();
  v26 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v27 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithString_, v27);

  objc_msgSend(v62, sel_setCustomMetadata_value_, v25, v28);
  v29 = (void *)sub_22655CD64();
  *(_QWORD *)&v66.f64[0] = sub_22655CDDC();
  v66.f64[1] = v30;
  sub_22647D7C4();
  sub_22655D184();
  swift_bridgeObjectRelease();
  v31 = objc_allocWithZone(MEMORY[0x24BEBECD8]);
  v32 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v33 = objc_msgSend(v31, sel_initWithString_, v32);

  objc_msgSend(v62, sel_setCustomMetadata_value_, v29, v33);
  v34 = sub_22647D430(v63, v11, (void *)*MEMORY[0x24BEBEDE0], 3, v62, v74);
  v35 = (void *)sub_22655CD64();
  v36 = objc_msgSend(v34, sel_newPropertyWithName_type_role_, v35, *MEMORY[0x24BEBED20], 0);

  if (!v36)
  {
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v36, sel_setDoubleValue_, 1.0);
  v37 = (void *)sub_22655CD64();
  v38 = objc_msgSend(v34, sel_newPropertyWithName_type_role_, v37, *MEMORY[0x24BEBED28], 0);

  if (!v38)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(double *)&v39 = *(float *)(a1 + 24);
  v66 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 16));
  v67 = (float64x2_t)v39;
  objc_msgSend(v38, sel_setDouble3Value_, &v66);
  v40 = (void *)sub_22655CD64();
  v41 = objc_msgSend(v34, sel_newPropertyWithName_type_role_, v40, *MEMORY[0x24BEBED30], 0);

  v65 = v41;
  if (!v41)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v60 = v38;
  v61 = v36;
  v42 = *(float32x4_t *)(a1 + 32);
  v43 = *(float32x4_t *)(a1 + 48);
  v44 = *(float32x4_t *)(a1 + 64);
  v45 = *(float32x4_t *)(a1 + 80);
  v66 = vcvtq_f64_f32(*(float32x2_t *)v42.f32);
  v67 = vcvt_hight_f64_f32(v42);
  v68 = vcvtq_f64_f32(*(float32x2_t *)v43.f32);
  v69 = vcvt_hight_f64_f32(v43);
  v70 = vcvtq_f64_f32(*(float32x2_t *)v44.f32);
  v71 = vcvt_hight_f64_f32(v44);
  v72 = vcvtq_f64_f32(*(float32x2_t *)v45.f32);
  v73 = vcvt_hight_f64_f32(v45);
  objc_msgSend(v41, sel_setDouble4x4Value_, &v66);
  v46 = (void *)sub_22655CD64();
  v47 = objc_msgSend(v34, sel_newPropertyWithName_type_role_, v46, *MEMORY[0x24BEBEDB8], 0);

  if (v47)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_226560BD0;
    v49 = objc_allocWithZone(MEMORY[0x24BEBED08]);
    v50 = (void *)sub_22655CD64();
    v51 = objc_msgSend(v49, sel_initWithString_, v50);

    *(_QWORD *)(v48 + 32) = v51;
    v52 = objc_allocWithZone(MEMORY[0x24BEBED08]);
    v53 = (void *)sub_22655CD64();
    v54 = objc_msgSend(v52, sel_initWithString_, v53);

    *(_QWORD *)(v48 + 40) = v54;
    *(_QWORD *)&v66.f64[0] = v48;
    sub_22655CEE4();
    sub_22643F548(0, &qword_2558432A8);
    v55 = (void *)sub_22655CEC0();
    swift_bridgeObjectRelease();
    objc_msgSend(v47, sel_setTokenArray_, v55);

    v56 = v74;
    sub_22647EA84(v34, 0.00781250185, 1.0, v63, v11, v74);
    swift_bridgeObjectRelease();
    objc_msgSend(v56, sel_save);

    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_22647B600()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for USDModel()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for USDModel.Error()
{
  uint64_t result;

  result = qword_2558433A0;
  if (!qword_2558433A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22647B690(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_22647B718(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_22655CE18();
    return sub_22655CE54();
  }
  return result;
}

uint64_t sub_22647B7A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int isUniquelyReferenced_nonNull_native;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  _BOOL8 v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t, uint64_t);
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  _BOOL8 v206;
  uint64_t v207;
  char v208;
  unint64_t v209;
  char v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(unint64_t *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  unsigned __int8 *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 *v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  int v239;
  unint64_t v240;
  char v241;
  uint64_t result;
  uint64_t v243;
  _QWORD *v244;
  char *v245;
  uint64_t v246;
  unsigned __int8 *v247;
  uint64_t *v248;
  unint64_t *v249;
  uint64_t *v250;
  unint64_t *v251;
  uint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *i;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  void (*v268)(unint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;

  v246 = type metadata accessor for CapturedRoom.Object(0);
  v243 = *(_QWORD *)(v246 - 8);
  MEMORY[0x24BDAC7A8](v246);
  v247 = (unsigned __int8 *)&v243 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_22655C140();
  v270 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v245 = (char *)&v243 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v262 = (uint64_t)&v243 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v263 = (uint64_t)&v243 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v264 = (uint64_t)&v243 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v265 = (uint64_t)&v243 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v266 = (uint64_t *)((char *)&v243 - v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v261 = (char *)&v243 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432D8);
  MEMORY[0x24BDAC7A8](v18);
  v249 = (unint64_t *)((char *)&v243 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v248 = (uint64_t *)((char *)&v243 - v21);
  MEMORY[0x24BDAC7A8](v22);
  v251 = (unint64_t *)((char *)&v243 - v23);
  MEMORY[0x24BDAC7A8](v24);
  v250 = (uint64_t *)((char *)&v243 - v25);
  MEMORY[0x24BDAC7A8](v26);
  v253 = (unint64_t *)((char *)&v243 - v27);
  MEMORY[0x24BDAC7A8](v28);
  v252 = (uint64_t *)((char *)&v243 - v29);
  MEMORY[0x24BDAC7A8](v30);
  v260 = (char *)&v243 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v259 = (char *)&v243 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (unint64_t *)((char *)&v243 - v35);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (uint64_t *)((char *)&v243 - v38);
  v40 = a1[3];
  v41 = a1[4];
  v244 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v40);
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 24);
  v43 = v41;
  v44 = v16;
  v45 = v42(v40, v43);
  v46 = 0;
  v47 = *(_QWORD *)(v45 + 16);
  v48 = (_QWORD *)MEMORY[0x24BEE4B00];
  v269 = v3;
  v267 = v15;
  v256 = v47;
  v257 = v45;
  i = v36;
  v255 = v39;
  while (1)
  {
    if (v46 == v47)
    {
      v268 = *(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v44 + 56);
      v268(v36, 1, 1, v15);
      v46 = v47;
    }
    else
    {
      if (v46 >= *(_QWORD *)(v45 + 16))
        goto LABEL_107;
      v50 = type metadata accessor for CapturedRoom.Surface(0);
      v254 = v46 + 1;
      v51 = (uint64_t)&v261[*(int *)(v15 + 48)];
      sub_22643D704(v45+ ((*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v50 - 8) + 72) * v46, v51, type metadata accessor for CapturedRoom.Surface);
      v52 = (uint64_t)v36 + *(int *)(v15 + 48);
      *v36 = v46;
      sub_22643F6AC(v51, v52, type metadata accessor for CapturedRoom.Surface);
      v268 = *(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v44 + 56);
      v268(v36, 0, 1, v15);
      v46 = v254;
    }
    sub_226446554((uint64_t)v36, (uint64_t)v39, &qword_2558432D8);
    v53 = *(uint64_t **)(v44 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v53)(v39, 1, v15) == 1)
      break;
    v54 = v44;
    v55 = *v39;
    v56 = (uint64_t)v39 + *(int *)(v15 + 48);
    v57 = type metadata accessor for CapturedRoom.Surface(0);
    v58 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v270 + 16);
    v59 = (uint64_t)v266;
    v58(v266, v56 + *(int *)(v57 + 44), v3);
    sub_22643D748(v56, type metadata accessor for CapturedRoom.Surface);
    v271 = v55;
    v272 = 1819042135;
    v273 = 0xE400000000000000;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v60 = v272;
    v61 = v273;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    v64 = sub_226534858(v59);
    v65 = v48[2];
    v66 = (v63 & 1) == 0;
    v67 = v65 + v66;
    if (__OFADD__(v65, v66))
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      result = sub_22655D5A4();
      __break(1u);
      return result;
    }
    v68 = v63;
    if (v48[3] >= v67)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v48 = (_QWORD *)v272;
        if ((v63 & 1) != 0)
          goto LABEL_2;
      }
      else
      {
        sub_226549270();
        v48 = (_QWORD *)v272;
        if ((v68 & 1) != 0)
          goto LABEL_2;
      }
    }
    else
    {
      sub_2265439A4(v67, isUniquelyReferenced_nonNull_native);
      v69 = sub_226534858((uint64_t)v266);
      if ((v68 & 1) != (v70 & 1))
        goto LABEL_117;
      v64 = v69;
      v48 = (_QWORD *)v272;
      if ((v68 & 1) != 0)
      {
LABEL_2:
        v49 = (uint64_t *)(v48[7] + 16 * v64);
        swift_bridgeObjectRelease();
        *v49 = v60;
        v49[1] = v61;
        goto LABEL_3;
      }
    }
    v48[(v64 >> 6) + 8] |= 1 << v64;
    v58((uint64_t *)(v48[6] + *(_QWORD *)(v270 + 72) * v64), (uint64_t)v266, v269);
    v71 = (uint64_t *)(v48[7] + 16 * v64);
    *v71 = v60;
    v71[1] = v61;
    v72 = v48[2];
    v73 = __OFADD__(v72, 1);
    v74 = v72 + 1;
    if (v73)
      goto LABEL_109;
    v48[2] = v74;
LABEL_3:
    swift_bridgeObjectRelease();
    v3 = v269;
    (*(void (**)(uint64_t *, uint64_t))(v270 + 8))(v266, v269);
    v15 = v267;
    v44 = v54;
    v45 = v257;
    v36 = i;
    v39 = v255;
    v47 = v256;
  }
  swift_bridgeObjectRelease();
  v75 = v244[3];
  v76 = v244[4];
  __swift_project_boxed_opaque_existential_1(v244, v75);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 32))(v75, v76);
  v78 = 0;
  v79 = *(_QWORD *)(v77 + 16);
  v266 = v53;
  v81 = (uint64_t *)v259;
  v80 = (unint64_t *)v260;
  for (i = (unint64_t *)v77; ; v77 = (uint64_t)i)
  {
    if (v78 == v79)
    {
      v268(v80, 1, 1, v15);
      v78 = v79;
    }
    else
    {
      if (v78 >= *(_QWORD *)(v77 + 16))
        goto LABEL_108;
      v83 = type metadata accessor for CapturedRoom.Surface(0);
      v257 = v78 + 1;
      v84 = v77
          + ((*(unsigned __int8 *)(*(_QWORD *)(v83 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v83 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v83 - 8) + 72) * v78;
      v85 = (uint64_t)&v261[*(int *)(v15 + 48)];
      sub_22643D704(v84, v85, type metadata accessor for CapturedRoom.Surface);
      v86 = (uint64_t)v80 + *(int *)(v15 + 48);
      *v80 = v78;
      sub_22643F6AC(v85, v86, type metadata accessor for CapturedRoom.Surface);
      v268(v80, 0, 1, v15);
      v78 = v257;
    }
    sub_226446554((uint64_t)v80, (uint64_t)v81, &qword_2558432D8);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v53)(v81, 1, v15) == 1)
      break;
    v87 = *v81;
    v88 = (uint64_t)v81 + *(int *)(v15 + 48);
    v89 = type metadata accessor for CapturedRoom.Surface(0);
    v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 16);
    v91 = v265;
    v90(v265, v88 + *(int *)(v89 + 44), v3);
    sub_22643D748(v88, type metadata accessor for CapturedRoom.Surface);
    v271 = v87;
    v272 = 1919905604;
    v273 = 0xE400000000000000;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v93 = v272;
    v92 = v273;
    v94 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    v96 = sub_226534858(v91);
    v97 = v48[2];
    v98 = (v95 & 1) == 0;
    v99 = v97 + v98;
    if (__OFADD__(v97, v98))
      goto LABEL_103;
    v100 = v95;
    if (v48[3] >= v99)
    {
      if ((v94 & 1) != 0)
      {
        v48 = (_QWORD *)v272;
        if ((v95 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        sub_226549270();
        v48 = (_QWORD *)v272;
        if ((v100 & 1) != 0)
          goto LABEL_21;
      }
    }
    else
    {
      sub_2265439A4(v99, v94);
      v101 = sub_226534858(v265);
      if ((v100 & 1) != (v102 & 1))
        goto LABEL_117;
      v96 = v101;
      v48 = (_QWORD *)v272;
      if ((v100 & 1) != 0)
      {
LABEL_21:
        v82 = (uint64_t *)(v48[7] + 16 * v96);
        swift_bridgeObjectRelease();
        *v82 = v93;
        v82[1] = v92;
        goto LABEL_22;
      }
    }
    v48[(v96 >> 6) + 8] |= 1 << v96;
    v90(v48[6] + *(_QWORD *)(v270 + 72) * v96, v265, v269);
    v103 = (uint64_t *)(v48[7] + 16 * v96);
    *v103 = v93;
    v103[1] = v92;
    v104 = v48[2];
    v73 = __OFADD__(v104, 1);
    v105 = v104 + 1;
    if (v73)
      goto LABEL_111;
    v48[2] = v105;
LABEL_22:
    swift_bridgeObjectRelease();
    v3 = v269;
    (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v265, v269);
    v53 = v266;
    v15 = v267;
    v81 = (uint64_t *)v259;
    v80 = (unint64_t *)v260;
  }
  swift_bridgeObjectRelease();
  v106 = v244[3];
  v107 = v244[4];
  __swift_project_boxed_opaque_existential_1(v244, v106);
  v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 40))(v106, v107);
  v109 = 0;
  v110 = *(_QWORD *)(v108 + 16);
  v111 = v253;
  while (1)
  {
    if (v109 == v110)
    {
      v268(v111, 1, 1, v15);
      v113 = v110;
    }
    else
    {
      if (v109 >= *(_QWORD *)(v108 + 16))
        goto LABEL_110;
      v114 = type metadata accessor for CapturedRoom.Surface(0);
      v265 = v109 + 1;
      v115 = v108
           + ((*(unsigned __int8 *)(*(_QWORD *)(v114 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v114 - 8) + 80))
           + *(_QWORD *)(*(_QWORD *)(v114 - 8) + 72) * v109;
      v116 = v108;
      v117 = (uint64_t)&v261[*(int *)(v15 + 48)];
      sub_22643D704(v115, v117, type metadata accessor for CapturedRoom.Surface);
      v118 = (uint64_t)v111 + *(int *)(v15 + 48);
      *v111 = v109;
      v119 = v117;
      v108 = v116;
      sub_22643F6AC(v119, v118, type metadata accessor for CapturedRoom.Surface);
      v268(v111, 0, 1, v15);
      v113 = v265;
    }
    v120 = v252;
    sub_226446554((uint64_t)v111, (uint64_t)v252, &qword_2558432D8);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v53)(v120, 1, v15) == 1)
      break;
    v265 = v113;
    v121 = v110;
    v122 = v108;
    v123 = *v120;
    v124 = (uint64_t)v120 + *(int *)(v15 + 48);
    v125 = type metadata accessor for CapturedRoom.Surface(0);
    v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 16);
    v127 = v264;
    v126(v264, v124 + *(int *)(v125 + 44), v3);
    sub_22643D748(v124, type metadata accessor for CapturedRoom.Surface);
    v271 = v123;
    v272 = 0x776F646E6957;
    v273 = 0xE600000000000000;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v129 = v272;
    v128 = v273;
    v130 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    v132 = sub_226534858(v127);
    v133 = v48[2];
    v134 = (v131 & 1) == 0;
    v135 = v133 + v134;
    if (__OFADD__(v133, v134))
      goto LABEL_104;
    v136 = v131;
    if (v48[3] >= v135)
    {
      if ((v130 & 1) == 0)
        sub_226549270();
    }
    else
    {
      sub_2265439A4(v135, v130);
      v137 = sub_226534858(v264);
      if ((v136 & 1) != (v138 & 1))
        goto LABEL_117;
      v132 = v137;
    }
    v108 = v122;
    v48 = (_QWORD *)v272;
    v110 = v121;
    if ((v136 & 1) != 0)
    {
      v112 = (uint64_t *)(*(_QWORD *)(v272 + 56) + 16 * v132);
      swift_bridgeObjectRelease();
      *v112 = v129;
      v112[1] = v128;
      v3 = v269;
    }
    else
    {
      *(_QWORD *)(v272 + 8 * (v132 >> 6) + 64) |= 1 << v132;
      v3 = v269;
      v126(v48[6] + *(_QWORD *)(v270 + 72) * v132, v264, v269);
      v139 = (uint64_t *)(v48[7] + 16 * v132);
      *v139 = v129;
      v139[1] = v128;
      v140 = v48[2];
      v73 = __OFADD__(v140, 1);
      v141 = v140 + 1;
      if (v73)
        goto LABEL_113;
      v48[2] = v141;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v264, v3);
    v53 = v266;
    v15 = v267;
    v111 = v253;
    v109 = v265;
  }
  swift_bridgeObjectRelease();
  v142 = v244[3];
  v143 = v244[4];
  __swift_project_boxed_opaque_existential_1(v244, v142);
  v144 = (*(uint64_t (**)(uint64_t, uint64_t))(v143 + 48))(v142, v143);
  v145 = 0;
  v146 = *(_QWORD *)(v144 + 16);
  v147 = v251;
  while (1)
  {
    if (v145 == v146)
    {
      v268(v147, 1, 1, v15);
      v149 = v146;
    }
    else
    {
      if (v145 >= *(_QWORD *)(v144 + 16))
        goto LABEL_112;
      v150 = type metadata accessor for CapturedRoom.Surface(0);
      v265 = v145 + 1;
      v151 = v144
           + ((*(unsigned __int8 *)(*(_QWORD *)(v150 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v150 - 8) + 80))
           + *(_QWORD *)(*(_QWORD *)(v150 - 8) + 72) * v145;
      v152 = v144;
      v153 = (uint64_t)&v261[*(int *)(v15 + 48)];
      sub_22643D704(v151, v153, type metadata accessor for CapturedRoom.Surface);
      v154 = (uint64_t)v147 + *(int *)(v15 + 48);
      *v147 = v145;
      v155 = v153;
      v144 = v152;
      sub_22643F6AC(v155, v154, type metadata accessor for CapturedRoom.Surface);
      v268(v147, 0, 1, v15);
      v149 = v265;
    }
    v156 = v250;
    sub_226446554((uint64_t)v147, (uint64_t)v250, &qword_2558432D8);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v53)(v156, 1, v15) == 1)
      break;
    v265 = v149;
    v157 = v146;
    v158 = v144;
    v159 = *v156;
    v160 = (uint64_t)v156 + *(int *)(v15 + 48);
    v161 = type metadata accessor for CapturedRoom.Surface(0);
    v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 16);
    v163 = v263;
    v162(v263, v160 + *(int *)(v161 + 44), v3);
    sub_22643D748(v160, type metadata accessor for CapturedRoom.Surface);
    v271 = v159;
    v272 = 0x676E696E65704FLL;
    v273 = 0xE700000000000000;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v165 = v272;
    v164 = v273;
    v166 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    v168 = sub_226534858(v163);
    v169 = v48[2];
    v170 = (v167 & 1) == 0;
    v171 = v169 + v170;
    if (__OFADD__(v169, v170))
      goto LABEL_105;
    v172 = v167;
    if (v48[3] >= v171)
    {
      if ((v166 & 1) == 0)
        sub_226549270();
    }
    else
    {
      sub_2265439A4(v171, v166);
      v173 = sub_226534858(v263);
      if ((v172 & 1) != (v174 & 1))
        goto LABEL_117;
      v168 = v173;
    }
    v144 = v158;
    v48 = (_QWORD *)v272;
    v146 = v157;
    if ((v172 & 1) != 0)
    {
      v148 = (uint64_t *)(*(_QWORD *)(v272 + 56) + 16 * v168);
      swift_bridgeObjectRelease();
      *v148 = v165;
      v148[1] = v164;
      v3 = v269;
    }
    else
    {
      *(_QWORD *)(v272 + 8 * (v168 >> 6) + 64) |= 1 << v168;
      v3 = v269;
      v162(v48[6] + *(_QWORD *)(v270 + 72) * v168, v263, v269);
      v175 = (uint64_t *)(v48[7] + 16 * v168);
      *v175 = v165;
      v175[1] = v164;
      v176 = v48[2];
      v73 = __OFADD__(v176, 1);
      v177 = v176 + 1;
      if (v73)
        goto LABEL_115;
      v48[2] = v177;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v263, v3);
    v53 = v266;
    v15 = v267;
    v147 = v251;
    v145 = v265;
  }
  swift_bridgeObjectRelease();
  v178 = v244[3];
  v179 = v244[4];
  __swift_project_boxed_opaque_existential_1(v244, v178);
  v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v179 + 64))(v178, v179);
  v181 = 0;
  v182 = *(_QWORD *)(v180 + 16);
  v183 = v249;
  while (1)
  {
    if (v181 == v182)
    {
      v268(v183, 1, 1, v15);
      v185 = v182;
    }
    else
    {
      if (v181 >= *(_QWORD *)(v180 + 16))
        goto LABEL_114;
      v186 = type metadata accessor for CapturedRoom.Surface(0);
      v265 = v181 + 1;
      v187 = v180
           + ((*(unsigned __int8 *)(*(_QWORD *)(v186 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v186 - 8) + 80))
           + *(_QWORD *)(*(_QWORD *)(v186 - 8) + 72) * v181;
      v188 = v180;
      v189 = (uint64_t)&v261[*(int *)(v15 + 48)];
      sub_22643D704(v187, v189, type metadata accessor for CapturedRoom.Surface);
      v190 = (uint64_t)v183 + *(int *)(v15 + 48);
      *v183 = v181;
      v191 = v189;
      v180 = v188;
      sub_22643F6AC(v191, v190, type metadata accessor for CapturedRoom.Surface);
      v268(v183, 0, 1, v15);
      v185 = v265;
    }
    v192 = v248;
    sub_226446554((uint64_t)v183, (uint64_t)v248, &qword_2558432D8);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v53)(v192, 1, v15) == 1)
      break;
    v265 = v185;
    v193 = v182;
    v194 = v180;
    v195 = *v192;
    v196 = (uint64_t)v192 + *(int *)(v15 + 48);
    v197 = type metadata accessor for CapturedRoom.Surface(0);
    v198 = *(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 16);
    v199 = v262;
    v198(v262, v196 + *(int *)(v197 + 44), v3);
    sub_22643D748(v196, type metadata accessor for CapturedRoom.Surface);
    v271 = v195;
    v272 = 0x726F6F6C46;
    v273 = 0xE500000000000000;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v201 = v272;
    v200 = v273;
    v202 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    v204 = sub_226534858(v199);
    v205 = v48[2];
    v206 = (v203 & 1) == 0;
    v207 = v205 + v206;
    if (__OFADD__(v205, v206))
      goto LABEL_106;
    v208 = v203;
    if (v48[3] >= v207)
    {
      if ((v202 & 1) == 0)
        sub_226549270();
    }
    else
    {
      sub_2265439A4(v207, v202);
      v209 = sub_226534858(v262);
      if ((v208 & 1) != (v210 & 1))
        goto LABEL_117;
      v204 = v209;
    }
    v180 = v194;
    v48 = (_QWORD *)v272;
    v182 = v193;
    if ((v208 & 1) != 0)
    {
      v184 = (uint64_t *)(*(_QWORD *)(v272 + 56) + 16 * v204);
      swift_bridgeObjectRelease();
      *v184 = v201;
      v184[1] = v200;
      v3 = v269;
    }
    else
    {
      *(_QWORD *)(v272 + 8 * (v204 >> 6) + 64) |= 1 << v204;
      v3 = v269;
      v198(v48[6] + *(_QWORD *)(v270 + 72) * v204, v262, v269);
      v211 = (uint64_t *)(v48[7] + 16 * v204);
      *v211 = v201;
      v211[1] = v200;
      v212 = v48[2];
      v73 = __OFADD__(v212, 1);
      v213 = v212 + 1;
      if (v73)
        goto LABEL_116;
      v48[2] = v213;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v262, v3);
    v53 = v266;
    v15 = v267;
    v183 = v249;
    v181 = v265;
  }
  swift_bridgeObjectRelease();
  v214 = v244[3];
  v215 = v244[4];
  __swift_project_boxed_opaque_existential_1(v244, v214);
  v216 = (*(uint64_t (**)(uint64_t, uint64_t))(v215 + 56))(v214, v215);
  v217 = *(_QWORD *)(v216 + 16);
  if (!v217)
    goto LABEL_101;
  v218 = *(unsigned __int8 *)(v243 + 80);
  v267 = v216;
  v219 = v216 + ((v218 + 32) & ~v218);
  v220 = *(_QWORD *)(v243 + 72);
  v221 = (void (*)(unint64_t *, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4B00];
  v222 = v247;
  v223 = v270;
  while (2)
  {
    sub_22643D704(v219, (uint64_t)v222, type metadata accessor for CapturedRoom.Object);
    v239 = *v222;
    if (v239 == 15)
    {
LABEL_94:
      sub_22643D748((uint64_t)v222, type metadata accessor for CapturedRoom.Object);
      v219 += v220;
      if (!--v217)
        goto LABEL_101;
      continue;
    }
    break;
  }
  if (!*((_QWORD *)v221 + 2) || (v240 = sub_226534A0C(*v222), (v241 & 1) == 0))
  {
    v224 = 0;
    v225 = 1;
    goto LABEL_93;
  }
  v224 = *(_QWORD *)(*((_QWORD *)v221 + 7) + 8 * v240);
  v225 = v224 + 1;
  if (!__OFADD__(v224, 1))
  {
LABEL_93:
    v226 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v221;
    sub_2265230B0(v225, v239, v226);
    v268 = (void (*)(unint64_t *, uint64_t, uint64_t, uint64_t))v272;
    swift_bridgeObjectRelease();
    v227 = v247;
    LOBYTE(v272) = *v247;
    v272 = sub_22655CDDC();
    v273 = v228;
    sub_22647D7C4();
    v229 = sub_22655D184();
    v231 = v230;
    swift_bridgeObjectRelease();
    v272 = v229;
    v273 = v231;
    v271 = v224;
    sub_22655D544();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    v232 = v272;
    v233 = v273;
    v234 = &v227[*(int *)(v246 + 32)];
    v235 = (uint64_t)v245;
    v236 = v269;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v223 + 16))(v245, v234, v269);
    v237 = swift_isUniquelyReferenced_nonNull_native();
    v272 = (uint64_t)v48;
    sub_2265231D8(v232, v233, v235, v237);
    v48 = (_QWORD *)v272;
    swift_bridgeObjectRelease();
    v238 = v235;
    v221 = v268;
    v222 = v247;
    (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v238, v236);
    goto LABEL_94;
  }
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v48;
}

void sub_22647CC28(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD v37[3];
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;

  v4 = v3;
  v45 = a3;
  v7 = sub_22655C140();
  v44 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v43 = (char *)v37 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843320);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (_QWORD *)((char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v37[1] = a1;
    v37[2] = v4;
    v41 = (char *)v15 + *(int *)(v12 + 48);
    v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v39 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain();
    v40 = v15;
    while (1)
    {
      v42 = v16;
      sub_22643D7A0(v17, (uint64_t)v15, &qword_255843320);
      v20 = *v15;
      v19 = v15[1];
      v21 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      v22 = v7;
      v21(v43, v41, v7);
      v23 = (_QWORD *)*v45;
      v25 = sub_2265348F0(v20, v19);
      v26 = v23[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        break;
      v29 = v24;
      if (v23[3] >= v28)
      {
        if ((a2 & 1) == 0)
          sub_2265498C8();
      }
      else
      {
        sub_2265442D0(v28, a2 & 1);
        v30 = sub_2265348F0(v20, v19);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_18;
        v25 = v30;
      }
      v32 = (_QWORD *)*v45;
      if ((v29 & 1) != 0)
      {
        v18 = v38;
        v7 = v22;
        v21(v38, v43, v22);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, char *, uint64_t))(v44 + 40))(v32[7] + *(_QWORD *)(v44 + 72) * v25, v18, v22);
      }
      else
      {
        v32[(v25 >> 6) + 8] |= 1 << v25;
        v33 = (uint64_t *)(v32[6] + 16 * v25);
        *v33 = v20;
        v33[1] = v19;
        v7 = v22;
        v21((char *)(v32[7] + *(_QWORD *)(v44 + 72) * v25), v43, v22);
        v34 = v32[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_17;
        v32[2] = v36;
      }
      v15 = v40;
      v17 += v39;
      a2 = 1;
      v16 = v42 - 1;
      if (v42 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    sub_22655D5A4();
    __break(1u);
  }
}

id sub_22647CEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = sub_22655BE28();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v50 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v50 - v9;
  v11 = sub_22655C05C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a1;
  sub_22655BFFC();
  v15 = sub_22655BFD8();
  v17 = v16;
  v51 = v12;
  v52 = v11;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v54 = v17;
  v55 = v15;
  v56 = v17;
  if (qword_25583F8D0 != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v2, (uint64_t)qword_25585AE68);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v19(v10, v18, v2);
  sub_22655BE10();
  v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v10, v2);
  sub_22647D7C4();
  v21 = sub_22655D16C();
  v20(v8, v2);
  v55 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558432C0);
  sub_22647F26C();
  sub_22655CCF8();
  swift_bridgeObjectRelease();
  if (qword_25583F8C8 != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v2, (uint64_t)qword_25585AE50);
  v23 = v53;
  v19(v53, v22, v2);
  swift_bridgeObjectRetain();
  v24 = sub_22647B718(1);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_bridgeObjectRelease();
  v55 = v24;
  v56 = v26;
  v57 = v28;
  v58 = v30;
  sub_22647F2B8();
  sub_22655D190();
  LOBYTE(v24) = v31;
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    v55 = 95;
    v56 = 0xE100000000000000;
    sub_22655CE24();
    swift_bridgeObjectRelease();
  }
  v20(v23, v2);
  swift_bridgeObjectRelease();
  v32 = (void *)objc_opt_self();
  v33 = v59;
  v34 = (void *)sub_22655BFE4();
  v35 = objc_msgSend(v32, sel_newSceneWithURL_, v34);

  if (v35)
  {
    v36 = (void *)sub_22655CD64();
    v37 = objc_allocWithZone(MEMORY[0x24BEBED08]);
    v38 = (void *)sub_22655CD64();
    swift_bridgeObjectRelease();
    v39 = objc_msgSend(v37, sel_initWithString_, v38);

    v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithToken_, v39);
    objc_msgSend(v35, sel_setMetadataWithKey_value_, v36, v40);

    v41 = (void *)sub_22655CD64();
    v42 = objc_allocWithZone(MEMORY[0x24BEBED08]);
    v43 = (void *)sub_22655CD64();
    v44 = objc_msgSend(v42, sel_initWithString_, v43);

    v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithToken_, v44);
    objc_msgSend(v35, sel_setMetadataWithKey_value_, v41, v45);

    v46 = (void *)sub_22655CD64();
    v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithDouble_, 1.0);
    objc_msgSend(v35, sel_setMetadataWithKey_value_, v46, v47);

  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v48, v33, v52);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v35;
}

void *sub_22647D430(uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, void *a6)
{
  id v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t *v24;
  uint64_t *v25;
  id v26;
  void *v27;
  id v28;
  id v29;

  sub_22643F548(0, &qword_2558432B8);
  v10 = objc_msgSend(a6, sel_rootNode);
  v11 = sub_22655D118();

  if ((v11 & 1) != 0
    || (v12 = objc_msgSend(a5, sel_path),
        v13 = objc_msgSend(v12, sel_stringValue),
        v12,
        !v13))
  {
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  else
  {
    v14 = sub_22655CD88();
    v16 = v15;

  }
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  v18 = v14;
  v17 = v16;
  v19 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  swift_bridgeObjectRetain();
  v20 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v19, sel_initWithString_, v20);

  if (v21)
  {
    v22 = objc_msgSend(a6, sel_newNodeAtPath_type_, v21, a3);
    if (v22)
    {
      a3 = v22;
      swift_bridgeObjectRelease();
      if (a4 != 3)
      {
        v23 = (void *)sub_22655CD64();
        v26 = objc_allocWithZone(MEMORY[0x24BEBED08]);
        v27 = (void *)sub_22655CD64();
        swift_bridgeObjectRelease();
        v28 = objc_msgSend(v26, sel_initWithString_, v27);

        v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBECD8]), sel_initWithToken_, v28);
        objc_msgSend(a3, sel_setMetadataWithKey_value_, v23, v29);

      }
    }
    else
    {
      type metadata accessor for USDModel.Error();
      sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
      swift_allocError();
      *v25 = v18;
      v25[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

    }
  }
  else
  {
    type metadata accessor for USDModel.Error();
    sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
    swift_allocError();
    *v24 = v18;
    v24[1] = v17;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return a3;
}

unint64_t sub_22647D7C4()
{
  unint64_t result;

  result = qword_2558432A0;
  if (!qword_2558432A0)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2558432A0);
  }
  return result;
}

void sub_22647D808(uint64_t a1, id a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  float32x2_t v7;
  char v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  float v15;
  float v16;
  void *v17;
  id v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float64x2_t v23;
  float64x2_t v24;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  __int128 v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  _OWORD v46[8];

  v37 = *(_OWORD *)(a1 + 16);
  v7 = *(float32x2_t *)(a1 + 128);
  v8 = *(_BYTE *)(a1 + 144);
  v9 = objc_msgSend(a2, sel_name);
  v10 = objc_msgSend(v9, sel_stringValue);

  if (v10)
  {
    v11 = sub_22655CD88();
    v13 = v12;

  }
  else
  {
    v13 = 0xE700000000000000;
    v11 = 0x6E6F6974636573;
  }
  *(_QWORD *)&v46[0] = v11;
  *((_QWORD *)&v46[0] + 1) = v13;
  sub_22655CE24();
  v14 = sub_22647D430(v11, v13, (void *)*MEMORY[0x24BEBEE28], 0, a2, a4);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    v15 = vmuls_lane_f32(0.5, v7, 1);
    if ((v8 & 1) != 0)
      v16 = 1.5;
    else
      v16 = v15;
    v17 = (void *)sub_22655CD64();
    v18 = objc_msgSend(v14, sel_newPropertyWithName_type_role_, v17, *MEMORY[0x24BEBED30], 0);

    if (v18)
    {
      v19 = v16 * 0.0;
      v20 = *(float *)&v37 + (float)(v16 * 0.0);
      v21 = *((float *)&v37 + 1) + v16;
      v22 = *((float *)&v37 + 2) + v19;
      __invert_d4();
      v23 = vmulq_f64(v38, (float64x2_t)0);
      v24 = vmulq_f64(v39, (float64x2_t)0);
      __asm { FMOV            V25.2D, #-1.0 }
      v46[0] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v38, (float64x2_t)0, v40), (float64x2_t)0, v42), (float64x2_t)0, v44);
      v46[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v39, (float64x2_t)0, v41), (float64x2_t)0, v43), (float64x2_t)0, v45);
      v46[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v23, (float64x2_t)0, v40), _Q25, v42), (float64x2_t)0, v44);
      v46[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v24, (float64x2_t)0, v41), _Q25, v43), (float64x2_t)0, v45);
      v46[4] = vmlaq_f64(vmlaq_f64(vaddq_f64(v40, v23), (float64x2_t)0, v42), (float64x2_t)0, v44);
      v46[5] = vmlaq_f64(vmlaq_f64(vaddq_f64(v41, v24), (float64x2_t)0, v43), (float64x2_t)0, v45);
      v46[6] = vaddq_f64(v44, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, v20), v40, v21), v42, v22));
      v46[7] = vaddq_f64(v45, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v20), v41, v21), v43, v22));
      objc_msgSend(v18, sel_setDouble4x4Value_, v46);
      v30 = (void *)sub_22655CD64();
      v31 = objc_msgSend(v14, sel_newPropertyWithName_type_role_, v30, *MEMORY[0x24BEBEDB8], 0);

      if (v31)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
        v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_22655FA20;
        v33 = objc_allocWithZone(MEMORY[0x24BEBED08]);
        v34 = (void *)sub_22655CD64();
        v35 = objc_msgSend(v33, sel_initWithString_, v34);

        *(_QWORD *)(v32 + 32) = v35;
        *(_QWORD *)&v46[0] = v32;
        sub_22655CEE4();
        sub_22643F548(0, &qword_2558432A8);
        v36 = (void *)sub_22655CEC0();
        swift_bridgeObjectRelease();
        objc_msgSend(v31, sel_setTokenArray_, v36);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_22647DC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t i;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = *(_OWORD *)(v2 + 144);
    v74 = *(_OWORD *)(v2 + 128);
    v75 = v3;
    v76 = *(_OWORD *)(v2 + 160);
    v77 = *(_BYTE *)(v2 + 176);
    v4 = *(_OWORD *)(v2 + 80);
    v70 = *(_OWORD *)(v2 + 64);
    v71 = v4;
    v5 = *(_OWORD *)(v2 + 112);
    v72 = *(_OWORD *)(v2 + 96);
    v73 = v5;
    v6 = *(_OWORD *)(v2 + 48);
    v67 = v2;
    v7 = v1 - 1;
    v8 = 192;
    v68 = *(_OWORD *)(v2 + 32);
    v69 = v6;
    v9 = MEMORY[0x24BEE4B00];
    while (1)
    {
      v10 = v68;
      v11 = *(_QWORD *)(v9 + 16);
      sub_22647F468((uint64_t)&v68);
      if (v11)
      {
        sub_226534BC4(v10);
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if ((v14 & 1) != 0)
        {
          v13 = *(_QWORD **)(*(_QWORD *)(v9 + 56) + 8 * v12);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      sub_22647F468((uint64_t)&v68);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_226488410(0, v13[2] + 1, 1, v13);
      v16 = v13[2];
      v15 = v13[3];
      if (v16 >= v15 >> 1)
        v13 = sub_226488410((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
      v13[2] = v16 + 1;
      v17 = &v13[20 * v16];
      v18 = v69;
      *((_OWORD *)v17 + 2) = v68;
      *((_OWORD *)v17 + 3) = v18;
      v19 = v70;
      v20 = v71;
      v21 = v73;
      *((_OWORD *)v17 + 6) = v72;
      *((_OWORD *)v17 + 7) = v21;
      *((_OWORD *)v17 + 4) = v19;
      *((_OWORD *)v17 + 5) = v20;
      v22 = v74;
      v23 = v75;
      v24 = v76;
      *((_BYTE *)v17 + 176) = v77;
      *((_OWORD *)v17 + 9) = v23;
      *((_OWORD *)v17 + 10) = v24;
      *((_OWORD *)v17 + 8) = v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_226534BC4(v10);
      v28 = v27;
      v29 = *(_QWORD *)(v9 + 16);
      v30 = (v26 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        JUMPOUT(0x22647E564);
      }
      v32 = v26;
      if (*(_QWORD *)(v9 + 24) >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v26 & 1) != 0)
            goto LABEL_19;
        }
        else
        {
          sub_2265494E0();
          if ((v32 & 1) != 0)
            goto LABEL_19;
        }
      }
      else
      {
        sub_226543D50(v31, isUniquelyReferenced_nonNull_native);
        sub_226534BC4(v10);
        if ((v32 & 1) != (v34 & 1))
        {
          sub_22655D5A4();
          __break(1u);
          JUMPOUT(0x22647E57CLL);
        }
        v28 = v33;
        if ((v32 & 1) != 0)
        {
LABEL_19:
          v38 = *(_QWORD *)(v9 + 56);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v38 + 8 * v28) = v13;
          goto LABEL_20;
        }
      }
      *(_QWORD *)(v9 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      *(_BYTE *)(*(_QWORD *)(v9 + 48) + v28) = v10;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v28) = v13;
      v35 = *(_QWORD *)(v9 + 16);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_51;
      *(_QWORD *)(v9 + 16) = v37;
LABEL_20:
      swift_bridgeObjectRelease();
      sub_22647F490((uint64_t)&v68);
      if (!v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      v39 = *(_OWORD *)(v67 + v8 + 112);
      v74 = *(_OWORD *)(v67 + v8 + 96);
      v75 = v39;
      v76 = *(_OWORD *)(v67 + v8 + 128);
      v77 = *(_BYTE *)(v67 + v8 + 144);
      v40 = *(_OWORD *)(v67 + v8 + 48);
      v70 = *(_OWORD *)(v67 + v8 + 32);
      v71 = v40;
      v41 = *(_OWORD *)(v67 + v8 + 80);
      v72 = *(_OWORD *)(v67 + v8 + 64);
      v73 = v41;
      v42 = *(_OWORD *)(v67 + v8);
      v43 = *(_OWORD *)(v67 + v8 + 16);
      v8 += 160;
      --v7;
      v68 = v42;
      v69 = v43;
    }
  }
  v9 = MEMORY[0x24BEE4B00];
LABEL_26:
  v62 = v9 + 64;
  v44 = 1 << *(_BYTE *)(v9 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & *(_QWORD *)(v9 + 64);
  v63 = (unint64_t)(v44 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v65)
  {
    if (v46)
    {
      v64 = (v46 - 1) & v46;
      v65 = i;
      v48 = __clz(__rbit64(v46)) | (i << 6);
      goto LABEL_43;
    }
    v36 = __OFADD__(i, 1);
    v49 = i + 1;
    if (v36)
      goto LABEL_52;
    if (v49 >= v63)
      break;
    v50 = *(_QWORD *)(v62 + 8 * v49);
    if (!v50)
    {
      v51 = v49 + 1;
      if (v49 + 1 >= v63)
        break;
      v50 = *(_QWORD *)(v62 + 8 * v51);
      if (!v50)
      {
        v51 = v49 + 2;
        if (v49 + 2 >= v63)
          break;
        v50 = *(_QWORD *)(v62 + 8 * v51);
        if (!v50)
        {
          v51 = v49 + 3;
          if (v49 + 3 >= v63)
            break;
          v50 = *(_QWORD *)(v62 + 8 * v51);
          if (!v50)
          {
            while (1)
            {
              v49 = v51 + 1;
              if (__OFADD__(v51, 1))
                goto LABEL_53;
              if (v49 >= v63)
                goto LABEL_49;
              v50 = *(_QWORD *)(v62 + 8 * v49);
              ++v51;
              if (v50)
                goto LABEL_42;
            }
          }
        }
      }
      v49 = v51;
    }
LABEL_42:
    v64 = (v50 - 1) & v50;
    v65 = v49;
    v48 = __clz(__rbit64(v50)) + (v49 << 6);
LABEL_43:
    v66 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v48);
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v48) + 16);
    v53 = swift_bridgeObjectRetain();
    if (v52)
    {
      v54 = *(_OWORD *)(v53 + 48);
      v68 = *(_OWORD *)(v53 + 32);
      v69 = v54;
      v55 = *(_OWORD *)(v53 + 64);
      v56 = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v72 = *(_OWORD *)(v53 + 96);
      v73 = v57;
      v70 = v55;
      v71 = v56;
      v58 = *(_OWORD *)(v53 + 128);
      v59 = *(_OWORD *)(v53 + 144);
      v60 = *(_OWORD *)(v53 + 160);
      v77 = *(_BYTE *)(v53 + 176);
      v75 = v59;
      v76 = v60;
      v74 = v58;
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
    v46 = v64;
  }
LABEL_49:
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_22647E594(void *a1, _QWORD *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  void *v14;
  id v15;
  int64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  int64_t v27;
  void *v28;
  id v29;
  _QWORD *v30;
  int64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v45;
  _OWORD v46[9];

  v8 = (void *)sub_22655CD64();
  v9 = *MEMORY[0x24BEBED80];
  v10 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v8, *MEMORY[0x24BEBED80], 0);

  if (!v10)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v11 = a2[4];
  v12 = sub_226514488(3u, *(_QWORD *)(v11 + 16) / 3uLL);
  v13 = *(_QWORD *)(v12 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = (uint64_t)sub_22648852C(0, v13, 0, (char *)v12);
  v40 = v10;
  objc_msgSend(v10, sel_setIntArray_count_, v12 + 32, v13);
  v14 = (void *)sub_22655CD64();
  v15 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v14, v9, 0);

  v45 = v15;
  if (!v15)
    goto LABEL_25;
  v16 = *(_QWORD *)(v11 + 16);
  v17 = (char *)MEMORY[0x24BEE4AF8];
  if (v16)
  {
    *(_QWORD *)&v46[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2264C7AF0(0, v16, 0);
    v18 = 0;
    v17 = *(char **)&v46[0];
    while (1)
    {
      v19 = *(_DWORD *)(v11 + 4 * v18 + 32);
      if (v19 < 0)
        break;
      *(_QWORD *)&v46[0] = v17;
      v21 = *((_QWORD *)v17 + 2);
      v20 = *((_QWORD *)v17 + 3);
      if (v21 >= v20 >> 1)
      {
        sub_2264C7AF0(v20 > 1, v21 + 1, 1);
        v17 = *(char **)&v46[0];
      }
      ++v18;
      *((_QWORD *)v17 + 2) = v21 + 1;
      *(_DWORD *)&v17[4 * v21 + 32] = v19;
      if (v16 == v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_12:
  v22 = *((_QWORD *)v17 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = sub_22648852C(0, v22, 0, v17);
  objc_msgSend(v45, sel_setIntArray_count_, v17 + 32, v22);
  v23 = (void *)sub_22655CD64();
  v24 = *MEMORY[0x24BEBED58];
  v25 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v23, *MEMORY[0x24BEBED58], 0);

  if (!v25)
    goto LABEL_26;
  v26 = (_QWORD *)a2[2];
  v27 = v26[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = sub_226486AE0(0, v27, 0, v26);
  objc_msgSend(v25, sel_setFloat3Array_count_, v26 + 4, v27);
  v28 = (void *)sub_22655CD64();
  v29 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v28, v24, 0);

  if (!v29)
    goto LABEL_27;
  v30 = (_QWORD *)a2[3];
  v31 = v30[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = sub_226486AE0(0, v31, 0, v30);
  objc_msgSend(v29, sel_setFloat3Array_count_, v30 + 4, v31, v25);
  v32 = (void *)sub_22655CD64();
  v33 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v32, *MEMORY[0x24BEBEDB0], 0);

  if (!v33)
    goto LABEL_28;
  v34 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v35 = (void *)sub_22655CD64();
  v36 = objc_msgSend(v34, sel_initWithString_, v35);

  objc_msgSend(v33, sel_setTokenValue_, v36);
  v37 = (void *)sub_22655CD64();
  v38 = objc_msgSend(a1, (SEL)&selRef_initWithDevice_ + 5, v37, *MEMORY[0x24BEBED30], 0);

  if (v38)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46[0] = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
    v46[1] = vcvt_hight_f64_f32(a3);
    v46[2] = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
    v46[3] = vcvt_hight_f64_f32(a4);
    v46[4] = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
    v46[5] = vcvt_hight_f64_f32(a5);
    v46[6] = vcvtq_f64_f32(*(float32x2_t *)a6.f32);
    v46[7] = vcvt_hight_f64_f32(a6);
    objc_msgSend(v38, sel_setDouble4x4Value_, v46);

    return;
  }
LABEL_29:
  __break(1u);
}

void sub_22647EA84(void *a1, double a2, float a3, uint64_t a4, uint64_t a5, void *a6)
{
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  double v46;
  void *v47;
  id v48;
  double v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v54;
  id v56;

  v8 = (void *)sub_22655CD64();
  v9 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v8, *MEMORY[0x24BEBED88], 0);

  if (!v9)
  {
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  sub_22655CE24();
  sub_22655CE24();
  sub_22655CE24();
  v10 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v11 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_initWithString_, v11);

  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v9, sel_setObjectPath_, v12);

  sub_22655CE24();
  sub_22655CE24();
  sub_22655CE24();
  v13 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v14 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithString_, v14);

  if (!v15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v52 = v9;
  v16 = *MEMORY[0x24BEBEDC0];
  v17 = objc_msgSend(a6, sel_newNodeAtPath_type_specifier_, v15, *MEMORY[0x24BEBEDF0], *MEMORY[0x24BEBEDC0]);

  if (!v17)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v18 = (void *)sub_22655CD64();
  v51 = v17;
  v54 = *MEMORY[0x24BEBEDB0];
  v19 = objc_msgSend(v17, sel_newPropertyWithName_type_role_, v18);

  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_22655FA20;
  v21 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v22 = (void *)sub_22655CD64();
  v23 = objc_msgSend(v21, sel_initWithString_, v22);

  if (!v23)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(v20 + 32) = v23;
  sub_22655CEE4();
  if (v19)
  {
    sub_22643F548(0, &qword_2558432B0);
    v24 = v19;
    v25 = (void *)sub_22655CEC0();
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_setConnectionWithTargetPaths_, v25);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_22655D2EC();
  swift_bridgeObjectRelease();
  sub_22655CE24();
  sub_22655CE24();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  sub_22655CE24();
  v26 = objc_allocWithZone(MEMORY[0x24BEBECE8]);
  v27 = (void *)sub_22655CD64();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithString_, v27);

  if (!v28)
    goto LABEL_23;
  v29 = objc_msgSend(a6, sel_newNodeAtPath_type_specifier_, v28, *MEMORY[0x24BEBEE00], v16);

  if (!v29)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v30 = (void *)sub_22655CD64();
  v31 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v30, v54, 0);

  if (!v31)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v32 = objc_allocWithZone(MEMORY[0x24BEBED08]);
  v33 = (void *)sub_22655CD64();
  v34 = objc_msgSend(v32, sel_initWithString_, v33);

  objc_msgSend(v31, sel_setTokenValue_, v34);
  v35 = (void *)sub_22655CD64();
  v36 = *MEMORY[0x24BEBED50];
  v37 = *MEMORY[0x24BEBEE38];
  v38 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v35, *MEMORY[0x24BEBED50], *MEMORY[0x24BEBEE38]);

  if (!v38)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v38, sel_setFloat3Value_, a2);
  v39 = (void *)sub_22655CD64();
  v40 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v39, v36, v37);

  if (!v40)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v40, sel_setFloat3Value_, 0.0);
  v41 = (void *)sub_22655CD64();
  v42 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v41, v36, *MEMORY[0x24BEBEE48]);

  if (!v42)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v42, sel_setFloat3Value_, 0.00781250185);
  v43 = (void *)sub_22655CD64();
  v44 = *MEMORY[0x24BEBED40];
  v45 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v43, *MEMORY[0x24BEBED40], 0);

  if (!v45)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  LODWORD(v46) = 1.0;
  objc_msgSend(v45, sel_setFloatValue_, v46);
  v47 = (void *)sub_22655CD64();
  v48 = objc_msgSend(v29, (SEL)&selRef_initWithDevice_ + 5, v47, v44, 0);

  if (v48)
  {
    *(float *)&v49 = a3;
    objc_msgSend(v48, sel_setFloatValue_, v49);
    v56 = (id)sub_22655CD64();
    v50 = objc_msgSend(v29, (SEL)&selRef_initWithDevice_ + 5, v56, v54, 0);

    return;
  }
LABEL_30:
  __break(1u);
}

unint64_t sub_22647F26C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2558432C8;
  if (!qword_2558432C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2558432C0);
    result = MEMORY[0x22769A794](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2558432C8);
  }
  return result;
}

unint64_t sub_22647F2B8()
{
  unint64_t result;

  result = qword_2558432D0;
  if (!qword_2558432D0)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_2558432D0);
  }
  return result;
}

uint64_t sub_22647F2FC@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2264774BC(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_22647F314(float32x4_t *a1@<X0>, _QWORD *a2@<X8>)
{
  float32x4_t *v2;

  sub_226476648(a1, v2[5].i64[0], a2, v2[1], v2[2], v2[3], v2[4]);
}

uint64_t sub_22647F338@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  return sub_22647F34C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_22647F34C@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  float32x4_t *v9;
  uint64_t result;

  result = sub_22655A9B4(a1[2], a1[3], a1[4], a1[5], a1[1], v9[1], v9[2], v9[3], (uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, v9[4], *(float32x2_t *)(v9[5].i64[0] + 16));
  *a9 = result;
  return result;
}

uint64_t sub_22647F3A0(uint64_t a1)
{
  uint64_t v1;

  return sub_226475394(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_22647F3BC()
{
  type metadata accessor for CapturedRoom.Object(0);
  return sub_22655C104() & 1;
}

uint64_t sub_22647F408(uint64_t a1)
{
  uint64_t v1;

  return sub_226474D54(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_22647F424(uint64_t a1)
{
  uint64_t v1;

  return sub_226475074(a1, *(_QWORD *)(v1 + 16)) & 1;
}

float32x4_t sub_22647F440@<Q0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v2;
  float32x4_t result;

  result = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 16) + 80), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 16) + 32), COERCE_FLOAT(*(_OWORD *)a1->f32)), *(float32x4_t *)(*(_QWORD *)(v2 + 16) + 48), *a1, 1), *(float32x4_t *)(*(_QWORD *)(v2 + 16) + 64), *(float32x4_t *)a1->f32, 2));
  *a2 = result;
  return result;
}

uint64_t sub_22647F468(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22647F490(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_22647F4B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_255843310;
  if (!qword_255843310)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_255843308);
    v2 = sub_226437F28(&qword_255843318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x22769A794](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_255843310);
  }
  return result;
}

uint64_t sub_22647F53C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_22647F58C + 4 * byte_226560AB9[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_22647F748(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      v3 = sub_22655C05C();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 7:
    case 8:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void sub_22647F7C0()
{
  char *v0;

  v0 = (char *)sub_22647F804 + 4 * byte_226560ACB[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_22647F804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_22655C05C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_22647F9A0(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_22643D748(result, (uint64_t (*)(_QWORD))type metadata accessor for USDModel.Error);
    v2 = (char *)&loc_22647F9FC + 4 * byte_226560AD4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *sub_22647FBA8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      v6 = sub_22655C05C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_22647FD70(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_22643D748((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for USDModel.Error);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        v6 = sub_22655C05C();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_22647FF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_22647FF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_22647FF6C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_22647FF7C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22655C05C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_22647FFF8()
{
  return sub_226437F28(&qword_255843298, (uint64_t (*)(uint64_t))type metadata accessor for USDModel.Error, (uint64_t)&unk_226560B80);
}

uint64_t sub_226480024(uint64_t a1)
{
  return sub_22647F408(a1) & 1;
}

uint64_t sub_22648003C()
{
  double *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  float v25;
  float32x2_t *v26;
  double v27;
  float32x2_t *v28;
  uint64_t v29;
  uint64_t v30;

  result = swift_beginAccess();
  v2 = *((_QWORD *)v0 + 6);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return MEMORY[0x24BEE4AF8];
  v4 = v2 + 64;
  v5 = *(_BYTE *)(v2 + 32);
  v6 = 1 << v5;
  v7 = -1;
  if (1 << v5 < 64)
    v7 = ~(-1 << (1 << v5));
  v8 = v7 & *(_QWORD *)(v2 + 64);
  if (v8)
  {
    v9 = 0;
    v10 = __clz(__rbit64(v8));
    v11 = (v8 - 1) & v8;
  }
  else
  {
    v12 = v5 & 0x3F;
    if (v12 < 7)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v13 = *(_QWORD *)(v2 + 72);
    if (v13)
    {
      v9 = 1;
    }
    else
    {
      if (v12 < 8)
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v13 = *(_QWORD *)(v2 + 80);
      if (v13)
      {
        v9 = 2;
      }
      else
      {
        v13 = *(_QWORD *)(v2 + 88);
        if (!v13)
        {
          v14 = 0;
          v15 = (unint64_t)(v6 + 63) >> 6;
          if (v15 <= 4)
            v15 = 4;
          v16 = v15 - 4;
          while (v16 != v14)
          {
            v13 = *(_QWORD *)(v2 + 96 + 8 * v14++);
            if (v13)
            {
              v9 = v14 + 3;
              goto LABEL_21;
            }
          }
          __break(1u);
          goto LABEL_40;
        }
        v9 = 3;
      }
    }
LABEL_21:
    v11 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v9 << 6);
  }
  v17 = *(_QWORD *)(v2 + 56);
  v18 = *(double *)(v17 + 8 * v10);
  if (v11)
  {
    v19 = __clz(__rbit64(v11)) | (v9 << 6);
LABEL_34:
    v23 = *(double *)(v17 + 8 * v19);
    v24 = v0[2];
    v25 = _simd_orient_vf2((simd_float2)vsub_f32(*(float32x2_t *)&v23, *(float32x2_t *)&v18), (simd_float2)vsub_f32(*(float32x2_t *)&v24, *(float32x2_t *)&v18));
    type metadata accessor for CDTTriangle();
    swift_allocObject();
    swift_bridgeObjectRetain();
    if (v25 >= 0.0)
    {
      v26 = sub_22650EA18(v18, v23, v24, 0.001);
      v27 = v23;
      v23 = v0[3];
    }
    else
    {
      v26 = sub_22650EA18(v18, v24, v23, 0.001);
      v27 = v0[3];
    }
    swift_allocObject();
    v28 = sub_22650EA18(v18, v23, v27, 0.001);
    __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_226560BD0;
    *(_QWORD *)(v29 + 32) = v26;
    *(_QWORD *)(v29 + 40) = v28;
    v30 = v29;
    sub_22655CEE4();
    v3 = v30;
    swift_bridgeObjectRelease();
    return v3;
  }
  v20 = (unint64_t)(v6 + 63) >> 6;
  v21 = v9 + 1;
  if (v9 + 1 >= v20)
    goto LABEL_42;
  v22 = *(_QWORD *)(v4 + 8 * v21);
  if (v22)
    goto LABEL_33;
  v21 = v9 + 2;
  if (v9 + 2 >= v20)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v22 = *(_QWORD *)(v4 + 8 * v21);
  if (v22)
  {
LABEL_33:
    v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_34;
  }
  v21 = v9 + 3;
  if (v9 + 3 < v20)
  {
    v22 = *(_QWORD *)(v4 + 8 * v21);
    if (!v22)
    {
      while (v20 - 4 != v9)
      {
        v22 = *(_QWORD *)(v2 + 96 + 8 * v9++);
        if (v22)
        {
          v21 = v9 + 3;
          goto LABEL_33;
        }
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    goto LABEL_33;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_226480328()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTTriangleEdge()
{
  return objc_opt_self();
}

uint64_t sub_226480374(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_49;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    v4 = 0;
    v5 = (uint64_t *)(v1 + 16);
    v35 = v2;
    v36 = v2 & 0xC000000000000001;
    v32 = v2 + 32;
    v33 = v2 & 0xFFFFFFFFFFFFFF8;
    v34 = v3;
    while (1)
    {
      if (v36)
      {
        v6 = MEMORY[0x2276999E4](v4, v2);
        v7 = __OFADD__(v4++, 1);
        if (v7)
          goto LABEL_47;
      }
      else
      {
        if (v4 >= *(_QWORD *)(v33 + 16))
          goto LABEL_48;
        v6 = *(_QWORD *)(v32 + 8 * v4);
        swift_retain();
        v7 = __OFADD__(v4++, 1);
        if (v7)
          goto LABEL_47;
      }
      v8 = *(_QWORD *)(v6 + 32);
      v39 = v8;
      if (v8 >> 62)
        break;
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9)
        goto LABEL_14;
LABEL_43:
      swift_release();
LABEL_5:
      swift_bridgeObjectRelease();
      if (v4 == v3)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v9 = sub_22655D400();
    if (!v9)
      goto LABEL_43;
LABEL_14:
    v37 = v4;
    v10 = v39;
    v11 = v39 & 0xC000000000000001;
    swift_beginAccess();
    v12 = 0;
    v38 = v9;
    while (1)
    {
      if (v11)
      {
        v13 = MEMORY[0x2276999E4](v12, v10);
        v7 = __OFADD__(v12++, 1);
        if (v7)
          goto LABEL_45;
      }
      else
      {
        if (v12 >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_46;
        v13 = *(_QWORD *)(v39 + 32 + 8 * v12);
        swift_retain();
        v7 = __OFADD__(v12++, 1);
        if (v7)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          swift_bridgeObjectRetain();
          v3 = sub_22655D400();
          if (!v3)
            return swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      sub_22655D640();
      v2 = *(_QWORD *)(v13 + 40);
      sub_22655D64C();
      v14 = *(_QWORD *)(v2 + 16);
      if (v14)
      {
        v2 += 32;
        do
        {
          v2 += 8;
          sub_22655D664();
          sub_22655D664();
          --v14;
        }
        while (v14);
      }
      v15 = sub_22655D670();
      v1 = *v5;
      if (*(_QWORD *)(*v5 + 16))
      {
        v16 = sub_226534A10(v15);
        if ((v17 & 1) != 0)
        {
          v18 = v11;
          v19 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v16);
          v2 = v19 + 48;
          swift_beginAccess();
          v1 = *(_QWORD *)(v19 + 48);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          v20 = sub_226534A40(v6);
          v22 = v21;
          swift_bridgeObjectRelease();
          if ((v22 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v1 = *(_QWORD *)v2;
            v40 = *(_QWORD *)v2;
            *(_QWORD *)v2 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_226547FD8();
              v1 = v40;
            }
            swift_release();
            sub_226546590(v20, v1);
            *(_QWORD *)v2 = v1;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          if (*(_QWORD *)(*(_QWORD *)v2 + 16))
          {
            swift_release();
            v10 = v39;
            v11 = v18;
          }
          else
          {
            sub_22655D640();
            v24 = *(_QWORD *)(v19 + 40);
            sub_22655D64C();
            v25 = *(_QWORD *)(v24 + 16);
            v10 = v39;
            if (v25)
            {
              v26 = v24 + 32;
              do
              {
                v26 += 8;
                sub_22655D664();
                sub_22655D664();
                --v25;
              }
              while (v25);
            }
            v2 = sub_22655D670();
            swift_beginAccess();
            v1 = *v5;
            v27 = sub_226534A10(v2);
            v11 = v18;
            if ((v28 & 1) != 0)
            {
              v29 = v27;
              v30 = swift_isUniquelyReferenced_nonNull_native();
              v1 = *v5;
              v41 = *v5;
              *v5 = 0x8000000000000000;
              if ((v30 & 1) == 0)
              {
                sub_22654817C();
                v1 = v41;
              }
              sub_2265467D8(v29, v1);
              v2 = *v5;
              *v5 = v1;
              swift_release();
              swift_bridgeObjectRelease();
              v11 = v18;
            }
            swift_endAccess();
            swift_release();
          }
          v9 = v38;
        }
      }
      swift_release();
      if (v12 == v9)
      {
        swift_release();
        v3 = v34;
        v2 = v35;
        v4 = v37;
        goto LABEL_5;
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_22648080C(unint64_t a1)
{
  unint64_t v1;
  float32x2_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  float32x2_t *v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  float32x2_t *v24;
  float32x2_t *v25;
  char v26;
  char v27;
  float32x2_t *v28;
  float32x2_t v29;
  float32x2_t *v30;
  float32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  char v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t v39;
  float32x2_t *v40;
  float32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  float32x2_t v64;
  uint64_t v65;
  _QWORD *v66;
  char v67[72];
  uint64_t v68;

  v2 = (float32x2_t)a1;
  v68 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_72;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_73:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
LABEL_3:
  v4 = 0;
  v5 = (_QWORD *)(v1 + 16);
  v57 = v2;
  v58 = *(_QWORD *)&v2 & 0xC000000000000001;
  v54 = *(_QWORD *)&v2 + 32;
  v55 = *(_QWORD *)&v2 & 0xFFFFFFFFFFFFFF8;
  v56 = v3;
  while (1)
  {
    if (v58)
    {
      v6 = MEMORY[0x2276999E4](v4, *(_QWORD *)&v2);
      v7 = __OFADD__(v4++, 1);
      if (v7)
        goto LABEL_69;
    }
    else
    {
      if (v4 >= *(_QWORD *)(v55 + 16))
        goto LABEL_71;
      v6 = *(_QWORD *)(v54 + 8 * v4);
      swift_retain();
      v7 = __OFADD__(v4++, 1);
      if (v7)
      {
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        swift_bridgeObjectRetain();
        v3 = sub_22655D400();
        if (!v3)
          goto LABEL_73;
        goto LABEL_3;
      }
    }
    v1 = *(_QWORD *)(v6 + 32);
    if (v1 >> 62)
      break;
    v8 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_14;
LABEL_65:
    swift_release();
LABEL_5:
    swift_bridgeObjectRelease();
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      return v68;
    }
  }
  swift_bridgeObjectRetain_n();
  v8 = sub_22655D400();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_65;
LABEL_14:
  v59 = v4;
  v63 = v1 & 0xC000000000000001;
  swift_beginAccess();
  v9 = 0;
  v61 = v1 & 0xFFFFFFFFFFFFFF8;
  v62 = (_QWORD *)v1;
  v60 = (_QWORD *)(v1 + 32);
  v10 = MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v63)
    {
      v11 = (double *)MEMORY[0x2276999E4](v9, v62);
      v7 = __OFADD__(v9++, 1);
      if (v7)
        goto LABEL_67;
    }
    else
    {
      if (v9 >= *(_QWORD *)(v61 + 16))
        goto LABEL_68;
      v11 = (double *)v60[v9];
      swift_retain();
      v7 = __OFADD__(v9++, 1);
      if (v7)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
    sub_22655D640();
    v12 = *((_QWORD *)v11 + 5);
    sub_22655D64C();
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = v12 + 32;
      do
      {
        v14 += 8;
        sub_22655D664();
        sub_22655D664();
        --v13;
      }
      while (v13);
    }
    v15 = sub_22655D670();
    v16 = *v5;
    if (!*(_QWORD *)(*v5 + 16) || (v17 = sub_226534A10(v15), (v18 & 1) == 0))
    {
      v22 = v11[2];
      v23 = v11[3];
      type metadata accessor for CDTTriangleEdge();
      *(_QWORD *)(swift_allocObject() + 48) = v10;
      v24 = (float32x2_t *)sub_226495C8C(v22, v23);
      v25 = v24 + 6;
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)&v24[6] + 16)
        || (swift_retain(),
            swift_bridgeObjectRetain(),
            sub_226534A40(v6),
            v27 = v26,
            swift_release(),
            swift_bridgeObjectRelease(),
            (v27 & 1) == 0)
        && *(_QWORD *)(*(_QWORD *)v25 + 16) <= 1uLL)
      {
        v28 = *(float32x2_t **)(v6 + 16);
        v29 = v28[2];
        if (v29)
        {
          v30 = v28 + 4;
          while (1)
          {
            v31 = *v30;
            v32 = vceq_f32(*v30, v24[2]);
            if ((v32.i8[0] & 1) == 0 || (v32.i8[4] & 1) == 0)
            {
              v33 = vceq_f32(v31, v24[3]);
              if ((v33.i8[0] & 1) == 0 || (v33.i8[4] & 1) == 0)
                break;
            }
            ++v30;
            if (!--*(_QWORD *)&v29)
              goto LABEL_45;
          }
          swift_beginAccess();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v64 = *v25;
          *v25 = (float32x2_t)0x8000000000000000;
          sub_2265228C8(v6, isUniquelyReferenced_nonNull_native, *(double *)&v31);
          *v25 = v64;
          swift_release();
          swift_bridgeObjectRelease();
          swift_endAccess();
        }
      }
LABEL_45:
      sub_22655D640();
      sub_22649684C((uint64_t)v67, *((_QWORD *)v11 + 5));
      v35 = sub_22655D670();
      swift_beginAccess();
      swift_retain();
      v36 = swift_isUniquelyReferenced_nonNull_native();
      v65 = *v5;
      *v5 = 0x8000000000000000;
      sub_226522A08((uint64_t)v24, v35, v36);
      *v5 = v65;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v37 = swift_retain();
      v1 = (unint64_t)&v68;
      MEMORY[0x227699594](v37);
      v2 = *(float32x2_t *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (*(_QWORD *)&v2 >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_22655CEF0();
      sub_22655CF08();
      sub_22655CEE4();
      swift_release();
      goto LABEL_18;
    }
    v19 = *(float32x2_t **)(*(_QWORD *)(v16 + 56) + 8 * v17);
    v2 = (float32x2_t)&v19[6];
    swift_beginAccess();
    v1 = (unint64_t)v19[6];
    v20 = *(_QWORD *)(v1 + 16);
    swift_retain();
    if (!v20)
      break;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_226534A40(v6);
    if ((v21 & 1) != 0)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      if (v9 == v8)
      {
LABEL_4:
        swift_release();
        v3 = v56;
        v2 = v57;
        v4 = v59;
        v1 = (unint64_t)v62;
        goto LABEL_5;
      }
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(**(_QWORD **)&v2 + 16) <= 1uLL)
        break;
LABEL_17:
      swift_release();
LABEL_18:
      swift_release();
      if (v9 == v8)
        goto LABEL_4;
    }
  }
  v38 = *(float32x2_t **)(v6 + 16);
  v39 = v38[2];
  if (!*(_QWORD *)&v39)
    goto LABEL_17;
  v40 = v38 + 4;
  while (1)
  {
    v41 = *v40;
    v42 = vceq_f32(*v40, v19[2]);
    if ((v42.i8[0] & 1) == 0 || (v42.i8[4] & 1) == 0)
    {
      v43 = vceq_f32(v41, v19[3]);
      if ((v43.i8[0] & 1) == 0 || (v43.i8[4] & 1) == 0)
        break;
    }
    ++v40;
    if (!--*(_QWORD *)&v39)
      goto LABEL_17;
  }
  swift_beginAccess();
  swift_retain();
  v44 = swift_isUniquelyReferenced_nonNull_native();
  v1 = **(_QWORD **)&v2;
  v66 = **(_QWORD ***)&v2;
  **(_QWORD **)&v2 = 0x8000000000000000;
  v46 = sub_226534A40(v6);
  v47 = *(_QWORD *)(v1 + 16);
  v48 = (v45 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
    goto LABEL_70;
  v50 = v45;
  if (*(_QWORD *)(v1 + 24) >= v49)
  {
    if ((v44 & 1) == 0)
      sub_226547FD8();
    goto LABEL_62;
  }
  sub_226541C44(v49, v44);
  v51 = sub_226534A40(v6);
  if ((v50 & 1) == (v52 & 1))
  {
    v46 = v51;
LABEL_62:
    v10 = MEMORY[0x24BEE4B00];
    v1 = (unint64_t)v66;
    if ((v50 & 1) != 0)
    {
      *(float32x2_t *)(v66[7] + 8 * v46) = v41;
    }
    else
    {
      sub_226523CC8(v46, v6, v66, *(double *)&v41);
      swift_retain();
    }
    v2 = v19[6];
    v19[6] = (float32x2_t)v66;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_17;
  }
  type metadata accessor for CDTTriangle();
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

uint64_t sub_226480F1C()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTTriangleEdgeManager()
{
  return objc_opt_self();
}

__n128 sub_226480F60()
{
  uint64_t v0;
  __n128 v1;
  _OWORD *v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(v0 + 48);
  v8 = *(_OWORD *)(v0 + 64);
  v5 = *(_OWORD *)(v0 + 16);
  v6 = *(_OWORD *)(v0 + 32);
  v1.n128_u64[0] = (unint64_t)vsub_f32(0, *(float32x2_t *)(v0 + 80));
  v1.n128_f32[2] = 0.0 - *(float *)(v0 + 88);
  v1.n128_u32[3] = 0;
  v4 = v1;
  type metadata accessor for RoomCaptureQuad();
  v2 = (_OWORD *)swift_allocObject();
  v2[1] = v5;
  v2[2] = v8;
  v2[3] = v7;
  v2[4] = v6;
  result = v4;
  v2[5] = v4;
  return result;
}

uint64_t sub_226480FE4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RoomCaptureQuad()
{
  return objc_opt_self();
}

__n128 sub_226481014(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, float a6)
{
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  a1.n128_u64[1] = LODWORD(a6);
  v11 = a1;
  a2.n128_u64[1] = LODWORD(a6);
  a3.n128_u64[1] = LODWORD(a6);
  v9 = a3;
  v10 = a2;
  a4.n128_u64[1] = LODWORD(a6);
  v8 = a4;
  type metadata accessor for RoomCaptureQuad();
  v6 = swift_allocObject();
  *(__n128 *)(v6 + 16) = v11;
  *(__n128 *)(v6 + 32) = v10;
  *(__n128 *)(v6 + 48) = v9;
  *(__n128 *)(v6 + 64) = v8;
  result = a5;
  *(__n128 *)(v6 + 80) = a5;
  return result;
}

__n128 sub_226481088(float32x4_t a1, float32x4_t a2, __n128 a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  __n128 result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v4 = a2;
  v6 = vsubq_f32(a2, a1);
  v7 = (int32x4_t)vmulq_f32(v6, v6);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32(v7, 2), vaddq_f32((float32x4_t)v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1))).f32[0] < 1.4211e-14)
  {
    *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)a1.f32, (float32x2_t)0x3F80000000000000);
    v4.f32[2] = a1.f32[2] + 0.0;
    v4.i32[3] = 0;
  }
  v8 = vsubq_f32(a4, a1);
  v9 = (int32x4_t)vmulq_f32(v8, v8);
  v10 = (int32x4_t)vaddq_f32((float32x4_t)v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 1));
  v11 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v9, 2), (float32x4_t)v10);
  if (*(float *)v11.i32 < 1.4211e-14)
  {
    *(float32x2_t *)a4.f32 = vadd_f32(*(float32x2_t *)a1.f32, 0);
    a4.f32[2] = a1.f32[2] + -1.0;
    a4.i32[3] = 0;
  }
  *(float32x2_t *)v11.i8 = vsub_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)a1.f32);
  *(float *)&v11.i32[2] = v4.f32[2] - a1.f32[2];
  *(float32x2_t *)v10.i8 = vsub_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a1.f32);
  v22 = a4;
  *(float *)&v10.i32[2] = a4.f32[2] - a1.f32[2];
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL), vnegq_f32((float32x4_t)v11)), (float32x4_t)v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL));
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  v14 = (int32x4_t)vmulq_f32((float32x4_t)v12, (float32x4_t)v12);
  v14.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8)).u32[0];
  v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  v20 = v4;
  v21 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  v19 = a1;
  type metadata accessor for RoomCaptureQuad();
  v17 = swift_allocObject();
  *(float32x4_t *)(v17 + 16) = v19;
  *(float32x4_t *)(v17 + 32) = v20;
  *(__n128 *)(v17 + 48) = a3;
  *(float32x4_t *)(v17 + 64) = v22;
  result = (__n128)v21;
  *(float32x4_t *)(v17 + 80) = v21;
  return result;
}

void sub_2264811EC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];

  v12[3] = a1;
  v12[7] = *MEMORY[0x24BDAC8D0];
  v1 = sub_22655CCB0();
  v12[1] = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_22655CDC4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22655CC80();
  v12[2] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_22655CDB8();
  v7 = sub_22655CD94();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9 >> 60 != 15)
  {
    sub_22655C068();
    v11 = v10;
    sub_226483A78(v7, v9);
    sub_226437F28(&qword_255843760, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_22655CC74();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x2264815C8);
}

void CapturedRoomData.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  _OWORD v77[4];
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v72 = a2;
  v84 = sub_22655D334();
  v76 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558436B0);
  v5 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22655CC98();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2264811EC((uint64_t)v11);
  v12 = a1[3];
  v75 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_2264824F0();
  v13 = v74;
  sub_22655D688();
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v15 = v84;
    swift_allocError();
    v17 = v16;
    sub_22655D31C();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v17, *MEMORY[0x24BEE26D8], v15);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    swift_bridgeObjectRelease();
    return;
  }
  v67 = v4;
  v70 = v11;
  v68 = v5;
  v69 = v9;
  v71 = v8;
  LOBYTE(v82) = 1;
  v14 = sub_226482534();
  sub_22655D4B4();
  v66 = v14;
  v18 = v77[0];
  sub_226482694(*(uint64_t *)&v77[0], *((unint64_t *)&v77[0] + 1));
  sub_226482578(v18, *((uint64_t *)&v18 + 1));
  v65 = v7;
  v64 = v18;
  v20 = v19;
  v22 = v21;
  v23 = sub_22655CC2C();
  v25 = v24;
  v61 = v20;
  v62 = v22;
  v63 = *((_QWORD *)&v18 + 1);
  v26 = v23;
  v27 = sub_22643F548(0, &qword_255848000);
  sub_22655D040();
  v60 = v27;
  if (!v83)
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_226455C88(&v82, v77);
  sub_22643F548(0, &qword_2558436D0);
  swift_dynamicCast();
  LOBYTE(v82) = 0;
  v28 = (id)v80;
  sub_22655D4B4();
  v74 = v28;
  v29 = v77[0];
  sub_226482694(*(uint64_t *)&v77[0], *((unint64_t *)&v77[0] + 1));
  sub_226482578(v29, *((uint64_t *)&v29 + 1));
  v59 = *((_QWORD *)&v29 + 1);
  v31 = v30;
  v33 = v32;
  v34 = sub_22655CC2C();
  v57 = v31;
  v58 = v33;
  v35 = v34;
  v37 = v36;
  sub_22655D040();
  v56 = v26;
  sub_2264826D8((uint64_t)&v82, (uint64_t)&v80);
  if (!v81)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_226455C88(&v80, v77);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558436E0);
  swift_dynamicCast();
  v38 = (void *)sub_22655CCBC();
  swift_bridgeObjectRelease();
  v39 = (id)RSKeyframeSequenceFromDictionary();

  if (!v39)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_22655C140();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848520);
  sub_226437F28(&qword_2558436F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v40 = sub_22655CCC8();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v80) = 2;
  sub_22655D4B4();
  v41 = v77[0];
  sub_226482694(*(uint64_t *)&v77[0], *((unint64_t *)&v77[0] + 1));
  sub_226482578(v41, *((uint64_t *)&v41 + 1));
  v54 = v42;
  v55 = v43;
  v52 = sub_22655CC2C();
  v53 = v44;
  sub_22655D040();
  v66 = 0;
  if (v79)
  {
    sub_226455C98(v52, v53);
    sub_226455C98(v54, v55);
    sub_226455C98(v35, v37);
    sub_226455C98(v57, v58);
    sub_226455C98(v56, v25);
    sub_226455C98(v61, v62);
    sub_226455C98(v41, *((unint64_t *)&v41 + 1));
    sub_226455C98(v29, v59);
    sub_226455C98(v64, v63);
    sub_22643D7E4((uint64_t)&v82, &qword_2558436D8);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v73);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    sub_226455C88(&v78, &v80);
    type metadata accessor for simd_float4x4(0);
    swift_dynamicCast();
    v48 = v77[0];
    v47 = v77[1];
    v50 = v77[2];
    v49 = v77[3];
    v45 = v72;
    v46 = v74;
    *v72 = v40;
    v45[1] = (uint64_t)v46;
    *((_OWORD *)v45 + 1) = v48;
    *((_OWORD *)v45 + 2) = v47;
    *((_OWORD *)v45 + 3) = v50;
    *((_OWORD *)v45 + 4) = v49;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);

    swift_bridgeObjectRelease();
    return;
  }
LABEL_11:
  __break(1u);
}

unint64_t sub_2264824F0()
{
  unint64_t result;

  result = qword_2558436B8;
  if (!qword_2558436B8)
  {
    result = MEMORY[0x22769A794](&unk_226560E1C, &type metadata for CapturedRoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558436B8);
  }
  return result;
}

unint64_t sub_226482534()
{
  unint64_t result;

  result = qword_2558436C0;
  if (!qword_2558436C0)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2558436C0);
  }
  return result;
}

void sub_226482578(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_2264825B0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_2264B47E8(v1, v0);
  }
  else
  {
    v2 = sub_22655CC50();
    sub_226437F28(&qword_255843758, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x24BDC61A0], v2);
    swift_willThrow();
    sub_226455C98(v1, v0);
  }
}

uint64_t sub_226482694(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_2264826D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558436D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void CapturedRoomData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  void (*v26)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD v72[2];
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (*v90)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  _OWORD v95[4];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843708);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v80 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v85 = (unint64_t)v72 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v93 = (unint64_t)v72 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843710);
  v91 = *(_QWORD *)(v9 - 8);
  v92 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22655CC98();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + 8);
  v86 = *(_QWORD *)v1;
  v84 = *(_OWORD *)(v1 + 16);
  v83 = *(_OWORD *)(v1 + 32);
  v82 = *(_OWORD *)(v1 + 48);
  v81 = *(_OWORD *)(v1 + 64);
  sub_2264811EC((uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2264824F0();
  sub_22655D694();
  v17 = (void *)objc_opt_self();
  *(_QWORD *)&v95[0] = 0;
  v18 = objc_msgSend(v17, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v16, 0, v95);
  v19 = *(id *)&v95[0];
  if (!v18)
  {
    v30 = v19;
    v29 = (void *)sub_22655BF6C();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v11, v92);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    goto LABEL_7;
  }
  v79 = v17;
  v88 = v13;
  v89 = v11;
  v87 = v12;
  v20 = sub_22655C080();
  v22 = v21;

  *(_QWORD *)&v95[0] = v20;
  *((_QWORD *)&v95[0] + 1) = v22;
  v23 = sub_22655CC44();
  v24 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v93, 1, 1, v23);
  v25 = sub_22648329C();
  v26 = v90;
  v27 = sub_22655CC38();
  if (v26)
  {
    sub_22643D7E4(v93, &qword_255843708);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v15, v87);
    sub_226455C98(v20, v22);
    v29 = v26;
LABEL_7:
    v34 = sub_22655D34C();
    swift_allocError();
    v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255843718);
    v36[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_255843720);
    *v36 = &type metadata for CapturedRoomData;
    sub_22655D31C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x24BEE2728], v34);
    swift_willThrow();

    return;
  }
  v31 = v27;
  v32 = v28;
  v74 = v25;
  v75 = v23;
  v90 = v24;
  v77 = v20;
  v78 = v22;
  v76 = v15;
  sub_22643D7E4(v93, &qword_255843708);
  *(_QWORD *)&v95[0] = v31;
  *((_QWORD *)&v95[0] + 1) = v32;
  v94 = 1;
  sub_226482694(v31, v32);
  v33 = sub_2264832E0();
  sub_22655D514();
  v72[1] = v33;
  v73 = v31;
  v93 = v32;
  sub_226455C98(v31, v32);
  sub_22655C140();
  v37 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848520);
  sub_226437F28(&qword_2558436F0, v37, MEMORY[0x24BDCEA88]);
  v38 = (void *)sub_22655CCBC();
  v39 = (id)RSKeyframeSequenceToDictionary();

  v40 = v77;
  if (v39)
  {
    v41 = sub_22655CCC8();

  }
  else
  {
    v41 = 0;
  }
  v42 = v76;
  v43 = v78;
  v44 = v79;
  *(_QWORD *)&v95[0] = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848190);
  v45 = sub_22655D130();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v95[0] = 0;
  v46 = objc_msgSend(v44, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v45, 1, v95);
  swift_unknownObjectRelease();
  v47 = *(id *)&v95[0];
  if (!v46)
  {
    v54 = v47;
    v29 = (void *)sub_22655BF6C();

    swift_willThrow();
    sub_226455C98(v40, v43);
    sub_226455C98(v73, v93);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v42, v87);
    goto LABEL_7;
  }
  v48 = sub_22655C080();
  v50 = v49;

  *(_QWORD *)&v95[0] = v48;
  *((_QWORD *)&v95[0] + 1) = v50;
  v51 = v85;
  v90(v85, 1, 1, v75);
  v52 = sub_22655CC38();
  v53 = v89;
  v55 = v52;
  v57 = v56;
  v86 = v48;
  v79 = (void *)v50;
  sub_22643D7E4(v51, &qword_255843708);
  *(_QWORD *)&v95[0] = v55;
  *((_QWORD *)&v95[0] + 1) = v57;
  v94 = 0;
  sub_226482694(v55, v57);
  sub_22655D514();
  sub_226455C98(v55, v57);
  v95[0] = v84;
  v95[1] = v83;
  v95[2] = v82;
  v95[3] = v81;
  type metadata accessor for simd_float4x4(0);
  v58 = sub_22655D58C();
  *(_QWORD *)&v95[0] = 0;
  v59 = objc_msgSend(v44, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v58, 0, v95);
  swift_unknownObjectRelease();
  v60 = *(id *)&v95[0];
  v61 = v86;
  if (!v59)
  {
    v67 = v60;
    v29 = (void *)sub_22655BF6C();

    swift_willThrow();
    sub_226455C98(v61, (unint64_t)v79);
    sub_226455C98(v77, v78);
    sub_226455C98(v55, v57);
    sub_226455C98(v73, v93);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v92);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v87);
    goto LABEL_7;
  }
  *(_QWORD *)&v84 = v55;
  v85 = v57;
  v62 = sub_22655C080();
  v64 = v63;

  *(_QWORD *)&v95[0] = v62;
  *((_QWORD *)&v95[0] + 1) = v64;
  v65 = (uint64_t)v80;
  v90((unint64_t)v80, 1, 1, v75);
  v66 = v76;
  v68 = sub_22655CC38();
  v70 = v69;
  sub_22643D7E4(v65, &qword_255843708);
  *(_QWORD *)&v95[0] = v68;
  *((_QWORD *)&v95[0] + 1) = v70;
  v94 = 2;
  sub_226482694(v68, v70);
  v71 = v89;
  sub_22655D514();
  sub_226455C98(v62, v64);
  sub_226455C98(v61, (unint64_t)v79);
  sub_226455C98(v77, v78);
  sub_226455C98(v68, v70);
  sub_226455C98(v84, v85);
  sub_226455C98(v73, v93);
  sub_226455C98(v68, v70);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v71, v92);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v66, v87);
}

unint64_t sub_22648329C()
{
  unint64_t result;

  result = qword_255843728;
  if (!qword_255843728)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_255843728);
  }
  return result;
}

unint64_t sub_2264832E0()
{
  unint64_t result;

  result = qword_255843730;
  if (!qword_255843730)
  {
    result = MEMORY[0x22769A794](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_255843730);
  }
  return result;
}

uint64_t sub_226483324(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2264AD0FC(*a1, *a2);
}

uint64_t sub_226483330()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_2264833D4()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_226483454()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_2264834F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_226483A30();
  *a1 = result;
  return result;
}

void sub_226483520(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xE900000000000073;
  v3 = *v1;
  v4 = 0x6573734165726F63;
  v5 = 0x800000022656A150;
  if (v3 == 1)
    v5 = 0xE900000000000074;
  else
    v4 = 0xD000000000000018;
  v6 = v3 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x656D61726679656BLL;
  if (!v6)
    v2 = v5;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_226483584()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6573734165726F63;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0x656D61726679656BLL;
}

uint64_t sub_2264835E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_226483A30();
  *a1 = result;
  return result;
}

uint64_t sub_226483608()
{
  return 0;
}

void sub_226483614(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_226483620()
{
  sub_2264824F0();
  return sub_22655D6A0();
}

uint64_t sub_226483648()
{
  sub_2264824F0();
  return sub_22655D6AC();
}

void sub_226483670(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  CapturedRoomData.init(from:)(a1, a2);
}

void sub_226483684(_QWORD *a1)
{
  CapturedRoomData.encode(to:)(a1);
}

void destroy for CapturedRoomData(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for CapturedRoomData(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  id v6;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  return a1;
}

uint64_t assignWithCopy for CapturedRoomData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CapturedRoomData(uint64_t a1, _OWORD *a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  v6 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for CapturedRoomData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CapturedRoomData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CapturedRoomData()
{
  return &type metadata for CapturedRoomData;
}

uint64_t storeEnumTagSinglePayload for CapturedRoomData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2264838D8 + 4 * byte_226560C95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22648390C + 4 * asc_226560C90[v4]))();
}

uint64_t sub_22648390C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226483914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22648391CLL);
  return result;
}

uint64_t sub_226483928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226483930);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_226483934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22648393C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CapturedRoomData.CodingKeys()
{
  return &type metadata for CapturedRoomData.CodingKeys;
}

unint64_t sub_22648395C()
{
  unint64_t result;

  result = qword_255843740;
  if (!qword_255843740)
  {
    result = MEMORY[0x22769A794](&unk_226560DF4, &type metadata for CapturedRoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843740);
  }
  return result;
}

unint64_t sub_2264839A4()
{
  unint64_t result;

  result = qword_255843748;
  if (!qword_255843748)
  {
    result = MEMORY[0x22769A794](&unk_226560D2C, &type metadata for CapturedRoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843748);
  }
  return result;
}

unint64_t sub_2264839EC()
{
  unint64_t result;

  result = qword_255843750;
  if (!qword_255843750)
  {
    result = MEMORY[0x22769A794](&unk_226560D54, &type metadata for CapturedRoomData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843750);
  }
  return result;
}

uint64_t sub_226483A30()
{
  unint64_t v0;

  v0 = sub_22655D454();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_226483A78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_226455C98(a1, a2);
  return a1;
}

uint64_t sub_226483A90()
{
  _BYTE *v0;

  if (*v0)
    return 0x7463656A626FLL;
  else
    return 0x65636166727573;
}

uint64_t sub_226483AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22648B804(a1, a2);
  *a3 = result;
  return result;
}

void sub_226483AEC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_226483AF8()
{
  sub_226488D8C();
  return sub_22655D6A0();
}

uint64_t sub_226483B20()
{
  sub_226488D8C();
  return sub_22655D6AC();
}

uint64_t sub_226483B48()
{
  return 1;
}

uint64_t sub_226483B54()
{
  return sub_22655D64C();
}

uint64_t sub_226483B7C()
{
  return 12383;
}

void sub_226483B8C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_226483B98()
{
  sub_226488DD0();
  return sub_22655D6A0();
}

uint64_t sub_226483BC0()
{
  sub_226488DD0();
  return sub_22655D6AC();
}

uint64_t sub_226483BE8()
{
  sub_22655D640();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226483C28()
{
  sub_22655D640();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226483C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_22655D55C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_226483CE0()
{
  sub_226488E58();
  return sub_22655D6A0();
}

uint64_t sub_226483D08()
{
  sub_226488E58();
  return sub_22655D6AC();
}

uint64_t CapturedElementCategory.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843770);
  v18 = *(_QWORD *)(v3 - 8);
  v19 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843778);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843780);
  v20 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v1;
  v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_226488D8C();
  sub_22655D694();
  if ((v12 & 1) != 0)
  {
    v25 = 1;
    sub_226488DD0();
    sub_22655D4D8();
    v24 = v21;
    sub_226488E14();
    v13 = v19;
    sub_22655D514();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v13);
  }
  else
  {
    v23 = 0;
    sub_226488E58();
    sub_22655D4D8();
    v22 = v21;
    sub_226488E9C();
    v14 = v17;
    sub_22655D514();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t CapturedElementCategory.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v28 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558437B0);
  v4 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  v30 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558437B8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558437C0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_226488D8C();
  v15 = v33;
  sub_22655D688();
  if (!v15)
  {
    v27 = v7;
    v16 = v31;
    v33 = v11;
    v17 = sub_22655D4CC();
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v34 = *(unsigned __int8 *)(v17 + 32);
      if ((v34 & 1) != 0)
      {
        v38 = 1;
        sub_226488DD0();
        sub_22655D460();
        sub_226488EE0();
        v18 = v29;
        sub_22655D4B4();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
        v19 = v37;
      }
      else
      {
        v36 = 0;
        sub_226488E58();
        sub_22655D460();
        sub_226488F24();
        sub_22655D4B4();
        v24 = v33;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v10);
        v19 = v35;
      }
      v25 = v28;
      *v28 = v19;
      v25[1] = v34;
    }
    else
    {
      v20 = sub_22655D334();
      swift_allocError();
      v22 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2558437C8);
      *v22 = &type metadata for CapturedElementCategory;
      sub_22655D46C();
      sub_22655D31C();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t sub_22648434C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CapturedElementCategory.init(from:)(a1, a2);
}

uint64_t sub_226484360(_QWORD *a1)
{
  return CapturedElementCategory.encode(to:)(a1);
}

uint64_t sub_226484378()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2264843A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_2264843B8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_2264843C4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_2264843D4()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_22655D640();
  sub_22655CE00();
  sub_22655D658();
  if (v1 != 1)
    sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_22648445C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_22655CE00();
  if (v1 == 1)
    return sub_22655D658();
  sub_22655D658();
  return sub_22655D64C();
}

uint64_t sub_2264844BC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_22655D640();
  sub_22655CE00();
  sub_22655D658();
  if (v1 != 1)
    sub_22655D64C();
  return sub_22655D670();
}

_QWORD *sub_226484540@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_226484558()
{
  sub_226488F68();
  return sub_22655D6A0();
}

uint64_t sub_226484580()
{
  sub_226488F68();
  return sub_22655D6AC();
}

uint64_t sub_2264845A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t result;
  char v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v6 || (v7 = sub_22655D55C(), result = 0, (v7 & 1) != 0))
  {
    if ((v3 & 1) != 0)
    {
      if (v5)
        return 1;
    }
    else
    {
      if (v2 == v4)
        v9 = v5;
      else
        v9 = 1;
      if ((v9 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t CapturedRoom.AttributesCodableRepresentation.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CapturedRoom.AttributesCodableRepresentation.init(attributes:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CapturedRoom.AttributesCodableRepresentation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558437E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_226488F68();
  sub_22655D688();
  if (!v2)
  {
    v14 = a2;
    v11 = 16;
    v10[2] = xmmword_22655F8F0;
    v10[1] = xmmword_22655FA10;
    v10[0] = xmmword_22655FA80;
    v17 = MEMORY[0x24BEE4AF8];
    v13 = a1;
    v12 = v6;
    v16 = v8;
    v15 = 1;
    JUMPOUT(0x2264849E8);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CapturedRoom.AttributesCodableRepresentation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t DynamicType;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255843820);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_226488F68();
  sub_22655D694();
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = v5;
  v11 = v9 + 32;
  v14 = v9;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_226438600(v11, (uint64_t)v19);
    __swift_project_boxed_opaque_existential_1(v19, v20);
    sub_22655CE6C();
    __swift_project_boxed_opaque_existential_1(v19, v20);
    DynamicType = swift_getDynamicType();
    v16 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2558437F0);
    DynamicType = sub_22655CDDC();
    v16 = v12;
    v17 = 0;
    v18 = 1;
    sub_22655D4E4();
    if (v2)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v11 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      v5 = v22;
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t sub_226484DE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CapturedRoom.AttributesCodableRepresentation.init(from:)(a1, a2);
}

uint64_t sub_226484DFC(_QWORD *a1)
{
  return CapturedRoom.AttributesCodableRepresentation.encode(to:)(a1);
}

uint64_t sub_226484E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t sub_226484E4C()
{
  _QWORD *v0;
  _QWORD v2[4];

  sub_22655D640();
  sub_226438600((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558437F0);
  sub_22655CDDC();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_22655CE6C();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_226484F38()
{
  _QWORD *v0;
  _QWORD v2[4];

  sub_226438600((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558437F0);
  sub_22655CDDC();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_22655CE6C();
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22648501C()
{
  _QWORD *v0;
  _QWORD v2[4];

  sub_22655D640();
  sub_226438600((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558437F0);
  sub_22655CDDC();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_22655CE6C();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

BOOL sub_226485104()
{
  uint64_t v0;

  v0 = sub_226484E4C();
  return v0 == sub_226484E4C();
}

uint64_t sub_226485144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DynamicType;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 24))(&DynamicType);
  if (BYTE1(DynamicType) <= 0xFEu)
  {
    DynamicType = sub_22655CDDC();
    v6 = v3;
    sub_22655CE24();
    swift_getDynamicType();
    swift_getMetatypeMetadata();
    sub_22655CDDC();
    sub_22655CE24();
    swift_bridgeObjectRelease();
  }
  else
  {
    DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    DynamicType = sub_22655CDDC();
    v6 = v2;
  }
  sub_22655CE24();
  sub_22655CE6C();
  sub_22655CE24();
  swift_bridgeObjectRelease();
  return DynamicType;
}

uint64_t ChairType.shortIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2264852C4 + 4 * byte_226560E70[*v0]))(0x6843676E696E6964, 0xEB00000000726961);
}

uint64_t sub_2264852C4()
{
  return 0x6C6F6F7473;
}

uint64_t sub_2264852D8()
{
  return 0x6C6576697773;
}

uint64_t sub_2264852EC()
{
  return 0x69746E6564696E75;
}

RoomPlan::ChairType_optional __swiftcall ChairType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::ChairType_optional)sub_226486540(v1);
}

void *static ChairType.allCases.getter()
{
  return &unk_24EDDFC68;
}

uint64_t ChairType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_226485350 + 4 * byte_226560E74[*v0]))(0x676E696E6964, 0xE600000000000000);
}

uint64_t sub_226485350()
{
  return 0x6C6F6F7473;
}

uint64_t sub_226485364()
{
  return 0x6C6576697773;
}

uint64_t sub_226485374()
{
  return 0x69746E6564696E75;
}

void sub_226485394(char *a1)
{
  sub_2264AC420(*a1);
}

void sub_2264853A0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_22655D640();
  __asm { BR              X9 }
}

uint64_t sub_2264853E8()
{
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

void sub_226485454()
{
  __asm { BR              X10 }
}

uint64_t sub_22648548C()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

void sub_2264854E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_22655D640();
  __asm { BR              X9 }
}

uint64_t sub_226485528()
{
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

RoomPlan::ChairType_optional sub_226485594(Swift::String *a1)
{
  return ChairType.init(rawValue:)(*a1);
}

uint64_t sub_2264855A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2264855CC + 4 * byte_226560E84[*v0]))();
}

void sub_2264855CC(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6F6F7473;
  a1[1] = 0xE500000000000000;
}

void sub_2264855E4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6C6576697773;
  a1[1] = v1;
}

void sub_2264855F8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "unidentified");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_22648561C(_WORD *a1@<X8>)
{
  *a1 = 268;
}

uint64_t sub_226485628()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_226485660 + 4 * byte_226560E88[*v0]))(0x6843676E696E6964, 0xEB00000000726961);
}

uint64_t sub_226485660()
{
  return 0x6C6F6F7473;
}

uint64_t sub_226485674()
{
  return 0x6C6576697773;
}

uint64_t sub_226485688()
{
  return 0x69746E6564696E75;
}

void sub_2264856A8(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFC90;
}

uint64_t ChairLegType.shortIdentifier.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7367654C72617473;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x7367654C72756F66;
}

RoomPlan::ChairLegType_optional __swiftcall ChairLegType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::ChairLegType_optional)sub_22648612C(v1);
}

void *static ChairLegType.allCases.getter()
{
  return &unk_24EDDFCB8;
}

uint64_t ChairLegType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1918989427;
  if (*v0 != 1)
    v1 = 0x69746E6564696E75;
  if (*v0)
    return v1;
  else
    return 1920298854;
}

uint64_t sub_226485784(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2264ACEB0(*a1, *a2);
}

uint64_t sub_226485790()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_226485828()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22648589C()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

RoomPlan::ChairLegType_optional sub_226485930(Swift::String *a1)
{
  return ChairLegType.init(rawValue:)(*a1);
}

void sub_22648593C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1918989427;
  if (v2 != 1)
  {
    v5 = 0x69746E6564696E75;
    v4 = 0xEC00000064656966;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1920298854;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_226485994()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7367654C72617473;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x7367654C72756F66;
}

void sub_2264859F4(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFCE0;
}

void static ChairArmType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 268;
}

uint64_t ChairArmType.shortIdentifier.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x736D72416F6ELL;
  else
    return 0x736D724177;
}

RoomPlan::ChairArmType_optional __swiftcall ChairArmType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::ChairArmType_optional)sub_226486884(v1);
}

void *static ChairArmType.allCases.getter()
{
  return &unk_24EDDFD08;
}

uint64_t ChairArmType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E697373696DLL;
  else
    return 0x676E697473697865;
}

uint64_t sub_226485A98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2264ACBF4(*a1, *a2);
}

RoomPlan::ChairArmType_optional sub_226485AB0(Swift::String *a1)
{
  return ChairArmType.init(rawValue:)(*a1);
}

void sub_226485ABC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E697473697865;
  if (*v1)
    v2 = 0x676E697373696DLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_226485AFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x736D72416F6ELL;
  else
    return 0x736D724177;
}

void sub_226485B30(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFD30;
}

uint64_t ChairBackType.shortIdentifier.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6B6361426F6ELL;
  else
    return 0x6B63614277;
}

RoomPlan::ChairBackType_optional __swiftcall ChairBackType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::ChairBackType_optional)sub_226486884(v1);
}

void *static ChairBackType.allCases.getter()
{
  return &unk_24EDDFD58;
}

uint64_t sub_226485B8C()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_226485C0C()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_226485C68()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

RoomPlan::ChairBackType_optional sub_226485CE4(Swift::String *a1)
{
  return ChairBackType.init(rawValue:)(*a1);
}

uint64_t sub_226485CF0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6B6361426F6ELL;
  else
    return 0x6B63614277;
}

void sub_226485D24(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFD80;
}

void static SofaType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 267;
}

uint64_t SofaType.shortIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_226485D78 + 4 * byte_226560E8C[*v0]))(0x75676E6174636572, 0xEB0000000072616CLL);
}

uint64_t sub_226485D78()
{
  return 0x6465706168536CLL;
}

unint64_t sub_226485D90()
{
  return 0xD000000000000010;
}

uint64_t sub_226485DAC()
{
  return 0x6553656C676E6973;
}

uint64_t sub_226485DC8()
{
  return 0x69746E6564696E75;
}

RoomPlan::SofaType_optional __swiftcall SofaType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  RoomPlan::SofaType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_22655D454();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static SofaType.allCases.getter()
{
  return &unk_24EDDFDA8;
}

void sub_226485E4C(char *a1)
{
  sub_2264AC56C(*a1);
}

void sub_226485E58()
{
  char *v0;

  sub_2264AD8C4(*v0);
}

void sub_226485E60()
{
  __asm { BR              X10 }
}

uint64_t sub_226485EA4()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

void sub_226485F28(uint64_t a1)
{
  char *v1;

  sub_2264ADE78(a1, *v1);
}

RoomPlan::SofaType_optional sub_226485F30(Swift::String *a1)
{
  return SofaType.init(rawValue:)(*a1);
}

uint64_t sub_226485F3C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_226485F74 + 4 * byte_226560E96[*v0]))();
}

void sub_226485F74(_QWORD *a1@<X8>)
{
  *a1 = 0x6465706168536CLL;
  a1[1] = 0xE700000000000000;
}

void sub_226485F90(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000022656A480;
}

void sub_226485FB0(_QWORD *a1@<X8>)
{
  *a1 = 0x6553656C676E6973;
  a1[1] = 0xEA00000000007461;
}

void sub_226485FD0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "unidentified");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_226485FF4(_WORD *a1@<X8>)
{
  *a1 = 267;
}

uint64_t sub_226486000()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_226486038 + 4 * byte_226560E9B[*v0]))(0x75676E6174636572, 0xEB0000000072616CLL);
}

uint64_t sub_226486038()
{
  return 0x6465706168536CLL;
}

unint64_t sub_226486050()
{
  return 0xD000000000000010;
}

uint64_t sub_22648606C()
{
  return 0x6553656C676E6973;
}

uint64_t sub_226486088()
{
  return 0x69746E6564696E75;
}

void sub_2264860A8(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFDD0;
}

uint64_t TableType.shortIdentifier.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6154676E696E6964;
  if (*v0 != 1)
    v1 = 0x69746E6564696E75;
  if (*v0)
    return v1;
  else
    return 0x6154656566666F63;
}

RoomPlan::TableType_optional __swiftcall TableType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::TableType_optional)sub_22648612C(v1);
}

uint64_t sub_22648612C@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_22655D454();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static TableType.allCases.getter()
{
  return &unk_24EDDFDF8;
}

uint64_t TableType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E696E6964;
  if (*v0 != 1)
    v1 = 0x69746E6564696E75;
  if (*v0)
    return v1;
  else
    return 0x656566666F63;
}

uint64_t sub_2264861E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2264AC308(*a1, *a2);
}

uint64_t sub_2264861F4()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_226486294()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_226486310()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

RoomPlan::TableType_optional sub_2264863AC(Swift::String *a1)
{
  return TableType.init(rawValue:)(*a1);
}

void sub_2264863B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x676E696E6964;
  if (v2 != 1)
  {
    v5 = 0x69746E6564696E75;
    v4 = 0xEC00000064656966;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656566666F63;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_226486418(_WORD *a1@<X8>)
{
  *a1 = 266;
}

uint64_t sub_226486424()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6154676E696E6964;
  if (*v0 != 1)
    v1 = 0x69746E6564696E75;
  if (*v0)
    return v1;
  else
    return 0x6154656566666F63;
}

void sub_22648648C(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFE20;
}

void static TableShapeType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 266;
}

uint64_t TableShapeType.shortIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2264864E0 + 4 * byte_226560EA0[*v0]))(0x75676E6174636572, 0xEB0000000072616CLL);
}

unint64_t sub_2264864E0()
{
  return 0xD000000000000010;
}

uint64_t sub_2264864FC()
{
  return 0x6465706168536CLL;
}

unint64_t sub_226486514()
{
  return 0xD000000000000011;
}

RoomPlan::TableShapeType_optional __swiftcall TableShapeType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::TableShapeType_optional)sub_226486540(v1);
}

uint64_t sub_226486540@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_22655D454();
  result = swift_bridgeObjectRelease();
  v4 = 4;
  if (v2 < 4)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static TableShapeType.allCases.getter()
{
  return &unk_24EDDFE48;
}

uint64_t TableShapeType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2264865D8 + 4 * byte_226560EA4[*v0]))(0x75676E6174636572, 0xEB0000000072616CLL);
}

unint64_t sub_2264865D8()
{
  return 0xD000000000000010;
}

uint64_t sub_2264865F4()
{
  return 0x6465706168536CLL;
}

uint64_t sub_22648660C()
{
  return 0x69746E6564696E75;
}

void sub_22648662C(char *a1)
{
  sub_2264ACA70(*a1);
}

void sub_226486638()
{
  char *v0;

  sub_2264AD9B4(*v0);
}

void sub_226486640()
{
  __asm { BR              X10 }
}

uint64_t sub_226486684()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

void sub_2264866EC(uint64_t a1)
{
  char *v1;

  sub_2264ADFB0(a1, *v1);
}

RoomPlan::TableShapeType_optional sub_2264866F4(Swift::String *a1)
{
  return TableShapeType.init(rawValue:)(*a1);
}

uint64_t sub_226486700()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_226486738 + 4 * byte_226560EAC[*v0]))();
}

void sub_226486738(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000022656A2D0;
}

void sub_226486758(_QWORD *a1@<X8>)
{
  *a1 = 0x6465706168536CLL;
  a1[1] = 0xE700000000000000;
}

void sub_226486774(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "unidentified");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_226486798()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2264867D0 + 4 * byte_226560EB0[*v0]))(0x75676E6174636572, 0xEB0000000072616CLL);
}

unint64_t sub_2264867D0()
{
  return 0xD000000000000010;
}

uint64_t sub_2264867EC()
{
  return 0x6465706168536CLL;
}

unint64_t sub_226486804()
{
  return 0xD000000000000011;
}

void sub_226486824(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFE70;
}

void static StorageType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t StorageType.shortIdentifier.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x666C656873;
  else
    return 0x74656E69626163;
}

RoomPlan::StorageType_optional __swiftcall StorageType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (RoomPlan::StorageType_optional)sub_226486884(v1);
}

uint64_t sub_226486884@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_22655D454();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static StorageType.allCases.getter()
{
  return &unk_24EDDFE98;
}

uint64_t sub_2264868EC(char *a1, char *a2)
{
  return sub_2264AD05C(*a1, *a2);
}

uint64_t sub_2264868F8()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

uint64_t sub_226486974()
{
  sub_22655CE00();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2264869CC()
{
  sub_22655D640();
  sub_22655CE00();
  swift_bridgeObjectRelease();
  return sub_22655D670();
}

RoomPlan::StorageType_optional sub_226486A44(Swift::String *a1)
{
  return StorageType.init(rawValue:)(*a1);
}

void sub_226486A50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x74656E69626163;
  if (*v1)
    v2 = 0x666C656873;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_226486A8C(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t sub_226486A98()
{
  _BYTE *v0;

  if (*v0)
    return 0x666C656873;
  else
    return 0x74656E69626163;
}

void sub_226486AD0(_QWORD *a1@<X8>)
{
  *a1 = &unk_24EDDFEC0;
}

_QWORD *sub_226486AE0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226487930(a1, a2, a3, a4, &qword_255840A78);
}

char *sub_226486AEC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_226488538(a1, a2, a3, a4, &qword_255843A78);
}

_QWORD *sub_226486AF8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226488654(a1, a2, a3, a4, (uint64_t *)&unk_255842740, &qword_2558400F8);
}

_QWORD *sub_226486B0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849B30);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B060(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_226486C18(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_226487718(a1, a2, a3, a4, &qword_2558439F8, type metadata accessor for CapturedRoom.Surface);
}

_QWORD *sub_226486C2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648A8DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226486D38(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A28);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648A9C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226486E44(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AF8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648AACC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226486F68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A88);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648ABD8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487074(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A80);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B150(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487198(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A98);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B23C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264872A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A90);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B324(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264873C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A50);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B23C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264874D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AA0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B23C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264875E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AA8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B324(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_226487704(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_226487718(a1, a2, a3, a4, &qword_255843A48, (uint64_t (*)(_QWORD))type metadata accessor for LineAnimation);
}

uint64_t sub_226487718(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_22655D3DC();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_22648BADC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_226487924(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226487930(a1, a2, a3, a4, &qword_255843AC0);
}

_QWORD *sub_226487930(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B23C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487A38(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226487C94(a1, a2, a3, a4, &qword_255843AD0, &qword_255843AD8);
}

uint64_t sub_226487A4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_226487718(a1, a2, a3, a4, &qword_255843A20, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

_QWORD *sub_226487A60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255842CD8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648A8DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_226487B6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255842CC8);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_22648ACC0(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487C74(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2264889B0(a1, a2, a3, a4, &qword_255842CD0);
}

_QWORD *sub_226487C80(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226487C94(a1, a2, a3, a4, &qword_2558439E0, &qword_2558439E8);
}

_QWORD *sub_226487C94(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B410(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487DAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AF0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648ADA8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_226487EB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AE0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 5);
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 32])
          memmove(v12, a4 + 32, 5 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648AE90(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226487FCC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AE8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648ABD8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2264880D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A40);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_22648AF78(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264881E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A38);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B61C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264882F0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226487C94(a1, a2, a3, a4, &qword_255843A68, &qword_255843A70);
}

_QWORD *sub_226488304(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A58);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648B514(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226488410(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A08);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B710(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_22648852C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_226488538(a1, a2, a3, a4, &qword_255843AC8);
}

char *sub_226488538(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_22648AF78(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226488640(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_226488654(a1, a2, a3, a4, &qword_255843B18, (uint64_t *)&unk_255843B20);
}

_QWORD *sub_226488654(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B8F0(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_226488780(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_226488AC4(a1, a2, a3, a4, &qword_255843B08);
}

_QWORD *sub_22648878C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AB8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648A8DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_226488898(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843AB0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648A8DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2264889A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2264889B0(a1, a2, a3, a4, &qword_2558439F0);
}

_QWORD *sub_2264889B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4])
          memmove(v14, a4 + 4, 32 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22648ABD8(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_226488AB8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_226488AC4(a1, a2, a3, a4, &qword_255843A18);
}

char *sub_226488AC4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B9F8(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_226488BB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_226487718(a1, a2, a3, a4, &qword_255843A10, type metadata accessor for CapturedRoom.Object);
}

uint64_t sub_226488BCC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_226487718(a1, a2, a3, a4, &qword_255843B10, type metadata accessor for CapturedRoom);
}

char *sub_226488BE0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A00);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_22648B9F8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t _s8RoomPlan23CapturedElementCategoryO2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  if ((a1[1] & 1) != 0)
  {
    if (v2 == v3)
      return a2[1];
    else
      return 0;
  }
  else if ((a2[1] & 1) != 0)
  {
    return 0;
  }
  else
  {
    switch(*a1)
    {
      case 2u:
        if (v3 != 2)
          return 0;
        result = 1;
        break;
      case 3u:
        if (v3 != 3)
          return 0;
        result = 1;
        break;
      case 4u:
        if (v3 != 4)
          return 0;
        result = 1;
        break;
      case 5u:
        if (v3 != 5)
          return 0;
        result = 1;
        break;
      default:
        if ((v3 - 2) < 4 || ((((v2 & 1) == 0) ^ v3) & 1) == 0)
          return 0;
        result = 1;
        break;
    }
  }
  return result;
}

unint64_t sub_226488D8C()
{
  unint64_t result;

  result = qword_255843788;
  if (!qword_255843788)
  {
    result = MEMORY[0x22769A794](&unk_226561E04, &type metadata for CapturedElementCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843788);
  }
  return result;
}

unint64_t sub_226488DD0()
{
  unint64_t result;

  result = qword_255843790;
  if (!qword_255843790)
  {
    result = MEMORY[0x22769A794](&unk_226561DB4, &type metadata for CapturedElementCategory.ObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843790);
  }
  return result;
}

unint64_t sub_226488E14()
{
  unint64_t result;

  result = qword_255843798;
  if (!qword_255843798)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for CapturedRoom.Object.Category, &type metadata for CapturedRoom.Object.Category);
    atomic_store(result, (unint64_t *)&qword_255843798);
  }
  return result;
}

unint64_t sub_226488E58()
{
  unint64_t result;

  result = qword_2558437A0;
  if (!qword_2558437A0)
  {
    result = MEMORY[0x22769A794](&unk_226561D64, &type metadata for CapturedElementCategory.SurfaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558437A0);
  }
  return result;
}

unint64_t sub_226488E9C()
{
  unint64_t result;

  result = qword_2558437A8;
  if (!qword_2558437A8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for CapturedRoom.Surface.Category, &type metadata for CapturedRoom.Surface.Category);
    atomic_store(result, (unint64_t *)&qword_2558437A8);
  }
  return result;
}

unint64_t sub_226488EE0()
{
  unint64_t result;

  result = qword_2558437D0;
  if (!qword_2558437D0)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for CapturedRoom.Object.Category, &type metadata for CapturedRoom.Object.Category);
    atomic_store(result, (unint64_t *)&qword_2558437D0);
  }
  return result;
}

unint64_t sub_226488F24()
{
  unint64_t result;

  result = qword_2558437D8;
  if (!qword_2558437D8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for CapturedRoom.Surface.Category, &type metadata for CapturedRoom.Surface.Category);
    atomic_store(result, (unint64_t *)&qword_2558437D8);
  }
  return result;
}

unint64_t sub_226488F68()
{
  unint64_t result;

  result = qword_2558437E8;
  if (!qword_2558437E8)
  {
    result = MEMORY[0x22769A794](&unk_226561D14, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_2558437E8);
  }
  return result;
}

unint64_t sub_226488FAC()
{
  unint64_t result;

  result = qword_255843800;
  if (!qword_255843800)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for StorageType, &type metadata for StorageType);
    atomic_store(result, (unint64_t *)&qword_255843800);
  }
  return result;
}

unint64_t sub_226488FF0()
{
  unint64_t result;

  result = qword_255843808;
  if (!qword_255843808)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableType, &type metadata for TableType);
    atomic_store(result, (unint64_t *)&qword_255843808);
  }
  return result;
}

unint64_t sub_226489034()
{
  unint64_t result;

  result = qword_255848140;
  if (!qword_255848140)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableShapeType, &type metadata for TableShapeType);
    atomic_store(result, (unint64_t *)&qword_255848140);
  }
  return result;
}

unint64_t sub_226489078()
{
  unint64_t result;

  result = qword_255848130;
  if (!qword_255848130)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for SofaType, &type metadata for SofaType);
    atomic_store(result, (unint64_t *)&qword_255848130);
  }
  return result;
}

unint64_t sub_2264890BC()
{
  unint64_t result;

  result = qword_255848110;
  if (!qword_255848110)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairType, &type metadata for ChairType);
    atomic_store(result, (unint64_t *)&qword_255848110);
  }
  return result;
}

unint64_t sub_226489100()
{
  unint64_t result;

  result = qword_255843810;
  if (!qword_255843810)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairBackType, &type metadata for ChairBackType);
    atomic_store(result, (unint64_t *)&qword_255843810);
  }
  return result;
}

unint64_t sub_226489144()
{
  unint64_t result;

  result = qword_255843818;
  if (!qword_255843818)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairLegType, &type metadata for ChairLegType);
    atomic_store(result, (unint64_t *)&qword_255843818);
  }
  return result;
}

unint64_t sub_226489188()
{
  unint64_t result;

  result = qword_255848120;
  if (!qword_255848120)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairArmType, &type metadata for ChairArmType);
    atomic_store(result, (unint64_t *)&qword_255848120);
  }
  return result;
}

unint64_t sub_2264891D0()
{
  unint64_t result;

  result = qword_255843828;
  if (!qword_255843828)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairType, &type metadata for ChairType);
    atomic_store(result, (unint64_t *)&qword_255843828);
  }
  return result;
}

uint64_t sub_226489214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489228, (uint64_t (*)(void))sub_22648926C);
}

unint64_t sub_226489228()
{
  unint64_t result;

  result = qword_255843830;
  if (!qword_255843830)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairType, &type metadata for ChairType);
    atomic_store(result, (unint64_t *)&qword_255843830);
  }
  return result;
}

unint64_t sub_22648926C()
{
  unint64_t result;

  result = qword_255843838;
  if (!qword_255843838)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairType, &type metadata for ChairType);
    atomic_store(result, (unint64_t *)&qword_255843838);
  }
  return result;
}

uint64_t sub_2264892B0()
{
  return sub_22646C92C(&qword_255843840, &qword_255843848);
}

unint64_t sub_2264892D8()
{
  unint64_t result;

  result = qword_255843850;
  if (!qword_255843850)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairLegType, &type metadata for ChairLegType);
    atomic_store(result, (unint64_t *)&qword_255843850);
  }
  return result;
}

uint64_t sub_22648931C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489330, (uint64_t (*)(void))sub_226489374);
}

unint64_t sub_226489330()
{
  unint64_t result;

  result = qword_255843858;
  if (!qword_255843858)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairLegType, &type metadata for ChairLegType);
    atomic_store(result, (unint64_t *)&qword_255843858);
  }
  return result;
}

unint64_t sub_226489374()
{
  unint64_t result;

  result = qword_255843860;
  if (!qword_255843860)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairLegType, &type metadata for ChairLegType);
    atomic_store(result, (unint64_t *)&qword_255843860);
  }
  return result;
}

uint64_t sub_2264893B8()
{
  return sub_22646C92C(&qword_255843868, &qword_255843870);
}

unint64_t sub_2264893E0()
{
  unint64_t result;

  result = qword_255843878;
  if (!qword_255843878)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairArmType, &type metadata for ChairArmType);
    atomic_store(result, (unint64_t *)&qword_255843878);
  }
  return result;
}

uint64_t sub_226489424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489438, (uint64_t (*)(void))sub_22648947C);
}

unint64_t sub_226489438()
{
  unint64_t result;

  result = qword_255843880;
  if (!qword_255843880)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairArmType, &type metadata for ChairArmType);
    atomic_store(result, (unint64_t *)&qword_255843880);
  }
  return result;
}

unint64_t sub_22648947C()
{
  unint64_t result;

  result = qword_255843888;
  if (!qword_255843888)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairArmType, &type metadata for ChairArmType);
    atomic_store(result, (unint64_t *)&qword_255843888);
  }
  return result;
}

uint64_t sub_2264894C0()
{
  return sub_22646C92C(&qword_255843890, &qword_255843898);
}

unint64_t sub_2264894E8()
{
  unint64_t result;

  result = qword_2558438A0;
  if (!qword_2558438A0)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairBackType, &type metadata for ChairBackType);
    atomic_store(result, (unint64_t *)&qword_2558438A0);
  }
  return result;
}

uint64_t sub_22648952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489540, (uint64_t (*)(void))sub_226489584);
}

unint64_t sub_226489540()
{
  unint64_t result;

  result = qword_2558438A8;
  if (!qword_2558438A8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairBackType, &type metadata for ChairBackType);
    atomic_store(result, (unint64_t *)&qword_2558438A8);
  }
  return result;
}

unint64_t sub_226489584()
{
  unint64_t result;

  result = qword_2558438B0;
  if (!qword_2558438B0)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for ChairBackType, &type metadata for ChairBackType);
    atomic_store(result, (unint64_t *)&qword_2558438B0);
  }
  return result;
}

uint64_t sub_2264895C8()
{
  return sub_22646C92C(&qword_2558438B8, &qword_2558438C0);
}

unint64_t sub_2264895F0()
{
  unint64_t result;

  result = qword_2558438C8;
  if (!qword_2558438C8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for SofaType, &type metadata for SofaType);
    atomic_store(result, (unint64_t *)&qword_2558438C8);
  }
  return result;
}

uint64_t sub_226489634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489648, (uint64_t (*)(void))sub_22648968C);
}

unint64_t sub_226489648()
{
  unint64_t result;

  result = qword_2558438D0;
  if (!qword_2558438D0)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for SofaType, &type metadata for SofaType);
    atomic_store(result, (unint64_t *)&qword_2558438D0);
  }
  return result;
}

unint64_t sub_22648968C()
{
  unint64_t result;

  result = qword_2558438D8;
  if (!qword_2558438D8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for SofaType, &type metadata for SofaType);
    atomic_store(result, (unint64_t *)&qword_2558438D8);
  }
  return result;
}

uint64_t sub_2264896D0()
{
  return sub_22646C92C(&qword_2558438E0, &qword_2558438E8);
}

unint64_t sub_2264896F8()
{
  unint64_t result;

  result = qword_2558438F0;
  if (!qword_2558438F0)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableType, &type metadata for TableType);
    atomic_store(result, (unint64_t *)&qword_2558438F0);
  }
  return result;
}

uint64_t sub_22648973C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489750, (uint64_t (*)(void))sub_226489794);
}

unint64_t sub_226489750()
{
  unint64_t result;

  result = qword_2558438F8;
  if (!qword_2558438F8)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableType, &type metadata for TableType);
    atomic_store(result, (unint64_t *)&qword_2558438F8);
  }
  return result;
}

unint64_t sub_226489794()
{
  unint64_t result;

  result = qword_255843900;
  if (!qword_255843900)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableType, &type metadata for TableType);
    atomic_store(result, (unint64_t *)&qword_255843900);
  }
  return result;
}

uint64_t sub_2264897D8()
{
  return sub_22646C92C(&qword_255843908, &qword_255843910);
}

unint64_t sub_226489800()
{
  unint64_t result;

  result = qword_255843918;
  if (!qword_255843918)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableShapeType, &type metadata for TableShapeType);
    atomic_store(result, (unint64_t *)&qword_255843918);
  }
  return result;
}

uint64_t sub_226489844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489858, (uint64_t (*)(void))sub_22648989C);
}

unint64_t sub_226489858()
{
  unint64_t result;

  result = qword_255843920;
  if (!qword_255843920)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableShapeType, &type metadata for TableShapeType);
    atomic_store(result, (unint64_t *)&qword_255843920);
  }
  return result;
}

unint64_t sub_22648989C()
{
  unint64_t result;

  result = qword_255843928;
  if (!qword_255843928)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for TableShapeType, &type metadata for TableShapeType);
    atomic_store(result, (unint64_t *)&qword_255843928);
  }
  return result;
}

uint64_t sub_2264898E0()
{
  return sub_22646C92C(&qword_255843930, &qword_255843938);
}

unint64_t sub_226489908()
{
  unint64_t result;

  result = qword_255843940;
  if (!qword_255843940)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for StorageType, &type metadata for StorageType);
    atomic_store(result, (unint64_t *)&qword_255843940);
  }
  return result;
}

uint64_t sub_22648994C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_226489960(a1, a2, a3, (uint64_t (*)(void))sub_226489990, (uint64_t (*)(void))sub_2264899D4);
}

uint64_t sub_226489960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_226489990()
{
  unint64_t result;

  result = qword_255843948;
  if (!qword_255843948)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for StorageType, &type metadata for StorageType);
    atomic_store(result, (unint64_t *)&qword_255843948);
  }
  return result;
}

unint64_t sub_2264899D4()
{
  unint64_t result;

  result = qword_255843950;
  if (!qword_255843950)
  {
    result = MEMORY[0x22769A794](&protocol conformance descriptor for StorageType, &type metadata for StorageType);
    atomic_store(result, (unint64_t *)&qword_255843950);
  }
  return result;
}

uint64_t sub_226489A18()
{
  return sub_22646C92C(&qword_255843958, &qword_255843960);
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CapturedElementCategory(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  if (v6 <= 1)
    v7 = -1;
  else
    v7 = v6 ^ 0xFF;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for CapturedElementCategory(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_226489B2C + 4 * byte_226560EBD[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_226489B60 + 4 * byte_226560EB8[v4]))();
}

uint64_t sub_226489B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_226489B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x226489B70);
  return result;
}

uint64_t sub_226489B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x226489B84);
  *(_BYTE *)(result + 1) = -(char)a2;
  return result;
}

uint64_t sub_226489B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_226489B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_226489B9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_226489BA4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory()
{
  return &type metadata for CapturedElementCategory;
}

uint64_t dispatch thunk of static CapturedRoomAttribute.parentCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CapturedRoomAttribute.shortIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for CapturedRoom.AttributesCodableRepresentation()
{
  return &type metadata for CapturedRoom.AttributesCodableRepresentation;
}

ValueMetadata *type metadata accessor for ChairType()
{
  return &type metadata for ChairType;
}

ValueMetadata *type metadata accessor for ChairLegType()
{
  return &type metadata for ChairLegType;
}

ValueMetadata *type metadata accessor for ChairArmType()
{
  return &type metadata for ChairArmType;
}

ValueMetadata *type metadata accessor for ChairBackType()
{
  return &type metadata for ChairBackType;
}

uint64_t getEnumTagSinglePayload for AnimationOrigin(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SofaType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_226489D14 + 4 * byte_226560EC7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_226489D48 + 4 * byte_226560EC2[v4]))();
}

uint64_t sub_226489D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x226489D58);
  return result;
}

uint64_t sub_226489D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226489D6CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_226489D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SofaType()
{
  return &type metadata for SofaType;
}

uint64_t _s8RoomPlan12ChairLegTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_226489DE0 + 4 * byte_226560ED1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_226489E14 + 4 * byte_226560ECC[v4]))();
}

uint64_t sub_226489E14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x226489E24);
  return result;
}

uint64_t sub_226489E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226489E38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_226489E3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489E44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TableType()
{
  return &type metadata for TableType;
}

uint64_t getEnumTagSinglePayload for GlyphSnapState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8RoomPlan9ChairTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_226489F3C + 4 * byte_226560EDB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_226489F70 + 4 * byte_226560ED6[v4]))();
}

uint64_t sub_226489F70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489F78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x226489F80);
  return result;
}

uint64_t sub_226489F8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x226489F94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_226489F98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_226489FA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TableShapeType()
{
  return &type metadata for TableShapeType;
}

ValueMetadata *type metadata accessor for StorageType()
{
  return &type metadata for StorageType;
}

uint64_t initializeWithCopy for AnyCapturedRoomAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyCapturedRoomAttribute(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyCapturedRoomAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyCapturedRoomAttribute(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyCapturedRoomAttribute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCapturedRoomAttribute()
{
  return &type metadata for AnyCapturedRoomAttribute;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s31AttributesCodableRepresentationV10CodingKeysVMa()
{
  return &_s31AttributesCodableRepresentationV10CodingKeysVN;
}

uint64_t _s8RoomPlan12ChairArmTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22648A2F8 + 4 * byte_226560EE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22648A32C + 4 * byte_226560EE0[v4]))();
}

uint64_t sub_22648A32C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22648A334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22648A33CLL);
  return result;
}

uint64_t sub_22648A348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22648A350);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22648A354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22648A35C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.CodingKeys()
{
  return &type metadata for CapturedElementCategory.CodingKeys;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.SurfaceCodingKeys()
{
  return &type metadata for CapturedElementCategory.SurfaceCodingKeys;
}

uint64_t getEnumTagSinglePayload for CapturedRoom.Surface.Category.DoorCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s8RoomPlan23CapturedElementCategoryO17SurfaceCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22648A424 + 4 * byte_226560EEA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22648A444 + 4 * byte_226560EEF[v4]))();
}

_BYTE *sub_22648A424(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22648A444(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22648A44C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22648A454(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22648A45C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22648A464(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.ObjectCodingKeys()
{
  return &type metadata for CapturedElementCategory.ObjectCodingKeys;
}

unint64_t sub_22648A484()
{
  unint64_t result;

  result = qword_255843968;
  if (!qword_255843968)
  {
    result = MEMORY[0x22769A794](&unk_2265619A4, &type metadata for CapturedElementCategory.ObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843968);
  }
  return result;
}

unint64_t sub_22648A4CC()
{
  unint64_t result;

  result = qword_255843970;
  if (!qword_255843970)
  {
    result = MEMORY[0x22769A794](&unk_226561A5C, &type metadata for CapturedElementCategory.SurfaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843970);
  }
  return result;
}

unint64_t sub_22648A514()
{
  unint64_t result;

  result = qword_255843978;
  if (!qword_255843978)
  {
    result = MEMORY[0x22769A794](&unk_226561B14, &type metadata for CapturedElementCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255843978);
  }
  return result;
}

uint64_t sub_22648A558()
{
  return MEMORY[0x24BEE0D88];
}

unint64_t sub_22648A568()
{
  unint64_t result;

  result = qword_255843980;
  if (!qword_255843980)
  {
    result = MEMORY[0x22769A794](&unk_226561B3C, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_255843980);
  }
  return result;
}

uint64_t sub_22648A5AC()
{
  return MEMORY[0x24BEE0D90];
}

unint64_t sub_22648A5BC()
{
  unint64_t result;

  result = qword_255843988;
  if (!qword_255843988)
  {
    result = MEMORY[0x22769A794](&unk_226561B74, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_255843988);
  }
  return result;
}

uint64_t sub_22648A600()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_22648A610()
{
  unint64_t result;

  result = qword_255843990;
  if (!qword_255843990)
  {
    result = MEMORY[0x22769A794](&unk_226561BB4, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_255843990);
  }
  return result;
}

unint64_t sub_22648A658()
{
  unint64_t result;

  result = qword_255843998;
  if (!qword_255843998)
  {
    result = MEMORY[0x22769A794](&unk_226561CAC, &type metadata for AnyCapturedRoomAttribute);
    atomic_store(result, (unint64_t *)&qword_255843998);
  }
  return result;
}

unint64_t sub_22648A6A0()
{
  unint64_t result;

  result = qword_2558439A0;
  if (!qword_2558439A0)
  {
    result = MEMORY[0x22769A794](&unk_226561BDC, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_2558439A0);
  }
  return result;
}

unint64_t sub_22648A6E8()
{
  unint64_t result;

  result = qword_2558439A8;
  if (!qword_2558439A8)
  {
    result = MEMORY[0x22769A794](&unk_226561C04, &_s31AttributesCodableRepresentationV10CodingKeysVN);
    atomic_store(result, (unint64_t *)&qword_2558439A8);
  }
  return result;
}

unint64_t sub_22648A730()
{
  unint64_t result;

  result = qword_2558439B0;
  if (!qword_2558439B0)
  {
    result = MEMORY[0x22769A794](&unk_2265619CC, &type metadata for CapturedElementCategory.SurfaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439B0);
  }
  return result;
}

unint64_t sub_22648A778()
{
  unint64_t result;

  result = qword_2558439B8;
  if (!qword_2558439B8)
  {
    result = MEMORY[0x22769A794](&unk_2265619F4, &type metadata for CapturedElementCategory.SurfaceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439B8);
  }
  return result;
}

unint64_t sub_22648A7C0()
{
  unint64_t result;

  result = qword_2558439C0;
  if (!qword_2558439C0)
  {
    result = MEMORY[0x22769A794](&unk_226561914, &type metadata for CapturedElementCategory.ObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439C0);
  }
  return result;
}

unint64_t sub_22648A808()
{
  unint64_t result;

  result = qword_2558439C8;
  if (!qword_2558439C8)
  {
    result = MEMORY[0x22769A794](&unk_22656193C, &type metadata for CapturedElementCategory.ObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439C8);
  }
  return result;
}

unint64_t sub_22648A850()
{
  unint64_t result;

  result = qword_2558439D0;
  if (!qword_2558439D0)
  {
    result = MEMORY[0x22769A794](&unk_226561A84, &type metadata for CapturedElementCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439D0);
  }
  return result;
}

unint64_t sub_22648A898()
{
  unint64_t result;

  result = qword_2558439D8;
  if (!qword_2558439D8)
  {
    result = MEMORY[0x22769A794](&unk_226561AAC, &type metadata for CapturedElementCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2558439D8);
  }
  return result;
}

char *sub_22648A8DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648A9C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A30);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648AACC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843B00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648ABD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648ACC0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648ADA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = v4 << 6;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648AE90(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 5 * a1 + 32);
    v6 = 5 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648AF78(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B060(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648B150(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648B23C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648B324(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B514(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_255843A60);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B61C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B710(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648B804(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636166727573 && a2 == 0xE700000000000000;
  if (v2 || (sub_22655D55C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22655D55C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22648B8F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

char *sub_22648B9F8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648BADC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22648BC28()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(id *)(v0 + 16);
LABEL_5:
    swift_unknownObjectRetain();
    return (uint64_t)v1;
  }
  v2 = MTLCreateSystemDefaultDevice();
  if (v2)
  {
    v1 = v2;
    *(_QWORD *)(v0 + 16) = v2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  result = sub_22655D3E8();
  __break(1u);
  return result;
}

uint64_t sub_22648BCD8()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v1 = sub_22648BD34();
    *(_QWORD *)(v0 + 24) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_22648BD34()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  id v2;
  id v3;
  uint64_t result;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MetalConstants();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v6 = 0;
  v2 = objc_msgSend((id)sub_22648BC28(), sel_newDefaultLibraryWithBundle_error_, v1, &v6);
  swift_unknownObjectRelease();
  if (v2)
  {
    v3 = v6;

    return (uint64_t)v2;
  }
  else
  {
    v5 = v6;
    sub_22655BF6C();

    swift_willThrow();
    v6 = 0;
    v7 = 0xE000000000000000;
    sub_22655D2EC();
    swift_bridgeObjectRelease();
    v6 = (id)0xD00000000000001DLL;
    v7 = 0x800000022656C320;
    swift_getErrorValue();
    sub_22655D5B0();
    sub_22655CE24();
    swift_bridgeObjectRelease();
    result = sub_22655D3E8();
    __break(1u);
  }
  return result;
}

uint64_t sub_22648BEC4()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalConstants()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for AnimationOrigin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_22648BF5C + 4 * byte_226561E8D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_22648BF90 + 4 * byte_226561E88[v4]))();
}

uint64_t sub_22648BF90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22648BF98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22648BFA0);
  return result;
}

uint64_t sub_22648BFAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22648BFB4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_22648BFB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22648BFC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationOrigin()
{
  return &type metadata for AnimationOrigin;
}

_QWORD *sub_22648BFDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v7 = *(int *)(a3 + 40);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    v10 = sub_22655C0E0();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 44)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 44));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_22648C124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_22655C0E0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22648C1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22648C2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22648C444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_22648C544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22648C6A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22648C6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_22648C734()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22648C740(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AnimationGraph()
{
  uint64_t result;

  result = qword_255843C60;
  if (!qword_255843C60)
    return swift_getSingletonMetadata();
  return result;
}

void sub_22648C7F4()
{
  unint64_t v0;

  sub_226453DCC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_22648C898()
{
  unint64_t result;

  result = qword_255843CB0;
  if (!qword_255843CB0)
  {
    result = MEMORY[0x22769A794](&unk_226561F18, &type metadata for AnimationOrigin);
    atomic_store(result, (unint64_t *)&qword_255843CB0);
  }
  return result;
}

void sub_22648C8DC(int a1, __n128 a2)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = (~a1 & 0x44) == 0;
  sub_22648EBF8(0, 1, v3, a2);
  sub_22648EBF8(1, 0, v3, a2);
  sub_22648EBF8(4, 5, (~a1 & 0x88) == 0, a2);
  sub_22648EBF8(5, 4, (~a1 & 0x88) == 0, a2);
  sub_22648EBF8(1, 5, (~a1 & 0xC0) == 0, a2);
  sub_22648EBF8(5, 1, (~a1 & 0xC0) == 0, a2);
  sub_22648EBF8(0, 4, (~a1 & 0xC) == 0, a2);
  sub_22648EBF8(4, 0, (~a1 & 0xC) == 0, a2);
  sub_22648EBF8(1, 2, (~a1 & 0x60) == 0, a2);
  sub_22648EBF8(2, 1, (~a1 & 0x60) == 0, a2);
  sub_22648EBF8(5, 6, (~a1 & 0x90) == 0, a2);
  sub_22648EBF8(6, 5, (~a1 & 0x90) == 0, a2);
  sub_22648EBF8(2, 3, (~a1 & 0x22) == 0, a2);
  sub_22648EBF8(3, 2, (~a1 & 0x22) == 0, a2);
  sub_22648EBF8(6, 7, (~a1 & 0x11) == 0, a2);
  sub_22648EBF8(7, 6, (~a1 & 0x11) == 0, a2);
  sub_22648EBF8(2, 6, (~a1 & 0x30) == 0, a2);
  sub_22648EBF8(6, 2, (~a1 & 0x30) == 0, a2);
  sub_22648EBF8(3, 7, (~a1 & 3) == 0, a2);
  sub_22648EBF8(7, 3, (~a1 & 3) == 0, a2);
  sub_22648EBF8(0, 3, (~a1 & 6) == 0, a2);
  sub_22648EBF8(3, 0, (~a1 & 6) == 0, a2);
  v4 = (~a1 & 9) == 0;
  sub_22648EBF8(4, 7, v4, a2);
  sub_22648EBF8(7, 4, v4, a2);
}

void sub_22648CB7C(unsigned int a1, __n128 a2)
{
  int v3;
  int v4;

  v3 = a1 & 1;
  sub_22648EBF8(0, 1, v3, a2);
  sub_22648EBF8(1, 0, v3, a2);
  sub_22648EBF8(4, 5, v3, a2);
  sub_22648EBF8(5, 4, v3, a2);
  sub_22648EBF8(1, 5, v3, a2);
  sub_22648EBF8(5, 1, v3, a2);
  sub_22648EBF8(0, 4, v3, a2);
  sub_22648EBF8(4, 0, v3, a2);
  sub_22648EBF8(1, 2, (a1 >> 3) & 1, a2);
  sub_22648EBF8(2, 1, (a1 >> 3) & 1, a2);
  sub_22648EBF8(5, 6, (a1 >> 3) & 1, a2);
  sub_22648EBF8(6, 5, (a1 >> 3) & 1, a2);
  sub_22648EBF8(2, 3, (a1 >> 1) & 1, a2);
  sub_22648EBF8(3, 2, (a1 >> 1) & 1, a2);
  sub_22648EBF8(6, 7, (a1 >> 1) & 1, a2);
  sub_22648EBF8(7, 6, (a1 >> 1) & 1, a2);
  sub_22648EBF8(2, 6, (a1 >> 1) & 1, a2);
  sub_22648EBF8(6, 2, (a1 >> 1) & 1, a2);
  sub_22648EBF8(3, 7, (a1 >> 1) & 1, a2);
  sub_22648EBF8(7, 3, (a1 >> 1) & 1, a2);
  v4 = (a1 >> 2) & 1;
  sub_22648EBF8(0, 3, v4, a2);
  sub_22648EBF8(3, 0, v4, a2);
  sub_22648EBF8(4, 7, v4, a2);
  sub_22648EBF8(7, 4, v4, a2);
}

void (*sub_22648CD94(_QWORD *a1, uint64_t a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_2264906E0(v4, a2);
  return sub_22648CDE0;
}

void (*sub_22648CDE4(_QWORD *a1, unsigned __int8 a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_226490760(v4, a2);
  return sub_22648CDE0;
}

void sub_22648CE30(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_22648CE60(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  float *v16;
  float v17;
  double v18;
  double v19;
  double v20;
  void (*v21)(char *, uint64_t);
  double v22;
  float v23;
  uint64_t result;
  char *v25;
  char v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  _QWORD *v46;
  simd_float4x4 v47;
  simd_float4x4 v48;

  v7 = v6;
  v44 = a5;
  v45 = a6;
  v42 = a3;
  v43 = a4;
  v41 = a2;
  v9 = sub_22655C0E0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - v14;
  if (qword_25583F9D0 != -1)
LABEL_28:
    swift_once();
  v16 = (float *)off_25584AF28;
  swift_beginAccess();
  v17 = v16[17];
  sub_22648E43C((uint64_t)v15);
  if (v17 <= 0.0)
  {
    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23 = 1.0;
  }
  else
  {
    v18 = v17;
    sub_22655C0C8();
    sub_22655C0A4();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v12, v9);
    v22 = v20 / v18;
    v23 = 0.0;
    if (v22 > 0.0)
    {
      if (v22 > 1.0)
        v22 = 1.0;
      v23 = v22;
    }
  }
  v21(v15, v9);
  *(float *)(v7 + 16) = v23;
  v47.columns[0] = (simd_float4)v41;
  v47.columns[1] = (simd_float4)v42;
  v47.columns[2] = (simd_float4)v43;
  v47.columns[3] = (simd_float4)v44;
  v48 = __invert_f4(v47);
  v43 = (__n128)v48.columns[1];
  v44 = (__n128)v48.columns[0];
  v41 = (__n128)v48.columns[3];
  v42 = (__n128)v48.columns[2];
  result = type metadata accessor for AnimationGraph();
  v25 = *(char **)(*(_QWORD *)(v7 + *(int *)(result + 44)) + 16);
  if (v25)
  {
    v15 = 0;
    v9 = 0;
    do
    {
      if (!*(_QWORD *)(*(_QWORD *)(v7 + 40) + 16))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      sub_226534A10((uint64_t)v15);
      if ((v26 & 1) == 0)
        goto LABEL_25;
      swift_bridgeObjectRetain();
      v27 = swift_bridgeObjectRetain();
      v12 = (char *)sub_226490B58(v27, a1, v7, (unint64_t)v15, v44, v43, v42, v41, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46 = *(_QWORD **)(v7 + 40);
      v29 = v46;
      *(_QWORD *)(v7 + 40) = 0x8000000000000000;
      v31 = sub_226534A10((uint64_t)v15);
      v32 = v29[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_26;
      v10 = v30;
      if (v29[3] >= v34)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_226548918();
      }
      else
      {
        sub_226542B08(v34, isUniquelyReferenced_nonNull_native);
        v35 = sub_226534A10((uint64_t)v15);
        if ((v10 & 1) != (v36 & 1))
        {
          result = sub_22655D5A4();
          __break(1u);
          return result;
        }
        v31 = v35;
      }
      v37 = v46;
      if ((v10 & 1) != 0)
      {
        v10 = v46[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v10 + 8 * v31) = v12;
      }
      else
      {
        v46[(v31 >> 6) + 8] |= 1 << v31;
        *(_QWORD *)(v37[6] + 8 * v31) = v15;
        *(_QWORD *)(v37[7] + 8 * v31) = v12;
        v38 = v37[2];
        v39 = __OFADD__(v38, 1);
        v40 = v38 + 1;
        if (v39)
          goto LABEL_27;
        v37[2] = v40;
      }
      ++v15;
      *(_QWORD *)(v7 + 40) = v37;
      result = swift_bridgeObjectRelease();
    }
    while (v25 != v15);
  }
  return result;
}

uint64_t sub_22648D190@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v6 = a1;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = MEMORY[0x24BEE4B00];
  v7 = type metadata accessor for AnimationGraph();
  v8 = a3 + *(int *)(v7 + 40);
  v9 = sub_22655C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)(a3 + *(int *)(v7 + 44)) = &unk_24EDDE948;
  *(_BYTE *)a3 = a1;
  if (v6 == 3)
  {
    sub_226558778(a2);
  }
  else if (qword_25583F8D8 != -1)
  {
LABEL_19:
    swift_once();
  }
  *(_QWORD *)(a3 + 8) = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *(_QWORD **)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0x8000000000000000;
    v17 = sub_226534A10(v10);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v21 = v16;
    if (v15[3] < v20)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_226548918();
LABEL_13:
    if ((v21 & 1) != 0)
    {
      v12 = v15[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v12 + 8 * v17) = v11;
    }
    else
    {
      v15[(v17 >> 6) + 8] |= 1 << v17;
      *(_QWORD *)(v15[6] + 8 * v17) = v10;
      *(_QWORD *)(v15[7] + 8 * v17) = v11;
      v24 = v15[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_18;
      v15[2] = v26;
    }
    ++v10;
    *(_QWORD *)(a3 + 40) = v15;
    result = swift_bridgeObjectRelease();
    if (v10 == 8)
      return result;
  }
  sub_226542B08(v20, isUniquelyReferenced_nonNull_native);
  v22 = sub_226534A10(v10);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    goto LABEL_13;
  }
  result = sub_22655D5A4();
  __break(1u);
  return result;
}

uint64_t sub_22648D3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  float v7;
  uint64_t v8;
  float v9;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AnimationGraph() + 44));
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  v5 = v1 + 34;
  v6 = 1;
  v7 = 3.4028e38;
  do
  {
    v5 += 5;
    v8 = v4 + 1;
    sub_22655D604();
    if (v9 < v7)
      v3 = v4;
    v6 &= v9 >= v7;
    if (v9 < v7)
      v7 = v9;
    ++v4;
  }
  while (v2 != v8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_22648D4F4(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9[2];

  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_2264CA51C(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v9[0] = v5 + 32;
  v9[1] = v6;
  result = sub_22648FB64(v9, a2, a3);
  *a1 = v5;
  return result;
}

uint64_t sub_22648D56C(float32x4_t *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  float32x4_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int8 v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  __int8 v38;
  float32x4_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;
  __int128 v65;
  uint64_t v66;
  float32x4_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  float32x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  float32x4_t v87;
  __int128 v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t v93;
  char *v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t *v99;
  uint64_t v100;

  v97 = a8;
  v98 = a9;
  v95 = a7;
  v93 = a6;
  v96 = a5;
  v91 = a4;
  v90 = a3;
  v89 = a2;
  v86 = type metadata accessor for LineAnimation();
  v10 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v73 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v74 = (uint64_t)&v73 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v99 = (float32x4_t *)((char *)&v73 - v19);
  MEMORY[0x24BDAC7A8](v20);
  v92 = (uint64_t)&v73 - v21;
  v22 = swift_bridgeObjectRetain();
  v23 = sub_226467830(v22);
  result = swift_bridgeObjectRelease();
  v85 = *(_QWORD *)(v23 + 16);
  if (v85)
  {
    v25 = 0;
    v26 = v98;
    v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v89.f32[0]), v95, *(float32x2_t *)v89.f32, 1), v97, v89, 2), v98, v89, 3);
    v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v90.f32[0]), v95, *(float32x2_t *)v90.f32, 1), v97, v90, 2), v98, v90, 3);
    v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v91.f32[0]), v95, *(float32x2_t *)v91.f32, 1), v97, v91, 2), v98, v91, 3);
    v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v96.f32[0]), v95, *(float32x2_t *)v96.f32, 1), v97, v96, 2), v98, v96, 3);
    v80 = a1[1].i64[0];
    v95.i64[0] = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v79 = v23 + v95.i64[0];
    v27 = MEMORY[0x24BEE4AF8];
    v76 = a1 + 2;
    v28 = xmmword_22655FA10;
    v73 = xmmword_22655FA10;
    v77 = v10;
    v94 = v12;
    v78 = v23;
    while (v25 < *(_QWORD *)(v23 + 16))
    {
      v29 = *(_QWORD *)(v10 + 72);
      v93.i64[0] = v25;
      v98.i64[0] = v29;
      v30 = v92;
      v96 = (float32x4_t)v28;
      v97 = v26;
      sub_226453518(v79 + v29 * v25, v92);
      v31 = *(float32x4_t *)(v30 + 48);
      v32 = vaddq_f32(v81, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, COERCE_FLOAT(*(_OWORD *)(v30 + 32))), v83, *(float32x2_t *)(v30 + 32), 1), v82, *(float32x4_t *)(v30 + 32), 2));
      v91 = v32;
      v32.i32[3] = v96.i32[3];
      v33 = vaddq_f32(v81, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v31.f32[0]), v83, *(float32x2_t *)v31.f32, 1), v82, v31, 2));
      v90 = v33;
      v33.i32[3] = v97.i32[3];
      v88 = (__int128)v32;
      v32.i32[2] = 0;
      v97 = v32;
      v87 = v33;
      v33.i32[2] = 0;
      v96 = v33;
      v34 = *(_BYTE *)v30;
      v35 = *(_QWORD *)(v30 + 8);
      v36 = *(_QWORD *)(v30 + 16);
      v37 = *(_DWORD *)(v30 + 64);
      v89 = *(float32x4_t *)(v30 + 80);
      v38 = *(_BYTE *)(v30 + 104);
      v39 = v99;
      v40 = (uint64_t)v99 + *(int *)(v86 + 60);
      v41 = *(_QWORD *)(v30 + 96);
      sub_226452A98(v40);
      v42 = sub_22655C0E0();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v40, 0, 1, v42);
      v39->i8[0] = v34;
      v39->i64[1] = v35;
      v39[1].i64[0] = v36;
      v43 = v96;
      v39[2] = v97;
      v39[3] = v43;
      v39[4].i32[0] = v37;
      v39[5] = v89;
      v39[6].i64[0] = v41;
      v39[6].i8[8] = v38;
      v44 = MEMORY[0x24BEE4AF8];
      v39[7].i64[0] = MEMORY[0x24BEE4AF8];
      v45 = v80;
      if (v80)
      {
        v100 = v44;
        sub_2264C79C4(0, v80, 0);
        v46 = v100;
        v47 = *(_QWORD *)(v100 + 16);
        v48 = v76;
        do
        {
          v49 = *v48;
          v100 = v46;
          v50 = *(_QWORD *)(v46 + 24);
          if (v47 >= v50 >> 1)
          {
            v89 = v49;
            sub_2264C79C4(v50 > 1, v47 + 1, 1);
            v49.i64[0] = v89.i64[0];
            v46 = v100;
          }
          *(_QWORD *)(v46 + 16) = v47 + 1;
          *(_QWORD *)(v46 + 8 * v47 + 32) = v49.i64[0];
          ++v48;
          ++v47;
          --v45;
        }
        while (v45);
        v51 = (uint64_t)v99;
        v44 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v51 = (uint64_t)v39;
        v46 = v44;
      }
      type metadata accessor for CDTPolygon();
      swift_initStackObject();
      v52 = sub_2264EA930(v46);
      type metadata accessor for CDTEdge();
      swift_initStackObject();
      v53 = sub_226495C8C(*(double *)v91.i64, *(double *)v90.i64);
      v54 = sub_2264EADEC();
      v55 = (uint64_t)v94;
      v56 = v93.i64[0];
      if ((v54 & 1) != 0
        && (sub_226453EFC(v52, 0.00000011921, *(double *)(v53 + 16)) & 1) != 0
        && (sub_226453EFC(v52, 0.00000011921, *(double *)(v53 + 24)) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
        v57 = swift_allocObject();
        v58 = v97;
        *(_OWORD *)(v57 + 16) = v73;
        *(float32x4_t *)(v57 + 32) = v58;
        *(float32x4_t *)(v57 + 48) = v96;
        *(_QWORD *)(v51 + 112) = v57;
        sub_226453518(v51, v74);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = sub_226487704(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
        v60 = *(_QWORD *)(v27 + 16);
        v59 = *(_QWORD *)(v27 + 24);
        if (v60 >= v59 >> 1)
          v27 = sub_226487704(v59 > 1, v60 + 1, 1, v27);
        *(_QWORD *)(v27 + 16) = v60 + 1;
        sub_226490CC0(v74, v27 + v95.i64[0] + v60 * v98.i64[0]);
        swift_release();
        swift_release();
        sub_22645355C(v92);
      }
      else
      {
        result = sub_2264EB184(v53);
        v61 = result;
        v97.i64[0] = *(_QWORD *)(result + 16);
        if (v97.i64[0])
        {
          v90.i64[0] = v53;
          v91.i64[0] = v52;
          v62 = 0;
          v96.i64[0] = result + 32;
          while (v62 < *(_QWORD *)(v61 + 16))
          {
            v63 = *(_QWORD *)(v96.i64[0] + 8 * v62);
            sub_226453518(v51, (uint64_t)v15);
            v64 = *(_QWORD *)(v63 + 16);
            if (v64)
            {
              v100 = v44;
              swift_bridgeObjectRetain();
              sub_2264C1310(0, v64, 0);
              v66 = 0;
              v67 = *(float32x4_t *)(v51 + 32);
              v68 = v100;
              v69 = *(_QWORD *)(v100 + 16);
              do
              {
                *(_QWORD *)&v65 = *(_QWORD *)(v63 + 8 * v66 + 32);
                v100 = v68;
                v70 = *(_QWORD *)(v68 + 24);
                if (v69 >= v70 >> 1)
                {
                  v89 = v67;
                  v75 = v65;
                  sub_2264C1310(v70 > 1, v69 + 1, 1);
                  v65 = v75;
                  v67 = v89;
                  v68 = v100;
                }
                DWORD2(v65) = v67.i32[2];
                ++v66;
                *(_QWORD *)(v68 + 16) = v69 + 1;
                *(_OWORD *)(v68 + 16 * v69++ + 32) = v65;
              }
              while (v64 != v66);
              swift_bridgeObjectRelease();
              v55 = (uint64_t)v94;
              v44 = MEMORY[0x24BEE4AF8];
            }
            else
            {
              v68 = v44;
            }
            swift_bridgeObjectRelease();
            *((_QWORD *)v15 + 14) = v68;
            sub_226453518((uint64_t)v15, v55);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v27 = sub_226487704(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
            v51 = (uint64_t)v99;
            v72 = *(_QWORD *)(v27 + 16);
            v71 = *(_QWORD *)(v27 + 24);
            if (v72 >= v71 >> 1)
              v27 = sub_226487704(v71 > 1, v72 + 1, 1, v27);
            ++v62;
            *(_QWORD *)(v27 + 16) = v72 + 1;
            sub_226490CC0(v55, v27 + v95.i64[0] + v72 * v98.i64[0]);
            result = sub_22645355C((uint64_t)v15);
            if (v62 == v97.i64[0])
            {
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_22645355C(v92);
              v10 = v77;
              v56 = v93.i64[0];
              goto LABEL_3;
            }
          }
          __break(1u);
          break;
        }
        sub_22645355C(v92);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v10 = v77;
      }
LABEL_3:
      v25 = v56 + 1;
      result = sub_22645355C(v51);
      v23 = v78;
      v28 = v88;
      v26 = v87;
      if (v25 == v85)
      {
        swift_bridgeObjectRelease();
        return v27;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t sub_22648DE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __n128 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned __int8 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int32 v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  float32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  __n128 v79;
  float32x4_t v80;
  __n128 v81;
  __n128 v82;
  _BYTE v83[24];
  float32x4_t v84;
  float32x2_t v85;
  float v86;
  char v87;
  simd_float4x4 v88;
  simd_float4x4 v89;
  simd_float4x4 v90;
  simd_float4x4 v91;

  v7 = type metadata accessor for LineAnimation();
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (__n128 *)((char *)&v68 - v9);
  MEMORY[0x24BDAC7A8](v11);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) != 3)
    return MEMORY[0x24BEE4AF8];
  v78 = (uint64_t)&v68 - v12;
  v74.i64[0] = v3;
  v71 = v14;
  v69 = v13;
  v15 = (float32x2_t *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  v16 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  v17 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  v81 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  v73.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation;
  v18 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  v82 = (__n128)xmmword_22655FA70;
  *(double *)v19.i64 = MEMORY[0x227699714](v17, v18);
  v80 = v19;
  v79 = (__n128)v20;
  v77 = v21;
  v76 = v22;
  v75 = *(float32x4_t *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  v23 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  v24 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation;
  *(double *)v25.i64 = MEMORY[0x227699714](*(__n128 *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition), *(__n128 *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation), v82);
  sub_226464C40(a3, (uint64_t)v83, (float32x4_t)v81, v80, (float32x4_t)v79, v77, v76, v75, v25, v26, v27, v28);
  v29 = sub_226490D3C((uint64_t)v83, (uint64_t)&v84);
  if ((v87 & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  v30.n128_u64[0] = (unint64_t)vdiv_f32(v85, *v15);
  v30.n128_f32[2] = v86 / v15[1].f32[0];
  v30.n128_u32[3] = 0;
  v80 = v84;
  v81 = v30;
  *(double *)v31.i64 = MEMORY[0x227699714](v29, *(__n128 *)(a2 + v23), *(__n128 *)(a2 + v24), v82);
  v80 = vaddq_f32(v34, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v80.f32[0]), v32, *(float32x2_t *)v80.f32, 1), v33, v80, 2));
  v35 = v73.i64[0];
  *(double *)v88.columns[0].i64 = MEMORY[0x227699714](*(__n128 *)(a1 + v16), *(__n128 *)(a1 + v73.i64[0]), v82);
  v89 = __invert_f4(v88);
  *(double *)v36.i64 = MEMORY[0x227699714]((__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v89.columns[0], v80.f32[0]), (float32x4_t)v89.columns[1], *(float32x2_t *)v80.f32, 1), (float32x4_t)v89.columns[2], v80, 2), (float32x4_t)v89.columns[3], v80, 3), (__n128)xmmword_22655FA60, v81);
  v76 = v36;
  v79 = (__n128)v37;
  v80 = v38;
  v81 = v39;
  *(double *)v90.columns[0].i64 = MEMORY[0x227699714](*(__n128 *)(a2 + v23), *(__n128 *)(a2 + v24), v82);
  v91 = __invert_f4(v90);
  v68 = (float32x4_t)v91.columns[0];
  v70 = (float32x4_t)v91.columns[1];
  v72 = (float32x4_t)v91.columns[2];
  v75 = (float32x4_t)v91.columns[3];
  MEMORY[0x227699714](*(__n128 *)(a1 + v16), *(__n128 *)(a1 + v35), v82);
  v82 = v40;
  v41 = swift_bridgeObjectRetain();
  v42 = sub_226467830(v41);
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v42 + 16);
  if (!v43)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v77.i64[0] = v7;
  v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v82.n128_f32[0]), v70, (float32x2_t)v82.n128_u64[0], 1), v72, (float32x4_t)v82, 2), v75, (float32x4_t)v82, 3);
  v44.i32[3] = 1.0;
  v76 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2265600A0, v76.f32[0]), (float32x4_t)xmmword_2265600C0, *(float32x2_t *)v76.f32, 1), (float32x4_t)xmmword_226560080, v76, 2), v44, v76, 3);
  v75 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2265600A0, v79.n128_f32[0]), (float32x4_t)xmmword_2265600C0, (float32x2_t)v79.n128_u64[0], 1), (float32x4_t)xmmword_226560080, (float32x4_t)v79, 2), v44, (float32x4_t)v79, 3);
  v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2265600A0, v80.f32[0]), (float32x4_t)xmmword_2265600C0, *(float32x2_t *)v80.f32, 1), (float32x4_t)xmmword_226560080, v80, 2), v44, v80, 3);
  v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2265600A0, v81.n128_f32[0]), (float32x4_t)xmmword_2265600C0, (float32x2_t)v81.n128_u64[0], 1), (float32x4_t)xmmword_226560080, (float32x4_t)v81, 2), v44, (float32x4_t)v81, 3);
  v45 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  v68.i64[0] = v42;
  v72.i64[0] = v45;
  v46 = v42 + v45;
  v71 = *(_QWORD *)(v71 + 72);
  v47 = MEMORY[0x24BEE4AF8];
  v70 = (float32x4_t)xmmword_22655FA10;
  v48 = v69;
  v49 = v78;
  do
  {
    v80.i64[0] = v43;
    sub_226453518(v46, v49);
    v50 = *(float32x4_t *)(v49 + 48);
    v51 = vaddq_f32(v73, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(_OWORD *)(v49 + 32))), v75, *(float32x2_t *)(v49 + 32), 1), v74, *(float32x4_t *)(v49 + 32), 2));
    v51.i32[3] = v82.n128_i32[3];
    v82 = (__n128)v51;
    v52 = vaddq_f32(v73, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v50.f32[0]), v75, *(float32x2_t *)v50.f32, 1), v74, v50, 2));
    v52.i32[3] = v81.n128_i32[3];
    v81 = (__n128)v52;
    v53 = *(_BYTE *)v49;
    v55 = *(_QWORD *)(v49 + 8);
    v54 = *(_QWORD *)(v49 + 16);
    v56 = *(_DWORD *)(v49 + 64);
    v79 = *(__n128 *)(v49 + 80);
    v57 = *(_BYTE *)(v49 + 104);
    v58 = (uint64_t)v10 + *(int *)(v77.i64[0] + 60);
    v59 = *(_QWORD *)(v49 + 96);
    sub_226452A98(v58);
    v60 = sub_22655C0E0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v58, 0, 1, v60);
    v10->n128_u8[0] = v53;
    v10->n128_u64[1] = v55;
    v10[1].n128_u64[0] = v54;
    v61 = v81;
    v10[2] = v82;
    v10[3] = v61;
    v10[4].n128_u32[0] = v56;
    v10[5] = v79;
    v10[6].n128_u64[0] = v59;
    v10[6].n128_u8[8] = v57;
    __swift_instantiateConcreteTypeFromMangledName(&qword_255840A78);
    v62 = swift_allocObject();
    v63 = v82;
    *(float32x4_t *)(v62 + 16) = v70;
    *(__n128 *)(v62 + 32) = v63;
    *(__n128 *)(v62 + 48) = v81;
    v10[7].n128_u64[0] = v62;
    sub_226453518((uint64_t)v10, v48);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v47 = sub_226487704(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
    v65 = *(_QWORD *)(v47 + 16);
    v64 = *(_QWORD *)(v47 + 24);
    if (v65 >= v64 >> 1)
      v47 = sub_226487704(v64 > 1, v65 + 1, 1, v47);
    *(_QWORD *)(v47 + 16) = v65 + 1;
    v66 = v71;
    sub_226490CC0(v48, v47 + v72.i64[0] + v65 * v71);
    v49 = v78;
    sub_22645355C(v78);
    sub_22645355C((uint64_t)v10);
    v46 += v66;
    v43 = v80.i64[0] - 1;
  }
  while (v80.i64[0] != 1);
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t sub_22648E43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_255841200);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + *(int *)(type metadata accessor for AnimationGraph() + 40);
  sub_2264533E8(v6, (uint64_t)v5);
  v7 = sub_22655C0E0();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  sub_2264533A8((uint64_t)v5);
  sub_22655C0C8();
  sub_2264533A8(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
}

void sub_22648E548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, float32x2_t a6@<D4>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_226453518(a1, a5);
  if (*(_QWORD *)(a2 + 16))
  {
    sub_226534A0C(*(_BYTE *)(a1 + 104));
    if ((v11 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  v12 = type metadata accessor for AnimationGraph();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(a3 + *(int *)(v12 + 44));
    v14 = *(_QWORD *)(v13 + 16);
    if (v14 > a4)
    {
      v15 = *(_QWORD *)(a5 + 16);
      if (v15 < v14)
      {
        v38 = a3;
        v16 = v13 + 32;
        v17 = (unsigned __int8 *)(v16 + 5 * a4);
        v18 = v17[4];
        v19 = v17[3];
        v20 = v17[2];
        v21 = v17[1];
        v22 = *v17;
        v23 = (unsigned __int8 *)(v16 + 5 * v15);
        v24 = *v23;
        v25 = v23[1];
        v26 = v23[2];
        v27 = v23[3];
        v28 = v23[4];
        if (v18)
          v29 = 0x100000000;
        else
          v29 = 0;
        if (v19)
          v30 = 0x1000000;
        else
          v30 = 0;
        v31 = v30 | v29;
        if (v20)
          v32 = 0x10000;
        else
          v32 = 0;
        if (v21)
          v33 = 256;
        else
          v33 = 0;
        sub_22646389C(v31 | v32 | v33 | v22, a6);
        if (v28)
          v34 = 0x100000000;
        else
          v34 = 0;
        if (v27)
          v35 = 0x1000000;
        else
          v35 = 0;
        if (v26)
          v36 = 0x10000;
        else
          v36 = 0;
        if (v25)
          v37 = 256;
        else
          v37 = 0;
        sub_22646389C(v37 | v24 | v36 | v35 | v34, a6);
        if (qword_25583F9D0 == -1)
LABEL_32:
          __asm { BR              X11 }
LABEL_36:
        swift_once();
        goto LABEL_32;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  __break(1u);
  goto LABEL_35;
}

uint64_t sub_22648E824(unint64_t a1, unint64_t a2, int a3, unsigned __int8 *a4, __n128 a5, float a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  void (*v27)(_QWORD *);
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  char *v64;
  __n128 v65;
  unint64_t v66;
  char *v67;
  __n128 v68;
  _QWORD v69[4];

  v8 = v7;
  LODWORD(v67) = a3;
  v65 = a7;
  v68 = a5;
  v66 = a2;
  v12 = type metadata accessor for LineAnimation();
  v13 = *(char **)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v63 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v63 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v63 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (__n128 *)((char *)&v63 - v25);
  v27 = (void (*)(_QWORD *))*a4;
  v28 = type metadata accessor for AnimationGraph();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v29 = *(_QWORD *)(v8 + *(int *)(v28 + 44));
  if (*(_QWORD *)(v29 + 16) <= a1)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v30 = (unsigned __int8 *)(v29 + 5 * a1);
  v31 = v30[32];
  v32 = v30[33];
  v33 = v30[34];
  v34 = v30[35];
  v35 = v30[36] == 0;
  v36 = 0x100000000;
  if (v35)
    v36 = 0;
  v35 = v34 == 0;
  v37 = 0x1000000;
  if (v35)
    v37 = 0;
  v35 = v33 == 0;
  v38 = 0x10000;
  if (v35)
    v38 = 0;
  v35 = v32 == 0;
  v39 = 256;
  if (v35)
    v39 = 0;
  v40.n128_f32[0] = sub_22646389C(v39 | v31 | v38 | v37 | v36, (float32x2_t)v65.n128_u64[0]);
  v65 = v40;
  v41 = (char *)v26 + *(int *)(v12 + 60);
  v42 = sub_22655C0E0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v26->n128_u8[0] = v67 & 1;
  v43 = v66;
  v26->n128_u64[1] = a1;
  v26[1].n128_u64[0] = v43;
  v44 = v65;
  v26[2] = v65;
  v26[3] = v44;
  v26[4].n128_f32[0] = a6;
  v26[5] = v68;
  v26[6].n128_u64[0] = 0x3F80000000000000;
  v26[6].n128_u8[8] = v27;
  v26[7].n128_u64[0] = MEMORY[0x24BEE4AF8];
  v47 = *(_QWORD *)(v8 + 40);
  v46 = v8 + 40;
  v45 = v47;
  if (*(_QWORD *)(v47 + 16))
  {
    v48 = sub_226534A10(a1);
    if ((v49 & 1) != 0)
    {
      v50 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v48);
      v51 = *(_QWORD *)(v50 + 16);
      if (v51)
      {
        v66 = v46;
        v67 = v13;
        v52 = v50 + ((v13[80] + 32) & ~(unint64_t)v13[80]);
        v53 = *((_QWORD *)v13 + 9);
        v68.n128_u64[0] = v50;
        swift_bridgeObjectRetain();
        do
        {
          sub_226453518(v52, (uint64_t)v23);
          v54 = *((_QWORD *)v23 + 1);
          v55 = v26->n128_u64[1];
          sub_226453518((uint64_t)v23, (uint64_t)v20);
          sub_226453518((uint64_t)v26, (uint64_t)v17);
          if (v54 == v55)
          {
            v56 = *((_QWORD *)v20 + 2);
            sub_22645355C((uint64_t)v20);
            v57 = *((_QWORD *)v17 + 2);
            sub_22645355C((uint64_t)v17);
            sub_22645355C((uint64_t)v23);
            if (v56 == v57)
            {
              swift_bridgeObjectRelease();
              return sub_22645355C((uint64_t)v26);
            }
          }
          else
          {
            sub_22645355C((uint64_t)v17);
            sub_22645355C((uint64_t)v20);
            sub_22645355C((uint64_t)v23);
          }
          v52 += v53;
          --v51;
        }
        while (v51);
        swift_bridgeObjectRelease();
        v13 = v67;
      }
      v20 = v13;
      v27 = sub_22648CD94(v69, a1);
      if (!*(_QWORD *)v58)
        goto LABEL_30;
      v13 = v58;
      v23 = v64;
      sub_226453518((uint64_t)v26, (uint64_t)v64);
      a1 = *(_QWORD *)v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v13 = a1;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_27:
        v61 = *(_QWORD *)(a1 + 16);
        v60 = *(_QWORD *)(a1 + 24);
        if (v61 >= v60 >> 1)
        {
          a1 = sub_226487704(v60 > 1, v61 + 1, 1, a1);
          *(_QWORD *)v13 = a1;
        }
        *(_QWORD *)(a1 + 16) = v61 + 1;
        sub_226490CC0((uint64_t)v23, a1+ ((v20[80] + 32) & ~(unint64_t)v20[80])+ *((_QWORD *)v20 + 9) * v61);
LABEL_30:
        ((void (*)(_QWORD *, _QWORD))v27)(v69, 0);
        return sub_22645355C((uint64_t)v26);
      }
LABEL_34:
      a1 = sub_226487704(0, *(_QWORD *)(a1 + 16) + 1, 1, a1);
      *(_QWORD *)v13 = a1;
      goto LABEL_27;
    }
  }
  return sub_22645355C((uint64_t)v26);
}

void sub_22648EBF8(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD v33[2];
  uint64_t v34;
  int v35;
  __n128 v36;

  v5 = v4;
  v36 = a4;
  v9 = type metadata accessor for LineAnimation();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t)v33 - v14;
  v16 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_226534A10(a1), (v18 & 1) != 0))
  {
    v35 = a3;
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v33[1] = v19;
      v34 = v5;
      v21 = v19 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v22 = *(_QWORD *)(v10 + 72);
      swift_bridgeObjectRetain();
      for (i = 0; i != v20; ++i)
      {
        sub_226453518(v21, v15);
        v24 = *(_QWORD *)(v15 + 8);
        sub_226453518(v15, (uint64_t)v12);
        if (v24 == a1)
        {
          v25 = *((_QWORD *)v12 + 2);
          sub_22645355C((uint64_t)v12);
          sub_22645355C(v15);
          if (v25 == a2)
          {
            v26 = 0;
            goto LABEL_12;
          }
        }
        else
        {
          sub_22645355C((uint64_t)v12);
          sub_22645355C(v15);
        }
        v21 += v22;
      }
      i = 0;
      v26 = 1;
LABEL_12:
      swift_bridgeObjectRelease();
      v5 = v34;
    }
    else
    {
      i = 0;
      v26 = 1;
    }
    LOBYTE(a3) = v35;
  }
  else
  {
    i = 0;
    v26 = 1;
  }
  v27 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v27 + 16))
  {
    v28 = sub_226534A10(a1);
    if ((v29 & 1) != 0 && (v26 & 1) == 0)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
      if (i >= *(_QWORD *)(v30 + 16))
      {
        __break(1u);
LABEL_34:
        swift_once();
LABEL_21:
        v32 = off_25584AF28;
        swift_beginAccess();
        if (v32[64] == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = sub_2264C11D8(v30);
          if (i < *(_QWORD *)(v30 + 16))
            goto LABEL_30;
          __break(1u);
        }
        if (i >= *(_QWORD *)(v30 + 16))
        {
          __break(1u);
        }
        else
        {
          if ((*(_BYTE *)(v26 + v15) & 1) != 0)
            goto LABEL_31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            goto LABEL_29;
        }
        v30 = sub_2264C11D8(v30);
LABEL_29:
        if (i >= *(_QWORD *)(v30 + 16))
        {
          __break(1u);
          JUMPOUT(0x22648EF9CLL);
        }
LABEL_30:
        v12[v30 + v15] = a3 & 1;
LABEL_31:
        __asm { BR              X10 }
      }
      v12 = (char *)((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v26 = (uint64_t)&v12[v30];
      v15 = *(_QWORD *)(v10 + 72) * i;
      if (v12[v30 + v15] != (a3 & 1))
      {
        v31 = qword_25583F9D0;
        swift_bridgeObjectRetain();
        if (v31 == -1)
          goto LABEL_21;
        goto LABEL_34;
      }
    }
  }
}

uint64_t sub_22648EFB8(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  char *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float32x4_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  float v43;
  float v44;
  float v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  float32x2_t v55;
  __n128 v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  float32x4_t v66;
  float32x2_t v67;
  uint64_t v68;
  float v69;
  float v70;
  __n128 v71;
  int v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78[2];

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = type metadata accessor for AnimationGraph();
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v5 = *(int *)(v4 + 44);
  v6 = *(_QWORD *)(v1 + v5);
  if (v3 < *(_QWORD *)(v6 + 16))
  {
    v7 = (unsigned __int8 *)(v6 + 5 * v3);
    v8 = v7[32];
    v9 = v7[33];
    v10 = v7[34];
    v11 = -1.0;
    if (v8)
      v12 = 1.0;
    else
      v12 = -1.0;
    if (v9)
      v13 = 1.0;
    else
      v13 = -1.0;
    v14.n128_u32[3] = 0;
    v76 = v13;
    v77 = v12;
    v14.n128_f32[0] = v12;
    if (v10)
      v11 = 1.0;
    v14.n128_f32[1] = v13;
    v14.n128_f32[2] = v11;
    v71 = v14;
    v75 = v11;
    v15 = *(_QWORD *)(v1 + 8);
    swift_bridgeObjectRetain_n();
    v16 = sub_226536170(v15);
    swift_bridgeObjectRelease();
    v78[0] = (uint64_t)v16;
    sub_22648D4F4(v78, v2, v71);
    swift_bridgeObjectRelease();
    v17 = v78[0];
    v60 = *(_QWORD *)(v78[0] + 16);
    if (!v60)
      return swift_release();
    v18 = 0;
    v61 = *(_QWORD *)(v2 + 8);
    v62 = v78[0] + 32;
    __asm { FMOV            V10.2S, #1.0 }
    v65 = v2;
    v58 = v5;
    v59 = v78[0];
    while (v18 < *(_QWORD *)(v17 + 16))
    {
      v24 = *(_QWORD *)(v62 + 8 * v18);
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_67;
      v25 = *(char **)(v2 + v5);
      if (v24 >= *((_QWORD *)v25 + 2))
        goto LABEL_68;
      v63 = v18;
      v26 = (unsigned __int8 *)&v25[5 * v24];
      v27 = v26[32];
      v28 = v26[33];
      v72 = v26[34];
      v29 = v26[36];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = sub_2264C11C4((uint64_t)v25);
      if (v24 >= *((_QWORD *)v25 + 2))
        goto LABEL_69;
      v30 = &v25[5 * v24 + 32];
      *v30 = v27;
      v30[1] = v28;
      v30[2] = v72;
      v30[3] = 1;
      v30[4] = v29;
      *(_QWORD *)(v2 + v5) = v25;
      if (!*(_QWORD *)(v61 + 16))
        return swift_release();
      v31 = sub_226534A10(v24);
      if ((v32 & 1) == 0)
        return swift_release();
      v33 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v31);
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
      {
        if (v27)
          v35 = 1.0;
        else
          v35 = -1.0;
        if (v28)
          v36 = 1.0;
        else
          v36 = -1.0;
        if (v72)
          v37 = 1.0;
        else
          v37 = -1.0;
        v38.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v35));
        v38.i64[1] = LODWORD(v37);
        v66 = v38;
        v39 = (float)(vabds_f32(v35, v77) + vabds_f32(v36, v76)) + vabds_f32(v37, v75);
        swift_bridgeObjectRetain();
        v40 = 0;
        while (1)
        {
          v41 = *(_QWORD *)(v33 + 8 * v40 + 32);
          if (v41 < 0)
            break;
          if ((unint64_t)v41 >= *((_QWORD *)v25 + 2))
            goto LABEL_63;
          v42 = &v25[5 * v41 + 32];
          if ((v42[3] & 1) == 0)
          {
            if (*v42)
              v43 = 1.0;
            else
              v43 = -1.0;
            if (v42[1])
              v44 = 1.0;
            else
              v44 = -1.0;
            if (v42[2])
              v45 = 1.0;
            else
              v45 = -1.0;
            v46.i64[0] = __PAIR64__(LODWORD(v44), LODWORD(v43));
            v46.i64[1] = LODWORD(v45);
            if (v39 >= (float)(vabds_f32(v45, v75) + (float)(vabds_f32(v44, v76) + vabds_f32(v43, v77))))
            {
              v47 = v24;
              v48 = v66;
            }
            else
            {
              v47 = *(_QWORD *)(v33 + 8 * v40 + 32);
              v41 = v24;
              v48 = v46;
              v46 = v66;
            }
            v49 = vsubq_f32(v46, v48);
            v50 = fabsf(v49.f32[2]);
            if (v50 <= 1.0)
              v51 = v50;
            else
              v51 = 1.0;
            if (qword_25583F900 == -1)
            {
              if (v41 > 0x7FFFFFFF)
                goto LABEL_64;
            }
            else
            {
              v70 = v51;
              v74 = v46;
              v68 = v49.i64[0];
              swift_once();
              v49.i64[0] = v68;
              v51 = v70;
              v46 = v74;
              if (v41 > 0x7FFFFFFF)
                goto LABEL_64;
            }
            if (v47 > 0x7FFFFFFF)
              goto LABEL_65;
            v52 = qword_25585AEB0;
            if (*(_QWORD *)(qword_25585AEB0 + 16))
            {
              v69 = v51;
              v73 = v46;
              v67 = *(float32x2_t *)v49.f32;
              v53 = sub_226534B00((int32x2_t)__PAIR64__(v47, v41));
              if ((v54 & 1) != 0)
              {
                v55 = vabs_f32(v67);
                v56.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_f32(v55, _D10), (int8x8_t)_D10, (int8x8_t)v55);
                v56.n128_u64[1] = LODWORD(v69);
                LOBYTE(v78[0]) = *(_BYTE *)(*(_QWORD *)(v52 + 56) + v53);
                sub_22648E824(v41, v47, 0, (unsigned __int8 *)v78, v56, (float)(vabds_f32(v75, v73.f32[2]) + (float)(vabds_f32(v77, v73.f32[0]) + vabds_f32(v76, v73.f32[1])))* 0.5, a1);
              }
            }
          }
          if (v34 == ++v40)
          {
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        break;
      }
LABEL_14:
      v18 = v63 + 1;
      v17 = v59;
      v2 = v65;
      v5 = v58;
      if (v63 + 1 == v60)
        return swift_release();
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
LABEL_71:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_22648F448(unint64_t *a1, unint64_t *a2, uint64_t a3, __n128 a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v5 = *a1;
  v6 = *a2;
  result = type metadata accessor for AnimationGraph();
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v8 = *(_QWORD *)(a3 + *(int *)(result + 44));
  v9 = *(_QWORD *)(v8 + 16);
  if (v5 >= v9)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 >= v9)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v10 = v8 + 32;
  v11 = (_BYTE *)(v10 + 5 * v5);
  v12 = (unsigned __int8 *)(v10 + 5 * v6);
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = -1.0;
  if (*v11)
    v17 = 1.0;
  else
    v17 = -1.0;
  if (v11[1])
    v18 = 1.0;
  else
    v18 = -1.0;
  if (v11[2])
    v19 = 1.0;
  else
    v19 = -1.0;
  if (v13)
    v20 = 1.0;
  else
    v20 = -1.0;
  if (v14)
    v21 = 1.0;
  else
    v21 = -1.0;
  if (v15)
    v16 = 1.0;
  return (float)(vabds_f32(v19, a4.n128_f32[2])
               + (float)(vabds_f32(v18, a4.n128_f32[1]) + vabds_f32(v17, a4.n128_f32[0]))) < (float)((float)(vabds_f32(v20, a4.n128_f32[0]) + vabds_f32(v21, a4.n128_f32[1])) + vabds_f32(v16, a4.n128_f32[2]));
}

uint64_t sub_22648F55C()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA80;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &unk_24EDDE888;
  *(_QWORD *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = &unk_24EDDE8B8;
  *(_QWORD *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = &unk_24EDDE8E8;
  *(_QWORD *)(inited + 80) = 3;
  *(_QWORD *)(inited + 88) = &unk_24EDDE918;
  v1 = sub_226524820((_QWORD *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC8);
  result = swift_arrayDestroy();
  qword_25585AE88 = v1;
  return result;
}

uint64_t sub_22648F620()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA80;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &unk_24EDDE708;
  *(_QWORD *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = &unk_24EDDE738;
  *(_QWORD *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = &unk_24EDDE768;
  *(_QWORD *)(inited + 80) = 3;
  *(_QWORD *)(inited + 88) = &unk_24EDDE798;
  v1 = sub_226524820((_QWORD *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC8);
  result = swift_arrayDestroy();
  qword_25585AE90 = v1;
  return result;
}

uint64_t sub_22648F6E4()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA80;
  *(_QWORD *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = &unk_24EDDE648;
  *(_QWORD *)(inited + 48) = 5;
  *(_QWORD *)(inited + 56) = &unk_24EDDE678;
  *(_QWORD *)(inited + 64) = 6;
  *(_QWORD *)(inited + 72) = &unk_24EDDE6A8;
  *(_QWORD *)(inited + 80) = 2;
  *(_QWORD *)(inited + 88) = &unk_24EDDE6D8;
  v1 = sub_226524820((_QWORD *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC8);
  result = swift_arrayDestroy();
  qword_25585AE98 = v1;
  return result;
}

uint64_t sub_22648F7AC()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FA80;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &unk_24EDDE7C8;
  *(_QWORD *)(inited + 48) = 4;
  *(_QWORD *)(inited + 56) = &unk_24EDDE7F8;
  *(_QWORD *)(inited + 64) = 7;
  *(_QWORD *)(inited + 72) = &unk_24EDDE828;
  *(_QWORD *)(inited + 80) = 3;
  *(_QWORD *)(inited + 88) = &unk_24EDDE858;
  v1 = sub_226524820((_QWORD *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC8);
  result = swift_arrayDestroy();
  qword_25585AEA0 = v1;
  return result;
}

uint64_t sub_22648F870()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_226560650;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &unk_24EDDE488;
  *(_QWORD *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = &unk_24EDDE4C0;
  *(_QWORD *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = &unk_24EDDE4F8;
  *(_QWORD *)(inited + 80) = 3;
  *(_QWORD *)(inited + 88) = &unk_24EDDE530;
  *(_QWORD *)(inited + 96) = 4;
  *(_QWORD *)(inited + 104) = &unk_24EDDE568;
  *(_QWORD *)(inited + 112) = 5;
  *(_QWORD *)(inited + 120) = &unk_24EDDE5A0;
  *(_QWORD *)(inited + 128) = 6;
  *(_QWORD *)(inited + 136) = &unk_24EDDE5D8;
  *(_QWORD *)(inited + 144) = 7;
  *(_QWORD *)(inited + 152) = &unk_24EDDE610;
  v1 = sub_226524820((_QWORD *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CC8);
  result = swift_arrayDestroy();
  qword_25585AEA8 = v1;
  return result;
}

uint64_t sub_22648F974()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_255843CB8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_226561F40;
  *(_QWORD *)(inited + 32) = 0x100000000;
  *(_BYTE *)(inited + 40) = 3;
  *(_QWORD *)(inited + 48) = 1;
  *(_BYTE *)(inited + 56) = 3;
  *(_QWORD *)(inited + 64) = 0x500000004;
  *(_BYTE *)(inited + 72) = 3;
  *(_QWORD *)(inited + 80) = 0x400000005;
  *(_BYTE *)(inited + 88) = 3;
  *(_QWORD *)(inited + 96) = 0x200000001;
  *(_BYTE *)(inited + 104) = 0;
  *(_QWORD *)(inited + 112) = 0x100000002;
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0x600000005;
  *(_BYTE *)(inited + 136) = 0;
  *(_QWORD *)(inited + 144) = 0x500000006;
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x500000001;
  *(_BYTE *)(inited + 168) = 0;
  *(_QWORD *)(inited + 176) = 0x100000005;
  *(_BYTE *)(inited + 184) = 0;
  *(_QWORD *)(inited + 192) = 0x600000002;
  *(_BYTE *)(inited + 200) = 0;
  *(_QWORD *)(inited + 208) = 0x200000006;
  *(_BYTE *)(inited + 216) = 0;
  *(_QWORD *)(inited + 224) = 0x300000002;
  *(_BYTE *)(inited + 232) = 1;
  *(_QWORD *)(inited + 240) = 0x200000003;
  *(_BYTE *)(inited + 248) = 1;
  *(_QWORD *)(inited + 256) = 0x700000006;
  *(_BYTE *)(inited + 264) = 1;
  *(_QWORD *)(inited + 272) = 0x600000007;
  *(_BYTE *)(inited + 280) = 1;
  *(_QWORD *)(inited + 288) = 0x300000000;
  *(_BYTE *)(inited + 296) = 2;
  *(_QWORD *)(inited + 304) = 3;
  *(_BYTE *)(inited + 312) = 2;
  *(_QWORD *)(inited + 320) = 0x400000000;
  *(_BYTE *)(inited + 328) = 2;
  *(_QWORD *)(inited + 336) = 4;
  *(_BYTE *)(inited + 344) = 2;
  *(_QWORD *)(inited + 352) = 0x700000003;
  *(_BYTE *)(inited + 360) = 2;
  *(_QWORD *)(inited + 368) = 0x300000007;
  *(_BYTE *)(inited + 376) = 2;
  *(_QWORD *)(inited + 384) = 0x700000004;
  *(_BYTE *)(inited + 392) = 2;
  *(_QWORD *)(inited + 400) = 0x400000007;
  *(_BYTE *)(inited + 408) = 2;
  v1 = sub_22652491C(inited);
  result = swift_setDeallocating();
  qword_25585AEB0 = v1;
  return result;
}

uint64_t sub_22648FB64(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  unint64_t *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v124;
  unint64_t v125[2];
  unint64_t v126;

  v4 = v3;
  v7 = a1[1];
  result = sub_22655D538();
  if (result >= v7)
  {
    if (v7 < 0)
      goto LABEL_162;
    if (v7)
      return sub_22649034C(0, v7, 1, a1, a2, a3);
    return result;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_171;
  v10 = result;
  v122 = a2;
  v115 = a1;
  if (v7 < 2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    v121 = (unint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    v13 = a3;
    if (v7 != 1)
    {
      v55 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v19 = (char *)MEMORY[0x24BEE4AF8];
LABEL_123:
      v119 = v14;
      if (v55 >= 2)
      {
        v105 = *v115;
        do
        {
          v106 = v55 - 2;
          if (v55 < 2)
            goto LABEL_157;
          if (!v105)
            goto LABEL_170;
          v107 = (uint64_t)v19;
          v108 = *(_QWORD *)&v19[16 * v106 + 32];
          v109 = *(_QWORD *)&v19[16 * v55 + 24];
          sub_226490410((unint64_t *)(v105 + 8 * v108), (unint64_t *)(v105 + 8 * *(_QWORD *)&v19[16 * v55 + 16]), v105 + 8 * v109, v121, v122, v13);
          if (v4)
            break;
          if (v109 < v108)
            goto LABEL_158;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v110 = (char *)v107;
          else
            v110 = sub_2264CA374(v107);
          if (v106 >= *((_QWORD *)v110 + 2))
            goto LABEL_159;
          v111 = &v110[16 * v106 + 32];
          *(_QWORD *)v111 = v108;
          *((_QWORD *)v111 + 1) = v109;
          v112 = *((_QWORD *)v110 + 2);
          if (v55 > v112)
            goto LABEL_160;
          v113 = v110;
          memmove(&v110[16 * v55 + 16], &v110[16 * v55 + 32], 16 * (v112 - v55));
          v19 = v113;
          *((_QWORD *)v113 + 2) = v112 - 1;
          v55 = v112 - 1;
          v4 = 0;
          v13 = a3;
        }
        while (v112 > 2);
      }
LABEL_136:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v119 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v11 = v9 >> 1;
    v12 = sub_22655CEFC();
    *(_QWORD *)(v12 + 16) = v11;
    v119 = v12;
    v121 = (unint64_t *)(v12 + 32);
    v13 = a3;
  }
  v15 = 0;
  v16 = *a1;
  v17 = v13.n128_f32[1];
  v18 = v13.n128_f32[2];
  v116 = *a1 + 16;
  v114 = *a1 - 8;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v117 = v10;
  v118 = v7;
  v120 = *a1;
  while (1)
  {
    v20 = v15++;
    if (v15 < v7)
    {
      v21 = v19;
      v126 = *(_QWORD *)(v16 + 8 * v15);
      v125[0] = *(_QWORD *)(v16 + 8 * v20);
      v22 = sub_22648F448(&v126, v125, a2, v13);
      if (v4)
        goto LABEL_136;
      v23 = v22;
      v15 = v20 + 2;
      if (v20 + 2 < v7)
      {
        v24 = (unint64_t *)(v116 + 8 * v20);
        v25 = a3;
        while (1)
        {
          v126 = *v24;
          v125[0] = *(v24 - 1);
          if (((v23 ^ sub_22648F448(&v126, v125, a2, v25)) & 1) != 0)
            break;
          ++v24;
          ++v15;
          v25 = a3;
          if (v7 == v15)
          {
            v15 = v7;
            break;
          }
        }
      }
      if ((v23 & 1) != 0)
      {
        if (v15 < v20)
          goto LABEL_166;
        v19 = v21;
        if (v20 < v15)
        {
          v26 = v15 - 1;
          v27 = v20;
          do
          {
            if (v27 != v26)
            {
              if (!v120)
                goto LABEL_169;
              v28 = *(_QWORD *)(v120 + 8 * v27);
              *(_QWORD *)(v120 + 8 * v27) = *(_QWORD *)(v120 + 8 * v26);
              *(_QWORD *)(v120 + 8 * v26) = v28;
            }
            v86 = ++v27 < v26--;
          }
          while (v86);
        }
      }
      else
      {
        v19 = v21;
      }
    }
    if (v15 >= v7)
      goto LABEL_70;
    if (__OFSUB__(v15, v20))
      goto LABEL_163;
    if (v15 - v20 >= v10)
      goto LABEL_70;
    if (__OFADD__(v20, v10))
      goto LABEL_164;
    v29 = v20 + v10 >= v7 ? v7 : v20 + v10;
    if (v29 < v20)
      break;
    if (v15 != v29)
    {
      v30 = v19;
      v31 = type metadata accessor for AnimationGraph();
      v19 = v30;
      v32 = *(int *)(v31 + 44);
      v33 = (unint64_t *)(v114 + 8 * v15);
      do
      {
        v34 = *(_QWORD *)(v120 + 8 * v15);
        v35 = v20;
        v36 = v33;
        do
        {
          if ((v34 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
          v37 = *(_QWORD *)(a2 + v32);
          v38 = *(_QWORD *)(v37 + 16);
          if (v34 >= v38)
            goto LABEL_140;
          v39 = *v36;
          if (*v36 >= v38)
            goto LABEL_141;
          v40 = v37 + 32;
          v41 = (_BYTE *)(v40 + 5 * v34);
          v42 = (unsigned __int8 *)(v40 + 5 * v39);
          v43 = *v42;
          v44 = v42[1];
          v45 = v42[2];
          if (*v41)
            v46 = 1.0;
          else
            v46 = -1.0;
          if (v41[1])
            v47 = 1.0;
          else
            v47 = -1.0;
          if (v41[2])
            v48 = 1.0;
          else
            v48 = -1.0;
          if (v43)
            v49 = 1.0;
          else
            v49 = -1.0;
          if (v44)
            v50 = 1.0;
          else
            v50 = -1.0;
          if (v45)
            v51 = 1.0;
          else
            v51 = -1.0;
          if ((float)(vabds_f32(v48, v18) + (float)(vabds_f32(v47, v17) + vabds_f32(v46, a3.n128_f32[0]))) >= (float)((float)(vabds_f32(v49, a3.n128_f32[0]) + vabds_f32(v50, v17)) + vabds_f32(v51, v18)))
            break;
          if (!v120)
            goto LABEL_167;
          *v36 = v34;
          v36[1] = v39;
          --v36;
          ++v35;
        }
        while (v15 != v35);
        ++v15;
        ++v33;
      }
      while (v15 != v29);
      v15 = v29;
    }
LABEL_70:
    if (v15 < v20)
      goto LABEL_161;
    v52 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v19 = v52;
    else
      v19 = sub_2264C9F78(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
    v54 = *((_QWORD *)v19 + 2);
    v53 = *((_QWORD *)v19 + 3);
    v55 = v54 + 1;
    v13 = a3;
    v16 = v120;
    if (v54 >= v53 >> 1)
    {
      v104 = sub_2264C9F78((char *)(v53 > 1), v54 + 1, 1, v19);
      v16 = v120;
      v13 = a3;
      v19 = v104;
    }
    v124 = v4;
    *((_QWORD *)v19 + 2) = v55;
    v56 = v19 + 32;
    v57 = &v19[16 * v54 + 32];
    *(_QWORD *)v57 = v20;
    *((_QWORD *)v57 + 1) = v15;
    if (v54)
    {
      while (1)
      {
        v58 = v55 - 1;
        if (v55 >= 4)
        {
          v63 = &v56[16 * v55];
          v64 = *((_QWORD *)v63 - 8);
          v65 = *((_QWORD *)v63 - 7);
          v69 = __OFSUB__(v65, v64);
          v66 = v65 - v64;
          if (v69)
            goto LABEL_146;
          v68 = *((_QWORD *)v63 - 6);
          v67 = *((_QWORD *)v63 - 5);
          v69 = __OFSUB__(v67, v68);
          v61 = v67 - v68;
          v62 = v69;
          if (v69)
            goto LABEL_147;
          v70 = v55 - 2;
          v71 = &v56[16 * v55 - 32];
          v73 = *(_QWORD *)v71;
          v72 = *((_QWORD *)v71 + 1);
          v69 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          if (v69)
            goto LABEL_149;
          v69 = __OFADD__(v61, v74);
          v75 = v61 + v74;
          if (v69)
            goto LABEL_152;
          if (v75 >= v66)
          {
            v93 = &v56[16 * v58];
            v95 = *(_QWORD *)v93;
            v94 = *((_QWORD *)v93 + 1);
            v69 = __OFSUB__(v94, v95);
            v96 = v94 - v95;
            if (v69)
              goto LABEL_156;
            v86 = v61 < v96;
            goto LABEL_107;
          }
        }
        else
        {
          if (v55 != 3)
          {
            v87 = *((_QWORD *)v19 + 4);
            v88 = *((_QWORD *)v19 + 5);
            v69 = __OFSUB__(v88, v87);
            v80 = v88 - v87;
            v81 = v69;
            goto LABEL_101;
          }
          v60 = *((_QWORD *)v19 + 4);
          v59 = *((_QWORD *)v19 + 5);
          v69 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          v62 = v69;
        }
        if ((v62 & 1) != 0)
          goto LABEL_148;
        v70 = v55 - 2;
        v76 = &v56[16 * v55 - 32];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v79 = __OFSUB__(v77, v78);
        v80 = v77 - v78;
        v81 = v79;
        if (v79)
          goto LABEL_151;
        v82 = &v56[16 * v58];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v69 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v69)
          goto LABEL_154;
        if (__OFADD__(v80, v85))
          goto LABEL_155;
        if (v80 + v85 >= v61)
        {
          v86 = v61 < v85;
LABEL_107:
          if (v86)
            v58 = v70;
          goto LABEL_109;
        }
LABEL_101:
        if ((v81 & 1) != 0)
          goto LABEL_150;
        v89 = &v56[16 * v58];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v69 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v69)
          goto LABEL_153;
        if (v92 < v80)
          goto LABEL_118;
LABEL_109:
        v97 = v58 - 1;
        if (v58 - 1 >= v55)
          goto LABEL_142;
        if (!v16)
          goto LABEL_168;
        v98 = v19;
        v99 = &v56[16 * v97];
        v100 = *(_QWORD *)v99;
        v101 = &v56[16 * v58];
        v102 = *((_QWORD *)v101 + 1);
        sub_226490410((unint64_t *)(v16 + 8 * *(_QWORD *)v99), (unint64_t *)(v16 + 8 * *(_QWORD *)v101), v16 + 8 * v102, v121, v122, v13);
        if (v124)
          goto LABEL_136;
        if (v102 < v100)
          goto LABEL_143;
        if (v58 > *((_QWORD *)v98 + 2))
          goto LABEL_144;
        *(_QWORD *)v99 = v100;
        *(_QWORD *)&v56[16 * v97 + 8] = v102;
        v103 = *((_QWORD *)v98 + 2);
        if (v58 >= v103)
          goto LABEL_145;
        v55 = v103 - 1;
        memmove(&v56[16 * v58], v101 + 16, 16 * (v103 - 1 - v58));
        v19 = v98;
        *((_QWORD *)v98 + 2) = v103 - 1;
        v13 = a3;
        v16 = v120;
        if (v103 <= 2)
          goto LABEL_118;
      }
    }
    v55 = 1;
LABEL_118:
    v10 = v117;
    v7 = v118;
    v4 = v124;
    a2 = v122;
    if (v15 >= v118)
    {
      v14 = v119;
      goto LABEL_123;
    }
  }
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  result = sub_22655D3DC();
  __break(1u);
  return result;
}

uint64_t sub_22649034C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;

  if (a3 != a2)
  {
    v8 = a3;
    v10 = result;
    v11 = *a4;
    v12 = *a4 + 8 * a3 - 8;
LABEL_4:
    v13 = *(_QWORD *)(v11 + 8 * v8);
    v14 = v10;
    v15 = (unint64_t *)v12;
    while (1)
    {
      v19 = v13;
      v18 = *v15;
      result = sub_22648F448(&v19, &v18, a5, a6);
      if (v6)
        break;
      if ((result & 1) != 0)
      {
        if (!v11)
        {
          __break(1u);
          return result;
        }
        v16 = *v15;
        v13 = v15[1];
        *v15 = v13;
        v15[1] = v16;
        --v15;
        if (v8 != ++v14)
          continue;
      }
      ++v8;
      v12 += 8;
      if (v8 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t sub_226490410(unint64_t *__src, unint64_t *a2, unint64_t a3, unint64_t *__dst, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v9;
  unint64_t *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  char v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  unint64_t *v25;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;

  v7 = __dst;
  v9 = a2;
  v10 = __src;
  v11 = (char *)a2 - (char *)__src;
  v12 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v12 = (char *)a2 - (char *)__src;
  v13 = v12 >> 3;
  v14 = a3 - (_QWORD)a2;
  v15 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v15 = a3 - (_QWORD)a2;
  v16 = v15 >> 3;
  v33 = __src;
  v32 = __dst;
  if (v13 >= v15 >> 3)
  {
    if (v14 >= -7)
    {
      if (__dst != a2 || &a2[v16] <= __dst)
        memmove(__dst, a2, 8 * v16);
      v20 = &v7[v16];
      v31 = v20;
      v33 = v9;
      if (v10 < v9 && v14 >= 8)
      {
        v21 = (unint64_t *)(a3 - 8);
        v22 = v9;
        while (1)
        {
          v30 = *(v20 - 1);
          v23 = *--v22;
          v29 = v23;
          v24 = sub_22648F448(&v30, &v29, a5, a6);
          if (v6)
            break;
          v25 = v21 + 1;
          if ((v24 & 1) != 0)
          {
            if (v25 != v9 || v21 >= v9)
              *v21 = *v22;
            v33 = v22;
            if (v22 <= v10)
              goto LABEL_44;
          }
          else
          {
            v31 = v20 - 1;
            if (v25 < v20 || v21 >= v20 || v25 != v20)
              *v21 = *(v20 - 1);
            v22 = v9;
            --v20;
            if (v9 <= v10)
              goto LABEL_44;
          }
          --v21;
          v9 = v22;
          if (v20 <= v7)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v11 >= -7)
  {
    if (__dst != __src || &__src[v13] <= __dst)
      memmove(__dst, __src, 8 * v13);
    v17 = &v7[v13];
    v31 = v17;
    if ((unint64_t)v9 < a3 && v11 >= 8)
    {
      do
      {
        v30 = *v9;
        v29 = *v7;
        v18 = sub_22648F448(&v30, &v29, a5, a6);
        if (v6)
          break;
        if ((v18 & 1) != 0)
        {
          v19 = v9 + 1;
          if (v10 < v9 || v10 >= v19 || v10 != v9)
            *v10 = *v9;
        }
        else
        {
          if (v10 != v7)
            *v10 = *v7;
          v32 = ++v7;
          v19 = v9;
        }
        v33 = ++v10;
        if (v7 >= v17)
          break;
        v9 = v19;
      }
      while ((unint64_t)v19 < a3);
    }
LABEL_44:
    sub_2264CA074((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = sub_22655D43C();
  __break(1u);
  return result;
}

void (*sub_2264906E0(_QWORD *a1, uint64_t a2))(uint64_t)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_226490B0C(v4);
  v4[9] = sub_226490818(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_22649075C;
}

void (*sub_226490760(_QWORD *a1, unsigned __int8 a2))(uint64_t)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_226490B2C(v4);
  v4[9] = sub_2264909B4((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_22649075C;
}

void sub_2264907DC(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_226490818(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_226534A10(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_226490934;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_226548918();
      goto LABEL_7;
    }
    sub_226542B08(v14, a3 & 1);
    v18 = sub_226534A10(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_22655D5A4();
  __break(1u);
  return result;
}

void sub_226490934(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_BYTE *)*a1 + 32);
  if (v2)
  {
    v4 = v1[3];
    v5 = *(_QWORD **)v1[2];
    if ((v3 & 1) != 0)
      *(_QWORD *)(v5[7] + 8 * v4) = v2;
    else
      sub_226523CC4(v4, v1[1], v2, v5);
  }
  else if (((*a1)[4] & 1) != 0)
  {
    sub_2265467D8(v1[3], *(_QWORD *)v1[2]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t (*sub_2264909B4(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t (*result)(unint64_t);

  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  v8 = *v3;
  v10 = sub_226534A0C(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(_QWORD *)a1 = v16;
        return sub_226490AC4;
      }
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_226548C98();
      goto LABEL_7;
    }
    sub_2265430E8(v13, a3 & 1);
    v17 = sub_226534A0C(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = v17;
      *(_QWORD *)(a1 + 16) = v17;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (unint64_t (*)(unint64_t))sub_22655D5A4();
  __break(1u);
  return result;
}

unint64_t sub_226490AC4(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = **(_QWORD ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0)
      *(_QWORD *)(v2[7] + 8 * *(_QWORD *)(result + 16)) = v1;
    else
      return sub_226523E60(*(_QWORD *)(result + 16), *(_BYTE *)(result + 24), v1, v2);
  }
  else if ((*(_BYTE *)(result + 25) & 1) != 0)
  {
    return sub_22654696C(*(_QWORD *)(result + 16), **(_QWORD **)(result + 8));
  }
  return result;
}

uint64_t (*sub_226490B0C(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_226490D84;
}

uint64_t (*sub_226490B2C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_226490B4C;
}

uint64_t sub_226490B4C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_226490B58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;

  v10 = v9;
  v31 = a8;
  v32 = a9;
  v29 = a6;
  v30 = a7;
  v28 = a5;
  v26 = a3;
  v27 = a4;
  v25 = a2;
  v12 = type metadata accessor for LineAnimation();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v33 = MEMORY[0x24BEE4AF8];
    sub_2264C7A7C(0, v16, 0);
    v17 = v33;
    v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v19 = a1 + v18;
    v20 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      sub_22648E548(v19, v25, v26, v27, (uint64_t)v15, (float32x2_t)v32.n128_u64[0]);
      if (v10)
        break;
      v10 = 0;
      v33 = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_2264C7A7C(v21 > 1, v22 + 1, 1);
        v17 = v33;
      }
      *(_QWORD *)(v17 + 16) = v22 + 1;
      sub_226490CC0((uint64_t)v15, v17 + v18 + v22 * v20);
      v19 += v20;
      if (!--v16)
        return v17;
    }
    swift_release();
  }
  return v17;
}

uint64_t sub_226490CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_226490D04(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_226490D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_226490D88(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for LineAnimation() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_2264CA4E8(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_226491DA4(v5);
  *a1 = v3;
}

uint64_t type metadata accessor for EdgeEntityFactory()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for EdgeEntity()
{
  uint64_t result;

  result = qword_255843D90;
  if (!qword_255843D90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_226490E64()
{
  return swift_initClassMetadata2();
}

void sub_226490ED4()
{
  uint64_t inited;

  inited = swift_initStackObject();
  *(_QWORD *)(inited + qword_255843D78) = 0;
  *(_QWORD *)(inited + qword_255843D80) = 0;
  *(_QWORD *)(inited + qword_255843D88) = MEMORY[0x24BEE4AF8];
  swift_release();
  sub_22655D3E8();
  __break(1u);
}

uint64_t sub_226490F68(float a1, __n128 a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v16;
  float v17;
  uint64_t v18;

  v6 = v4;
  v16 = a2;
  v18 = *MEMORY[0x24BDAC8D0];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255842928);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + qword_255843D78) = 0;
  *(_QWORD *)(v4 + qword_255843D80) = 0;
  *(_QWORD *)(v4 + qword_255843D88) = MEMORY[0x24BEE4AF8];
  type metadata accessor for RERoomsMaterial();
  swift_allocObject();
  swift_retain();
  v13 = sub_226559CC0(0x6D65722E65676465, 0xEF6C616972657461);
  if (v5)
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for EdgeEntity();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v4 + qword_255843D70) = v13;
    swift_release();
    v6 = sub_22655C1DC();
    v17 = 0.0;
    swift_retain();
    REMaterialParameterBlockGetFloat();
    if (v17 != a1)
      REMaterialParameterBlockSetFloat();
    sub_22655A334(v16);
    v17 = 0.0;
    REMaterialParameterBlockGetFloat();
    if (v17 != a3)
      REMaterialParameterBlockSetFloat();
    v17 = 0.0;
    REMaterialParameterBlockGetFloat();
    if (v17 != a4)
      REMaterialParameterBlockSetFloat();
    v14 = sub_22655C56C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
    type metadata accessor for EdgeEntity();
    sub_22655C524();
    swift_release();
  }
  return v6;
}

void sub_226491224(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  float32x2_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;

  v9 = sub_22655C1C4();
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LineAnimation();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_22655C2CC();
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (a4 & 1) == 0 && (a2 & 0x100000000) == 0)
  {
    v45 = v17;
    v46 = v19;
    *(_QWORD *)&v49[0] = sub_226492F58(a1);
    swift_bridgeObjectRetain();
    sub_226490D88((_QWORD **)v49);
    if (v4)
    {
      swift_release();
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)&v49[0];
    v21 = *(_QWORD *)(*(_QWORD *)&v49[0] + 16);
    if (!v21)
      goto LABEL_23;
    v43 = v16;
    v44 = 0;
    v22 = (float32x2_t)a3;
    v23 = *(float *)&a2;
    *(_QWORD *)&v49[0] = MEMORY[0x24BEE4AF8];
    sub_2264C79FC(0, v21, 0);
    v24 = *(unsigned __int8 *)(v13 + 80);
    v42 = v20;
    v25 = v20 + ((v24 + 32) & ~v24);
    v26 = *(_QWORD *)(v13 + 72);
    v27 = *(_QWORD **)&v49[0];
    do
    {
      sub_226453518(v25, (uint64_t)v15);
      v28 = *(_QWORD *)(*((_QWORD *)v15 + 14) + 16);
      sub_22645355C((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2264C79FC(0, v27[2] + 1, 1);
        v27 = *(_QWORD **)&v49[0];
      }
      v30 = v27[2];
      v29 = v27[3];
      if (v30 >= v29 >> 1)
      {
        sub_2264C79FC(v29 > 1, v30 + 1, 1);
        v27 = *(_QWORD **)&v49[0];
      }
      v27[2] = v30 + 1;
      v27[v30 + 4] = v28;
      v25 += v26;
      --v21;
    }
    while (v21);
    v31 = qword_255843D88;
    v32 = v51;
    v33 = sub_22649552C(v27, *(_QWORD **)(v51 + qword_255843D88));
    *(_QWORD *)(v32 + v31) = v27;
    swift_bridgeObjectRelease();
    if (qword_25583F948 != -1)
      swift_once();
    v34 = (uint64_t)v46;
    v35 = v42;
    sub_2264E8734(v42);
    v36 = qword_255843D78;
    v37 = v44;
    if (*(_QWORD *)(v32 + qword_255843D78))
    {
      if (!v33)
      {
        v38 = sub_226493118();
        v39 = (uint64_t)v46;
        sub_2264E52A8(v32, v38, (uint64_t)v46);
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v43);
LABEL_23:
          swift_release();
          return;
        }
      }
    }
    else
    {
      v40 = sub_226493118();
      v50 = 0;
      memset(v49, 0, sizeof(v49));
      sub_2264E8D20(v32, v40, v34, (uint64_t)v49);
      if (v37)
      {
        swift_release();
        sub_226451BE4((uint64_t)v49);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v43);
        return;
      }
      sub_226451BE4((uint64_t)v49);
    }
    sub_22655C7E8();
    sub_22655C170();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v48);
    REMeshComponentGetComponentType();
    *(_QWORD *)(v32 + v36) = REEntityGetComponentByClass();
    sub_2264915FC(v35, v23, v22);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v43);
    goto LABEL_23;
  }
}

uint64_t sub_2264915FC(int64_t a1, float a2, float32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD *v22;
  id v23;
  BOOL v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  id v27;
  id v28;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52[2];

  v5 = v3;
  v52[1] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22655CB84();
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v46 - v13;
  v51 = 0uLL;
  if (qword_25583F948 != -1)
    swift_once();
  v15 = sub_2264E9238(a1, &v51);
  v16 = v15[2];
  if (v16 >> 59)
    __break(1u);
  v17 = v15;
  v47 = v9;
  v49 = v4;
  v18 = qword_255843D80;
  v19 = *(void **)(v5 + qword_255843D80);
  if (!v19 || (id)(16 * v16) != objc_msgSend(v19, sel_length))
  {
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    v20 = objc_msgSend((id)sub_22648BC28(), sel_newBufferWithLength_options_, 16 * v16, 0);
    swift_unknownObjectRelease();
    *(_QWORD *)(v5 + v18) = v20;
    swift_unknownObjectRelease();
  }
  v21 = *(void **)(v5 + v18);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v27 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v28 = objc_msgSend(v27, sel_bundleIdentifier);

    if (v28)
    {
      sub_22655CD88();

    }
    sub_22643D680();
    sub_22655D124();
    sub_22655CB90();
    swift_retain_n();
    v30 = sub_22655CB6C();
    v31 = sub_22655CFF8();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v52[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = sub_22655C878();
      v50 = sub_2264F4EC4(v34, v35, v52);
      sub_22655D154();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_226423000, v30, v31, " pointArrayBuffer for %s is nil", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22769A884](v33, -1, -1);
      MEMORY[0x22769A884](v32, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v11, v47);
  }
  v22 = objc_msgSend((id)swift_unknownObjectRetain_n(), sel_contents);
  v23 = v21;
  v24 = v22 != v17 + 4 || v22 >= &v17[2 * v16 + 4];
  v25 = v49;
  if (v24)
    memmove(v22, v17 + 4, 16 * v16);
  swift_bridgeObjectRelease();
  REMaterialParameterBlockSetBuffer();
  LODWORD(v52[0]) = 0;
  REMaterialParameterBlockGetFloat();
  if (*(float *)v52 != a2)
  {
    REMaterialParameterBlockSetFloat();
    sub_22655A25C(a3);
    goto LABEL_19;
  }
  if ((sub_22655A25C(a3) & 1) != 0)
  {
LABEL_19:
    sub_22655A114();
    if (v25)
      return swift_unknownObjectRelease();
  }
  if (*(_QWORD *)(v5 + qword_255843D78))
  {
    REMeshComponentSetBoundsMargin();
    return swift_unknownObjectRelease();
  }
  type metadata accessor for Constants();
  v36 = swift_getObjCClassFromMetadata();
  v37 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v36);
  v38 = objc_msgSend(v37, sel_bundleIdentifier);

  if (v38)
  {
    sub_22655CD88();

  }
  sub_22643D680();
  sub_22655D124();
  sub_22655CB90();
  swift_retain_n();
  v39 = sub_22655CB6C();
  v40 = sub_22655CFF8();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v49 = swift_slowAlloc();
    v52[0] = v49;
    *(_DWORD *)v41 = 136315138;
    v46[1] = v41 + 4;
    v42 = v41;
    v43 = sub_22655C878();
    v50 = sub_2264F4EC4(v43, v44, v52);
    sub_22655D154();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_226423000, v39, v40, "MeshComponent for %s is nil", v41, 0xCu);
    v45 = v49;
    swift_arrayDestroy();
    MEMORY[0x22769A884](v45, -1, -1);
    MEMORY[0x22769A884](v42, -1, -1);
    swift_unknownObjectRelease();

  }
  else
  {

    swift_release_n();
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v14, v47);
}

uint64_t sub_226491D04()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_226491D40()
{
  sub_22655C8C0();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_226491D9C()
{
  return type metadata accessor for EdgeEntity();
}

void sub_226491DA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _BOOL4 v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t *v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t *v168;

  v2 = v1;
  v4 = type metadata accessor for LineAnimation();
  v161 = *(_QWORD *)(v4 - 8);
  v162 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v155 = (uint64_t)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v167 = (uint64_t)&v148 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v163 = (uint64_t)&v148 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v148 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v157 = (uint64_t)&v148 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v156 = (uint64_t)&v148 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v152 = (uint64_t)&v148 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v148 - v20;
  v168 = a1;
  v22 = a1[1];
  v23 = sub_22655D538();
  if (v23 >= v22)
  {
    if (v22 < 0)
      goto LABEL_149;
    if (v22)
      sub_226492838(0, v22, 1, v168);
    return;
  }
  if (v22 >= 0)
    v24 = v22;
  else
    v24 = v22 + 1;
  if (v22 < -1)
    goto LABEL_157;
  v150 = v23;
  if (v22 < 2)
  {
    v28 = (char *)MEMORY[0x24BEE4AF8];
    v160 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
    v149 = MEMORY[0x24BEE4AF8];
    if (v22 != 1)
    {
      v30 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_115:
      if (v30 >= 2)
      {
        v142 = *v168;
        do
        {
          v143 = v30 - 2;
          if (v30 < 2)
            goto LABEL_144;
          if (!v142)
            goto LABEL_156;
          v144 = *(_QWORD *)&v28[16 * v143 + 32];
          v145 = *(_QWORD *)&v28[16 * v30 + 24];
          sub_226492A6C(v142 + *(_QWORD *)(v161 + 72) * v144, v142 + *(_QWORD *)(v161 + 72) * *(_QWORD *)&v28[16 * v30 + 16], v142 + *(_QWORD *)(v161 + 72) * v145, v160);
          if (v2)
            break;
          if (v145 < v144)
            goto LABEL_145;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = sub_2264CA374((uint64_t)v28);
          if (v143 >= *((_QWORD *)v28 + 2))
            goto LABEL_146;
          v146 = &v28[16 * v143 + 32];
          *(_QWORD *)v146 = v144;
          *((_QWORD *)v146 + 1) = v145;
          v147 = *((_QWORD *)v28 + 2);
          if (v30 > v147)
            goto LABEL_147;
          memmove(&v28[16 * v30 + 16], &v28[16 * v30 + 32], 16 * (v147 - v30));
          *((_QWORD *)v28 + 2) = v147 - 1;
          v30 = v147 - 1;
        }
        while (v147 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v149 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v25 = v24 >> 1;
    v26 = sub_22655CEFC();
    *(_QWORD *)(v26 + 16) = v25;
    v27 = *(unsigned __int8 *)(v161 + 80);
    v149 = v26;
    v160 = v26 + ((v27 + 32) & ~v27);
  }
  v29 = 0;
  v28 = (char *)MEMORY[0x24BEE4AF8];
  v166 = v12;
  v151 = v21;
  while (1)
  {
    v31 = v29;
    v32 = v29 + 1;
    v159 = v29;
    if (v29 + 1 >= v22)
    {
      v41 = v29 + 1;
      goto LABEL_67;
    }
    v33 = *v168;
    v34 = *(_QWORD *)(v161 + 72);
    sub_226453518(*v168 + v34 * v32, (uint64_t)v21);
    v154 = v33;
    v165 = v34;
    v35 = v33 + v34 * v31;
    v36 = v152;
    sub_226453518(v35, v152);
    v37 = v21[104];
    v38 = *(unsigned __int8 *)(v36 + 104);
    v153 = v28;
    if (v37 == v38)
    {
      v39 = (unint64_t *)(*((_QWORD *)v21 + 14) + 16);
      v40 = (unint64_t *)(*(_QWORD *)(v36 + 112) + 16);
    }
    else
    {
      v42 = (char)v38;
      v39 = (unint64_t *)((char *)&unk_2265620A8 + 8 * (char)v37);
      v40 = (unint64_t *)((char *)&unk_2265620A8 + 8 * v42);
    }
    v164 = *v39;
    v158 = *v40;
    sub_22645355C(v36);
    sub_22645355C((uint64_t)v21);
    v43 = v31 + 2;
    if (v31 + 2 >= v22)
    {
      v41 = v31 + 2;
    }
    else
    {
      v44 = v22;
      v45 = v165 * v32;
      v46 = v154;
      v47 = v43;
      v48 = v165 * v43;
      while (1)
      {
        v49 = v156;
        sub_226453518(v46 + v48, v156);
        v50 = v157;
        sub_226453518(v46 + v45, v157);
        v51 = v50;
        v52 = *(unsigned __int8 *)(v49 + 104);
        v53 = *(unsigned __int8 *)(v50 + 104);
        if (v52 == v53)
        {
          v54 = (_QWORD *)(*(_QWORD *)(v49 + 112) + 16);
          v55 = (_QWORD *)(*(_QWORD *)(v50 + 112) + 16);
        }
        else
        {
          v56 = (char)v53;
          v54 = (_QWORD *)((char *)&unk_2265620A8 + 8 * (char)v52);
          v55 = (_QWORD *)((char *)&unk_2265620A8 + 8 * v56);
        }
        v57 = v164 < v158;
        v58 = *v54 < *v55;
        sub_22645355C(v51);
        sub_22645355C(v49);
        if (((v57 ^ v58) & 1) != 0)
          break;
        v12 = v166;
        v46 += v165;
        if (v44 == ++v47)
        {
          v22 = v44;
          v41 = v44;
          v31 = v159;
          goto LABEL_30;
        }
      }
      v12 = v166;
      v41 = v47;
      v31 = v159;
      v22 = v44;
    }
LABEL_30:
    if (v164 >= v158)
      break;
    v28 = v153;
    if (v41 < v31)
      goto LABEL_150;
    if (v31 >= v41)
      goto LABEL_44;
    v158 = v22;
    v59 = 0;
    v60 = v165 * (v41 - 1);
    v61 = v31;
    v62 = v41 * v165;
    v63 = v61;
    v64 = v61 * v165;
    do
    {
      if (v63 != v41 + v59 - 1)
      {
        v66 = v154;
        if (!v154)
          goto LABEL_155;
        v67 = v154 + v64;
        v164 = v154 + v60;
        sub_226490CC0(v154 + v64, v155);
        if (v64 < v60 || v67 >= v66 + v62)
        {
          v65 = v164;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v65 = v164;
          if (v64 != v60)
            swift_arrayInitWithTakeBackToFront();
        }
        sub_226490CC0(v155, v65);
        v12 = v166;
      }
      ++v63;
      --v59;
      v60 -= v165;
      v62 -= v165;
      v64 += v165;
    }
    while (v63 < v41 + v59);
    v28 = v153;
    v22 = v158;
    v31 = v159;
    if (v41 < (uint64_t)v158)
      goto LABEL_45;
LABEL_67:
    if (v41 < v31)
      goto LABEL_143;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v165 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v28 = sub_2264C9F78(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v93 = *((_QWORD *)v28 + 2);
    v92 = *((_QWORD *)v28 + 3);
    v30 = v93 + 1;
    if (v93 >= v92 >> 1)
      v28 = sub_2264C9F78((char *)(v92 > 1), v93 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v30;
    v94 = v28 + 32;
    v95 = &v28[16 * v93 + 32];
    v96 = v165;
    *(_QWORD *)v95 = v31;
    *((_QWORD *)v95 + 1) = v96;
    if (v93)
    {
      while (1)
      {
        v97 = v30 - 1;
        if (v30 >= 4)
        {
          v102 = &v94[16 * v30];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_132;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_133;
          v109 = v30 - 2;
          v110 = &v94[16 * v30 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_135;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_138;
          if (v114 >= v105)
          {
            v132 = &v94[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_142;
            v125 = v100 < v135;
            goto LABEL_104;
          }
        }
        else
        {
          if (v30 != 3)
          {
            v126 = *((_QWORD *)v28 + 4);
            v127 = *((_QWORD *)v28 + 5);
            v108 = __OFSUB__(v127, v126);
            v119 = v127 - v126;
            v120 = v108;
            goto LABEL_98;
          }
          v99 = *((_QWORD *)v28 + 4);
          v98 = *((_QWORD *)v28 + 5);
          v108 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          v101 = v108;
        }
        if ((v101 & 1) != 0)
          goto LABEL_134;
        v109 = v30 - 2;
        v115 = &v94[16 * v30 - 32];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v118 = __OFSUB__(v116, v117);
        v119 = v116 - v117;
        v120 = v118;
        if (v118)
          goto LABEL_137;
        v121 = &v94[16 * v97];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v108 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v108)
          goto LABEL_140;
        if (__OFADD__(v119, v124))
          goto LABEL_141;
        if (v119 + v124 >= v100)
        {
          v125 = v100 < v124;
LABEL_104:
          if (v125)
            v97 = v109;
          goto LABEL_106;
        }
LABEL_98:
        if ((v120 & 1) != 0)
          goto LABEL_136;
        v128 = &v94[16 * v97];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v108 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v108)
          goto LABEL_139;
        if (v131 < v119)
          goto LABEL_14;
LABEL_106:
        v136 = v97 - 1;
        if (v97 - 1 >= v30)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!*v168)
          goto LABEL_154;
        v137 = &v94[16 * v136];
        v138 = *(_QWORD *)v137;
        v139 = &v94[16 * v97];
        v140 = *((_QWORD *)v139 + 1);
        sub_226492A6C(*v168 + *(_QWORD *)(v161 + 72) * *(_QWORD *)v137, *v168 + *(_QWORD *)(v161 + 72) * *(_QWORD *)v139, *v168 + *(_QWORD *)(v161 + 72) * v140, v160);
        if (v2)
          goto LABEL_126;
        if (v140 < v138)
          goto LABEL_129;
        if (v97 > *((_QWORD *)v28 + 2))
          goto LABEL_130;
        *(_QWORD *)v137 = v138;
        *(_QWORD *)&v94[16 * v136 + 8] = v140;
        v141 = *((_QWORD *)v28 + 2);
        if (v97 >= v141)
          goto LABEL_131;
        v30 = v141 - 1;
        memmove(&v94[16 * v97], v139 + 16, 16 * (v141 - 1 - v97));
        *((_QWORD *)v28 + 2) = v141 - 1;
        v12 = v166;
        if (v141 <= 2)
          goto LABEL_14;
      }
    }
    v30 = 1;
LABEL_14:
    v22 = v168[1];
    v29 = v165;
    v21 = v151;
    if (v165 >= v22)
      goto LABEL_115;
  }
  v28 = v153;
LABEL_44:
  if (v41 >= v22)
    goto LABEL_67;
LABEL_45:
  if (__OFSUB__(v41, v31))
    goto LABEL_148;
  if (v41 - v31 >= v150)
    goto LABEL_67;
  if (__OFADD__(v31, v150))
    goto LABEL_151;
  if (v31 + v150 >= v22)
    v68 = v22;
  else
    v68 = v31 + v150;
  if (v68 >= v31)
  {
    if (v41 != v68)
    {
      v153 = v28;
      v154 = v2;
      v69 = *(_QWORD *)(v161 + 72);
      v70 = v69 * (v41 - 1);
      v164 = v69;
      v71 = v41 * v69;
      v158 = v68;
      do
      {
        v73 = 0;
        v74 = v31;
        v165 = v41;
        while (1)
        {
          v75 = *v168;
          v76 = v71;
          sub_226453518(v71 + v73 + *v168, (uint64_t)v12);
          v77 = v70;
          v78 = v70 + v73 + v75;
          v79 = v163;
          sub_226453518(v78, v163);
          v80 = v79;
          v81 = v12[104];
          v82 = *(unsigned __int8 *)(v79 + 104);
          if (v81 == v82)
          {
            v83 = (unint64_t *)(*((_QWORD *)v12 + 14) + 16);
            v84 = (unint64_t *)(*(_QWORD *)(v79 + 112) + 16);
          }
          else
          {
            v85 = (char)v82;
            v83 = (unint64_t *)((char *)&unk_2265620A8 + 8 * (char)v81);
            v84 = (unint64_t *)((char *)&unk_2265620A8 + 8 * v85);
          }
          v86 = (uint64_t)v12;
          v87 = *v83;
          v88 = *v84;
          sub_22645355C(v80);
          sub_22645355C(v86);
          if (v87 >= v88)
            break;
          v89 = *v168;
          if (!*v168)
            goto LABEL_153;
          v70 = v77;
          v71 = v76;
          v90 = v89 + v70 + v73;
          sub_226490CC0(v89 + v76 + v73, v167);
          swift_arrayInitWithTakeFrontToBack();
          sub_226490CC0(v167, v90);
          v72 = v165;
          v73 -= v164;
          ++v74;
          v12 = v166;
          if (v165 == v74)
            goto LABEL_55;
        }
        v72 = v165;
        v12 = v166;
        v70 = v77;
        v71 = v76;
LABEL_55:
        v41 = v72 + 1;
        v70 += v164;
        v71 += v164;
        v31 = v159;
      }
      while (v41 != v158);
      v41 = v158;
      v28 = v153;
      v2 = v154;
    }
    goto LABEL_67;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  sub_22655D3DC();
  __break(1u);
}

void sub_226492838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v35 = a4;
  v30 = a1;
  v31 = type metadata accessor for LineAnimation();
  MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - v12;
  v33 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v36 = v14 * (v33 - 1);
    v32 = v14;
    v15 = v14 * v33;
LABEL_5:
    v16 = 0;
    v17 = v30;
    while (1)
    {
      v18 = *v35;
      sub_226453518(v15 + v16 + *v35, (uint64_t)v13);
      sub_226453518(v36 + v16 + v18, (uint64_t)v9);
      v19 = v13[104];
      v20 = v9[104];
      if (v19 == v20)
      {
        v21 = (unint64_t *)(*((_QWORD *)v13 + 14) + 16);
        v22 = (unint64_t *)(*((_QWORD *)v9 + 14) + 16);
      }
      else
      {
        v23 = (char)v20;
        v21 = (unint64_t *)((char *)&unk_2265620A8 + 8 * (char)v19);
        v22 = (unint64_t *)((char *)&unk_2265620A8 + 8 * v23);
      }
      v24 = *v21;
      v25 = *v22;
      sub_22645355C((uint64_t)v9);
      sub_22645355C((uint64_t)v13);
      if (v24 >= v25)
      {
LABEL_4:
        v36 += v32;
        v15 += v32;
        if (++v33 == v29)
          return;
        goto LABEL_5;
      }
      v26 = *v35;
      if (!*v35)
        break;
      v27 = v26 + v36 + v16;
      sub_226490CC0(v26 + v15 + v16, v34);
      swift_arrayInitWithTakeFrontToBack();
      sub_226490CC0(v34, v27);
      v16 -= v32;
      if (v33 == ++v17)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_226492A6C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v28;
  int v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v57 = type metadata accessor for LineAnimation();
  MEMORY[0x24BDAC7A8](v57);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v54 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v54 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v54 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_67;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_68;
  v22 = (uint64_t)(a2 - a1) / v19;
  v60 = a1;
  v59 = a4;
  v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v55 = v15;
      v56 = a1;
      v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v38 = a4 + v25;
      v58 = a4 + v25;
      v60 = a2;
      if (v25 >= 1 && v56 < a2)
      {
        v40 = -v19;
        do
        {
          sub_226453518(v38 + v40, (uint64_t)v10);
          v41 = a2 + v40;
          v42 = v55;
          sub_226453518(a2 + v40, v55);
          v43 = v42;
          v44 = v10[104];
          v45 = *(unsigned __int8 *)(v42 + 104);
          if (v44 == v45)
          {
            v46 = (unint64_t *)(*((_QWORD *)v10 + 14) + 16);
            v47 = (unint64_t *)(*(_QWORD *)(v42 + 112) + 16);
          }
          else
          {
            v48 = (char)v45;
            v46 = (unint64_t *)((char *)&unk_2265620A8 + 8 * (char)v44);
            v47 = (unint64_t *)((char *)&unk_2265620A8 + 8 * v48);
          }
          v49 = *v46;
          v50 = *v47;
          v51 = a3 + v40;
          sub_22645355C(v43);
          sub_22645355C((uint64_t)v10);
          if (v49 >= v50)
          {
            v52 = v58;
            v58 += v40;
            if (a3 < v52 || v51 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v52)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v41 = a2;
          }
          else
          {
            if (a3 < a2 || v51 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v60 += v40;
          }
          v38 = v58;
          if (v58 <= a4)
            break;
          a2 = v41;
          a3 += v40;
        }
        while (v41 > v56);
      }
      goto LABEL_65;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v26 = a4 + v24;
    v58 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      do
      {
        sub_226453518(a2, (uint64_t)v17);
        sub_226453518(a4, (uint64_t)v13);
        v28 = v17[104];
        v29 = v13[104];
        if (v28 == v29)
        {
          v30 = (unint64_t *)(*((_QWORD *)v17 + 14) + 16);
          v31 = (unint64_t *)(*((_QWORD *)v13 + 14) + 16);
        }
        else
        {
          v32 = (char)v29;
          v30 = (unint64_t *)((char *)&unk_2265620A8 + 8 * (char)v28);
          v31 = (unint64_t *)((char *)&unk_2265620A8 + 8 * v32);
        }
        v33 = *v30;
        v34 = *v31;
        sub_22645355C((uint64_t)v13);
        sub_22645355C((uint64_t)v17);
        v35 = v60;
        if (v33 >= v34)
        {
          v37 = v59 + v19;
          if (v60 < v59 || v60 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v60 != v59)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v59 = v37;
          v36 = a2;
        }
        else
        {
          v36 = a2 + v19;
          if (v60 < a2 || v60 >= v36)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v60 == a2)
          {
            v35 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v60 = v35 + v19;
        a4 = v59;
        if (v59 >= v26)
          break;
        a2 = v36;
      }
      while (v36 < a3);
    }
LABEL_65:
    sub_2264CA11C(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_69:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

unint64_t sub_226492F58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  int32x4_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];

  v2 = type metadata accessor for LineAnimation();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return MEMORY[0x24BEE4AF8];
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = a1 + v10;
  v12 = *(_QWORD *)(v6 + 72);
  v21[1] = a1;
  swift_bridgeObjectRetain();
  v13 = MEMORY[0x24BEE4AF8];
  do
  {
    sub_226453518(v11, (uint64_t)v8);
    v14 = (float32x4_t *)*((_QWORD *)v8 + 14);
    v15 = v14[1].i64[0];
    if (v15)
    {
      v16 = vsubq_f32(v14[2], v14[v15 + 1]);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32(v17, 2), vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1))).f32[0] >= 0.00000001)
      {
        sub_226453518((uint64_t)v8, (uint64_t)v4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_226487704(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
        v19 = *(_QWORD *)(v13 + 16);
        v18 = *(_QWORD *)(v13 + 24);
        if (v19 >= v18 >> 1)
          v13 = sub_226487704(v18 > 1, v19 + 1, 1, v13);
        *(_QWORD *)(v13 + 16) = v19 + 1;
        sub_226490CC0((uint64_t)v4, v13 + v10 + v19 * v12);
      }
    }
    sub_22645355C((uint64_t)v8);
    v11 += v12;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_226493118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255843DE8;
  if (!qword_255843DE8)
  {
    v1 = type metadata accessor for EdgeEntity();
    result = MEMORY[0x22769A794](&unk_226562078, v1);
    atomic_store(result, (unint64_t *)&qword_255843DE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemSides()
{
  return &type metadata for ItemSides;
}

_DWORD *sub_226493170@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_22649317C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_226493184@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_226493198@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_2264931AC(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_2264931DC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_226493208@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_22649322C(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_226493240(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_226493254@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_226493268(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_22649327C()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_22649328C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_2264932A0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_2264932B0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = sub_226438350(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_2264932F0()
{
  unint64_t result;

  result = qword_255843DF8;
  if (!qword_255843DF8)
  {
    result = MEMORY[0x22769A794](&unk_22656210C, &type metadata for ItemSides);
    atomic_store(result, (unint64_t *)&qword_255843DF8);
  }
  return result;
}

unint64_t sub_226493338()
{
  unint64_t result;

  result = qword_255843E00;
  if (!qword_255843E00)
  {
    result = MEMORY[0x22769A794](&unk_2265620DC, &type metadata for ItemSides);
    atomic_store(result, (unint64_t *)&qword_255843E00);
  }
  return result;
}

unint64_t sub_226493380()
{
  unint64_t result;

  result = qword_255843E08;
  if (!qword_255843E08)
  {
    result = MEMORY[0x22769A794](&unk_226562134, &type metadata for ItemSides);
    atomic_store(result, (unint64_t *)&qword_255843E08);
  }
  return result;
}

unint64_t sub_2264933C8()
{
  unint64_t result;

  result = qword_255843E10;
  if (!qword_255843E10)
  {
    result = MEMORY[0x22769A794](&unk_22656216C, &type metadata for ItemSides);
    atomic_store(result, (unint64_t *)&qword_255843E10);
  }
  return result;
}

uint64_t sub_226493410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_226493418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_226493420(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t sub_226493428(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t sub_226493430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t sub_226493438(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t sub_226493440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t sub_226493448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t sub_226493450(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t sub_226493458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t sub_226493460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t sub_226493468(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t sub_226493470(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t sub_226493478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t sub_226493480(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t sub_226493488(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t sub_226493490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t sub_226493498(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t sub_2264934A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t sub_2264934A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t sub_2264934B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t sub_2264934B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t sub_2264934C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t sub_2264934C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t sub_2264934D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t sub_2264934D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t sub_2264934E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t sub_2264934E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t sub_2264934F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 320))();
}

uint64_t sub_2264934F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t sub_226493500(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t sub_226493508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 344))();
}

uint64_t sub_226493510(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 352))();
}

uint64_t sub_226493518(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 360))();
}

uint64_t sub_226493520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 368))();
}

uint64_t sub_226493528(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t sub_226493530(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 384))();
}

uint64_t sub_226493538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 392))();
}

uint64_t sub_226493540()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameTextures()
{
  return objc_opt_self();
}

uint64_t sub_226493594(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  _QWORD v18[6];

  v6 = v5;
  v12 = *(NSObject **)(v5 + 24);
  v13 = swift_allocObject();
  v14 = a4[1];
  *(_OWORD *)(v13 + 16) = *a4;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = a4[2];
  *(_QWORD *)(v13 + 64) = a1;
  *(_QWORD *)(v13 + 72) = a2;
  *(_QWORD *)(v13 + 80) = a3;
  *(double *)(v13 + 88) = a5;
  *(_QWORD *)(v13 + 96) = v6;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_2264952FC;
  *(_QWORD *)(v15 + 24) = v13;
  v18[4] = sub_22646F12C;
  v18[5] = v15;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = sub_226558F38;
  v18[3] = &block_descriptor_16;
  v16 = _Block_copy(v18);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  dispatch_sync(v12, v16);
  _Block_release(v16);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v12 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_22649371C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform v21;

  v11 = a1[1];
  *(_OWORD *)&v21.a = *a1;
  *(_OWORD *)&v21.c = v11;
  *(_OWORD *)&v21.tx = a1[2];
  CGAffineTransformInvert(&v20, &v21);
  *((_QWORD *)&v12 + 1) = *(_QWORD *)&v20.b;
  *(float32x2_t *)&v12 = vcvt_f32_f64(*(float64x2_t *)&v20.a);
  v18 = v12;
  *(float32x2_t *)&v12 = vcvt_f32_f64(*(float64x2_t *)&v20.c);
  v19 = v12;
  *(float32x2_t *)&v13 = vcvt_f32_f64(*(float64x2_t *)&v20.tx);
  *((_QWORD *)&v13 + 1) = 1065353216;
  v17 = v13;
  type metadata accessor for FrameTextures();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  *(_QWORD *)(v14 + 32) = a4;
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(_OWORD *)(v14 + 80) = v17;
  *(double *)(v14 + 96) = a6;
  swift_beginAccess();
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  v15 = swift_unknownObjectRetain();
  MEMORY[0x227699594](v15);
  if (*(_QWORD *)((*(_QWORD *)(a5 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a5 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_22655CEF0();
  sub_22655CF08();
  sub_22655CEE4();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_22649386C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  _QWORD v17[6];

  v11 = *(NSObject **)(v5 + 24);
  v12 = swift_allocObject();
  swift_weakInit();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a5;
  v13[7] = a4;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_226495288;
  *(_QWORD *)(v14 + 24) = v13;
  v17[4] = sub_22646F0CC;
  v17[5] = v14;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = sub_226558F38;
  v17[3] = &block_descriptor_1;
  v15 = _Block_copy(v17);
  swift_retain();
  swift_release();
  dispatch_sync(v11, v15);
  _Block_release(v15);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v11 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_2264939D0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = result;
    v13 = (unint64_t *)(result + 16);
    swift_beginAccess();
    v14 = *(_QWORD *)(v12 + 16);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      if (sub_22655D400())
      {
LABEL_4:
        if ((v14 & 0xC000000000000001) != 0)
        {
          v16 = MEMORY[0x2276999E4](0, v14);
        }
        else
        {
          if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          v16 = *(_QWORD *)(v14 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        *a2 = *(_QWORD *)(v16 + 16);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a3 = *(_QWORD *)(v16 + 24);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a4 = *(_QWORD *)(v16 + 32);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a5 = *(_QWORD *)(v16 + 96);
        v17 = *(_OWORD *)(v16 + 64);
        v18 = *(_OWORD *)(v16 + 80);
        *(_OWORD *)a6 = *(_OWORD *)(v16 + 48);
        *(_OWORD *)(a6 + 16) = v17;
        *(_OWORD *)(a6 + 32) = v18;
        swift_beginAccess();
        a6 = *v13;
        if (!(*v13 >> 62))
        {
          if (*(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_9;
          goto LABEL_23;
        }
LABEL_22:
        swift_bridgeObjectRetain();
        v19 = sub_22655D400();
        swift_bridgeObjectRelease();
        if (v19)
        {
LABEL_9:
          a6 = *v13;
          if (!(*v13 >> 62))
          {
            if (*(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_11;
            goto LABEL_25;
          }
LABEL_24:
          swift_bridgeObjectRetain();
          v20 = sub_22655D400();
          swift_bridgeObjectRelease();
          if (v20)
          {
LABEL_11:
            if ((a6 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_28;
              }
              result = swift_retain();
LABEL_14:
              if (!(*v13 >> 62))
              {
                if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
LABEL_16:
                  sub_22650A744(0, 1);
                  swift_endAccess();
                  swift_release();
                  swift_release();
                  return swift_release();
                }
                goto LABEL_29;
              }
LABEL_28:
              swift_bridgeObjectRetain();
              v21 = sub_22655D400();
              result = swift_bridgeObjectRelease();
              if (v21)
                goto LABEL_16;
LABEL_29:
              __break(1u);
              return result;
            }
LABEL_26:
            result = MEMORY[0x2276999E4](0, a6);
            goto LABEL_14;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
        goto LABEL_4;
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_226493CAC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameTextureCache()
{
  return objc_opt_self();
}

uint64_t sub_226493CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = sub_22655D064();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22655D04C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v5);
  v7 = sub_22655CBFC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  sub_22646EF58();
  sub_22655CBCC();
  v10[1] = v8;
  sub_226494F3C((unint64_t *)&qword_2558491E0, 255, v6, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558442B0);
  sub_22646EFDC();
  sub_22655D214();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  *(_QWORD *)(v0 + 24) = sub_22655D088();
  return v0;
}

uint64_t sub_226493EB0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PixelBufferFormat()
{
  return objc_opt_self();
}

BOOL sub_226493EE0(uint64_t *a1, uint64_t *a2)
{
  return sub_226494C8C(*a1, *a2);
}

uint64_t sub_226493EEC()
{
  sub_22655D640();
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655D67C();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226493F54()
{
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655D67C();
  return sub_22655D64C();
}

uint64_t sub_226493FA4()
{
  sub_22655D640();
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655CFC8();
  sub_22655D64C();
  sub_22655D67C();
  sub_22655D64C();
  return sub_22655D670();
}

uint64_t sub_226494008(void *a1, _OWORD *a2)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  double v14;

  v4 = objc_msgSend(a1, sel_capturedImage);
  v5 = sub_22649446C(v4);

  v6 = sub_226558920();
  if (v6)
  {
    v7 = v6;
    v8 = sub_22649432C(v6, 0, MTLPixelFormatR32Float);

  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(a1, sel_smoothedSceneDepth);
  if (v9
    && (v10 = v9, v11 = objc_msgSend(v9, sel_confidenceMap), v10, v11)
    || (v12 = objc_msgSend(a1, sel_sceneDepth),
        v11 = objc_msgSend(v12, sel_confidenceMap),
        v12,
        v11))
  {
    v13 = sub_22649432C(v11, 0, MTLPixelFormatR8Uint);

  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(a1, sel_timestamp);
  sub_226493594((uint64_t)v5, (uint64_t)v8, (uint64_t)v13, a2, v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_226494170(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  if (!a3)
    return 0;
  v7 = *(_BYTE *)(v3 + 72);
  swift_unknownObjectRetain();
  if ((v7 & 1) == 0)
  {
    sub_2264948B0((uint64_t)objc_msgSend(a3, sel_width), (uint64_t)objc_msgSend(a3, sel_height));
    *(_BYTE *)(v3 + 72) = 1;
  }
  v8 = *(_QWORD *)(v3 + 88);
  if (!v8 || (v9 = *(_QWORD *)(v3 + 96)) == 0 || (v10 = *(_QWORD *)(v3 + 104)) == 0)
  {
    v11 = 0;
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(v3 + 112);
  if (v11)
  {
    v12 = *(void **)(v3 + 64);
    if (v12)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v12, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, v8);
      objc_msgSend(v12, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, v9);
      v13 = *(void **)(v3 + 56);
      if (!v13)
      {
LABEL_11:
        objc_msgSend(v13, sel_encodeReconstructionToCommandBuffer_guidanceTexture_coefficientsTexture_destinationTexture_, a1, v8, v10, v11);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_13;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v13 = *(void **)(v3 + 56);
      if (!v13)
        goto LABEL_11;
    }
    objc_msgSend(v13, sel_encodeRegressionToCommandBuffer_sourceTexture_guidanceTexture_weightsTexture_destinationCoefficientsTexture_, a1, a3, v9, 0, v10);
    goto LABEL_11;
  }
LABEL_13:
  swift_unknownObjectRelease();
  return v11;
}

id sub_22649432C(void *a1, size_t a2, MTLPixelFormat a3)
{
  uint64_t v3;
  void *v7;
  __CVMetalTextureCache *v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  CVReturn TextureFromImage;
  CVMetalTextureRef v14;
  id v15;
  __CVBuffer *v17;
  CVMetalTextureRef textureOut[5];

  textureOut[4] = *(CVMetalTextureRef *)MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v7 = *(void **)(v3 + 128);
  if (v7)
  {
    v8 = v7;
    v9 = sub_226494598(a1);
    if (v9)
    {
      v10 = v9;
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(v9, a2);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(v10, a2);
      textureOut[0] = 0;
      TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v8, v10, 0, a3, WidthOfPlane, HeightOfPlane, a2, textureOut);
      v14 = textureOut[0];
      if (TextureFromImage)
      {

        v8 = v10;
      }
      else
      {
        if (textureOut[0])
        {
          v17 = textureOut[0];
          v15 = CVMetalTextureGetTexture(v17);

          return v15;
        }
        v14 = v10;
      }

    }
    else
    {

    }
  }
  return 0;
}

id sub_22649446C(void *a1)
{
  uint64_t v1;
  void *v3;
  __CVMetalTextureCache *v4;
  __CVBuffer *v5;
  __CVBuffer *v6;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  CVReturn TextureFromImage;
  CVMetalTextureRef v10;
  id v11;
  __CVBuffer *v13;
  CVMetalTextureRef textureOut[5];

  textureOut[4] = *(CVMetalTextureRef *)MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v3 = *(void **)(v1 + 128);
  if (v3)
  {
    v4 = v3;
    v5 = sub_226494598(a1);
    if (v5)
    {
      v6 = v5;
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(v5, 0);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(v6, 0);
      textureOut[0] = 0;
      TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v4, v6, 0, (MTLPixelFormat)0x208uLL, WidthOfPlane, HeightOfPlane, 0, textureOut);
      v10 = textureOut[0];
      if (TextureFromImage)
      {

        v4 = v6;
        v6 = v10;
      }
      else if (textureOut[0])
      {
        v13 = textureOut[0];
        v11 = CVMetalTextureGetTexture(v13);

        return v11;
      }

    }
    else
    {

    }
  }
  return 0;
}

CVPixelBufferRef sub_226494598(void *a1)
{
  uint64_t v1;
  __CVBuffer *v2;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  CVPixelBufferPoolRef v10;
  void *v11;
  uint64_t v12;
  __CVPixelBufferPool *v13;
  CVPixelBufferRef v14;
  __CVBuffer *v15;
  int64_t PlaneCount;
  int64_t v17;
  size_t i;
  void *BaseAddressOfPlane;
  void *v20;
  int64_t BytesPerRowOfPlane;
  int64_t HeightOfPlane;
  void *BaseAddress;
  void *v24;
  size_t DataSize;
  CVPixelBufferRef pixelBufferOut[7];

  pixelBufferOut[6] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v2 = a1;
  Width = CVPixelBufferGetWidth(v2);
  Height = CVPixelBufferGetHeight(v2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v2);

  type metadata accessor for PixelBufferFormat();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = Width;
  *(_QWORD *)(v6 + 24) = Height;
  *(_DWORD *)(v6 + 32) = PixelFormatType;
  v7 = (uint64_t *)(v1 + 32);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = sub_22649C944(v6, v8);
  swift_release();
  swift_bridgeObjectRelease();

  if (!v9)
  {
    swift_retain();
    v10 = sub_226494F7C(v2);
    swift_beginAccess();
    if (v10)
    {
      sub_22649DE74((uint64_t)v10, v6);
      swift_release();
    }
    else
    {
      v11 = (void *)sub_226540320(v6);
      swift_release();

    }
    swift_endAccess();
  }
  v12 = *v7;
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = (__CVPixelBufferPool *)sub_22649C944(v6, v12);
  swift_release();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_12;
  pixelBufferOut[0] = 0;
  CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], v13, pixelBufferOut);
  v14 = pixelBufferOut[0];
  if (!pixelBufferOut[0])
    goto LABEL_20;
  v15 = pixelBufferOut[0];
  if (!CVPixelBufferLockBaseAddress(v2, 1uLL))
  {
    if (CVPixelBufferLockBaseAddress(v15, 0))
    {
      CVPixelBufferUnlockBaseAddress(v2, 1uLL);
      goto LABEL_11;
    }
    PlaneCount = CVPixelBufferGetPlaneCount(v2);
    if (PlaneCount < 2)
    {
      CVPixelBufferLockBaseAddress(v2, 1uLL);
      CVPixelBufferLockBaseAddress(v15, 0);
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      v24 = CVPixelBufferGetBaseAddress(v15);
      DataSize = CVPixelBufferGetDataSize(v2);
      memcpy(v24, BaseAddress, DataSize);
    }
    else
    {
      v17 = PlaneCount;
      for (i = 0; i != v17; ++i)
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v2, i);
        v20 = CVPixelBufferGetBaseAddressOfPlane(v15, i);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v2, i);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v2, i);
        if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)HeightOfPlane) >> 64 != (BytesPerRowOfPlane
                                                                                       * HeightOfPlane) >> 63)
          __break(1u);
        memcpy(v20, BaseAddressOfPlane, BytesPerRowOfPlane * HeightOfPlane);
      }
    }
    CVPixelBufferUnlockBaseAddress(v15, 0);
    CVPixelBufferUnlockBaseAddress(v2, 1uLL);

LABEL_20:
    swift_release();
    return v14;
  }
LABEL_11:

LABEL_12:
  swift_release();
  return 0;
}

uint64_t sub_2264948B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(double *)(v2 + 16);
  v4 = v3 * (double)result;
  if (v4 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = v3 * (double)a2;
  if ((*(_QWORD *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v6 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_12;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < 9.22337204e18)
  {
    v8 = result;
    v9 = (uint64_t)v4;
    v19 = (uint64_t)v6;
    v10 = *(void **)(v2 + 120);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
    objc_msgSend(v11, sel_setPixelFormat_, 115);
    objc_msgSend(v11, sel_setWidth_, v8);
    objc_msgSend(v11, sel_setHeight_, a2);
    objc_msgSend(v11, sel_setUsage_, 3);
    v20 = a2;
    v12 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v11);

    *(_QWORD *)(v2 + 104) = v12;
    swift_unknownObjectRelease();
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
    objc_msgSend(v13, sel_setPixelFormat_, 55);
    objc_msgSend(v13, sel_setWidth_, v9);
    objc_msgSend(v13, sel_setHeight_, v19);
    objc_msgSend(v13, sel_setUsage_, 3);
    v14 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v13);

    *(_QWORD *)(v2 + 112) = v14;
    swift_unknownObjectRelease();
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
    objc_msgSend(v15, sel_setPixelFormat_, 115);
    objc_msgSend(v15, (SEL)&selRef_layoutSubviews, v9);
    objc_msgSend(v15, (SEL)&selRef_startOrientation, v19);
    objc_msgSend(v15, sel_setUsage_, 3);
    v16 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v15);

    *(_QWORD *)(v2 + 88) = v16;
    swift_unknownObjectRelease();
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
    objc_msgSend(v17, sel_setPixelFormat_, 115);
    objc_msgSend(v17, (SEL)&selRef_layoutSubviews, v8);
    objc_msgSend(v17, (SEL)&selRef_startOrientation, v20);
    objc_msgSend(v17, sel_setUsage_, 3);
    v18 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v17);

    *(_QWORD *)(v2 + 96) = v18;
    return swift_unknownObjectRelease();
  }
LABEL_14:
  __break(1u);
  return result;
}

id *sub_226494BB4()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_226494C20()
{
  sub_226494BB4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameProcessor()
{
  return objc_opt_self();
}

uint64_t sub_226494C60(uint64_t a1, uint64_t a2)
{
  return sub_226494F3C(&qword_255844298, a2, (uint64_t (*)(uint64_t))type metadata accessor for PixelBufferFormat, (uint64_t)&unk_226562428);
}

BOOL sub_226494C8C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void sub_226494CC8(id *a1, void *a2, id a3, id a4, id a5, id a6)
{
  id v12;
  id v13;
  id v14;

  v12 = *a1;
  if (!*a1
    || objc_msgSend(*a1, sel_width) != a3
    || objc_msgSend(v12, sel_height) != a4
    || objc_msgSend(v12, sel_pixelFormat) != a6
    || objc_msgSend(v12, sel_usage) != a5)
  {
    if (a3)
    {
      if (a4)
      {
        v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
        objc_msgSend(v13, sel_setPixelFormat_, a6);
        objc_msgSend(v13, sel_setWidth_, a3);
        objc_msgSend(v13, sel_setHeight_, a4);
        objc_msgSend(v13, sel_setUsage_, a5);
        v14 = objc_msgSend(a2, sel_newTextureWithDescriptor_, v13);
        swift_unknownObjectRelease();

        *a1 = v14;
      }
    }
  }
}

uint64_t sub_226494E10(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  double v7;

  v2 = v1;
  *(_QWORD *)(v1 + 16) = 0x400E000000000000;
  type metadata accessor for FrameTextureCache();
  v4 = swift_allocObject();
  sub_226493CF8();
  v5 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v5;
  *(_DWORD *)(v2 + 40) = 998445679;
  *(_QWORD *)(v2 + 48) = 5;
  *(_QWORD *)(v2 + 128) = 0;
  *(_BYTE *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = a1;
  swift_beginAccess();
  swift_unknownObjectRetain();
  CVMetalTextureCacheCreate(0, 0, a1, 0, (CVMetalTextureCacheRef *)(v2 + 128));
  swift_endAccess();
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE3D0]), sel_initWithDevice_kernelDiameter_, a1, 5);
  *(_QWORD *)(v2 + 56) = v6;
  LODWORD(v7) = 998445679;
  objc_msgSend(v6, sel_setEpsilon_, v7);
  *(_QWORD *)(v2 + 64) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE388]), sel_initWithDevice_, a1);
  return v2;
}

uint64_t sub_226494F3C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x22769A794](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

CVPixelBufferPoolRef sub_226494F7C(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFAllocator *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;
  CVPixelBufferPoolRef poolOut[2];

  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x24BDAC8D0];
  poolOut[0] = 0;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2558442C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_226560650;
  v6 = sub_22655CD88();
  v7 = MEMORY[0x24BEE44F0];
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 72) = v7;
  *(_DWORD *)(inited + 48) = PixelFormatType;
  v9 = sub_22655CD88();
  v10 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 80) = v9;
  *(_QWORD *)(inited + 88) = v11;
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 96) = Width;
  *(_QWORD *)(inited + 128) = sub_22655CD88();
  *(_QWORD *)(inited + 136) = v12;
  *(_QWORD *)(inited + 168) = v10;
  *(_QWORD *)(inited + 144) = Height;
  *(_QWORD *)(inited + 176) = sub_22655CD88();
  *(_QWORD *)(inited + 184) = v13;
  v14 = extraColumnsOnLeft;
  *(_QWORD *)(inited + 216) = v10;
  *(_QWORD *)(inited + 192) = v14;
  *(_QWORD *)(inited + 224) = sub_22655CD88();
  *(_QWORD *)(inited + 232) = v15;
  v16 = extraColumnsOnRight;
  *(_QWORD *)(inited + 264) = v10;
  *(_QWORD *)(inited + 240) = v16;
  *(_QWORD *)(inited + 272) = sub_22655CD88();
  *(_QWORD *)(inited + 280) = v17;
  v18 = extraRowsOnTop;
  *(_QWORD *)(inited + 312) = v10;
  *(_QWORD *)(inited + 288) = v18;
  *(_QWORD *)(inited + 320) = sub_22655CD88();
  *(_QWORD *)(inited + 328) = v19;
  v20 = extraRowsOnBottom;
  *(_QWORD *)(inited + 360) = v10;
  *(_QWORD *)(inited + 336) = v20;
  *(_QWORD *)(inited + 368) = sub_22655CD88();
  *(_QWORD *)(inited + 376) = v21;
  v22 = sub_226513998(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(inited + 408) = __swift_instantiateConcreteTypeFromMangledName(&qword_2558442C8);
  *(_QWORD *)(inited + 384) = v22;
  sub_226513AC4(inited);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2558442D0);
  v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_22655F8F0;
  *(_QWORD *)(v23 + 32) = sub_22655CD88();
  *(_QWORD *)(v23 + 40) = v24;
  *(_QWORD *)(v23 + 48) = 10;
  sub_226513BF8(v23);
  v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v26 = (const __CFDictionary *)sub_22655CCBC();
  swift_bridgeObjectRelease();
  v27 = (const __CFDictionary *)sub_22655CCBC();
  swift_bridgeObjectRelease();
  CVPixelBufferPoolCreate(v25, v26, v27, poolOut);

  return poolOut[0];
}

uint64_t sub_226495240()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_226495264()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_226495288()
{
  uint64_t v0;

  return sub_2264939D0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(_QWORD **)(v0 + 40), *(_QWORD **)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_226495298()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_2264952C0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2264952FC()
{
  uint64_t v0;

  return sub_22649371C((_OWORD *)(v0 + 16), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96), *(double *)(v0 + 88));
}

uint64_t sub_226495314()
{
  return swift_deallocObject();
}

uint64_t sub_22649532C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2264CA4C0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_226495E74(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_226495394(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  BOOL v11;

  v2 = a1[2];
  if (*(_QWORD *)&v2 != *(_QWORD *)&a2[2])
    return 0;
  if (!*(_QWORD *)&v2 || a1 == a2)
    return 1;
  v3 = a1 + 4;
  v4 = a2 + 4;
  v5 = *(_QWORD *)&v2 - 1;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = vceq_f32(v7, v8);
    v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

BOOL sub_226495400(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BOOL8 result;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  do
  {
    v5 = 0;
    v6 = 16 * v3++;
    v7 = *(_OWORD *)(v4 + v6);
    v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      v13 = v7;
      v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      v14 = v8;
      v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      result = v10 == v11;
      if (v5 == 2)
        break;
      while (1)
      {
        ++v5;
        if (result)
          break;
        result = 0;
        if (v5 == 2)
          return result;
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

BOOL sub_2264954C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL sub_22649552C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_2264955A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_226495614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  _QWORD v14[4];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  v4 = a2 + 32;
  v5 = v2 - 1;
  do
  {
    sub_226496910(v3, (uint64_t)v14);
    sub_226496910(v4, (uint64_t)v13);
    sub_22655D640();
    sub_226438600((uint64_t)v14, (uint64_t)&v11);
    __swift_project_boxed_opaque_existential_1(&v11, v12);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2558437F0);
    sub_22655CDDC();
    sub_22655CE00();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    sub_22655CE6C();
    sub_22655CE00();
    swift_bridgeObjectRelease();
    v6 = sub_22655D670();
    sub_22655D640();
    sub_226438600((uint64_t)v13, (uint64_t)&v11);
    __swift_project_boxed_opaque_existential_1(&v11, v12);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    sub_22655CDDC();
    sub_22655CE00();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    sub_22655CE6C();
    sub_22655CE00();
    swift_bridgeObjectRelease();
    v7 = sub_22655D670();
    sub_22649694C((uint64_t)v13);
    sub_22649694C((uint64_t)v14);
    v9 = v5-- != 0;
    result = v6 == v7;
    if (v6 != v7)
      break;
    v3 += 40;
    v4 += 40;
  }
  while (v9);
  return result;
}

_QWORD *sub_226495860(float32x2_t *a1, char a2, float a3, double a4, int32x2_t a5)
{
  float32x2_t *v5;
  float32x2_t *v7;
  float32x2_t *v8;
  float32x2_t v9;
  BOOL v10;
  float32x2_t *v11;
  float32x2_t *v12;
  int32x2_t v13;
  _QWORD *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  int32x2_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  uint64_t v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float32x2_t v46;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  float32x2_t v56;
  int32x2_t v57;
  float v58;

  *(float *)a5.i32 = a3;
  v7 = (float32x2_t *)v5[5];
  v8 = (float32x2_t *)a1[5];
  v9 = v7[2];
  if (*(_QWORD *)&v9 != *(_QWORD *)&v8[2])
    goto LABEL_11;
  if (v9)
    v10 = v7 == v8;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = v7 + 4;
    v12 = v8 + 4;
    while (1)
    {
      v13 = vceq_f32(*v11, *v12);
      if ((v13.i32[0] & v13.i32[1] & 1) == 0)
        break;
      ++v12;
      ++v11;
      if (!--*(_QWORD *)&v9)
        goto LABEL_9;
    }
LABEL_11:
    v16 = v5[2];
    v56 = v5[3];
    v17 = vsub_f32(v56, v16);
    v19 = a1[2];
    v18 = a1[3];
    v20 = vsub_f32(v18, v19);
    v57 = a5;
    v21 = _simd_orient_vf2((simd_float2)v17, (simd_float2)v20);
    v22 = vsub_f32(v19, v16);
    v23 = _simd_orient_vf2((simd_float2)v22, (simd_float2)v17);
    v24 = v23;
    v25 = fabsf(v23);
    if (fabsf(v21) >= *(float *)v57.i32 || v25 >= *(float *)v57.i32)
    {
      if (v21 == 0.0 && v23 != 0.0)
        return (_QWORD *)MEMORY[0x24BEE4AF8];
      v38 = _simd_orient_vf2((simd_float2)v22, (simd_float2)v20) / v21;
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v38 >= 0.0 && v38 <= 1.0 && (float)(v24 / v21) >= 0.0 && (float)(v24 / v21) <= 1.0)
      {
        v58 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
        v41 = swift_allocObject();
        v14 = (_QWORD *)v41;
        *(_OWORD *)(v41 + 16) = xmmword_22655F8F0;
        if (v58 == 0.0 || v58 == 1.0)
          v46 = vadd_f32(v16, vmul_n_f32(v17, v58));
        else
          v46 = vadd_f32(v19, vmul_n_f32(v20, v24 / v21));
        *(float32x2_t *)(v41 + 32) = v46;
      }
      return v14;
    }
    v27 = vcgt_f32((float32x2_t)vdup_lane_s32(v57, 0), vabs_f32(v22));
    if ((v27.i32[0] & v27.i32[1] & 1) != 0 || (sub_226453E20(v5, *(float *)v57.i32, v19) & 1) != 0)
    {
      v14 = sub_226486C2C(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v28 = v14[2];
      v29 = v14[3];
      v30 = v28 + 1;
      if (v28 >= v29 >> 1)
      {
        v54 = v28 + 1;
        v48 = v14;
        v49 = v14[2];
        v50 = sub_226486C2C((_QWORD *)(v29 > 1), v28 + 1, 1, v48);
        v28 = v49;
        v30 = v54;
        v14 = v50;
      }
    }
    else
    {
      if ((sub_226453E20(a1, *(float *)v57.i32, v16) & 1) == 0)
      {
        v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v31 = v56;
        v32 = *(float *)v57.i32;
LABEL_23:
        v33 = vsub_f32(v18, v31);
        v34 = fabsf(v33.f32[1]);
        v35 = fabsf(v33.f32[0]) < v32 && v34 < v32;
        if (v35 || (sub_226453E20(v5, v32, v18) & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = sub_226486C2C(0, v14[2] + 1, 1, v14);
          v37 = v14[2];
          v36 = v14[3];
          if (v37 >= v36 >> 1)
            v14 = sub_226486C2C((_QWORD *)(v36 > 1), v37 + 1, 1, v14);
          v14[2] = v37 + 1;
          v14[v37 + 4] = v18;
        }
        else if ((sub_226453E20(a1, *(float *)v57.i32, v31) & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = sub_226486C2C(0, v14[2] + 1, 1, v14);
          v44 = v14[2];
          v43 = v14[3];
          if (v44 >= v43 >> 1)
            v14 = sub_226486C2C((_QWORD *)(v43 > 1), v44 + 1, 1, v14);
          v14[2] = v44 + 1;
          v14[v44 + 4] = v31;
        }
        return v14;
      }
      v14 = sub_226486C2C(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v28 = v14[2];
      v45 = v14[3];
      v30 = v28 + 1;
      if (v28 >= v45 >> 1)
      {
        v55 = v28 + 1;
        v51 = v14;
        v52 = v14[2];
        v53 = sub_226486C2C((_QWORD *)(v45 > 1), v28 + 1, 1, v51);
        v28 = v52;
        v30 = v55;
        v14 = v53;
      }
      v19 = v16;
    }
    v31 = v56;
    v32 = *(float *)v57.i32;
    v14[2] = v30;
    v14[v28 + 4] = v19;
    goto LABEL_23;
  }
LABEL_9:
  if ((a2 & 1) != 0)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
  v14 = (_QWORD *)swift_allocObject();
  *((_OWORD *)v14 + 1) = xmmword_22655FA10;
  v15 = a1[3];
  v14[4] = a1[2];
  v14[5] = v15;
  return v14;
}

uint64_t sub_226495C8C(double a1, double a2)
{
  uint64_t v2;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v8;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  v5 = vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  *(_BYTE *)(v2 + 32) = v5.i8[0] & v5.i8[4] & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255841D18);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22655FA10;
  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  v8 = v6;
  swift_bridgeObjectRetain();
  sub_22649532C(&v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = v8;
  return v2;
}

uint64_t sub_226495D44()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTEdge()
{
  return objc_opt_self();
}

uint64_t sub_226495D88()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_22655D640();
  sub_22649684C((uint64_t)v3, *(_QWORD *)(v1 + 40));
  return sub_22655D670();
}

uint64_t sub_226495DCC(uint64_t a1)
{
  uint64_t v1;

  return sub_22649684C(a1, *(_QWORD *)(*(_QWORD *)v1 + 40));
}

uint64_t sub_226495DD8()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_22655D640();
  sub_22649684C((uint64_t)v2, *(_QWORD *)(*(_QWORD *)v0 + 40));
  return sub_22655D670();
}

uint64_t sub_226495E18(uint64_t a1, uint64_t a2)
{
  return sub_226495394(*(float32x2_t **)(*(_QWORD *)a1 + 40), *(float32x2_t **)(*(_QWORD *)a2 + 40));
}

unint64_t sub_226495E30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2558443C8;
  if (!qword_2558443C8)
  {
    v1 = type metadata accessor for CDTEdge();
    result = MEMORY[0x22769A794](&unk_226562484, v1);
    atomic_store(result, (unint64_t *)&qword_2558443C8);
  }
  return result;
}

uint64_t sub_226495E74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  float32x2_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t *v32;
  float32x2_t v33;
  uint64_t v34;
  float32x2_t *v35;
  float32x2_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x2_t *v102;
  int32x2_t v103;
  int32x2_t v104;

  v3 = a1[1];
  result = sub_22655D538();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v9 = 0;
      v10 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v12 = *(float32x2_t *)(v10 + 8 * i);
        v13 = v9;
        do
        {
          v14 = (float32x2_t *)(v10 + 8 * v13);
          v15 = *v14;
          if (fabsf(vsub_f32(v12, *v14).f32[0]) >= 0.00000011921)
          {
            if ((vcgt_f32(v15, v12).u8[0] & 1) == 0)
              break;
          }
          else if ((vcgt_f32(v15, v12).i32[1] & 1) == 0)
          {
            break;
          }
          if (!v10)
            goto LABEL_145;
          *v14 = v12;
          v14[1] = v15;
          --v13;
        }
        while (v13 != -1);
        ++v9;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v96 = a1;
  if (v3 < 2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    v102 = (float32x2_t *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v19 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v88 = v19;
      v98 = v16;
      if (v20 >= 2)
      {
        v89 = *v96;
        do
        {
          v90 = v20 - 2;
          if (v20 < 2)
            goto LABEL_136;
          if (!v89)
            goto LABEL_149;
          v91 = v88;
          v92 = *(_QWORD *)&v88[16 * v90 + 32];
          v93 = *(_QWORD *)&v88[16 * v20 + 24];
          sub_2264965A0((float32x2_t *)(v89 + 8 * v92), (float32x2_t *)(v89 + 8 * *(_QWORD *)&v88[16 * v20 + 16]), (float32x2_t *)(v89 + 8 * v93), v102);
          if (v1)
            goto LABEL_104;
          if (v93 < v92)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v91 = sub_2264CA374((uint64_t)v91);
          if (v90 >= *((_QWORD *)v91 + 2))
            goto LABEL_138;
          v94 = &v91[16 * v90 + 32];
          *(_QWORD *)v94 = v92;
          *((_QWORD *)v94 + 1) = v93;
          v95 = *((_QWORD *)v91 + 2);
          if (v20 > v95)
            goto LABEL_139;
          memmove(&v91[16 * v20 + 16], &v91[16 * v20 + 32], 16 * (v95 - v20));
          v88 = v91;
          *((_QWORD *)v91 + 2) = v95 - 1;
          v20 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v98 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v98 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2558443D0);
    v8 = sub_22655CEFC();
    *(_QWORD *)(v8 + 16) = v7;
    v98 = v8;
    v102 = (float32x2_t *)(v8 + 32);
  }
  v17 = 0;
  v18 = *a1;
  v97 = *a1 - 8;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v99 = v6;
  v100 = v3;
  v101 = v18;
  while (1)
  {
    v21 = v17++;
    if (v17 < v3)
    {
      v22 = *(float32x2_t *)(v18 + 8 * v17);
      v23 = *(float32x2_t *)(v18 + 8 * v21);
      v104 = vcgt_f32(v23, v22);
      v24 = *(_DWORD *)((unint64_t)&v104 | (4 * (fabsf(vsub_f32(v22, v23).f32[0]) < 0.00000011921)));
      v17 = v21 + 2;
      if (v21 + 2 < v3)
      {
        while (1)
        {
          v25 = v22;
          v22 = *(float32x2_t *)(v18 + 8 * v17);
          v103 = vcgt_f32(v25, v22);
          if ((v24 & 1) != (*(_DWORD *)((unint64_t)&v103 | (4
                                                                  * (fabsf(vsub_f32(v22, v25).f32[0]) < 0.00000011921))) & 1))
            break;
          if (v3 == ++v17)
          {
            v17 = v3;
            break;
          }
        }
      }
      if ((v24 & 1) != 0)
      {
        if (v17 < v21)
          goto LABEL_142;
        if (v21 < v17)
        {
          v26 = (uint64_t *)(v97 + 8 * v17);
          v27 = v17;
          v28 = v21;
          v29 = (uint64_t *)(v18 + 8 * v21);
          do
          {
            if (v28 != --v27)
            {
              if (!v18)
                goto LABEL_148;
              v30 = *v29;
              *v29 = *v26;
              *v26 = v30;
            }
            ++v28;
            --v26;
            ++v29;
          }
          while (v28 < v27);
        }
      }
    }
    if (v17 >= v3)
      goto LABEL_57;
    if (__OFSUB__(v17, v21))
      goto LABEL_140;
    if (v17 - v21 >= v6)
      goto LABEL_57;
    v31 = v21 + v6;
    if (__OFADD__(v21, v6))
      goto LABEL_143;
    if (v31 >= v3)
      v31 = v3;
    if (v31 < v21)
      break;
    if (v17 != v31)
    {
      v32 = (float32x2_t *)(v97 + 8 * v17);
      do
      {
        v33 = *(float32x2_t *)(v18 + 8 * v17);
        v34 = v21;
        v35 = v32;
        do
        {
          v36 = *v35;
          if (fabsf(vsub_f32(v33, *v35).f32[0]) >= 0.00000011921)
          {
            if ((vcgt_f32(v36, v33).u8[0] & 1) == 0)
              break;
          }
          else if ((vcgt_f32(v36, v33).i32[1] & 1) == 0)
          {
            break;
          }
          if (!v18)
            goto LABEL_146;
          *v35 = v33;
          v35[1] = v36;
          --v35;
          ++v34;
        }
        while (v17 != v34);
        ++v17;
        ++v32;
      }
      while (v17 != v31);
      v17 = v31;
    }
LABEL_57:
    if (v17 < v21)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_2264C9F78(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v38 = *((_QWORD *)v19 + 2);
    v37 = *((_QWORD *)v19 + 3);
    v20 = v38 + 1;
    v18 = v101;
    if (v38 >= v37 >> 1)
    {
      v87 = sub_2264C9F78((char *)(v37 > 1), v38 + 1, 1, v19);
      v18 = v101;
      v19 = v87;
    }
    *((_QWORD *)v19 + 2) = v20;
    v39 = v19 + 32;
    v40 = &v19[16 * v38 + 32];
    *(_QWORD *)v40 = v21;
    *((_QWORD *)v40 + 1) = v17;
    if (v38)
    {
      while (1)
      {
        v41 = v20 - 1;
        if (v20 >= 4)
        {
          v46 = &v39[16 * v20];
          v47 = *((_QWORD *)v46 - 8);
          v48 = *((_QWORD *)v46 - 7);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_124;
          v51 = *((_QWORD *)v46 - 6);
          v50 = *((_QWORD *)v46 - 5);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_125;
          v53 = v20 - 2;
          v54 = &v39[16 * v20 - 32];
          v56 = *(_QWORD *)v54;
          v55 = *((_QWORD *)v54 + 1);
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_127;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_130;
          if (v58 >= v49)
          {
            v76 = &v39[16 * v41];
            v78 = *(_QWORD *)v76;
            v77 = *((_QWORD *)v76 + 1);
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_134;
            v69 = v44 < v79;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v70 = *((_QWORD *)v19 + 4);
            v71 = *((_QWORD *)v19 + 5);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_88;
          }
          v43 = *((_QWORD *)v19 + 4);
          v42 = *((_QWORD *)v19 + 5);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_126;
        v53 = v20 - 2;
        v59 = &v39[16 * v20 - 32];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_129;
        v65 = &v39[16 * v41];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_132;
        if (__OFADD__(v63, v68))
          goto LABEL_133;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_94:
          if (v69)
            v41 = v53;
          goto LABEL_96;
        }
LABEL_88:
        if ((v64 & 1) != 0)
          goto LABEL_128;
        v72 = &v39[16 * v41];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_131;
        if (v75 < v63)
          goto LABEL_24;
LABEL_96:
        v80 = v41 - 1;
        if (v41 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v18)
          goto LABEL_147;
        v81 = v19;
        v82 = &v39[16 * v80];
        v83 = *(_QWORD *)v82;
        v84 = &v39[16 * v41];
        v85 = *((_QWORD *)v84 + 1);
        sub_2264965A0((float32x2_t *)(v18 + 8 * *(_QWORD *)v82), (float32x2_t *)(v18 + 8 * *(_QWORD *)v84), (float32x2_t *)(v18 + 8 * v85), v102);
        if (v1)
        {
LABEL_104:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v98 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v85 < v83)
          goto LABEL_121;
        if (v41 > *((_QWORD *)v81 + 2))
          goto LABEL_122;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v39[16 * v80 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v41 >= v86)
          goto LABEL_123;
        v19 = v81;
        v20 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v18 = v101;
        if (v86 <= 2)
          goto LABEL_24;
      }
    }
    v20 = 1;
LABEL_24:
    v6 = v99;
    v3 = v100;
    if (v17 >= v100)
    {
      v16 = v98;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_22655D3DC();
  __break(1u);
  return result;
}

uint64_t sub_2264965A0(float32x2_t *__src, float32x2_t *a2, float32x2_t *a3, float32x2_t *__dst)
{
  float32x2_t *v4;
  float32x2_t *v5;
  float32x2_t *v6;
  float32x2_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t *v14;
  int32x2_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float v21;
  float32x2_t *v22;
  int32x2_t v23;
  uint64_t result;
  float32x2_t *v25;
  float32x2_t *v26;
  float32x2_t *v27;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = (char *)a3 - (char *)a2;
  v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v12 = (char *)a3 - (char *)a2;
  v13 = v12 >> 3;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_48;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v17 = &v4[v13];
    v25 = v17;
    v27 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_47:
      sub_2264CA074((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
    while (1)
    {
      v18 = v17[-1];
      v19 = v6 - 1;
      v20 = v6[-1];
      v21 = fabsf(vsub_f32(v18, v20).f32[0]);
      v22 = v5 - 1;
      v23 = vcgt_f32(v20, v18);
      if (v21 >= 0.00000011921)
      {
        if ((v23.i8[0] & 1) == 0)
        {
LABEL_37:
          v25 = v17 - 1;
          if (v5 < v17 || v22 >= v17 || v5 != v17)
            *v22 = v17[-1];
          --v17;
          if (v6 <= v7)
            goto LABEL_47;
          goto LABEL_34;
        }
      }
      else if ((v23.i8[4] & 1) == 0)
      {
        goto LABEL_37;
      }
      if (v5 != v6 || v22 >= v6)
        *v22 = v20;
      v27 = --v6;
      if (v19 <= v7)
        goto LABEL_47;
LABEL_34:
      --v5;
      if (v17 <= v4)
        goto LABEL_47;
    }
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v25 = v14;
    if (v6 < v5 && v8 >= 8)
    {
      while (1)
      {
        v15 = vcgt_f32(*v4, *v6);
        if (fabsf(vsub_f32(*v6, *v4).f32[0]) >= 0.00000011921)
        {
          if ((v15.i8[0] & 1) != 0)
          {
LABEL_18:
            v16 = v6 + 1;
            if (v7 < v6 || v7 >= v16 || v7 != v6)
              *v7 = *v6;
            goto LABEL_22;
          }
        }
        else if ((v15.i8[4] & 1) != 0)
        {
          goto LABEL_18;
        }
        if (v7 != v4)
          *v7 = *v4;
        v26 = ++v4;
        v16 = v6;
LABEL_22:
        ++v7;
        if (v4 < v14)
        {
          v6 = v16;
          if (v16 < v5)
            continue;
        }
        v27 = v7;
        goto LABEL_47;
      }
    }
    goto LABEL_47;
  }
LABEL_48:
  result = sub_22655D43C();
  __break(1u);
  return result;
}

uint64_t sub_22649684C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_22655D64C();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 8;
      sub_22655D664();
      result = sub_22655D664();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2264968C4()
{
  sub_22655D664();
  return sub_22655D664();
}

uint64_t sub_226496910(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyCapturedRoomAttribute(a2, a1);
  return a2;
}

uint64_t sub_22649694C(uint64_t a1)
{
  destroy for AnyCapturedRoomAttribute();
  return a1;
}

uint64_t sub_226496980@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_226438354(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_2264969BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;

  v8 = *(_QWORD *)(v4 + 16);
  if ((v8 & 8) != 0)
  {
    sub_22649850C(a1);
    v8 = *(_QWORD *)(v4 + 16);
    if ((v8 & 8) != 0)
    {
      v10 = sub_226496A70(a1);
      sub_226498EE8(v10);
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v4 + 16);
    }
  }
  if ((v8 & 1) != 0)
  {
    sub_226499E14(a2);
    v8 = *(_QWORD *)(v4 + 16);
  }
  if (a3 && (v8 & 2) != 0)
  {
    swift_retain();
    sub_2264975BC();
    swift_release();
    v8 = *(_QWORD *)(v4 + 16);
  }
  if ((v8 & 4) != 0)
    sub_226497D00(a4);
}

uint64_t sub_226496A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  _QWORD v47[2];
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  char *v61;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844688);
  MEMORY[0x24BDAC7A8](v2);
  v57 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844690);
  MEMORY[0x24BDAC7A8](v4);
  v56 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22655C140();
  v55 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)v47 - v9;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844670);
  MEMORY[0x24BDAC7A8](v53);
  v52 = (uint64_t)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)v47 - v12;
  v58 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_255844698);
    v13 = sub_22655D430();
  }
  else
  {
    v13 = MEMORY[0x24BEE4B00];
  }
  v14 = *(_QWORD *)(v58 + 64);
  v49 = v58 + 64;
  v15 = -1 << *(_BYTE *)(v58 + 32);
  if (-v15 < 64)
    v16 = ~(-1 << -(char)v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v47[1] = -1 << *(_BYTE *)(v58 + 32);
  v48 = (unint64_t)(63 - v15) >> 6;
  v18 = v13 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v59 = 0;
  v50 = v13;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v59 << 6);
      goto LABEL_28;
    }
    v23 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v23 >= v48)
      goto LABEL_37;
    v24 = *(_QWORD *)(v49 + 8 * v23);
    v25 = v59 + 1;
    if (!v24)
    {
      v25 = v59 + 2;
      if (v59 + 2 >= v48)
        goto LABEL_37;
      v24 = *(_QWORD *)(v49 + 8 * v25);
      if (!v24)
      {
        v25 = v59 + 3;
        if (v59 + 3 >= v48)
          goto LABEL_37;
        v24 = *(_QWORD *)(v49 + 8 * v25);
        if (!v24)
        {
          v25 = v59 + 4;
          if (v59 + 4 >= v48)
            goto LABEL_37;
          v24 = *(_QWORD *)(v49 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_27:
    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    v59 = v25;
LABEL_28:
    v27 = v58;
    v28 = v55;
    v29 = *(_QWORD *)(v55 + 72);
    v30 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v51, *(_QWORD *)(v58 + 48) + v29 * v22, v6);
    v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v22);
    v32 = v53;
    *(_QWORD *)&v30[*(int *)(v53 + 48)] = v31;
    v33 = (uint64_t)v30;
    v34 = v52;
    sub_226446554(v33, v52, &qword_255844670);
    v35 = *(int *)(v32 + 48);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    v37 = v57;
    v36(v57, v34, v6);
    v60 = *(_QWORD *)(v34 + v35);
    v38 = v56;
    v36(v56, (uint64_t)v37, v6);
    v39 = v54;
    v36(v54, (uint64_t)v38, v6);
    v36(v61, (uint64_t)v39, v6);
    v13 = v50;
    sub_226437F28(&qword_2558436F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    swift_retain();
    result = sub_22655CCD4();
    v40 = -1 << *(_BYTE *)(v13 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v18 + 8 * (v41 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v18 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v18 + 8 * v42);
      }
      while (v46 == -1);
      v20 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v36)(*(_QWORD *)(v13 + 48) + v20 * v29, v61, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v20) = v60;
    ++*(_QWORD *)(v13 + 16);
  }
  v26 = v59 + 5;
  if (v59 + 5 >= v48)
  {
LABEL_37:
    swift_release();
    sub_22646C924();
    return v13;
  }
  v24 = *(_QWORD *)(v49 + 8 * v26);
  if (v24)
  {
    v25 = v59 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v48)
      goto LABEL_37;
    v24 = *(_QWORD *)(v49 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_226496F74(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = sub_22655CB84();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v2[5];
  if ((a1 & 1) != 0)
  {
    if (!v5 && !v2[6] && !v2[7] && !v2[8] && !v2[9])
    {
      v6 = (void *)objc_opt_self();
      v7 = objc_msgSend(v6, sel_systemRedColor);
      type metadata accessor for DebugArrowEntity();
      swift_allocObject();
      v8 = sub_22645188C(v7);
      v9 = objc_msgSend(v6, sel_magentaColor);
      swift_allocObject();
      v10 = sub_22645188C(v9);
      v11 = objc_msgSend(v6, sel_systemGreenColor);
      swift_allocObject();
      v16 = sub_22645188C(v11);
      v12 = objc_msgSend(v6, sel_systemMintColor);
      swift_allocObject();
      v13 = sub_22645188C(v12);
      v14 = objc_msgSend(v6, sel_blueColor);
      swift_allocObject();
      v15 = sub_22645188C(v14);
      type metadata accessor for DollHouse();
      sub_22655C230();
      sub_22655C230();
      sub_22655C230();
      sub_22655C230();
      sub_22655C230();
      swift_retain();
      sub_22655C89C();
      swift_release();
      swift_retain();
      sub_22655C89C();
      swift_release();
      swift_retain();
      sub_22655C89C();
      swift_release();
      swift_retain();
      sub_22655C89C();
      swift_release();
      swift_retain();
      sub_22655C89C();
      swift_release();
      v2[5] = v8;
      swift_release();
      v2[6] = v10;
      swift_release();
      v2[7] = v16;
      swift_release();
      v2[8] = v13;
      swift_release();
      v2[9] = v15;
LABEL_14:
      swift_release();
    }
  }
  else if (v5 && v2[6] && v2[7] && v2[8] && v2[9])
  {
    type metadata accessor for DollHouse();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_22655C218();
    sub_22655C218();
    sub_22655C218();
    sub_22655C218();
    sub_22655C218();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v2[5] = 0;
    swift_release();
    v2[6] = 0;
    swift_release();
    v2[7] = 0;
    swift_release();
    v2[8] = 0;
    swift_release();
    v2[9] = 0;
    goto LABEL_14;
  }
}

void sub_2264975BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t v3;
  double v4;
  int32x4_t v5;
  double v6;
  void (*v12)(_BYTE *, _QWORD);
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(_BYTE *, _QWORD);
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void (*v24)(_BYTE *, _QWORD);
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void (*v30)(_BYTE *, _QWORD);
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void (*v36)(_BYTE *, _QWORD);
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  float v42;
  float v43;
  float v44;
  void *v45;
  char **v46;
  char **v47;
  id v48;
  void *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float32x2_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[40];

  v1 = v0[4];
  if (v1)
  {
    if (v0[5])
    {
      if (v0[6])
      {
        if (v0[7])
        {
          if (v0[8])
          {
            v2 = v0[9];
            if (v2)
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              sub_22655C80C();
              v4 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)v3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)));
              v5 = (int32x4_t)vmulq_f32((float32x4_t)v3, (float32x4_t)v3);
              v5.i64[0] = vaddq_f32((float32x4_t)v5, (float32x4_t)vdupq_laneq_s32(v5, 2)).u64[0];
              *(float *)v5.i32 = sqrtf(*(float *)v5.i32);
              v6 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0)));
              if (*(float *)v5.i32 < 0.01)
                v6 = v4;
              v56 = *(float32x2_t *)&v6;
              swift_retain();
              sub_22655C89C();
              swift_release();
              swift_retain();
              sub_22655C89C();
              swift_release();
              swift_retain();
              sub_22655C89C();
              swift_release();
              swift_retain();
              sub_22655C89C();
              swift_release();
              swift_retain();
              sub_22655C89C();
              swift_release();
              v55 = *(_OWORD *)(v1 + 48);
              v59 = *(_OWORD *)(v1 + 64);
              __asm { FMOV            V3.4S, #1.0 }
              type metadata accessor for DebugArrowEntity();
              v12 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
              v14 = v13;
              sub_22655D610();
              v60 = v15;
              sub_22655D028();
              v57 = v16;
              sub_22655D01C();
              *v14 = v17;
              v14[1] = v57;
              v14[2] = v60;
              v12(v64, 0);
              v18 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
              v20 = v19;
              sub_22655D610();
              v52 = v21;
              sub_22655D028();
              v51 = v22;
              sub_22655D01C();
              *v20 = v23;
              v20[1] = v51;
              v20[2] = v52;
              v18(v64, 0);
              v24 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
              v26 = v25;
              sub_22655D610();
              v54 = v27;
              sub_22655D028();
              v53 = v28;
              sub_22655D01C();
              *v26 = v29;
              v26[1] = v53;
              v26[2] = v54;
              v24(v64, 0);
              v30 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
              v32 = v31;
              sub_22655D610();
              v61 = v33;
              sub_22655D028();
              v58 = v34;
              sub_22655D01C();
              *v32 = v35;
              v32[1] = v58;
              v32[2] = v61;
              v30(v64, 0);
              v36 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
              v38 = v37;
              sub_22655D610();
              v63 = v39;
              sub_22655D028();
              v62 = v40;
              sub_22655D01C();
              *v38 = v41;
              v38[1] = v62;
              v38[2] = v63;
              v36(v64, 0);
              v42 = vaddv_f32(vmul_f32(v56, *(float32x2_t *)&v55));
              v43 = vaddv_f32(vmul_f32(v56, vsub_f32(0, *(float32x2_t *)&v55)));
              v44 = vaddv_f32(vmul_f32(v56, *(float32x2_t *)&v59));
              if (vaddv_f32(vmul_f32(v56, vsub_f32(0, *(float32x2_t *)&v59))) > 0.4)
              {
                if (v42 <= 0.4)
                {
                  if (v43 <= 0.4)
                  {
                    if (v44 <= 0.4)
                    {
                      v45 = (void *)objc_opt_self();
                      v46 = &selRef_systemMintColor;
                      goto LABEL_30;
                    }
                  }
                  else if (v44 <= 0.4)
                  {
                    v45 = (void *)objc_opt_self();
                    v46 = &selRef_systemBrownColor;
                    goto LABEL_30;
                  }
                }
                else if (v43 <= 0.4 && v44 <= 0.4)
                {
                  v45 = (void *)objc_opt_self();
                  v46 = &selRef_systemOrangeColor;
LABEL_30:
                  v48 = objc_msgSend(v45, *v46, v51);
                  v49 = *(void **)(v2 + qword_25585ADD0);
                  *(_QWORD *)(v2 + qword_25585ADD0) = v48;
                  v50 = v48;
                  sub_226451604();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();

                  return;
                }
LABEL_29:
                v45 = (void *)objc_opt_self();
                v46 = &selRef_blackColor;
                goto LABEL_30;
              }
              if (v42 <= 0.4)
              {
                if (v43 <= 0.4)
                {
                  if (v44 > 0.4)
                  {
                    v45 = (void *)objc_opt_self();
                    v46 = &selRef_systemGreenColor;
                    goto LABEL_30;
                  }
                  goto LABEL_29;
                }
                v45 = (void *)objc_opt_self();
                v46 = &selRef_magentaColor;
                v47 = &selRef_systemPurpleColor;
              }
              else
              {
                if (v43 > 0.4)
                  goto LABEL_29;
                v45 = (void *)objc_opt_self();
                v46 = &selRef_systemRedColor;
                v47 = &selRef_systemYellowColor;
              }
              if (v44 > 0.4)
                v46 = v47;
              goto LABEL_30;
            }
          }
        }
      }
    }
  }
}

void sub_226497D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  float32x2_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  void (*v61)(_QWORD *, _QWORD);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = sub_22655C140();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v53 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v1;
  v13 = *(_QWORD *)(v1 + 32);
  if (!v13)
    return;
  __swift_instantiateConcreteTypeFromMangledName(&qword_255844678);
  v14 = swift_allocObject();
  v69 = v12;
  *(_OWORD *)(v14 + 16) = xmmword_22655FA80;
  v15 = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(v14 + 32) = v15;
  *(_OWORD *)(v14 + 48) = xmmword_226562500;
  *(float32x2_t *)(v14 + 64) = vsub_f32(0, *(float32x2_t *)&v15);
  *(_OWORD *)(v14 + 80) = xmmword_226562510;
  v16 = *(_OWORD *)(v13 + 64);
  *(_QWORD *)(v14 + 96) = v16;
  *(_OWORD *)(v14 + 112) = xmmword_226562520;
  *(float32x2_t *)(v14 + 128) = vsub_f32(0, *(float32x2_t *)&v16);
  *(_OWORD *)(v14 + 144) = xmmword_226562530;
  v17 = sub_226525D58(v14);
  swift_setDeallocating();
  v18 = v69;
  swift_deallocClassInstance();
  v19 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v67 = v21 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v20 + 63) >> 6;
  v53[1] = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = v67;
  v24 = 0;
  v58 = xmmword_22655F8F0;
  v57 = a1;
  v63 = v4;
  v65 = v6;
  v56 = v17;
  v54 = v22;
  v25 = a1;
  v64 = v9;
  v55 = a1 + 64;
  while (1)
  {
    while (v23)
    {
      v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v28 = v27 | (v24 << 6);
      if (*(_QWORD *)(v17 + 16))
      {
LABEL_25:
        v67 = v23;
        v32 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v28);
        v33 = *(float32x2_t *)(*(_QWORD *)(v25 + 48) + 8 * v28);
        v66 = v24;
        v34 = sub_2265349B8(v33);
        v23 = v67;
        v24 = v66;
        if ((v35 & 1) != 0)
        {
          v36 = *(_QWORD *)(v32 + 16);
          v59 = v32;
          if (v36)
          {
            v60 = *(_OWORD *)(*(_QWORD *)(v17 + 56) + 16 * v34);
            v37 = (char *)(v32
                         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
            swift_bridgeObjectRetain();
            v71 = *(_QWORD *)(v4 + 72);
            v70 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
            v38 = v70;
            v70(v18, v37, v3);
            while (1)
            {
              v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
              v26(v18, 0, 1, v3);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v3) == 1)
                break;
              (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v18, v3);
              v40 = sub_22643501C();
              v38(v6, v9, v3);
              swift_beginAccess();
              v41 = *(_QWORD *)(v40 + 96);
              swift_bridgeObjectRetain();
              swift_release();
              if (*(_QWORD *)(v41 + 16) && (v42 = sub_226534858((uint64_t)v6), (v43 & 1) != 0))
              {
                v44 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42);
                swift_retain();
                swift_bridgeObjectRelease();
                v39 = *(void (**)(char *, uint64_t))(v4 + 8);
                v39(v6, v3);
                v45 = v44 + qword_25585AE00;
                swift_beginAccess();
                sub_226438600(v45, (uint64_t)&v73);
                __swift_instantiateConcreteTypeFromMangledName(&qword_2558417E0);
                type metadata accessor for SimpleScanMaterial();
                if (swift_dynamicCast())
                {
                  swift_beginAccess();
                  v46 = (void (*)(_QWORD *, _QWORD))sub_22655CA10();
                  sub_22655C95C();
                  v46(v72, 0);
                  v4 = v63;
                  swift_endAccess();
                  swift_release();
                }
                type metadata accessor for WallEntity();
                sub_226437F28((unint64_t *)&qword_255844680, (uint64_t (*)(uint64_t))type metadata accessor for WallEntity, (uint64_t)&unk_226560610);
                v47 = (void (*)(_QWORD *, _QWORD))sub_22655C8CC();
                v49 = v48;
                v50 = sub_22655C41C();
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v49, 1, v50))
                {
                  v47(v72, 0);
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
                  *(_OWORD *)(swift_allocObject() + 16) = v58;
                  v61 = v47;
                  swift_beginAccess();
                  sub_226438600(v45, (uint64_t)&v73);
                  v62 = v44;
                  v52 = v74;
                  v51 = v75;
                  __swift_project_boxed_opaque_existential_1(&v73, v74);
                  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v51);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
                  v4 = v63;
                  sub_22655C410();
                  v61(v72, 0);
                }
                v6 = v65;
                v9 = v64;
                v38 = v70;
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
                v39 = *(void (**)(char *, uint64_t))(v4 + 8);
                v39(v6, v3);
                v38 = v70;
              }
              v39(v9, v3);
              v37 += v71;
              --v36;
              v18 = v69;
              if (!v36)
                goto LABEL_6;
              v38(v69, v37, v3);
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_6:
            v26(v18, 1, 1, v3);
          }
          swift_bridgeObjectRelease();
          v25 = v57;
          v17 = v56;
          v19 = v55;
          v22 = v54;
          v24 = v66;
          v23 = v67;
        }
      }
    }
    v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v29 >= v22)
      goto LABEL_40;
    v30 = *(_QWORD *)(v19 + 8 * v29);
    ++v24;
    if (!v30)
    {
      v24 = v29 + 1;
      if (v29 + 1 >= v22)
        goto LABEL_40;
      v30 = *(_QWORD *)(v19 + 8 * v24);
      if (!v30)
      {
        v24 = v29 + 2;
        if (v29 + 2 >= v22)
          goto LABEL_40;
        v30 = *(_QWORD *)(v19 + 8 * v24);
        if (!v30)
          break;
      }
    }
LABEL_24:
    v23 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v24 << 6);
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_25;
  }
  v31 = v29 + 3;
  if (v31 >= v22)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return;
  }
  v30 = *(_QWORD *)(v19 + 8 * v31);
  if (v30)
  {
    v24 = v31;
    goto LABEL_24;
  }
  while (1)
  {
    v24 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v24 >= v22)
      goto LABEL_40;
    v30 = *(_QWORD *)(v19 + 8 * v24);
    ++v31;
    if (v30)
      goto LABEL_24;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_226498450()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_blueColor);
    v3 = *(_QWORD *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    v1 = swift_allocObject();
    v4 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v1 + 16) = 10;
    *(_QWORD *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_226562540;
    *(_QWORD *)(v1 + 48) = v2;
    *(_QWORD *)(v1 + 56) = v3;
    *(_QWORD *)(v0 + 80) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_22649850C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  unint64_t v54;

  v3 = sub_22655C140();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844668);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v44 - v14;
  v51 = v1;
  v16 = sub_226498450();
  v17 = swift_bridgeObjectRetain();
  sub_22649B1F8(v17, v16);
  swift_bridgeObjectRelease();
  swift_release();
  v18 = *(_QWORD *)(a1 + 64);
  v48 = a1 + 64;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v22 = (unint64_t)(v19 + 63) >> 6;
  v45 = v22 - 1;
  result = swift_bridgeObjectRetain();
  v24 = 0;
  v52 = v22;
  v53 = v15;
  v46 = a1 + 104;
  v47 = v22 - 5;
  v49 = v12;
  v50 = v9;
  while (1)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v54 = v24;
      v27 = v26 | (v24 << 6);
      goto LABEL_9;
    }
    v30 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v30 >= v52)
    {
      v32 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v48 + 8 * v30);
      if (v31)
        goto LABEL_13;
      v32 = v24 + 1;
      if ((uint64_t)(v24 + 2) < v52)
      {
        v31 = *(_QWORD *)(v48 + 8 * (v24 + 2));
        if (v31)
        {
          v30 = v24 + 2;
          goto LABEL_13;
        }
        v32 = v24 + 2;
        if ((uint64_t)(v24 + 3) < v52)
        {
          v31 = *(_QWORD *)(v48 + 8 * (v24 + 3));
          if (v31)
          {
            v30 = v24 + 3;
LABEL_13:
            v21 = (v31 - 1) & v31;
            v27 = __clz(__rbit64(v31)) + (v30 << 6);
            v54 = v30;
LABEL_9:
            (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v27, v3);
            v28 = *(_QWORD *)(a1 + 56);
            v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844670);
            *(_QWORD *)&v12[*(int *)(v29 + 48)] = *(_QWORD *)(v28 + 8 * v27);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 0, 1, v29);
            swift_retain();
            v15 = v53;
            goto LABEL_16;
          }
          v30 = v24 + 4;
          v32 = v24 + 3;
          if ((uint64_t)(v24 + 4) < v52)
          {
            v31 = *(_QWORD *)(v48 + 8 * v30);
            if (v31)
              goto LABEL_13;
            while (v47 != v24)
            {
              v31 = *(_QWORD *)(v46 + 8 * v24++);
              if (v31)
              {
                v30 = v24 + 4;
                goto LABEL_13;
              }
            }
            v32 = v45;
          }
        }
      }
    }
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844670);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
    v21 = 0;
    v54 = v32;
LABEL_16:
    sub_226446554((uint64_t)v12, (uint64_t)v15, &qword_255844668);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844670);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v15, 1, v34) == 1)
      return swift_release();
    v35 = v15;
    v36 = *(_QWORD *)&v15[*(int *)(v34 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v35, v3);
    if (qword_25583F808 != -1)
      swift_once();
    v37 = qword_25585AC80;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    swift_beginAccess();
    v38 = *(_QWORD *)(v37 + 24);
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_5;
    swift_bridgeObjectRetain();
    v39 = sub_226534858((uint64_t)v6);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      v25 = *(void (**)(char *, uint64_t))(v4 + 8);
      v25(v6, v3);
      v25(v9, v3);
      result = swift_release();
      goto LABEL_6;
    }
    v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
    swift_retain();
    swift_bridgeObjectRelease();
    v42 = a1;
    v43 = *(void (**)(char *, uint64_t))(v4 + 8);
    v43(v6, v3);
    sub_226498994(v41, v36);
    swift_release();
    v9 = v50;
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v43)(v9, v3);
    a1 = v42;
    v12 = v49;
LABEL_6:
    v15 = v53;
    v24 = v54;
  }
  __break(1u);
  return result;
}

uint64_t sub_226498994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  sub_226498450();
  v3 = sub_226447384(a2);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_22655D400();
    v4 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
    goto LABEL_27;
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      MEMORY[0x2276999E4](i, v3);
    else
      swift_retain();
    sub_22655C89C();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_22644618C(v7);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (!v9)
    return swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(sub_226498450() + 16);
  result = swift_release();
  if (v10 < 1)
    return swift_bridgeObjectRelease();
  v11 = 0;
  v12 = v9 - 1;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      MEMORY[0x2276999E4](v11, v3);
    }
    else
    {
      if (v11 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_26;
      swift_retain();
    }
    v13 = swift_bridgeObjectRetain();
    v14 = sub_22644618C(v13);
    result = swift_bridgeObjectRelease();
    if (v11 >= *(_QWORD *)(v14 + 16))
      break;
    swift_bridgeObjectRelease();
    v15 = swift_bridgeObjectRetain();
    v16 = sub_22644618C(v15);
    swift_bridgeObjectRelease();
    v17 = swift_bridgeObjectRetain();
    v18 = sub_22644618C(v17);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v18 + 16);
    result = swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_24;
    if ((v11 + 1) % v19 >= *(_QWORD *)(v16 + 16))
      goto LABEL_25;
    swift_bridgeObjectRelease();
    sub_22655C1AC();
    sub_22655C248();
    swift_retain();
    sub_22655C89C();
    swift_release_n();
    if (v12 != v11)
    {
      v20 = *(_QWORD *)(sub_226498450() + 16);
      result = swift_release();
      if ((uint64_t)++v11 < v20)
        continue;
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_226498E2C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_redColor);
    v3 = *(_QWORD *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    v1 = swift_allocObject();
    v4 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v1 + 16) = 40;
    *(_QWORD *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_226562570;
    *(_QWORD *)(v1 + 48) = v2;
    *(_QWORD *)(v1 + 56) = v3;
    *(_QWORD *)(v0 + 88) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_226498EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t result;
  int64_t v19;
  __objc2_class_ro *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  __objc2_prot_list *base_prots;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v3);
  v69 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v70 = (uint64_t)&v57 - v6;
  v7 = sub_22655C140();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v1;
  v11 = sub_226498E2C();
  v12 = swift_bridgeObjectRetain();
  sub_22649B1F8(v12, v11);
  swift_bridgeObjectRelease();
  swift_release();
  v13 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v65 = 0;
  v20 = &ARInternalSessionObserverWrapper;
  v21 = (_QWORD *)&unk_25585A000;
  v62 = v7;
  v61 = v8;
  v60 = v10;
  v59 = a1;
  v58 = a1 + 64;
  v57 = v17;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v23 = (v16 - 1) & v16;
      v68 = v19;
      v24 = v22 | (v19 << 6);
    }
    else
    {
      v25 = __OFADD__(v19, 1);
      v26 = v19 + 1;
      if (v25)
        goto LABEL_55;
      if (v26 >= v17)
        return swift_release();
      v27 = *(_QWORD *)(v13 + 8 * v26);
      if (!v27)
      {
        v28 = v26 + 1;
        if (v26 + 1 >= v17)
          return swift_release();
        v27 = *(_QWORD *)(v13 + 8 * v28);
        if (!v27)
        {
          v28 = v26 + 2;
          if (v26 + 2 >= v17)
            return swift_release();
          v27 = *(_QWORD *)(v13 + 8 * v28);
          if (!v27)
          {
            v28 = v26 + 3;
            if (v26 + 3 >= v17)
              return swift_release();
            v27 = *(_QWORD *)(v13 + 8 * v28);
            if (!v27)
            {
              v28 = v26 + 4;
              if (v26 + 4 >= v17)
                return swift_release();
              v27 = *(_QWORD *)(v13 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v26 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_56;
                  if (v26 >= v17)
                    return swift_release();
                  v27 = *(_QWORD *)(v13 + 8 * v26);
                  ++v28;
                  if (v27)
                    goto LABEL_21;
                }
              }
            }
          }
        }
        v26 = v28;
      }
LABEL_21:
      v23 = (v27 - 1) & v27;
      v68 = v26;
      v24 = __clz(__rbit64(v27)) + (v26 << 6);
    }
    v67 = v23;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v24);
    base_prots = v20[28].base_prots;
    swift_retain();
    if (base_prots != (__objc2_prot_list *)-1)
      swift_once();
    v31 = v21[400];
    v66 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29 + qword_25585ADF8, v7);
    swift_beginAccess();
    v32 = *(_QWORD *)(v31 + 24);
    if (!*(_QWORD *)(v32 + 16))
      goto LABEL_5;
    swift_bridgeObjectRetain();
    v33 = sub_226534858((uint64_t)v10);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      result = swift_release();
      goto LABEL_6;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
    swift_retain();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (*(_BYTE *)(v35 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 2)
    {
      swift_beginAccess();
      swift_retain();
      v36 = swift_bridgeObjectRetain();
      v37 = v65;
      sub_226509E3C(v36, v35);
      v39 = v38;
      v65 = v37;
      swift_release();
      v40 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v40 = MEMORY[0x24BEE4AF8];
      v39 = MEMORY[0x24BEE4AF8];
    }
    v74 = v40;
    if (v39 >> 62)
    {
      swift_retain();
      v41 = sub_22655D400();
    }
    else
    {
      v41 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    v64 = v35;
    v73 = v35 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    result = swift_beginAccess();
    if (v41)
      break;
    v53 = MEMORY[0x24BEE4AF8];
LABEL_46:
    swift_bridgeObjectRelease();
    v54 = v64;
    swift_release();
    swift_retain();
    v55 = v65;
    v56 = sub_22649B7BC(v53, v54);
    v65 = v55;
    swift_release();
    swift_release();
    sub_226499528(v56, v66);
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
    v7 = v62;
    v8 = v61;
    v10 = v60;
    v20 = &ARInternalSessionObserverWrapper;
LABEL_6:
    v16 = v67;
    v19 = v68;
  }
  v42 = 0;
  v71 = v39 & 0xFFFFFFFFFFFFFF8;
  v72 = v39 & 0xC000000000000001;
  while (v72)
  {
    result = MEMORY[0x2276999E4](v42, v39);
    v43 = result;
    v44 = v42 + 1;
    if (__OFADD__(v42, 1))
      goto LABEL_54;
LABEL_38:
    v45 = v41;
    v46 = v39;
    v47 = v70;
    sub_22643D7A0(v73, v70, (uint64_t *)&unk_255848090);
    v48 = type metadata accessor for CapturedRoom.Surface.Curve(0);
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48);
    v50 = v49(v47, 1, v48);
    sub_22643D7E4(v47, (uint64_t *)&unk_255848090);
    if (v50 == 1
      || (v51 = v69,
          sub_22643D7A0(v43 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, v69, (uint64_t *)&unk_255848090),
          v52 = v49(v51, 1, v48),
          sub_22643D7E4(v51, (uint64_t *)&unk_255848090),
          v52 == 1))
    {
      result = swift_release();
    }
    else
    {
      sub_22655D364();
      sub_22655D388();
      sub_22655D394();
      result = sub_22655D370();
    }
    v39 = v46;
    v41 = v45;
    ++v42;
    if (v44 == v45)
    {
      v53 = v74;
      a1 = v59;
      v13 = v58;
      v17 = v57;
      v21 = &unk_25585A000;
      goto LABEL_46;
    }
  }
  if (v42 < *(_QWORD *)(v71 + 16))
  {
    v43 = *(_QWORD *)(v39 + 8 * v42 + 32);
    result = swift_retain();
    v44 = v42 + 1;
    if (__OFADD__(v42, 1))
      goto LABEL_54;
    goto LABEL_38;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_226499528(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  float v31;
  float v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float32x4_t v38;
  float v39;
  __float2 v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  __float2 v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  float v49;
  __float2 v50;
  float32x4_t v51;
  uint64_t v52;
  float32x4_t v53;
  float v54;
  __float2 v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  _QWORD v61[2];
  char *v62;
  float *v63;
  unint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  unint64_t v70;
  float32x4_t v71;
  __int128 v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;

  v70 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (float *)((char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_22655C140();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_226498E2C();
  v77 = sub_226447384(a2);
  swift_release();
  if (qword_25583F808 != -1)
    swift_once();
  v14 = qword_25585AC80;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2 + qword_25585ADF8, v10);
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 24);
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v16 = sub_226534858((uint64_t)v13);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_bridgeObjectRelease();
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  swift_retain();
  swift_bridgeObjectRelease();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20 = v18;
  v19(v13, v10);
  v21 = v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
  swift_beginAccess();
  sub_22643D7A0(v21, (uint64_t)v5, (uint64_t *)&unk_255848090);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return sub_22643D7E4((uint64_t)v5, (uint64_t *)&unk_255848090);
  }
  v23 = sub_226446598((uint64_t)v5, (uint64_t)v9);
  *(double *)v24.i64 = MEMORY[0x227699714](v23, *(__n128 *)(v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition), *(__n128 *)(v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation), (__n128)xmmword_22655FA70);
  v75 = v25;
  v76 = v24;
  v73 = v27;
  v74 = v26;
  v28 = v70;
  if (v70 >> 62)
    goto LABEL_48;
  v29 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v29)
  {
LABEL_11:
    v61[1] = v20;
    *(_QWORD *)&v30 = *(_QWORD *)v9;
    v31 = v9[2];
    v72 = v30;
    v32 = *((float *)&v30 + 1);
    v64 = v28 & 0xC000000000000001;
    v33 = v77 & 0xC000000000000001;
    v65 = v77 & 0xFFFFFFFFFFFFFF8;
    v20 = v77 + 56;
    v34 = 4;
    v35 = 3;
    v63 = v9;
    v62 = (char *)v29;
    do
    {
      v36 = v34 - 4;
      if (v64)
      {
        v37 = (float *)MEMORY[0x2276999E4](v34 - 4, v28);
        v9 = (float *)(v34 - 3);
        if (__OFADD__(v36, 1))
          goto LABEL_43;
      }
      else
      {
        v37 = *(float **)(v28 + 8 * v34);
        swift_retain();
        v9 = (float *)(v34 - 3);
        if (__OFADD__(v36, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_bridgeObjectRetain();
          v29 = sub_22655D400();
          if (!v29)
            break;
          goto LABEL_11;
        }
      }
      v39 = v37[4];
      v38.f32[0] = v37[6];
      v71 = v38;
      v40 = __sincosf_stret(v39);
      if (v33)
      {
        MEMORY[0x2276999E4](v35 - 3, v77);
      }
      else
      {
        if ((unint64_t)(v35 - 3) >= *(_QWORD *)(v65 + 16))
          goto LABEL_44;
        swift_retain();
      }
      v41 = vaddq_f32(v73, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v76, *(float *)&v72 + (float)(v31 * v40.__cosval)), v75, v71.f32[0]), v74, v32 + (float)(v31 * v40.__sinval)));
      v41.i32[3] = v69.i32[3];
      v71 = v41;
      sub_22655C1AC();
      sub_22655C290();
      swift_retain();
      sub_22655C89C();
      swift_release_n();
      v28 = v35 - 2;
      v42 = *(_QWORD *)(sub_226498E2C() + 16);
      swift_release();
      if (v35 - 2 >= v42)
        goto LABEL_40;
      v44 = v37[5];
      v43.f32[0] = v37[6];
      v69 = v43;
      v45 = __sincosf_stret(v44);
      if (v33)
      {
        MEMORY[0x2276999E4](v35 - 2, v77);
      }
      else
      {
        if (v28 >= *(_QWORD *)(v65 + 16))
          goto LABEL_45;
        swift_retain();
      }
      v46 = vaddq_f32(v73, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v76, *(float *)&v72 + (float)(v31 * v45.__cosval)), v75, v69.f32[0]), v74, v32 + (float)(v31 * v45.__sinval)));
      v46.i32[3] = v68.i32[3];
      v68 = v46;
      sub_22655C290();
      swift_retain();
      sub_22655C89C();
      swift_release_n();
      v28 = v35 - 1;
      v47 = *(_QWORD *)(sub_226498E2C() + 16);
      swift_release();
      if (v35 - 1 >= v47)
        goto LABEL_40;
      v49 = v37[4];
      v48.f32[0] = v37[7];
      v69 = v48;
      v50 = __sincosf_stret(v49);
      if (v33)
      {
        MEMORY[0x2276999E4](v35 - 1, v77);
      }
      else
      {
        if (v28 >= *(_QWORD *)(v65 + 16))
          goto LABEL_46;
        swift_retain();
      }
      v51 = vaddq_f32(v73, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v76, *(float *)&v72 + (float)(v31 * v50.__cosval)), v75, v69.f32[0]), v74, v32 + (float)(v31 * v50.__sinval)));
      v51.i32[3] = v67.i32[3];
      v69 = v51;
      sub_22655C290();
      swift_retain();
      sub_22655C89C();
      swift_release_n();
      v52 = *(_QWORD *)(sub_226498E2C() + 16);
      swift_release();
      if (v35 >= v52)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        swift_release();
LABEL_42:
        swift_release();
        swift_bridgeObjectRelease();
        v60 = (uint64_t)v63;
        return sub_2264472E0(v60);
      }
      v54 = v37[5];
      v53.f32[0] = v37[7];
      v67 = v53;
      v55 = __sincosf_stret(v54);
      if (v33)
      {
        MEMORY[0x2276999E4](v35, v77);
      }
      else
      {
        if ((unint64_t)v35 >= *(_QWORD *)(v65 + 16))
          goto LABEL_47;
        swift_retain();
      }
      v56 = vaddq_f32(v73, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v76, *(float *)&v72 + (float)(v31 * v55.__cosval)), v75, v67.f32[0]), v74, v32 + (float)(v31 * v55.__sinval)));
      v56.i32[3] = v66.i32[3];
      v66 = v56;
      sub_22655C290();
      swift_retain();
      sub_22655C89C();
      swift_release_n();
      v57 = sub_226498E2C();
      swift_release();
      v58 = *(_QWORD *)(v57 + 16);
      swift_release();
      if (v35 + 1 >= v58)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      ++v34;
      v35 += 4;
      v20 += 32;
      v67 = v69;
      v69 = v71;
      v59 = v9 == (float *)v62;
      v9 = v63;
      v28 = v70;
    }
    while (!v59);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = (uint64_t)v9;
  return sub_2264472E0(v60);
}

uint64_t sub_226499D58()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
    v3 = *(_QWORD *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    v1 = swift_allocObject();
    v4 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v1 + 16) = 20;
    *(_QWORD *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_226562580;
    *(_QWORD *)(v1 + 48) = v2;
    *(_QWORD *)(v1 + 56) = v3;
    *(_QWORD *)(v0 + 96) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_226499E14(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;

  v3 = sub_22655C140();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v61 = (char *)&v49 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844640);
  MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v58 = (uint64_t)&v49 - v12;
  v13 = sub_226499D58();
  v14 = swift_bridgeObjectRetain();
  sub_22649B1F8(v14, v13);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_25583F808 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    swift_beginAccess();
    v15 = swift_bridgeObjectRetain();
    v16 = sub_22649A9C8(v15);
    swift_bridgeObjectRelease();
    v53 = v1;
    v17 = sub_226499D58();
    sub_22649B1F8(v16, v17);
    swift_release();
    swift_release();
    v18 = *(_QWORD *)(a1 + 64);
    v54 = a1 + 64;
    v19 = 1 << *(_BYTE *)(a1 + 32);
    v20 = -1;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    v21 = v20 & v18;
    v22 = (unint64_t)(v19 + 63) >> 6;
    v50 = v22 - 1;
    swift_bridgeObjectRetain();
    v23 = 0;
    v56 = a1;
    v57 = v22;
    v51 = a1 + 104;
    v52 = v22 - 5;
    v55 = v6;
    if (v21)
      break;
LABEL_10:
    v31 = v23 + 1;
    if (!__OFADD__(v23, 1))
    {
      v27 = (uint64_t)v59;
      if (v31 >= v57)
      {
        v60 = v23;
        v28 = a1;
      }
      else
      {
        v32 = *(_QWORD *)(v54 + 8 * v31);
        if (v32)
        {
LABEL_13:
          v21 = (v32 - 1) & v32;
          v26 = __clz(__rbit64(v32)) + (v31 << 6);
          v60 = v31;
          goto LABEL_9;
        }
        if ((uint64_t)(v23 + 2) >= v57)
        {
          v28 = a1;
          v60 = v23 + 1;
        }
        else
        {
          v32 = *(_QWORD *)(v54 + 8 * (v23 + 2));
          if (v32)
          {
            v31 = v23 + 2;
            goto LABEL_13;
          }
          if ((uint64_t)(v23 + 3) >= v57)
          {
            v28 = a1;
            v60 = v23 + 2;
          }
          else
          {
            v32 = *(_QWORD *)(v54 + 8 * (v23 + 3));
            if (v32)
            {
              v31 = v23 + 3;
              goto LABEL_13;
            }
            v31 = v23 + 4;
            if ((uint64_t)(v23 + 4) >= v57)
            {
              v28 = a1;
              v60 = v23 + 3;
            }
            else
            {
              v32 = *(_QWORD *)(v54 + 8 * v31);
              if (v32)
                goto LABEL_13;
              while (v52 != v23)
              {
                v32 = *(_QWORD *)(v51 + 8 * v23++);
                if (v32)
                {
                  v31 = v23 + 4;
                  goto LABEL_13;
                }
              }
              v28 = a1;
              v60 = v50;
            }
          }
        }
      }
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844648);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v27, 1, 1, v33);
      v21 = 0;
      goto LABEL_16;
    }
    __break(1u);
  }
  while (1)
  {
    v25 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v60 = v23;
    v26 = v25 | (v23 << 6);
    v27 = (uint64_t)v59;
LABEL_9:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v27, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v26, v3);
    v28 = a1;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844648);
    *(_QWORD *)(v27 + *(int *)(v30 + 48)) = *(_QWORD *)(v29 + 8 * v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v27, 0, 1, v30);
    swift_retain();
LABEL_16:
    v34 = v58;
    sub_226446554(v27, v58, &qword_255844640);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844648);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35) == 1)
      return swift_release();
    v36 = v34;
    v37 = *(_QWORD *)(v34 + *(int *)(v35 + 48));
    v38 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v61, v36, v3);
    v39 = qword_25585AC80;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v38, v3);
    swift_beginAccess();
    v1 = *(_QWORD *)(v39 + 24);
    a1 = v28;
    if (!*(_QWORD *)(v1 + 16))
      goto LABEL_7;
    swift_bridgeObjectRetain();
    v40 = sub_226534858((uint64_t)v6);
    if ((v41 & 1) != 0)
    {
      v42 = v6;
      v43 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v40);
      swift_retain();
      swift_bridgeObjectRelease();
      v44 = *(void (**)(char *, uint64_t))(v4 + 8);
      v44(v42, v3);
      if (*(_BYTE *)(v43 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
      {
        swift_beginAccess();
        swift_retain();
        v45 = swift_bridgeObjectRetain();
        sub_22649BAD0(v45, v43);
        v1 = v46;
        swift_release();
      }
      else
      {
        v1 = MEMORY[0x24BEE4AF8];
      }
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        v47 = sub_22655D400();
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v47 < 1)
      {
        v44(v61, v3);
        swift_release();
        swift_release();
      }
      else
      {
        v1 = v53;
        sub_22649A414(v43, v37);
        swift_release();
        swift_release();
        v44(v61, v3);
      }
      v6 = v55;
      a1 = v56;
      v23 = v60;
      if (!v21)
        goto LABEL_10;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_7:
      v24 = *(void (**)(char *, uint64_t))(v4 + 8);
      v24(v6, v3);
      v24(v61, v3);
      swift_release();
      v23 = v60;
      if (!v21)
        goto LABEL_10;
    }
  }
}

uint64_t sub_22649A414(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;

  sub_226499D58();
  v3 = sub_226447384(a2);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_22655D400();
    v4 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
    goto LABEL_23;
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      MEMORY[0x2276999E4](i, v3);
    else
      swift_retain();
    sub_22655C89C();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  v7 = sub_22650DEA4();
  v8 = *((_QWORD *)v7 + 2);
  if (!v8 || (v9 = *(_QWORD *)(sub_226499D58() + 16), result = swift_release(), v9 < 1))
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v10 = 0;
  v11 = v7 + 3;
  while (v10 < *((_QWORD *)v7 + 2))
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      MEMORY[0x2276999E4](v10, v3);
    }
    else
    {
      if (v10 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_22;
      swift_retain();
    }
    sub_22655C1AC();
    sub_22655C248();
    swift_retain();
    sub_22655C89C();
    swift_release_n();
    if (v8 - 1 != v10)
    {
      v12 = *(_QWORD *)(sub_226499D58() + 16);
      result = swift_release();
      v11 += 2;
      if ((uint64_t)++v10 < v12)
        continue;
    }
    goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_22649A7F4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_22649A858()
{
  sub_22649A7F4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebugDollHouseManager()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DollHouseDebugOptions()
{
  return &type metadata for DollHouseDebugOptions;
}

unint64_t sub_22649A8AC()
{
  unint64_t result;

  result = qword_255844620;
  if (!qword_255844620)
  {
    result = MEMORY[0x22769A794](&unk_226562668, &type metadata for DollHouseDebugOptions);
    atomic_store(result, (unint64_t *)&qword_255844620);
  }
  return result;
}

unint64_t sub_22649A8F4()
{
  unint64_t result;

  result = qword_255844628;
  if (!qword_255844628)
  {
    result = MEMORY[0x22769A794](&unk_226562638, &type metadata for DollHouseDebugOptions);
    atomic_store(result, (unint64_t *)&qword_255844628);
  }
  return result;
}

unint64_t sub_22649A93C()
{
  unint64_t result;

  result = qword_255844630;
  if (!qword_255844630)
  {
    result = MEMORY[0x22769A794](&unk_226562690, &type metadata for DollHouseDebugOptions);
    atomic_store(result, (unint64_t *)&qword_255844630);
  }
  return result;
}

unint64_t sub_22649A984()
{
  unint64_t result;

  result = qword_255844638;
  if (!qword_255844638)
  {
    result = MEMORY[0x22769A794](&unk_2265626C8, &type metadata for DollHouseDebugOptions);
    atomic_store(result, (unint64_t *)&qword_255844638);
  }
  return result;
}

uint64_t sub_22649A9C8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_22649AB18((_QWORD *)((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    sub_22649AB18((unint64_t *)v7, v4, v2);
    v2 = v8;
    MEMORY[0x22769A884](v7, -1, -1);
  }
  return v2;
}

void sub_22649AB18(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  void (*v22)(char *, unint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v31 = a2;
  v32 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844660);
  MEMORY[0x24BDAC7A8](v37);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22655C140();
  v7 = *(_QWORD *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v39 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v33 = 0;
  v34 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v35 = (unint64_t)(v13 + 63) >> 6;
  v36 = v5;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_17;
    }
    v18 = __OFADD__(v11++, 1);
    if (v18)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v35)
      goto LABEL_32;
    v19 = *(_QWORD *)(v34 + 8 * v11);
    if (!v19)
      break;
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_17:
    v21 = v39;
    v22 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
    v22(v10, v39[6] + *(_QWORD *)(v7 + 72) * v17, v6, v8);
    v23 = *(_QWORD *)(v21[7] + 8 * v17);
    ((void (*)(char *, char *, uint64_t))v22)(v5, v10, v6);
    *(_QWORD *)&v5[*(int *)(v37 + 48)] = v23;
    if (*(_BYTE *)(v23 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
    {
      v24 = qword_25583F808;
      swift_retain_n();
      if (v24 != -1)
        swift_once();
      swift_beginAccess();
      swift_retain();
      v25 = swift_bridgeObjectRetain();
      v26 = v38;
      sub_22649BAD0(v25, v23);
      v28 = v27;
      v38 = v26;
      swift_release();
      if (v28 >> 62)
      {
LABEL_21:
        swift_bridgeObjectRetain();
        v29 = sub_22655D400();
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    else
    {
      swift_retain_n();
      v28 = MEMORY[0x24BEE4AF8];
      if (MEMORY[0x24BEE4AF8] >> 62)
        goto LABEL_21;
    }
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_24:
    swift_bridgeObjectRelease();
    v5 = v36;
    sub_22643D7E4((uint64_t)v36, &qword_255844660);
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v29 >= 1)
    {
      *(unint64_t *)((char *)v32 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v33++, 1);
      if (v18)
        goto LABEL_35;
    }
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v35)
    goto LABEL_32;
  v19 = *(_QWORD *)(v34 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v35)
    goto LABEL_32;
  v19 = *(_QWORD *)(v34 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v35)
  {
LABEL_32:
    sub_22649AEAC(v32, v31, v33, v39);
    return;
  }
  v19 = *(_QWORD *)(v34 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v35)
      goto LABEL_32;
    v19 = *(_QWORD *)(v34 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_22649AEAC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v45 = sub_22655C140();
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)&v36 - v10;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25584A960);
  result = sub_22655D430();
  v12 = result;
  v37 = a1;
  v38 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v16 = v45;
  while (1)
  {
    if (v13)
    {
      v42 = (v13 - 1) & v13;
      v43 = v14;
      v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v38)
        return v12;
      v19 = v37[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v38)
          return v12;
        v19 = v37[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v38)
            return v12;
          v19 = v37[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v38)
              return v12;
            v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v38)
                  return v12;
                v19 = v37[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v42 = (v19 - 1) & v19;
      v43 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = v40;
    v23 = v41;
    v24 = *(_QWORD *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v40, a4[6] + v24 * v17, v16);
    v25 = *(_QWORD *)(a4[7] + 8 * v17);
    v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v44, v22, v16);
    sub_226437F28(&qword_2558436F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    swift_retain();
    result = sub_22655CCD4();
    v27 = -1 << *(_BYTE *)(v12 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v12 + 48) + v30 * v24, v44, v45);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v30) = v25;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v13 = v42;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22649B1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = sub_22655C140();
  v65 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v63 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844650);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v52 - v10;
  v12 = (uint64_t *)(a2 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(v13 + 64);
  v56 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  v53 = v18 - 1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v58 = v18;
  v21 = v18 - 7;
  v22 = a1;
  v61 = v13;
  v54 = v13 + 120;
  v55 = v21;
  v59 = v11;
  v60 = a1;
  v64 = v4;
  v57 = v8;
  if (!v17)
    goto LABEL_9;
LABEL_7:
  v24 = v22;
  v25 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v26 = v25 | (v20 << 6);
LABEL_8:
  v27 = v61;
  (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v8, *(_QWORD *)(v61 + 48) + *(_QWORD *)(v65 + 72) * v26, v64);
  v28 = *(_QWORD *)(v27 + 56);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844658);
  *(_QWORD *)&v8[*(int *)(v29 + 48)] = *(_QWORD *)(v28 + 8 * v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 0, 1, v29);
  swift_bridgeObjectRetain();
  v22 = v24;
  while (1)
  {
    sub_226446554((uint64_t)v8, (uint64_t)v11, &qword_255844650);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844658);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v11, 1, v34) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v62 = v20;
    v35 = v12;
    v36 = *(_QWORD *)&v11[*(int *)(v34 + 48)];
    v37 = v64;
    v38 = v63;
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v63, v11, v64);
    if (*(_QWORD *)(v22 + 16))
    {
      result = sub_226534858(v38);
      if ((v39 & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v38, v37);
        result = swift_bridgeObjectRelease();
        v12 = v35;
        v20 = v62;
        if (v17)
          goto LABEL_7;
        goto LABEL_9;
      }
    }
    if (v36 >> 62)
      break;
    v40 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v40)
      goto LABEL_22;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v44 = sub_226534858(v63);
    v46 = v45;
    swift_bridgeObjectRelease();
    v47 = v60;
    v48 = v64;
    if ((v46 & 1) != 0)
    {
      v49 = v65;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = *v35;
      v66 = *v35;
      *v35 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2265484AC();
        v51 = v66;
      }
      (*(void (**)(unint64_t, uint64_t))(v49 + 8))(*(_QWORD *)(v51 + 48) + *(_QWORD *)(v49 + 72) * v44, v48);
      v23 = v66;
      sub_2265462F0(v44, v66);
      *v35 = v23;
      swift_bridgeObjectRelease();
      v8 = v57;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v63, v48);
    v12 = v35;
    v11 = v59;
    v22 = v47;
    v20 = v62;
    if (v17)
      goto LABEL_7;
LABEL_9:
    v30 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_50;
    if (v30 >= v58)
    {
      v32 = v20;
    }
    else
    {
      v31 = *(_QWORD *)(v56 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v42 = v20 + 2;
      v32 = v20 + 1;
      if ((uint64_t)(v20 + 2) < v58)
      {
        v31 = *(_QWORD *)(v56 + 8 * v42);
        if (v31)
          goto LABEL_30;
        v43 = v20 + 3;
        v32 = v20 + 2;
        if ((uint64_t)(v20 + 3) < v58)
        {
          v31 = *(_QWORD *)(v56 + 8 * v43);
          if (v31)
            goto LABEL_33;
          v42 = v20 + 4;
          v32 = v20 + 3;
          if ((uint64_t)(v20 + 4) < v58)
          {
            v31 = *(_QWORD *)(v56 + 8 * v42);
            if (v31)
            {
LABEL_30:
              v30 = v42;
LABEL_12:
              v24 = v22;
              v17 = (v31 - 1) & v31;
              v26 = __clz(__rbit64(v31)) + (v30 << 6);
              v20 = v30;
              goto LABEL_8;
            }
            v43 = v20 + 5;
            v32 = v20 + 4;
            if ((uint64_t)(v20 + 5) < v58)
            {
              v31 = *(_QWORD *)(v56 + 8 * v43);
              if (v31)
              {
LABEL_33:
                v30 = v43;
                goto LABEL_12;
              }
              v30 = v20 + 6;
              v32 = v20 + 5;
              if ((uint64_t)(v20 + 6) < v58)
              {
                v31 = *(_QWORD *)(v56 + 8 * v30);
                if (v31)
                  goto LABEL_12;
                while (v55 != v20)
                {
                  v31 = *(_QWORD *)(v54 + 8 * v20++);
                  if (v31)
                  {
                    v30 = v20 + 6;
                    goto LABEL_12;
                  }
                }
                v32 = v53;
              }
            }
          }
        }
      }
    }
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844658);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v8, 1, 1, v33);
    v17 = 0;
    v20 = v32;
  }
  swift_bridgeObjectRetain();
  v40 = sub_22655D400();
  result = swift_bridgeObjectRelease();
  if (!v40)
    goto LABEL_44;
LABEL_22:
  if (v40 >= 1)
  {
    v41 = 0;
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        MEMORY[0x2276999E4](v41, v36);
      else
        swift_retain();
      ++v41;
      sub_22655C1AC();
      sub_22655C224();
      swift_release();
    }
    while (v40 != v41);
    goto LABEL_44;
  }
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_22649B7BC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __n128 v42;
  uint64_t v43;
  simd_float4x4 v44;
  simd_float4x4 v45;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255848090);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v29 - v10;
  if (a1 >> 62)
    goto LABEL_14;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v12)
      break;
    v43 = MEMORY[0x24BEE4AF8];
    result = sub_22655D37C();
    if (v12 < 0)
    {
      __break(1u);
      return result;
    }
    v29[1] = v3;
    v33 = a1 & 0xC000000000000001;
    v32 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
    v31 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation;
    v30 = a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    swift_beginAccess();
    v14 = 0;
    v42 = (__n128)xmmword_22655FA70;
    v3 = a1;
    while (v12 != v14)
    {
      if (v33)
      {
        v15 = MEMORY[0x2276999E4](v14, a1);
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 8 * v14 + 32);
        swift_retain();
      }
      ++v14;
      *(double *)v16.i64 = MEMORY[0x227699714](*(__n128 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition), *(__n128 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation), v42);
      v40 = v17;
      v41 = v16;
      v38 = v19;
      v39 = v18;
      v20 = v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
      swift_beginAccess();
      v21 = sub_22643D7A0(v20, (uint64_t)v11, (uint64_t *)&unk_255848090);
      v22 = *(float *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions + 4);
      *(double *)v44.columns[0].i64 = MEMORY[0x227699714](v21, *(__n128 *)(a2 + v32), *(__n128 *)(a2 + v31), v42);
      v45 = __invert_f4(v44);
      v36 = (float32x4_t)v45.columns[1];
      v37 = (float32x4_t)v45.columns[0];
      v35 = (float32x4_t)v45.columns[2];
      v34 = (float32x4_t)v45.columns[3];
      sub_22643D7A0(v30, (uint64_t)v8, (uint64_t *)&unk_255848090);
      sub_226446C58((uint64_t)v11, (uint64_t)v8, v41, v40, v39, v38, v22, v37, v36, v35, v23, v24, v25, v26, v27, v28, v34);
      swift_release();
      sub_22655D364();
      sub_22655D388();
      sub_22655D394();
      sub_22655D370();
      a1 = v3;
      if (v12 == v14)
        return v43;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v12 = sub_22655D400();
    swift_bridgeObjectRelease();
  }
  return result;
}

void sub_22649BAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;

  v4 = sub_22655C140();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2558432E8);
  MEMORY[0x24BDAC7A8](v42);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255849AC0);
  MEMORY[0x24BDAC7A8](v9);
  v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - v13;
  v15 = 0;
  v46 = MEMORY[0x24BEE4AF8];
  v43 = a1;
  v16 = *(_QWORD *)(a1 + 64);
  v39 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v41 = a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  v40 = (unint64_t)(v17 + 63) >> 6;
  v44 = v14;
  v36 = v8;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v45 = v15;
      v21 = v20 | (v15 << 6);
      goto LABEL_26;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v40)
      goto LABEL_32;
    v23 = *(_QWORD *)(v39 + 8 * v22);
    v24 = v15 + 1;
    if (!v23)
    {
      v24 = v15 + 2;
      if (v15 + 2 >= v40)
        goto LABEL_32;
      v23 = *(_QWORD *)(v39 + 8 * v24);
      if (!v23)
      {
        v24 = v15 + 3;
        if (v15 + 3 >= v40)
          goto LABEL_32;
        v23 = *(_QWORD *)(v39 + 8 * v24);
        if (!v23)
        {
          v24 = v15 + 4;
          if (v15 + 4 >= v40)
            goto LABEL_32;
          v23 = *(_QWORD *)(v39 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_25:
    v19 = (v23 - 1) & v23;
    v45 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_26:
    v26 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v21) + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v14, v41, v4, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    v27 = (uint64_t)&v8[*(int *)(v42 + 48)];
    sub_22643D7A0(v26, (uint64_t)v8, (uint64_t *)&unk_255849AC0);
    sub_22643D7A0((uint64_t)v14, v27, (uint64_t *)&unk_255849AC0);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v28((uint64_t)v8, 1, v4) == 1)
    {
      swift_retain();
      sub_22643D7E4((uint64_t)v14, (uint64_t *)&unk_255849AC0);
      if (v28(v27, 1, v4) != 1)
        goto LABEL_5;
      sub_22643D7E4((uint64_t)v8, (uint64_t *)&unk_255849AC0);
    }
    else
    {
      v29 = (uint64_t)v8;
      v30 = v8;
      v31 = v38;
      sub_22643D7A0(v29, v38, (uint64_t *)&unk_255849AC0);
      if (v28(v27, 1, v4) == 1)
      {
        swift_retain();
        sub_22643D7E4((uint64_t)v44, (uint64_t *)&unk_255849AC0);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
        v8 = v30;
LABEL_5:
        sub_22643D7E4((uint64_t)v8, &qword_2558432E8);
LABEL_6:
        swift_release();
        goto LABEL_7;
      }
      v32 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v37, v27, v4);
      sub_226437F28((unint64_t *)&qword_255840120, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      swift_retain();
      v33 = sub_22655CD04();
      v34 = *(void (**)(char *, uint64_t))(v5 + 8);
      v34(v32, v4);
      sub_22643D7E4((uint64_t)v44, (uint64_t *)&unk_255849AC0);
      v34((char *)v31, v4);
      v8 = v36;
      sub_22643D7E4((uint64_t)v36, (uint64_t *)&unk_255849AC0);
      if ((v33 & 1) == 0)
        goto LABEL_6;
    }
    sub_22655D364();
    sub_22655D388();
    sub_22655D394();
    sub_22655D370();
LABEL_7:
    v14 = v44;
    v15 = v45;
  }
  v25 = v15 + 5;
  if (v15 + 5 >= v40)
  {
LABEL_32:
    swift_release();
    return;
  }
  v23 = *(_QWORD *)(v39 + 8 * v25);
  if (v23)
  {
    v24 = v15 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v40)
      goto LABEL_32;
    v23 = *(_QWORD *)(v39 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_25;
  }
LABEL_34:
  __break(1u);
}

uint64_t type metadata accessor for ARViewCameraEntity()
{
  uint64_t result;

  result = qword_2558446A0;
  if (!qword_2558446A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22649BFAC()
{
  return swift_initClassMetadata2();
}

CGFloat sub_22649BFE8(void *a1, float32x4_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  double v12;
  CGFloat v13;
  float32x4_t v15;
  simd_float4x4 v16;
  simd_float4x4 v17;
  CGRect v18;
  CGRect v19;

  v15 = a2;
  v3 = sub_22655C1C4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22655C80C();
  v17 = __invert_f4(v16);
  v15 = vaddq_f32((float32x4_t)v17.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v17.columns[0], v15.f32[0]), (float32x4_t)v17.columns[1], *(float32x2_t *)v15.f32, 1), (float32x4_t)v17.columns[2], v15, 2));
  sub_22655C7E8();
  sub_22655C170();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  RECustomMatrixCameraComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECustomMatrixCameraComponentGetProjectionMatrix();
  v11 = vaddq_f32(v10, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v15.f32[0]), v8, *(float32x2_t *)v15.f32, 1), v9, v15, 2));
  v12 = (float)((float)(v11.f32[0] / v11.f32[3]) + 1.0) * 0.5;
  objc_msgSend(a1, sel_bounds);
  v13 = CGRectGetWidth(v18) * v12;
  objc_msgSend(a1, sel_bounds);
  CGRectGetHeight(v19);
  return v13;
}

uint64_t sub_22649C158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = sub_22655C1C4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22655C7E8();
  sub_22655C170();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  RECameraViewDescriptorsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECameraViewDescriptorsComponentClearCameraViewDescriptors();
  RECameraViewDescriptorsComponentAddViewDescriptor();
  v4 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
  RERenderGraphDataStructAddFloat4();
  MEMORY[0x22769A140](v4, "disableTonemapping", 1);
  RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
  if ((unint64_t)sub_22655C77C() >> 32)
  {
    result = sub_22655D3DC();
    __break(1u);
  }
  else
  {
    RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer();
    return RERelease();
  }
  return result;
}

uint64_t sub_22649C2E4()
{
  swift_allocObject();
  return sub_22655C1DC();
}

uint64_t sub_22649C314()
{
  sub_22655C8C0();
  return swift_deallocClassInstance();
}

uint64_t sub_22649C330()
{
  return type metadata accessor for ARViewCameraEntity();
}

uint64_t storeEnumTagSinglePayload for ARViewCameraProjectionMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22649C384 + 4 * byte_2265627D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22649C3B8 + 4 * byte_2265627D0[v4]))();
}

uint64_t sub_22649C3B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22649C3C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22649C3C8);
  return result;
}

uint64_t sub_22649C3D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22649C3DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22649C3E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22649C3E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ARViewCameraProjectionMode()
{
  return &type metadata for ARViewCameraProjectionMode;
}

unint64_t sub_22649C408()
{
  unint64_t result;

  result = qword_2558446F0;
  if (!qword_2558446F0)
  {
    result = MEMORY[0x22769A794](&unk_22656287C, &type metadata for ARViewCameraProjectionMode);
    atomic_store(result, (unint64_t *)&qword_2558446F0);
  }
  return result;
}

uint64_t sub_22649C44C(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  if ((a1 & 0x66) == 0x64)
    v1 = a1 | 2;
  else
    v1 = a1;
  if (!(~a1 & 0x62 | v1 & 4))
    v1 |= 4u;
  if (!(~a1 & 0x46 | v1 & 0x20))
    v1 |= 0x20u;
  if (!(~a1 & 0x26 | v1 & 0x40))
    v1 |= 0x40u;
  v2 = v1 | ((~a1 & 0x98 | v1 & 1) == 0);
  if (!(~a1 & 0x91 | v1 & 8))
    v2 |= 8u;
  if (!(~a1 & 0x89 | v2 & 0x10))
    v2 |= 0x10u;
  if (~a1 & 0x19 | v2 & 0x80)
    v3 = v2;
  else
    v3 = v2 | 0x80;
  v4 = a1 & 0xC0;
  if (~a1 & 0xC8 | v3 & 4)
    v5 = v3;
  else
    v5 = v3 | 4;
  v6 = a1 & 0x30;
  if (!(~a1 & 0x31 | v5 & 2))
    v5 |= 2u;
  if (!(~a1 & 0xC4 | v5 & 8))
    v5 |= 8u;
  if (~a1 & 0x8C | v5 & 0x40)
    v7 = v5 | ((~a1 & 0x32 | v5 & 1) == 0);
  else
    v7 = v5 | ((~a1 & 0x32 | v5 & 1) == 0) | 0x40;
  if (!(~a1 & 0x13 | v7 & 0x20))
    v7 |= 0x20u;
  if (!(~a1 & 0x4C | v7 & 0x80))
    v7 |= 0x80u;
  if (!(~a1 & 0x23 | v7 & 0x10))
    v7 |= 0x10u;
  if ((~a1 & 0x90) == 0)
  {
    v8 = (v7 >> 5) & 1;
    if (v4 != 192)
      v8 = 1;
    if (v8)
      v9 = v7;
    else
      v9 = v7 | 0x20;
    v10 = (v9 >> 6) & 1;
    if (v6 != 48)
      v10 = 1;
    if (v10)
      v7 = v9;
    else
      v7 = v9 | 0x40;
  }
  if ((a1 & 0x60) == 0x60)
  {
    v11 = (v7 >> 4) & 1;
    if (v4 != 192)
      v11 = 1;
    if (v11)
      v12 = v7;
    else
      v12 = v7 | 0x10;
    v13 = (v12 >> 7) & 1;
    if (v6 != 48)
      v13 = 1;
    if (v13)
      v7 = v12;
    else
      v7 = v12 | 0x80;
  }
  v14 = a1 & 0xC;
  v15 = a1 & 3;
  if ((a1 & 9) == 9)
  {
    v16 = (v7 >> 1) & 1;
    if (v14 != 12)
      v16 = 1;
    if (v16)
      v17 = v7;
    else
      v17 = v7 | 2;
    v18 = (v17 >> 2) & 1;
    if (v15 != 3)
      v18 = 1;
    v7 = v17 | 4;
    if (v18)
      v7 = v17;
  }
  v19 = (v7 & 1) == 0 && v14 == 12;
  v20 = v19;
  v21 = v7 | v20;
  v19 = v15 == 3;
  v22 = (v7 >> 3) & 1;
  if (!v19)
    v22 = 1;
  if (v22)
    v23 = v21;
  else
    v23 = v21 | 8;
  if ((a1 & 6) == 6)
    return v23;
  else
    return v7;
}

uint64_t sub_22649C6FC(int a1)
{
  uint64_t result;
  BOOL v3;
  BOOL v4;

  if (qword_25583F940 != -1)
    swift_once();
  if ((dword_25585AF20 & ~a1) == 0)
    return 15;
  v3 = (~a1 & 0x22) == 0;
  if ((~a1 & 0x11) == 0)
    v3 = 1;
  if ((~a1 & 0x44) != 0 && (a1 & 0x88) != 0x88)
  {
    if (v3)
    {
      result = 2;
LABEL_13:
      if ((~a1 & 0x60) != 0 && (a1 & 0x90) != 0x90)
        goto LABEL_25;
      goto LABEL_24;
    }
    LODWORD(result) = 0;
    if ((~a1 & 0x60) != 0 && (a1 & 0x90) != 0x90)
    {
      result = 0;
      goto LABEL_21;
    }
LABEL_24:
    result = result | 8;
LABEL_25:
    v4 = (~a1 & 9) == 0 || (~a1 & 6) == 0;
    if (v4 && (result & 4) == 0)
      return result | 4;
    return result;
  }
  if (v3)
  {
    result = 3;
    goto LABEL_13;
  }
  result = 1;
  if ((~a1 & 0x60) == 0 || (a1 & 0x90) == 0x90)
    goto LABEL_24;
LABEL_21:
  if ((~a1 & 6) == 0 || (a1 & 9) == 9)
    return result | 4;
  return result;
}

uint64_t type metadata accessor for RoomPlanCommon()
{
  return objc_opt_self();
}

uint64_t sub_22649C86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v8;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v5 = sub_2265347C8(a1);
      if ((v6 & 1) != 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  v3 = sub_22655D3C4();
  swift_release();
  if (!v3)
    return 0;
  type metadata accessor for ScanEntityDebugUtility();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

void *sub_22649C944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  char v6;
  id v7;
  void *v9;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v5 = sub_226534E48(a1);
      if ((v6 & 1) != 0)
      {
        v4 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v5);
        v7 = v4;
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  v3 = sub_22655D3C4();
  swift_release();
  if (!v3)
    return 0;
  type metadata accessor for CVPixelBufferPool(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v4 = v9;
  swift_unknownObjectRelease();
  return v4;
}

_QWORD *sub_22649CA18(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;

  v5 = 10;
  *(_QWORD *)(v2 + 40) = 10;
  v12 = MEMORY[0x24BEE4AF8];
  sub_22655C398();
  v6 = MEMORY[0x24BDE62F8];
  do
  {
    sub_22655C35C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_22655F8F0;
    *(_QWORD *)(v7 + 56) = sub_22655C3D4();
    *(_QWORD *)(v7 + 64) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 32));
    v8 = a2;
    sub_22655C3C8();
    sub_22655C1AC();
    swift_allocObject();
    sub_22655C1A0();
    sub_22655C8B4();
    sub_22655C230();
    swift_retain();
    sub_22655C89C();
    swift_release();
    v9 = swift_retain();
    MEMORY[0x227699594](v9);
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    swift_release();
    --v5;
  }
  while (v5);
  result = v11;
  v11[2] = v12;
  v11[3] = a1;
  v11[4] = v8;
  return result;
}

uint64_t sub_22649CBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t *)(v1 + 16);
  result = swift_beginAccess();
  v5 = MEMORY[0x24BDE62F8];
  while (!((unint64_t)*v3 >> 62))
  {
    if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
      goto LABEL_8;
LABEL_4:
    v6 = *(void **)(v1 + 32);
    sub_22655C398();
    sub_22655C35C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_22655F8F0;
    *(_QWORD *)(v7 + 56) = sub_22655C3D4();
    *(_QWORD *)(v7 + 64) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 32));
    v8 = v6;
    sub_22655C3C8();
    sub_22655C1AC();
    swift_allocObject();
    sub_22655C1A0();
    sub_22655C8B4();
    sub_22655C230();
    swift_retain();
    sub_22655C89C();
    swift_release();
    swift_beginAccess();
    v9 = swift_retain();
    MEMORY[0x227699594](v9);
    if (*(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_22655CEF0();
    sub_22655CF08();
    sub_22655CEE4();
    swift_endAccess();
    result = swift_release();
  }
  swift_bridgeObjectRetain();
  v10 = sub_22655D400();
  result = swift_bridgeObjectRelease();
  if (v10 <= a1)
    goto LABEL_4;
LABEL_8:
  v11 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x2276999E4](a1, v11);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a1)
    {
      v12 = *(_QWORD *)(v11 + 8 * a1 + 32);
      swift_retain();
      return v12;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22649CE7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinePool()
{
  return objc_opt_self();
}

uint64_t sub_22649CED0()
{
  uint64_t result;

  if (dword_25585AED8)
  {
    type metadata accessor for ScanEntityDebugUtilityManager();
    result = swift_allocObject();
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  }
  else
  {
    result = 0;
  }
  qword_25585AEE0 = result;
  return result;
}

uint64_t sub_22649CF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _BYTE v17[24];

  v5 = sub_22655C140();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = sub_22649C86C(a1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v10)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    v12 = swift_retain();
    v13 = sub_22649DFE0(v12, (uint64_t)v8);
    v14 = *(unsigned __int8 *)(v2 + 16);
    v15 = *(unsigned __int8 *)(v13 + 16);
    *(_BYTE *)(v13 + 16) = v14;
    if (v14 != v15)
    {
      sub_22655C89C();
      if (*(_QWORD *)(v13 + 24))
      {
        swift_retain();
        sub_22655C89C();
        swift_release();
      }
    }
    swift_beginAccess();
    swift_retain();
    v16 = swift_retain();
    sub_22649DE88(v16, a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_226522334, sub_2265405D8);
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_22649D0B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScanEntityDebugUtilityManager()
{
  return objc_opt_self();
}

uint64_t sub_22649D0FC(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = 1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0xE000000000000000;
  *(_DWORD *)(v1 + 64) = 1056964608;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_QWORD *)(v1 + 40) = a1;
  sub_22655C8B4();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v1 + 32) = sub_22655C1DC();
  type metadata accessor for ScanEntity();
  swift_retain();
  sub_22655C230();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_22649D1BC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    sub_22655C1AC();
    swift_retain();
    sub_22655C224();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_22649D264()
{
  sub_22649D1BC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScanEntityDebugUtility()
{
  return objc_opt_self();
}

uint64_t sub_22649D2A0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  float v14;
  float v15;
  int32x2_t v16;
  int32x4_t v17;
  void (*v18)(_BYTE *, _QWORD);
  int32x4_t *v19;
  __int128 v22;
  int32x4_t v23;
  _BYTE v24[32];

  v2 = v1;
  sub_22655C398();
  v3 = (void *)objc_opt_self();
  objc_msgSend(v3, sel_systemFontSize);
  v4 = objc_msgSend(v3, sel_systemFontOfSize_);
  sub_22655C374();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_255842740);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22655F8F0;
  v6 = (void *)objc_opt_self();
  swift_retain();
  v7 = objc_msgSend(v6, sel_whiteColor);
  v8 = sub_22655C3D4();
  v9 = MEMORY[0x24BDE62F8];
  *(_QWORD *)(v5 + 56) = v8;
  *(_QWORD *)(v5 + 64) = v9;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 32));
  sub_22655C3C8();
  sub_22655C1AC();
  swift_allocObject();
  v10 = sub_22655C1A0();
  LODWORD(v11) = vsub_f32((float32x2_t)a1.n128_u64[0], (float32x2_t)COERCE_UNSIGNED_INT(*(float *)(v2 + 64) * 0.5)).u32[0];
  DWORD1(v11) = vadd_f32(*(float32x2_t *)&a1, 0).i32[1];
  *((float *)&v11 + 2) = a1.n128_f32[2] + 0.01;
  HIDWORD(v11) = 0;
  v22 = v11;
  v12 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
  *(_OWORD *)(v13 + 32) = v22;
  v12(v24, 0);
  v14 = *(float *)(v2 + 64);
  sub_22655C38C();
  sub_22655C194();
  *(float *)v16.i32 = v14 / v15;
  v17 = vdupq_lane_s32(v16, 0);
  v17.i32[3] = 0;
  v23 = v17;
  v18 = (void (*)(_BYTE *, _QWORD))sub_22655C29C();
  *v19 = v23;
  v18(v24, 0);
  type metadata accessor for ScanEntity();
  sub_22655C230();
  swift_release();
  return v10;
}

_QWORD *sub_22649D514()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD **)(v0 + 72);
  }
  else
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 32);
    v4 = (void *)objc_opt_self();
    swift_retain();
    v5 = objc_msgSend(v4, sel_systemYellowColor);
    type metadata accessor for LinePool();
    swift_allocObject();
    v1 = sub_22649CA18(v3, v5);
    *(_QWORD *)(v2 + 72) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_22649D5CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD **)(v0 + 80);
  }
  else
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 32);
    v4 = (void *)objc_opt_self();
    swift_retain();
    v5 = objc_msgSend(v4, sel_redColor);
    type metadata accessor for LinePool();
    swift_allocObject();
    v1 = sub_22649CA18(v3, v5);
    *(_QWORD *)(v2 + 80) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_22649D684()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD **)(v0 + 88);
  }
  else
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 32);
    v4 = (void *)objc_opt_self();
    swift_retain();
    v5 = objc_msgSend(v4, sel_greenColor);
    type metadata accessor for LinePool();
    swift_allocObject();
    v1 = sub_22649CA18(v3, v5);
    *(_QWORD *)(v2 + 88) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_22649D73C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD **)(v0 + 96);
  }
  else
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 32);
    v4 = (void *)objc_opt_self();
    swift_retain();
    v5 = objc_msgSend(v4, sel_cyanColor);
    type metadata accessor for LinePool();
    swift_allocObject();
    v1 = sub_22649CA18(v3, v5);
    *(_QWORD *)(v2 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_22649D7F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a1;
  v2 = type metadata accessor for LineAnimation();
  v22 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_255849180);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22655FFA0;
  *(_QWORD *)(inited + 32) = sub_22649D514();
  *(_QWORD *)(inited + 40) = sub_22649D5CC();
  *(_QWORD *)(inited + 48) = sub_22649D73C();
  v25 = v1;
  *(_QWORD *)(inited + 56) = sub_22649D684();
  v27 = inited;
  sub_22655CEE4();
  v6 = v27;
  v28 = MEMORY[0x24BEE4AF8];
  sub_2264C79E0(0, 4, 0);
  v7 = 0;
  v8 = v28;
  v9 = v6 & 0xC000000000000001;
  v26 = v6;
  v24 = v6 + 32;
  do
  {
    if (v9)
    {
      v10 = MEMORY[0x2276999E4](v7, v26);
    }
    else
    {
      v10 = *(_QWORD *)(v24 + 8 * v7);
      swift_retain();
    }
    swift_beginAccess();
    v11 = *(_QWORD *)(v10 + 16);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = sub_22655D400();
      if (!v12)
        goto LABEL_14;
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v12)
        goto LABEL_14;
    }
    if (v12 < 1)
    {
      __break(1u);
      JUMPOUT(0x22649DBBCLL);
    }
    for (i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
        MEMORY[0x2276999E4](i, v11);
      else
        swift_retain();
      sub_22655C89C();
      swift_release();
    }
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    v28 = v8;
    v15 = *(_QWORD *)(v8 + 16);
    v14 = *(_QWORD *)(v8 + 24);
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      sub_2264C79E0(v14 > 1, v15 + 1, 1);
      v8 = v28;
    }
    ++v7;
    *(_QWORD *)(v8 + 16) = v16;
  }
  while (v7 != 4);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_255844B60);
  v17 = (_OWORD *)swift_initStackObject();
  v17[1] = xmmword_22655FA80;
  v17[2] = 0u;
  v17[3] = 0u;
  v18 = *(_QWORD *)(v23 + 16);
  if (v18)
  {
    v19 = v23 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v20 = *(_QWORD *)(v22 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_226453518(v19, (uint64_t)v4);
      if (*v4 == 1)
        __asm { BR              X9 }
      sub_22645355C((uint64_t)v4);
      v19 += v20;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return swift_setDeallocating();
}

uint64_t sub_22649DBD0(uint64_t result, double a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int v15;
  unsigned __int32 v16;
  unsigned __int32 v17;

  v6 = *(_QWORD *)(result + 112);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v7 - 1;
    if (v7 != 1)
    {
      v10 = (float *)(v6 + 56);
      v11 = 0;
      do
      {
        *(float32x2_t *)v13.f32 = vsub_f32(*(float32x2_t *)(v10 - 2), *(float32x2_t *)(v10 - 6));
        v13.f32[2] = *v10 - *(v10 - 4);
        v13.i32[3] = 0;
        v14 = (int32x4_t)vmulq_f32(v13, v13);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32(v14, 2), vaddq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1))).f32[0]) != 0.0)
        {
          v17 = a4.n128_u32[3];
          v15 = v11;
          v16 = a3.n128_u32[3];
          v12 = *a6;
          sub_22649CBF4(*a6);
          sub_22655C1AC();
          sub_22655C248();
          swift_retain();
          sub_22655C89C();
          result = swift_release_n();
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            goto LABEL_11;
          }
          *a6 = v12 + 1;
          v11 = v15;
          a3.n128_u32[3] = v16;
          a4.n128_u32[3] = v17;
        }
        v10 += 4;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t sub_22649DE74(uint64_t a1, uint64_t a2)
{
  return sub_22649DE88(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_2265234A4, (uint64_t (*)(uint64_t, uint64_t))sub_226540830);
}

uint64_t sub_22649DE88(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v6 = v4;
  v9 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v9 < 0)
    v11 = *v4;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
  result = sub_22655D274();
  if (!__OFADD__(result, 1))
  {
    *v6 = a4(v11, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v6;
    *v6 = 0x8000000000000000;
    a3(a1, a2, isUniquelyReferenced_nonNull_native);
    *v6 = v14;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t sub_22649DF38(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = sub_22655CE18();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return sub_22655CE54();
  }
  __break(1u);
  return result;
}

uint64_t sub_22649DFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_22655C0EC();
  v5 = sub_22649DF38(6uLL, v3, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x2276994D4](v5, v7, v9, v11);
  v14 = v13;
  swift_bridgeObjectRelease();
  type metadata accessor for ScanEntityDebugUtility();
  swift_allocObject();
  v15 = swift_retain();
  v16 = sub_22649D0FC(v15);
  *(_QWORD *)(v16 + 48) = v12;
  *(_QWORD *)(v16 + 56) = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v16 + 64) = 1056964608;
  v17 = sub_22649D2A0((__n128)0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v16 + 24) = v17;
  swift_release();
  v18 = sub_22655C140();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  return v16;
}

id sub_22649E118()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  objc_msgSend(v0, sel_setCornerRadius_, 8.0);
  objc_msgSend(v0, sel_setCornerCurve_, *MEMORY[0x24BDE58E8]);
  objc_msgSend(v0, sel_setCompositingFilter_, *MEMORY[0x24BDE5A48]);
  v1 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v2 = objc_msgSend(v1, sel_CGColor);

  objc_msgSend(v0, sel_setBackgroundColor_, v2);
  return v0;
}

id sub_22649E1F8()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  objc_msgSend(v0, sel_setBorderWidth_, 2.0);
  objc_msgSend(v0, sel_setCornerRadius_, 8.0);
  objc_msgSend(v0, sel_setCornerCurve_, *MEMORY[0x24BDE58E8]);
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_whiteColor);
  v3 = objc_msgSend(v2, sel_CGColor);

  objc_msgSend(v0, sel_setBorderColor_, v3);
  v4 = objc_msgSend(v1, sel_whiteColor);
  v5 = objc_msgSend(v4, sel_CGColor);

  objc_msgSend(v0, sel_setBackgroundColor_, v5);
  return v0;
}

id sub_22649E324()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  void *v5;
  id v6;

  v1 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v2 = objc_msgSend(v1, sel_userInterfaceIdiom);

  *(_BYTE *)(v0 + 64) = v2 == (id)1;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v5 = (void *)sub_22655CD64();
  v6 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_withConfiguration_, v5, v4, 0);

  return v6;
}

void sub_22649E430()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGAffineTransform v17[3];

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 32) = sub_22649E118();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  objc_msgSend(v1, sel_setCornerRadius_, 8.0);
  objc_msgSend(v1, sel_setMasksToBounds_, 1);
  objc_msgSend(v1, sel_setCornerCurve_, *MEMORY[0x24BDE58E8]);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  objc_msgSend(v2, sel_setAllowsEdgeAntialiasing_, 1);
  v3 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v4 = objc_msgSend(v3, sel_CGColor);

  objc_msgSend(v2, sel_setBackgroundColor_, v4);
  CGAffineTransformMakeRotation(v17, 1.09955743);
  objc_msgSend(v2, sel_setAffineTransform_, v17);
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = sub_22649E1F8();
  *(_BYTE *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_BYTE *)(v0 + 104) = 1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  sub_22649F6B4((uint64_t)v17);
  sub_22649F650((uint64_t)v17, v0 + 136);
  *(_DWORD *)(v0 + 268) = 0;
  *(_BYTE *)(v0 + 272) = 1;
  *(_QWORD *)(v0 + 280) = 0x4052000000000000;
  objc_msgSend(*(id *)(v0 + 40), sel_addSublayer_, v2);
  v5 = sub_22649E324();
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
    v8 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v7;

    v9 = *(void **)(v0 + 16);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v6, sel_CGImage);
      objc_msgSend(v10, sel_setContents_, v11);

      v12 = *(void **)(v0 + 16);
      if (v12)
      {
        objc_msgSend(v12, sel_setAllowsEdgeAntialiasing_, 1);
        if (*(_QWORD *)(v0 + 16))
        {
          objc_msgSend(*(id *)(v0 + 56), sel_setMask_);
          objc_msgSend(v6, sel_size);
          v14 = v13;
          objc_msgSend(v6, sel_size);
          v16 = v15;

          *(double *)(v0 + 24) = v14 / v16;
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

void sub_22649E6D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  double MidX;
  id v8;
  CGRect v9;

  if ((*(_BYTE *)(v0 + 104) & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(v0 + 32), sel_setBounds_, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  if ((*(_BYTE *)(v0 + 104) & 1) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(*(id *)(v0 + 56), sel_setBounds_, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  v1 = *(void **)(v0 + 16);
  if (!v1)
    return;
  if ((*(_BYTE *)(v0 + 104) & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v1, sel_setBounds_, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  v2 = *(void **)(v0 + 16);
  if (v2)
  {
    if ((*(_BYTE *)(v0 + 104) & 1) == 0)
    {
      v4 = *(double *)(v0 + 88);
      v3 = *(double *)(v0 + 96);
      v6 = *(double *)(v0 + 72);
      v5 = *(double *)(v0 + 80);
      v8 = v2;
      v9.origin.x = v6;
      v9.origin.y = v5;
      v9.size.width = v4;
      v9.size.height = v3;
      MidX = CGRectGetMidX(v9);
      if ((*(_BYTE *)(v0 + 104) & 1) == 0)
      {
        objc_msgSend(v8, sel_setPosition_, MidX, CGRectGetMidY(*(CGRect *)(v0 + 72)));

        return;
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
}

uint64_t sub_22649E7F4()
{
  id *v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeviceController()
{
  return objc_opt_self();
}

void sub_22649E858(void *a1, float a2)
{
  uint64_t v2;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  float64x2_t v16;
  double MidX;
  CGFloat MidY;
  void *v19;
  void *v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat m11;
  CGFloat m12;
  CGFloat m13;
  CGFloat m14;
  CGFloat m21;
  CGFloat m22;
  CGFloat m23;
  CGFloat m24;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  void *v65;
  double v66;
  void *v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  double Height;
  double v74;
  double Width;
  float v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat m44;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat m43;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat m42;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat m41;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat m34;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat m33;
  CGFloat v107;
  CGFloat v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat m32;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  double v115;
  CGFloat v116;
  CGFloat m31;
  double v118;
  CATransform3D v119;
  _BYTE v120[136];
  CATransform3D v121;
  CATransform3D v122;
  CATransform3D v123;
  CATransform3D v124;
  _BYTE v125[136];
  CATransform3D v126;
  CATransform3D v127;
  CATransform3D v128;
  CATransform3D v129;
  _BYTE v130[136];
  CATransform3D v131;
  CATransform3D v132;
  CATransform3D v133;
  CATransform3D v134;
  _BYTE v135[136];
  CATransform3D v136;
  CATransform3D v137;
  CATransform3D v138;
  CATransform3D v139;
  _BYTE v140[136];
  CATransform3D v141;
  _QWORD v142[17];
  _BYTE v143[136];
  CATransform3D v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;

  objc_msgSend(a1, sel_bounds);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v11 / 500.0;
  if (!*(_BYTE *)(v2 + 64))
    v13 = 1.0;
  v115 = v13;
  v76 = cosf(a2);
  v145.origin.x = v6;
  v145.origin.y = v8;
  v145.size.width = v10;
  v145.size.height = v12;
  Width = CGRectGetWidth(v145);
  v146.origin.x = v6;
  v146.origin.y = v8;
  v146.size.width = v10;
  v146.size.height = v12;
  Height = CGRectGetHeight(v146);
  v147.origin.x = v6;
  v147.origin.y = v8;
  v147.size.width = v10;
  v147.size.height = v12;
  v74 = CGRectGetHeight(v147);
  v14 = (void *)objc_opt_self();
  objc_msgSend(v14, sel_setDisableActions_, 1);
  v15 = *(double *)(v2 + 24) * 72.0;
  v16 = (float64x2_t)vdupq_lane_s64(0x4052000000000000, 0);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  v16.f64[0] = v15;
  *(float64x2_t *)(v2 + 88) = vmulq_n_f64(v16, v115);
  *(_BYTE *)(v2 + 104) = 0;
  sub_22649E6D4();
  v148.origin.x = v6;
  v148.origin.y = v8;
  v148.size.width = v10;
  v148.size.height = v12;
  MidX = CGRectGetMidX(v148);
  v149.origin.x = v6;
  v149.origin.y = v8;
  v149.size.width = v10;
  v149.size.height = v12;
  MidY = CGRectGetMidY(v149);
  *(double *)(v2 + 112) = MidX;
  *(CGFloat *)(v2 + 120) = MidY;
  *(_BYTE *)(v2 + 128) = 0;
  v19 = *(void **)(v2 + 32);
  objc_msgSend(v19, sel_setPosition_, MidX, MidY);
  if ((*(_BYTE *)(v2 + 128) & 1) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v20 = *(void **)(v2 + 56);
  objc_msgSend(v20, sel_setPosition_, *(double *)(v2 + 112), *(double *)(v2 + 120));
  v22 = *(double *)(MEMORY[0x24BDE5598] + 8);
  v23 = *(double *)(MEMORY[0x24BDE5598] + 16);
  v24 = *(double *)(MEMORY[0x24BDE5598] + 24);
  v25 = *(double *)(MEMORY[0x24BDE5598] + 32);
  v26 = *(double *)(MEMORY[0x24BDE5598] + 40);
  v27 = *(double *)(MEMORY[0x24BDE5598] + 48);
  v90 = *(double *)(MEMORY[0x24BDE5598] + 64);
  v95 = *(double *)(MEMORY[0x24BDE5598] + 56);
  v80 = *(double *)(MEMORY[0x24BDE5598] + 80);
  v85 = *(double *)(MEMORY[0x24BDE5598] + 72);
  v110 = *(double *)(MEMORY[0x24BDE5598] + 104);
  v116 = *(double *)(MEMORY[0x24BDE5598] + 96);
  v100 = *(double *)(MEMORY[0x24BDE5598] + 120);
  v105 = *(double *)(MEMORY[0x24BDE5598] + 112);
  v28 = -1.0 / (v12 * 0.615763547);
  v142[0] = *MEMORY[0x24BDE5598];
  v21 = *(double *)v142;
  *(CGFloat *)&v142[1] = v22;
  *(CGFloat *)&v142[2] = v23;
  *(CGFloat *)&v142[3] = v24;
  *(CGFloat *)&v142[4] = v25;
  *(CGFloat *)&v142[5] = v26;
  *(CGFloat *)&v142[6] = v27;
  *(CGFloat *)&v142[7] = v95;
  *(CGFloat *)&v142[8] = v90;
  *(CGFloat *)&v142[9] = v85;
  *(CGFloat *)&v142[10] = v80;
  *(CGFloat *)&v142[11] = v28;
  *(CGFloat *)&v142[12] = v116;
  *(CGFloat *)&v142[13] = v110;
  *(CGFloat *)&v142[14] = v105;
  *(CGFloat *)&v142[15] = v100;
  sub_22649F648((uint64_t)v142);
  sub_22649F650((uint64_t)v142, v2 + 136);
  v144.m11 = v21;
  v144.m12 = v22;
  v144.m13 = v23;
  v144.m14 = v24;
  v144.m21 = v25;
  v144.m22 = v26;
  v144.m23 = v27;
  v144.m24 = v95;
  v144.m31 = v90;
  v144.m32 = v85;
  v144.m33 = v80;
  v144.m34 = v28;
  v144.m41 = v116;
  v144.m42 = v110;
  v144.m43 = v105;
  v144.m44 = v100;
  objc_msgSend(v19, sel_setTransform_, &v144);
  sub_22649F650(v2 + 136, (uint64_t)v143);
  sub_22649F650((uint64_t)v143, (uint64_t)&v144);
  if (sub_22649F698((uint64_t)&v144) == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v141 = v144;
  objc_msgSend(v20, sel_setTransform_, &v141);
  sub_22649F650(v2 + 136, (uint64_t)v140);
  sub_22649F650((uint64_t)v140, (uint64_t)&v141);
  if (sub_22649F698((uint64_t)&v141) == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v139 = v141;
  CATransform3DScale(&v138, &v139, 0.85, 0.85, 1.0);
  m11 = v138.m11;
  m12 = v138.m12;
  m13 = v138.m13;
  m14 = v138.m14;
  m21 = v138.m21;
  m22 = v138.m22;
  m23 = v138.m23;
  m24 = v138.m24;
  m32 = v138.m32;
  m31 = v138.m31;
  m34 = v138.m34;
  m33 = v138.m33;
  m42 = v138.m42;
  m41 = v138.m41;
  m44 = v138.m44;
  m43 = v138.m43;
  v137 = v138;
  sub_22649F648((uint64_t)&v137);
  sub_22649F650((uint64_t)&v137, v2 + 136);
  v139.m11 = m11;
  v139.m12 = m12;
  v139.m13 = m13;
  v139.m14 = m14;
  v139.m21 = m21;
  v139.m22 = m22;
  v139.m23 = m23;
  v139.m24 = m24;
  v139.m31 = m31;
  v139.m32 = m32;
  v139.m33 = m33;
  v139.m34 = m34;
  v139.m41 = m41;
  v139.m42 = m42;
  v139.m43 = m43;
  v139.m44 = m44;
  objc_msgSend(v19, sel_setTransform_, &v139);
  sub_22649F650(v2 + 136, (uint64_t)&v138);
  sub_22649F650((uint64_t)&v138, (uint64_t)&v139);
  if (sub_22649F698((uint64_t)&v139) == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v136 = v139;
  objc_msgSend(v20, sel_setTransform_, &v136);
  sub_22649F650(v2 + 136, (uint64_t)v135);
  sub_22649F650((uint64_t)v135, (uint64_t)&v136);
  if (sub_22649F698((uint64_t)&v136) == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v118 = v76;
  v72 = v76 * 3.14159265;
  v134 = v136;
  CATransform3DRotate(&v133, &v134, v72 * -0.08, 0.0, 1.0, 0.0);
  v37 = v133.m11;
  v38 = v133.m12;
  v39 = v133.m13;
  v40 = v133.m14;
  v41 = v133.m21;
  v42 = v133.m22;
  v43 = v133.m23;
  v44 = v133.m24;
  v107 = v133.m32;
  v112 = v133.m31;
  v97 = v133.m34;
  v102 = v133.m33;
  v87 = v133.m42;
  v92 = v133.m41;
  v77 = v133.m44;
  v82 = v133.m43;
  v132 = v133;
  sub_22649F648((uint64_t)&v132);
  sub_22649F650((uint64_t)&v132, v2 + 136);
  v134.m11 = v37;
  v134.m12 = v38;
  v134.m13 = v39;
  v134.m14 = v40;
  v134.m21 = v41;
  v134.m22 = v42;
  v134.m23 = v43;
  v134.m24 = v44;
  v134.m31 = v112;
  v134.m32 = v107;
  v134.m33 = v102;
  v134.m34 = v97;
  v134.m41 = v92;
  v134.m42 = v87;
  v134.m43 = v82;
  v134.m44 = v77;
  objc_msgSend(v19, sel_setTransform_, &v134);
  sub_22649F650(v2 + 136, (uint64_t)&v133);
  sub_22649F650((uint64_t)&v133, (uint64_t)&v134);
  if (sub_22649F698((uint64_t)&v134) == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v131 = v134;
  objc_msgSend(v20, sel_setTransform_, &v131);
  sub_22649F650(v2 + 136, (uint64_t)v130);
  sub_22649F650((uint64_t)v130, (uint64_t)&v131);
  if (sub_22649F698((uint64_t)&v131) == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v129 = v131;
  CATransform3DRotate(&v128, &v129, v72 * 0.08, 1.0, 0.0, 0.0);
  v45 = v128.m11;
  v46 = v128.m12;
  v47 = v128.m13;
  v48 = v128.m14;
  v49 = v128.m21;
  v50 = v128.m22;
  v51 = v128.m23;
  v52 = v128.m24;
  v108 = v128.m32;
  v113 = v128.m31;
  v98 = v128.m34;
  v103 = v128.m33;
  v88 = v128.m42;
  v93 = v128.m41;
  v78 = v128.m44;
  v83 = v128.m43;
  v127 = v128;
  sub_22649F648((uint64_t)&v127);
  sub_22649F650((uint64_t)&v127, v2 + 136);
  v129.m11 = v45;
  v129.m12 = v46;
  v129.m13 = v47;
  v129.m14 = v48;
  v129.m21 = v49;
  v129.m22 = v50;
  v129.m23 = v51;
  v129.m24 = v52;
  v129.m31 = v113;
  v129.m32 = v108;
  v129.m33 = v103;
  v129.m34 = v98;
  v129.m41 = v93;
  v129.m42 = v88;
  v129.m43 = v83;
  v129.m44 = v78;
  objc_msgSend(v19, sel_setTransform_, &v129);
  sub_22649F650(v2 + 136, (uint64_t)&v128);
  sub_22649F650((uint64_t)&v128, (uint64_t)&v129);
  if (sub_22649F698((uint64_t)&v129) == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v126 = v129;
  objc_msgSend(v20, sel_setTransform_, &v126);
  sub_22649F650(v2 + 136, (uint64_t)v125);
  sub_22649F650((uint64_t)v125, (uint64_t)&v126);
  if (sub_22649F698((uint64_t)&v126) == 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v124 = v126;
  CATransform3DTranslate(&v123, &v124, Width * 0.15, Height * 0.175 * v118 + v74 * -0.125, 1.0);
  v53 = v123.m11;
  v54 = v123.m12;
  v55 = v123.m13;
  v56 = v123.m14;
  v57 = v123.m21;
  v58 = v123.m22;
  v59 = v123.m23;
  v60 = v123.m24;
  v109 = v123.m32;
  v114 = v123.m31;
  v99 = v123.m34;
  v104 = v123.m33;
  v89 = v123.m42;
  v94 = v123.m41;
  v79 = v123.m44;
  v84 = v123.m43;
  v122 = v123;
  sub_22649F648((uint64_t)&v122);
  sub_22649F650((uint64_t)&v122, v2 + 136);
  v124.m11 = v53;
  v124.m12 = v54;
  v124.m13 = v55;
  v124.m14 = v56;
  v124.m21 = v57;
  v124.m22 = v58;
  v124.m23 = v59;
  v124.m24 = v60;
  v124.m31 = v114;
  v124.m32 = v109;
  v124.m33 = v104;
  v124.m34 = v99;
  v124.m41 = v94;
  v124.m42 = v89;
  v124.m43 = v84;
  v124.m44 = v79;
  objc_msgSend(v19, sel_setTransform_, &v124);
  sub_22649F650(v2 + 136, (uint64_t)&v123);
  sub_22649F650((uint64_t)&v123, (uint64_t)&v124);
  if (sub_22649F698((uint64_t)&v124) == 1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v121 = v124;
  objc_msgSend(v20, sel_setTransform_, &v121);
  *(_DWORD *)(v2 + 268) = 1065353216;
  *(_BYTE *)(v2 + 272) = 0;
  LODWORD(v61) = 1.0;
  objc_msgSend(v19, sel_setOpacity_, v61);
  if ((*(_BYTE *)(v2 + 272) & 1) != 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  LODWORD(v62) = *(_DWORD *)(v2 + 268);
  objc_msgSend(v20, sel_setOpacity_, v62);
  v63 = *(void **)(v2 + 16);
  if (v63)
  {
    v64 = v63;
    objc_msgSend(a1, sel_contentsScale);
    objc_msgSend(v64, sel_setContentsScale_);

  }
  if ((*(_BYTE *)(v2 + 104) & 1) != 0)
    goto LABEL_32;
  v65 = *(void **)(v2 + 40);
  objc_msgSend(v65, sel_setBounds_, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96));
  if ((*(_BYTE *)(v2 + 272) & 1) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  LODWORD(v66) = *(_DWORD *)(v2 + 268);
  objc_msgSend(v65, sel_setOpacity_, v66);
  sub_22649F650(v2 + 136, (uint64_t)v120);
  sub_22649F650((uint64_t)v120, (uint64_t)&v121);
  if (sub_22649F698((uint64_t)&v121) == 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v119 = v121;
  objc_msgSend(v65, sel_setTransform_, &v119);
  if ((*(_BYTE *)(v2 + 128) & 1) == 0)
  {
    objc_msgSend(v65, (SEL)&selRef_initWithDevice_kernelDiameter_, *(double *)(v2 + 112), *(double *)(v2 + 120));
    v67 = *(void **)(v2 + 48);
    LODWORD(v68) = 1053609165;
    objc_msgSend(v67, sel_setOpacity_, v68);
    objc_msgSend(v65, (SEL)&selRef_confidenceMap);
    v69 = CGRectGetWidth(v150) * 7.0;
    objc_msgSend(v65, (SEL)&selRef_confidenceMap);
    v70 = CGRectGetHeight(v151);
    objc_msgSend(v67, sel_setBounds_, 0.0, 0.0, v69, v70);
    objc_msgSend(v65, (SEL)&selRef_confidenceMap);
    v71 = CGRectGetMidX(v152) + 5.0;
    objc_msgSend(v65, (SEL)&selRef_confidenceMap);
    objc_msgSend(v67, (SEL)&selRef_initWithDevice_kernelDiameter_, v71, CGRectGetMidX(v153) - (v70 + v70 * -0.2 * v118));
    objc_msgSend(v14, sel_setDisableActions_, 0);
    return;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_22649F648(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_22649F650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_255844D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22649F698(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

double sub_22649F6B4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

id sub_22649F728()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TmpTexture();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TmpTexture()
{
  return objc_opt_self();
}

id sub_22649F788()
{
  uint64_t v0;
  id v1;
  id result;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = *(id *)(v0 + 32);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  result = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 64, 0);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 32) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_22649F7FC()
{
  uint64_t v0;
  id v1;
  id result;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(id *)(v0 + 40);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  result = objc_msgSend(*(id *)(v0 + 16), sel_newBufferWithLength_options_, 48, 0);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 40) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_22649F870(int a1, id a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id result;

  v4 = objc_msgSend(a2, sel_device);
  v5 = objc_msgSend(a3, sel_width);
  v6 = objc_msgSend(a3, sel_height);
  v7 = objc_msgSend(a3, sel_pixelFormat);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
  objc_msgSend(v8, sel_setPixelFormat_, v7);
  objc_msgSend(v8, sel_setWidth_, v5);
  objc_msgSend(v8, sel_setHeight_, v6);
  objc_msgSend(v8, sel_setUsage_, 7);
  v9 = objc_msgSend(v4, sel_newTextureWithDescriptor_, v8);
  swift_unknownObjectRelease();

  if (v9)
    return v9;
  result = (id)sub_22655D3E8();
  __break(1u);
  return result;
}

uint64_t sub_22649F9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t ObjCClassFromMetadata;
  id v21;
  id v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55[4];

  v3 = v1;
  v55[3] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = sub_22655CB84();
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v51 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v51 - v11;
  v13 = (objc_class *)type metadata accessor for TmpTexture();
  *(_QWORD *)(v3 + 80) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 88) = objc_msgSend(objc_allocWithZone(v13), sel_init);
  *(_QWORD *)(v3 + 96) = objc_msgSend(objc_allocWithZone(v13), sel_init);
  *(_QWORD *)(v3 + 104) = sub_22649F870;
  *(_QWORD *)(v3 + 112) = 0;
  type metadata accessor for MetalConstants();
  swift_initStaticObject();
  *(_QWORD *)(v3 + 16) = sub_22648BC28();
  v14 = (void *)sub_22648BCD8();
  *(_QWORD *)(v3 + 24) = a1;
  swift_retain();
  v15 = (void *)sub_22655CD64();
  v16 = objc_msgSend(v14, sel_newFunctionWithName_, v15);

  if (!v16)
  {
    v51 = v2;
    type metadata accessor for Constants();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v21 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v22 = objc_msgSend(v21, sel_bundleIdentifier);

    if (v22)
    {
      sub_22655CD88();

    }
    sub_22643D680();
    sub_22655D124();
    sub_22655CB90();
    v24 = sub_22655CB6C();
    v25 = sub_22655CFF8();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_226423000, v24, v25, "Cannot create occlusion stage", v26, 2u);
      MEMORY[0x22769A884](v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
    v18 = 0;
LABEL_10:
    *(_QWORD *)(v3 + 56) = v18;
    swift_unknownObjectRelease();
    v27 = (void *)sub_22655CD64();
    v28 = objc_msgSend(v14, sel_newFunctionWithName_, v27);

    if (v28)
    {
      v29 = *(void **)(v3 + 16);
      v55[0] = 0;
      v30 = objc_msgSend(v29, sel_newComputePipelineStateWithFunction_error_, v28, v55);
      v31 = v55[0];
      if (!v30)
      {
LABEL_21:
        v42 = v31;
        sub_22655BF6C();

        goto LABEL_22;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      type metadata accessor for Constants();
      v32 = swift_getObjCClassFromMetadata();
      v33 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v32);
      v34 = objc_msgSend(v33, sel_bundleIdentifier);

      if (v34)
      {
        sub_22655CD88();

      }
      sub_22643D680();
      sub_22655D124();
      sub_22655CB90();
      v35 = sub_22655CB6C();
      v36 = sub_22655CFF8();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_226423000, v35, v36, "Cannot create compositing stage", v37, 2u);
        MEMORY[0x22769A884](v37, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v54);
      v30 = 0;
    }
    *(_QWORD *)(v3 + 64) = v30;
    swift_unknownObjectRelease();
    v38 = (void *)sub_22655CD64();
    v39 = objc_msgSend(v14, sel_newFunctionWithName_, v38);

    if (!v39)
    {
      type metadata accessor for Constants();
      v43 = swift_getObjCClassFromMetadata();
      v44 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, v43);
      v45 = objc_msgSend(v44, sel_bundleIdentifier);

      if (v45)
      {
        sub_22655CD88();

      }
      sub_22643D680();
      sub_22655D124();
      sub_22655CB90();
      v46 = sub_22655CB6C();
      v47 = sub_22655CFF8();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_226423000, v46, v47, "Cannot create occlusion/compositing stage", v48, 2u);
        MEMORY[0x22769A884](v48, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      v41 = 0;
      goto LABEL_28;
    }
    v40 = *(void **)(v3 + 16);
    v55[0] = 0;
    v41 = objc_msgSend(v40, sel_newComputePipelineStateWithFunction_error_, v39, v55);
    v31 = v55[0];
    if (v41)
    {
      swift_unknownObjectRelease();
LABEL_28:
      *(_QWORD *)(v3 + 72) = v41;
      swift_unknownObjectRelease();
      v49 = *(void **)(v3 + 16);
      swift_beginAccess();
      swift_unknownObjectRetain();
      CVMetalTextureCacheCreate(0, 0, v49, 0, (CVMetalTextureCacheRef *)(v3 + 80));
      swift_endAccess();
      swift_unknownObjectRelease();
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  v17 = *(void **)(v3 + 16);
  v55[0] = 0;
  v18 = objc_msgSend(v17, sel_newComputePipelineStateWithFunction_error_, v16, v55);
  v19 = v55[0];
  if (v18)
  {
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  v23 = v19;
  sub_22655BF6C();

LABEL_22:
  swift_willThrow();
  swift_unknownObjectRelease();
  swift_release();
LABEL_29:
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

__n128 sub_2264A0148(double a1, double a2, __n128 a3, __n128 a4)
{
  _DWORD *v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  char v10;
  float v11;
  float v12;
  __n128 v13;
  id v14;
  _DWORD *v15;
  id v16;
  __n128 result;
  __n128 v22;

  if (qword_25583F9D0 != -1)
    swift_once();
  v4 = off_25584AF28;
  swift_beginAccess();
  v5 = v4[30];
  swift_beginAccess();
  v6 = v4[29];
  swift_beginAccess();
  v7 = *((_BYTE *)v4 + 34);
  swift_beginAccess();
  v8 = v4[28];
  swift_beginAccess();
  v9 = v4[27];
  swift_beginAccess();
  v10 = *((_BYTE *)v4 + 104);
  v11 = sub_2264DC1D4(a1, a2, a3, a4);
  v13.n128_f32[0] = v11 * v12;
  v13.n128_f32[1] = v12 - v11;
  v13.n128_u64[1] = LODWORD(v11);
  v22 = v13;
  v14 = sub_22649F7FC();
  v15 = objc_msgSend(v14, sel_contents);
  v16 = v14;
  result = v22;
  *(__n128 *)v15 = v22;
  v15[4] = v8;
  v15[5] = v9;
  *((_BYTE *)v15 + 24) = v7;
  *((_BYTE *)v15 + 25) = v10;
  v15[7] = v6;
  v15[8] = v5;
  return result;
}

void sub_2264A02B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_22655C770();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  __asm { BR              X10 }
}

uint64_t sub_2264A03A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id *v15;
  uint64_t *v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v1, v3);
  if (v4)
    v7 = v4;
  else
    v7 = sub_22655C740();
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  swift_unknownObjectRetain();
  v8(v0, v3);
  v9 = (void *)sub_22655C758();
  v10 = (void *)sub_22655C764();
  v11 = OBJC_IVAR____TtC8RoomPlan10TmpTexture_wasUpdated;
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC8RoomPlan10TmpTexture_wasUpdated) & 1) == 0)
  {
    v12 = objc_msgSend(v9, sel_width);
    v13 = objc_msgSend(v9, sel_height);
    v14 = objc_msgSend(v9, sel_pixelFormat);
    v15 = (id *)(v5 + OBJC_IVAR____TtC8RoomPlan10TmpTexture_texture);
    swift_beginAccess();
    sub_226494CC8(v15, v10, v12, v13, (id)3, v14);
    swift_endAccess();
    *(_BYTE *)(v5 + v11) = 1;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v16 = (uint64_t *)(v5 + OBJC_IVAR____TtC8RoomPlan10TmpTexture_texture);
  swift_beginAccess();
  v17 = *v16;
  if (!*v16)
  {
    __break(1u);
    JUMPOUT(0x2264A08C8);
  }
  *(_QWORD *)(v6 - 136) = v17;
  swift_unknownObjectRetain();
  sub_2264A08DC(v1, *(_QWORD *)(v6 - 256), *(_QWORD *)(v6 - 248), v7, (_QWORD *)(v6 - 136));
  swift_unknownObjectRelease();
  return v17;
}

uint64_t sub_2264A08DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  id v10;
  uint64_t result;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v10 = objc_msgSend((id)sub_22655C734(), sel_computeCommandEncoder);
  result = swift_unknownObjectRelease();
  if (v10)
  {
    v12 = *(void **)(v5 + 56);
    if (!v12)
      return swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    objc_msgSend(v10, sel_setComputePipelineState_, v12);
    objc_msgSend(v10, sel_setBuffer_offset_atIndex_, sub_22649F788(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v10, sel_setBuffer_offset_atIndex_, sub_22649F7FC(), 0, 1);
    swift_unknownObjectRelease();
    objc_msgSend(v10, sel_setTexture_atIndex_, a4, 0);
    objc_msgSend(v10, sel_setTexture_atIndex_, sub_22655C74C(), 1);
    swift_unknownObjectRelease();
    objc_msgSend(v10, sel_setTexture_atIndex_, a2, 2);
    objc_msgSend(v10, sel_setTexture_atIndex_, a3, 3);
    objc_msgSend(v10, sel_setTexture_atIndex_, *a5, 4);
    v13 = objc_msgSend((id)sub_22655C740(), sel_width);
    swift_unknownObjectRelease();
    v14 = objc_msgSend((id)sub_22655C740(), sel_height);
    swift_unknownObjectRelease();
    v15 = (uint64_t)objc_msgSend(v12, sel_threadExecutionWidth);
    result = (uint64_t)objc_msgSend(v12, sel_maxTotalThreadsPerThreadgroup);
    if (v15)
    {
      if (result != 0x8000000000000000 || v15 != -1)
      {
        MTLSizeMake(v15, result / v15, &v20);
        v16 = v21;
        v17 = v20;
        *(_QWORD *)&v20 = v13;
        *((_QWORD *)&v20 + 1) = v14;
        v21 = 1;
        v18 = v17;
        v19 = v16;
        objc_msgSend(v10, sel_dispatchThreads_threadsPerThreadgroup_, &v20, &v18);
        objc_msgSend(v10, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2264A0B74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(id, uint64_t, uint64_t);
  id v8;
  uint64_t v9;

  v7 = *(uint64_t (**)(id, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v8 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9 = v7(v8, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_2264A0C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v8;
  uint64_t result;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v8 = objc_msgSend((id)sub_22655C734(), sel_computeCommandEncoder);
  result = swift_unknownObjectRelease();
  if (v8)
  {
    v10 = *(void **)(v4 + 64);
    if (!v10)
      return swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    objc_msgSend(v8, sel_setComputePipelineState_, v10);
    objc_msgSend(v8, sel_setBuffer_offset_atIndex_, sub_22649F788(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v8, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v8, sel_setTexture_atIndex_, a2, 1);
    objc_msgSend(v8, sel_setTexture_atIndex_, a4, 2);
    v11 = objc_msgSend((id)sub_22655C740(), sel_width);
    swift_unknownObjectRelease();
    v12 = objc_msgSend((id)sub_22655C740(), sel_height);
    swift_unknownObjectRelease();
    v13 = (uint64_t)objc_msgSend(v10, sel_threadExecutionWidth);
    result = (uint64_t)objc_msgSend(v10, sel_maxTotalThreadsPerThreadgroup);
    if (v13)
    {
      if (result != 0x8000000000000000 || v13 != -1)
      {
        MTLSizeMake(v13, result / v13, &v18);
        v14 = v19;
        v15 = v18;
        *(_QWORD *)&v18 = v11;
        *((_QWORD *)&v18 + 1) = v12;
        v19 = 1;
        v16 = v15;
        v17 = v14;
        objc_msgSend(v8, sel_dispatchThreads_threadsPerThreadgroup_, &v18, &v16);
        objc_msgSend(v8, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2264A0E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v12;
  uint64_t result;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v12 = objc_msgSend((id)sub_22655C734(), sel_computeCommandEncoder);
  result = swift_unknownObjectRelease();
  if (v12)
  {
    v14 = *(void **)(v6 + 72);
    if (!v14)
      return swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    objc_msgSend(v12, sel_setComputePipelineState_, v14);
    objc_msgSend(v12, sel_setBuffer_offset_atIndex_, sub_22649F788(), 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v12, sel_setBuffer_offset_atIndex_, sub_22649F7FC(), 0, 1);
    swift_unknownObjectRelease();
    objc_msgSend(v12, sel_setTexture_atIndex_, a5, 0);
    objc_msgSend(v12, sel_setTexture_atIndex_, sub_22655C74C(), 1);
    swift_unknownObjectRelease();
    objc_msgSend(v12, sel_setTexture_atIndex_, a4, 2);
    objc_msgSend(v12, sel_setTexture_atIndex_, a2, 3);
    objc_msgSend(v12, sel_setTexture_atIndex_, a3, 4);
    objc_msgSend(v12, sel_setTexture_atIndex_, a6, 5);
    v15 = objc_msgSend((id)sub_22655C740(), sel_width);
    swift_unknownObjectRelease();
    v16 = objc_msgSend((id)sub_22655C740(), sel_height);
    swift_unknownObjectRelease();
    v17 = (uint64_t)objc_msgSend(v14, sel_threadExecutionWidth);
    result = (uint64_t)objc_msgSend(v14, sel_maxTotalThreadsPerThreadgroup);
    if (v17)
    {
      if (result != 0x8000000000000000 || v17 != -1)
      {
        MTLSizeMake(v17, result / v17, &v22);
        v18 = v23;
        v19 = v22;
        *(_QWORD *)&v22 = v15;
        *((_QWORD *)&v22 + 1) = v16;
        v23 = 1;
        v20 = v19;
        v21 = v18;
        objc_msgSend(v12, sel_dispatchThreads_threadsPerThreadgroup_, &v22, &v20);
        objc_msgSend(v12, sel_endEncoding);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

id *sub_2264A10D8()
{
  id *v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return v0;
}

uint64_t sub_2264A114C()
{
  sub_2264A10D8();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneShaderRenderer()
{
  return objc_opt_self();
}

uint64_t sub_2264A118C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;

  v6 = result;
  v26 = result;
  if (a2)
  {
    result = swift_bridgeObjectRetain();
    if (a3)
      goto LABEL_3;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = 0;
    while (*(_BYTE *)(result + v8 + 32))
    {
      if (v7 == ++v8)
      {
        swift_bridgeObjectRetain();
        v8 = v7;
        goto LABEL_14;
      }
    }
    if (__OFADD__(v8, 1))
      goto LABEL_81;
    result = swift_bridgeObjectRetain();
    if (v8 + 1 != v7)
    {
      v13 = v8 + 33;
      while (v13 - 32 < v7)
      {
        v15 = *(_BYTE *)(v6 + v13);
        if (v15)
        {
          if (v13 - 32 != v8)
          {
            if (v8 >= v7)
              goto LABEL_75;
            v16 = *(_BYTE *)(v6 + 32 + v8);
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_2264C1250(v6);
              v6 = result;
            }
            *(_BYTE *)(v6 + v8 + 32) = v15;
            *(_BYTE *)(v6 + v13) = v16;
            v26 = v6;
          }
          v17 = __OFADD__(v8++, 1);
          if (v17)
            goto LABEL_72;
          v7 = *(_QWORD *)(v6 + 16);
        }
        v14 = v13 - 31;
        ++v13;
        if (v14 == v7)
          goto LABEL_13;
      }
      __break(1u);
      goto LABEL_70;
    }
LABEL_13:
    if ((uint64_t)v7 < v8)
    {
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = 0;
  }
LABEL_14:
  result = (uint64_t)sub_22650AA20(v8, v7);
  v6 = v26;
  if (!a3)
  {
LABEL_15:
    v9 = *(_QWORD *)(v6 + 16);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_24;
    }
    v10 = 0;
    while (*(_BYTE *)(v6 + v10 + 32) != 2)
    {
      if (v9 == ++v10)
      {
        v10 = *(_QWORD *)(v6 + 16);
        goto LABEL_24;
      }
    }
    if (__OFADD__(v10, 1))
      goto LABEL_82;
    if (v10 + 1 == v9)
    {
LABEL_23:
      if ((uint64_t)v9 < v10)
      {
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
LABEL_24:
      result = (uint64_t)sub_22650AA20(v10, v9);
      v6 = v26;
      if (!a4)
        goto LABEL_25;
      return v6;
    }
    v18 = v10 + 33;
    while (v18 - 32 < v9)
    {
      v20 = *(unsigned __int8 *)(v6 + v18);
      if (v20 != 2)
      {
        if (v18 - 32 != v10)
        {
          if (v10 >= v9)
            goto LABEL_76;
          v21 = *(_BYTE *)(v6 + 32 + v10);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2264C1250(v6);
            v6 = result;
          }
          *(_BYTE *)(v6 + v10 + 32) = v20;
          *(_BYTE *)(v6 + v18) = v21;
          v26 = v6;
        }
        v17 = __OFADD__(v10++, 1);
        if (v17)
          goto LABEL_73;
        v9 = *(_QWORD *)(v6 + 16);
      }
      v19 = v18 - 31;
      ++v18;
      if (v19 == v9)
        goto LABEL_23;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_3:
  if (a4)
    return v6;
LABEL_25:
  v11 = *(_QWORD *)(v6 + 16);
  if (!v11)
  {
    v12 = 0;
LABEL_34:
    sub_22650AA20(v12, v11);
    return v26;
  }
  v12 = 0;
  while (*(_BYTE *)(v6 + v12 + 32) != 3)
  {
    if (v11 == ++v12)
    {
      v12 = *(_QWORD *)(v6 + 16);
      goto LABEL_34;
    }
  }
  if (!__OFADD__(v12, 1))
  {
    if (v12 + 1 == v11)
    {
LABEL_33:
      if ((uint64_t)v11 >= v12)
        goto LABEL_34;
      goto LABEL_80;
    }
    v22 = v12 + 33;
    while (v22 - 32 < v11)
    {
      v24 = *(unsigned __int8 *)(v6 + v22);
      if (v24 != 3)
      {
        if (v22 - 32 != v12)
        {
          if (v12 >= v11)
            goto LABEL_77;
          v25 = *(_BYTE *)(v6 + 32 + v12);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2264C1250(v6);
            v6 = result;
          }
          *(_BYTE *)(v6 + v12 + 32) = v24;
          *(_BYTE *)(v6 + v22) = v25;
          v26 = v6;
        }
        v17 = __OFADD__(v12++, 1);
        if (v17)
          goto LABEL_74;
        v11 = *(_QWORD *)(v6 + 16);
      }
      v23 = v22 - 31;
      ++v22;
      if (v23 == v11)
        goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_83:
  __break(1u);
  return result;
}

uint64_t sub_2264A14EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _BYTE *v25;
  _BYTE *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  id v34;
  _OWORD *v35;
  id v36;
  __int128 v37;
  double v38;
  double v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD aBlock[6];
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;

  v2 = v1;
  v4 = sub_22655C770();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25583F9D0 != -1)
    swift_once();
  v8 = *((_QWORD *)sub_226551D14() + 2);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v64 = v7;
    v65 = v5;
    v66 = v4;
    v9 = sub_226551D14();
    v10 = v2[7];
    v11 = v2[8];
    v12 = v2[9];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v13 = sub_2264A118C((uint64_t)v9, v10, v11, v12);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_BYTE *)(v2[11] + OBJC_IVAR____TtC8RoomPlan10TmpTexture_wasUpdated) = 0;
    *(_BYTE *)(v2[12] + OBJC_IVAR____TtC8RoomPlan10TmpTexture_wasUpdated) = 0;
    v77 = 0;
    v78 = 0;
    v75 = 0.0;
    v76 = 0;
    v14 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
    v15 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
    v72 = *MEMORY[0x24BDAEDF8];
    v73 = v14;
    v74 = v15;
    sub_22649386C((uint64_t)&v76, (uint64_t)&v78, (uint64_t)&v77, (uint64_t)&v72, (uint64_t)&v75);
    if (qword_25583F950 != -1)
      swift_once();
    v16 = qword_25585AFD0;
    if (*(_BYTE *)(qword_25585AFD0 + 32) != 1)
      goto LABEL_9;
    v17 = v75;
    if (v75 <= 0.0)
      goto LABEL_9;
    *(_QWORD *)&v69 = *(_QWORD *)(qword_25585AFD0 + 40);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(double *)(v18 + 24) = v17;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_2264A1CFC;
    *(_QWORD *)(v19 + 24) = v18;
    aBlock[4] = sub_22646F0CC;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_226558F38;
    aBlock[3] = &block_descriptor_2;
    v20 = a1;
    v21 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v69, v21);
    v22 = v21;
    a1 = v20;
    _Block_release(v22);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
LABEL_9:
      v25 = off_25584AF28;
      swift_beginAccess();
      if ((v25[34] & 1) == 0)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v77 = 0;
        v78 = 0;
      }
      v26 = off_25584AF28;
      swift_beginAccess();
      if (v26[33] == 1)
      {
        v27 = v78;
        if (v78)
        {
          v28 = v76;
          if (v76)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            v29 = v2;
            v30 = sub_22655C734();
            swift_unknownObjectRetain();
            v31 = sub_226494170(v30, v28, v27);
            swift_unknownObjectRelease();
            v2 = v29;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease_n();
            v78 = (void *)v31;
          }
        }
      }
      v69 = v72;
      v68 = v73;
      v67 = v74;
      v32 = off_25584AF28;
      swift_beginAccess();
      v33 = v32[31];
      v34 = sub_22649F788();
      v35 = objc_msgSend(v34, sel_contents);
      v36 = v34;
      v37 = v68;
      *v35 = v69;
      v35[1] = v37;
      v35[2] = v67;
      *((_DWORD *)v35 + 12) = v33;
      sub_22655C728();
      sub_2264A0148(v38, v39, v40, v41);
      v42 = *(_QWORD *)(v13 + 16);
      if (!v42)
      {
        swift_bridgeObjectRelease();
        v57 = v66;
        v58 = v65;
        goto LABEL_27;
      }
      *(_QWORD *)&v69 = a1;
      *(_QWORD *)&v67 = v13 + 32;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v68 = v13;
      v43 = 0;
      do
      {
        v44 = *(_BYTE *)(v68 + v43++ + 32);
        v71 = v44;
        v45 = (void *)v2[11];
        v46 = (void *)v2[12];
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        v47 = v45;
        v48 = v46;
        sub_2264A02B0((uint64_t)&v71);
        v50 = v49;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
      }
      while (v42 != v43);
      v51 = v50;
      v52 = v69;
      v53 = v68;
      result = swift_bridgeObjectRelease();
      if (v42 <= *(_QWORD *)(v53 + 16))
      {
        v54 = *(unsigned __int8 *)(v42 + v67 - 1);
        if (v54 == 3)
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          return swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v54 == 2)
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return swift_unknownObjectRelease();
        }
        a1 = v52;
        v57 = v66;
        v58 = v65;
        v42 = v51;
LABEL_27:
        v59 = objc_msgSend((id)sub_22655C734(), sel_blitCommandEncoder);
        swift_unknownObjectRelease();
        v60 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v64, a1, v57);
        if (v42)
          v61 = v42;
        else
          v61 = sub_22655C740();
        v62 = *(void (**)(char *, uint64_t))(v58 + 8);
        swift_unknownObjectRetain();
        v62(v60, v57);
        if (v59)
        {
          swift_unknownObjectRetain();
          objc_msgSend(v59, sel_copyFromTexture_toTexture_, v61, sub_22655C758());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          objc_msgSend(v59, sel_endEncoding);
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v55 = objc_msgSend((id)sub_22655C734(), sel_blitCommandEncoder);
  result = swift_unknownObjectRelease();
  if (v55)
  {
    swift_unknownObjectRetain();
    v56 = sub_22655C740();
    objc_msgSend(v55, sel_copyFromTexture_toTexture_, v56, sub_22655C758());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    objc_msgSend(v55, sel_endEncoding);
    return swift_unknownObjectRelease();
  }
  return result;
}

